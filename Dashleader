/**
 * TeamLeadDashboard - Crisis Services Management System
 * 
 * Main script file containing core functions for the application:
 * - Sheet initialization
 * - Menu creation
 * - Show functions for all UI components
 * - Error tracking and handling
 */

// Global configuration 
const CONFIG = {
  VERSION: '1.0.0',
  SHEETS: {
    CONFIG: 'SystemConfig',
    TEAM_MEMBERS: 'TeamMembers',
    ONE_ON_ONE: 'OneOnOneNotes',
    QUALITY_REVIEWS: 'QualityReviews',
    METRICS: 'Metrics',
    ACTION_ITEMS: 'ActionItems',
    ACTION_ITEM_TAGS: 'ActionItemTags',
    ACTION_ITEM_ATTACHMENTS: 'ActionItemAttachments',
    ACTION_ITEM_REMINDERS: 'ActionItemReminders',
    REMINDER_SETTINGS: 'ReminderSettings',
    COACHING: 'CoachingNotes',
    TIME_TRACKER: 'TimeTracking',
    SCHEDULE: 'Schedule',
    MANAGER_ONE_ON_ONE: 'ManagerOneOnOne',
    GENERAL_NOTES: 'GeneralNotes',
    TASKS: 'Tasks',
    ERROR_LOG: 'ErrorLog',
    USER_PROFILES: 'UserProfiles',
    NOTIFICATION_PREFS: 'NotificationPreferences',
    ASANA_INTEGRATION: 'AsanaIntegration',
    TEAM_LEAD_INFO: 'TeamLeadInfo'
  },
  DEFAULT_THEME: 'light',
  DATE_FORMAT: 'MM/dd/yyyy',
  TIME_FORMAT: 'HH:mm:ss',
  MAX_TEAM_SIZE: 50,
  METRICS: {
    ANSWER_RATE_TARGET: 0.95,
    AVG_TALK_TIME_MIN: 15,
    AVG_TALK_TIME_MAX: 20,
    ACW_TARGET: 5,
    ON_QUEUE_TARGET: 0.65,
    INTERACTING_TIME_TARGET: 0.50
  }
};

/**
 * Runs when the spreadsheet is opened
 * Creates custom menu and initializes the system if needed
 */
function onOpen() {
  try {
    const ui = SpreadsheetApp.getUi();
    
    // Add a custom menu with emojis
    ui.createMenu('📊 Dashboard')
      .addItem('🏠 View Dashboard', 'showDashboard')
      .addSeparator()
      .addSubMenu(ui.createMenu('👥 Team Management')
        .addItem('👤 View Team Members', 'showTeamView')
        .addItem('➕ Add Team Member', 'showAddTeamMemberForm')
        .addItem('🔄 Update Status', 'showUpdateStatusForm'))
      .addSeparator()
      .addSubMenu(ui.createMenu('📋 One-on-One Notes')
        .addItem('📝 New Session', 'showOneOnOneForm')
        .addItem('📊 View Sessions', 'showOneOnOneNotes')
        .addItem('📈 Dashboard', 'showOneOnOneDashboard')
        .addItem('📤 Export Options', 'showOneOnOneExport'))
      .addSeparator()
      .addSubMenu(ui.createMenu('🤝 Manager One-on-One')
        .addItem('📝 New Session', 'showManagerOneOnOneForm')
        .addItem('📊 View Sessions', 'showManagerOneOnOneNotes')
        .addItem('📈 Dashboard', 'showManagerOneOnOneDashboard'))
      .addSeparator()
      .addSubMenu(ui.createMenu('📊 Metrics')
        .addItem('📊 Daily Metrics', 'showMetricsForm')
        .addItem('📈 Reports', 'showMetricsReports')
        .addItem('📉 Dashboard', 'showMetricsDashboard')
        .addItem('📧 Email Config', 'showMetricsEmailConfig')
        .addItem('📤 Export', 'showMetricsExport'))
      .addSeparator()
      .addSubMenu(ui.createMenu('🧪 QA Reviews')
        .addItem('📝 New Review', 'showQAReviewForm')
        .addItem('📊 View Reviews', 'showQAReports')
        .addItem('📈 Dashboard', 'showQADashboard')
        .addItem('📤 Export', 'showQAExport'))
      .addSeparator()
      .addSubMenu(ui.createMenu('📝 General Notes')
        .addItem('📝 New Note', 'showGeneralNoteForm')
        .addItem('📊 View Notes', 'showGeneralNotes')
        .addItem('📈 Dashboard', 'showGeneralNotesDashboard'))
      .addSeparator()
      .addSubMenu(ui.createMenu('⏱️ Time & Schedule')
        .addItem('⏱️ Time Tracker', 'showTeamLeadTimeTracker')
        .addItem('📊 Time Reports', 'showTimeReports')
        .addItem('📅 Manage Schedule', 'showScheduleManager')
        .addItem('🔄 Initialize Week', 'showInitializeWeekForm')
        .addItem('📈 Schedule Reports', 'showScheduleReports'))
      .addSeparator()
      .addSubMenu(ui.createMenu('✅ Tasks')
        .addItem('✅ Add Task', 'showTaskForm')
        .addItem('🌐 Add Asana Task', 'showAsanaTaskForm')
        .addItem('📋 View Tasks', 'showTasksList'))
      .addSeparator()
      .addSubMenu(ui.createMenu('📌 Action Items')
        .addItem('📝 Create Action Item', 'showActionItemsForm')
        .addItem('📋 View Action Items', 'showActionItemsView')
        .addItem('🔔 Manage Reminders', 'showActionItemsReminders'))
      .addSeparator()
      .addSubMenu(ui.createMenu('⚙️ Settings & Support')
        .addItem('⚙️ System Settings', 'showSettings')
       .addItem('👤 User Preferences', 'showUserPreferences')
       .addItem('❓ Help & Support', 'showHelp')
       .addItem('🔧 First Time Setup', 'showFirstTimeSetup')) // Add this line
      .addToUi();

    // Check if initialization is needed
    initializeSystemIfNeeded();
    
  } catch (error) {
    logError('onOpen', error);
  }
}

/**
 * Initializes the system if needed by checking for required sheets
 * and creating them if they don't exist
 */
function initializeSystemIfNeeded() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheets = ss.getSheets();
    const existingSheetNames = sheets.map(sheet => sheet.getName());
    let initialized = true;

    // Check if all required sheets exist
    for (const sheetName of Object.values(CONFIG.SHEETS)) {
      if (!existingSheetNames.includes(sheetName)) {
        initialized = false;
        break;
      }
    }

    // If not initialized, show first-time setup dialog
    if (!initialized) {
      showFirstTimeSetup();
    }
    
    // Return initialization status
    return initialized;
  } catch (error) {
    logError('initializeSystemIfNeeded', error);
    return false;
  }
}

/**
 * Creates all required sheets with appropriate headers and formatting
 */
function initializeAllSheets() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // Create Configuration Sheet
    createConfigSheet(ss);
    
    // Create Team Members Sheet
    createTeamMembersSheet(ss);
    
    // Create One-on-One Notes Sheet
    createOneOnOneSheet(ss);
    
    // Create Quality Reviews Sheet
    createQualityReviewsSheet(ss);
    
    // Create Metrics Sheet
    createMetricsSheet(ss);
    
    // Create Action Items Sheets
    createActionItemsSheet(ss);
    createActionItemTagsSheet(ss);
    createActionItemAttachmentsSheet(ss);
    createActionItemRemindersSheet(ss);
    createReminderSettingsSheet(ss);
    
    // Create Coaching Notes Sheet
    createCoachingSheet(ss);
    
    // Create Time Tracking Sheet
    createTimeTrackingSheet(ss);
    
    // Create Schedule Sheet
    createScheduleSheet(ss);
    
    // Create Manager One-on-One Sheet
    createManagerOneOnOneSheet(ss);
    
    // Create General Notes Sheet
    createGeneralNotesSheet(ss);
    
    // Create Tasks Sheet
    createTasksSheet(ss);
    
    // Create User Preferences Sheets
    createUserProfilesSheet(ss);
    createNotificationPrefsSheet(ss);
    createAsanaIntegrationSheet(ss);
    createTeamLeadInfoSheet(ss);
    
    // Create Error Log Sheet
    createErrorLogSheet(ss);
    
    // Store initialization timestamp in Config
    const configSheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
    configSheet.getRange('B2').setValue(new Date());
    
    return true;
  } catch (error) {
    logError('initializeAllSheets', error);
    return false;
  }
}

/**
 * Create Configuration Sheet
 */
function createConfigSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.CONFIG);
  
  // Set up headers
  sheet.getRange('A1:B1').setValues([['Configuration Key', 'Value']]);
  sheet.getRange('A1:B1').setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Set initial configuration values
  const configData = [
    ['initializationDate', ''],
    ['systemVersion', CONFIG.VERSION],
    ['teamLeadName', ''],
    ['teamLeadEmail', ''],
    ['teamName', ''],
    ['departmentName', ''],
    ['organizationName', ''],
    ['theme', CONFIG.DEFAULT_THEME],
    ['metricsEmailEnabled', 'FALSE'],
    ['metricsEmailRecipients', ''],
    ['lastMetricsImport', ''],
    ['lastBackupDate', '']
  ];
  
  sheet.getRange(2, 1, configData.length, 2).setValues(configData);
  
  // Format the sheet
  sheet.autoResizeColumns(1, 2);
  
  return sheet;
}

/**
 * Create Team Members Sheet
 */
function createTeamMembersSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.TEAM_MEMBERS);
  
  // Set up headers
  const headers = [
    'Team Member ID',
    'First Name',
    'Last Name',
    'Email',
    'Status',
    'Role',
    'Start Date',
    'Manager',
    'Skills',
    'Certifications',
    'Last One-on-One',
    'Next One-on-One',
    'Notes',
    'Last Modified'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create One-on-One Notes Sheet
 */
function createOneOnOneSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.ONE_ON_ONE);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.ONE_ON_ONE);
  
  // Set up headers
  const headers = [
    'Session ID',
    'Team Member ID',
    'Team Member Name',
    'Session Date',
    'Preparation Notes',
    'Discussion Topics',
    'Performance Highlights',
    'Areas for Development',
    'Action Items',
    'Follow-up Date',
    'Overall Notes',
    'Created By',
    'Created Date',
    'Modified Date'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Quality Reviews Sheet
 */
function createQualityReviewsSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.QUALITY_REVIEWS);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.QUALITY_REVIEWS);
  
  // Set up headers
  const headers = [
    'Review ID',
    'Team Member ID',
    'Team Member Name',
    'Interaction Date',
    'Interaction Type',
    'Interaction ID',
    'Opening Score',
    'Risk Assessment Score',
    'Communication Score',
    'Support Provided Score',
    'Closure Score',
    'Overall Score',
    'Strengths',
    'Areas for Improvement',
    'Action Items',
    'Follow-up Date',
    'Reviewer',
    'Review Date',
    'Modified Date'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Metrics Sheet
 */
function createMetricsSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.METRICS);
  
  // Set up headers
  const headers = [
    'Metric ID',
    'Team Member ID',
    'Team Member Name',
    'Date',
    'Calls Offered',
    'Calls Accepted',
    'Answer Rate',
    'Average Talk Time',
    'ACW Percentage',
    'On Queue Percentage',
    'Off Queue Percentage',
    'Interacting Time',
    'Notes',
    'Created Date',
    'Modified Date'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Action Items Sheet
 */
function createActionItemsSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.ACTION_ITEMS);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.ACTION_ITEMS);
  
  // Set up headers
  const headers = [
    'Action Item ID', 
    'Title', 
    'Description', 
    'Status', 
    'Priority', 
    'Due Date', 
    'Category', 
    'Source', 
    'Assignees', 
    'Created By', 
    'Created At', 
    'Modified At'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Action Item Tags Sheet
 */
function createActionItemTagsSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.ACTION_ITEM_TAGS);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.ACTION_ITEM_TAGS);
  
  // Set up headers
  const headers = ['Action Item ID', 'Tag', 'Created At'];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Action Item Attachments Sheet
 */
function createActionItemAttachmentsSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.ACTION_ITEM_ATTACHMENTS);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.ACTION_ITEM_ATTACHMENTS);
  
  // Set up headers
  const headers = [
    'Attachment ID', 
    'Action Item ID', 
    'Name', 
    'Type', 
    'Size', 
    'File ID', 
    'Created At'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Action Item Reminders Sheet
 */
function createActionItemRemindersSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
  
  // Set up headers
  const headers = [
    'Reminder ID',
    'Action Item ID',
    'Type',
    'Date',
    'Method',
    'Status',
    'Created At'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Reminder Settings Sheet
 */
function createReminderSettingsSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.REMINDER_SETTINGS);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.REMINDER_SETTINGS);
  
  // Set up headers
  const headers = [
    'User Email',
    'Default Type',
    'Default Method',
    'Email Daily',
    'Email Weekly',
    'Email Overdue',
    'Modified At'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Coaching Sheet
 */
function createCoachingSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.COACHING);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.COACHING);
  
  // Set up headers
  const headers = [
    'Coaching ID',
    'Team Member ID',
    'Team Member Name',
    'Date',
    'Coaching Type',
    'Strength Areas',
    'Growth Areas',
    'Discussion Summary',
    'Action Items',
    'Follow-up Date',
    'Created By',
    'Created Date',
    'Modified Date'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Time Tracking Sheet
 */
function createTimeTrackingSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.TIME_TRACKER);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.TIME_TRACKER);
  
  // Set up headers
  const headers = [
    'Entry ID',
    'Activity Type',
    'Description',
    'Start Time',
    'End Time',
    'Duration',
    'Date',
    'Team Members',
    'Notes',
    'Created By',
    'Created Date',
    'Modified Date'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Schedule Sheet
 */
function createScheduleSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.SCHEDULE);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.SCHEDULE);
  
  // Set up headers
  const headers = [
    'Entry ID',
    'Team Member ID',
    'Team Member Name',
    'Date',
    'Start Time',
    'End Time',
    'Status',
    'Type',
    'Notes',
    'Created By',
    'Created Date',
    'Modified Date'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Manager One-on-One Sheet
 */
function createManagerOneOnOneSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
  
  // Set up headers
  const headers = [
    'Session ID',
    'Manager Name',
    'Session Date',
    'Team Status Overview',
    'Key Performance Indicators',
    'Leadership Priorities',
    'Previous Action Items Progress',
    'Personal Wellbeing',
    'Team Performance Review',
    'Individual Counselor Concerns',
    'Team Development Strategy',
    'Leadership Strengths',
    'Growth Opportunities',
    'Skill Development Plan',
    'Team Lead Commitments',
    'Manager Commitments',
    'Next Session Date',
    'Created Date',
    'Modified Date'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create General Notes Sheet
 */
function createGeneralNotesSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.GENERAL_NOTES);
  
  // Set up headers
  const headers = [
    'Note ID',
    'Title',
    'Category',
    'Date',
    'Content',
    'Tags',
    'Related Team Members',
    'Created By',
    'Created Date',
    'Modified Date'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Tasks Sheet
 */
function createTasksSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.TASKS);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.TASKS);
  
  // Set up headers
  const headers = [
    'Task ID',
    'Title',
    'Description',
    'Assigned To',
    'Due Date',
    'Priority',
    'Status',
    'Category',
    'External ID',
    'External System',
    'Completion Date',
    'Created By',
    'Created Date',
    'Modified Date'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create User Profiles Sheet
 */
function createUserProfilesSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.USER_PROFILES);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.USER_PROFILES);
  
  // Set up headers
  const headers = [
    'User Email', 
    'Name', 
    'Display Name', 
    'Job Title', 
    'Department', 
    'Timezone', 
    'Bio', 
    'Avatar URL',
    'Created At', 
    'Modified At'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Notification Preferences Sheet
 */
function createNotificationPrefsSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.NOTIFICATION_PREFS);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.NOTIFICATION_PREFS);
  
  // Set up headers
  const headers = [
    'User Email',
    'Task Assignment Email', 
    'Task Update Email', 
    'Action Item Email',
    'QA Review Email', 
    'Weekly Digest Email',
    'Task Assignment In-App', 
    'Task Update In-App', 
    'Action Item In-App',
    'QA Review In-App',
    'Modified At'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Asana Integration Sheet
 */
function createAsanaIntegrationSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.ASANA_INTEGRATION);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.ASANA_INTEGRATION);
  
  // Set up headers
  const headers = [
    'User Email', 
    'API Key', 
    'Connected', 
    'Workspace ID',
    'Project ID', 
    'Auto Sync', 
    'Sync Frequency',
    'Last Synced At', 
    'Modified At'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Team Lead Info Sheet
 */
function createTeamLeadInfoSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_LEAD_INFO);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.TEAM_LEAD_INFO);
  
  // Set up headers
  const headers = [
    'User Email', 
    'Is Team Lead', 
    'Team Name', 
    'Team Size',
    'Team Department', 
    'Management Level', 
    'Manager Email',
    'Team Description', 
    'Track Productivity', 
    'Track Quality',
    'Track Task Completion', 
    'Track Time', 
    'Reporting Frequency',
    'Modified At'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Create Error Log Sheet
 */
function createErrorLogSheet(ss) {
  // Check if sheet already exists
  let sheet = ss.getSheetByName(CONFIG.SHEETS.ERROR_LOG);
  if (sheet) {
    return sheet;
  }
  
  // Create new sheet
  sheet = ss.insertSheet(CONFIG.SHEETS.ERROR_LOG);
  
  // Set up headers
  const headers = [
    'Error ID',
    'Timestamp',
    'Function',
    'Message',
    'Stack',
    'User',
    'Additional Info'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
  sheet.setFrozenRows(1);
  
  // Format the sheet
  sheet.autoResizeColumns(1, headers.length);
  
  return sheet;
}

/**
 * Error logging function
 * Records errors to the ErrorLog sheet
 */
function logError(functionName, error, additionalInfo = '') {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.ERROR_LOG);
    
    if (!sheet) {
      // Create the error log sheet if it doesn't exist
      createErrorLogSheet(ss);
    }
    
    // Generate a unique error ID
    const errorId = Utilities.getUuid();
    
    // Get current user information
    const user = Session.getEffectiveUser().getEmail();
    
    // Get error details
    const timestamp = new Date();
    const message = error.toString();
    const stack = error.stack || 'No stack trace available';
    
    // Log the error to the sheet
    sheet.appendRow([
      errorId,
      timestamp,
      functionName,
      message,
      stack,
      user,
      additionalInfo
    ]);
    
    // Log to console as well
    console.error(`Error in ${functionName}: ${message}`);
    console.error(stack);
    
    return errorId;
  } catch (e) {
    // Fallback if error logging itself fails
    console.error('Error in logError function:', e);
    console.error('Original error:', error);
    return null;
  }
}

/**
 * First time setup dialog
 */
function showFirstTimeSetup() {
  const htmlOutput = HtmlService
    .createHtmlOutputFromFile('FirstTimeSetup')
    .setWidth(600)
    .setHeight(500)
    .setTitle('Team Lead Dashboard Setup');
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Team Lead Dashboard Setup');
}

/**
 * Completes the initial setup of the system
 */
function completeInitialSetup(setupData) {
  try {
    // Initialize all sheets
    initializeAllSheets();
    
    // Store setup data in config sheet
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
    
    // Update configuration values
    const configKeys = {
      'teamLeadName': setupData.teamLeadName,
      'teamLeadEmail': setupData.teamLeadEmail,
      'teamName': setupData.teamName,
      'departmentName': setupData.departmentName,
      'organizationName': setupData.organizationName,
      'theme': setupData.theme || CONFIG.DEFAULT_THEME
    };
    
    // Find and update each config key
    Object.keys(configKeys).forEach(key => {
      const findRow = findRowByKey(configSheet, key, 1);
      if (findRow > 0) {
        configSheet.getRange(findRow, 2).setValue(configKeys[key]);
      }
    });
    
    return { success: true, message: 'Setup completed successfully!' };
  } catch (error) {
    logError('completeInitialSetup', error);
    return { success: false, message: 'Error during setup: ' + error.toString() };
  }
}

/**
 * Helper function to find a row by key value in a specific column
 */
function findRowByKey(sheet, keyValue, keyColumn) {
  const data = sheet.getDataRange().getValues();
  for (let i = 0; i < data.length; i++) {
    if (data[i][keyColumn - 1] === keyValue) {
      return i + 1;
    }
  }
  return -1;
}

/**
 * Get system configuration
 */
function getSystemConfig() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
    
    if (!configSheet) {
      return { success: false, message: 'Configuration sheet not found', data: {} };
    }
    
    const data = configSheet.getDataRange().getValues();
    const config = {};
    
    // Skip the header row
    for (let i = 1; i < data.length; i++) {
      config[data[i][0]] = data[i][1];
    }
    
    return { success: true, data: config };
  } catch (error) {
    logError('getSystemConfig', error);
    return { success: false, message: error.toString(), data: {} };
  }
}

/**
 * 👥 Get all team members
 * @return {Object} Result with team members data
 */
function getAllTeamMembers() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!sheet) {
      return {
        success: false,
        message: 'Team Members sheet not found. Please run initialization.',
        data: []
      };
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return { 
        success: true, 
        message: 'No team members found.', 
        data: [] 
      };
    }
    
    const data = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    const teamMembers = data
      .filter(row => row[0]) // Filter out empty rows
      .map(row => {
        const member = {};
        headers.forEach((header, index) => {
          member[header] = row[index];
        });
        return member;
      });
    
    return { 
      success: true, 
      data: teamMembers 
    };
  } catch (error) {
    logError('getAllTeamMembers', error);
    return { 
      success: false, 
      message: 'Error retrieving team members: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 🧠 Get all team members with proper caching
 * @return {Object} Result with team members data
 */
function getAllTeamMembersWithCache() {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cachedData = cache.get('teamMembersCache');
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    // If not in cache, get from spreadsheet
    const result = getAllTeamMembers();
    
    // Add full name property for convenience
    if (result.success && result.data) {
      result.data.forEach(member => {
        member['Full Name'] = `${member['First Name']} ${member['Last Name']}`;
      });
      
      // Cache the result for 5 minutes
      cache.put('teamMembersCache', JSON.stringify(result), 300);
    }
    
    return result;
  } catch (error) {
    logError('getAllTeamMembersWithCache', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * 🧠 Get all active team members for dropdowns and forms
 * @return {Object} Result with active team members data
 */
function getActiveTeamMembers() {
  try {
    const result = getAllTeamMembersWithCache();
    
    if (!result.success) {
      return result; // Return the error
    }
    
    // Filter for active members only
    const activeMembers = result.data.filter(m => m['Status'] === 'Active');
    
    return {
      success: true,
      data: activeMembers
    };
  } catch (error) {
    logError('getActiveTeamMembers', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * 🧹 Clear team member cache after changes
 * This should be called after adding, updating, or deleting team members
 * @return {Boolean} Success flag
 */
function clearTeamMemberCache() {
  try {
    CacheService.getScriptCache().remove('teamMembersCache');
    CacheService.getScriptCache().remove('activeTeamMembersCache');
    return true;
  } catch (error) {
    logError('clearTeamMemberCache', error);
    return false;
  }
}

/**
 * 📋 Get team member options for dropdowns with manual entry support
 * @return {Object} Result with team member options
 */
function getTeamMemberOptions() {
  try {
    const result = getActiveTeamMembers();
    
    if (!result.success || result.data.length === 0) {
      return {
        success: false,
        message: "No team members found. Please add team members first.",
        data: []
      };
    }
    
    // Format data for select dropdowns
    const options = result.data.map(member => ({
      id: member['Team Member ID'],
      name: member['Full Name'],
      firstName: member['First Name'],
      lastName: member['Last Name'],
      email: member['Email'] || ''
    }));
    
    return {
      success: true,
      data: options
    };
  } catch (error) {
    logError('getTeamMemberOptions', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * 🔍 Find team member by name or email (for manual entry support)
 * @param {String} searchText - Text to search for
 * @return {Object} Result with matching team members
 */
function findTeamMembersByText(searchText) {
  try {
    if (!searchText || searchText.trim().length < 2) {
      return { success: false, message: 'Search text too short', data: [] };
    }
    
    const result = getAllTeamMembersWithCache();
    
    if (!result.success) {
      return result;
    }
    
    const search = searchText.toLowerCase().trim();
    
    // Find matches
    const matches = result.data.filter(member => {
      const fullName = `${member['First Name']} ${member['Last Name']}`.toLowerCase();
      const email = (member['Email'] || '').toLowerCase();
      
      return fullName.includes(search) || email.includes(search);
    });
    
    // Format for UI
    const formattedMatches = matches.map(member => ({
      id: member['Team Member ID'],
      name: `${member['First Name']} ${member['Last Name']}`,
      email: member['Email'] || ''
    }));
    
    return {
      success: true,
      data: formattedMatches
    };
  } catch (error) {
    logError('findTeamMembersByText', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

// ============================================================================
// SHOW FUNCTIONS (referenced in the OnOpenMenu)
// ============================================================================

/**
 * Shows the main dashboard
 */
function showDashboard() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('Dashboard')
      .evaluate()
      .setTitle('Team Lead Dashboard')
      .setWidth(1200)
      .setHeight(800);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Team Lead Dashboard');
  } catch (error) {
    logError('showDashboard', error);
    showErrorMessage('Error loading dashboard: ' + error.toString());
  }
}

/**
 * Shows the team members view
 */
function showTeamView() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('TeamView')
      .evaluate()
      .setTitle('Team Members')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Team Members');
  } catch (error) {
    logError('showTeamView', error);
    showErrorMessage('Error loading team view: ' + error.toString());
  }
}

/**
 * Shows the form to add a new team member
 */
function showAddTeamMemberForm() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('AddTeamMember')
      .evaluate()
      .setTitle('Add Team Member')
      .setWidth(600)
      .setHeight(650);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Add Team Member');
  } catch (error) {
    logError('showAddTeamMemberForm', error);
    showErrorMessage('Error loading add team member form: ' + error.toString());
  }
}

/**
 * Shows the form to update team member status
 */
function showUpdateStatusForm() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('UpdateStatus')
      .evaluate()
      .setTitle('Update Status')
      .setWidth(500)
      .setHeight(450);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Update Team Member Status');
  } catch (error) {
    logError('showUpdateStatusForm', error);
    showErrorMessage('Error loading update status form: ' + error.toString());
  }
}

/**
 * Shows the form to create a new one-on-one session
 */
function showOneOnOneForm() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('OneOnOneForm')
      .evaluate()
      .setTitle('New One-on-One Session')
      .setWidth(900)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'New One-on-One Session');
  } catch (error) {
    logError('showOneOnOneForm', error);
    showErrorMessage('Error loading one-on-one form: ' + error.toString());
  }
}

/**
 * Shows the one-on-one notes view
 */
function showOneOnOneNotes() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('OneOnOneNotes')
      .evaluate()
      .setTitle('One-on-One Notes')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'One-on-One Notes');
  } catch (error) {
    logError('showOneOnOneNotes', error);
    showErrorMessage('Error loading one-on-one notes: ' + error.toString());
  }
}

/**
 * Shows the one-on-one dashboard
 */
function showOneOnOneDashboard() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('OneOnOneDashboard')
      .evaluate()
      .setTitle('One-on-One Dashboard')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'One-on-One Dashboard');
  } catch (error) {
    logError('showOneOnOneDashboard', error);
    showErrorMessage('Error loading one-on-one dashboard: ' + error.toString());
  }
}

/**
 * Shows one-on-one export options
 */
function showOneOnOneExport() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('OneOnOneExport')
      .evaluate()
      .setTitle('Export One-on-One Notes')
      .setWidth(500)
      .setHeight(400);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Export One-on-One Notes');
  } catch (error) {
    logError('showOneOnOneExport', error);
    showErrorMessage('Error loading one-on-one export: ' + error.toString());
  }
}

/**
 * Shows the form to create a new manager one-on-one session
 */
function showManagerOneOnOneForm() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('ManagerOneOnOneForm')
      .evaluate()
      .setTitle('New Manager One-on-One Session')
      .setWidth(900)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'New Manager One-on-One Session');
  } catch (error) {
    logError('showManagerOneOnOneForm', error);
    showErrorMessage('Error loading manager one-on-one form: ' + error.toString());
  }
}

/**
 * Shows the manager one-on-one notes view
 */
function showManagerOneOnOneNotes() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('ManagerOneOnOneNotes')
      .evaluate()
      .setTitle('Manager One-on-One Notes')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Manager One-on-One Notes');
  } catch (error) {
    logError('showManagerOneOnOneNotes', error);
    showErrorMessage('Error loading manager one-on-one notes: ' + error.toString());
  }
}

/**
 * Shows the manager one-on-one dashboard
 */
function showManagerOneOnOneDashboard() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('ManagerOneOnOneDashboard')
      .evaluate()
      .setTitle('Manager One-on-One Dashboard')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Manager One-on-One Dashboard');
  } catch (error) {
    logError('showManagerOneOnOneDashboard', error);
    showErrorMessage('Error loading manager one-on-one dashboard: ' + error.toString());
  }
}

/**
 * Shows the metrics form
 */
function showMetricsForm() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('MetricsForm')
      .evaluate()
      .setTitle('Daily Metrics')
      .setWidth(800)
      .setHeight(600);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Daily Metrics');
  } catch (error) {
    logError('showMetricsForm', error);
    showErrorMessage('Error loading metrics form: ' + error.toString());
  }
}

/**
 * Shows the metrics reports
 */
function showMetricsReports() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('MetricsReports')
      .evaluate()
      .setTitle('Metrics Reports')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Metrics Reports');
  } catch (error) {
    logError('showMetricsReports', error);
    showErrorMessage('Error loading metrics reports: ' + error.toString());
  }
}

/**
 * Shows the metrics dashboard
 */
function showMetricsDashboard() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('MetricsDashboard')
      .evaluate()
      .setTitle('Metrics Dashboard')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Metrics Dashboard');
  } catch (error) {
    logError('showMetricsDashboard', error);
    showErrorMessage('Error loading metrics dashboard: ' + error.toString());
  }
}

/**
 * Shows the metrics email configuration
 */
function showMetricsEmailConfig() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('MetricsEmailConfig')
      .evaluate()
      .setTitle('Metrics Email Configuration')
      .setWidth(600)
      .setHeight(500);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Metrics Email Configuration');
  } catch (error) {
    logError('showMetricsEmailConfig', error);
    showErrorMessage('Error loading metrics email configuration: ' + error.toString());
  }
}

/**
 * Shows the metrics export options
 */
function showMetricsExport() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('MetricsExport')
      .evaluate()
      .setTitle('Export Metrics')
      .setWidth(500)
      .setHeight(400);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Export Metrics');
  } catch (error) {
    logError('showMetricsExport', error);
    showErrorMessage('Error loading metrics export: ' + error.toString());
  }
}

/**
 * Shows the QA review form
 */
function showQAReviewForm() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('QAReviewForm')
      .evaluate()
      .setTitle('New Quality Review')
      .setWidth(900)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'New Quality Review');
  } catch (error) {
    logError('showQAReviewForm', error);
    showErrorMessage('Error loading QA review form: ' + error.toString());
  }
}

/**
 * Shows the QA reports
 */
function showQAReports() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('QAReports')
      .evaluate()
      .setTitle('Quality Review Reports')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Quality Review Reports');
  } catch (error) {
    logError('showQAReports', error);
    showErrorMessage('Error loading QA reports: ' + error.toString());
  }
}

/**
 * Shows the QA dashboard
 */
function showQADashboard() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('QADashboard')
      .evaluate()
      .setTitle('Quality Review Dashboard')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Quality Review Dashboard');
  } catch (error) {
    logError('showQADashboard', error);
    showErrorMessage('Error loading QA dashboard: ' + error.toString());
  }
}

/**
 * Shows the QA export options
 */
function showQAExport() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('QAExport')
      .evaluate()
      .setTitle('Export Quality Reviews')
      .setWidth(500)
      .setHeight(400);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Export Quality Reviews');
  } catch (error) {
    logError('showQAExport', error);
    showErrorMessage('Error loading QA export: ' + error.toString());
  }
}

/**
 * Shows the general note form
 */
function showGeneralNoteForm() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('GeneralNoteForm')
      .evaluate()
      .setTitle('New General Note')
      .setWidth(800)
      .setHeight(600);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'New General Note');
  } catch (error) {
    logError('showGeneralNoteForm', error);
    showErrorMessage('Error loading general note form: ' + error.toString());
  }
}

/**
 * Shows the general notes view
 */
function showGeneralNotes() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('GeneralNotes')
      .evaluate()
      .setTitle('General Notes')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'General Notes');
  } catch (error) {
    logError('showGeneralNotes', error);
    showErrorMessage('Error loading general notes: ' + error.toString());
  }
}

/**
 * Shows the general notes dashboard
 */
function showGeneralNotesDashboard() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('GeneralNotesDashboard')
      .evaluate()
      .setTitle('General Notes Dashboard')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'General Notes Dashboard');
  } catch (error) {
    logError('showGeneralNotesDashboard', error);
    showErrorMessage('Error loading general notes dashboard: ' + error.toString());
  }
}

/**
 * Shows the team lead time tracker
 */
function showTeamLeadTimeTracker() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('TimeTracker')
      .evaluate()
      .setTitle('Time Tracker')
      .setWidth(800)
      .setHeight(600);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Time Tracker');
  } catch (error) {
    logError('showTeamLeadTimeTracker', error);
    showErrorMessage('Error loading time tracker: ' + error.toString());
  }
}

/**
 * Shows the time reports
 */
function showTimeReports() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('TimeReports')
      .evaluate()
      .setTitle('Time Reports')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Time Reports');
  } catch (error) {
    logError('showTimeReports', error);
    showErrorMessage('Error loading time reports: ' + error.toString());
  }
}

/**
 * Shows the schedule manager
 */
function showScheduleManager() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('ScheduleManager')
      .evaluate()
      .setTitle('Schedule Manager')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Schedule Manager');
  } catch (error) {
    logError('showScheduleManager', error);
    showErrorMessage('Error loading schedule manager: ' + error.toString());
  }
}

/**
 * Shows the initialize week form
 */
function showInitializeWeekForm() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('InitializeWeek')
      .evaluate()
      .setTitle('Initialize Week')
      .setWidth(600)
      .setHeight(500);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Initialize Week');
  } catch (error) {
    logError('showInitializeWeekForm', error);
    showErrorMessage('Error loading initialize week form: ' + error.toString());
  }
}

/**
 * Shows the schedule reports
 */
function showScheduleReports() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('ScheduleReports')
      .evaluate()
      .setTitle('Schedule Reports')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Schedule Reports');
  } catch (error) {
    logError('showScheduleReports', error);
    showErrorMessage('Error loading schedule reports: ' + error.toString());
  }
}

/**
 * Shows the task form
 */
function showTaskForm() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('TaskForm')
      .evaluate()
      .setTitle('Add Task')
      .setWidth(700)
      .setHeight(600);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Add Task');
  } catch (error) {
    logError('showTaskForm', error);
    showErrorMessage('Error loading task form: ' + error.toString());
  }
}

/**
 * Shows the Asana task form
 */
function showAsanaTaskForm() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('AsanaTaskForm')
      .evaluate()
      .setTitle('Add Asana Task')
      .setWidth(700)
      .setHeight(600);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Add Asana Task');
  } catch (error) {
    logError('showAsanaTaskForm', error);
    showErrorMessage('Error loading Asana task form: ' + error.toString());
  }
}

/**
 * Shows the tasks list
 */
function showTasksList() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('TasksList')
      .evaluate()
      .setTitle('Tasks')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Tasks');
  } catch (error) {
    logError('showTasksList', error);
    showErrorMessage('Error loading tasks list: ' + error.toString());
  }
}

/**
 * Shows the action items form
 * @param {String} actionItemId - Optional action item ID for editing
 */
function showActionItemsForm(actionItemId) {
  try {
    const url = 'action-items-form';
    
    let template = HtmlService.createTemplateFromFile(url);
    
    // If actionItemId provided, add it to template
    if (actionItemId) {
      template.actionItemId = actionItemId;
    }
    
    const html = template.evaluate()
      .setTitle('Action Items')
      .setWidth(800)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showModalDialog(html, '📋 Action Items');
  } catch (error) {
    logError('showActionItemsForm', error);
    showErrorMessage('Error loading action items form: ' + error.toString());
  }
}

/**
 * Shows the action items view
 * @param {String} actionItemId - Optional action item ID to view details
 */
function showActionItemsView(actionItemId) {
  try {
    const url = 'action-items-view';
    
    let template = HtmlService.createTemplateFromFile(url);
    
    // If actionItemId provided, add it to template
    if (actionItemId) {
      template.actionItemId = actionItemId;
    }
    
    const html = template.evaluate()
      .setTitle('Action Items')
      .setWidth(1200)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showModalDialog(html, '📋 Action Items');
  } catch (error) {
    logError('showActionItemsView', error);
    showErrorMessage('Error loading action items view: ' + error.toString());
  }
}

/**
 * Shows the action items reminders
 */
function showActionItemsReminders() {
  try {
    const html = HtmlService.createTemplateFromFile('action-items-reminders')
      .evaluate()
      .setTitle('Action Item Reminders')
      .setWidth(800)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showModalDialog(html, '🔔 Action Item Reminders');
  } catch (error) {
    logError('showActionItemsReminders', error);
    showErrorMessage('Error loading action items reminders: ' + error.toString());
  }
}

/**
 * Shows the settings
 */
function showSettings() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('settings')
      .evaluate()
      .setTitle('System Settings')
      .setWidth(1000)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, '⚙️ System Settings');
  } catch (error) {
    logError('showSettings', error);
    showErrorMessage('Error showing settings: ' + error.toString());
  }
}

/**
 * Shows the user preferences
 */
function showUserPreferences() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('user-preferences')
      .evaluate()
      .setTitle('User Preferences')
      .setWidth(800)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, '👤 User Preferences');
  } catch (error) {
    logError('showUserPreferences', error);
    showErrorMessage('Error showing user preferences: ' + error.toString());
  }
}

/**
 * Shows the help documentation
 */
function showHelp() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('help')
      .evaluate()
      .setTitle('Help & Documentation')
      .setWidth(1000)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, '❓ Help & Documentation');
  } catch (error) {
    logError('showHelp', error);
    showErrorMessage('Error showing help: ' + error.toString());
  }
}

/**
 * Navigate to a specific sheet
 * Used by settings page for sheet validation
 */
function navigateToSheet(sheetName) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(sheetName);
    
    if (sheet) {
      ss.setActiveSheet(sheet);
      return { success: true };
    } else {
      return { success: false, message: 'Sheet not found' };
    }
  } catch (error) {
        logError('navigateToSheet', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * Create a specific sheet with required headers (used by settings)
 */
function createSheet(sheetName) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // Check if sheet already exists
    if (ss.getSheetByName(sheetName)) {
      return { success: false, message: 'Sheet already exists' };
    }
    
    // Create sheet based on its name using existing functions
    switch (sheetName) {
      case CONFIG.SHEETS.CONFIG:
        createConfigSheet(ss);
        break;
      case CONFIG.SHEETS.TEAM_MEMBERS:
        createTeamMembersSheet(ss);
        break;
      case CONFIG.SHEETS.ONE_ON_ONE:
        createOneOnOneSheet(ss);
        break;
      case CONFIG.SHEETS.QUALITY_REVIEWS:
        createQualityReviewsSheet(ss);
        break;
      case CONFIG.SHEETS.METRICS:
        createMetricsSheet(ss);
        break;
      case CONFIG.SHEETS.ACTION_ITEMS:
        createActionItemsSheet(ss);
        break;
      case CONFIG.SHEETS.ACTION_ITEM_TAGS:
        createActionItemTagsSheet(ss);
        break;
      case CONFIG.SHEETS.ACTION_ITEM_ATTACHMENTS:
        createActionItemAttachmentsSheet(ss);
        break;
      case CONFIG.SHEETS.ACTION_ITEM_REMINDERS:
        createActionItemRemindersSheet(ss);
        break;
      case CONFIG.SHEETS.REMINDER_SETTINGS:
        createReminderSettingsSheet(ss);
        break;
      case CONFIG.SHEETS.COACHING:
        createCoachingSheet(ss);
        break;
      case CONFIG.SHEETS.TIME_TRACKER:
        createTimeTrackingSheet(ss);
        break;
      case CONFIG.SHEETS.SCHEDULE:
        createScheduleSheet(ss);
        break;
      case CONFIG.SHEETS.MANAGER_ONE_ON_ONE:
        createManagerOneOnOneSheet(ss);
        break;
      case CONFIG.SHEETS.GENERAL_NOTES:
        createGeneralNotesSheet(ss);
        break;
      case CONFIG.SHEETS.TASKS:
        createTasksSheet(ss);
        break;
      case CONFIG.SHEETS.USER_PROFILES:
        createUserProfilesSheet(ss);
        break;
      case CONFIG.SHEETS.NOTIFICATION_PREFS:
        createNotificationPrefsSheet(ss);
        break;
      case CONFIG.SHEETS.ASANA_INTEGRATION:
        createAsanaIntegrationSheet(ss);
        break;
      case CONFIG.SHEETS.TEAM_LEAD_INFO:
        createTeamLeadInfoSheet(ss);
        break;
      case CONFIG.SHEETS.ERROR_LOG:
        createErrorLogSheet(ss);
        break;
      default:
        return { success: false, message: 'Unknown sheet name: ' + sheetName };
    }
    
    return { success: true };
  } catch (error) {
    logError('createSheet', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * Fix sheet headers to match required format (used by settings)
 */
function fixSheetHeaders(sheetName) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(sheetName);
    
    if (!sheet) {
      return { success: false, message: 'Sheet not found' };
    }
    
    // Get required headers based on sheet name
    let requiredHeaders = [];
    switch (sheetName) {
      case CONFIG.SHEETS.CONFIG:
        requiredHeaders = ['Configuration Key', 'Value'];
        break;
      case CONFIG.SHEETS.TEAM_MEMBERS:
        requiredHeaders = [
          'Team Member ID', 'First Name', 'Last Name', 'Email',
          'Status', 'Role', 'Start Date', 'Manager', 'Skills',
          'Certifications', 'Last One-on-One', 'Next One-on-One',
          'Notes', 'Last Modified'
        ];
        break;
      case CONFIG.SHEETS.ONE_ON_ONE:
        requiredHeaders = [
          'Session ID', 'Team Member ID', 'Team Member Name', 'Session Date',
          'Preparation Notes', 'Discussion Topics', 'Performance Highlights',
          'Areas for Development', 'Action Items', 'Follow-up Date',
          'Overall Notes', 'Created By', 'Created Date', 'Modified Date'
        ];
        break;
      case CONFIG.SHEETS.QUALITY_REVIEWS:
        requiredHeaders = [
          'Review ID', 'Team Member ID', 'Team Member Name', 'Interaction Date',
          'Interaction Type', 'Interaction ID', 'Opening Score', 'Risk Assessment Score',
          'Communication Score', 'Support Provided Score', 'Closure Score',
          'Overall Score', 'Strengths', 'Areas for Improvement', 'Action Items',
          'Follow-up Date', 'Reviewer', 'Review Date', 'Modified Date'
        ];
        break;
      case CONFIG.SHEETS.METRICS:
        requiredHeaders = [
          'Metric ID', 'Team Member ID', 'Team Member Name', 'Date',
          'Calls Offered', 'Calls Accepted', 'Answer Rate', 'Average Talk Time',
          'ACW Percentage', 'On Queue Percentage', 'Off Queue Percentage',
          'Interacting Time', 'Notes', 'Created Date', 'Modified Date'
        ];
        break;
      case CONFIG.SHEETS.ACTION_ITEMS:
        requiredHeaders = [
          'Action Item ID', 'Title', 'Description', 'Status', 
          'Priority', 'Due Date', 'Category', 'Source', 
          'Assignees', 'Created By', 'Created At', 'Modified At'
        ];
        break;
      case CONFIG.SHEETS.ACTION_ITEM_TAGS:
        requiredHeaders = ['Action Item ID', 'Tag', 'Created At'];
        break;
      case CONFIG.SHEETS.ACTION_ITEM_ATTACHMENTS:
        requiredHeaders = [
          'Attachment ID', 'Action Item ID', 'Name', 'Type', 
          'Size', 'File ID', 'Created At'
        ];
        break;
      case CONFIG.SHEETS.ACTION_ITEM_REMINDERS:
        requiredHeaders = [
          'Reminder ID', 'Action Item ID', 'Type', 'Date',
          'Method', 'Status', 'Created At'
        ];
        break;
      case CONFIG.SHEETS.REMINDER_SETTINGS:
        requiredHeaders = [
          'User Email', 'Default Type', 'Default Method', 'Email Daily',
          'Email Weekly', 'Email Overdue', 'Modified At'
        ];
        break;
      case CONFIG.SHEETS.COACHING:
        requiredHeaders = [
          'Coaching ID', 'Team Member ID', 'Team Member Name', 'Date',
          'Coaching Type', 'Strength Areas', 'Growth Areas', 'Discussion Summary',
          'Action Items', 'Follow-up Date', 'Created By', 'Created Date', 'Modified Date'
        ];
        break;
      case CONFIG.SHEETS.TIME_TRACKER:
        requiredHeaders = [
          'Entry ID', 'Activity Type', 'Description', 'Start Time',
          'End Time', 'Duration', 'Date', 'Team Members', 'Notes',
          'Created By', 'Created Date', 'Modified Date'
        ];
        break;
      case CONFIG.SHEETS.SCHEDULE:
        requiredHeaders = [
          'Entry ID', 'Team Member ID', 'Team Member Name', 'Date',
          'Start Time', 'End Time', 'Status', 'Type', 'Notes',
          'Created By', 'Created Date', 'Modified Date'
        ];
        break;
      case CONFIG.SHEETS.MANAGER_ONE_ON_ONE:
        requiredHeaders = [
          'Session ID', 'Manager Name', 'Session Date', 'Team Status Overview',
          'Key Performance Indicators', 'Leadership Priorities', 'Previous Action Items Progress',
          'Personal Wellbeing', 'Team Performance Review', 'Individual Counselor Concerns',
          'Team Development Strategy', 'Leadership Strengths', 'Growth Opportunities',
          'Skill Development Plan', 'Team Lead Commitments', 'Manager Commitments',
          'Next Session Date', 'Created Date', 'Modified Date'
        ];
        break;
      case CONFIG.SHEETS.GENERAL_NOTES:
        requiredHeaders = [
          'Note ID', 'Title', 'Category', 'Date', 'Content',
          'Tags', 'Related Team Members', 'Created By',
          'Created Date', 'Modified Date'
        ];
        break;
      case CONFIG.SHEETS.TASKS:
        requiredHeaders = [
          'Task ID', 'Title', 'Description', 'Assigned To', 'Due Date',
          'Priority', 'Status', 'Category', 'External ID', 'External System',
          'Completion Date', 'Created By', 'Created Date', 'Modified Date'
        ];
        break;
      case CONFIG.SHEETS.USER_PROFILES:
        requiredHeaders = [
          'User Email', 'Name', 'Display Name', 'Job Title', 
          'Department', 'Timezone', 'Bio', 'Avatar URL',
          'Created At', 'Modified At'
        ];
        break;
      case CONFIG.SHEETS.NOTIFICATION_PREFS:
        requiredHeaders = [
          'User Email', 'Task Assignment Email', 'Task Update Email', 'Action Item Email',
          'QA Review Email', 'Weekly Digest Email', 'Task Assignment In-App', 
          'Task Update In-App', 'Action Item In-App', 'QA Review In-App', 'Modified At'
        ];
        break;
      case CONFIG.SHEETS.ASANA_INTEGRATION:
        requiredHeaders = [
          'User Email', 'API Key', 'Connected', 'Workspace ID',
          'Project ID', 'Auto Sync', 'Sync Frequency', 
          'Last Synced At', 'Modified At'
        ];
        break;
      case CONFIG.SHEETS.TEAM_LEAD_INFO:
        requiredHeaders = [
          'User Email', 'Is Team Lead', 'Team Name', 'Team Size',
          'Team Department', 'Management Level', 'Manager Email',
          'Team Description', 'Track Productivity', 'Track Quality',
          'Track Task Completion', 'Track Time', 'Reporting Frequency',
          'Modified At'
        ];
        break;
      case CONFIG.SHEETS.ERROR_LOG:
        requiredHeaders = [
          'Error ID', 'Timestamp', 'Function', 'Message',
          'Stack', 'User', 'Additional Info'
        ];
        break;
      default:
        return { success: false, message: 'Unknown sheet name: ' + sheetName };
    }
    
    // Get current headers
    const currentHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Check if headers match, if not, reset headers
    let headersMatch = true;
    if (currentHeaders.length !== requiredHeaders.length) {
      headersMatch = false;
    } else {
      for (let i = 0; i < requiredHeaders.length; i++) {
        if (currentHeaders[i] !== requiredHeaders[i]) {
          headersMatch = false;
          break;
        }
      }
    }
    
    if (!headersMatch) {
      // Clear existing headers and set new ones
      sheet.getRange(1, 1, 1, Math.max(currentHeaders.length, requiredHeaders.length)).clearContent();
      sheet.getRange(1, 1, 1, requiredHeaders.length).setValues([requiredHeaders]);
      sheet.getRange(1, 1, 1, requiredHeaders.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
      
      // Format the sheet
      sheet.autoResizeColumns(1, requiredHeaders.length);
    }
    
    return { success: true };
  } catch (error) {
    logError('fixSheetHeaders', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * Validate all sheets in the system
 * Used by settings page
 */
function validateSheets() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheetNames = Object.values(CONFIG.SHEETS);
    const validation = [];
    
    for (const sheetName of sheetNames) {
      const sheet = ss.getSheetByName(sheetName);
      
      // Get required headers for this sheet
      let requiredHeaders = [];
      switch (sheetName) {
        case CONFIG.SHEETS.CONFIG:
          requiredHeaders = ['Configuration Key', 'Value'];
          break;
        case CONFIG.SHEETS.TEAM_MEMBERS:
          requiredHeaders = [
            'Team Member ID', 'First Name', 'Last Name', 'Email',
            'Status', 'Role', 'Start Date', 'Manager', 'Skills',
            'Certifications', 'Last One-on-One', 'Next One-on-One',
            'Notes', 'Last Modified'
          ];
          break;
        // ... (Similar cases for all other sheet types)
        // For brevity, not repeating all the sheet header definitions here
        default:
          requiredHeaders = [];
      }
      
      if (sheet) {
        // Sheet exists, verify headers
        const currentHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
        let validHeaders = 0;
        
        for (const header of requiredHeaders) {
          if (currentHeaders.includes(header)) {
            validHeaders++;
          }
        }
        
        validation.push({
          name: sheetName,
          exists: true,
          requiredHeaders: requiredHeaders,
          validHeaders: validHeaders
        });
      } else {
        // Sheet doesn't exist
        validation.push({
          name: sheetName,
          exists: false,
          requiredHeaders: requiredHeaders,
          validHeaders: 0
        });
      }
    }
    
    return {
      success: true,
      validation: validation
    };
  } catch (error) {
    logError('validateSheets', error);
    return {
      success: false,
      message: error.toString()
    };
  }
}

/**
 * Create all missing sheets
 * Used by settings page
 */
function createMissingSheets() {
  try {
    initializeAllSheets();
    return { success: true };
  } catch (error) {
    logError('createMissingSheets', error);
    return {
      success: false,
      message: error.toString()
    };
  }
}

/**
 * Validate HTML files in the project
 * Used by settings page
 */
function validateHtmlFiles() {
  try {
    const requiredHtmlFiles = [
      {name: 'Dashboard', description: 'Main dashboard interface'},
      {name: 'FirstTimeSetup', description: 'Initial setup wizard'},
      {name: 'TeamView', description: 'Team members overview'},
      {name: 'AddTeamMember', description: 'Form to add team members'},
      {name: 'UpdateStatus', description: 'Update team member status'},
      {name: 'OneOnOneForm', description: 'Create one-on-one session'},
      {name: 'OneOnOneNotes', description: 'View one-on-one notes'},
      {name: 'OneOnOneDashboard', description: 'One-on-one analytics'},
      {name: 'OneOnOneExport', description: 'Export one-on-one data'},
      {name: 'ManagerOneOnOneForm', description: 'Manager one-on-one form'},
      {name: 'ManagerOneOnOneNotes', description: 'View manager one-on-one notes'},
      {name: 'ManagerOneOnOneDashboard', description: 'Manager one-on-one analytics'},
      {name: 'MetricsForm', description: 'Enter daily metrics'},
      {name: 'MetricsReports', description: 'View metrics reports'},
      {name: 'MetricsDashboard', description: 'Metrics analytics dashboard'},
      {name: 'MetricsEmailConfig', description: 'Configure metrics emails'},
      {name: 'MetricsExport', description: 'Export metrics data'},
      {name: 'QAReviewForm', description: 'Create quality review'},
      {name: 'QAReports', description: 'View quality review reports'},
      {name: 'QADashboard', description: 'Quality metrics dashboard'},
      {name: 'QAExport', description: 'Export quality reviews'},
      {name: 'GeneralNoteForm', description: 'Create general note'},
      {name: 'GeneralNotes', description: 'View general notes'},
      {name: 'GeneralNotesDashboard', description: 'General notes overview'},
      {name: 'TimeTracker', description: 'Track team lead time'},
      {name: 'TimeReports', description: 'Time utilization reports'},
      {name: 'ScheduleManager', description: 'Manage team schedule'},
      {name: 'InitializeWeek', description: 'Initialize schedule week'},
      {name: 'ScheduleReports', description: 'Schedule reports and analytics'},
      {name: 'TaskForm', description: 'Create new task'},
      {name: 'AsanaTaskForm', description: 'Create Asana task'},
      {name: 'TasksList', description: 'View and manage tasks'},
      {name: 'action-items-form', description: 'Create action item'},
      {name: 'action-items-view', description: 'View action items'},
      {name: 'action-items-reminders', description: 'Action item reminders'},
      {name: 'settings', description: 'System settings'},
      {name: 'user-preferences', description: 'User preferences'},
      {name: 'help', description: 'Help and documentation'}
    ];
    
    const validation = [];
    
    for (const file of requiredHtmlFiles) {
      try {
        // Check if file exists by attempting to get its content
        const content = HtmlService.createHtmlOutputFromFile(file.name).getContent();
        const valid = content && content.length > 0;
        
        validation.push({
          name: file.name,
          description: file.description,
          exists: true,
          valid: valid
        });
      } catch (e) {
        validation.push({
          name: file.name,
          description: file.description,
          exists: false,
          valid: false
        });
      }
    }
    
    return {
      success: true,
      validation: validation
    };
  } catch (error) {
    logError('validateHtmlFiles', error);
    return {
      success: false,
      message: error.toString()
    };
  }
}

/**
 * Get system information for display in settings
 */
function getSystemInfo() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const user = Session.getActiveUser().getEmail();
    const userTimeZone = Session.getScriptTimeZone();
    const spreadsheetName = ss.getName();
    const spreadsheetUrl = ss.getUrl();
    
    return {
      success: true,
      info: {
        user: user,
        timezone: userTimeZone,
        spreadsheet: spreadsheetName,
        url: spreadsheetUrl,
        version: CONFIG.VERSION,
        lastUpdated: new Date().toISOString()
      }
    };
  } catch (error) {
    logError('getSystemInfo', error);
    return {
      success: false,
      message: error.toString()
    };
  }
}

/**
 * Get system settings
 */
function getSystemSettings() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
    
    if (!configSheet) {
      return { 
        success: false, 
        message: 'Config sheet not found' 
      };
    }
    
    // Get configuration data
    const configData = configSheet.getDataRange().getValues();
    const configSettings = {};
    
    // Skip header row
    for (let i = 1; i < configData.length; i++) {
      configSettings[configData[i][0]] = configData[i][1];
    }
    
    // Organize settings into categories
    const settings = {
      general: {
        autoRefresh: configSettings.autoRefresh !== 'FALSE',
        emailNotifications: configSettings.emailNotifications !== 'FALSE',
        errorLogging: configSettings.errorLogging !== 'FALSE',
        dataPrivacy: configSettings.dataPrivacy === 'TRUE',
        defaultDateRange: configSettings.defaultDateRange || 'last7',
        timezone: configSettings.timezone || 'America/New_York'
      },
      backup: {
        autoBackup: configSettings.autoBackup !== 'FALSE',
        frequency: configSettings.backupFrequency || 'weekly',
        retentionPeriod: configSettings.retentionPeriod || '3_months',
        lastBackup: configSettings.lastBackupDate || null
      },
      advanced: {
        debugMode: configSettings.debugMode === 'TRUE',
        cacheTimeout: parseInt(configSettings.cacheTimeout || '30'),
        itemsPerPage: parseInt(configSettings.itemsPerPage || '50'),
        apiTimeout: parseInt(configSettings.apiTimeout || '30'),
        dataPurgeThreshold: configSettings.dataPurgeThreshold || '1_year'
      }
    };
    
    return { 
      success: true, 
      settings: settings 
    };
  } catch (error) {
    logError('getSystemSettings', error);
    return { 
      success: false, 
      message: error.toString() 
    };
  }
}

/**
 * Save system general settings
 */
function saveSystemGeneralSettings(settings) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
    
    if (!configSheet) {
      return { 
        success: false, 
        message: 'Config sheet not found' 
      };
    }
    
    // Update settings in config sheet
    updateConfigValue(configSheet, 'autoRefresh', settings.autoRefresh ? 'TRUE' : 'FALSE');
    updateConfigValue(configSheet, 'emailNotifications', settings.emailNotifications ? 'TRUE' : 'FALSE');
    updateConfigValue(configSheet, 'errorLogging', settings.errorLogging ? 'TRUE' : 'FALSE');
    updateConfigValue(configSheet, 'dataPrivacy', settings.dataPrivacy ? 'TRUE' : 'FALSE');
    updateConfigValue(configSheet, 'defaultDateRange', settings.defaultDateRange);
    updateConfigValue(configSheet, 'timezone', settings.timezone);
    
    return { success: true };
  } catch (error) {
    logError('saveSystemGeneralSettings', error);
    return { 
      success: false, 
      message: error.toString() 
    };
  }
}

/**
 * Save system advanced settings
 */
function saveSystemAdvancedSettings(settings) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
    
    if (!configSheet) {
      return { 
        success: false, 
        message: 'Config sheet not found' 
      };
    }
    
    // Update settings in config sheet
    updateConfigValue(configSheet, 'debugMode', settings.debugMode ? 'TRUE' : 'FALSE');
    updateConfigValue(configSheet, 'cacheTimeout', settings.cacheTimeout.toString());
    updateConfigValue(configSheet, 'itemsPerPage', settings.itemsPerPage.toString());
    updateConfigValue(configSheet, 'apiTimeout', settings.apiTimeout.toString());
    updateConfigValue(configSheet, 'dataPurgeThreshold', settings.dataPurgeThreshold);
    
    return { success: true };
  } catch (error) {
    logError('saveSystemAdvancedSettings', error);
    return { 
      success: false, 
      message: error.toString() 
    };
  }
}

/**
 * Reset system general settings to default
 */
function resetSystemGeneralSettings() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
    
    if (!configSheet) {
      return { 
        success: false, 
        message: 'Config sheet not found' 
      };
    }
    
    // Reset to default values
    updateConfigValue(configSheet, 'autoRefresh', 'TRUE');
    updateConfigValue(configSheet, 'emailNotifications', 'TRUE');
    updateConfigValue(configSheet, 'errorLogging', 'TRUE');
    updateConfigValue(configSheet, 'dataPrivacy', 'FALSE');
    updateConfigValue(configSheet, 'defaultDateRange', 'last7');
    updateConfigValue(configSheet, 'timezone', 'America/New_York');
    
    // Return updated settings
    const settings = {
      general: {
        autoRefresh: true,
        emailNotifications: true,
        errorLogging: true,
        dataPrivacy: false,
        defaultDateRange: 'last7',
        timezone: 'America/New_York'
      }
    };
    
    return { 
      success: true,
      settings: settings
    };
  } catch (error) {
    logError('resetSystemGeneralSettings', error);
    return { 
      success: false, 
      message: error.toString() 
    };
  }
}

/**
 * Reset system advanced settings to default
 */
function resetSystemAdvancedSettings() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
    
    if (!configSheet) {
      return { 
        success: false, 
        message: 'Config sheet not found' 
      };
    }
    
    // Reset to default values
    updateConfigValue(configSheet, 'debugMode', 'FALSE');
    updateConfigValue(configSheet, 'cacheTimeout', '30');
    updateConfigValue(configSheet, 'itemsPerPage', '50');
    updateConfigValue(configSheet, 'apiTimeout', '30');
    updateConfigValue(configSheet, 'dataPurgeThreshold', '1_year');
    
    // Return updated settings
    const settings = {
      advanced: {
        debugMode: false,
        cacheTimeout: 30,
        itemsPerPage: 50,
        apiTimeout: 30,
        dataPurgeThreshold: '1_year'
      }
    };
    
    return { 
      success: true,
      settings: settings
    };
  } catch (error) {
    logError('resetSystemAdvancedSettings', error);
    return { 
      success: false, 
      message: error.toString() 
    };
  }
}

/**
 * Helper function to update a configuration value
 */
function updateConfigValue(configSheet, key, value) {
  const configData = configSheet.getDataRange().getValues();
  
  // Look for the key
  for (let i = 1; i < configData.length; i++) {
    if (configData[i][0] === key) {
      // Found the key, update the value
      configSheet.getRange(i + 1, 2).setValue(value);
      return;
    }
  }
  
  // Key not found, add it
  configSheet.appendRow([key, value]);
}

/**
 * Clear system cache
 */
function clearCache() {
  try {
    CacheService.getUserCache().removeAll([]);
    CacheService.getScriptCache().removeAll([]);
    
    return { success: true };
  } catch (error) {
    logError('clearCache', error);
    return { 
      success: false, 
      message: error.toString() 
    };
  }
}

/**
 * Rebuild system indexes
 * Note: In a real app with more complex data structures,
 * this would rebuild search indexes or optimize data for better performance
 */
function rebuildIndexes() {
  try {
    // In this demonstration version, we'll just pretend to rebuild indexes
    // In a real application, this would be a more substantive operation
    return { success: true };
  } catch (error) {
    logError('rebuildIndexes', error);
    return { 
      success: false, 
      message: error.toString() 
    };
  }
}

/**
 * Reset the system to factory settings
 * Warning: This will delete all data!
 */
function resetSystem() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // Delete all sheets except the first one (Google Sheets doesn't allow deleting all sheets)
    const sheets = ss.getSheets();
    const firstSheet = sheets[0].getName();
    
    // Delete all other sheets
    for (let i = 0; i < sheets.length; i++) {
      if (sheets[i].getName() !== firstSheet) {
        ss.deleteSheet(sheets[i]);
      }
    }
    
    // Clear contents of first sheet
    const sheet = ss.getSheetByName(firstSheet);
    sheet.clear();
    sheet.setName('Sheet1');
    
    // Re-initialize system
    initializeAllSheets();
    
    return { success: true };
  } catch (error) {
    logError('resetSystem', error);
    return { 
      success: false, 
      message: error.toString() 
    };
  }
}

/**
 * Save backup settings
 */
function saveBackupSettings(settings) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
    
    if (!configSheet) {
      return { 
        success: false, 
        message: 'Config sheet not found' 
      };
    }
    
    // Update backup settings
    updateConfigValue(configSheet, 'autoBackup', settings.autoBackup ? 'TRUE' : 'FALSE');
    updateConfigValue(configSheet, 'backupFrequency', settings.frequency);
    updateConfigValue(configSheet, 'retentionPeriod', settings.retentionPeriod);
    
    return { success: true };
  } catch (error) {
    logError('saveBackupSettings', error);
    return { 
      success: false, 
      message: error.toString() 
    };
  }
}

/**
 * Create a backup of the system
 */
function createBackup() {
  try {
    // In a real application, this would create a backup of the spreadsheet data
    // For this demo, we'll just record that a backup was created
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
    
    if (!configSheet) {
      return { 
        success: false, 
        message: 'Config sheet not found' 
      };
    }
    
    // Update last backup date
    updateConfigValue(configSheet, 'lastBackupDate', new Date().toISOString());
    
    // In a real application, we would create backups in Google Drive
    // or export data to another location
    
    return { success: true };
  } catch (error) {
    logError('createBackup', error);
    return { 
      success: false, 
      message: error.toString() 
    };
  }
}

/**
 * Get backup information for settings page
 */
function getBackups() {
  try {
    // In a real application, this would retrieve actual backup records
    // For this demo, we'll create simulated backups
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(CONFIG.SHEETS.CONFIG);
    
    if (!configSheet) {
      return { 
        success: false, 
        message: 'Config sheet not found' 
      };
    }
    
    // Get last backup date from config
    let lastBackupDate = null;
    const configData = configSheet.getDataRange().getValues();
    
    for (let i = 1; i < configData.length; i++) {
      if (configData[i][0] === 'lastBackupDate') {
        lastBackupDate = configData[i][1];
        break;
      }
    }
    
    // Create sample backups for demo purposes
    const backups = [];
    
    // If we have a last backup date, use it for the most recent backup
    if (lastBackupDate) {
      backups.push({
        id: '001',
        timestamp: new Date(lastBackupDate),
        size: '1.2 MB',
        type: 'Auto'
      });
    }
    
    // Add some sample older backups
    const today = new Date();
    
    backups.push({
      id: '002',
      timestamp: new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7),
      size: '1.1 MB',
      type: 'Auto'
    });
    
    backups.push({
      id: '003',
      timestamp: new Date(today.getFullYear(), today.getMonth(), today.getDate() - 14),
      size: '1.0 MB',
      type: 'Manual'
    });
    
    // Sort backups by timestamp (newest first)
    backups.sort((a, b) => b.timestamp - a.timestamp);
    
    return { 
      success: true,
      backups: backups
    };
  } catch (error) {
    logError('getBackups', error);
    return { 
      success: false, 
      message: error.toString() 
    };
  }
}

/**
 * Shows an error message
 */
function showErrorMessage(message) {
  const htmlOutput = HtmlService
    .createHtmlOutput(`
      <div style="padding: 20px; font-family: Arial, sans-serif;">
        <h3 style="color: #d32f2f;">Error</h3>
        <p>${message}</p>
        <div style="margin-top: 20px; text-align: center;">
          <button onclick="google.script.host.close()">Close</button>
        </div>
      </div>
    `)
    .setWidth(400)
    .setHeight(200);
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Error');
}

/**
 * Include HTML content from another file
 */
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}
/**
 * 🔧 Show First Time Setup wizard
 * Guides new users through system initialization
 */
function showFirstTimeSetup() {
  const html = HtmlService.createTemplateFromFile('FirstTimeSetup')
    .evaluate()
    .setTitle('Team Lead Dashboard Setup')
    .setWidth(800)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'First Time Setup');
}




<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Team Lead Dashboard Setup</title>
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals for text and backgrounds */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    body {
      background-color: var(--bg-primary);
      color: var(--text-primary);
      line-height: 1.5;
      font-size: 14px;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    
    .setup-container {
      max-width: 100%;
      margin: 0 auto;
      padding: 24px;
    }
    
    .setup-header {
      text-align: center;
      margin-bottom: 24px;
    }
    
    .setup-title {
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 8px;
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .setup-subtitle {
      font-size: a15px;
      color: var(--text-tertiary);
      max-width: 500px;
      margin: 0 auto;
    }
    
    .setup-progress {
      display: flex;
      justify-content: center;
      margin: 20px 0 30px;
    }
    
    .progress-step {
      display: flex;
      flex-direction: column;
      align-items: center;
      position: relative;
      flex: 1;
      max-width: 120px;
    }
    
    .progress-step:not(:last-child)::after {
      content: '';
      position: absolute;
      top: 16px;
      right: -50%;
      width: 100%;
      height: 2px;
      background-color: var(--border-medium);
      z-index: 0;
    }
    
    .progress-step.active:not(:last-child)::after {
      background-color: var(--primary-color);
    }
    
    .progress-step.completed:not(:last-child)::after {
      background-color: var(--success-color);
    }
    
    .step-icon {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-tertiary);
      border: 2px solid var(--border-medium);
      color: var(--text-tertiary);
      font-weight: 600;
      font-size: 16px;
      z-index: 1;
    }
    
    .progress-step.active .step-icon {
      background-color: var(--primary-light);
      border-color: var(--primary-color);
      color: white;
    }
    
    .progress-step.completed .step-icon {
      background-color: var(--success-color);
      border-color: var(--success-color);
      color: white;
    }
    
    .step-label {
      margin-top: 8px;
      font-size: 12px;
      font-weight: 500;
      color: var(--text-tertiary);
      text-align: center;
    }
    
    .progress-step.active .step-label {
      color: var(--primary-color);
      font-weight: 600;
    }
    
    .progress-step.completed .step-label {
      color: var(--success-color);
    }
    
    .setup-form {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      margin-bottom: 24px;
    }
    
    .form-section {
      margin-bottom: 20px;
    }
    
    .section-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 16px;
      color: var(--primary-color);
      border-bottom: 1px solid var(--border-light);
      padding-bottom: 8px;
    }
    
    .form-group {
      margin-bottom: 16px;
    }
    
    label {
      display: block;
      font-size: 14px;
      font-weight: 500;
      color: var(--text-secondary);
      margin-bottom: 6px;
    }
    
    .input-group {
      position: relative;
    }
    
    .input-icon {
      position: absolute;
      top: 50%;
      left: 12px;
      transform: translateY(-50%);
      color: var(--text-tertiary);
      font-size: 18px;
    }
    
    input[type="text"],
    input[type="email"],
    select,
    textarea {
      width: 100%;
      padding: 10px 12px 10px 36px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      color: var(--text-primary);
      transition: all var(--transition-fast);
    }
    
    input[type="text"]:focus,
    input[type="email"]:focus,
    select:focus,
    textarea:focus {
      border-color: var(--primary-color);
      outline: none;
      box-shadow: 0 0 0 2px rgba(85, 64, 175, 0.2);
    }
    
    .form-help {
      font-size: 12px;
      color: var(--text-tertiary);
      margin-top: 4px;
    }
    
    .theme-selector {
      display: flex;
      gap: 12px;
      margin-top: 12px;
    }
    
    .theme-option {
      flex: 1;
      border: 2px solid var(--border-light);
      border-radius: var(--radius-md);
      padding: 12px;
      cursor: pointer;
      transition: all var(--transition-fast);
            text-align: center;
    }
    
    .theme-option:hover, .theme-option.selected {
      border-color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    .theme-color {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      margin: 0 auto 8px;
    }
    
    .theme-light .theme-color {
      background: linear-gradient(135deg, #f8fafc 50%, #5540af 50%);
    }
    
    .theme-dark .theme-color {
      background: linear-gradient(135deg, #1e293b 50%, #6e5cb9 50%);
    }
    
    .theme-purple .theme-color {
      background: linear-gradient(135deg, #5540af 50%, #fb7185 50%);
    }
    
    .theme-blue .theme-color {
      background: linear-gradient(135deg, #3b82f6 50%, #10b981 50%);
    }
    
    .theme-name {
      font-size: 13px;
      font-weight: 500;
    }
    
    .setup-actions {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 24px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      border: none;
    }
    
    .btn-outline {
      border: 1px solid var(--border-medium);
      background-color: transparent;
      color: var(--text-secondary);
    }
    
    .btn-outline:hover {
      border-color: var(--primary-color);
      color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      box-shadow: 0 6px 15px rgba(85, 64, 175, 0.4);
      transform: translateY(-2px);
    }
    
    .btn-primary:active {
      transform: translateY(0);
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:disabled {
      background: linear-gradient(135deg, #a8a0c9, #a9b3e3);
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }
    
    .setup-footer {
      text-align: center;
      font-size: 12px;
      color: var(--text-tertiary);
      margin-top: 16px;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      z-index: 1000;
      backdrop-filter: blur(5px);
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(85, 64, 175, 0.1);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 16px;
      font-size: 14px;
      font-weight: 500;
      color: var(--primary-color);
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Success and error messages */
    .message {
      padding: 12px 16px;
      border-radius: var(--radius-md);
      margin-bottom: 20px;
      display: flex;
      align-items: flex-start;
      gap: 12px;
      display: none;
    }
    
    .message-success {
      background-color: var(--success-light);
      color: var(--success-color);
      border-left: 4px solid var(--success-color);
    }
    
    .message-error {
      background-color: var(--danger-light);
      color: var(--danger-color);
      border-left: 4px solid var(--danger-color);
    }
    
    .message-icon {
      font-size: 18px;
      flex-shrink: 0;
    }
    
    .message-content {
      flex: 1;
    }
    
    .message-title {
      font-weight: 600;
      margin-bottom: 2px;
    }
    
    .message-text {
      font-size: 13px;
    }
    
    .form-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 16px;
    }
    
    @media (max-width: 600px) {
      .form-grid {
        grid-template-columns: 1fr;
      }
      
      .theme-selector {
        flex-wrap: wrap;
      }
      
      .theme-option {
        min-width: 100px;
      }
    }
  </style>
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
</head>
<body>
  <div class="setup-container">
    <div class="setup-header">
      <h1 class="setup-title">✨ Welcome to Your Team Lead Dashboard</h1>
      <p class="setup-subtitle">Let's set up your dashboard to manage your team effectively. This will only take a couple of minutes.</p>
    </div>
    
    <div class="setup-progress">
      <div class="progress-step active">
        <div class="step-icon">1</div>
        <div class="step-label">Basic Info</div>
      </div>
      <div class="progress-step">
        <div class="step-icon">2</div>
        <div class="step-label">Initialize</div>
      </div>
      <div class="progress-step">
        <div class="step-icon">3</div>
        <div class="step-label">Complete</div>
      </div>
    </div>
    
    <div id="successMessage" class="message message-success">
      <div class="message-icon">
        <i class="fas fa-check-circle"></i>
      </div>
      <div class="message-content">
        <div class="message-title">Success</div>
        <div class="message-text">Your dashboard has been set up successfully!</div>
      </div>
    </div>
    
    <div id="errorMessage" class="message message-error">
      <div class="message-icon">
        <i class="fas fa-exclamation-circle"></i>
      </div>
      <div class="message-content">
        <div class="message-title">Error</div>
        <div id="errorText" class="message-text">There was a problem with the setup.</div>
      </div>
    </div>
    
    <div class="setup-form">
      <div class="form-section">
        <h2 class="section-title">👤 Team Lead Information</h2>
        <div class="form-grid">
          <div class="form-group">
            <label for="teamLeadName">Your Name</label>
            <div class="input-group">
              <i class="fas fa-user input-icon"></i>
              <input type="text" id="teamLeadName" name="teamLeadName" placeholder="Enter your full name">
            </div>
          </div>
          
          <div class="form-group">
            <label for="teamLeadEmail">Your Email</label>
            <div class="input-group">
              <i class="fas fa-envelope input-icon"></i>
              <input type="email" id="teamLeadEmail" name="teamLeadEmail" placeholder="Enter your email">
            </div>
          </div>
        </div>
      </div>
      
      <div class="form-section">
        <h2 class="section-title">👥 Team Information</h2>
        <div class="form-grid">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <div class="input-group">
              <i class="fas fa-users input-icon"></i>
              <input type="text" id="teamName" name="teamName" placeholder="Enter your team name">
            </div>
          </div>
          
          <div class="form-group">
            <label for="departmentName">Department</label>
            <div class="input-group">
              <i class="fas fa-building input-icon"></i>
              <input type="text" id="departmentName" name="departmentName" placeholder="Enter your department">
            </div>
          </div>
          
          <div class="form-group">
            <label for="organizationName">Organization</label>
            <div class="input-group">
              <i class="fas fa-briefcase input-icon"></i>
              <input type="text" id="organizationName" name="organizationName" placeholder="Enter your organization">
            </div>
            <div class="form-help">This information will be used in reports and exports</div>
          </div>
        </div>
      </div>
      
      <div class="form-section">
        <h2 class="section-title">🎨 Choose Theme</h2>
        <div class="theme-selector">
          <div class="theme-option selected" data-theme="light">
            <div class="theme-color"></div>
            <div class="theme-name">Light</div>
          </div>
          
          <div class="theme-option" data-theme="dark">
            <div class="theme-color"></div>
            <div class="theme-name">Dark</div>
          </div>
          
          <div class="theme-option" data-theme="purple">
            <div class="theme-color"></div>
            <div class="theme-name">Purple</div>
          </div>
          
          <div class="theme-option" data-theme="blue">
            <div class="theme-color"></div>
            <div class="theme-name">Blue</div>
          </div>
        </div>
      </div>
      
      <div class="setup-actions">
        <button id="closeBtn" class="btn btn-outline">
          <i class="fas fa-times"></i> Cancel
        </button>
        <button id="continueBtn" class="btn btn-primary">
          Continue <i class="fas fa-arrow-right"></i>
        </button>
      </div>
    </div>
    
    <div class="setup-footer">
      <p>Team Lead Dashboard v1.0.0 | Made with ❤️ for Team Leaders</p>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
    <div class="loading-text">Setting up your dashboard...</div>
  </div>
  
  <script>
    // Global variables
    let currentStep = 1;
    let selectedTheme = 'light';
    let setupData = {};
    
    // Initialize the UI
    document.addEventListener('DOMContentLoaded', function() {
      // Theme selection
      const themeOptions = document.querySelectorAll('.theme-option');
      themeOptions.forEach(option => {
        option.addEventListener('click', function() {
          // Remove selected class from all options
          themeOptions.forEach(opt => opt.classList.remove('selected'));
          // Add selected class to clicked option
          this.classList.add('selected');
          // Update selected theme
          selectedTheme = this.getAttribute('data-theme');
        });
      });
      
      // Continue button
      document.getElementById('continueBtn').addEventListener('click', function() {
        if (currentStep === 1) {
          if (validateForm()) {
            collectFormData();
            goToStep2();
          }
        }
      });
      
      // Close button
      document.getElementById('closeBtn').addEventListener('click', function() {
        google.script.host.close();
      });
    });
    
    // Validate the form
    function validateForm() {
      const teamLeadName = document.getElementById('teamLeadName').value.trim();
      const teamLeadEmail = document.getElementById('teamLeadEmail').value.trim();
      const teamName = document.getElementById('teamName').value.trim();
      
      if (!teamLeadName) {
        showError('Please enter your name.');
        return false;
      }
      
      if (!teamLeadEmail) {
        showError('Please enter your email.');
        return false;
      }
      
      if (!teamName) {
        showError('Please enter your team name.');
        return false;
      }
      
      return true;
    }
    
    // Collect form data
    function collectFormData() {
      setupData = {
        teamLeadName: document.getElementById('teamLeadName').value.trim(),
        teamLeadEmail: document.getElementById('teamLeadEmail').value.trim(),
        teamName: document.getElementById('teamName').value.trim(),
        departmentName: document.getElementById('departmentName').value.trim(),
        organizationName: document.getElementById('organizationName').value.trim(),
        theme: selectedTheme
      };
    }
    
    // Go to step 2 - Initialize
    function goToStep2() {
      // Update progress indicator
      document.querySelector('.progress-step:nth-child(1)').classList.remove('active');
      document.querySelector('.progress-step:nth-child(1)').classList.add('completed');
      document.querySelector('.progress-step:nth-child(2)').classList.add('active');
      
      // Show loading overlay
      document.getElementById('loadingOverlay').classList.add('visible');
      
      // Initialize sheets and system
      google.script.run
        .withSuccessHandler(function(response) {
          if (response.success) {
            goToStep3(response);
          } else {
            hideLoading();
            showError(response.message || 'There was an error during initialization.');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showError('Error: ' + error.message);
        })
        .completeInitialSetup(setupData);
      
      currentStep = 2;
    }
    
    // Go to step 3 - Complete
    function goToStep3(response) {
      // Update progress indicator
      document.querySelector('.progress-step:nth-child(2)').classList.remove('active');
      document.querySelector('.progress-step:nth-child(2)').classList.add('completed');
      document.querySelector('.progress-step:nth-child(3)').classList.add('active');
      
      // Hide loading overlay
      hideLoading();
      
      // Update UI for completion
      document.querySelector('.setup-form').innerHTML = `
        <div class="setup-complete">
          <div style="text-align: center; margin-bottom: 24px;">
            <div style="font-size: 64px; color: var(--success-color); margin-bottom: 16px;">
              <i class="fas fa-check-circle"></i>
            </div>
            <h2 style="font-size: 24px; font-weight: 700; margin-bottom: 8px;">Setup Complete!</h2>
            <p style="color: var(--text-secondary); max-width: 400px; margin: 0 auto;">
              Your Team Lead Dashboard has been successfully set up and is ready to use.
            </p>
          </div>
          
          <div style="background-color: var(--bg-secondary); border-radius: var(--radius-md); padding: 16px; margin-bottom: 24px;">
            <h3 style="font-size: 16px; font-weight: 600; margin-bottom: 8px;">What's Next?</h3>
            <ul style="list-style-type: none; padding-left: 0;">
              <li style="display: flex; align-items: center; gap: 8px; margin-bottom: 12px;">
                <i class="fas fa-users" style="color: var(--primary-color);"></i>
                <span>Add your team members to get started</span>
              </li>
              <li style="display: flex; align-items: center; gap: 8px; margin-bottom: 12px;">
                <i class="fas fa-calendar-check" style="color: var(--primary-color);"></i>
                <span>Schedule your first one-on-one meetings</span>
              </li>
              <li style="display: flex; align-items: center; gap: 8px; margin-bottom: 12px;">
                <i class="fas fa-chart-line" style="color: var(--primary-color);"></i>
                <span>Start tracking team metrics</span>
              </li>
              <li style="display: flex; align-items: center; gap: 8px;">
                <i class="fas fa-cog" style="color: var(--primary-color);"></i>
                <span>Customize your dashboard in Settings</span>
              </li>
            </ul>
          </div>
          
          <div class="setup-actions">
            <button id="closeSetupBtn" class="btn btn-primary" style="margin: 0 auto;">
              <i class="fas fa-rocket"></i> Launch Dashboard
            </button>
          </div>
        </div>
      `;
      
      // Add event listener to the new button
      document.getElementById('closeSetupBtn').addEventListener('click', function() {
        // Show the dashboard
        google.script.run.showDashboard();
        // Close this dialog
        google.script.host.close();
      });
      
      currentStep = 3;
    }
    
    // Show error message
    function showError(message) {
      const errorMessage = document.getElementById('errorMessage');
      const errorText = document.getElementById('errorText');
      errorText.textContent = message;
      errorMessage.style.display = 'flex';
      
      // Hide after 5 seconds
      setTimeout(function() {
        errorMessage.style.display = 'none';
      }, 5000);
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
  </script>
</body>
</html>




<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Team Lead Dashboard</title>
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
  
  <!-- Luxon for date handling -->
  <script src="https://cdn.jsdelivr.net/npm/luxon@2.3.1/build/global/luxon.min.js"></script>
  
  <style>
    :root {
      /* Base colors palette - professional yet modern */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --success-gradient: linear-gradient(135deg, #10b981, #059669);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --warning-gradient: linear-gradient(135deg, #f59e0b, #d97706);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --danger-gradient: linear-gradient(135deg, #ef4444, #b91c1c);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      --info-gradient: linear-gradient(135deg, #3b82f6, #1d4ed8);
      
      /* Neutrals for text and backgrounds */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --text-light: #94a3b8;
      
      /* Background colors */
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --bg-card: #ffffff;
      
      /* Border colors */
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      --shadow-xl: 0 20px 25px -5px rgba(15, 23, 42, 0.1), 0 10px 10px -5px rgba(15, 23, 42, 0.04);
      
      /* Hero section gradient */
      --hero-gradient: linear-gradient(135deg, #5540af, #38bdf8);
      
      /* Card variants */
      --card-blue-gradient: linear-gradient(135deg, rgba(59, 130, 246, 0.05), rgba(37, 99, 235, 0.1));
      --card-purple-gradient: linear-gradient(135deg, rgba(85, 64, 175, 0.05), rgba(76, 29, 149, 0.1));
      --card-success-gradient: linear-gradient(135deg, rgba(16, 185, 129, 0.05), rgba(5, 150, 105, 0.1));
      --card-warning-gradient: linear-gradient(135deg, rgba(245, 158, 11, 0.05), rgba(217, 119, 6, 0.1));
      --card-danger-gradient: linear-gradient(135deg, rgba(239, 68, 68, 0.05), rgba(185, 28, 28, 0.1));
      
      /* Transitions & animations */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
      --transition-bounce: 0.5s cubic-bezier(0.19, 1, 0.22, 1);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      --radius-xl: 24px;
      --radius-full: 9999px;
      
      /* Spacing */
      --spacing-1: 4px;
      --spacing-2: 8px;
      --spacing-3: 12px;
      --spacing-4: 16px;
      --spacing-5: 24px;
      --spacing-6: 32px;
      --spacing-7: 48px;
      --spacing-8: 64px;
    }

    /* Core styling */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      font-size: 14px;
      line-height: 1.5;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      overflow-x: hidden;
      text-rendering: optimizeLegibility;
    }
    
    a {
      color: var(--primary-color);
      text-decoration: none;
      transition: color var(--transition-fast);
    }
    
    a:hover {
      color: var(--primary-light);
    }
    
    .container {
      width: 100%;
      max-width: 1600px;
      padding: 0 24px;
      margin: 0 auto;
    }
    
    /* Advanced layout styling */
    .dashboard-container {
      display: flex;
      flex-direction: column;
      height: 100%;
      padding: var(--spacing-4) 0;
      gap: var(--spacing-6);
    }
    
    .header {
      position: relative;
      padding-bottom: var(--spacing-5);
    }
    
    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--spacing-5);
    }
    
    .dashboard-title {
      display: flex;
      align-items: center;
      gap: var(--spacing-3);
    }
    
    .dashboard-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 56px;
      height: 56px;
      border-radius: 16px;
      background: var(--hero-gradient);
      color: white;
      font-size: 32px;
      box-shadow: 0 12px 20px -10px rgba(85, 64, 175, 0.4);
    }
    
    .title-content h1 {
      font-size: 28px;
      font-weight: 700;
      background: var(--hero-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: var(--spacing-1);
      font-family: 'Manrope', sans-serif;
    }
    
    .subtitle {
      font-size: 15px;
      color: var(--text-tertiary);
      font-weight: 400;
    }
    
    .actions {
      display: flex;
      gap: var(--spacing-3);
      align-items: center;
    }
    
    /* Dashboard Grid System */
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      gap: 24px;
      margin-bottom: 24px;
    }
    
    .col-span-3 {
      grid-column: span 3;
    }
    
    .col-span-4 {
      grid-column: span 4;
    }
    
    .col-span-6 {
      grid-column: span 6;
    }
    
    .col-span-8 {
      grid-column: span 8;
    }
    
    .col-span-9 {
      grid-column: span 9;
    }
    
    .col-span-12 {
      grid-column: span 12;
    }
    
    /* Advanced Card Styling */
    .card {
      background-color: var(--bg-card);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      transition: transform var(--transition-normal), box-shadow var(--transition-normal);
      overflow: hidden;
      height: 100%;
      display: flex;
      flex-direction: column;
      position: relative;
    }
    
    .card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }
    
    .card-header {
      padding: var(--spacing-5);
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-size: 17px;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: var(--spacing-2);
    }
    
    .card-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      border-radius: var(--radius-md);
      background: var(--hero-gradient);
      color: white;
      font-size: 18px;
    }
    
    .card-actions {
      display: flex;
      gap: var(--spacing-2);
    }
    
    .card-action-btn {
      width: 32px;
      height: 32px;
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-light);
      background-color: white;
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .card-action-btn:hover {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }
    
    .card-body {
      padding: var(--spacing-5);
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    
    .card-footer {
      padding: var(--spacing-4) var(--spacing-5);
      border-top: 1px solid var(--border-light);
      background-color: var(--bg-secondary);
    }
    
    /* Welcome card */
    .welcome-card {
      position: relative;
      overflow: hidden;
    }
    
    .welcome-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--hero-gradient);
      clip-path: ellipse(150% 70% at 95% 10%);
      z-index: 0;
      opacity: 0.8;
    }
    
    .welcome-content {
      position: relative;
      z-index: 1;
      padding: var(--spacing-6);
      color: white;
    }
    
    .welcome-title {
      font-size: 24px;
      font-weight: 700;
      margin-bottom: var(--spacing-2);
    }
    
    .welcome-message {
      max-width: 70%;
      margin-bottom: var(--spacing-4);
      font-size: 15px;
      opacity: 0.9;
    }
    
    .welcome-metrics {
      display: flex;
      gap: var(--spacing-4);
      margin-top: var(--spacing-4);
    }
    
    .welcome-metric {
      background: rgba(255, 255, 255, 0.2);
      backdrop-filter: blur(8px);
      padding: var(--spacing-4);
      border-radius: var(--radius-lg);
      min-width: 140px;
    }
    
    .metric-value {
      font-size: 28px;
      font-weight: 700;
      margin-bottom: var(--spacing-1);
    }
    
    .metric-label {
      font-size: 13px;
      opacity: 0.8;
    }
    
    /* Stats Cards */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: var(--spacing-4);
    }
    
    .stat-card {
      background-color: var(--bg-card);
      border-radius: var(--radius-lg);
      padding: var(--spacing-5);
      box-shadow: var(--shadow-md);
      transition: transform var(--transition-normal), box-shadow var(--transition-normal);
      position: relative;
      overflow: hidden;
    }
    
    .stat-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }
    
    .stat-card::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary-gradient);
    }
    
    .stat-card.success::after {
      background: var(--success-gradient);
    }
    
    .stat-card.warning::after {
      background: var(--warning-gradient);
    }
    
    .stat-card.danger::after {
      background: var(--danger-gradient);
    }
    
    .stat-card.info::after {
      background: var(--info-gradient);
    }
    
    .stat-icon {
      width: 48px;
      height: 48px;
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      margin-bottom: var(--spacing-3);
      position: relative;
    }
    
    .stat-icon::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: inherit;
      opacity: 0.15;
      z-index: 0;
    }
    
    .stat-icon i {
      position: relative;
      z-index: 1;
    }
    
    .stat-primary .stat-icon {
      color: var(--primary-color);
    }
    
    .stat-primary .stat-icon::before {
      background-color: var(--primary-color);
    }
    
    .stat-success .stat-icon {
      color: var(--success-color);
    }
    
    .stat-success .stat-icon::before {
      background-color: var(--success-color);
    }
    
    .stat-warning .stat-icon {
      color: var(--warning-color);
    }
    
    .stat-warning .stat-icon::before {
      background-color: var(--warning-color);
    }
    
    .stat-danger .stat-icon {
      color: var(--danger-color);
    }
    
    .stat-danger .stat-icon::before {
      background-color: var(--danger-color);
    }
    
    .stat-info .stat-icon {
      color: var(--info-color);
    }
    
    .stat-info .stat-icon::before {
      background-color: var(--info-color);
    }
    
    .stat-value {
      font-size: 28px;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: var(--spacing-1);
    }
    
    .stat-label {
      font-size: 14px;
      color: var(--text-tertiary);
      font-weight: 500;
    }
    
    .stat-change {
      display: flex;
      align-items: center;
      gap: var(--spacing-1);
      font-size: 13px;
      font-weight: 500;
      margin-top: var(--spacing-2);
    }
    
    .stat-change.positive {
      color: var(--success-color);
    }
    
    .stat-change.negative {
      color: var(--danger-color);
    }
    
    /* Date Range Picker */
    .date-range-picker {
      display: flex;
      align-items: center;
      gap: var(--spacing-3);
      padding: var(--spacing-2) var(--spacing-4);
      border-radius: var(--radius-lg);
      border: 1px solid var(--border-light);
      background-color: white;
    }
    
    .date-range-label {
      font-size: 13px;
      font-weight: 500;
      color: var(--text-tertiary);
    }
    
    .date-range-select {
      border: none;
      appearance: none;
      background: transparent;
      padding: var(--spacing-1) var(--spacing-2);
      font-family: 'Inter', sans-serif;
      font-size: 14px;
      font-weight: 500;
      color: var(--primary-color);
      cursor: pointer;
    }
    
    /* View toggle */
    .view-toggle {
      display: flex;
      align-items: center;
      gap: var(--spacing-2);
      padding: var(--spacing-2);
      background-color: var(--bg-secondary);
      border-radius: var(--radius-full);
    }
    
    .view-option {
      padding: 4px 12px;
      border-radius: var(--radius-full);
      font-size: 13px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .view-option.active {
      background-color: white;
      box-shadow: var(--shadow-sm);
      color: var(--primary-color);
    }
    
    /* Chart container */
    .chart-container {
      width: 100%;
      height: 100%;
      min-height: 250px;
      position: relative;
    }
    
    /* Activity Feed */
    .activity-feed {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-4);
    }
    
    .activity-item {
      display: flex;
      align-items: flex-start;
      gap: var(--spacing-3);
      padding-bottom: var(--spacing-4);
      border-bottom: 1px solid var(--border-light);
    }
    
    .activity-item:last-child {
      border-bottom: none;
      padding-bottom: 0;
    }
    
    .activity-icon {
      width: 40px;
      height: 40px;
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      color: white;
      flex-shrink: 0;
    }
    
    .activity-primary .activity-icon {
      background: var(--primary-gradient);
    }
    
    .activity-success .activity-icon {
      background: var(--success-gradient);
    }
    
    .activity-warning .activity-icon {
      background: var(--warning-gradient);
    }
    
    .activity-danger .activity-icon {
      background: var(--danger-gradient);
    }
    
    .activity-info .activity-icon {
      background: var(--info-gradient);
    }
    
    .activity-content {
      flex: 1;
    }
    
    .activity-title {
      font-size: 14px;
      font-weight: 600;
      color: var(--text-primary);
      margin-bottom: var(--spacing-1);
    }
    
    .activity-message {
      font-size: 14px;
      color: var(--text-secondary);
      margin-bottom: var(--spacing-2);
    }
    
    .activity-meta {
      display: flex;
      align-items: center;
      gap: var(--spacing-3);
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .activity-time {
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .activity-time i {
      font-size: 14px;
    }
    
    /* 1-on-1 Sessions */
    .sessions-list {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-3);
    }
    
    .session-card {
      padding: var(--spacing-4);
      border-radius: var(--radius-md);
      border: 1px solid var(--border-light);
      transition: all var(--transition-fast);
      cursor: pointer;
    }
    
    .session-card:hover {
      border-color: var(--primary-color);
      background-color: var(--primary-light);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    .session-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--spacing-2);
    }
    
    .team-member {
      display: flex;
      align-items: center;
      gap: var(--spacing-2);
    }
    
    .avatar {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      color: white;
      background: var(--hero-gradient);
      font-size: 14px;
    }
    
    .team-member-name {
      font-weight: 600;
      font-size: 14px;
    }
    
    .session-date {
      font-size: 13px;
      color: var(--text-tertiary);
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .session-topics {
      display: flex;
      flex-wrap: wrap;
      gap: 6px;
      margin-top: var(--spacing-2);
    }
    
    .topic-tag {
      font-size: 12px;
      padding: 4px 8px;
      border-radius: 20px;
      background-color: var(--bg-secondary);
      color: var(--text-secondary);
      font-weight: 500;
    }
    
    /* Action Items */
    .action-items-list {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-3);
    }
    
    .action-item {
      padding: var(--spacing-4);
      border-radius: var(--radius-md);
      border-left: 4px solid var(--primary-color);
      background-color: white;
      box-shadow: var(--shadow-sm);
      transition: all var(--transition-fast);
    }
    
    .action-item:hover {
      box-shadow: var(--shadow-md);
      transform: translateX(4px);
    }
    
    .action-item-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--spacing-2);
    }
    
    .action-item-title {
      font-weight: 600;
      font-size: 14px;
    }
    
    .priority-badge {
      font-size: 12px;
      padding: 2px 8px;
      border-radius: 20px;
      font-weight: 500;
    }
    
    .priority-high {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .priority-medium {
      background-color: var(--warning-light);
      color: var(--warning-color);
    }
    
    .priority-low {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .action-item-due {
      font-size: 13px;
      color: var(--text-tertiary);
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .action-item-due.overdue {
      color: var(--danger-color);
    }
    
    .action-item-assignee {
      font-size: 13px;
      color: var(--text-tertiary);
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    /* Team member cards */
    .team-member-cards {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
      gap: var(--spacing-4);
    }
    
    .team-member-card {
      background-color: var(--bg-card);
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-sm);
      padding: var(--spacing-4);
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
      transition: all var(--transition-normal);
      cursor: pointer;
    }
    
    .team-member-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-md);
    }
    
    .team-avatar {
      width: 64px;
      height: 64px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--hero-gradient);
      color: white;
      font-size: 24px;
      font-weight: 600;
      margin-bottom: var(--spacing-3);
      position: relative;
    }
    
    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      border: 2px solid white;
      position: absolute;
      bottom: 0;
      right: 0;
    }
    
    .status-active {
      background-color: var(--success-color);
    }
    
    .status-away {
      background-color: var(--warning-color);
    }
    
    .status-offline {
      background-color: var(--text-light);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(85, 64, 175, 0.1);
      border-radius: 50%;
      border-left-color: var(--primary-color);
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Toast notifications */
    #toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .toast {
      padding: 12px 16px;
      display: flex;
      align-items: center;
      gap: 12px;
      background: white;
      box-shadow: var(--shadow-lg);
      border-radius: var(--radius-md);
      max-width: 350px;
      transform: translateX(120%);
      transition: transform 0.3s ease;
    }
    
    .toast.show {
      transform: translateX(0);
    }
    
    .toast-icon {
      font-size: 18px;
      flex-shrink: 0;
    }
    
    .toast-info .toast-icon {
      color: var(--info-color);
    }
    
    .toast-success .toast-icon {
      color: var(--success-color);
    }
    
    .toast-error .toast-icon {
      color: var(--danger-color);
    }
    
    .toast-warning .toast-icon {
      color: var(--warning-color);
    }

    /* Buttons */
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      border-radius: var(--radius-md);
      padding: 10px 16px;
      font-weight: 500;
      font-size: 14px;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: var(--spacing-2);
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-primary:active {
      transform: translateY(0);
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--primary-color);
      border: 1px solid var(--border-light);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
      border-color: var(--border-medium);
    }
    
    /* Responsive */
    @media (max-width: 1200px) {
      .dashboard-grid {
        grid-template-columns: repeat(8, 1fr);
      }
      
      .col-span-3, .col-span-4 {
        grid-column: span 4;
      }
      
      .col-span-6 {
        grid-column: span 8;
      }
      
      .col-span-8, .col-span-9, .col-span-12 {
        grid-column: span 8;
      }
      
      .stats-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 16px;
      }
    }
    
    @media (max-width: 768px) {
      .dashboard-grid {
        grid-template-columns: repeat(4, 1fr);
      }
      
      .col-span-3, .col-span-4, .col-span-6, .col-span-8, .col-span-9, .col-span-12 {
        grid-column: span 4;
      }
      
      .dashboard-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
      }
      
      .welcome-metrics {
        flex-wrap: wrap;
      }
      
      .welcome-message {
        max-width: 100%;
      }
    }
  </style>
</head>

<body>
  <!-- Toast container -->
  <div id="toast-container"></div>
  
  <!-- Loading overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="container">
    <div class="dashboard-container">
      <header class="dashboard-header">
        <div class="dashboard-title">
          <div class="dashboard-icon">
            <i class="fas fa-tachometer-alt"></i>
          </div>
          <div class="title-content">
            <h1>Team Lead Dashboard</h1>
            <p class="subtitle" id="teamNameSubtitle">Loading your dashboard...</p>
          </div>
        </div>
        
        <div class="actions">
          <div class="view-toggle">
            <div class="view-option active" data-view="team">Team View</div>
            <div class="view-option" data-view="individual">Individual View</div>
          </div>
          
          <div class="date-range-picker">
            <span class="date-range-label">Period:</span>
            <select id="dateRange" class="date-range-select">
              <option value="today">Today</option>
              <option value="week" selected>This Week</option>
              <option value="month">This Month</option>
              <option value="quarter">This Quarter</option>
              <option value="year">This Year</option>
              <option value="custom">Custom Range</option>
            </select>
          </div>
          
          <button id="refreshBtn" class="card-action-btn">
            <i class="fas fa-sync-alt"></i>
          </button>
        </div>
      </header>
      
      <!-- Team member selector (hidden by default, shown in individual view) -->
      <div id="teamMemberSelector" style="display: none;">
        <div style="
          background-color: white;
          padding: 16px;
          border-radius: var(--radius-lg);
          box-shadow: var(--shadow-md);
          margin-bottom: 24px;
        ">
          <label for="selectedTeamMember" style="
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-secondary);
          ">Select Team Member:</label>
          
          <div style="display: flex; gap: 12px; align-items: center;">
            <select id="selectedTeamMember" style="
              flex: 1;
              padding: 10px;
              border-radius: var(--radius-md);
              border: 1px solid var(--border-medium);
              font-size: 14px;
            ">
              <option value="">Loading team members...</option>
            </select>
            
            <button id="viewTeamMemberBtn" class="btn btn-primary">
              <i class="fas fa-user"></i> View
            </button>
          </div>
        </div>
      </div>
      
      <!-- Welcome Card -->
      <div class="dashboard-grid">
        <div class="col-span-12">
          <div class="card welcome-card">
            <div class="welcome-content">
              <h2 class="welcome-title">Welcome back, <span id="teamLeadName">Team Lead</span>! 👋</h2>
              <p class="welcome-message">
                Here's your team's performance overview for the selected period. Your team is making progress across all key areas.
              </p>
              
              <div class="welcome-metrics">
                <div class="welcome-metric">
                  <div class="metric-value" id="totalTeamMembers">--</div>
                  <div class="metric-label">Team Members</div>
                </div>
                
                <div class="welcome-metric">
                  <div class="metric-value" id="answerRate">--</div>
                  <div class="metric-label">Answer Rate</div>
                </div>
                
                <div class="welcome-metric">
                  <div class="metric-value" id="avgTalkTime">--</div>
                  <div class="metric-label">Avg Talk Time</div>
                </div>
                
                <div class="welcome-metric">
                  <div class="metric-value" id="onQueuePercentage">--</div>
                  <div class="metric-label">On Queue %</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Stats Cards -->
      <h3 style="
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 16px;
        color: var(--text-primary);
        font-family: 'Manrope', sans-serif;
      ">📈 Performance Metrics</h3>
      
      <div class="stats-grid">
        <div class="stat-card stat-primary">
          <div class="stat-icon">
            <i class="fas fa-headset"></i>
          </div>
          <div class="stat-label">Calls Offered</div>
          <div class="stat-value" id="callsOffered">--</div>
          <div class="stat-change positive" id="callsOfferedChange">
            <i class="fas fa-arrow-up"></i> <span>--</span>
          </div>
        </div>
        
        <div class="stat-card stat-success">
          <div class="stat-icon">
            <i class="fas fa-phone-alt"></i>
          </div>
          <div class="stat-label">Calls Accepted</div>
          <div class="stat-value" id="callsAccepted">--</div>
          <div class="stat-change positive" id="callsAcceptedChange">
            <i class="fas fa-arrow-up"></i> <span>--</span>
          </div>
        </div>
        
        <div class="stat-card stat-info">
          <div class="stat-icon">
            <i class="fas fa-stopwatch"></i>
          </div>
          <div class="stat-label">ACW Percentage</div>
          <div class="stat-value" id="acwPercentage">--</div>
          <div class="stat-change positive" id="acwPercentageChange">
            <i class="fas fa-arrow-down"></i> <span>--</span>
          </div>
        </div>
        
        <div class="stat-card stat-warning">
          <div class="stat-icon">
            <i class="fas fa-user-clock"></i>
          </div>
          <div class="stat-label">Interacting Time</div>
          <div class="stat-value" id="interactingTime">--</div>
          <div class="stat-change" id="interactingTimeChange">
            <i class="fas fa-arrow-up"></i> <span>--</span>
          </div>
        </div>
      </div>
      
      <div class="dashboard-grid">
        <!-- Performance Chart -->
        <div class="col-span-8">
          <div class="card">
            <div class="card-header">
              <div class="card-title">
                <div class="card-icon">
                  <i class="fas fa-chart-line"></i>
                </div>
                <span>Performance Trends</span>
              </div>
              
              <div class="card-actions">
                <select id="chartMetric" class="date-range-select">
                  <option value="answerRate">Answer Rate</option>
                  <option value="talkTime">Talk Time</option>
                  <option value="acw">ACW</option>
                  <option value="onQueue">On Queue %</option>
                </select>
              </div>
            </div>
            
            <div class="card-body">
              <div class="chart-container">
                <canvas id="performanceChart"></canvas>
              </div>
            </div>
            
            <div class="card-footer">
              <div style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                                    <span style="font-weight: 500; color: var(--text-secondary);">Target: </span>
                  <span id="targetValue" style="color: var(--primary-color); font-weight: 600;">95%</span>
                </div>
                <div>
                  <button class="btn btn-secondary" style="padding: 6px 12px; font-size: 12px;">
                    <i class="fas fa-external-link-alt"></i> Detailed Report
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Upcoming 1-on-1s -->
        <div class="col-span-4">
          <div class="card">
            <div class="card-header">
              <div class="card-title">
                <div class="card-icon">
                  <i class="fas fa-calendar-alt"></i>
                </div>
                <span>Upcoming One-on-Ones</span>
              </div>
              
              <div class="card-actions">
                <button id="addOneOnOneBtn" class="card-action-btn" title="Schedule new one-on-one">
                  <i class="fas fa-plus"></i>
                </button>
              </div>
            </div>
            
            <div class="card-body">
              <div class="sessions-list" id="upcomingOneOnOnes">
                <!-- Sessions will be populated dynamically -->
                <div class="session-card">
                  <div class="session-header">
                    <div class="team-member">
                      <div class="avatar">JS</div>
                      <div class="team-member-name">John Smith</div>
                    </div>
                    <div class="session-date">
                      <i class="fas fa-clock"></i> Tomorrow, 10:00 AM
                    </div>
                  </div>
                  <div class="session-topics">
                    <div class="topic-tag">Performance</div>
                    <div class="topic-tag">Development</div>
                    <div class="topic-tag">Follow-up</div>
                  </div>
                </div>
                
                <div class="session-card">
                  <div class="session-header">
                    <div class="team-member">
                      <div class="avatar">LD</div>
                      <div class="team-member-name">Lisa Davis</div>
                    </div>
                    <div class="session-date">
                      <i class="fas fa-clock"></i> Apr 8, 11:30 AM
                    </div>
                  </div>
                  <div class="session-topics">
                    <div class="topic-tag">Quarterly Review</div>
                    <div class="topic-tag">Goals</div>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="card-footer">
              <button class="btn btn-secondary" style="width: 100%;">
                <i class="fas fa-calendar"></i> View All Scheduled Sessions
              </button>
            </div>
          </div>
        </div>
        
        <!-- QA Reviews Chart -->
        <div class="col-span-6">
          <div class="card">
            <div class="card-header">
              <div class="card-title">
                <div class="card-icon">
                  <i class="fas fa-star"></i>
                </div>
                <span>Quality Reviews</span>
              </div>
              
              <div class="card-actions">
                <button id="addQAReviewBtn" class="card-action-btn" title="Add new QA review">
                  <i class="fas fa-plus"></i>
                </button>
                <select id="qaChartView" class="date-range-select">
                  <option value="overall">Overall Scores</option>
                  <option value="category">By Category</option>
                </select>
              </div>
            </div>
            
            <div class="card-body">
              <div class="chart-container">
                <canvas id="qaChart"></canvas>
              </div>
            </div>
            
            <div class="card-footer">
              <div style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                  <span style="font-weight: 500; color: var(--text-secondary);">Team Average: </span>
                  <span id="qaTeamAverage" style="color: var(--primary-color); font-weight: 600;">92%</span>
                </div>
                <div>
                  <button class="btn btn-secondary" style="padding: 6px 12px; font-size: 12px;">
                    <i class="fas fa-external-link-alt"></i> View All Reviews
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Action Items -->
        <div class="col-span-6">
          <div class="card">
            <div class="card-header">
              <div class="card-title">
                <div class="card-icon">
                  <i class="fas fa-tasks"></i>
                </div>
                <span>Action Items</span>
              </div>
              
              <div class="card-actions">
                <button id="addActionItemBtn" class="card-action-btn" title="Add new action item">
                  <i class="fas fa-plus"></i>
                </button>
                <select id="actionItemFilter" class="date-range-select">
                  <option value="upcoming">Upcoming</option>
                  <option value="overdue">Overdue</option>
                  <option value="completed">Completed</option>
                </select>
              </div>
            </div>
            
            <div class="card-body">
              <div class="action-items-list" id="actionItemsList">
                <!-- Action items will be populated dynamically -->
                <div class="action-item">
                  <div class="action-item-header">
                    <div class="action-item-title">Review call recordings for John</div>
                    <div class="priority-badge priority-high">High Priority</div>
                  </div>
                  <div class="action-item-due overdue">
                    <i class="fas fa-calendar-day"></i> Due yesterday
                  </div>
                </div>
                
                <div class="action-item">
                  <div class="action-item-header">
                    <div class="action-item-title">Schedule coaching session with Lisa</div>
                    <div class="priority-badge priority-medium">Medium Priority</div>
                  </div>
                  <div class="action-item-due">
                    <i class="fas fa-calendar-day"></i> Due tomorrow
                  </div>
                </div>
                
                <div class="action-item">
                  <div class="action-item-header">
                    <div class="action-item-title">Prepare monthly performance report</div>
                    <div class="priority-badge priority-medium">Medium Priority</div>
                  </div>
                  <div class="action-item-due">
                    <i class="fas fa-calendar-day"></i> Due in 3 days
                  </div>
                </div>
              </div>
            </div>
            
            <div class="card-footer">
              <button class="btn btn-secondary" style="width: 100%;">
                <i class="fas fa-clipboard-list"></i> View All Action Items
              </button>
            </div>
          </div>
        </div>
        
        <!-- Team Members -->
        <div class="col-span-12">
          <div class="card">
            <div class="card-header">
              <div class="card-title">
                <div class="card-icon">
                  <i class="fas fa-users"></i>
                </div>
                <span>Team Members</span>
              </div>
              
              <div class="card-actions">
                <button id="addTeamMemberBtn" class="card-action-btn" title="Add team member">
                  <i class="fas fa-plus"></i>
                </button>
                <select id="teamMemberFilter" class="date-range-select">
                  <option value="all">All</option>
                  <option value="active">Active</option>
                  <option value="away">Away</option>
                </select>
              </div>
            </div>
            
            <div class="card-body">
              <div class="team-member-cards" id="teamMembersList">
                <!-- Team members will be populated dynamically -->
              </div>
            </div>
            
            <div class="card-footer">
              <div style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                  <span style="font-weight: 500; color: var(--text-secondary);">Total Team Members: </span>
                  <span id="teamMemberCount" style="color: var(--primary-color); font-weight: 600;">0</span>
                </div>
                <div>
                  <button class="btn btn-secondary" style="padding: 6px 12px; font-size: 12px;" id="viewTeamDetailsBtn">
                    <i class="fas fa-users"></i> Manage Team
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    // Global variables
    let currentView = 'team'; // 'team' or 'individual'
    let selectedTeamMember = null;
    let teamMembers = [];
    let dashboardData = {};
    let performanceChart = null;
    let qaChart = null;
    
    // Initialize the dashboard
    document.addEventListener('DOMContentLoaded', function() {
      // Show loading overlay
      showLoading();
      
      // Load initial data
      loadDashboardData();
      
      // Set up event listeners
      setupEventListeners();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // View toggle
      const viewOptions = document.querySelectorAll('.view-option');
      viewOptions.forEach(option => {
        option.addEventListener('click', function() {
          const view = this.getAttribute('data-view');
          switchView(view);
          
          // Update UI
          viewOptions.forEach(opt => opt.classList.remove('active'));
          this.classList.add('active');
        });
      });
      
      // Date range selector
      document.getElementById('dateRange').addEventListener('change', function() {
        loadDashboardData();
      });
      
      // Refresh button
      document.getElementById('refreshBtn').addEventListener('click', function() {
        this.classList.add('fa-spin');
        loadDashboardData().finally(() => {
          setTimeout(() => {
            this.classList.remove('fa-spin');
          }, 500);
        });
      });
      
      // Chart metric selector
      document.getElementById('chartMetric').addEventListener('change', function() {
        updatePerformanceChart();
      });
      
      // QA chart view selector
      document.getElementById('qaChartView').addEventListener('change', function() {
        updateQAChart();
      });
      
      // Action item filter
      document.getElementById('actionItemFilter').addEventListener('change', function() {
        loadActionItems();
      });
      
      // Team member filter
      document.getElementById('teamMemberFilter').addEventListener('change', function() {
        filterTeamMembers();
      });
      
      // Button actions
      document.getElementById('addOneOnOneBtn').addEventListener('click', function() {
        google.script.run.showOneOnOneForm();
      });
      
      document.getElementById('addQAReviewBtn').addEventListener('click', function() {
        google.script.run.showQAReviewForm();
      });
      
      document.getElementById('addActionItemBtn').addEventListener('click', function() {
        google.script.run.showActionItemsForm();
      });
      
      document.getElementById('addTeamMemberBtn').addEventListener('click', function() {
        google.script.run.showAddTeamMemberForm();
      });
      
      document.getElementById('viewTeamDetailsBtn').addEventListener('click', function() {
        google.script.run.showTeamView();
      });
      
      // Team member selector in individual view
      document.getElementById('selectedTeamMember').addEventListener('change', function() {
        selectedTeamMember = this.value;
      });
      
      document.getElementById('viewTeamMemberBtn').addEventListener('click', function() {
        if (selectedTeamMember) {
          loadIndividualData(selectedTeamMember);
        } else {
          showToast('Please select a team member', 'error');
        }
      });
    }
    
    // Switch between team and individual views
    function switchView(view) {
      currentView = view;
      
      // Show/hide team member selector
      const teamMemberSelector = document.getElementById('teamMemberSelector');
      teamMemberSelector.style.display = view === 'individual' ? 'block' : 'none';
      
      // Update page title
      const titleElement = document.querySelector('.title-content h1');
      titleElement.textContent = view === 'team' ? 'Team Lead Dashboard' : 'Individual Dashboard';
      
      // Reload data
      if (view === 'team') {
        loadDashboardData();
      } else {
        // If switching to individual view, populate the team member dropdown
        loadTeamMembersForDropdown();
      }
    }
    
    // Load team members (add this to your HTML files where needed)
    function loadTeamMembers() {
    // Show loading indicator if you have one
     // e.g., showLoading();
  
     google.script.run
    .withSuccessHandler(function(result) {
      // Hide loading indicator
      // e.g., hideLoading();
      
      if (result.success) {
        const teamMembers = result.data;
        // Populate your dropdowns or lists
        populateTeamMemberDropdowns(teamMembers);
      } else {
        // Show error message to user
        showErrorMessage(result.message);
      }
    })
    .withFailureHandler(function(error) {
      // Hide loading indicator
      // e.g., hideLoading();
      
      // Show error message
      showErrorMessage('Failed to load team members: ' + error);
    })
    .getActiveTeamMembers(); // Call the server-side function
}

// Example function to populate dropdowns
function populateTeamMemberDropdowns(teamMembers) {
  // Get all dropdowns that need team members
  const dropdowns = document.querySelectorAll('.team-member-dropdown');
  
  dropdowns.forEach(dropdown => {
    // Clear existing options except the first one (if it's a placeholder)
    while (dropdown.options.length > 1) {
      dropdown.remove(1);
    }
    
    // Add team members as options
    teamMembers.forEach(member => {
      const option = document.createElement('option');
      option.value = member['Team Member ID'];
      option.text = member['Full Name'] || `${member['First Name']} ${member['Last Name']}`;
      dropdown.appendChild(option);
    });
  });
}

// Error message display function
function showErrorMessage(message) {
  // Implement based on your UI design
  console.error(message);
  // Example: document.getElementById('error-message').textContent = message;
}

// Call this when the document is ready
document.addEventListener('DOMContentLoaded', loadTeamMembers);
    
    // Load dashboard data
    function loadDashboardData() {
      showLoading();
      
      const dateRange = document.getElementById('dateRange').value;
      
      return new Promise((resolve, reject) => {
        google.script.run
          .withSuccessHandler(function(result) {
            hideLoading();
            
            if (result.success) {
              dashboardData = result.data;
              
              // Update UI
              updateDashboardUI(dashboardData);
              resolve(dashboardData);
            } else {
              showToast('Failed to load dashboard data: ' + result.message, 'error');
              reject(new Error(result.message));
            }
          })
          .withFailureHandler(function(error) {
            hideLoading();
            showToast('Error: ' + error.message, 'error');
            reject(error);
          })
          .getDashboardData({
            viewMode: currentView,
            dateRange: dateRange,
            teamMemberId: selectedTeamMember
          });
      });
    }
    
    // Load individual team member data
    function loadIndividualData(teamMemberId) {
      showLoading();
      
      selectedTeamMember = teamMemberId;
      const dateRange = document.getElementById('dateRange').value;
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            dashboardData = result.data;
            
            // Update UI
            updateIndividualDashboardUI(dashboardData);
          } else {
            showToast('Failed to load team member data: ' + result.message, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error: ' + error.message, 'error');
        })
        .getDashboardData({
          viewMode: 'individual',
          dateRange: dateRange,
          teamMemberId: teamMemberId
        });
    }
    
    // Update dashboard UI with data
    function updateDashboardUI(data) {
      // Update title and subtitle
      document.getElementById('teamLeadName').textContent = data.teamLead?.name || 'Team Lead';
      document.getElementById('teamNameSubtitle').textContent = data.team?.name || 'Your Team';
      
      // Update welcome card metrics
      document.getElementById('totalTeamMembers').textContent = data.team?.memberCount || '--';
      document.getElementById('answerRate').textContent = formatPercentage(data.metrics?.answerRate) || '--';
      document.getElementById('avgTalkTime').textContent = formatTime(data.metrics?.avgTalkTime) || '--';
      document.getElementById('onQueuePercentage').textContent = formatPercentage(data.metrics?.onQueuePercentage) || '--';
      
      // Update stat cards
      document.getElementById('callsOffered').textContent = data.metrics?.callsOffered || '--';
      document.getElementById('callsAccepted').textContent = data.metrics?.callsAccepted || '--';
      document.getElementById('acwPercentage').textContent = formatPercentage(data.metrics?.acwPercentage) || '--';
      document.getElementById('interactingTime').textContent = formatPercentage(data.metrics?.interactingTime) || '--';
      
      // Update charts
      updatePerformanceChart();
      updateQAChart();
      
      // Update action items
      loadActionItems();
      
      // Update team members list
      loadTeamMembers();
    }
    
    // Update individual dashboard UI with data
    function updateIndividualDashboardUI(data) {
      // Update title and subtitle
      const teamMember = teamMembers.find(m => m['Team Member ID'] === selectedTeamMember);
      const memberName = teamMember ? `${teamMember['First Name']} ${teamMember['Last Name']}` : 'Team Member';
      
      document.getElementById('teamLeadName').textContent = memberName;
      document.getElementById('teamNameSubtitle').textContent = `Individual Performance`;
      
      // Update welcome card metrics
      document.getElementById('totalTeamMembers').textContent = data.teamMember?.status || 'Active';
      document.getElementById('answerRate').textContent = formatPercentage(data.metrics?.answerRate) || '--';
      document.getElementById('avgTalkTime').textContent = formatTime(data.metrics?.avgTalkTime) || '--';
      document.getElementById('onQueuePercentage').textContent = formatPercentage(data.metrics?.onQueuePercentage) || '--';
      
      // Update stat cards
      document.getElementById('callsOffered').textContent = data.metrics?.callsOffered || '--';
      document.getElementById('callsAccepted').textContent = data.metrics?.callsAccepted || '--';
      document.getElementById('acwPercentage').textContent = formatPercentage(data.metrics?.acwPercentage) || '--';
      document.getElementById('interactingTime').textContent = formatPercentage(data.metrics?.interactingTime) || '--';
      
      // Update charts
      updatePerformanceChart();
      updateQAChart();
      
      // Update action items
      loadActionItems();
    }
    
    // Update performance chart
    function updatePerformanceChart() {
      const chartMetric = document.getElementById('chartMetric').value;
      
      // Get target value based on metric
      let targetValue = 0;
      let metricLabel = '';
      
      switch (chartMetric) {
        case 'answerRate':
          targetValue = 95;
          metricLabel = 'Answer Rate (%)';
          break;
        case 'talkTime':
          targetValue = 15;
          metricLabel = 'Talk Time (minutes)';
          break;
        case 'acw':
          targetValue = 5;
          metricLabel = 'ACW (minutes)';
          break;
        case 'onQueue':
          targetValue = 65;
          metricLabel = 'On Queue (%)';
          break;
      }
      
      // Update target value display
      document.getElementById('targetValue').textContent = chartMetric === 'talkTime' || chartMetric === 'acw' 
        ? `${targetValue} min` 
        : `${targetValue}%`;
      
      // Prepare chart data
      const labels = dashboardData.charts?.dates || [];
      const data = dashboardData.charts?.[chartMetric] || [];
      
      // Create or update chart
      const ctx = document.getElementById('performanceChart').getContext('2d');
      
      if (performanceChart) {
        performanceChart.data.labels = labels;
        performanceChart.data.datasets[0].data = data;
        performanceChart.data.datasets[0].label = metricLabel;
        performanceChart.options.plugins.title.text = `${metricLabel} Over Time`;
        
        // Update target line
        performanceChart.data.datasets[1].data = Array(labels.length).fill(targetValue);
        
        performanceChart.update();
      } else {
        performanceChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [
              {
                label: metricLabel,
                data: data,
                borderColor: '#5540af',
                backgroundColor: 'rgba(85, 64, 175, 0.1)',
                borderWidth: 3,
                tension: 0.3,
                fill: true,
                pointBackgroundColor: '#ffffff',
                pointBorderColor: '#5540af',
                pointBorderWidth: 2,
                pointRadius: 4,
                pointHoverRadius: 6
              },
              {
                label: 'Target',
                data: Array(labels.length).fill(targetValue),
                borderColor: 'rgba(239, 68, 68, 0.7)',
                backgroundColor: 'transparent',
                borderWidth: 2,
                borderDash: [6, 6],
                tension: 0,
                fill: false,
                pointRadius: 0
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: {
                display: true,
                text: `${metricLabel} Over Time`,
                font: {
                  size: 16,
                  family: "'Inter', sans-serif",
                  weight: '500'
                },
                padding: {
                  bottom: 20
                },
                color: '#1e293b'
              },
              legend: {
                position: 'top',
                align: 'end',
                labels: {
                  boxWidth: 12,
                  usePointStyle: true,
                  pointStyle: 'circle',
                  font: {
                    size: 12,
                    family: "'Inter', sans-serif"
                  },
                  color: '#64748b'
                }
              },
              tooltip: {
                backgroundColor: 'rgba(255, 255, 255, 0.9)',
                titleColor: '#1e293b',
                bodyColor: '#1e293b',
                titleFont: {
                  size: 13,
                  family: "'Inter', sans-serif",
                  weight: '600'
                },
                bodyFont: {
                  size: 12,
                  family: "'Inter', sans-serif"
                },
                padding: 12,
                borderColor: '#e2e8f0',
                borderWidth: 1,
                displayColors: false,
                callbacks: {
                  title: function(tooltipItems) {
                    return tooltipItems[0].label;
                  },
                  label: function(context) {
                    let value = context.raw;
                    if (chartMetric === 'answerRate' || chartMetric === 'onQueue') {
                      return `${metricLabel}: ${value}%`;
                    } else {
                      return `${metricLabel}: ${value} min`;
                    }
                  }
                }
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                grid: {
                  color: '#f1f5f9',
                  drawBorder: false
                },
                ticks: {
                  font: {
                    size: 12,
                    family: "'Inter', sans-serif"
                  },
                  color: '#64748b',
                  callback: function(value) {
                    if (chartMetric === 'answerRate' || chartMetric === 'onQueue') {
                      return value + '%';
                    } else {
                      return value + ' min';
                    }
                  }
                }
              },
              x: {
                grid: {
                  color: '#f1f5f9',
                  drawBorder: false
                },
                ticks: {
                  font: {
                    size: 12,
                    family: "'Inter', sans-serif"
                  },
                  color: '#64748b'
                }
              }
            },
            interaction: {
              mode: 'index',
              intersect: false
            }
          }
        });
      }
    }
    
    // Update QA chart
    function updateQAChart() {
      const chartView = document.getElementById('qaChartView').value;
      const ctx = document.getElementById('qaChart').getContext('2d');
      
      // Prepare chart data
      const labels = dashboardData.qa?.labels || [];
      const data = dashboardData.qa?.scores || [];
      
      // Create or update chart
      if (qaChart) {
        qaChart.destroy();
      }
      
      if (chartView === 'overall') {
        // Bar chart for overall scores
        qaChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: 'Overall Score (%)',
              data: data,
              backgroundColor: 'rgba(16, 185, 129, 0.7)',
              borderColor: 'rgba(16, 185, 129, 1)',
              borderWidth: 1,
              borderRadius: 6
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: {
                display: false
              },
              legend: {
                display: false
              },
              tooltip: {
                backgroundColor: 'rgba(255, 255, 255, 0.9)',
                titleColor: '#1e293b',
                bodyColor: '#1e293b',
                titleFont: {
                  size: 13,
                  family: "'Inter', sans-serif",
                  weight: '600'
                },
                bodyFont: {
                  size: 12,
                  family: "'Inter', sans-serif"
                },
                padding: 12,
                borderColor: '#e2e8f0',
                borderWidth: 1,
                displayColors: false,
                callbacks: {
                  label: function(context) {
                    return `Score: ${context.raw}%`;
                  }
                }
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                max: 100,
                grid: {
                  color: '#f1f5f9',
                  drawBorder: false
                },
                ticks: {
                  font: {
                    size: 12,
                    family: "'Inter', sans-serif"
                  },
                  color: '#64748b',
                  callback: function(value) {
                    return value + '%';
                  }
                }
              },
              x: {
                grid: {
                  display: false
                },
                ticks: {
                  font: {
                    size: 11,
                    family: "'Inter', sans-serif"
                  },
                  color: '#64748b'
                }
              }
            }
          }
        });
      } else {
        // Radar chart for category scores
        qaChart = new Chart(ctx, {
          type: 'radar',
          data: {
            labels: ['Opening', 'Risk Assessment', 'Communication', 'Support', 'Closure'],
            datasets: [{
              label: 'Score (%)',
              data: dashboardData.qa?.categoryScores || [90, 85, 92, 88, 95],
              backgroundColor: 'rgba(85, 64, 175, 0.2)',
              borderColor: 'rgba(85, 64, 175, 0.7)',
              borderWidth: 2,
              pointBackgroundColor: '#ffffff',
              pointBorderColor: 'rgba(85, 64, 175, 0.7)',
              pointBorderWidth: 2,
              pointRadius: 4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              r: {
                angleLines: {
                  display: true,
                  color: '#e2e8f0'
                },
                grid: {
                  color: '#e2e8f0'
                },
                pointLabels: {
                  font: {
                    size: 12,
                    family: "'Inter', sans-serif"
                  },
                  color: '#1e293b'
                },
                suggestedMin: 0,
                suggestedMax: 100,
                ticks: {
                  stepSize: 20,
                  font: {
                    size: 10
                  },
                  color: '#64748b'
                }
              }
            },
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                backgroundColor: 'rgba(255, 255, 255, 0.9)',
                titleColor: '#1e293b',
                bodyColor: '#1e293b',
                titleFont: {
                  size: 13,
                  family: "'Inter', sans-serif",
                  weight: '600'
                },
                bodyFont: {
                  size: 12,
                  family: "'Inter', sans-serif"
                },
                padding: 12,
                borderColor: '#e2e8f0',
                borderWidth: 1,
                displayColors: false,
                callbacks: {
                  title: function(tooltipItems) {
                    return tooltipItems[0].label;
                  },
                  label: function(context) {
                    return `Score: ${context.raw}%`;
                  }
                }
              }
            }
          }
        });
      }
      
      // Update team average
      document.getElementById('qaTeamAverage').textContent = dashboardData.qa?.teamAverage || '--';
    }
    
    // Load action items
    function loadActionItems() {
      const filter = document.getElementById('actionItemFilter').value;
      const actionItemsList = document.getElementById('actionItemsList');
      
      // Clear current items
      actionItemsList.innerHTML = '';
      
      // Filter action items based on selection
      const actionItems = (dashboardData.actionItems || [])
        .filter(item => {
          if (filter === 'upcoming') return item.status === 'Open' && !item.isOverdue;
          if (filter === 'overdue') return item.status === 'Open' && item.isOverdue;
          if (filter === 'completed') return item.status === 'Completed';
          return true;
        })
        .slice(0, 3); // Limit to 3 items for dashboard
      
      if (actionItems.length === 0) {
        actionItemsList.innerHTML = `
          <div style="text-align: center; padding: 20px; color: var(--text-tertiary);">
            <i class="fas fa-check-circle" style="font-size: 24px; margin-bottom: 8px;"></i>
            <p>No ${filter} action items found.</p>
          </div>
        `;
        return;
      }
      
      // Create action item elements
      actionItems.forEach(item => {
        const actionItem = document.createElement('div');
        actionItem.className = 'action-item';
        
        const priorityClass = item.priority === 'High' ? 'priority-high' : 
                             item.priority === 'Medium' ? 'priority-medium' : 'priority-low';
        
        actionItem.innerHTML = `
          <div class="action-item-header">
            <div class="action-item-title">${item.description}</div>
            <div class="priority-badge ${priorityClass}">${item.priority} Priority</div>
          </div>
          <div class="action-item-due${item.isOverdue ? ' overdue' : ''}">
            <i class="fas fa-calendar-day"></i> ${item.dueDateFormatted}
          </div>
          <div class="action-item-assignee">
            <i class="fas fa-user"></i> ${item.assigneeName}
          </div>
        `;
        
        actionItemsList.appendChild(actionItem);
      });
    }
    
    // Load team members for dropdowns and display
function loadTeamMembers() {
  // Show loading if you have a loading indicator
  if (typeof showLoading === 'function') {
    showLoading();
  }
  
  google.script.run
    .withSuccessHandler(function(result) {
      // Hide loading if you have a loading indicator
      if (typeof hideLoading === 'function') {
        hideLoading();
      }
      
      if (result.success) {
        const teamMembers = result.data;
        
        // Populate all dropdowns with team-member-dropdown class
        const dropdowns = document.querySelectorAll('.team-member-dropdown');
        
        dropdowns.forEach(dropdown => {
          // Keep the first option (usually "All Team Members" or "Select Team Member")
          const firstOption = dropdown.options[0];
          dropdown.innerHTML = '';
          dropdown.appendChild(firstOption);
          
          // Add team members to dropdown
          teamMembers.forEach(member => {
            const option = document.createElement('option');
            option.value = member['Team Member ID'];
            option.textContent = member['Full Name'] || `${member['First Name']} ${member['Last Name']}`;
            dropdown.appendChild(option);
          });
        });
        
        // If you have a function to populate team status or other elements, call it here
        if (typeof populateTeamStatusList === 'function') {
          populateTeamStatusList(teamMembers);
        }
        
        // If you have a function to show success messages
        if (typeof showToast === 'function') {
          showToast('Success', 'Team members loaded successfully', 'success');
        }
      } else {
        console.error('Error loading team members:', result.message);
        // If you have a function to show error messages
        if (typeof showToast === 'function') {
          showToast('Error', result.message || 'Failed to load team members', 'error');
        }
      }
    })
    .withFailureHandler(function(error) {
      // Hide loading if you have a loading indicator
      if (typeof hideLoading === 'function') {
        hideLoading();
      }
      
      console.error('Error loading team members:', error);
      // If you have a function to show error messages
      if (typeof showToast === 'function') {
        showToast('Error', 'Failed to load team members: ' + error, 'error');
      }
    })
    .getAllTeamMembers();
}

// Call this function when the document is loaded
document.addEventListener('DOMContentLoaded', function() {
  loadTeamMembers();
  
  // Set up other event handlers as needed
});
    
    // Filter team members based on selection
    function filterTeamMembers() {
      loadTeamMembers();
    }
    
    // Show toast notification
    function showToast(message, type = 'info') {
      const toastContainer = document.getElementById('toast-container');
      
      const toast = document.createElement('div');
      toast.className = `toast toast-${type}`;
      toast.innerHTML = `
        <div class="toast-icon">
          <i class="fas fa-${type === 'success' ? 'check-circle' : 
                            type === 'error' ? 'exclamation-circle' : 
                            type === 'warning' ? 'exclamation-triangle' :
                            'info-circle'}"></i>
        </div>
        <div class="toast-message">${message}</div>
      `;
      
      toastContainer.appendChild(toast);
      
      // Animate in
      setTimeout(() => toast.classList.add('show'), 10);
      
      // Auto dismiss
      setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
      }, 5000);
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').style.display = 'flex';
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').style.display = 'none';
    }
    
    // Format percentage
    function formatPercentage(value) {
      if (value === undefined || value === null) return '--';
      return `${Math.round(value)}%`;
    }
    
    // Format time (minutes)
    function formatTime(minutes) {
      if (minutes === undefined || minutes === null) return '--';
      
      const mins = Math.floor(minutes);
      const secs = Math.round((minutes - mins) * 60);
      
      if (mins === 0) {
        return `${secs}s`;
      } else if (secs === 0) {
        return `${mins}m`;
      } else {
        return `${mins}m ${secs}s`;
      }
    }
  </script>
</body>
</html>




/**
 * Dashboard.gs - Contains all functions related to the main dashboard
 * Provides data for dashboard visualization, metrics calculation, and chart data
 */

/**
 * Get data for dashboard based on the current view mode and filters
 * @param {Object} params - Parameters for data retrieval
 * @return {Object} Dashboard data object with all necessary information
 */
function getDashboardData(params = {}) {
  try {
    // Default params
    const viewMode = params.viewMode || 'team';
    const dateRange = params.dateRange || 'week';
    const teamMemberId = params.teamMemberId || null;
    
    // Get date range
    const { startDate, endDate } = getDateRangeFromSelection(dateRange);
    
    // Get system config
    const config = getSystemConfig();
    
    if (!config.success) {
      return { success: false, message: 'Failed to load system configuration' };
    }
    
    // Get team lead information
    const teamLeadName = config.data.teamLeadName || '';
    const teamName = config.data.teamName || 'Your Team';
    
    // Get team members with proper caching
    const teamMembersResult = getAllTeamMembersWithCache();
    
    if (!teamMembersResult.success) {
      return { success: false, message: 'Failed to load team members: ' + teamMembersResult.message };
    }
    
    // Transform team members data for dashboard
    const teamMembers = teamMembersResult.data.map(member => ({
      id: member['Team Member ID'],
      firstName: member['First Name'],
      lastName: member['Last Name'],
      fullName: `${member['First Name']} ${member['Last Name']}`, // Add full name for convenience
      email: member['Email'],
      status: member['Status'],
      role: member['Role'],
      startDate: member['Start Date'],
      lastOneOnOne: member['Last One-on-One'],
      nextOneOnOne: member['Next One-on-One'],
      metrics: {
        answerRate: getTeamMemberAnswerRate(member['Team Member ID'], startDate, endDate),
        qaScore: getTeamMemberAverageQAScore(member['Team Member ID'], startDate, endDate)
      }
    }));
    
    // Calculate metrics
    const metrics = viewMode === 'team' ? 
      getTeamMetrics(startDate, endDate) : 
      getIndividualMetrics(teamMemberId, startDate, endDate);
    
    // Get chart data
    const charts = getChartData(viewMode, teamMemberId, startDate, endDate);
    
    // Get QA data
    const qa = getQAData(viewMode, teamMemberId, startDate, endDate);
    
    // Get action items
    const actionItems = getActionItems(viewMode, teamMemberId);
    
    // Get upcoming one-on-ones
    const upcomingOneOnOnes = getUpcomingOneOnOnes(viewMode, teamMemberId);
    
    // Prepare response object
    const dashboardData = {
      teamLead: {
        name: teamLeadName,
        email: config.data.teamLeadEmail
      },
      team: {
        name: teamName,
        memberCount: teamMembers.length,
        activeCount: teamMembers.filter(m => m.status === 'Active').length
      },
      metrics: metrics,
      charts: charts,
      qa: qa,
      actionItems: actionItems,
      oneOnOnes: upcomingOneOnOnes,
      teamMembers: teamMembers,
      dateRange: {
        start: startDate,
        end: endDate,
        label: getLabelForDateRange(dateRange)
      }
    };
    
    // If individual view, add team member info
    if (viewMode === 'individual' && teamMemberId) {
      const teamMember = teamMembers.find(m => m.id === teamMemberId);
      if (teamMember) {
        dashboardData.teamMember = teamMember;
      }
    }
    
    return { success: true, data: dashboardData };
    
  } catch (error) {
    logError('getDashboardData', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * Get date range from selection
 * @param {string} selection - Selected date range
 * @return {Object} Object with startDate and endDate
 */
function getDateRangeFromSelection(selection) {
  const now = new Date();
  let startDate, endDate;
  
  switch (selection) {
    case 'today':
      startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
      break;
      
    case 'week':
      // Start from last Monday
      const day = now.getDay();
      const diff = now.getDate() - day + (day === 0 ? -6 : 1);
      startDate = new Date(now.getFullYear(), now.getMonth(), diff);
      endDate = new Date(now.getFullYear(), now.getMonth(), diff + 6, 23, 59, 59);
      break;
      
    case 'month':
      startDate = new Date(now.getFullYear(), now.getMonth(), 1);
      endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);
      break;
      
    case 'quarter':
      const quarter = Math.floor(now.getMonth() / 3);
      startDate = new Date(now.getFullYear(), quarter * 3, 1);
      endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0, 23, 59, 59);
      break;
      
    case 'year':
      startDate = new Date(now.getFullYear(), 0, 1);
      endDate = new Date(now.getFullYear(), 11, 31, 23, 59, 59);
      break;
      
    default:
      // Default to last 7 days
      startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 6);
      endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
  }
  
  return { startDate, endDate };
}

/**
 * Get label for selected date range
 * @param {string} selection - Selected date range
 * @return {string} Formatted date range label
 */
function getLabelForDateRange(selection) {
  const { startDate, endDate } = getDateRangeFromSelection(selection);
  
  // Format the dates
  const formatDate = (date) => Utilities.formatDate(date, Session.getScriptTimeZone(), 'MMM d, yyyy');
  
  // For 'today', just show the date
  if (selection === 'today') {
    return `Today, ${formatDate(startDate)}`;
  }
  
  // For other ranges, show start - end
  return `${formatDate(startDate)} - ${formatDate(endDate)}`;
}

/**
 * Get team metrics
 * @param {Date} startDate - Start date for metrics
 * @param {Date} endDate - End date for metrics
 * @return {Object} Team metrics object
 */
function getTeamMetrics(startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const metricsSheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    
    if (!metricsSheet) {
      return {};
    }
    
    // Get all metrics data
    const data = metricsSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const dateCol = headers.indexOf('Date');
    const callsOfferedCol = headers.indexOf('Calls Offered');
    const callsAcceptedCol = headers.indexOf('Calls Accepted');
    const answerRateCol = headers.indexOf('Answer Rate');
    const avgTalkTimeCol = headers.indexOf('Average Talk Time');
    const acwPercentageCol = headers.indexOf('ACW Percentage');
    const onQueuePercentageCol = headers.indexOf('On Queue Percentage');
    const offQueuePercentageCol = headers.indexOf('Off Queue Percentage');
    const interactingTimeCol = headers.indexOf('Interacting Time');
    
    if (dateCol < 0) {
      return {};
    }
    
    // Filter by date range
    const filteredData = data.slice(1).filter(row => {
      const rowDate = new Date(row[dateCol]);
      return rowDate >= startDate && rowDate <= endDate;
    });
    
    if (filteredData.length === 0) {
      return {};
    }
    
    // Calculate aggregated metrics
    let totalCallsOffered = 0;
    let totalCallsAccepted = 0;
    let answerRates = [];
    let avgTalkTimes = [];
    let acwPercentages = [];
    let onQueuePercentages = [];
    let offQueuePercentages = [];
    let interactingTimes = [];
    
    filteredData.forEach(row => {
      if (callsOfferedCol >= 0) totalCallsOffered += Number(row[callsOfferedCol]) || 0;
      if (callsAcceptedCol >= 0) totalCallsAccepted += Number(row[callsAcceptedCol]) || 0;
      if (answerRateCol >= 0 && row[answerRateCol] !== '') answerRates.push(Number(row[answerRateCol]) || 0);
      if (avgTalkTimeCol >= 0 && row[avgTalkTimeCol] !== '') avgTalkTimes.push(Number(row[avgTalkTimeCol]) || 0);
      if (acwPercentageCol >= 0 && row[acwPercentageCol] !== '') acwPercentages.push(Number(row[acwPercentageCol]) || 0);
      if (onQueuePercentageCol >= 0 && row[onQueuePercentageCol] !== '') onQueuePercentages.push(Number(row[onQueuePercentageCol]) || 0);
      if (offQueuePercentageCol >= 0 && row[offQueuePercentageCol] !== '') offQueuePercentages.push(Number(row[offQueuePercentageCol]) || 0);
      if (interactingTimeCol >= 0 && row[interactingTimeCol] !== '') interactingTimes.push(Number(row[interactingTimeCol]) || 0);
    });
    
    // Calculate averages
    const avgAnswerRate = answerRates.length > 0 ? answerRates.reduce((a, b) => a + b, 0) / answerRates.length : null;
    const avgTalkTime = avgTalkTimes.length > 0 ? avgTalkTimes.reduce((a, b) => a + b, 0) / avgTalkTimes.length : null;
    const avgACW = acwPercentages.length > 0 ? acwPercentages.reduce((a, b) => a + b, 0) / acwPercentages.length : null;
    const avgOnQueue = onQueuePercentages.length > 0 ? onQueuePercentages.reduce((a, b) => a + b, 0) / onQueuePercentages.length : null;
    const avgOffQueue = offQueuePercentages.length > 0 ? offQueuePercentages.reduce((a, b) => a + b, 0) / offQueuePercentages.length : null;
    const avgInteracting = interactingTimes.length > 0 ? interactingTimes.reduce((a, b) => a + b, 0) / interactingTimes.length : null;
    
    // Calculate trends (change from previous period)
    const previousPeriodStart = new Date(startDate);
    previousPeriodStart.setDate(previousPeriodStart.getDate() - (endDate - startDate) / (1000 * 60 * 60 * 24));
    const previousPeriodEnd = new Date(startDate);
    previousPeriodEnd.setDate(previousPeriodEnd.getDate() - 1);
    
    // Filter by previous date range
    const previousData = data.slice(1).filter(row => {
      const rowDate = new Date(row[dateCol]);
      return rowDate >= previousPeriodStart && rowDate <= previousPeriodEnd;
    });
    
    // Calculate previous period metrics
    let prevTotalCallsOffered = 0;
    let prevTotalCallsAccepted = 0;
    let prevAnswerRates = [];
    let prevAcwPercentages = [];
    let prevInteractingTimes = [];
    
    previousData.forEach(row => {
      if (callsOfferedCol >= 0) prevTotalCallsOffered += Number(row[callsOfferedCol]) || 0;
      if (callsAcceptedCol >= 0) prevTotalCallsAccepted += Number(row[callsAcceptedCol]) || 0;
      if (answerRateCol >= 0 && row[answerRateCol] !== '') prevAnswerRates.push(Number(row[answerRateCol]) || 0);
      if (acwPercentageCol >= 0 && row[acwPercentageCol] !== '') prevAcwPercentages.push(Number(row[acwPercentageCol]) || 0);
      if (interactingTimeCol >= 0 && row[interactingTimeCol] !== '') prevInteractingTimes.push(Number(row[interactingTimeCol]) || 0);
    });
    
    // Calculate previous averages
    const prevAvgAnswerRate = prevAnswerRates.length > 0 ? prevAnswerRates.reduce((a, b) => a + b, 0) / prevAnswerRates.length : 0;
    const prevAvgACW = prevAcwPercentages.length > 0 ? prevAcwPercentages.reduce((a, b) => a + b, 0) / prevAcwPercentages.length : 0;
    const prevAvgInteracting = prevInteractingTimes.length > 0 ? prevInteractingTimes.reduce((a, b) => a + b, 0) / prevInteractingTimes.length : 0;
    
    // Calculate change percentages
    const callsOfferedChange = prevTotalCallsOffered ? ((totalCallsOffered - prevTotalCallsOffered) / prevTotalCallsOffered) * 100 : 0;
    const callsAcceptedChange = prevTotalCallsAccepted ? ((totalCallsAccepted - prevTotalCallsAccepted) / prevTotalCallsAccepted) * 100 : 0;
    const answerRateChange = prevAvgAnswerRate ? avgAnswerRate - prevAvgAnswerRate : 0;
    const acwChange = prevAvgACW ? avgACW - prevAvgACW : 0;
    const interactingChange = prevAvgInteracting ? avgInteracting - prevAvgInteracting : 0;
    
    return {
      callsOffered: totalCallsOffered,
      callsAccepted: totalCallsAccepted,
      answerRate: avgAnswerRate,
      avgTalkTime: avgTalkTime,
      acwPercentage: avgACW,
      onQueuePercentage: avgOnQueue,
      offQueuePercentage: avgOffQueue,
      interactingTime: avgInteracting,
      changes: {
        callsOffered: callsOfferedChange,
        callsAccepted: callsAcceptedChange,
        answerRate: answerRateChange,
        acw: acwChange,
        interacting: interactingChange
      }
    };
    
  } catch (error) {
    logError('getTeamMetrics', error);
    return {};
  }
}

/**
 * Get individual metrics for a specific team member
 * @param {string} teamMemberId - ID of the team member
 * @param {Date} startDate - Start date for metrics
 * @param {Date} endDate - End date for metrics
 * @return {Object} Individual metrics object
 */
function getIndividualMetrics(teamMemberId, startDate, endDate) {
  try {
    if (!teamMemberId) {
      return {};
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const metricsSheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    
    if (!metricsSheet) {
      return {};
    }
    
    // Get all metrics data
    const data = metricsSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const memberIdCol = headers.indexOf('Team Member ID');
    const dateCol = headers.indexOf('Date');
    const callsOfferedCol = headers.indexOf('Calls Offered');
    const callsAcceptedCol = headers.indexOf('Calls Accepted');
    const answerRateCol = headers.indexOf('Answer Rate');
    const avgTalkTimeCol = headers.indexOf('Average Talk Time');
    const acwPercentageCol = headers.indexOf('ACW Percentage');
    const onQueuePercentageCol = headers.indexOf('On Queue Percentage');
    const offQueuePercentageCol = headers.indexOf('Off Queue Percentage');
    const interactingTimeCol = headers.indexOf('Interacting Time');
    
    if (memberIdCol < 0 || dateCol < 0) {
      return {};
    }
    
    // Filter by team member and date range
    const filteredData = data.slice(1).filter(row => {
      const rowDate = new Date(row[dateCol]);
      return row[memberIdCol] === teamMemberId && rowDate >= startDate && rowDate <= endDate;
    });
    
    if (filteredData.length === 0) {
      return {};
    }
    
    // Calculate aggregated metrics
    let totalCallsOffered = 0;
    let totalCallsAccepted = 0;
    let answerRates = [];
    let avgTalkTimes = [];
    let acwPercentages = [];
    let onQueuePercentages = [];
    let offQueuePercentages = [];
    let interactingTimes = [];
    
    filteredData.forEach(row => {
      if (callsOfferedCol >= 0) totalCallsOffered += Number(row[callsOfferedCol]) || 0;
      if (callsAcceptedCol >= 0) totalCallsAccepted += Number(row[callsAcceptedCol]) || 0;
      if (answerRateCol >= 0 && row[answerRateCol] !== '') answerRates.push(Number(row[answerRateCol]) || 0);
      if (avgTalkTimeCol >= 0 && row[avgTalkTimeCol] !== '') avgTalkTimes.push(Number(row[avgTalkTimeCol]) || 0);
      if (acwPercentageCol >= 0 && row[acwPercentageCol] !== '') acwPercentages.push(Number(row[acwPercentageCol]) || 0);
      if (onQueuePercentageCol >= 0 && row[onQueuePercentageCol] !== '') onQueuePercentages.push(Number(row[onQueuePercentageCol]) || 0);
      if (offQueuePercentageCol >= 0 && row[offQueuePercentageCol] !== '') offQueuePercentages.push(Number(row[offQueuePercentageCol]) || 0);
      if (interactingTimeCol >= 0 && row[interactingTimeCol] !== '') interactingTimes.push(Number(row[interactingTimeCol]) || 0);
    });
    
    // Calculate averages
    const avgAnswerRate = answerRates.length > 0 ? answerRates.reduce((a, b) => a + b, 0) / answerRates.length : null;
    const avgTalkTime = avgTalkTimes.length > 0 ? avgTalkTimes.reduce((a, b) => a + b, 0) / avgTalkTimes.length : null;
    const avgACW = acwPercentages.length > 0 ? acwPercentages.reduce((a, b) => a + b, 0) / acwPercentages.length : null;
    const avgOnQueue = onQueuePercentages.length > 0 ? onQueuePercentages.reduce((a, b) => a + b, 0) / onQueuePercentages.length : null;
    const avgOffQueue = offQueuePercentages.length > 0 ? offQueuePercentages.reduce((a, b) => a + b, 0) / offQueuePercentages.length : null;
    const avgInteracting = interactingTimes.length > 0 ? interactingTimes.reduce((a, b) => a + b, 0) / interactingTimes.length : null;
    
    return {
      callsOffered: totalCallsOffered,
      callsAccepted: totalCallsAccepted,
      answerRate: avgAnswerRate,
      avgTalkTime: avgTalkTime,
      acwPercentage: avgACW,
      onQueuePercentage: avgOnQueue,
      offQueuePercentage: avgOffQueue,
      interactingTime: avgInteracting
    };
    
  } catch (error) {
    logError('getIndividualMetrics', error);
    return {};
  }
}

/**
 * Get chart data for dashboard
 * @param {string} viewMode - 'team' or 'individual' view
 * @param {string} teamMemberId - ID of the team member (for individual view)
 * @param {Date} startDate - Start date for chart data
 * @param {Date} endDate - End date for chart data
 * @return {Object} Chart data object
 */
function getChartData(viewMode, teamMemberId, startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const metricsSheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    
    if (!metricsSheet) {
      return {};
    }
    
    // Get all metrics data
    const data = metricsSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const memberIdCol = headers.indexOf('Team Member ID');
    const dateCol = headers.indexOf('Date');
    const answerRateCol = headers.indexOf('Answer Rate');
    const avgTalkTimeCol = headers.indexOf('Average Talk Time');
    const acwPercentageCol = headers.indexOf('ACW Percentage');
    const onQueuePercentageCol = headers.indexOf('On Queue Percentage');
    
    if (dateCol < 0) {
      return {};
    }
    
    // Get all dates in the range
    const dates = [];
    const currentDate = new Date(startDate);
    
    while (currentDate <= endDate) {
      dates.push(new Date(currentDate));
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    // For individual view, filter by team member
    let filteredData = data.slice(1);
    
    if (viewMode === 'individual' && teamMemberId && memberIdCol >= 0) {
      filteredData = filteredData.filter(row => row[memberIdCol] === teamMemberId);
    }
    
    // Filter by date range and group by date
    const dateDataMap = {};
    
    filteredData.forEach(row => {
      const rowDate = new Date(row[dateCol]);
      
      if (rowDate >= startDate && rowDate <= endDate) {
        const dateKey = Utilities.formatDate(rowDate, Session.getScriptTimeZone(), 'yyyy-MM-dd');
        
        if (!dateDataMap[dateKey]) {
          dateDataMap[dateKey] = [];
        }
        
        dateDataMap[dateKey].push(row);
      }
    });
    
    // Prepare chart data for each date in the range
    const formattedDates = [];
    const answerRateData = [];
    const talkTimeData = [];
    const acwData = [];
    const onQueueData = [];
    
    dates.forEach(date => {
      const dateKey = Utilities.formatDate(date, Session.getScriptTimeZone(), 'yyyy-MM-dd');
      const formattedDate = Utilities.formatDate(date, Session.getScriptTimeZone(), 'MMM d');
      formattedDates.push(formattedDate);
      
      const dayData = dateDataMap[dateKey] || [];
      
      if (dayData.length > 0) {
        // Calculate averages for the day
        const answerRates = dayData.map(row => answerRateCol >= 0 ? Number(row[answerRateCol]) || 0 : 0).filter(v => v > 0);
        const talkTimes = dayData.map(row => avgTalkTimeCol >= 0 ? Number(row[avgTalkTimeCol]) || 0 : 0).filter(v => v > 0);
        const acws = dayData.map(row => acwPercentageCol >= 0 ? Number(row[acwPercentageCol]) || 0 : 0).filter(v => v > 0);
        const onQueues = dayData.map(row => onQueuePercentageCol >= 0 ? Number(row[onQueuePercentageCol]) || 0 : 0).filter(v => v > 0);
        
        const avgAnswerRate = answerRates.length > 0 ? answerRates.reduce((a, b) => a + b, 0) / answerRates.length : null;
        const avgTalkTime = talkTimes.length > 0 ? talkTimes.reduce((a, b) => a + b, 0) / talkTimes.length : null;
        const avgACW = acws.length > 0 ? acws.reduce((a, b) => a + b, 0) / acws.length : null;
        const avgOnQueue = onQueues.length > 0 ? onQueues.reduce((a, b) => a + b, 0) / onQueues.length : null;
        
        answerRateData.push(avgAnswerRate !== null ? Math.round(avgAnswerRate) : null);
        talkTimeData.push(avgTalkTime !== null ? Math.round(avgTalkTime * 10) / 10 : null);
        acwData.push(avgACW !== null ? Math.round(avgACW * 10) / 10 : null);
        onQueueData.push(avgOnQueue !== null ? Math.round(avgOnQueue) : null);
      } else {
        // No data for this day
        answerRateData.push(null);
        talkTimeData.push(null);
        acwData.push(null);
        onQueueData.push(null);
      }
    });
    
    return {
      dates: formattedDates,
      answerRate: answerRateData,
      talkTime: talkTimeData,
      acw: acwData,
      onQueue: onQueueData
    };
    
  } catch (error) {
    logError('getChartData', error);
    return {};
  }
}

/**
 * Get QA data for dashboard
 * @param {string} viewMode - 'team' or 'individual' view
 * @param {string} teamMemberId - ID of the team member (for individual view)
 * @param {Date} startDate - Start date for QA data
 * @param {Date} endDate - End date for QA data
 * @return {Object} QA data object
 */
function getQAData(viewMode, teamMemberId, startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const qaSheet = ss.getSheetByName(CONFIG.SHEETS.QUALITY_REVIEWS);
    
    if (!qaSheet) {
      return {};
    }
    
    // Get all QA data
    const data = qaSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const memberIdCol = headers.indexOf('Team Member ID');
    const memberNameCol = headers.indexOf('Team Member Name');
    const dateCol = headers.indexOf('Interaction Date');
    const overallScoreCol = headers.indexOf('Overall Score');
    const openingScoreCol = headers.indexOf('Opening Score');
    const riskScoreCol = headers.indexOf('Risk Assessment Score');
    const commScoreCol = headers.indexOf('Communication Score');
    const supportScoreCol = headers.indexOf('Support Provided Score');
    const closureScoreCol = headers.indexOf('Closure Score');
    
    if (memberIdCol < 0 || dateCol < 0 || overallScoreCol < 0) {
      return {};
    }
    
    // Filter by date range
    let filteredData = data.slice(1).filter(row => {
      const rowDate = new Date(row[dateCol]);
      return rowDate >= startDate && rowDate <= endDate;
    });
    
    // For individual view, filter by team member
    if (viewMode === 'individual' && teamMemberId) {
      filteredData = filteredData.filter(row => row[memberIdCol] === teamMemberId);
    }
    
    if (filteredData.length === 0) {
      return {
        labels: [],
        scores: [],
        categoryScores: [0, 0, 0, 0, 0],
        teamAverage: 0
      };
    }
    
    // Prepare data for charts
    const teamMemberScores = {};
    let totalScore = 0;
    let categoryScores = [0, 0, 0, 0, 0]; // Opening, Risk, Comm, Support, Closure
    let categoryCounts = [0, 0, 0, 0, 0];
    
    filteredData.forEach(row => {
      const memberId = row[memberIdCol];
      const memberName = row[memberNameCol];
      const score = Number(row[overallScoreCol]) || 0;
      
      // Track overall score
      totalScore += score;
      
      // Track category scores
      if (openingScoreCol >= 0 && row[openingScoreCol] !== '') {
        categoryScores[0] += Number(row[openingScoreCol]) || 0;
        categoryCounts[0]++;
      }
      
      if (riskScoreCol >= 0 && row[riskScoreCol] !== '') {
        categoryScores[1] += Number(row[riskScoreCol]) || 0;
        categoryCounts[1]++;
      }
      
      if (commScoreCol >= 0 && row[commScoreCol] !== '') {
        categoryScores[2] += Number(row[commScoreCol]) || 0;
        categoryCounts[2]++;
      }
      
      if (supportScoreCol >= 0 && row[supportScoreCol] !== '') {
        categoryScores[3] += Number(row[supportScoreCol]) || 0;
        categoryCounts[3]++;
      }
      
      if (closureScoreCol >= 0 && row[closureScoreCol] !== '') {
        categoryScores[4] += Number(row[closureScoreCol]) || 0;
        categoryCounts[4]++;
      }
      
      // Group scores by team member
      if (viewMode === 'team') {
        if (!teamMemberScores[memberId]) {
          teamMemberScores[memberId] = {
            name: memberName,
            scores: [],
            sum: 0,
            count: 0
          };
        }
        
        teamMemberScores[memberId].scores.push(score);
        teamMemberScores[memberId].sum += score;
        teamMemberScores[memberId].count++;
      }
    });
    
    // Calculate team average
    const teamAverage = Math.round(totalScore / filteredData.length);
    
    // Calculate average category scores
    const avgCategoryScores = categoryScores.map((sum, index) => 
      categoryCounts[index] > 0 ? Math.round(sum / categoryCounts[index]) : 0
    );
    
    // For team view, prepare member averages
    if (viewMode === 'team') {
      const labels = [];
      const scores = [];
      
      // Sort team members by average score
      const sortedMembers = Object.keys(teamMemberScores)
        .map(id => ({
          id,
          name: teamMemberScores[id].name,
          avgScore: teamMemberScores[id].sum / teamMemberScores[id].count
        }))
        .sort((a, b) => b.avgScore - a.avgScore);
      
      // Get top performers for chart (limit to 10 for readability)
      const topMembers = sortedMembers.slice(0, 10);
      
      topMembers.forEach(member => {
        labels.push(member.name.split(' ')[0]); // Just use first name for chart labels
        scores.push(Math.round(member.avgScore));
      });
      
      return {
        labels,
        scores,
        categoryScores: avgCategoryScores,
        teamAverage
      };
    } else {
      // For individual view, prepare review scores over time
      const labels = filteredData.map(row => 
        Utilities.formatDate(new Date(row[dateCol]), Session.getScriptTimeZone(), 'MMM d')
      );
      
      const scores = filteredData.map(row => Number(row[overallScoreCol]) || 0);
      
      return {
        labels,
        scores,
        categoryScores: avgCategoryScores,
        teamAverage
      };
    }
    
  } catch (error) {
    logError('getQAData', error);
    return {
      labels: [],
      scores: [],
      categoryScores: [0, 0, 0, 0, 0],
      teamAverage: 0
    };
  }
}

/**
 * Get upcoming one-on-one meetings
 * @param {string} viewMode - 'team' or 'individual' view
 * @param {string} teamMemberId - ID of the team member (for individual view)
 * @return {Array} List of upcoming one-on-one sessions
 */
function getUpcomingOneOnOnes(viewMode, teamMemberId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const oneOnOneSheet = ss.getSheetByName(CONFIG.SHEETS.ONE_ON_ONE);
    
    if (!oneOnOneSheet) {
      return [];
    }
    
    // Get all one-on-one data
    const data = oneOnOneSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const memberIdCol = headers.indexOf('Team Member ID');
    const memberNameCol = headers.indexOf('Team Member Name');
    const sessionDateCol = headers.indexOf('Session Date');
    const discussionTopicsCol = headers.indexOf('Discussion Topics');
    
    if (memberIdCol < 0 || sessionDateCol < 0) {
      return [];
    }
    
    const now = new Date();
    
    // Filter for upcoming sessions
    let filteredData = data.slice(1).filter(row => {
      const sessionDate = new Date(row[sessionDateCol]);
      return sessionDate >= now;
    });
    
    // For individual view, filter by team member
    if (viewMode === 'individual' && teamMemberId) {
      filteredData = filteredData.filter(row => row[memberIdCol] === teamMemberId);
    }
    
    // Sort by date (closest first)
    filteredData.sort((a, b) => new Date(a[sessionDateCol]) - new Date(b[sessionDateCol]));
    
    // Limit to 5 upcoming sessions
    filteredData = filteredData.slice(0, 5);
    
    // Format data for UI
    return filteredData.map(row => {
      const sessionDate = new Date(row[sessionDateCol]);
      const topics = row[discussionTopicsCol] ? row[discussionTopicsCol].split(',').map(t => t.trim()) : [];
      
      // Format the date relative to today
      let formattedDate = '';
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      const sessionDay = new Date(sessionDate);
      sessionDay.setHours(0, 0, 0, 0);
      
      if (sessionDay.getTime() === today.getTime()) {
        formattedDate = 'Today';
      } else if (sessionDay.getTime() === tomorrow.getTime()) {
        formattedDate = 'Tomorrow';
      } else {
        formattedDate = Utilities.formatDate(sessionDate, Session.getScriptTimeZone(), 'MMM d');
      }
      
      // Add time
      formattedDate += ', ' + Utilities.formatDate(sessionDate, Session.getScriptTimeZone(), 'h:mm a');
      
      return {
        memberId: row[memberIdCol],
        memberName: row[memberNameCol],
        sessionDate: sessionDate,
        formattedDate: formattedDate,
        topics: topics.slice(0, 3), // Limit to 3 topics for display
        hasMoreTopics: topics.length > 3
      };
    });
    
  } catch (error) {
    logError('getUpcomingOneOnOnes', error);
    return [];
  }
}

/**
 * Get action items for dashboard
 * @param {string} viewMode - 'team' or 'individual' view
 * @param {string} teamMemberId - ID of the team member (for individual view)
 * @return {Array} List of action items
 */
function getActionItems(viewMode, teamMemberId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const actionItemsSheet = ss.getSheetByName(CONFIG.SHEETS.ACTION_ITEMS);
    
    if (!actionItemsSheet) {
      return [];
    }
    
    // Get all action items data
    const data = actionItemsSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const memberIdCol = headers.indexOf('Team Member ID');
    const memberNameCol = headers.indexOf('Team Member Name');
    const descriptionCol = headers.indexOf('Description');
    const dueDateCol = headers.indexOf('Due Date');
    const priorityCol = headers.indexOf('Priority');
    const statusCol = headers.indexOf('Status');
    const completionDateCol = headers.indexOf('Completion Date');
    
    if (memberIdCol < 0 || descriptionCol < 0 || statusCol < 0) {
      return [];
    }
    
    // Filter action items
    let filteredData = data.slice(1).filter(row => row[statusCol] !== '');
    
    // For individual view, filter by team member
    if (viewMode === 'individual' && teamMemberId) {
      filteredData = filteredData.filter(row => row[memberIdCol] === teamMemberId);
    }
    
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    
    // Format data for UI
    return filteredData.map(row => {
      const dueDate = row[dueDateCol] ? new Date(row[dueDateCol]) : null;
      const isOverdue = dueDate && dueDate < today && row[statusCol] === 'Open';
      
      // Format the due date
      let dueDateFormatted = '';
      
      if (dueDate) {
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        
        const dueDay = new Date(dueDate);
        dueDay.setHours(0, 0, 0, 0);
        
        if (dueDay.getTime() === today.getTime()) {
          dueDateFormatted = 'Today';
        } else if (dueDay.getTime() === tomorrow.getTime()) {
          dueDateFormatted = 'Tomorrow';
        } else if (dueDay.getTime() === yesterday.getTime()) {
          dueDateFormatted = 'Yesterday';
        } else {
          // Calculate days difference
          const diffTime = dueDay.getTime() - today.getTime();
          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
          
          if (diffDays > 0) {
            dueDateFormatted = `Due in ${diffDays} day${diffDays !== 1 ? 's' : ''}`;
          } else if (diffDays < 0) {
            dueDateFormatted = `Due ${Math.abs(diffDays)} day${Math.abs(diffDays) !== 1 ? 's' : ''} ago`;
          }
        }
      }
      
      return {
        memberId: row[memberIdCol],
        assigneeName: row[memberNameCol] || '',
        description: row[descriptionCol] || '',
        dueDate: dueDate,
        dueDateFormatted: dueDateFormatted,
        priority: row[priorityCol] || 'Medium',
        status: row[statusCol] || 'Open',
        isOverdue: isOverdue,
        completionDate: row[completionDateCol] ? new Date(row[completionDateCol]) : null
      };
    });
    
  } catch (error) {
    logError('getActionItems', error);
    return [];
  }
}

/**
 * Get team member answer rate
 * @param {string} teamMemberId - ID of the team member
 * @param {Date} startDate - Start date for metrics
 * @param {Date} endDate - End date for metrics
 * @return {number} Average answer rate or null if not available
 */
function getTeamMemberAnswerRate(teamMemberId, startDate, endDate) {
  try {
    if (!teamMemberId) {
      return null;
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const metricsSheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    
    if (!metricsSheet) {
      return null;
    }
    
    // Get all metrics data
    const data = metricsSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const memberIdCol = headers.indexOf('Team Member ID');
    const dateCol = headers.indexOf('Date');
    const answerRateCol = headers.indexOf('Answer Rate');
    
    if (memberIdCol < 0 || dateCol < 0 || answerRateCol < 0) {
      return null;
    }
    
    // Filter by team member and date range
    const filteredData = data.slice(1).filter(row => {
      const rowDate = new Date(row[dateCol]);
      return row[memberIdCol] === teamMemberId && rowDate >= startDate && rowDate <= endDate;
    });
    
    if (filteredData.length === 0) {
      return null;
    }
    
    // Calculate average answer rate
    const answerRates = filteredData
      .map(row => Number(row[answerRateCol]) || 0)
      .filter(rate => rate > 0);
    
    if (answerRates.length === 0) {
      return null;
    }
    
    const avgAnswerRate = answerRates.reduce((a, b) => a + b, 0) / answerRates.length;
    return Math.round(avgAnswerRate) + '%';
    
  } catch (error) {
    logError('getTeamMemberAnswerRate', error);
    return null;
  }
}

/**
 * Get team member average QA score
 * @param {string} teamMemberId - ID of the team member
 * @param {Date} startDate - Start date for QA reviews
 * @param {Date} endDate - End date for QA reviews
 * @return {number} Average QA score or null if not available
 */
function getTeamMemberAverageQAScore(teamMemberId, startDate, endDate) {
  try {
    if (!teamMemberId) {
      return null;
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const qaSheet = ss.getSheetByName(CONFIG.SHEETS.QUALITY_REVIEWS);
    
    if (!qaSheet) {
      return null;
    }
    
    // Get all QA data
    const data = qaSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const memberIdCol = headers.indexOf('Team Member ID');
    const dateCol = headers.indexOf('Interaction Date');
    const overallScoreCol = headers.indexOf('Overall Score');
    
    if (memberIdCol < 0 || dateCol < 0 || overallScoreCol < 0) {
      return null;
    }
    
    // Filter by team member and date range
    const filteredData = data.slice(1).filter(row => {
      const rowDate = new Date(row[dateCol]);
      return row[memberIdCol] === teamMemberId && rowDate >= startDate && rowDate <= endDate;
    });
    
    if (filteredData.length === 0) {
      return null;
    }
    
    // Calculate average QA score
    const scores = filteredData
      .map(row => Number(row[overallScoreCol]) || 0)
      .filter(score => score > 0);
    
    if (scores.length === 0) {
      return null;
    }
    
    const avgScore = scores.reduce((a, b) => a + b, 0) / scores.length;
    return Math.round(avgScore) + '%';
    
  } catch (error) {
    logError('getTeamMemberAverageQAScore', error);
    return null;
  }
}

/**
 * 🧠 Get all team members with proper caching
 * @return {Object} Result with team members data
 */
function getAllTeamMembersWithCache() {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cachedData = cache.get('teamMembersCache');
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    // If not in cache, get from spreadsheet
    const result = getAllTeamMembers();
    
    // Add full name property for convenience
    if (result.success && result.data) {
      result.data.forEach(member => {
        member['Full Name'] = `${member['First Name']} ${member['Last Name']}`;
      });
      
      // Cache the result for 5 minutes
      cache.put('teamMembersCache', JSON.stringify(result), 300);
    }
    
    return result;
  } catch (error) {
    logError('getAllTeamMembersWithCache', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * 🧠 Get all active team members for dropdowns and forms
 * @return {Object} Result with active team members data
 */
function getActiveTeamMembers() {
  try {
    const result = getAllTeamMembersWithCache();
    
    if (!result.success) {
      return result; // Return the error
    }
    
    // Filter for active members only
    const activeMembers = result.data.filter(m => m['Status'] === 'Active');
    
    return {
      success: true,
      data: activeMembers
    };
  } catch (error) {
    logError('getActiveTeamMembers', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * 🧹 Clear team member cache after changes
 * This should be called after adding, updating, or deleting team members
 * @return {Boolean} Success flag
 */
function clearTeamMemberCache() {
  try {
    CacheService.getScriptCache().remove('teamMembersCache');
    CacheService.getScriptCache().remove('activeTeamMembersCache');
    return true;
  } catch (error) {
    logError('clearTeamMemberCache', error);
    return false;
  }
}

/**
 * 📋 Get team member options for dropdowns with manual entry support
 * @return {Object} Result with team member options
 */
function getTeamMemberOptions() {
  try {
    const result = getActiveTeamMembers();
    
    if (!result.success || result.data.length === 0) {
      return {
        success: false,
        message: "No team members found. Please add team members first.",
        data: []
      };
    }
    
    // Format data for select dropdowns
    const options = result.data.map(member => ({
      id: member['Team Member ID'],
      name: member['Full Name'],
      firstName: member['First Name'],
      lastName: member['Last Name'],
      email: member['Email'] || ''
    }));
    
    return {
      success: true,
      data: options
    };
  } catch (error) {
    logError('getTeamMemberOptions', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * 🔍 Find team member by name or email (for manual entry support)
 * @param {String} searchText - Text to search for
 * @return {Object} Result with matching team members
 */
function findTeamMembersByText(searchText) {
  try {
    if (!searchText || searchText.trim().length < 2) {
      return { success: false, message: 'Search text too short', data: [] };
    }
    
    const result = getAllTeamMembersWithCache();
    
    if (!result.success) {
      return result;
    }
    
    const search = searchText.toLowerCase().trim();
    
    // Find matches
    const matches = result.data.filter(member => {
      const fullName = `${member['First Name']} ${member['Last Name']}`.toLowerCase();
      const email = (member['Email'] || '').toLowerCase();
      
      return fullName.includes(search) || email.includes(search);
    });
    
    // Format for UI
    const formattedMatches = matches.map(member => ({
      id: member['Team Member ID'],
      name: `${member['First Name']} ${member['Last Name']}`,
      email: member['Email'] || ''
    }));
    
    return {
      success: true,
      data: formattedMatches
    };
  } catch (error) {
    logError('findTeamMembersByText', error);
    return { success: false, message: error.toString(), data: [] };
  }
}
/**
 * 👥 Get all team members
 * @return {Object} Result with team members data
 */
function getAllTeamMembers() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!sheet) {
      return {
        success: false,
        message: 'Team Members sheet not found. Please run initialization.',
        data: []
      };
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return { 
        success: true, 
        message: 'No team members found.', 
        data: [] 
      };
    }
    
    const data = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    const teamMembers = data
      .filter(row => row[0]) // Filter out empty rows
      .map(row => {
        const member = {};
        headers.forEach((header, index) => {
          member[header] = row[index];
        });
        return member;
      });
    
    return { 
      success: true, 
      data: teamMembers 
    };
  } catch (error) {
    logError('getAllTeamMembers', error);
    return { 
      success: false, 
      message: 'Error retrieving team members: ' + error.toString(),
      data: []
    };
  }
}





<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Team Member</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      font-size: 14px;
      line-height: 1.5;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      overflow-x: hidden;
      padding: 20px;
    }
    
    .form-container {
      max-width: 100%;
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      overflow: hidden;
      position: relative;
    }
    
    .form-header {
      padding: 20px 24px;
      background: var(--primary-gradient);
      color: white;
      position: relative;
      overflow: hidden;
    }
    
    .form-header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      z-index: 1;
      pointer-events: none;
    }
    
    .form-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
      position: relative;
      z-index: 2;
    }
    
    .form-subtitle {
      font-size: 14px;
      opacity: 0.9;
      position: relative;
      z-index: 2;
    }
    
    .id-preview {
      position: absolute;
      top: 20px;
      right: 24px;
      background-color: rgba(255, 255, 255, 0.2);
      padding: 8px 12px;
      border-radius: var(--radius-md);
      backdrop-filter: blur(4px);
      font-family: 'Manrope', sans-serif;
      z-index: 2;
    }
    
    .id-label {
      font-size: 12px;
      opacity: 0.9;
      margin-bottom: 2px;
    }
    
    .id-value {
      font-size: 18px;
      font-weight: 600;
      letter-spacing: 1px;
    }
    
    .form-body {
      padding: 24px;
    }
    
    .form-section {
      margin-bottom: 24px;
    }
    
    .section-title {
      font-weight: 600;
      font-size: 16px;
      margin-bottom: 16px;
      padding-bottom: 8px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .section-title i {
      color: var(--primary-color);
    }
    
    .form-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 16px;
    }
    
    .form-group {
      margin-bottom: 16px;
    }
    
    .form-group.full-width {
      grid-column: 1 / -1;
    }
    
    label {
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    .input-group {
      position: relative;
    }
    
    .input-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
    }
    
    input[type="text"],
    input[type="email"],
    input[type="date"],
    input[type="tel"],
    select,
    textarea {
      width: 100%;
      padding: 10px 12px 10px 36px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-family: 'Inter', sans-serif;
      font-size: 14px;
      color: var(--text-primary);
      background-color: white;
      transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
    }
    
    input[type="text"]:focus,
    input[type="email"]:focus,
    input[type="date"]:focus,
    input[type="tel"]:focus,
    select:focus,
    textarea:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .select-group select {
      appearance: none;
      padding-right: 30px;
    }
    
    .select-group::after {
      content: '\f078';
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
      pointer-events: none;
      font-size: 12px;
    }
    
    textarea {
      min-height: 100px;
      resize: vertical;
    }
    
    .help-text {
      margin-top: 4px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .shift-options {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 8px;
    }
    
    .shift-option {
      flex: 1;
      min-width: 120px;
      background-color: var(--bg-secondary);
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      padding: 12px;
      text-align: center;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .shift-option:hover {
      background-color: var(--bg-tertiary);
    }
    
    .shift-option.selected {
      background-color: rgba(85, 64, 175, 0.1);
      border-color: var(--primary-color);
      color: var(--primary-color);
    }
    
    .shift-name {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .shift-time {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .skills-container {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 8px;
    }
    
    .skill-tag {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      background-color: var(--bg-secondary);
      border-radius: 20px;
      padding: 6px 12px;
      font-size: 12px;
      color: var(--text-secondary);
      font-weight: 500;
      transition: all var(--transition-fast);
    }
    
    .remove-skill {
      cursor: pointer;
      color: var(--text-tertiary);
      font-size: 10px;
      padding: 2px;
    }
    
    .remove-skill:hover {
      color: var(--danger-color);
    }
    
    .add-skill-btn {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      background-color: white;
      border: 1px dashed var(--border-medium);
      border-radius: 20px;
      padding: 6px 12px;
      font-size: 12px;
      color: var(--text-tertiary);
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .add-skill-btn:hover {
      border-color: var(--primary-color);
      color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    .status-options {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 8px;
    }
    
    .status-option {
      flex: 1;
      min-width: 90px;
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--bg-secondary);
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      padding: 12px;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .status-option:hover {
      background-color: var(--bg-tertiary);
    }
    
    .status-option.selected {
      background-color: rgba(85, 64, 175, 0.1);
      border-color: var(--primary-color);
    }
    
    .status-icon {
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      margin-bottom: 8px;
      color: white;
      font-size: 14px;
    }
    
    .status-active .status-icon {
      background-color: var(--success-color);
    }
    
    .status-training .status-icon {
      background-color: var(--info-color);
    }
    
    .status-pto .status-icon {
      background-color: var(--warning-color);
    }
    
    .status-loa .status-icon {
      background-color: var(--accent-color);
    }
    
    .status-uto .status-icon {
      background-color: var(--danger-color);
    }
    
    .status-disappeared .status-icon {
      background-color: var(--text-tertiary);
    }
    
    .status-name {
      font-weight: 500;
      font-size: 12px;
    }
    
    .form-footer {
      padding: 20px 24px;
      background-color: var(--bg-secondary);
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-top: 1px solid var(--border-light);
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 16px;
      font-weight: 500;
      font-size: 14px;
      border-radius: var(--radius-md);
      transition: all var(--transition-fast);
      cursor: pointer;
      border: none;
    }
    
    .btn-secondary {
      background-color: white;
      border: 1px solid var(--border-medium);
      color: var(--text-secondary);
    }
    
    .btn-secondary:hover {
      border-color: var(--text-secondary);
      color: var(--text-primary);
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-primary:active {
      transform: translateY(0);
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      z-index: 1000;
      backdrop-filter: blur(5px);
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(85, 64, 175, 0.1);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 12px;
      font-weight: 500;
      color: var(--primary-color);
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 16px;
      border-radius: var(--radius-md);
      background-color: white;
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      transform: translateX(120%);
      transition: transform var(--transition-normal);
      z-index: 999;
      max-width: 320px;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      flex-shrink: 0;
    }
    
    .notification-success .notification-icon {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .notification-error .notification-icon {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 2px;
    }
    
    .notification-message {
      font-size: 12px;
      color: var(--text-secondary);
    }
    
    @media (max-width: 768px) {
      .form-grid {
        grid-template-columns: 1fr;
      }
      
      .id-preview {
        position: static;
        margin-top: 12px;
        display: inline-block;
      }
      
      .form-footer {
        flex-direction: column-reverse;
        gap: 12px;
      }
      
      .form-footer .btn {
        width: 100%;
      }
    }
    
    /* Futuristic Elements */
    .cyber-line {
      position: absolute;
      height: 2px;
      background: linear-gradient(90deg, transparent, var(--primary-light), transparent);
      width: 100%;
      bottom: 0;
      left: 0;
      animation: scanline 3s linear infinite;
    }
    
    @keyframes scanline {
      0% {
        opacity: 0;
      }
      50% {
        opacity: 1;
      }
      100% {
        opacity: 0;
      }
    }
    
    .glow-effect {
      position: relative;
    }
    
    .glow-effect::before {
      content: '';
      position: absolute;
      top: -5px;
      left: -5px;
      right: -5px;
      bottom: -5px;
      background: var(--primary-gradient);
      border-radius: inherit;
      z-index: -1;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .glow-effect:focus-within::before {
      opacity: 0.3;
    }
    
    .form-header::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 50px;
      height: 100%;
      background: rgba(255, 255, 255, 0.2);
      animation: scan 2s linear infinite;
    }
    
    @keyframes scan {
      0% {
        transform: translateX(-100%);
      }
      100% {
        transform: translateX(600%);
      }
    }
  </style>
</head>

<body>
  <div class="form-container">
    <div class="form-header">
      <h1 class="form-title">✨ Add New Team Member</h1>
      <p class="form-subtitle">Add a new crisis counselor to your team</p>
      <div class="id-preview">
        <div class="id-label">Counselor ID:</div>
        <div class="id-value" id="counselorIdPreview">TL-0001</div>
      </div>
      <div class="cyber-line"></div>
    </div>
    
    <div class="form-body">
      <form id="addTeamMemberForm">
        <div class="form-section">
          <h2 class="section-title"><i class="fas fa-user-plus"></i> Basic Information</h2>
          <div class="form-grid">
            <div class="form-group glow-effect">
              <label for="firstName">First Name</label>
              <div class="input-group">
                <i class="fas fa-user input-icon"></i>
                <input type="text" id="firstName" name="firstName" required>
              </div>
            </div>
            
            <div class="form-group glow-effect">
              <label for="lastName">Last Name</label>
              <div class="input-group">
                <i class="fas fa-user input-icon"></i>
                <input type="text" id="lastName" name="lastName" required>
              </div>
            </div>
            
            <div class="form-group glow-effect">
              <label for="email">Email Address</label>
              <div class="input-group">
                <i class="fas fa-envelope input-icon"></i>
                <input type="email" id="email" name="email" required>
              </div>
            </div>
            
            <div class="form-group glow-effect">
              <label for="phone">Phone Number (Optional)</label>
              <div class="input-group">
                <i class="fas fa-phone input-icon"></i>
                <input type="tel" id="phone" name="phone">
              </div>
            </div>
          </div>
        </div>
        
        <div class="form-section">
          <h2 class="section-title"><i class="fas fa-calendar-alt"></i> Schedule & Status</h2>
          <div class="form-group">
            <label for="startDate">Start Date</label>
            <div class="input-group glow-effect">
              <i class="fas fa-calendar-day input-icon"></i>
              <input type="date" id="startDate" name="startDate" required>
            </div>
          </div>
          
          <div class="form-group">
            <label>Shift Assignment</label>
            <div class="shift-options">
              <div class="shift-option" data-shift="morning">
                <div class="shift-name">Morning</div>
                <div class="shift-time">7:00 AM - 3:00 PM</div>
              </div>
              <div class="shift-option" data-shift="afternoon">
                <div class="shift-name">Afternoon</div>
                <div class="shift-time">3:00 PM - 11:00 PM</div>
              </div>
              <div class="shift-option" data-shift="overnight">
                <div class="shift-name">Overnight</div>
                <div class="shift-time">11:00 PM - 7:00 AM</div>
              </div>
              <div class="shift-option" data-shift="weekend">
                <div class="shift-name">Weekend</div>
                <div class="shift-time">Various Hours</div>
              </div>
            </div>
            <input type="hidden" id="shiftAssignment" name="shiftAssignment" value="">
          </div>
          
          <div class="form-group">
            <label>Initial Status</label>
            <div class="status-options">
              <div class="status-option status-active selected" data-status="Active">
                <div class="status-icon">
                  <i class="fas fa-check"></i>
                </div>
                <div class="status-name">Active</div>
              </div>
              <div class="status-option status-training" data-status="Training">
                <div class="status-icon">
                  <i class="fas fa-graduation-cap"></i>
                </div>
                <div class="status-name">Training</div>
              </div>
              <div class="status-option status-pto" data-status="PTO">
                <div class="status-icon">
                  <i class="fas fa-umbrella-beach"></i>
                </div>
                <div class="status-name">PTO</div>
              </div>
              <div class="status-option status-loa" data-status="LOA">
                <div class="status-icon">
                  <i class="fas fa-hourglass-half"></i>
                </div>
                <div class="status-name">LOA</div>
              </div>
              <div class="status-option status-uto" data-status="UTO">
                <div class="status-icon">
                  <i class="fas fa-ban"></i>
                </div>
                <div class="status-name">UTO</div>
              </div>
              <div class="status-option status-disappeared" data-status="Disappeared">
                <div class="status-icon">
                  <i class="fas fa-ghost"></i>
                </div>
                <div class="status-name">MIA</div>
              </div>
            </div>
            <input type="hidden" id="status" name="status" value="Active">
          </div>
        </div>
        
        <div class="form-section">
          <h2 class="section-title"><i class="fas fa-star"></i> Skills & Experience</h2>
          <div class="form-grid">
            <div class="form-group glow-effect">
              <label for="skillInput">Skills & Certifications</label>
              <div class="input-group">
                <i class="fas fa-certificate input-icon"></i>
                <input type="text" id="skillInput" placeholder="Type a skill and press Enter">
              </div>
              <div class="help-text">Press Enter to add multiple skills</div>
              
              <div class="skills-container" id="skillsContainer">
                <span class="add-skill-btn" id="addSkillBtn">
                  <i class="fas fa-plus"></i> Add Skill
                </span>
              </div>
              <input type="hidden" id="skills" name="skills" value="">
            </div>
            
            <div class="form-group glow-effect">
              <label for="experience">Crisis Experience (Optional)</label>
              <div class="input-group select-group">
                <i class="fas fa-briefcase input-icon"></i>
                <select id="experience" name="experience">
                  <option value="New">New to crisis support</option>
                  <option value="< 1 year">Less than 1 year</option>
                  <option value="1-2 years">1-2 years</option>
                  <option value="3-5 years">3-5 years</option>
                  <option value="5+ years">5+ years</option>
                </select>
              </div>
            </div>
          </div>
          
          <div class="form-group glow-effect">
            <label for="notes">Additional Notes (Optional)</label>
            <div class="input-group">
              <i class="fas fa-sticky-note input-icon" style="top: 12px"></i>
              <textarea id="notes" name="notes"></textarea>
            </div>
          </div>
        </div>
      </form>
    </div>
    
    <div class="form-footer">
      <button class="btn btn-secondary" id="cancelBtn">
        <i class="fas fa-times"></i> Cancel
      </button>
      <button class="btn btn-primary" id="saveBtn">
        <i class="fas fa-save"></i> Add Team Member
      </button>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
    <div class="loading-text">Adding team member...</div>
  </div>
  
  <!-- Notification -->
  <div id="notification" class="notification">
    <div class="notification-icon">
      <i class="fas fa-check"></i>
    </div>
    <div class="notification-content">
      <div class="notification-title">Success!</div>
      <div class="notification-message">Team member added successfully.</div>
    </div>
  </div>
  
  <script>
    // Global variables
    let teamMemberID = '';
    let skillsList = [];
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
      // Generate a unique counselor ID
      generateCounselorID();
      
      // Set up event listeners
      setupEventListeners();
    });
    
    // Generate a unique counselor ID
    function generateCounselorID() {
      // Use current date as part of the ID to ensure uniqueness
      const now = new Date();
      const timestamp = now.getFullYear().toString().substr(-2) + 
                       (now.getMonth() + 1).toString().padStart(2, '0') +
                       now.getDate().toString().padStart(2, '0') +
                       now.getHours().toString().padStart(2, '0') +
                       now.getMinutes().toString().padStart(2, '0');
      
      // Create ID format: TL-XXXXXX (where X is a combination of timestamp and random digits)
      teamMemberID = `TL-${timestamp}`;
      
      // Display in the preview
      document.getElementById('counselorIdPreview').textContent = teamMemberID;
    }
    
    // Set up all event listeners
    function setupEventListeners() {
      // Shift selection
      const shiftOptions = document.querySelectorAll('.shift-option');
      shiftOptions.forEach(option => {
        option.addEventListener('click', function() {
          shiftOptions.forEach(opt => opt.classList.remove('selected'));
          this.classList.add('selected');
          document.getElementById('shiftAssignment').value = this.getAttribute('data-shift');
        });
      });
      
      // Status selection
      const statusOptions = document.querySelectorAll('.status-option');
      statusOptions.forEach(option => {
        option.addEventListener('click', function() {
          statusOptions.forEach(opt => opt.classList.remove('selected'));
          this.classList.add('selected');
          document.getElementById('status').value = this.getAttribute('data-status');
        });
      });
      
      // Skills input
      const skillInput = document.getElementById('skillInput');
      skillInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          addSkill(this.value);
          this.value = '';
        }
      });
      
      // Add skill button
      document.getElementById('addSkillBtn').addEventListener('click', function() {
        const input = document.getElementById('skillInput');
        if (input.value.trim()) {
          addSkill(input.value);
          input.value = '';
        } else {
          input.focus();
        }
      });
      
      // Save button
      document.getElementById('saveBtn').addEventListener('click', saveTeamMember);
      
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', function() {
        google.script.host.close();
      });
    }
    
    // Add a skill to the list
    function addSkill(skill) {
      if (!skill || skill.trim() === '') return;
      
      skill = skill.trim();
      
      // Check if skill already exists
      if (skillsList.includes(skill)) return;
      
      skillsList.push(skill);
      
      // Update hidden input
      document.getElementById('skills').value = skillsList.join(',');
      
      // Create skill tag
      const skillTag = document.createElement('div');
      skillTag.className = 'skill-tag';
      skillTag.innerHTML = `
        ${skill}
        <span class="remove-skill" data-skill="${skill}">
          <i class="fas fa-times"></i>
        </span>
      `;
      
      // Add remove functionality
      skillTag.querySelector('.remove-skill').addEventListener('click', function() {
        const skillToRemove = this.getAttribute('data-skill');
        skillsList = skillsList.filter(s => s !== skillToRemove);
        document.getElementById('skills').value = skillsList.join(',');
        this.parentElement.remove();
      });
      
      // Add to container before the "Add Skill" button
      const container = document.getElementById('skillsContainer');
      container.insertBefore(skillTag, document.getElementById('addSkillBtn'));
    }
    
    // Save the team member
    function saveTeamMember() {
      // Validate form
      const form = document.getElementById('addTeamMemberForm');
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }
      
      // Show loading overlay
      showLoading(true);
      
      // Collect form data
      const teamMember = {
        id: teamMemberID,
        firstName: document.getElementById('firstName').value,
        lastName: document.getElementById('lastName').value,
        email: document.getElementById('email').value,
        phone: document.getElementById('phone').value,
        startDate: document.getElementById('startDate').value,
        shift: document.getElementById('shiftAssignment').value,
        status: document.getElementById('status').value,
        skills: skillsList.join(','),
        experience: document.getElementById('experience').value,
        notes: document.getElementById('notes').value
      };
      
      // Call server-side function to save
      google.script.run
        .withSuccessHandler(function(result) {
          showLoading(false);
          
          if (result.success) {
            showNotification('Success!', 'Team member added successfully.', 'success');
            // Close after a delay
            setTimeout(function() {
              google.script.host.close();
            }, 1500);
          } else {
            showNotification('Error', result.message || 'Failed to add team member.', 'error');
          }
        })
        .withFailureHandler(function(error) {
          showLoading(false);
          showNotification('Error', error.message || 'An unexpected error occurred.', 'error');
        })
        .addTeamMember(teamMember);
    }
    
    // Show/hide loading overlay
    function showLoading(show) {
      const overlay = document.getElementById('loadingOverlay');
      if (show) {
        overlay.classList.add('show');
      } else {
        overlay.classList.remove('show');
      }
    }
    
    // Show notification
    function showNotification(title, message, type = 'success') {
      const notification = document.getElementById('notification');
      const iconElement = notification.querySelector('.notification-icon i');
      
      // Set notification type
      notification.className = 'notification notification-' + type;
      
      // Set icon
      iconElement.className = type === 'success' ? 'fas fa-check' : 'fas fa-exclamation-circle';
      
      // Set content
      notification.querySelector('.notification-title').textContent = title;
      notification.querySelector('.notification-message').textContent = message;
      
      // Show notification
      notification.classList.add('show');
      
      // Auto hide after 5 seconds
      setTimeout(function() {
        notification.classList.remove('show');
      }, 5000);
    }
  </script>
</body>
</html>



<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Update Team Member Status</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Status colors */
      --status-active: #10b981;
      --status-training: #3b82f6;
      --status-pto: #f59e0b;
      --status-loa: #fb7185;
      --status-uto: #ef4444;
      --status-disappeared: #94a3b8;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      font-size: 14px;
      line-height: 1.5;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      padding: 20px;
    }
    
    .status-form-container {
      max-width: 100%;
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      overflow: hidden;
    }
    
    .form-header {
      padding: 20px 24px;
      background: var(--primary-gradient);
      color: white;
      position: relative;
      overflow: hidden;
    }
    
    .form-header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .form-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
      position: relative;
    }
    
    .form-subtitle {
      font-size: 14px;
      opacity: 0.9;
      position: relative;
    }
    
    .form-body {
      padding: 24px;
    }
    
    .form-section {
      margin-bottom: 24px;
    }
    
    .section-title {
      font-weight: 600;
      font-size: 16px;
      margin-bottom: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .section-title i {
      color: var(--primary-color);
    }
    
    .member-selector {
      margin-bottom: 24px;
      position: relative;
    }
    
    .member-selector-header {
      padding: 12px 16px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
      transition: all var(--transition-fast);
      background-color: white;
    }
    
    .member-selector-header:hover {
      border-color: var(--primary-color);
    }
    
    .member-selector-label {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .member-selector-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background: var(--bg-tertiary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--text-secondary);
    }
    
    .member-selector-icon.selected {
      background: var(--primary-gradient);
      color: white;
    }
    
    .member-selector-text {
      font-weight: 500;
    }
    
    .member-selector-value {
      font-weight: 600;
      color: var(--primary-color);
    }
    
    .member-selector-dropdown {
      position: absolute;
      top: calc(100% + 8px);
      left: 0;
      width: 100%;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      z-index: 10;
      max-height: 250px;
      overflow-y: auto;
      display: none;
    }
    
    .member-selector-dropdown.open {
      display: block;
    }
    
    .member-search {
      padding: 12px 16px;
      border-bottom: 1px solid var(--border-light);
      position: sticky;
      top: 0;
      background-color: white;
      z-index: 2;
    }
    
    .member-search-input {
      width: 100%;
      padding: 8px 12px 8px 36px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-family: 'Inter', sans-serif;
      font-size: 14px;
    }
    
    .member-search-icon {
      position: absolute;
      left: 28px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
    }
    
    .member-search-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .member-list {
      padding: 8px 0;
    }
    
    .member-item {
      padding: 10px 16px;
      display: flex;
      align-items: center;
      gap: 12px;
      cursor: pointer;
      transition: background-color var(--transition-fast);
    }
    
    .member-item:hover {
      background-color: var(--bg-secondary);
    }
    
    .member-avatar {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background: var(--primary-gradient);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      flex-shrink: 0;
    }
    
    .member-info {
      flex: 1;
    }
    
    .member-name {
      font-weight: 500;
      margin-bottom: 2px;
    }
    
    .member-email {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .member-status {
      padding: 2px 8px;
      border-radius: var(--radius-sm);
      font-size: 11px;
      font-weight: 600;
      text-transform: uppercase;
    }
    
    .status-active {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--status-active);
    }
    
    .status-training {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--status-training);
    }
    
    .status-pto {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--status-pto);
    }
    
    .status-loa {
      background-color: rgba(251, 113, 133, 0.1);
      color: var(--status-loa);
    }
    
    .status-uto {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--status-uto);
    }
    
    .status-disappeared {
      background-color: rgba(148, 163, 184, 0.1);
      color: var(--status-disappeared);
    }
    
    .status-options {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 12px;
      margin-top: 8px;
    }
    
    .status-option {
      background-color: var(--bg-secondary);
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      padding: 16px;
      text-align: center;
      cursor: pointer;
      transition: all var(--transition-normal);
    }
    
    .status-option:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-md);
    }
    
    .status-option.selected {
      border-width: 2px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    .status-active-option.selected {
      border-color: var(--status-active);
    }
    
    .status-training-option.selected {
      border-color: var(--status-training);
    }
    
    .status-pto-option.selected {
      border-color: var(--status-pto);
    }
    
    .status-loa-option.selected {
      border-color: var(--status-loa);
    }
    
    .status-uto-option.selected {
      border-color: var(--status-uto);
    }
    
    .status-disappeared-option.selected {
      border-color: var(--status-disappeared);
    }
    
    .status-icon {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      margin: 0 auto 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      color: white;
    }
    
    .status-active-option .status-icon {
      background-color: var(--status-active);
    }
    
    .status-training-option .status-icon {
      background-color: var(--status-training);
    }
    
    .status-pto-option .status-icon {
      background-color: var(--status-pto);
    }
    
    .status-loa-option .status-icon {
      background-color: var(--status-loa);
    }
    
    .status-uto-option .status-icon {
      background-color: var(--status-uto);
    }
    
    .status-disappeared-option .status-icon {
      background-color: var(--status-disappeared);
    }
    
    .status-name {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .status-description {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .form-group {
      margin-bottom: 16px;
    }
    
    label {
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    .input-group {
      position: relative;
    }
    
    .input-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
    }
    
    textarea {
      width: 100%;
      padding: 10px 12px 10px 36px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-family: 'Inter', sans-serif;
      font-size: 14px;
      min-height: 100px;
      resize: vertical;
    }
    
    textarea:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .form-footer {
      padding: 20px 24px;
      background-color: var(--bg-secondary);
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-top: 1px solid var(--border-light);
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 16px;
      font-weight: 500;
      font-size: 14px;
      border-radius: var(--radius-md);
      transition: all var(--transition-fast);
      cursor: pointer;
      border: none;
    }
    
    .btn-secondary {
      background-color: white;
      border: 1px solid var(--border-medium);
      color: var(--text-secondary);
    }
    
    .btn-secondary:hover {
      border-color: var(--text-secondary);
      color: var(--text-primary);
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-primary:active {
      transform: translateY(0);
    }
    
    .btn-disabled {
      opacity: 0.5;
      cursor: not-allowed;
      pointer-events: none;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      z-index: 1000;
      backdrop-filter: blur(5px);
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(85, 64, 175, 0.1);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    .loading-text {
      margin-top: 12px;
      font-weight: 500;
      color: var(--primary-color);
    }
    
    /* Toast notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 16px;
      border-radius: var(--radius-md);
      background-color: white;
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      transform: translateX(120%);
      transition: transform var(--transition-normal);
      z-index: 999;
      max-width: 320px;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      flex-shrink: 0;
    }
    
    .notification-success .notification-icon {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--status-active);
    }
    
    .notification-error .notification-icon {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--status-uto);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 2px;
    }
    
    .notification-message {
      font-size: 12px;
      color: var(--text-secondary);
    }
    
    /* Futuristic elements */
    .cyber-line {
      position: absolute;
      height: 2px;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);
      width: 100%;
      bottom: 0;
      left: 0;
      animation: scanline 3s linear infinite;
    }
    
    @keyframes scanline {
      0% {
        opacity: 0;
      }
      50% {
        opacity: 1;
      }
      100% {
        opacity: 0;
      }
    }
    
    .status-option .pulse-effect {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      animation: pulse 2s infinite;
      border-radius: var(--radius-md);
      opacity: 0;
      pointer-events: none;
    }
    
    .status-active-option .pulse-effect {
      box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7);
    }
    
    .status-training-option .pulse-effect {
      box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);
    }
    
    .status-pto-option .pulse-effect {
      box-shadow: 0 0 0 0 rgba(245, 158, 11, 0.7);
    }
    
    .status-loa-option .pulse-effect {
      box-shadow: 0 0 0 0 rgba(251, 113, 133, 0.7);
    }
    
    .status-uto-option .pulse-effect {
      box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
    }
    
    .status-disappeared-option .pulse-effect {
      box-shadow: 0 0 0 0 rgba(148, 163, 184, 0.7);
    }
    
    .status-option.selected .pulse-effect {
      opacity: 1;
    }
    
    @keyframes pulse {
      0% {
        box-shadow: 0 0 0 0 rgba(var(--pulse-color), 0.7);
      }
      70% {
        box-shadow: 0 0 0 10px rgba(var(--pulse-color), 0);
      }
      100% {
        box-shadow: 0 0 0 0 rgba(var(--pulse-color), 0);
      }
    }
    
    @media (max-width: 600px) {
      .status-options {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .form-footer {
        flex-direction: column-reverse;
        gap: 12px;
      }
      
      .form-footer .btn {
        width: 100%;
      }
    }
  </style>
</head>

<body>
  <div class="status-form-container">
    <div class="form-header">
      <h1 class="form-title"><i class="fas fa-user-clock"></i> Update Team Member Status</h1>
      <p class="form-subtitle">Change status, shifts, or update team member information</p>
      <div class="cyber-line"></div>
    </div>
    
    <div class="form-body">
      <div class="section-title">
        <i class="fas fa-user-check"></i> Select Team Member
      </div>
      
      <div class="member-selector" id="memberSelector">
        <div class="member-selector-header" id="memberSelectorHeader">
          <div class="member-selector-label">
            <div class="member-selector-icon" id="memberSelectorIcon">
              <i class="fas fa-user"></i>
            </div>
            <div class="member-selector-text">
              <span id="selectedMemberPrompt">Choose a team member to update</span>
              <span id="selectedMemberName" style="display:none;"></span>
            </div>
          </div>
          <div>
            <i class="fas fa-chevron-down"></i>
          </div>
        </div>
        
        <div class="member-selector-dropdown" id="memberDropdown">
          <div class="member-search">
            <i class="fas fa-search member-search-icon"></i>
            <input type="text" class="member-search-input" id="memberSearchInput" placeholder="Search team members...">
          </div>
          <div class="member-list" id="memberList">
            <!-- Members will be loaded here -->
          </div>
        </div>
      </div>
      
      <div id="statusUpdateForm" style="display: none;">
        <div class="form-section">
          <div class="section-title">
            <i class="fas fa-toggle-on"></i> Update Status
          </div>
          
          <div class="status-options">
            <div class="status-option status-active-option" data-status="Active">
              <div class="status-icon">
                <i class="fas fa-check"></i>
              </div>
              <div class="status-name">Active</div>
              <div class="status-description">Working regularly</div>
                            <div class="pulse-effect"></div>
            </div>
            
            <div class="status-option status-loa-option" data-status="LOA">
              <div class="status-icon">
                <i class="fas fa-hourglass-half"></i>
              </div>
              <div class="status-name">LOA</div>
              <div class="status-description">Leave of Absence</div>
              <div class="pulse-effect"></div>
            </div>
            
            <div class="status-option status-loa-option" data-status="FMLA">
              <div class="status-icon">
                <i class="fas fa-file-medical"></i>
              </div>
              <div class="status-name">FMLA</div>
              <div class="status-description">Family Medical Leave</div>
              <div class="pulse-effect"></div>
            </div>
            
            <div class="status-option status-uto-option" data-status="UTO">
              <div class="status-icon">
                <i class="fas fa-ban"></i>
              </div>
              <div class="status-name">UTO</div>
              <div class="status-description">Unplanned Time Off</div>
              <div class="pulse-effect"></div>
            </div>
            
            <div class="status-option status-pto-option" data-status="PTO">
              <div class="status-icon">
                <i class="fas fa-umbrella-beach"></i>
              </div>
              <div class="status-name">PTO</div>
              <div class="status-description">Planned Time Off</div>
              <div class="pulse-effect"></div>
            </div>
            
            <div class="status-option status-disappeared-option" data-status="On shift disappearance">
              <div class="status-icon">
                <i class="fas fa-ghost"></i>
              </div>
              <div class="status-name">Disappeared</div>
              <div class="status-description">On shift disappearance</div>
              <div class="pulse-effect"></div>
            </div>
            
            <div class="status-option status-training-option" data-status="Tech issues">
              <div class="status-icon">
                <i class="fas fa-laptop-code"></i>
              </div>
              <div class="status-name">Tech Issues</div>
              <div class="status-description">Technical problems</div>
              <div class="pulse-effect"></div>
            </div>
            
            <div class="status-option status-pto-option" data-status="Early out">
              <div class="status-icon">
                <i class="fas fa-sign-out-alt"></i>
              </div>
              <div class="status-name">Early Out</div>
              <div class="status-description">Left shift early</div>
              <div class="pulse-effect"></div>
            </div>
          </div>
        </div>
        
        <div class="form-section">
          <div class="section-title">
            <i class="fas fa-comment-alt"></i> Additional Information
          </div>
          
          <div class="form-group">
            <label for="effectiveDate">Effective Date</label>
            <div class="input-group">
              <i class="fas fa-calendar-day input-icon"></i>
              <input type="date" id="effectiveDate" name="effectiveDate" style="width: 100%; padding: 10px 12px 10px 36px; border: 1px solid var(--border-medium); border-radius: var(--radius-md); font-family: 'Inter', sans-serif; font-size: 14px;">
            </div>
          </div>
          
          <div class="form-group">
            <label for="notes">Notes</label>
            <div class="input-group">
              <i class="fas fa-sticky-note input-icon" style="top: 12px;"></i>
              <textarea id="notes" name="notes" placeholder="Add any additional context or details..."></textarea>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="form-footer">
      <button class="btn btn-secondary" id="cancelBtn">
        <i class="fas fa-times"></i> Cancel
      </button>
      <button class="btn btn-primary btn-disabled" id="updateBtn">
        <i class="fas fa-save"></i> Update Status
      </button>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
    <div class="loading-text">Updating status...</div>
  </div>
  
  <!-- Toast Notification -->
  <div id="notification" class="notification">
    <div class="notification-icon">
      <i class="fas fa-check"></i>
    </div>
    <div class="notification-content">
      <div class="notification-title">Success!</div>
      <div class="notification-message">Status updated successfully.</div>
    </div>
  </div>
  
  <script>
    // Global variables
    let selectedMemberId = null;
    let selectedMemberName = '';
    let selectedStatus = 'Active';
    let teamMembers = [];
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
      // Load team members
      loadTeamMembers();
      
      // Set effective date to today
      document.getElementById('effectiveDate').valueAsDate = new Date();
      
      // Set up event listeners
      setupEventListeners();
    });
    
    // Load team members from the server
    function loadTeamMembers() {
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(result) {
          showLoading(false);
          
          if (result.success) {
            teamMembers = result.data;
            populateMemberList(teamMembers);
          } else {
            showNotification('Error', result.message || 'Failed to load team members.', 'error');
          }
        })
        .withFailureHandler(function(error) {
          showLoading(false);
          showNotification('Error', error.message || 'An unexpected error occurred.', 'error');
        })
        .getAllTeamMembers();
    }
    
    // Set up event listeners
    function setupEventListeners() {
      // Member selector dropdown
      const memberSelectorHeader = document.getElementById('memberSelectorHeader');
      const memberDropdown = document.getElementById('memberDropdown');
      
      memberSelectorHeader.addEventListener('click', function() {
        memberDropdown.classList.toggle('open');
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function(e) {
        if (!memberSelectorHeader.contains(e.target) && !memberDropdown.contains(e.target)) {
          memberDropdown.classList.remove('open');
        }
      });
      
      // Member search
      const memberSearchInput = document.getElementById('memberSearchInput');
      memberSearchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        filterMemberList(searchTerm);
      });
      
      // Status selection
      const statusOptions = document.querySelectorAll('.status-option');
      statusOptions.forEach(option => {
        option.addEventListener('click', function() {
          statusOptions.forEach(opt => opt.classList.remove('selected'));
          this.classList.add('selected');
          selectedStatus = this.getAttribute('data-status');
        });
      });
      
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', function() {
        google.script.host.close();
      });
      
      // Update button
      document.getElementById('updateBtn').addEventListener('click', updateMemberStatus);
    }
    
    // Populate the member list
    function populateMemberList(members) {
      const memberList = document.getElementById('memberList');
      memberList.innerHTML = '';
      
      if (members.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.style.padding = '16px';
        emptyMessage.style.textAlign = 'center';
        emptyMessage.style.color = 'var(--text-tertiary)';
        emptyMessage.textContent = 'No team members found';
        memberList.appendChild(emptyMessage);
        return;
      }
      
      members.forEach(member => {
        const memberItem = document.createElement('div');
        memberItem.className = 'member-item';
        memberItem.setAttribute('data-id', member['Team Member ID']);
        
        // Create initials for avatar
        const firstName = member['First Name'] || '';
        const lastName = member['Last Name'] || '';
        const initials = (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();
        const status = member['Status'] || 'Active';
        
        memberItem.innerHTML = `
          <div class="member-avatar">${initials}</div>
          <div class="member-info">
            <div class="member-name">${firstName} ${lastName}</div>
            <div class="member-email">${member['Email'] || ''}</div>
          </div>
          <div class="member-status status-${status.toLowerCase().replace(/\s+/g, '-')}">${status}</div>
        `;
        
        // Add click event
        memberItem.addEventListener('click', function() {
          selectTeamMember(member);
          memberDropdown.classList.remove('open');
        });
        
        memberList.appendChild(memberItem);
      });
    }
    
    // Filter the member list
    function filterMemberList(searchTerm) {
      const memberItems = document.querySelectorAll('.member-item');
      
      memberItems.forEach(item => {
        const name = item.querySelector('.member-name').textContent.toLowerCase();
        const email = item.querySelector('.member-email').textContent.toLowerCase();
        
        if (name.includes(searchTerm) || email.includes(searchTerm)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    }
    
    // Select a team member
    function selectTeamMember(member) {
      selectedMemberId = member['Team Member ID'];
      selectedMemberName = `${member['First Name']} ${member['Last Name']}`;
      
      // Update UI
      const memberSelectorIcon = document.getElementById('memberSelectorIcon');
      memberSelectorIcon.classList.add('selected');
      memberSelectorIcon.innerHTML = `${member['First Name'].charAt(0)}${member['Last Name'].charAt(0)}`.toUpperCase();
      
      document.getElementById('selectedMemberPrompt').style.display = 'none';
      const selectedMemberNameEl = document.getElementById('selectedMemberName');
      selectedMemberNameEl.textContent = selectedMemberName;
      selectedMemberNameEl.style.display = '';
      
      // Show the status update form
      document.getElementById('statusUpdateForm').style.display = '';
      
      // Enable the update button
      document.getElementById('updateBtn').classList.remove('btn-disabled');
      
      // Set the current status as selected
      const currentStatus = member['Status'] || 'Active';
      const statusOptions = document.querySelectorAll('.status-option');
      statusOptions.forEach(option => {
        option.classList.remove('selected');
        if (option.getAttribute('data-status') === currentStatus) {
          option.classList.add('selected');
          selectedStatus = currentStatus;
        }
      });
    }
    
    // Update the member status
    function updateMemberStatus() {
      if (!selectedMemberId) {
        showNotification('Error', 'Please select a team member first.', 'error');
        return;
      }
      
      // Show loading overlay
      showLoading(true);
      
      // Collect data
      const updateData = {
        memberId: selectedMemberId,
        status: selectedStatus,
        effectiveDate: document.getElementById('effectiveDate').value,
        notes: document.getElementById('notes').value
      };
      
      // Call the server-side function
      google.script.run
        .withSuccessHandler(function(result) {
          showLoading(false);
          
          if (result.success) {
            showNotification('Success!', `${selectedMemberName}'s status has been updated to ${selectedStatus}.`, 'success');
            
            // Close after a delay
            setTimeout(function() {
              google.script.host.close();
            }, 1500);
          } else {
            showNotification('Error', result.message || 'Failed to update status.', 'error');
          }
        })
        .withFailureHandler(function(error) {
          showLoading(false);
          showNotification('Error', error.message || 'An unexpected error occurred.', 'error');
        })
        .updateTeamMemberStatus(updateData);
    }
    
    // Show/hide loading overlay
    function showLoading(show) {
      const overlay = document.getElementById('loadingOverlay');
      if (show) {
        overlay.classList.add('show');
      } else {
        overlay.classList.remove('show');
      }
    }
    
    // Show notification
    function showNotification(title, message, type = 'success') {
      const notification = document.getElementById('notification');
      const iconElement = notification.querySelector('.notification-icon i');
      
      // Set notification type
      notification.className = 'notification notification-' + type;
      
      // Set icon
      iconElement.className = type === 'success' ? 'fas fa-check' : 'fas fa-exclamation-circle';
      
      // Set content
      notification.querySelector('.notification-title').textContent = title;
      notification.querySelector('.notification-message').textContent = message;
      
      // Show notification
      notification.classList.add('show');
      
      // Auto hide after 5 seconds
      setTimeout(function() {
        notification.classList.remove('show');
      }, 5000);
    }
  </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Team Members</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Status colors */
      --status-active: #10b981;
      --status-training: #3b82f6;
      --status-pto: #f59e0b;
      --status-loa: #fb7185;
      --status-uto: #ef4444;
      --status-disappeared: #94a3b8;
      --status-fmla: #8b5cf6;
      --status-tech: #06b6d4;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --text-light: #94a3b8;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      --radius-xl: 20px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      font-size: 14px;
      line-height: 1.5;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    
    .container {
      max-width: 100%;
      padding: 20px;
    }
    
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 24px;
    }
    
    .title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .title-icon {
      width: 40px;
      height: 40px;
      border-radius: var(--radius-lg);
      background: var(--primary-gradient);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
    }
    
    .actions {
      display: flex;
      gap: 12px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 16px;
      font-weight: 500;
      font-size: 14px;
      border-radius: var(--radius-md);
      transition: all var(--transition-fast);
      cursor: pointer;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-outline {
      background-color: white;
      border: 1px solid var(--border-medium);
      color: var(--text-secondary);
    }
    
    .btn-outline:hover {
      border-color: var(--primary-color);
      color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    .toolbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      flex-wrap: wrap;
      gap: 12px;
    }
    
    .search-bar {
      position: relative;
      flex-grow: 1;
      max-width: 320px;
    }
    
    .search-input {
      width: 100%;
      padding: 10px 16px 10px 42px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-full);
      font-family: 'Inter', sans-serif;
      font-size: 14px;
      transition: all var(--transition-fast);
    }
    
    .search-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .search-icon {
      position: absolute;
      left: 16px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
      font-size: 14px;
    }
    
    .filters {
      display: flex;
      gap: 12px;
    }
    
    .filter-dropdown {
      position: relative;
    }
    
    .filter-btn {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 12px;
      background-color: white;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-full);
      font-size: 13px;
      font-weight: 500;
      color: var(--text-secondary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .filter-btn:hover {
      border-color: var(--text-secondary);
    }
    
    .active-filter {
      border-color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
      color: var(--primary-color);
    }
    
    .status-bubble {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      display: inline-block;
    }
    
    .status-active {
      background-color: var(--status-active);
    }
    
    .status-training {
      background-color: var(--status-training);
    }
    
    .status-pto {
      background-color: var(--status-pto);
    }
    
    .status-loa {
      background-color: var(--status-loa);
    }
    
    .status-uto {
      background-color: var(--status-uto);
    }
    
    .status-disappeared {
      background-color: var(--status-disappeared);
    }
    
    .status-fmla {
      background-color: var(--status-fmla);
    }
    
    .status-tech-issues {
      background-color: var(--status-tech);
    }
    
    .status-early-out {
      background-color: var(--status-pto);
    }
    
    .dropdown-menu {
      position: absolute;
      top: calc(100% + 8px);
      right: 0;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      min-width: 200px;
      z-index: 10;
      transform-origin: top right;
      transform: scale(0.95);
      opacity: 0;
      pointer-events: none;
      transition: all var(--transition-fast);
    }
    
    .dropdown-menu.open {
      transform: scale(1);
      opacity: 1;
      pointer-events: all;
    }
    
    .dropdown-header {
      padding: 12px 16px;
      border-bottom: 1px solid var(--border-light);
      font-weight: 600;
      font-size: 13px;
      color: var(--text-primary);
    }
    
    .dropdown-items {
      padding: 8px 0;
    }
    
    .dropdown-item {
      padding: 8px 16px;
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 13px;
      color: var(--text-secondary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .dropdown-item:hover {
      background-color: var(--bg-secondary);
      color: var(--text-primary);
    }
    
    .dropdown-item.selected {
      background-color: rgba(85, 64, 175, 0.05);
      color: var(--primary-color);
      font-weight: 500;
    }
    
    .dropdown-footer {
      padding: 12px 16px;
      border-top: 1px solid var(--border-light);
      display: flex;
      justify-content: flex-end;
    }
    
    .dropdown-btn {
      padding: 6px 12px;
      border-radius: var(--radius-md);
      font-size: 12px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      border: none;
    }
    
    .dropdown-btn-primary {
      background-color: var(--primary-color);
      color: white;
    }
    
    .dropdown-btn-primary:hover {
      background-color: var(--primary-dark);
    }
    
    /* Team member cards view */
    .view-toggle {
      display: flex;
      align-items: center;
      gap: 4px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-full);
      padding: 4px;
    }
    
    .view-option {
      padding: 6px 12px;
      border-radius: var(--radius-full);
      font-size: 13px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      color: var(--text-tertiary);
    }
    
    .view-option.active {
      background-color: white;
      color: var(--primary-color);
      box-shadow: var(--shadow-sm);
    }
    
    .view-option i {
      margin-right: 6px;
    }
    
    .team-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 24px;
      margin-top: 24px;
    }
    
    .team-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      overflow: hidden;
      transition: all var(--transition-normal);
      height: 100%;
      display: flex;
      flex-direction: column;
      position: relative;
    }
    
    .team-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }
    
    .card-banner {
      height: 60px;
      background: var(--primary-gradient);
      position: relative;
      overflow: hidden;
    }
    
    .card-banner::before {
      content: '';
      position: absolute;
      width: 100px;
      height: 100px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      top: -60px;
      right: -20px;
    }
    
    .card-banner::after {
      content: '';
      position: absolute;
      width: 60px;
      height: 60px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      bottom: -30px;
      left: 30px;
    }
    
    .card-header {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: -32px;
      padding: 0 16px;
      position: relative;
    }
    
    .card-avatar {
      width: 64px;
      height: 64px;
      border-radius: 50%;
      background: var(--primary-gradient);
      border: 4px solid white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 22px;
      font-weight: 700;
      color: white;
      margin-bottom: 16px;
      position: relative;
      box-shadow: var(--shadow-md);
    }
    
    .status-indicator {
      width: 16px;
      height: 16px;
      border-radius: 50%;
      border: 2px solid white;
      position: absolute;
      bottom: 0;
      right: 0;
    }
    
    .card-name {
      font-weight: 600;
      font-size: 18px;
      text-align: center;
      margin-bottom: 2px;
    }
    
    .card-role {
      font-size: 13px;
      color: var(--text-tertiary);
      margin-bottom: 8px;
    }
    
    .card-status-badge {
      padding: 4px 10px;
      border-radius: var(--radius-full);
      font-size: 11px;
      font-weight: 600;
      margin-bottom: 8px;
    }
    
    .badge-active {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--status-active);
    }
    
    .badge-training {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--status-training);
    }
    
    .badge-pto {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--status-pto);
    }
    
    .badge-loa {
      background-color: rgba(251, 113, 133, 0.1);
      color: var(--status-loa);
    }
    
    .badge-fmla {
      background-color: rgba(139, 92, 246, 0.1);
      color: var(--status-fmla);
    }
    
    .badge-uto {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--status-uto);
    }
    
    .badge-disappeared {
      background-color: rgba(148, 163, 184, 0.1);
      color: var(--status-disappeared);
    }
    
    .badge-tech-issues {
      background-color: rgba(6, 182, 212, 0.1);
      color: var(--status-tech);
    }
    
    .badge-early-out {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--status-pto);
    }
    
    .card-body {
      padding: 16px;
      display: flex;
      flex-direction: column;
      flex-grow: 1;
    }
    
    .card-info {
      display: flex;
      flex-direction: column;
      gap: 8px;
      margin-bottom: 16px;
    }
    
    .info-item {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .info-icon {
      width: 28px;
      height: 28px;
      border-radius: var(--radius-sm);
      background-color: var(--bg-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--text-tertiary);
      flex-shrink: 0;
    }
    
    .card-stats {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 8px;
      margin-top: auto;
      padding-top: 16px;
      border-top: 1px solid var(--border-light);
    }
    
    .stat-item {
      padding: 10px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      text-align: center;
    }
    
    .stat-value {
      font-weight: 600;
      font-size: 16px;
      color: var(--primary-color);
    }
    
    .stat-label {
      font-size: 11px;
      color: var(--text-tertiary);
    }
    
    .card-footer {
      padding: 12px;
      border-top: 1px solid var(--border-light);
      background-color: var(--bg-secondary);
      display: flex;
      justify-content: space-between;
    }
    
    .card-action {
      padding: 6px;
      background-color: white;
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .card-action:hover {
      color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    /* Team member table view */
    .team-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      margin-top: 24px;
    }
    
    .team-table th,
    .team-table td {
      padding: 16px 20px;
      text-align: left;
      border-bottom: 1px solid var(--border-light);
    }
    
    .team-table th {
      background-color: var(--bg-secondary);
      font-weight: 600;
      font-size: 13px;
      color: var(--text-secondary);
      position: sticky;
      top: 0;
      z-index: 10;
    }
    
    .team-table th:first-child {
      border-top-left-radius: var(--radius-lg);
    }
    
    .team-table th:last-child {
      border-top-right-radius: var(--radius-lg);
    }
    
    .team-table tr {
      background-color: white;
      transition: all var(--transition-fast);
    }
    
    .team-table tr:hover {
      background-color: var(--bg-secondary);
    }
    
    .team-table tr:last-child td:first-child {
      border-bottom-left-radius: var(--radius-lg);
    }
    
    .team-table tr:last-child td:last-child {
      border-bottom-right-radius: var(--radius-lg);
    }
    
    .member-cell {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .table-avatar {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background: var(--primary-gradient);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      flex-shrink: 0;
    }
    
    .member-info {
      display: flex;
      flex-direction: column;
    }
    
    .member-name {
      font-weight: 500;
      margin-bottom: 2px;
    }
    
    .member-email {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .table-status {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .status-badge {
      padding: 4px 10px;
      border-radius: var(--radius-full);
      font-size: 12px;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .badge-dot {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      display: inline-block;
    }
    
    .badge-text {
      line-height: 1;
    }
    
    .table-shift {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .shift-icon {
      color: var(--primary-color);
    }
    
    .table-skills {
      display: flex;
      flex-wrap: wrap;
      gap: 6px;
    }
    
    .skill-tag {
      padding: 2px 8px;
      border-radius: var(--radius-full);
      background-color: var(--bg-secondary);
      color: var(--text-secondary);
      font-size: 11px;
      font-weight: 500;
    }
    
    .table-actions {
      display: flex;
      gap: 8px;
      justify-content: flex-end;
    }
    
    .action-btn {
      width: 32px;
      height: 32px;
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-light);
      background-color: white;
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .action-btn:hover {
      color: var(--primary-color);
      border-color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    /* Empty state */
    .empty-state {
      text-align: center;
      padding: 60px 24px;
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
    }
    
    .empty-icon {
      font-size: 48px;
      margin-bottom: 16px;
      color: var(--text-light);
    }
    
    .empty-title {
      font-size: 20px;
      font-weight: 600;
      margin-bottom: 8px;
      color: var(--text-primary);
    }
    
    .empty-description {
      max-width: 400px;
      margin: 0 auto 20px;
      color: var(--text-secondary);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      z-index: 1000;
      backdrop-filter: blur(5px);
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(85, 64, 175, 0.1);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 12px;
      font-weight: 500;
      color: var(--primary-color);
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Toast notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 16px;
      border-radius: var(--radius-md);
      background-color: white;
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      transform: translateX(120%);
      transition: transform var(--transition-normal);
      z-index: 999;
      max-width: 320px;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      flex-shrink: 0;
    }
    
    .notification-success .notification-icon {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--status-active);
    }
    
    .notification-error .notification-icon {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--status-uto);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 2px;
    }
    
    .notification-message {
      font-size: 12px;
      color: var(--text-secondary);
    }
    
    /* Futuristic elements */
    .title-icon::before {
      content: '';
      position: absolute;
      inset: -2px;
      background: var(--primary-gradient);
      border-radius: inherit;
      filter: blur(6px);
      opacity: 0.3;
      z-index: -1;
      pointer-events: none;
    }
    
    .hexagon-bg {
      position: fixed;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      z-index: -1;
      opacity: 0.03;
      pointer-events: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='28' height='49' viewBox='0 0 28 49'%3E%3Cg fill='%235540af' fill-opacity='1'%3E%3Cpath d='M13.99 9.25l13 7.5v15l-13 7.5L1 31.75v-15l12.99-7.5zM3 17.9v12.7l10.99 6.34 11-6.35V17.9l-11-6.34L3 17.9zM0 15l12.98-7.5V0h-2v6.35L0 12.69v2.3zm0 18.5L12.98 41v8h-2v-6.85L0 35.81v-2.3zM15 0v7.5L27.99 15H28v-2.31h-.01L17 6.35V0h-2zm0 49v-8l12.99-7.5H28v2.31h-.01L17 42.15V49h-2z'/%3E%3C/g%3E%3C/svg%3E");
    }
    
    .table-avatar::before,
    .card-avatar::before {
      content: '';
      position: absolute;
      inset: -2px;
      background: conic-gradient(
        from 0deg,
        var(--primary-color),
        var(--secondary-color),
        var(--accent-color),
        var(--secondary-color),
        var(--primary-color)
      );
      border-radius: 50%;
      z-index: -1;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .team-card:hover .card-avatar::before {
      opacity: 1;
      animation: rotate 3s linear infinite;
    }
    
    @keyframes rotate {
      from {
        transform: rotate(0deg);
      }
      to {
        transform: rotate(360deg);
      }
    }
    
    .team-table tr:hover .table-avatar::before {
      opacity: 1;
      animation: rotate 3s linear infinite;
    }
    
    .status-indicator::before {
      content: '';
      position: absolute;
      inset: -2px;
      border-radius: 50%;
      z-index: -1;
      opacity: 0.5;
    }
    
    .status-active + .status-indicator::before {
      background-color: var(--status-active);
      box-shadow: 0 0 8px var(--status-active);
    }
    
    .status-pto + .status-indicator::before {
      background-color: var(--status-pto);
      box-shadow: 0 0 8px var(--status-pto);
    }
    
    .status-training + .status-indicator::before {
      background-color: var(--status-training);
      box-shadow: 0 0 8px var(--status-training);
    }
    
    .status-loa + .status-indicator::before {
      background-color: var(--status-loa);
      box-shadow: 0 0 8px var(--status-loa);
    }
    
    .status-uto + .status-indicator::before {
      background-color: var(--status-uto);
      box-shadow: 0 0 8px var(--status-uto);
    }
    
    .status-disappeared + .status-indicator::before {
      background-color: var(--status-disappeared);
      box-shadow: 0 0 8px var(--status-disappeared);
    }
    
    @media (max-width: 768px) {
      .header {
        flex-direction: column;
        align-items: flex-start;
        gap: 12px;
      }
      
      .toolbar {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .search-bar {
        max-width: 100%;
        width: 100%;
      }
      
      .filters {
        width: 100%;
        justify-content: space-between;
      }
      
      .team-grid {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      }
      
      .team-table {
        display: block;
        overflow-x: auto;
      }
    }
  </style>
</head>

<body>
  <div class="hexagon-bg"></div>
  
  <div class="container">
    <div class="header">
      <div class="title">
        <div class="title-icon">
          <i class="fas fa-users"></i>
        </div>
        <div>Team Members</div>
      </div>
      
      <div class="actions">
        <button class="btn btn-outline" id="updateStatusBtn">
          <i class="fas fa-user-clock"></i> Update Status
        </button>
        <button class="btn btn-primary" id="addTeamMemberBtn">
          <i class="fas fa-plus"></i> Add Team Member
        </button>
      </div>
    </div>
    
    <div class="toolbar">
      <div class="search-bar">
        <i class="fas fa-search search-icon"></i>
        <input type="text" class="search-input" id="searchInput" placeholder="Search team members...">
      </div>
      
      <div class="filters">
        <div class="filter-dropdown" id="statusFilter">
          <button class="filter-btn" id="statusFilterBtn">
            <span class="status-bubble status-active"></span>
            <span>Status: All</span>
            <i class="fas fa-chevron-down"></i>
          </button>
          <div class="dropdown-menu" id="statusDropdown">
            <div class="dropdown-header">Filter by Status</div>
            <div class="dropdown-items">
              <div class="dropdown-item selected" data-status="All">
                <i class="fas fa-check"></i> All Statuses
              </div>
              <div class="dropdown-item" data-status="Active">
                <span class="status-bubble status-active"></span> Active
              </div>
              <div class="dropdown-item" data-status="Training">
                <span class="status-bubble status-training"></span> Training
              </div>
              <div class="dropdown-item" data-status="PTO">
                <span class="status-bubble status-pto"></span> PTO
              </div>
              <div class="dropdown-item" data-status="LOA">
                <span class="status-bubble status-loa"></span> LOA
              </div>
              <div class="dropdown-item" data-status="FMLA">
                <span class="status-bubble status-fmla"></span> FMLA
              </div>
              <div class="dropdown-item" data-status="UTO">
                <span class="status-bubble status-uto"></span> UTO
              </div>
              <div class="dropdown-item" data-status="On shift disappearance">
                <span class="status-bubble status-disappeared"></span> Disappeared
              </div>
              <div class="dropdown-item" data-status="Tech issues">
                <span class="status-bubble status-tech-issues"></span> Tech Issues
              </div>
              <div class="dropdown-item" data-status="Early out">
                <span class="status-bubble status-pto"></span> Early Out
              </div>
            </div>
          </div>
        </div>
        
        <div class="filter-dropdown" id="shiftFilter">
          <button class="filter-btn" id="shiftFilterBtn">
            <i class="fas fa-clock"></i>
            <span>Shift: All</span>
            <i class="fas fa-chevron-down"></i>
          </button>
          <div class="dropdown-menu" id="shiftDropdown">
            <div class="dropdown-header">Filter by Shift</div>
            <div class="dropdown-items">
              <div class="dropdown-item selected" data-shift="All">
                <i class="fas fa-check"></i> All Shifts
              </div>
              <div class="dropdown-item" data-shift="morning">
                <i class="fas fa-sun"></i> Morning
              </div>
              <div class="dropdown-item" data-shift="afternoon">
                <i class="fas fa-cloud-sun"></i> Afternoon
              </div>
              <div class="dropdown-item" data-shift="overnight">
                <i class="fas fa-moon"></i> Overnight
              </div>
              <div class="dropdown-item" data-shift="weekend">
                <i class="fas fa-calendar-weekend"></i> Weekend
              </div>
            </div>
          </div>
        </div>
        
        <div class="view-toggle">
          <div class="view-option active" data-view="cards">
            <i class="fas fa-th"></i> Cards
          </div>
          <div class="view-option" data-view="table">
            <i class="fas fa-list"></i> Table
          </div>
        </div>
      </div>
    </div>
    
    <div id="teamCardView" class="team-grid"></div>
    
    <div id="teamTableView" style="display: none;"></div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
    <div class="loading-text">Loading team members...</div>
  </div>
  
  <!-- Notification -->
  <div id="notification" class="notification">
    <div class="notification-icon">
      <i class="fas fa-check"></i>
    </div>
    <div class="notification-content">
      <div class="notification-title">Success!</div>
      <div class="notification-message">Team member added successfully.</div>
    </div>
  </div>
  
  <script>
    // Global variables
    let teamMembers = [];
    let currentView = 'cards';
    let statusFilter = 'All';
    let shiftFilter = 'All';
    let searchTerm = '';
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
      // Show loading overlay
      showLoading(true);
      
      // Load team members
      loadTeamMembers();
      
      // Set up event listeners
      setupEventListeners();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Add team member button
      document.getElementById('addTeamMemberBtn').addEventListener('click', function() {
        google.script.run.showAddTeamMemberForm();
      });
      
      // Update status button
      document.getElementById('updateStatusBtn').addEventListener('click', function() {
        google.script.run.showUpdateStatusForm();
      });
      
      // View toggle
      const viewOptions = document.querySelectorAll('.view-option');
      viewOptions.forEach(option => {
        option.addEventListener('click', function() {
          const view = this.getAttribute('data-view');
          switchView(view);
          
          viewOptions.forEach(opt => opt.classList.remove('active'));
          this.classList.add('active');
        });
      });
      
      // Search input
      document.getElementById('searchInput').addEventListener('input', function() {
        searchTerm = this.value.toLowerCase().trim();
        applyFilters();
      });
      
      // Status filter dropdown
      const statusFilterBtn = document.getElementById('statusFilterBtn');
      const statusDropdown = document.getElementById('statusDropdown');
      
      statusFilterBtn.addEventListener('click', function(e) {
        statusDropdown.classList.toggle('open');
        e.stopPropagation();
      });
      
      // Status filter options
      const statusItems = statusDropdown.querySelectorAll('.dropdown-item');
      statusItems.forEach(item => {
        item.addEventListener('click', function() {
          statusFilter = this.getAttribute('data-status');
          
          // Update button text
          if (statusFilter === 'All') {
            statusFilterBtn.innerHTML = `
              <span class="status-bubble status-active"></span>
              <span>Status: All</span>
              <i class="fas fa-chevron-down"></i>
            `;
          } else {
            const statusClass = `status-${statusFilter.toLowerCase().replace(/\s+/g, '-')}`;
            statusFilterBtn.innerHTML = `
              <span class="status-bubble ${statusClass}"></span>
              <span>Status: ${statusFilter}</span>
              <i class="fas fa-chevron-down"></i>
            `;
            statusFilterBtn.classList.add('active-filter');
          }
          
          // Update selected item
          statusItems.forEach(opt => opt.classList.remove('selected'));
          this.classList.add('selected');
          
          // Close dropdown
          statusDropdown.classList.remove('open');
          
          // Apply filters
          applyFilters();
        });
      });
      
      // Shift filter dropdown
      const shiftFilterBtn = document.getElementById('shiftFilterBtn');
      const shiftDropdown = document.getElementById('shiftDropdown');
      
      shiftFilterBtn.addEventListener('click', function(e) {
        shiftDropdown.classList.toggle('open');
        e.stopPropagation();
      });
      
      // Shift filter options
      const shiftItems = shiftDropdown.querySelectorAll('.dropdown-item');
      shiftItems.forEach(item => {
        item.addEventListener('click', function() {
          shiftFilter = this.getAttribute('data-shift');
          
          // Update button text
          if (shiftFilter === 'All') {
            shiftFilterBtn.innerHTML = `
              <i class="fas fa-clock"></i>
              <span>Shift: All</span>
              <i class="fas fa-chevron-down"></i>
            `;
            shiftFilterBtn.classList.remove('active-filter');
          } else {
            let shiftIcon, shiftName;
            
            switch(shiftFilter) {
              case 'morning':
                shiftIcon = 'fas fa-sun';
                shiftName = 'Morning';
                break;
              case 'afternoon':
                shiftIcon = 'fas fa-cloud-sun';
                shiftName = 'Afternoon';
                break;
              case 'overnight':
                shiftIcon = 'fas fa-moon';
                shiftName = 'Overnight';
                break;
              case 'weekend':
                shiftIcon = 'fas fa-calendar-weekend';
                shiftName = 'Weekend';
                break;
            }
            
            shiftFilterBtn.innerHTML = `
              <i class="${shiftIcon}"></i>
              <span>Shift: ${shiftName}</span>
              <i class="fas fa-chevron-down"></i>
            `;
            shiftFilterBtn.classList.add('active-filter');
          }
          
          // Update selected item
          shiftItems.forEach(opt => opt.classList.remove('selected'));
          this.classList.add('selected');
          
          // Close dropdown
          shiftDropdown.classList.remove('open');
          
          // Apply filters
          applyFilters();
        });
      });
      
      // Close dropdowns when clicking outside
      document.addEventListener('click', function() {
        statusDropdown.classList.remove('open');
        shiftDropdown.classList.remove('open');
      });
    }
    
    // Load team members from the server
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(function(result) {
          showLoading(false);
          
          if (result.success) {
            teamMembers = result.data;
            renderTeamMembers();
          } else {
            showNotification('Error', result.message || 'Failed to load team members.', 'error');
          }
        })
        .withFailureHandler(function(error) {
          showLoading(false);
          showNotification('Error', error.message || 'An unexpected error occurred.', 'error');
        })
        .getAllTeamMembers();
    }
    
    // Switch between card and table views
    function switchView(view) {
      currentView = view;
      
      if (view === 'cards') {
        document.getElementById('teamCardView').style.display = 'grid';
        document.getElementById('teamTableView').style.display = 'none';
      } else {
        document.getElementById('teamCardView').style.display = 'none';
        document.getElementById('teamTableView').style.display = 'block';
      }
      
      renderTeamMembers();
    }
    
    // Apply filters to team members
    function applyFilters() {
      renderTeamMembers();
    }
    
    // Render team members based on current view and filters
    function renderTeamMembers() {
      // Filter team members
      const filteredMembers = teamMembers.filter(member => {
        // Status filter
        if (statusFilter !== 'All' && member['Status'] !== statusFilter) {
          return false;
        }
        
        // Shift filter
        if (shiftFilter !== 'All' && member['shift'] !== shiftFilter) {
          return false;
        }
        
        // Search term
        if (searchTerm) {
          const firstName = (member['First Name'] || '').toLowerCase();
          const lastName = (member['Last Name'] || '').toLowerCase();
          const email = (member['Email'] || '').toLowerCase();
          const fullName = `${firstName} ${lastName}`;
          
          return fullName.includes(searchTerm) || email.includes(searchTerm);
        }
        
        return true;
      });
      
      // Render based on current view
      if (currentView === 'cards') {
        renderCardView(filteredMembers);
      } else {
        renderTableView(filteredMembers);
      }
    }
    
    // Render card view
    function renderCardView(members) {
      const teamCardView = document.getElementById('teamCardView');
      
      if (members.length === 0) {
        teamCardView.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon">
              <i class="fas fa-users-slash"></i>
            </div>
            <h3 class="empty-title">No team members found</h3>
            <p class="empty-description">
              There are no team members matching your filters. Try adjusting your search or filters, or add a new team member.
            </p>
            <button class="btn btn-primary" id="emptyAddBtn">
              <i class="fas fa-plus"></i> Add Team Member
            </button>
          </div>
        `;
        
        // Add event listener for the add button
                document.getElementById('emptyAddBtn').addEventListener('click', function() {
          google.script.run.showAddTeamMemberForm();
        });
        
        return;
      }
      
      // Render team member cards
      teamCardView.innerHTML = '';
      
      members.forEach(member => {
        const firstName = member['First Name'] || '';
        const lastName = member['Last Name'] || '';
        const initials = (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();
        const status = member['Status'] || 'Active';
        const statusClass = `status-${status.toLowerCase().replace(/\s+/g, '-')}`;
        const badgeClass = `badge-${status.toLowerCase().replace(/\s+/g, '-')}`;
        
        // Format skills as array
        const skillsText = member['Skills'] || '';
        const skills = skillsText.split(',').filter(s => s.trim() !== '').map(s => s.trim());
        
        // Create card element
        const card = document.createElement('div');
        card.className = 'team-card';
        card.innerHTML = `
          <div class="card-banner"></div>
          <div class="card-header">
            <div class="card-avatar">
              ${initials}
              <span class="status-indicator ${statusClass}"></span>
            </div>
            <div class="card-name">${firstName} ${lastName}</div>
            <div class="card-role">${member['shift'] || 'No Shift Assigned'}</div>
            <div class="card-status-badge ${badgeClass}">${status}</div>
          </div>
          <div class="card-body">
            <div class="card-info">
              <div class="info-item">
                <div class="info-icon">
                  <i class="fas fa-envelope"></i>
                </div>
                <div>${member['Email'] || 'No email'}</div>
              </div>
              <div class="info-item">
                <div class="info-icon">
                  <i class="fas fa-calendar-alt"></i>
                </div>
                <div>Started ${formatDate(member['Start Date'])}</div>
              </div>
              <div class="info-item">
                <div class="info-icon">
                  <i class="fas fa-id-card"></i>
                </div>
                <div>${member['Team Member ID'] || 'No ID'}</div>
              </div>
            </div>
            
            <div class="card-stats">
              <div class="stat-item">
                <div class="stat-value">95%</div>
                <div class="stat-label">Answer Rate</div>
              </div>
              <div class="stat-item">
                <div class="stat-value">92%</div>
                <div class="stat-label">QA Score</div>
              </div>
            </div>
          </div>
          
          <div class="card-footer">
            <button class="card-action" data-action="edit" data-id="${member['Team Member ID']}">
              <i class="fas fa-pencil-alt"></i>
            </button>
            <button class="card-action" data-action="status" data-id="${member['Team Member ID']}">
              <i class="fas fa-user-clock"></i>
            </button>
            <button class="card-action" data-action="one-on-one" data-id="${member['Team Member ID']}">
              <i class="fas fa-comments"></i>
            </button>
            <button class="card-action" data-action="view" data-id="${member['Team Member ID']}">
              <i class="fas fa-eye"></i>
            </button>
          </div>
        `;
        
        // Add event listeners to actions
        const actions = card.querySelectorAll('.card-action');
        actions.forEach(action => {
          action.addEventListener('click', function(e) {
            e.stopPropagation();
            
            const actionType = this.getAttribute('data-action');
            const memberId = this.getAttribute('data-id');
            
            handleAction(actionType, memberId);
          });
        });
        
        teamCardView.appendChild(card);
      });
    }
    
    // Render table view
    function renderTableView(members) {
      const teamTableView = document.getElementById('teamTableView');
      
      if (members.length === 0) {
        teamTableView.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon">
              <i class="fas fa-users-slash"></i>
            </div>
            <h3 class="empty-title">No team members found</h3>
            <p class="empty-description">
              There are no team members matching your filters. Try adjusting your search or filters, or add a new team member.
            </p>
            <button class="btn btn-primary" id="emptyAddBtn">
              <i class="fas fa-plus"></i> Add Team Member
            </button>
          </div>
        `;
        
        // Add event listener for the add button
        document.getElementById('emptyAddBtn').addEventListener('click', function() {
          google.script.run.showAddTeamMemberForm();
        });
        
        return;
      }
      
      // Create table
      const table = document.createElement('table');
      table.className = 'team-table';
      
      // Create header
      const thead = document.createElement('thead');
      thead.innerHTML = `
        <tr>
          <th>Team Member</th>
          <th>Status</th>
          <th>Shift</th>
          <th>Skills</th>
          <th>Start Date</th>
          <th>Actions</th>
        </tr>
      `;
      table.appendChild(thead);
      
      // Create body
      const tbody = document.createElement('tbody');
      
      // Add rows
      members.forEach(member => {
        const firstName = member['First Name'] || '';
        const lastName = member['Last Name'] || '';
        const initials = (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();
        const status = member['Status'] || 'Active';
        const statusClass = `status-${status.toLowerCase().replace(/\s+/g, '-')}`;
        const badgeClass = `badge-${status.toLowerCase().replace(/\s+/g, '-')}`;
        
        // Format skills as array
        const skillsText = member['Skills'] || '';
        const skills = skillsText.split(',').filter(s => s.trim() !== '').map(s => s.trim());
        
        // Create row
        const row = document.createElement('tr');
        
        // Member cell
        const memberCell = document.createElement('td');
        memberCell.innerHTML = `
          <div class="member-cell">
            <div class="table-avatar">
              ${initials}
              <span class="status-indicator ${statusClass}"></span>
            </div>
            <div class="member-info">
              <div class="member-name">${firstName} ${lastName}</div>
              <div class="member-email">${member['Email'] || 'No email'}</div>
            </div>
          </div>
        `;
        row.appendChild(memberCell);
        
        // Status cell
        const statusCell = document.createElement('td');
        statusCell.innerHTML = `
          <div class="status-badge ${badgeClass}">
            <span class="badge-dot ${statusClass}"></span>
            <span class="badge-text">${status}</span>
          </div>
        `;
        row.appendChild(statusCell);
        
        // Shift cell
        const shiftCell = document.createElement('td');
        shiftCell.innerHTML = `
          <div class="table-shift">
            <i class="fas fa-${getShiftIcon(member['shift'])} shift-icon"></i>
            <span>${formatShift(member['shift'])}</span>
          </div>
        `;
        row.appendChild(shiftCell);
        
        // Skills cell
        const skillsCell = document.createElement('td');
        const skillsContainer = document.createElement('div');
        skillsContainer.className = 'table-skills';
        
        if (skills.length > 0) {
          skills.slice(0, 3).forEach(skill => {
            const skillTag = document.createElement('span');
            skillTag.className = 'skill-tag';
            skillTag.textContent = skill;
            skillsContainer.appendChild(skillTag);
          });
          
          if (skills.length > 3) {
            const moreTag = document.createElement('span');
            moreTag.className = 'skill-tag';
            moreTag.textContent = `+${skills.length - 3} more`;
            skillsContainer.appendChild(moreTag);
          }
        } else {
          skillsContainer.innerHTML = '<span class="skill-tag">No skills listed</span>';
        }
        
        skillsCell.appendChild(skillsContainer);
        row.appendChild(skillsCell);
        
        // Start date cell
        const startDateCell = document.createElement('td');
        startDateCell.textContent = formatDate(member['Start Date']);
        row.appendChild(startDateCell);
        
        // Actions cell
        const actionsCell = document.createElement('td');
        actionsCell.innerHTML = `
          <div class="table-actions">
            <button class="action-btn" data-action="edit" data-id="${member['Team Member ID']}" title="Edit">
              <i class="fas fa-pencil-alt"></i>
            </button>
            <button class="action-btn" data-action="status" data-id="${member['Team Member ID']}" title="Update Status">
              <i class="fas fa-user-clock"></i>
            </button>
            <button class="action-btn" data-action="one-on-one" data-id="${member['Team Member ID']}" title="One-on-One">
              <i class="fas fa-comments"></i>
            </button>
            <button class="action-btn" data-action="view" data-id="${member['Team Member ID']}" title="View Details">
              <i class="fas fa-eye"></i>
            </button>
          </div>
        `;
        row.appendChild(actionsCell);
        
        // Add event listeners to actions
        const actions = actionsCell.querySelectorAll('.action-btn');
        actions.forEach(action => {
          action.addEventListener('click', function(e) {
            e.stopPropagation();
            
            const actionType = this.getAttribute('data-action');
            const memberId = this.getAttribute('data-id');
            
            handleAction(actionType, memberId);
          });
        });
        
        tbody.appendChild(row);
      });
      
      table.appendChild(tbody);
      teamTableView.innerHTML = '';
      teamTableView.appendChild(table);
    }
    
    // Handle action on team member
    function handleAction(actionType, memberId) {
      switch (actionType) {
        case 'edit':
          // This would be implemented in the future to edit the team member
          showNotification('Info', 'Edit functionality will be implemented soon.', 'info');
          break;
          
        case 'status':
          google.script.run.showUpdateStatusForm();
          break;
          
        case 'one-on-one':
          // Show one-on-one form with this member pre-selected
          google.script.run.withSuccessHandler(function() {
            // This callback intentionally left empty as the modal dialog will be shown by the server-side code
          }).showOneOnOneForm(memberId);
          break;
          
        case 'view':
          // This would be implemented in the future to view team member details
          showNotification('Info', 'View functionality will be implemented soon.', 'info');
          break;
      }
    }
    
    // Format shift name
    function formatShift(shift) {
      if (!shift) return 'No Shift';
      
      switch (shift) {
        case 'morning':
          return 'Morning';
        case 'afternoon':
          return 'Afternoon';
        case 'overnight':
          return 'Overnight';
        case 'weekend':
          return 'Weekend';
        default:
          return shift;
      }
    }
    
    // Get shift icon
    function getShiftIcon(shift) {
      if (!shift) return 'question';
      
      switch (shift) {
        case 'morning':
          return 'sun';
        case 'afternoon':
          return 'cloud-sun';
        case 'overnight':
          return 'moon';
        case 'weekend':
          return 'calendar-day';
        default:
          return 'clock';
      }
    }
    
    // Format date
    function formatDate(dateStr) {
      if (!dateStr) return 'Not set';
      
      try {
        const date = new Date(dateStr);
        return date.toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        });
      } catch (e) {
        return dateStr;
      }
    }
    
    // Show/hide loading overlay
    function showLoading(show) {
      const overlay = document.getElementById('loadingOverlay');
      if (show) {
        overlay.classList.add('show');
      } else {
        overlay.classList.remove('show');
      }
    }
    
    // Show notification
    function showNotification(title, message, type = 'success') {
      const notification = document.getElementById('notification');
      const iconElement = notification.querySelector('.notification-icon i');
      
      // Set notification type
      notification.className = 'notification notification-' + type;
      
      // Set icon
      if (type === 'success') {
        iconElement.className = 'fas fa-check';
      } else if (type === 'error') {
        iconElement.className = 'fas fa-exclamation-circle';
      } else {
        iconElement.className = 'fas fa-info-circle';
      }
      
      // Set content
      notification.querySelector('.notification-title').textContent = title;
      notification.querySelector('.notification-message').textContent = message;
      
      // Show notification
      notification.classList.add('show');
      
      // Auto hide after 5 seconds
      setTimeout(function() {
        notification.classList.remove('show');
      }, 5000);
    }
  </script>
</body>
</html>





<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Team Member Selector</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      
      /* Status colors */
      --status-active: #10b981;
      --status-training: #3b82f6;
      --status-pto: #f59e0b;
      --status-loa: #fb7185;
      --status-uto: #ef4444;
      --status-disappeared: #94a3b8;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    /* Member selector container */
    .member-selector {
      position: relative;
      width: 100%;
    }
    
    .selector-header {
      padding: 12px 16px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
      transition: all var(--transition-fast);
      background-color: white;
    }
    
    .selector-header:hover {
      border-color: var(--primary-color);
    }
    
    .selector-label {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .selector-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background: var(--bg-tertiary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--text-secondary);
    }
    
    .selector-icon.selected {
      background: var(--primary-gradient);
      color: white;
    }
    
    .selector-text {
      font-weight: 500;
      color: var(--text-secondary);
    }
    
    .selector-value {
      font-weight: 600;
      color: var(--primary-color);
    }
    
    .selector-dropdown {
      position: absolute;
      top: calc(100% + 8px);
      left: 0;
      width: 100%;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      z-index: 10;
      max-height: 320px;
      overflow-y: auto;
      display: none;
    }
    
    .selector-dropdown.open {
      display: block;
    }
    
    .member-search {
      padding: 12px 16px;
      border-bottom: 1px solid var(--border-light);
      position: sticky;
      top: 0;
      background-color: white;
      z-index: 2;
    }
    
    .search-container {
      position: relative;
    }
    
    .search-input {
      width: 100%;
      padding: 10px 12px 10px 36px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-family: 'Inter', sans-serif;
      font-size: 14px;
    }
    
    .search-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .search-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
    }
    
    .member-list {
      padding: 8px 0;
    }
    
    .member-item {
      padding: 10px 16px;
      display: flex;
      align-items: center;
      gap: 12px;
      cursor: pointer;
      transition: background-color var(--transition-fast);
    }
    
    .member-item:hover {
      background-color: var(--bg-secondary);
    }
    
    .member-avatar {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background: var(--primary-gradient);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      flex-shrink: 0;
    }
    
    .member-info {
      flex: 1;
    }
    
    .member-name {
      font-weight: 500;
      margin-bottom: 2px;
    }
    
    .member-email {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .member-status {
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: 600;
      text-transform: uppercase;
    }
    
    .status-active {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--status-active);
    }
    
    .status-training {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--status-training);
    }
    
    .status-pto {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--status-pto);
    }
    
    .status-loa {
      background-color: rgba(251, 113, 133, 0.1);
      color: var(--status-loa);
    }
    
    .status-uto {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--status-uto);
    }
    
    .status-disappeared {
      background-color: rgba(148, 163, 184, 0.1);
      color: var(--status-disappeared);
    }
    
    .empty-members {
      padding: 20px;
      text-align: center;
      color: var(--text-tertiary);
    }
    
    .placeholder {
      color: var(--text-tertiary);
    }
  </style>
</head>

<body>
  <div class="member-selector" id="memberSelector">
    <div class="selector-header" id="selectorHeader">
      <div class="selector-label">
        <div class="selector-icon" id="selectorIcon">
          <i class="fas fa-user"></i>
        </div>
        <div class="selector-text">
          <span id="selectorPrompt" class="placeholder">Select a team member</span>
          <span id="selectedName" style="display:none;"></span>
        </div>
      </div>
      <div>
        <i class="fas fa-chevron-down"></i>
      </div>
    </div>
    
    <div class="selector-dropdown" id="memberDropdown">
      <div class="member-search">
        <div class="search-container">
          <i class="fas fa-search search-icon"></i>
          <input type="text" class="search-input" id="searchInput" placeholder="Search team members...">
        </div>
      </div>
      <div class="member-list" id="memberList">
        <!-- Team members will be populated here -->
      </div>
    </div>
    
    <input type="hidden" id="selectedMemberId" name="selectedMemberId" value="">
  </div>
  
  <script>
    // Global variables
    let teamMembers = [];
    let selectedMemberId = null;
    let selectedMemberName = '';
    let onSelectCallback = null;
    
    // Initialize the selector
    function initializeSelector(members, callback) {
      teamMembers = members || [];
      onSelectCallback = callback;
      
      // Populate the member list
      populateMemberList(teamMembers);
      
      // Set up event listeners
      setupEventListeners();
    }
    
    // Set up event listeners
    function setupEventListeners() {
      // Header click to open dropdown
      const selectorHeader = document.getElementById('selectorHeader');
      const memberDropdown = document.getElementById('memberDropdown');
      
      selectorHeader.addEventListener('click', function() {
        memberDropdown.classList.toggle('open');
      });
      
      // Search input
      const searchInput = document.getElementById('searchInput');
      searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        filterMemberList(searchTerm);
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function(e) {
        if (!selectorHeader.contains(e.target) && !memberDropdown.contains(e.target)) {
          memberDropdown.classList.remove('open');
        }
      });
    }
    
    // Populate the member list
    function populateMemberList(members) {
      const memberList = document.getElementById('memberList');
      memberList.innerHTML = '';
      
      if (members.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.className = 'empty-members';
        emptyMessage.textContent = 'No team members found';
        memberList.appendChild(emptyMessage);
        return;
      }
      
      members.forEach(member => {
        const memberItem = document.createElement('div');
        memberItem.className = 'member-item';
        memberItem.setAttribute('data-id', member['Team Member ID']);
        
        // Create initials for avatar
        const firstName = member['First Name'] || '';
        const lastName = member['Last Name'] || '';
        const initials = (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();
        const status = member['Status'] || 'Active';
        
        memberItem.innerHTML = `
          <div class="member-avatar">${initials}</div>
          <div class="member-info">
            <div class="member-name">${firstName} ${lastName}</div>
            <div class="member-email">${member['Email'] || ''}</div>
          </div>
          <div class="member-status status-${status.toLowerCase().replace(/\s+/g, '-')}">${status}</div>
        `;
        
        // Add click event
        memberItem.addEventListener('click', function() {
          selectTeamMember(member);
          memberDropdown.classList.remove('open');
        });
        
        memberList.appendChild(memberItem);
      });
    }
    
    // Filter the member list
    function filterMemberList(searchTerm) {
      const memberItems = document.querySelectorAll('.member-item');
      
      memberItems.forEach(item => {
        const name = item.querySelector('.member-name').textContent.toLowerCase();
        const email = item.querySelector('.member-email').textContent.toLowerCase();
        
        if (name.includes(searchTerm) || email.includes(searchTerm)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    }
    
    // Select a team member
    function selectTeamMember(member) {
      selectedMemberId = member['Team Member ID'];
      selectedMemberName = `${member['First Name']} ${member['Last Name']}`;
      
      // Update UI
      const selectorIcon = document.getElementById('selectorIcon');
      selectorIcon.classList.add('selected');
      selectorIcon.innerHTML = `${member['First Name'].charAt(0)}${member['Last Name'].charAt(0)}`.toUpperCase();
      
      document.getElementById('selectorPrompt').style.display = 'none';
      const selectedNameEl = document.getElementById('selectedName');
      selectedNameEl.textContent = selectedMemberName;
      selectedNameEl.style.display = '';
      
      // Update hidden input
      document.getElementById('selectedMemberId').value = selectedMemberId;
      
      // Call callback if provided
      if (typeof onSelectCallback === 'function') {
        onSelectCallback(selectedMemberId, selectedMemberName, member);
      }
    }
    
    // Reset the selector
    function resetSelector() {
      selectedMemberId = null;
      selectedMemberName = '';
      
      // Update UI
      const selectorIcon = document.getElementById('selectorIcon');
      selectorIcon.classList.remove('selected');
      selectorIcon.innerHTML = '<i class="fas fa-user"></i>';
      
      document.getElementById('selectorPrompt').style.display = '';
      document.getElementById('selectedName').style.display = 'none';
      
      // Update hidden input
      document.getElementById('selectedMemberId').value = '';
    }
    
    // Get the selected member
    function getSelectedMember() {
      return {
        id: selectedMemberId,
        name: selectedMemberName
      };
    }
    
    // Set a pre-selected member
    function setSelectedMember(memberId) {
      const member = teamMembers.find(m => m['Team Member ID'] === memberId);
      if (member) {
        selectTeamMember(member);
      }
    }
    
    // Export functions for external use
    window.TeamMemberSelector = {
      initialize: initializeSelector,
      reset: resetSelector,
      getSelected: getSelectedMember,
      setSelected: setSelectedMember
    };
  </script>
</body>
</html>





/**
 * TeamService.gs - Handles all team member management functionality
 * 
 * 🌟 Provides functions for:
 * - Team member CRUD operations
 * - Status updates
 * - Team data retrieval
 * - Sheet initialization
 * - Universal team member data access
 */

/**
 * 📝 Initialize the Team Members sheet with required headers
 * @return {Boolean} Success flag
 */
function initializeTeamMembersSheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    // Create sheet if it doesn't exist
    if (!sheet) {
      sheet = ss.insertSheet(CONFIG.SHEETS.TEAM_MEMBERS);
    }
    
    // Set up headers
    const headers = [
      'Team Member ID',
      'First Name',
      'Last Name',
      'Email',
      'Phone',
      'Status',
      'Start Date',
      'Role',
      'shift',
      'skills',
      'experience',
      'Last One-on-One',
      'Next One-on-One',
      'Notes',
      'Created By',
      'Created Date',
      'Last Modified'
    ];
    
    // Check if headers already exist
    const existingHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Only set headers if they don't match
    if (existingHeaders.length !== headers.length || !headers.every((header, i) => header === existingHeaders[i])) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
      
      // Format the sheet
      sheet.autoResizeColumns(1, headers.length);
    }
    
    return true;
  } catch (error) {
    logError('initializeTeamMembersSheet', error);
    return false;
  }
}

/**
 * 🧹 Clear team member cache
 * Call this function any time team member data is modified
 * @return {Boolean} Success flag
 */
function clearTeamMemberCache() {
  try {
    const cache = CacheService.getScriptCache();
    cache.remove('teamMembersCache');
    cache.remove('activeTeamMembersCache');
    return true;
  } catch (error) {
    logError('clearTeamMemberCache', error);
    return false;
  }
}

/**
 * 👥 Get all team members
 * @return {Object} Result with team members data
 */
function getAllTeamMembers() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!sheet) {
      return {
        success: false,
        message: 'Team Members sheet not found. Please run initialization.',
        data: []
      };
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return { 
        success: true, 
        message: 'No team members found.', 
        data: [] 
      };
    }
    
    const data = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    const teamMembers = data
      .filter(row => row[0]) // Filter out empty rows
      .map(row => {
        const member = {};
        headers.forEach((header, index) => {
          member[header] = row[index];
        });
        return member;
      });
    
    return { 
      success: true, 
      data: teamMembers 
    };
  } catch (error) {
    logError('getAllTeamMembers', error);
    return { 
      success: false, 
      message: 'Error retrieving team members: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 🧠 Get all team members with proper caching
 * @return {Object} Result with team members data
 */
function getAllTeamMembersWithCache() {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cachedData = cache.get('teamMembersCache');
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    // If not in cache, get from spreadsheet
    const result = getAllTeamMembers();
    
    // Add full name property for convenience
    if (result.success && result.data) {
      result.data.forEach(member => {
        member['Full Name'] = `${member['First Name']} ${member['Last Name']}`;
      });
      
      // Cache the result for 5 minutes
      cache.put('teamMembersCache', JSON.stringify(result), 300);
    }
    
    return result;
  } catch (error) {
    logError('getAllTeamMembersWithCache', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * 🧠 Get all active team members for dropdowns and forms
 * @return {Object} Result with active team members data
 */
function getActiveTeamMembers() {
  try {
    const result = getAllTeamMembersWithCache();
    
    if (!result.success) {
      return result; // Return the error
    }
    
    // Filter for active members only
    const activeMembers = result.data.filter(m => m['Status'] === 'Active');
    
    return {
      success: true,
      data: activeMembers
    };
  } catch (error) {
    logError('getActiveTeamMembers', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * 🧹 Clear team member cache after changes
 * This should be called after adding, updating, or deleting team members
 * @return {Boolean} Success flag
 */
function clearTeamMemberCache() {
  try {
    CacheService.getScriptCache().remove('teamMembersCache');
    CacheService.getScriptCache().remove('activeTeamMembersCache');
    return true;
  } catch (error) {
    logError('clearTeamMemberCache', error);
    return false;
  }
}

/**
 * 📋 Get team member options for dropdowns with manual entry support
 * @return {Object} Result with team member options
 */
function getTeamMemberOptions() {
  try {
    const result = getActiveTeamMembers();
    
    if (!result.success || result.data.length === 0) {
      return {
        success: false,
        message: "No team members found. Please add team members first.",
        data: []
      };
    }
    
    // Format data for select dropdowns
    const options = result.data.map(member => ({
      id: member['Team Member ID'],
      name: member['Full Name'],
      firstName: member['First Name'],
      lastName: member['Last Name'],
      email: member['Email'] || ''
    }));
    
    return {
      success: true,
      data: options
    };
  } catch (error) {
    logError('getTeamMemberOptions', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * 🔍 Find team member by name or email (for manual entry support)
 * @param {String} searchText - Text to search for
 * @return {Object} Result with matching team members
 */
function findTeamMembersByText(searchText) {
  try {
    if (!searchText || searchText.trim().length < 2) {
      return { success: false, message: 'Search text too short', data: [] };
    }
    
    const result = getAllTeamMembersWithCache();
    
    if (!result.success) {
      return result;
    }
    
    const search = searchText.toLowerCase().trim();
    
    // Find matches
    const matches = result.data.filter(member => {
      const fullName = `${member['First Name']} ${member['Last Name']}`.toLowerCase();
      const email = (member['Email'] || '').toLowerCase();
      
      return fullName.includes(search) || email.includes(search);
    });
    
    // Format for UI
    const formattedMatches = matches.map(member => ({
      id: member['Team Member ID'],
      name: `${member['First Name']} ${member['Last Name']}`,
      email: member['Email'] || ''
    }));
    
    return {
      success: true,
      data: formattedMatches
    };
  } catch (error) {
    logError('findTeamMembersByText', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * ➕ Add a new team member
 * @param {Object} teamMember - Team member data
 * @return {Object} Success status and team member ID
 */
function addTeamMember(teamMember) {
  try {
    // Generate a team member ID if not provided
    if (!teamMember.id) {
      teamMember.id = 'TM-' + Utilities.getUuid().substring(0, 8).toUpperCase();
    }
    
    // Validate required fields
    if (!teamMember.firstName || !teamMember.lastName) {
      return { success: false, message: 'First name and last name are required' };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!sheet) {
      // Initialize sheet if it doesn't exist
      initializeTeamMembersSheet();
      sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    }
    
    // Check if the ID already exists
    const existingResult = getAllTeamMembers();
    if (existingResult.success && existingResult.data.some(m => m['Team Member ID'] === teamMember.id)) {
      return { success: false, message: 'Team member ID already exists' };
    }
    
    // Check if the email already exists (if email is provided)
    if (teamMember.email && existingResult.success && 
        existingResult.data.some(m => m['Email'] && m['Email'].toLowerCase() === teamMember.email.toLowerCase())) {
      return { success: false, message: 'Email address already in use' };
    }
    
    // Get the headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Current date & time for timestamps
    const now = new Date();
    
    // Create a new row based on headers
    const newRow = headers.map(header => {
      switch(header) {
        case 'Team Member ID':
          return teamMember.id;
        case 'First Name':
          return teamMember.firstName;
        case 'Last Name':
          return teamMember.lastName;
        case 'Email':
          return teamMember.email || '';
        case 'Phone':
          return teamMember.phone || '';
        case 'Status':
          return teamMember.status || 'Active';
        case 'Start Date':
          return teamMember.startDate ? new Date(teamMember.startDate) : now;
        case 'Role':
          return teamMember.role || 'Counselor';
        case 'shift':
          return teamMember.shift || '';
        case 'skills':
          return teamMember.skills || '';
        case 'experience':
          return teamMember.experience || '';
        case 'Notes':
          return teamMember.notes || '';
        case 'Created By':
          return Session.getEffectiveUser().getEmail();
        case 'Created Date':
          return now;
        case 'Last Modified':
          return now;
        default:
          return '';
      }
    });
    
    // Append the new row
    sheet.appendRow(newRow);
    
    // Clear the cache
    clearTeamMemberCache();
    
    return { 
      success: true, 
      memberId: teamMember.id,
      memberName: `${teamMember.firstName} ${teamMember.lastName}`
    };
  } catch (error) {
    logError('addTeamMember', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 🔄 Update team member status
 * @param {Object} updateData - Status update data
 * @return {Object} Success status
 */
function updateTeamMemberStatus(updateData) {
  try {
    if (!updateData.memberId || !updateData.status) {
      return { success: false, message: 'Missing required fields' };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!sheet) {
      return { success: false, message: 'Team members sheet not found' };
    }
    
    // Find the member by ID
    const data = sheet.getRange(1, 1, sheet.getLastRow(), sheet.getLastColumn()).getValues();
    const headers = data[0];
    
    // Find column indices
    const idColIndex = headers.indexOf('Team Member ID');
    const statusColIndex = headers.indexOf('Status');
    const notesColIndex = headers.indexOf('Notes');
    const lastModifiedColIndex = headers.indexOf('Last Modified');
    
    if (idColIndex === -1 || statusColIndex === -1) {
      return { success: false, message: 'Required columns not found' };
    }
    
    // Find the row for this member
    let memberRowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idColIndex] === updateData.memberId) {
        memberRowIndex = i + 1; // +1 because arrays are 0-indexed but sheets are 1-indexed
        break;
      }
    }
    
    if (memberRowIndex === -1) {
      return { success: false, message: 'Team member not found' };
    }
    
    // Update the status
    sheet.getRange(memberRowIndex, statusColIndex + 1).setValue(updateData.status);
    
    // Update notes if provided
    if (notesColIndex !== -1 && updateData.notes) {
      const currentNotes = data[memberRowIndex - 1][notesColIndex] || '';
      const statusUpdate = `[${new Date().toLocaleString()}] Status changed to ${updateData.status}`;
      const newNotes = currentNotes ? `${currentNotes}\n${statusUpdate}: ${updateData.notes}` : `${statusUpdate}: ${updateData.notes}`;
      sheet.getRange(memberRowIndex, notesColIndex + 1).setValue(newNotes);
    }
    
    // Update last modified timestamp
    if (lastModifiedColIndex !== -1) {
      sheet.getRange(memberRowIndex, lastModifiedColIndex + 1).setValue(new Date());
    }
    
    // Clear the cache
    clearTeamMemberCache();
    
    return { success: true };
  } catch (error) {
    logError('updateTeamMemberStatus', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 🔄 Update a team member's information
 * @param {Object} teamMember - Updated team member data
 * @return {Object} Success status
 */
function updateTeamMember(teamMember) {
  try {
    if (!teamMember.id) {
      return { success: false, message: 'Missing team member ID' };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!sheet) {
      return { success: false, message: 'Team members sheet not found' };
    }
    
    // Find the member by ID
    const data = sheet.getRange(1, 1, sheet.getLastRow(), sheet.getLastColumn()).getValues();
    const headers = data[0];
    
    // Find the row for this member
    let memberRowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][headers.indexOf('Team Member ID')] === teamMember.id) {
        memberRowIndex = i + 1;
        break;
      }
    }
    
    if (memberRowIndex === -1) {
      return { success: false, message: 'Team member not found' };
    }
    
    // Update each field
    headers.forEach((header, columnIndex) => {
      let value = null;
      
      switch(header) {
        case 'First Name':
          value = teamMember.firstName;
          break;
        case 'Last Name':
          value = teamMember.lastName;
          break;
        case 'Email':
          value = teamMember.email;
          break;
        case 'Phone':
          value = teamMember.phone;
          break;
        case 'Status':
          value = teamMember.status;
          break;
        case 'Start Date':
          value = teamMember.startDate ? new Date(teamMember.startDate) : null;
          break;
        case 'Role':
          value = teamMember.role;
          break;
        case 'shift':
          value = teamMember.shift;
          break;
        case 'skills':
          value = teamMember.skills;
          break;
        case 'experience':
          value = teamMember.experience;
          break;
        case 'Notes':
          value = teamMember.notes;
          break;
        case 'Last Modified':
          value = new Date();
          break;
        default:
          // Don't update other fields
          return;
      }
      
      // Only update if we have a value
      if (value !== null) {
        sheet.getRange(memberRowIndex, columnIndex + 1).setValue(value);
      }
    });
    
    // Clear the cache
    clearTeamMemberCache();
    
    return { success: true };
  } catch (error) {
    logError('updateTeamMember', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * ❌ Delete a team member
 * @param {String} teamMemberId - ID of the team member to delete
 * @return {Object} Success status
 */
function deleteTeamMember(teamMemberId) {
  try {
    if (!teamMemberId) {
      return { success: false, message: 'Missing team member ID' };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!sheet) {
      return { success: false, message: 'Team members sheet not found' };
    }
    
    // Find the member by ID
    const data = sheet.getRange(1, 1, sheet.getLastRow(), sheet.getLastColumn()).getValues();
    const headers = data[0];
    const idColIndex = headers.indexOf('Team Member ID');
    
    if (idColIndex === -1) {
      return { success: false, message: 'Team Member ID column not found' };
    }
    
    // Find the row for this member
    let memberRowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idColIndex] === teamMemberId) {
        memberRowIndex = i + 1; // +1 because arrays are 0-indexed but sheets are 1-indexed
        break;
      }
    }
    
    if (memberRowIndex === -1) {
      return { success: false, message: 'Team member not found' };
    }
    
    // Delete the row
    sheet.deleteRow(memberRowIndex);
    
    // Clear the cache
    clearTeamMemberCache();
    
    return { success: true };
  } catch (error) {
    logError('deleteTeamMember', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📊 Get team member statistics
 * @param {String} teamMemberId - ID of the team member
 * @param {Date} startDate - Optional start date for filtering data
 * @param {Date} endDate - Optional end date for filtering data
 * @return {Object} Comprehensive team member statistics
 */
function getTeamMemberComprehensiveStats(teamMemberId, startDate, endDate) {
  try {
    if (!teamMemberId) {
      return { success: false, message: 'Team member ID is required' };
    }
    
    // Set default date range if not provided (last 30 days)
    if (!startDate) {
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 30);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Get team member basic info
    const memberResult = getTeamMemberById(teamMemberId);
    
    if (!memberResult.success) {
      return { success: false, message: 'Team member not found' };
    }
    
    const member = memberResult.data;
    
    // Get metrics data for this team member
    const metricsData = getTeamMemberMetricsData(teamMemberId, startDate, endDate);
    
    // Get QA data for this team member
    const qaData = getTeamMemberQAData(teamMemberId, startDate, endDate);
    
    // Get one-on-one data
    const oneOnOneData = getTeamMemberOneOnOneSessions(teamMemberId, startDate, endDate);
    
    // Get action items for this team member
    const actionItemsData = getTeamMemberActionItems(teamMemberId);
    
    // Assemble comprehensive statistics
    const stats = {
      basics: {
        id: member['Team Member ID'],
        name: `${member['First Name']} ${member['Last Name']}`,
        email: member['Email'],
        status: member['Status'],
        role: member['Role'],
        startDate: member['Start Date'],
        shift: member['shift'],
        skills: member['skills']
      },
      metrics: metricsData,
      qa: qaData,
      oneOnOne: oneOnOneData,
      actionItems: actionItemsData
    };
    
    return { success: true, data: stats };
  } catch (error) {
    logError('getTeamMemberComprehensiveStats', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📈 Get team member metrics data
 * @param {String} teamMemberId - ID of the team member
 * @param {Date} startDate - Start date for metrics
 * @param {Date} endDate - End date for metrics
 * @return {Object} Team member metrics data
 */
function getTeamMemberMetricsData(teamMemberId, startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const metricsSheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    
    if (!metricsSheet) {
      return {};
    }
    
    // Get all metrics data
    const data = metricsSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const memberIdCol = headers.indexOf('Team Member ID');
    const dateCol = headers.indexOf('Date');
    const callsOfferedCol = headers.indexOf('Calls Offered');
    const callsAcceptedCol = headers.indexOf('Calls Accepted');
    const answerRateCol = headers.indexOf('Answer Rate');
    const avgTalkTimeCol = headers.indexOf('Average Talk Time');
    const acwPercentageCol = headers.indexOf('ACW Percentage');
    const onQueuePercentageCol = headers.indexOf('On Queue Percentage');
    const offQueuePercentageCol = headers.indexOf('Off Queue Percentage');
    const interactingTimeCol = headers.indexOf('Interacting Time');
    
    if (memberIdCol < 0 || dateCol < 0) {
      return {};
    }
    
    // Filter data for this team member within date range
    const filteredData = data.slice(1).filter(row => {
      if (!row[memberIdCol] || row[memberIdCol] !== teamMemberId) return false;
      if (!row[dateCol]) return false;
      
      const rowDate = new Date(row[dateCol]);
      return rowDate >= startDate && rowDate <= endDate;
    });
    
    if (filteredData.length === 0) {
      return {
        answerRate: null,
        avgTalkTime: null,
        acwPercentage: null,
        onQueuePercentage: null,
        offQueuePercentage: null,
        interactingTime: null,
        callsOffered: 0,
        callsAccepted: 0,
        dataPoints: 0
      };
    }
    
    // Calculate totals and collect all values for averaging
    let totalCallsOffered = 0;
    let totalCallsAccepted = 0;
    const answerRates = [];
    const avgTalkTimes = [];
    const acwPercentages = [];
    const onQueuePercentages = [];
    const offQueuePercentages = [];
    const interactingTimes = [];
    
    // Process each row
    filteredData.forEach(row => {
      if (callsOfferedCol >= 0) totalCallsOffered += Number(row[callsOfferedCol]) || 0;
      if (callsAcceptedCol >= 0) totalCallsAccepted += Number(row[callsAcceptedCol]) || 0;
      
      if (answerRateCol >= 0 && row[answerRateCol] !== '') {
        answerRates.push(Number(row[answerRateCol]) || 0);
      }
      
      if (avgTalkTimeCol >= 0 && row[avgTalkTimeCol] !== '') {
        avgTalkTimes.push(Number(row[avgTalkTimeCol]) || 0);
      }
      
      if (acwPercentageCol >= 0 && row[acwPercentageCol] !== '') {
        acwPercentages.push(Number(row[acwPercentageCol]) || 0);
      }
      
      if (onQueuePercentageCol >= 0 && row[onQueuePercentageCol] !== '') {
        onQueuePercentages.push(Number(row[onQueuePercentageCol]) || 0);
      }
      
      if (offQueuePercentageCol >= 0 && row[offQueuePercentageCol] !== '') {
        offQueuePercentages.push(Number(row[offQueuePercentageCol]) || 0);
      }
      
      if (interactingTimeCol >= 0 && row[interactingTimeCol] !== '') {
        interactingTimes.push(Number(row[interactingTimeCol]) || 0);
      }
    });
    
    // Calculate averages
    const avgAnswerRate = answerRates.length > 0 ? 
      answerRates.reduce((sum, val) => sum + val, 0) / answerRates.length : null;
      
    const avgTalkTime = avgTalkTimes.length > 0 ?
      avgTalkTimes.reduce((sum, val) => sum + val, 0) / avgTalkTimes.length : null;
      
    const avgAcwPercentage = acwPercentages.length > 0 ?
      acwPercentages.reduce((sum, val) => sum + val, 0) / acwPercentages.length : null;
      
    const avgOnQueuePercentage = onQueuePercentages.length > 0 ?
      onQueuePercentages.reduce((sum, val) => sum + val, 0) / onQueuePercentages.length : null;
      
    const avgOffQueuePercentage = offQueuePercentages.length > 0 ?
      offQueuePercentages.reduce((sum, val) => sum + val, 0) / offQueuePercentages.length : null;
      
    const avgInteractingTime = interactingTimes.length > 0 ?
      interactingTimes.reduce((sum, val) => sum + val, 0) / interactingTimes.length : null;
    
    return {
      answerRate: avgAnswerRate,
      avgTalkTime: avgTalkTime,
      acwPercentage: avgAcwPercentage,
      onQueuePercentage: avgOnQueuePercentage,
      offQueuePercentage: avgOffQueuePercentage,
      interactingTime: avgInteractingTime,
      callsOffered: totalCallsOffered,
      callsAccepted: totalCallsAccepted,
      dataPoints: filteredData.length
    };
  } catch (error) {
    logError('getTeamMemberMetricsData', error);
    return {
      answerRate: null,
      avgTalkTime: null,
      acwPercentage: null,
      onQueuePercentage: null,
      offQueuePercentage: null,
      interactingTime: null,
      callsOffered: 0,
      callsAccepted: 0,
      dataPoints: 0
    };
  }
}

/**
 * 🔍 Get QA data for a specific team member
 * @param {String} teamMemberId - ID of the team member
 * @param {Date} startDate - Start date for filtering data
 * @param {Date} endDate - End date for filtering data
 * @return {Object} Team member QA data
 */
function getTeamMemberQAData(teamMemberId, startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const qaSheet = ss.getSheetByName(CONFIG.SHEETS.QUALITY_REVIEWS);
    
    if (!qaSheet) {
      return {
        overallScore: null,
        lastReviewDate: null,
        totalReviews: 0,
        categoryScores: []
      };
    }
    
    // Get all QA data
    const data = qaSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const memberIdCol = headers.indexOf('Team Member ID');
    const dateCol = headers.indexOf('Interaction Date');
    const overallScoreCol = headers.indexOf('Overall Score');
    const openingScoreCol = headers.indexOf('Opening Score');
    const riskScoreCol = headers.indexOf('Risk Assessment Score');
    const commScoreCol = headers.indexOf('Communication Score');
    const supportScoreCol = headers.indexOf('Support Provided Score');
    const closureScoreCol = headers.indexOf('Closure Score');
    
    if (memberIdCol < 0 || dateCol < 0 || overallScoreCol < 0) {
      return {
        overallScore: null,
        lastReviewDate: null,
        totalReviews: 0,
        categoryScores: []
      };
    }
    
    // Filter data for this team member within date range
    const filteredData = data.slice(1).filter(row => {
      if (!row[memberIdCol] || row[memberIdCol] !== teamMemberId) return false;
      if (!row[dateCol]) return false;
      
      const rowDate = new Date(row[dateCol]);
      return rowDate >= startDate && rowDate <= endDate;
    });
    
    if (filteredData.length === 0) {
      return {
        overallScore: null,
        lastReviewDate: null,
        totalReviews: 0,
        categoryScores: []
      };
    }
    
    // Sort by date (earliest first)
    filteredData.sort((a, b) => new Date(a[dateCol]) - new Date(b[dateCol]));
    
    // Get the latest review
    const latestReview = filteredData[filteredData.length - 1];
    const latestReviewDate = new Date(latestReview[dateCol]);
    
    // Calculate overall statistics
    let overallScoreSum = 0;
    const categoryScores = [0, 0, 0, 0, 0]; // [opening, risk, comm, support, closure]
    const categoryCounts = [0, 0, 0, 0, 0];
    
    filteredData.forEach(row => {
      // Overall score
      overallScoreSum += Number(row[overallScoreCol]) || 0;
      
      // Category scores
      if (openingScoreCol >= 0 && row[openingScoreCol] !== '') {
        categoryScores[0] += Number(row[openingScoreCol]) || 0;
        categoryCounts[0]++;
      }
      
      if (riskScoreCol >= 0 && row[riskScoreCol] !== '') {
        categoryScores[1] += Number(row[riskScoreCol]) || 0;
        categoryCounts[1]++;
      }
      
      if (commScoreCol >= 0 && row[commScoreCol] !== '') {
        categoryScores[2] += Number(row[commScoreCol]) || 0;
        categoryCounts[2]++;
      }
      
      if (supportScoreCol >= 0 && row[supportScoreCol] !== '') {
        categoryScores[3] += Number(row[supportScoreCol]) || 0;
        categoryCounts[3]++;
      }
      
      if (closureScoreCol >= 0 && row[closureScoreCol] !== '') {
        categoryScores[4] += Number(row[closureScoreCol]) || 0;
        categoryCounts[4]++;
      }
    });
    
    // Calculate averages
    const overallScoreAvg = overallScoreSum / filteredData.length;
    const avgCategoryScores = categoryScores.map((sum, i) => 
      categoryCounts[i] > 0 ? sum / categoryCounts[i] : 0
    );
    
    return {
      overallScore: overallScoreAvg,
      lastReviewDate: latestReviewDate,
      totalReviews: filteredData.length,
      categoryScores: avgCategoryScores
    };
  } catch (error) {
    logError('getTeamMemberQAData', error);
    return {
      overallScore: null,
      lastReviewDate: null,
      totalReviews: 0,
      categoryScores: []
    };
  }
}

/**
 * 📅 Get one-on-one sessions for a team member
 * @param {String} teamMemberId - ID of the team member
 * @param {Date} startDate - Start date for filtering data
 * @param {Date} endDate - End date for filtering data
 * @return {Object} Team member's one-on-one session data
 */
function getTeamMemberOneOnOneSessions(teamMemberId, startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const oneOnOneSheet = ss.getSheetByName(CONFIG.SHEETS.ONE_ON_ONE);
    
    if (!oneOnOneSheet) {
      return {
        lastSessionDate: null,
        nextSessionDate: null,
        totalSessions: 0,
        sessions: []
      };
    }
    
    // Get all one-on-one data
    const data = oneOnOneSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const memberIdCol = headers.indexOf('Team Member ID');
    const sessionDateCol = headers.indexOf('Session Date');
    const followupDateCol = headers.indexOf('Follow-up Date');
    const actionItemsCol = headers.indexOf('Action Items');
    const discussionTopicsCol = headers.indexOf('Discussion Topics');
    const performanceHighlightsCol = headers.indexOf('Performance Highlights');
    const areasForDevelopmentCol = headers.indexOf('Areas for Development');
    const overallNotesCol = headers.indexOf('Overall Notes');
    
    if (memberIdCol < 0 || sessionDateCol < 0) {
      return {
        lastSessionDate: null,
        nextSessionDate: null,
        totalSessions: 0,
        sessions: []
      };
    }
    
    // Filter data for this team member
    const allSessions = data.slice(1).filter(row => row[memberIdCol] === teamMemberId);
    
    if (allSessions.length === 0) {
      return {
        lastSessionDate: null,
        nextSessionDate: null,
        totalSessions: 0,
        sessions: []
      };
    }
    
    // Sort by date (most recent first)
    allSessions.sort((a, b) => new Date(b[sessionDateCol]) - new Date(a[sessionDateCol]));
    
    // Filter for date range if provided
    let filteredSessions = allSessions;
    if (startDate && endDate) {
      filteredSessions = allSessions.filter(row => {
        const rowDate = new Date(row[sessionDateCol]);
        return rowDate >= startDate && rowDate <= endDate;
      });
    }
    
    // Get last session date
    const lastSessionDate = allSessions.length > 0 ? new Date(allSessions[0][sessionDateCol]) : null;
    
    // Get next session date (from upcoming follow-up)
    const now = new Date();
    const upcomingFollowups = allSessions
      .filter(row => {
        const followupDate = row[followupDateCol] ? new Date(row[followupDateCol]) : null;
        return followupDate && followupDate > now;
      })
      .sort((a, b) => new Date(a[followupDateCol]) - new Date(b[followupDateCol]));
    
    const nextSessionDate = upcomingFollowups.length > 0 ? new Date(upcomingFollowups[0][followupDateCol]) : null;
    
    // Format session data for display
    const sessions = filteredSessions.map(row => {
      const sessionDate = new Date(row[sessionDateCol]);
      const followUpDate = row[followupDateCol] ? new Date(row[followupDateCol]) : null;
      
      return {
        date: sessionDate,
        followUpDate: followUpDate,
        topics: row[discussionTopicsCol] || '',
        highlights: row[performanceHighlightsCol] || '',
        development: row[areasForDevelopmentCol] || '',
        actionItems: row[actionItemsCol] || '',
        notes: row[overallNotesCol] || ''
      };
    });
    
    return {
      lastSessionDate: lastSessionDate,
      nextSessionDate: nextSessionDate,
      totalSessions: allSessions.length,
      sessions: sessions
    };
  } catch (error) {
    logError('getTeamMemberOneOnOneSessions', error);
    return {
      lastSessionDate: null,
      nextSessionDate: null,
      totalSessions: 0,
      sessions: []
    };
  }
}

/**
 * ✅ Get action items for a specific team member
 * @param {String} teamMemberId - ID of the team member
 * @return {Object} Action items data for the team member
 */
function getTeamMemberActionItems(teamMemberId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const actionItemsSheet = ss.getSheetByName(CONFIG.SHEETS.ACTION_ITEMS);
    
    if (!actionItemsSheet) {
      return {
        open: 0,
        completed: 0,
        overdue: 0,
        items: []
      };
    }
    
    // Get all action items data
    const data = actionItemsSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const assigneesCol = headers.indexOf('Assignees');
    const statusCol = headers.indexOf('Status');
    const titleCol = headers.indexOf('Title');
    const descCol = headers.indexOf('Description');
    const dueDateCol = headers.indexOf('Due Date');
    const priorityCol = headers.indexOf('Priority');
    
    if (assigneesCol < 0 || statusCol < 0) {
      return {
        open: 0,
        completed: 0,
        overdue: 0,
        items: []
      };
    }
    
    // Filter action items for this team member
    const filteredItems = data.slice(1).filter(row => {
      const assignees = row[assigneesCol] || '';
      return assignees.includes(teamMemberId);
    });
    
    if (filteredItems.length === 0) {
      return {
        open: 0,
        completed: 0,
        overdue: 0,
        items: []
      };
    }
    
    // Count items by status
    const now = new Date();
    let openCount = 0;
    let completedCount = 0;
    let overdueCount = 0;
    
    // Format items for display
    const items = filteredItems.map(row => {
      const status = (row[statusCol] || '').toLowerCase();
      const dueDate = row[dueDateCol] ? new Date(row[dueDateCol]) : null;
      const isOverdue = dueDate && dueDate < now && (status === 'open' || status === 'in progress');
      
      // Update counters
      if (status === 'completed' || status === 'done') {
        completedCount++;
      } else {
        openCount++;
        if (isOverdue) {
          overdueCount++;
        }
      }
      
      return {
        title: row[titleCol] || '',
        description: row[descCol] || '',
        status: status,
        dueDate: dueDate,
        priority: row[priorityCol] || 'Medium',
        isOverdue: isOverdue
      };
    });
    
    return {
      open: openCount,
      completed: completedCount,
      overdue: overdueCount,
      items: items
    };
  } catch (error) {
    logError('getTeamMemberActionItems', error);
    return {
      open: 0,
      completed: 0,
      overdue: 0,
      items: []
    };
  }
}

/**
 * 🔄 Show update status form for a specific member
 * @param {String} teamMemberId - ID of the team member to update
 */
function showUpdateStatusFormForMember(teamMemberId) {
  try {
    // Get the team member data
    const result = getTeamMemberById(teamMemberId);
    
    if (!result.success) {
      showErrorMessage('Error: ' + result.message);
      return;
    }
    
    // Store the member data in cache for the form to use
    CacheService.getUserCache().put('updateStatusMemberId', teamMemberId);
    
    // Show the form
    showUpdateStatusForm();
  } catch (error) {
    logError('showUpdateStatusFormForMember', error);
    showErrorMessage('Error: ' + error.toString());
  }
}

/**
 * ✏️ Show edit team member form
 * @param {String} teamMemberId - ID of the team member to edit
 */
function showEditTeamMemberForm(teamMemberId) {
  try {
    // Get the team member data
    const result = getTeamMemberById(teamMemberId);
    
    if (!result.success) {
      showErrorMessage('Error: ' + result.message);
      return;
    }
    
    // Store the member data in cache for the form to use
    CacheService.getUserCache().put('editTeamMemberId', teamMemberId);
    
    // Show the form
    const htmlOutput = HtmlService
      .createTemplateFromFile('EditTeamMember')
      .evaluate()
      .setWidth(600)
      .setHeight(650)
      .setTitle('Edit Team Member');
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Edit Team Member');
  } catch (error) {
    logError('showEditTeamMemberForm', error);
    showErrorMessage('Error: ' + error.toString());
  }
}

/**
 * 👁️ Show team member details
 * @param {String} teamMemberId - ID of the team member to view
 */
function viewTeamMemberDetails(teamMemberId) {
  try {
    // Get the team member data
    const result = getTeamMemberById(teamMemberId);
    
    if (!result.success) {
      showErrorMessage('Error: ' + result.message);
      return;
    }
    
    // Store the member data in cache for the form to use
    CacheService.getUserCache().put('viewTeamMemberId', teamMemberId);
    
    // Show the form
    const htmlOutput = HtmlService
      .createTemplateFromFile('TeamMemberDetails')
      .evaluate()
      .setWidth(700)
      .setHeight(600)
      .setTitle('Team Member Details');
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Team Member Details');
  } catch (error) {
    logError('viewTeamMemberDetails', error);
    showErrorMessage('Error: ' + error.toString());
  }
}

/**
 * 📊 Get team overview statistics
 * @return {Object} Team statistics
 */
function getTeamOverview() {
  try {
    const result = getAllTeamMembers();
    
    if (!result.success) {
      return { success: false, message: result.message };
    }
    
    const teamMembers = result.data;
    
    // Calculate team statistics
    const totalMembers = teamMembers.length;
    const activeMembers = teamMembers.filter(m => m['Status'] === 'Active').length;
    const trainingMembers = teamMembers.filter(m => m['Status'] === 'Training').length;
    const ptoMembers = teamMembers.filter(m => m['Status'] === 'PTO' || m['Status'] === 'LOA' || m['Status'] === 'FMLA').length;
    const absenceRate = totalMembers > 0 ? ptoMembers / totalMembers : 0;
    
    // Shifts breakdown
    const shifts = {
      morning: teamMembers.filter(m => m['shift'] === 'morning').length,
      afternoon: teamMembers.filter(m => m['shift'] === 'afternoon').length,
      overnight: teamMembers.filter(m => m['shift'] === 'overnight').length,
      weekend: teamMembers.filter(m => m['shift'] === 'weekend').length,
      unassigned: teamMembers.filter(m => !m['shift'] || m['shift'] === '').length
    };
    
    // Status counts
    const statusCounts = {};
    teamMembers.forEach(member => {
      const status = member['Status'] || 'Unknown';
      statusCounts[status] = (statusCounts[status] || 0) + 1;
    });
    
    return {
      success: true,
      data: {
        totalMembers,
        activeMembers,
        trainingMembers,
        ptoMembers,
        absenceRate,
        shifts,
        statusCounts
      }
    };
  } catch (error) {
    logError('getTeamOverview', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📝 Create or update team member (handles both new and existing team members)
 * Supports both dropdown selection and manual entry
 * @param {Object} teamMemberData - Team member data from form
 * @return {Object} Result with success flag and message
 */
function createOrUpdateTeamMember(teamMemberData) {
  try {
    // Check if this is a new team member or an existing one
    if (teamMemberData.id) {
      // This is an existing team member - update 
      return updateTeamMember(teamMemberData);
    } else {
      // This is a new team member - create
      // Generate ID if needed
      if (!teamMemberData.id) {
        teamMemberData.id = 'TM-' + Utilities.getUuid().substring(0, 8).toUpperCase();
      }
      return addTeamMember(teamMemberData);
    }
  } catch (error) {
    logError('createOrUpdateTeamMember', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 🔍 Find or create team member from name/email input
 * Use this to support manual entry in forms
 * @param {String} nameOrEmail - Name or email of team member
 * @return {Object} Team member data or null if not found
 */
function findOrCreateTeamMemberFromText(nameOrEmail) {
  try {
    if (!nameOrEmail || nameOrEmail.trim().length < 3) {
      return { success: false, message: 'Name or email too short', data: null };
    }
    
    const searchText = nameOrEmail.trim();
    
    // Try to find by exact match first
    const allTeamMembers = getAllTeamMembers();
    if (!allTeamMembers.success) {
      return { success: false, message: allTeamMembers.message, data: null };
    }
    
    // Check for exact email match
    const exactEmailMatch = allTeamMembers.data.find(m => 
      m['Email'] && m['Email'].toLowerCase() === searchText.toLowerCase()
    );
    
    if (exactEmailMatch) {
      return { success: true, data: exactEmailMatch };
    }
    
    // Check for exact name match
    const exactNameMatch = allTeamMembers.data.find(m => 
      `${m['First Name']} ${m['Last Name']}`.toLowerCase() === searchText.toLowerCase()
    );
    
    if (exactNameMatch) {
      return { success: true, data: exactNameMatch };
    }
    
    // Check for partial matches
    const partialMatches = allTeamMembers.data.filter(m => 
      (m['Email'] && m['Email'].toLowerCase().includes(searchText.toLowerCase())) ||
      `${m['First Name']} ${m['Last Name']}`.toLowerCase().includes(searchText.toLowerCase())
    );
    
    if (partialMatches.length === 1) {
      return { success: true, data: partialMatches[0] };
    } else if (partialMatches.length > 1) {
      return { 
        success: false, 
        message: 'Multiple matches found. Please be more specific.',
        matches: partialMatches.map(m => ({
          id: m['Team Member ID'],
          name: `${m['First Name']} ${m['Last Name']}`,
          email: m['Email']
        }))
      };
    }
    
    // No matches found, parse the input to potentially create a new team member
    // Check if this is an email
    const emailRegex = /\S+@\S+\.\S+/;
    if (emailRegex.test(searchText)) {
      // This looks like an email
      return { 
        success: false, 
        message: 'No matching team member found',
        suggestedNew: {
          email: searchText,
          firstName: '',
          lastName: ''
        }
      };
    } else {
      // This looks like a name - try to split into first and last
      const nameParts = searchText.split(' ');
      let firstName = '';
      let lastName = '';
      
      if (nameParts.length === 1) {
        firstName = nameParts[0];
      } else if (nameParts.length >= 2) {
        firstName = nameParts[0];
        lastName = nameParts.slice(1).join(' ');
      }
      
      return { 
        success: false, 
        message: 'No matching team member found',
        suggestedNew: {
          email: '',
          firstName: firstName,
          lastName: lastName
        }
      };
    }
  } catch (error) {
    logError('findOrCreateTeamMemberFromText', error);
    return { success: false, message: error.toString(), data: null };
  }
}






<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>One-on-One Session</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
      overflow-x: hidden;
    }
    
    .page-container {
      max-width: 100%;
      min-height: 100%;
      display: flex;
      flex-direction: column;
    }
    
    .page-header {
      padding: 20px 24px;
      background: var(--primary-gradient);
      color: white;
      position: relative;
      overflow: hidden;
    }
    
    .page-header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
      position: relative;
      z-index: 2;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .header-subtitle {
      font-size: 14px;
      opacity: 0.9;
      position: relative;
      z-index: 2;
    }
    
    .cyber-line {
      position: absolute;
      height: 2px;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);
      width: 100%;
      bottom: 0;
      left: 0;
      animation: scanline 3s linear infinite;
    }
    
    /* Tabs navigation */
    .tabs-container {
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    
    .tabs-navigation {
      background-color: var(--bg-secondary);
      padding: 0 24px;
      overflow-x: auto;
      white-space: nowrap;
      border-bottom: 1px solid var(--border-medium);
      position: sticky;
      top: 0;
      z-index: 10;
      scrollbar-width: thin;
      scrollbar-color: var(--primary-light) var(--bg-secondary);
    }
    
    .tabs-navigation::-webkit-scrollbar {
      height: 4px;
    }
    
    .tabs-navigation::-webkit-scrollbar-track {
      background: var(--bg-secondary);
    }
    
    .tabs-navigation::-webkit-scrollbar-thumb {
      background-color: var(--primary-light);
      border-radius: 20px;
    }
    
    .tab-list {
      display: inline-flex;
      list-style: none;
      margin: 0;
      padding: 0;
    }
    
    .tab-item {
      display: inline-block;
      position: relative;
    }
    
    .tab-button {
      padding: 14px 20px;
      background: transparent;
      border: none;
      color: var(--text-tertiary);
      font-weight: 500;
      cursor: pointer;
      font-size: 14px;
      transition: color var(--transition-fast);
      display: flex;
      align-items: center;
      gap: 8px;
      white-space: nowrap;
    }
    
    .tab-button:hover {
      color: var(--primary-color);
    }
    
    .tab-button.active {
      color: var(--primary-color);
    }
    
    .tab-button.active::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 2px;
      background: var(--primary-gradient);
    }
    
    .tab-badge {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 18px;
      height: 18px;
      background-color: var(--primary-color);
      color: white;
      border-radius: 50%;
      font-size: 11px;
      font-weight: 600;
    }
    
    /* Tab content */
    .tab-content {
      flex: 1;
      padding: 24px;
      overflow-y: auto;
    }
    
    .tab-pane {
      display: none;
      animation: fadeIn 0.3s ease;
    }
    
    .tab-pane.active {
      display: block;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    /* Form styling */
    .form-section {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      margin-bottom: 24px;
      position: relative;
      overflow: hidden;
    }
    
    .section-header {
      margin-bottom: 20px;
      padding-bottom: 10px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .section-title {
      font-family: 'Manrope', sans-serif;
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .section-title i {
      color: var(--primary-color);
    }
    
    .section-subtitle {
      font-size: 13px;
      color: var(--text-tertiary);
      margin-top: 4px;
    }
    
    .form-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 20px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group.full-width {
      grid-column: 1 / -1;
    }
    
    .form-label {
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .input-group {
      position: relative;
      display: flex;
      flex-direction: column;
    }
    
    .input-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
      z-index: 1;
    }
    
    input[type="text"],
    input[type="email"],
    input[type="date"],
    input[type="time"],
    select,
    textarea {
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      color: var(--text-primary);
      width: 100%;
      font-family: 'Inter', sans-serif;
      transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
    }
    
    input[type="text"].with-icon,
    input[type="email"].with-icon,
    input[type="date"].with-icon,
    select.with-icon {
      padding-left: 36px;
    }
    
    input:focus,
    select:focus,
    textarea:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .input-group.error input,
    .input-group.error select,
    .input-group.error textarea {
      border-color: var(--danger-color);
      background-color: var(--danger-light);
    }
    
    .error-message {
      color: var(--danger-color);
      font-size: 12px;
      margin-top: 4px;
    }
    
    textarea {
      min-height: 100px;
      resize: vertical;
    }
    
    .field-help {
      font-size: 12px;
      color: var(--text-tertiary);
      margin-top: 4px;
    }
    
    /* Energy/workload rating */
    .rating-group {
      display: flex;
      gap: 12px;
      margin-top: 8px;
    }
    
    .rating-option {
      flex: 1;
      padding: 10px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      text-align: center;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .rating-option:hover {
      border-color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    .rating-option.selected {
      border-color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.1);
    }
    
    /* Checkboxes */
    .checklist {
      list-style-type: none;
      margin: 0;
      padding: 0;
    }
    
    .checklist-item {
      padding: 8px 0;
      display: flex;
      align-items: flex-start;
      gap: 10px;
    }
    
    input[type="checkbox"] {
      appearance: none;
      width: 18px;
      height: 18px;
      border: 1.5px solid var(--border-medium);
      border-radius: 4px;
      margin: 0;
      position: relative;
      cursor: pointer;
      flex-shrink: 0;
      margin-top: 2px;
    }
    
    input[type="checkbox"]::after {
      content: '';
      position: absolute;
      top: 40%;
      left: 50%;
      transform: translate(-50%, -50%) rotate(45deg);
      width: 4px;
      height: 8px;
      border-bottom: 2px solid white;
      border-right: 2px solid white;
      opacity: 0;
      transition: opacity var(--transition-fast);
    }
    
    input[type="checkbox"]:checked {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    input[type="checkbox"]:checked::after {
      opacity: 1;
    }
    
    input[type="checkbox"]:focus {
      outline: 0;
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.2);
    }
    
    .checklist-label {
      font-size: 14px;
      line-height: 1.4;
      cursor: pointer;
    }
    
    /* Email template preview */
    .email-preview {
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      padding: 20px;
      background-color: white;
      margin-top: 20px;
      box-shadow: var(--shadow-sm);
    }
    
    .email-header {
      padding-bottom: 12px;
      border-bottom: 1px solid var(--border-light);
      margin-bottom: 12px;
    }
    
    .email-field {
      margin-bottom: 8px;
      font-size: 13px;
    }
    
    .email-label {
      color: var(--text-tertiary);
      display: inline-block;
      width: 60px;
    }
    
    .email-body {
      padding: 12px 0;
      font-size: 14px;
      line-height: 1.5;
      white-space: pre-wrap;
    }
    
    .email-signature {
      padding-top: 12px;
      border-top: 1px solid var(--border-light);
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    /* Template selector */
    .template-selector {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 16px;
    }
    
    .template-option {
      padding: 8px 16px;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-medium);
      cursor: pointer;
      transition: all var(--transition-fast);
      font-size: 13px;
    }
    
    .template-option:hover {
      border-color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    .template-option.selected {
      border-color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.1);
      color: var(--primary-color);
      font-weight: 500;
    }
    
    /* Footer actions */
    .actions-footer {
      position: sticky;
      bottom: 0;
      background-color: white;
      padding: 16px 24px;
      box-shadow: 0 -4px 10px rgba(15, 23, 42, 0.05);
      display: flex;
      justify-content: space-between;
      align-items: center;
      z-index: 10;
      margin-top: auto;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 20px;
      border-radius: var(--radius-md);
      font-size: 14px;
      font-weight: 500;
      transition: all var(--transition-fast);
      border: none;
      cursor: pointer;
    }
    
    .btn-secondary {
      background-color: var(--bg-secondary);
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-tertiary);
      border-color: var(--text-tertiary);
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(251, 113, 133, 0.4);
    }
    
    .btn-group {
      display: flex;
      gap: 10px;
    }
    
    /* Team member selector */
    .team-member-input {
      padding: 16px;
      border: 1px dashed var(--border-medium);
      border-radius: var(--radius-md);
      margin-bottom: 20px;
      background-color: var(--bg-secondary);
    }
    
    .member-selector-tabs {
      display: flex;
      gap: 10px;
      margin-bottom: 16px;
    }
    
    .member-selector-tab {
      padding: 8px 16px;
      border-radius: var(--radius-md);
      cursor: pointer;
      font-size: 14px;
      transition: all var(--transition-fast);
      background: transparent;
      border: none;
      color: var(--text-tertiary);
      font-weight: 500;
    }
    
    .member-selector-tab.active {
      background-color: white;
      color: var(--primary-color);
      box-shadow: var(--shadow-sm);
    }
    
    .member-selector-content {
      background-color: white;
      border-radius: var(--radius-md);
      padding: 16px;
      box-shadow: var(--shadow-sm);
    }
    
    .member-selector-content > div {
      display: none;
    }
    
    .member-selector-content > div.active {
      display: block;
    }
    
    /* Manual entry for team member */
    .manual-entry-form {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 16px;
    }
    
    /* Session information */
    .session-info {
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      padding: 16px;
      margin-bottom: 24px;
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }
    
    .info-group {
      flex: 1;
      min-width: 200px;
    }
    
    .info-label {
      font-size: 12px;
      color: var(--text-tertiary);
      margin-bottom: 4px;
    }
    
    .info-value {
      font-weight: 600;
      font-size: 14px;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      z-index: 1000;
      backdrop-filter: blur(5px);
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(85, 64, 175, 0.1);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    .loading-text {
      margin-top: 12px;
      font-weight: 500;
      color: var(--primary-color);
    }
    
    /* Toast notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 16px;
      border-radius: var(--radius-md);
      background-color: white;
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      transform: translateX(120%);
      transition: transform var(--transition-normal);
      z-index: 999;
      max-width: 320px;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      flex-shrink: 0;
    }
    
    .notification-success .notification-icon {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .notification-error .notification-icon {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 2px;
    }
    
    .notification-message {
      font-size: 12px;
      color: var(--text-secondary);
    }
    
    /* Animation elements */
    @keyframes scanline {
      0% {
        opacity: 0;
      }
      50% {
        opacity: 1;
      }
      100% {
        opacity: 0;
      }
    }
    
    .form-section::after {
      content: '';
      position: absolute;
      height: 1px;
      background: linear-gradient(90deg, transparent, var(--primary-light), transparent);
      width: 100%;
      bottom: 0;
      left: 0;
      animation: scanline 4s linear infinite;
    }
    
    .pulse {
      position: relative;
    }
    
    .pulse::before {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      background: inherit;
      border-radius: inherit;
      z-index: -1;
      opacity: 0.6;
      animation: pulse-animation 2s infinite;
    }
    
    @keyframes pulse-animation {
      0% {
        transform: scale(1);
        opacity: 0.6;
      }
      50% {
        transform: scale(1.05);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 0;
      }
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .form-grid {
        grid-template-columns: 1fr;
      }
      
      .rating-group {
        flex-wrap: wrap;
      }
      
      .manual-entry-form {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>

<body>
  <div class="page-container">
    <header class="page-header">
      <div class="header-title">
        <i class="fas fa-comments"></i> One-on-One Session
      </div>
      <div class="header-subtitle">Record notes, track progress, and plan development for your team members</div>
      <div class="cyber-line"></div>
    </header>
    
    <div class="tabs-container">
      <nav class="tabs-navigation">
        <ul class="tab-list">
          <li class="tab-item">
            <button type="button" class="tab-button active" data-tab="preparation">
              <i class="fas fa-clipboard-check"></i> Pre-Meeting
            </button>
          </li>
          <li class="tab-item">
            <button type="button" class="tab-button" data-tab="meeting">
              <i class="fas fa-user-friends"></i> During Meeting
            </button>
          </li>
          <li class="tab-item">
            <button type="button" class="tab-button" data-tab="development">
              <i class="fas fa-chart-line"></i> Development Plan
            </button>
          </li>
          <li class="tab-item">
            <button type="button" class="tab-button" data-tab="support">
              <i class="fas fa-hands-helping"></i> Support
            </button>
          </li>
          <li class="tab-item">
            <button type="button" class="tab-button" data-tab="commitments">
              <i class="fas fa-tasks"></i> Commitments
            </button>
          </li>
          <li class="tab-item">
            <button type="button" class="tab-button" data-tab="followup">
              <i class="fas fa-envelope"></i> Follow-Up Email
            </button>
          </li>
          <li class="tab-item">
            <button type="button" class="tab-button" data-tab="reflection">
              <i class="fas fa-lightbulb"></i> Reflection
            </button>
          </li>
        </ul>
      </nav>
      
      <div class="tab-content">
        <form id="oneOnOneForm">
          <!-- Team Member Selection Section -->
          <div class="form-section">
            <div class="section-header">
              <div>
                <div class="section-title"><i class="fas fa-user-circle"></i> Team Member</div>
                <div class="section-subtitle">Select a team member or enter details manually</div>
              </div>
            </div>
            
            <div class="team-member-input">
              <div class="member-selector-tabs">
                <button type="button" class="member-selector-tab active" data-tab="select-member">Select Team Member</button>
                <button type="button" class="member-selector-tab" data-tab="manual-entry">Enter Manually</button>
              </div>
              
              <div class="member-selector-content">
                <div class="active" id="select-member">
                  <div id="memberSelector"></div>
                </div>
                
                <div id="manual-entry">
                  <div class="manual-entry-form">
                    <div class="form-group">
                      <label class="form-label" for="memberFirstName">First Name</label>
                      <div class="input-group">
                        <input type="text" id="memberFirstName" name="memberFirstName" class="with-icon">
                        <i class="fas fa-user input-icon"></i>
                      </div>
                    </div>
                    
                    <div class="form-group">
                      <label class="form-label" for="memberLastName">Last Name</label>
                      <div class="input-group">
                        <input type="text" id="memberLastName" name="memberLastName" class="with-icon">
                        <i class="fas fa-user input-icon"></i>
                      </div>
                    </div>
                    
                    <div class="form-group">
                      <label class="form-label" for="memberEmail">Email</label>
                      <div class="input-group">
                        <input type="email" id="memberEmail" name="memberEmail" class="with-icon">
                        <i class="fas fa-envelope input-icon"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="session-info">
              <div class="info-group">
                <div class="info-label">Session Type</div>
                <div class="info-value">
                  <select id="sessionType" name="sessionType">
                    <option value="regular">Regular One-on-One</option>
                    <option value="performance">Performance Review</option>
                    <option value="coaching">Coaching Session</option>
                    <option value="development">Development Planning</option>
                    <option value="checkin">Quick Check-In</option>
                  </select>
                </div>
              </div>
              
              <div class="info-group">
                <div class="info-label">Session Date</div>
                <div class="info-value">
                  <input type="date" id="sessionDate" name="sessionDate" required>
                </div>
              </div>
              
              <div class="info-group">
                <div class="info-label">Session Time</div>
                <div class="info-value">
                  <input type="time" id="sessionTime" name="sessionTime">
                </div>
              </div>
              
              <div class="info-group">
                <div class="info-label">Duration</div>
                <div class="info-value">
                  <select id="sessionDuration" name="sessionDuration">
                    <option value="15">15 minutes</option>
                    <option value="30" selected>30 minutes</option>
                    <option value="45">45 minutes</option>
                    <option value="60">60 minutes</option>
                  </select>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Preparation Tab -->
          <div class="tab-pane active" id="preparation">
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-clipboard-check"></i> Preparation Checklist</div>
                  <div class="section-subtitle">Pre-meeting preparation items</div>
                </div>
              </div>
              
              <ul class="checklist">
                <li class="checklist-item">
                  <input type="checkbox" id="checkReviewNotes" name="checkReviewNotes">
                  <label class="checklist-label" for="checkReviewNotes">Review previous meeting notes</label>
                </li>
                <li class="checklist-item">
                  <input type="checkbox" id="checkPerformance" name="checkPerformance">
                  <label class="checklist-label" for="checkPerformance">Check performance metrics</label>
                </li>
                <li class="checklist-item">
                  <input type="checkbox" id="checkUpdates" name="checkUpdates">
                  <label class="checklist-label" for="checkUpdates">Gather relevant team/department updates</label>
                </li>
                <li class="checklist-item">
                  <input type="checkbox" id="checkPoints" name="checkPoints">
                  <label class="checklist-label" for="checkPoints">Prepare preliminary discussion points</label>
                </li>
              </ul>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-chart-bar"></i> Data Collection</div>
                  <div class="section-subtitle">Key metrics and information to review</div>
                </div>
              </div>
              
              <ul class="checklist">
                <li class="checklist-item">
                  <input type="checkbox" id="checkQuality" name="checkQuality">
                  <label class="checklist-label" for="checkQuality">Review recent call quality reports</label>
                </li>
                <li class="checklist-item">
                  <input type="checkbox" id="checkIndicators" name="checkIndicators">
                  <label class="checklist-label" for="checkIndicators">Check individual performance indicators</label>
                </li>
                <li class="checklist-item">
                  <input type="checkbox" id="checkChallenges" name="checkChallenges">
                  <label class="checklist-label" for="checkChallenges">Note any team-wide or individual challenges</label>
                </li>
                <li class="checklist-item">
                  <input type="checkbox" id="checkResources" name="checkResources">
                  <label class="checklist-label" for="checkResources">Identify potential support resources</label>
                </li>
              </ul>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-sticky-note"></i> Preparation Notes</div>
                  <div class="section-subtitle">Document key points to address during the meeting</div>
                </div>
              </div>
              
              <div class="form-group">
                <div class="input-group">
                  <textarea id="preparationNotes" name="preparationNotes" placeholder="Enter your preparation notes, key points to discuss, and relevant information for reference during the meeting..."></textarea>
                </div>
              </div>
            </div>
          </div>
          
          <!-- During Meeting Tab -->
          <div class="tab-pane" id="meeting">
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-comment-dots"></i> Quick Status Sync (5 Minutes)</div>
                  <div class="section-subtitle">Critical discussion points and current status</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="criticalTopics">What's critical to discuss today?</label>
                <div class="input-group">
                  <textarea id="criticalTopics" name="criticalTopics" placeholder="Document the counselor's top priorities for this meeting..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Current Workload Status</label>
                <div class="rating-group">
                  <div class="rating-option" data-value="underutilized">
                    <div>Underutilized</div>
                  </div>
                  <div class="rating-option" data-value="balanced">
                    <div>Balanced</div>
                  </div>
                  <div class="rating-option" data-value="heavy">
                    <div>Heavy</div>
                  </div>
                  <div class="rating-option" data-value="overwhelming">
                    <div>Overwhelming</div>
                  </div>
                </div>
                <input type="hidden" id="workloadStatus" name="workloadStatus">
              </div>
              
              <div class="form-group">
                <label class="form-label" for="immediateBlockers">Immediate Blockers</label>
                <div class="input-group">
                  <textarea id="immediateBlockers" name="immediateBlockers" placeholder="Document any immediate obstacles preventing effective work..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Energy/Motivation Level</label>
                <div class="rating-group">
                  <div class="rating-option" data-value="low">
                    <div>Low</div>
                  </div>
                  <div class="rating-option" data-value="moderate">
                    <div>Moderate</div>
                  </div>
                  <div class="rating-option" data-value="high">
                    <div>High</div>
                  </div>
                  <div class="rating-option" data-value="veryHigh">
                    <div>Very High</div>
                  </div>
                </div>
                <input type="hidden" id="energyLevel" name="energyLevel">
              </div>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-chart-pie"></i> Performance Deep Dive (10 Minutes)</div>
                  <div class="section-subtitle">Review metrics and qualitative performance</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="quantitativeMetrics">Quantitative Metrics Review</label>
                <div class="input-group">
                  <textarea id="quantitativeMetrics" name="quantitativeMetrics" placeholder="Document observations about call handling, complex case management, quality indicators, and comparative benchmarks..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="qualitativeImpact">Qualitative Impact Assessment</label>
                <div class="input-group">
                  <textarea id="qualitativeImpact" name="qualitativeImpact" placeholder="Document most meaningful interventions, skill demonstration highlights, areas of exceptional contribution, and growth opportunities..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="strategicInsight">Strategic Insight Capture</label>
                <div class="input-group">
                  <textarea id="strategicInsight" name="strategicInsight" placeholder="Document strengths to leverage, skill development pathways, and performance trend analysis..."></textarea>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Development Plan Tab -->
          <div class="tab-pane" id="development">
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-graduation-cap"></i> Strategic Development Planning (7 Minutes)</div>
                  <div class="section-subtitle">Skill development and career alignment</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="skillMapping">Skill Mastery Mapping</label>
                <div class="input-group">
                  <textarea id="skillMapping" name="skillMapping" placeholder="Document current competency levels, target skill acquisitions, and learning resource identification..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="careerAlignment">Career Trajectory Alignment</label>
                <div class="input-group">
                  <textarea id="careerAlignment" name="careerAlignment" placeholder="Document individual aspirations, organizational needs, and bridging development gaps..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="developmentTracker">Action Development Tracker</label>
                <div class="input-group">
                  <textarea id="developmentTracker" name="developmentTracker" placeholder="Identify 2-3 specific skill development goals matched with organizational requirements and preliminary learning pathway..."></textarea>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Support Tab -->
          <div class="tab-pane" id="support">
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-hands-helping"></i> Support and Resource Optimization (5 Minutes)</div>
                  <div class="section-subtitle">Identify obstacles and support needs</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="obstacleIdentification">Obstacle Identification</label>
                <div class="input-group">
                  <textarea id="obstacleIdentification" name="obstacleIdentification" placeholder="Document systemic challenges, resource constraints, and potential intervention points..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="leadershipSupport">Leadership Support Calibration</label>
                <div class="input-group">
                  <textarea id="leadershipSupport" name="leadershipSupport" placeholder="Document immediate support needs, potential mentorship opportunities, and training/resource recommendations..."></textarea>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Commitments Tab -->
          <div class="tab-pane" id="commitments">
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-handshake"></i> Commitment and Momentum Generation (3 Minutes)</div>
                  <div class="section-subtitle">Capture commitments and action items</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="commitmentsSynthesis">Commitments Synthesis</label>
                <div class="input-group">
                  <textarea id="commitmentsSynthesis" name="commitmentsSynthesis" placeholder="Document clearly articulated action items, mutual accountability establishment, and next check-in preparation..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Momentum Acceleration Checklist</label>
                <ul class="checklist">
                  <li class="checklist-item">
                    <input type="checkbox" id="checkActionItems" name="checkActionItems">
                    <label class="checklist-label" for="checkActionItems">Confirmed 3 specific action items</label>
                  </li>
                  <li class="checklist-item">
                    <input type="checkbox" id="checkOwnership" name="checkOwnership">
                    <label class="checklist-label" for="checkOwnership">Established clear ownership</label>
                  </li>
                  <li class="checklist-item">
                    <input type="checkbox" id="checkExpectations" name="checkExpectations">
                    <label class="checklist-label" for="checkExpectations">Set precise follow-up expectations</label>
                  </li>
                </ul>
              </div>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-tasks"></i> Action Items</div>
                  <div class="section-subtitle">Specific tasks to complete with deadlines</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Action Item 1</label>
                <div class="form-grid">
                  <div class="input-group">
                    <input type="text" id="actionItem1" name="actionItem1" placeholder="Description of action item">
                  </div>
                  <div class="input-group">
                    <input type="date" id="actionItem1DueDate" name="actionItem1DueDate" placeholder="Due date">
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Action Item 2</label>
                <div class="form-grid">
                  <div class="input-group">
                    <input type="text" id="actionItem2" name="actionItem2" placeholder="Description of action item">
                  </div>
                  <div class="input-group">
                    <input type="date" id="actionItem2DueDate" name="actionItem2DueDate" placeholder="Due date">
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Action Item 3</label>
                <div class="form-grid">
                  <div class="input-group">
                    <input type="text" id="actionItem3" name="actionItem3" placeholder="Description of action item">
                  </div>
                  <div class="input-group">
                    <input type="date" id="actionItem3DueDate" name="actionItem3DueDate" placeholder="Due date">
                  </div>
                </div>
              </div>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-calendar-alt"></i> Next One-on-One Session</div>
                  <div class="section-subtitle">Schedule the next meeting</div>
                </div>
              </div>
              
              <div class="form-grid">
                <div class="form-group">
                  <label class="form-label" for="nextSessionDate">Next Session Date</label>
                  <div class="input-group">
                    <input type="date" id="nextSessionDate" name="nextSessionDate">
                  </div>
                </div>
                
                <div class="form-group">
                  <label class="form-label" for="nextSessionTime">Next Session Time</label>
                  <div class="input-group">
                    <input type="time" id="nextSessionTime" name="nextSessionTime">
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Follow-Up Email Tab -->
          <div class="tab-pane" id="followup">
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-envelope"></i> Follow-Up Email</div>
                  <div class="section-subtitle">Prepare a follow-up email with action items and notes</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Email Template</label>
                <div class="template-selector">
                  <div class="template-option selected" data-template="standard">Standard Follow-Up</div>
                  <div class="template-option" data-template="detailed">Detailed Summary</div>
                  <div class="template-option" data-template="actionItems">Action Items Only</div>
                  <div class="template-option" data-template="appreciation">Appreciation & Recognition</div>
                </div>
                <input type="hidden" id="selectedTemplate" name="selectedTemplate" value="standard">
              </div>
              
              <div class="form-group">
                <label class="form-label" for="emailSubject">Email Subject</label>
                <div class="input-group">
                  <input type="text" id="emailSubject" name="emailSubject" value="One-on-One Session Summary - [Date]" class="with-icon">
                  <i class="fas fa-heading input-icon"></i>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="emailBody">Email Body</label>
                <div class="input-group">
                  <textarea id="emailBody" name="emailBody" rows="10"></textarea>
                </div>
              </div>
              
              <div class="email-preview">
                <div class="email-header">
                  <div class="email-field">
                    <span class="email-label">To:</span>
                    <span id="emailPreviewTo">team.member@example.com</span>
                  </div>
                  <div class="email-field">
                    <span class="email-label">Subject:</span>
                    <span id="emailPreviewSubject">One-on-One Session Summary - [Date]</span>
                  </div>
                </div>
                <div class="email-body" id="emailPreviewBody">
                  Hi [Name],

Thank you for our productive one-on-one session today. I wanted to summarize our discussion and the action items we agreed on.

Key Discussion Points:
- [Point 1]
- [Point 2]
- [Point 3]

Action Items:
1. [Action Item 1] - Due: [Date]
2. [Action Item 2] - Due: [Date]
3. [Action Item 3] - Due: [Date]

Our next one-on-one session is scheduled for [Next Session Date] at [Time].

Please let me know if you have any questions or need any support in the meantime.

Best regards,
[Your Name]
                </div>
                <div class="email-signature" id="emailSignature">
                  Team Lead | Crisis Services
                </div>
              </div>
              
              <div class="form-group" style="margin-top: 20px;">
                <div class="input-group">
                  <button type="button" class="btn btn-secondary" id="sendEmailBtn">
                    <i class="fas fa-paper-plane"></i> Send Follow-Up Email
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Reflection Tab -->
          <div class="tab-pane" id="reflection">
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-lightbulb"></i> Reflection and Improvement</div>
                  <div class="section-subtitle">Post-meeting reflections to improve future sessions</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="supportNeeded">What support did the counselor most need?</label>
                <div class="input-group">
                  <textarea id="supportNeeded" name="supportNeeded" placeholder="Document insights about counselor support needs..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="facilitateGrowth">How can I better facilitate their growth?</label>
                <div class="input-group">
                  <textarea id="facilitateGrowth" name="facilitateGrowth" placeholder="Document ways to improve your coaching approach..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="systemicImprovements">Are there systemic support mechanisms we can improve?</label>
                <div class="input-group">
                  <textarea id="systemicImprovements" name="systemicImprovements" placeholder="Document potential improvements to systems and processes..."></textarea>
                </div>
              </div>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-user-shield"></i> Confidential Development Notes</div>
                  <div class="section-subtitle">Private observations for future planning</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="growthAreas">Discrete observations about potential growth areas</label>
                <div class="input-group">
                  <textarea id="growthAreas" name="growthAreas" placeholder="Document private observations about growth areas..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="strengthDevelopment">Strengths to further develop</label>
                <div class="input-group">
                  <textarea id="strengthDevelopment" name="strengthDevelopment" placeholder="Document strengths that can be further developed..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="careerInsights">Long-term career development insights</label>
                <div class="input-group">
                  <textarea id="careerInsights" name="careerInsights" placeholder="Document insights about long-term career development..."></textarea>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
    
    <div class="actions-footer">
      <div class="btn-group">
        <button type="button" class="btn btn-secondary" id="cancelBtn">
          <i class="fas fa-times"></i> Cancel
        </button>
        <button type="button" class="btn btn-secondary" id="saveAsDraftBtn">
          <i class="fas fa-save"></i> Save as Draft
        </button>
      </div>
      
      <div class="btn-group">
        <button type="button" class="btn btn-secondary" id="prevTabBtn">
          <i class="fas fa-arrow-left"></i> Previous
        </button>
        <button type="button" class="btn btn-primary" id="nextTabBtn">
          Next <i class="fas fa-arrow-right"></i>
        </button>
        <button type="button" class="btn btn-primary" id="saveBtn" style="display: none;">
          <i class="fas fa-check"></i> Complete Session
        </button>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
    <div class="loading-text" id="loadingText">Saving session...</div>
  </div>
  
  <!-- Toast Notification -->
  <div id="notification" class="notification">
    <div class="notification-icon">
      <i class="fas fa-check"></i>
    </div>
    <div class="notification-content">
      <div class="notification-title">Success!</div>
      <div class="notification-message">One-on-one session saved successfully.</div>
    </div>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Load team member selector component
      loadTeamMemberSelector();
      
      // Initialize tabs navigation
      initTabs();
      
      // Initialize rating options
      initRatingOptions();
      
      // Initialize team member selector tabs
      initMemberSelectorTabs();
      
      // Initialize email templates
      initEmailTemplates();
      
      // Set up event listeners for action buttons
      setupActionButtons();
    });
    
    // Load team member selector component
    function loadTeamMemberSelector() {
      google.script.run
        .withSuccessHandler(function(html) {
          document.getElementById('memberSelector').innerHTML = html;
          
          // Initialize the team member selector after loading
          google.script.run
            .withSuccessHandler(function(result) {
              if (result.success) {
                window.TeamMemberSelector.initialize(result.data, onTeamMemberSelected);
              }
            })
            .getAllTeamMembers();
        })
        .getTeamMemberSelectorHtml();
    }
    
    // Handle team member selection
    function onTeamMemberSelected(memberId, memberName, member) {
      // Update email preview
      document.getElementById('emailPreviewTo').textContent = member.Email || 'team.member@example.com';
      
      // Update email templates with member name
      updateEmailTemplates(member['First Name'] || 'Team Member');
    }
    
    // Initialize tabs navigation
    function initTabs() {
      const tabButtons = document.querySelectorAll('.tab-button');
      const tabPanes = document.querySelectorAll('.tab-pane');
      const prevTabBtn = document.getElementById('prevTabBtn');
      const nextTabBtn = document.getElementById('nextTabBtn');
      const saveBtn = document.getElementById('saveBtn');
      
      // Click handler for tab buttons
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          activateTab(tabId);
        });
      });
      
      // Previous tab button
      prevTabBtn.addEventListener('click', function() {
        const activeTabButton = document.querySelector('.tab-button.active');
        const prevTabButton = activeTabButton.parentElement.previousElementSibling?.querySelector('.tab-button');
        
        if (prevTabButton) {
          const tabId = prevTabButton.getAttribute('data-tab');
          activateTab(tabId);
        }
      });
      
      // Next tab button
      nextTabBtn.addEventListener('click', function() {
        const activeTabButton = document.querySelector('.tab-button.active');
        const nextTabButton = activeTabButton.parentElement.nextElementSibling?.querySelector('.tab-button');
        
        if (nextTabButton) {
          const tabId = nextTabButton.getAttribute('data-tab');
          activateTab(tabId);
        }
      });
      
      // Function to activate a tab
      function activateTab(tabId) {
        // Deactivate all tabs
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabPanes.forEach(pane => pane.classList.remove('active'));
        
        // Activate the selected tab
        const selectedButton = document.querySelector(`.tab-button[data-tab="${tabId}"]`);
        const selectedPane = document.getElementById(tabId);
        
        if (selectedButton && selectedPane) {
          selectedButton.classList.add('active');
          selectedPane.classList.add('active');
          
          // Update button visibility
          const isFirstTab = !selectedButton.parentElement.previousElementSibling;
          const isLastTab = !selectedButton.parentElement.nextElementSibling;
          
          prevTabBtn.disabled = isFirstTab;
          
          if (isLastTab) {
            nextTabBtn.style.display = 'none';
            saveBtn.style.display = '';
          } else {
            nextTabBtn.style.display = '';
            saveBtn.style.display = 'none';
          }
          
          // Scroll tab into view if needed
          selectedButton.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
        }
      }
    }
    
    // Initialize rating options
    function initRatingOptions() {
      const ratingGroups = document.querySelectorAll('.rating-group');
      
      ratingGroups.forEach(group => {
        const options = group.querySelectorAll('.rating-option');
        const hiddenInput = group.nextElementSibling;
        
        options.forEach(option => {
          option.addEventListener('click', function() {
            // Remove selected class from all options
            options.forEach(opt => opt.classList.remove('selected'));
            
            // Add selected class to clicked option
            this.classList.add('selected');
            
            // Update hidden input value
            if (hiddenInput) {
              hiddenInput.value = this.getAttribute('data-value');
            }
          });
        });
      });
    }
    
        // Initialize team member selector tabs
    function initMemberSelectorTabs() {
      const tabButtons = document.querySelectorAll('.member-selector-tab');
      const tabContents = document.querySelectorAll('.member-selector-content > div');
      
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          
          // Deactivate all tabs
          tabButtons.forEach(btn => btn.classList.remove('active'));
          tabContents.forEach(content => content.classList.remove('active'));
          
          // Activate selected tab
          this.classList.add('active');
          document.getElementById(tabId).classList.add('active');
        });
      });
    }
    
    // Initialize email templates
    function initEmailTemplates() {
      const templateOptions = document.querySelectorAll('.template-option');
      const hiddenInput = document.getElementById('selectedTemplate');
      const emailSubject = document.getElementById('emailSubject');
      const emailBody = document.getElementById('emailBody');
      const emailPreviewSubject = document.getElementById('emailPreviewSubject');
      const emailPreviewBody = document.getElementById('emailPreviewBody');
      
      // Set default template
      updateEmailTemplates('Team Member');
      
      templateOptions.forEach(option => {
        option.addEventListener('click', function() {
          // Remove selected class from all options
          templateOptions.forEach(opt => opt.classList.remove('selected'));
          
          // Add selected class to clicked option
          this.classList.add('selected');
          
          // Update hidden input value
          if (hiddenInput) {
            hiddenInput.value = this.getAttribute('data-template');
          }
          
          // Update email template
          const templateType = this.getAttribute('data-template');
          const memberName = document.getElementById('memberFirstName')?.value || 'Team Member';
          updateEmailTemplate(templateType, memberName);
        });
      });
      
      // Update email preview when subject or body changes
      emailSubject.addEventListener('input', function() {
        emailPreviewSubject.textContent = this.value;
      });
      
      emailBody.addEventListener('input', function() {
        emailPreviewBody.textContent = this.value;
      });
      
      // Update manual entry fields to reflect in email
      document.getElementById('memberFirstName').addEventListener('input', function() {
        const lastName = document.getElementById('memberLastName').value;
        const fullName = this.value + (lastName ? ' ' + lastName : '');
        updateEmailTemplates(this.value);
      });
      
      document.getElementById('memberEmail').addEventListener('input', function() {
        document.getElementById('emailPreviewTo').textContent = this.value || 'team.member@example.com';
      });
    }
    
    // Update email templates based on selected type and member name
    function updateEmailTemplates(memberName) {
      const selectedTemplate = document.getElementById('selectedTemplate').value;
      updateEmailTemplate(selectedTemplate, memberName);
    }
    
    // Update specific email template
    function updateEmailTemplate(templateType, memberName) {
      const today = new Date().toLocaleDateString();
      const nextSessionDate = document.getElementById('nextSessionDate')?.value || '[Date]';
      const nextSessionTime = document.getElementById('nextSessionTime')?.value || '[Time]';
      
      // Get action items if available
      const actionItem1 = document.getElementById('actionItem1')?.value || '[Action Item 1]';
      const actionItem2 = document.getElementById('actionItem2')?.value || '[Action Item 2]';
      const actionItem3 = document.getElementById('actionItem3')?.value || '[Action Item 3]';
      const actionItem1Due = document.getElementById('actionItem1DueDate')?.value || '[Date]';
      const actionItem2Due = document.getElementById('actionItem2DueDate')?.value || '[Date]';
      const actionItem3Due = document.getElementById('actionItem3DueDate')?.value || '[Date]';
      
      // Set subject
      const emailSubject = document.getElementById('emailSubject');
      emailSubject.value = `One-on-One Session Summary - ${today}`;
      document.getElementById('emailPreviewSubject').textContent = emailSubject.value;
      
      // Set body based on template type
      const emailBody = document.getElementById('emailBody');
      let bodyText = '';
      
      switch(templateType) {
        case 'standard':
          bodyText = `Hi ${memberName},

Thank you for our productive one-on-one session today. I wanted to summarize our discussion and the action items we agreed on.

Key Discussion Points:
- [Point 1]
- [Point 2]
- [Point 3]

Action Items:
1. ${actionItem1} - Due: ${actionItem1Due}
2. ${actionItem2} - Due: ${actionItem2Due}
3. ${actionItem3} - Due: ${actionItem3Due}

Our next one-on-one session is scheduled for ${nextSessionDate} at ${nextSessionTime}.

Please let me know if you have any questions or need any support in the meantime.

Best regards,
[Your Name]`;
          break;
          
        case 'detailed':
          bodyText = `Hi ${memberName},

Thank you for our in-depth one-on-one session today. I've documented the key points we discussed and wanted to share them with you for reference.

DISCUSSION SUMMARY:
We covered your current workload status, recent performance metrics, and development opportunities. I appreciate your candid feedback on the challenges you're facing and your ideas for improvement.

STRENGTHS IDENTIFIED:
• [Strength 1]
• [Strength 2]
• [Strength 3]

DEVELOPMENT OPPORTUNITIES:
• [Opportunity 1]
• [Opportunity 2]

ACTION ITEMS:
1. ${actionItem1} - Due: ${actionItem1Due}
2. ${actionItem2} - Due: ${actionItem2Due}
3. ${actionItem3} - Due: ${actionItem3Due}

RESOURCES & SUPPORT:
I'll be providing the following resources to support your development:
• [Resource 1]
• [Resource 2]

Our next check-in is scheduled for ${nextSessionDate} at ${nextSessionTime}. Feel free to reach out before then if you need any additional support or have questions.

Thank you for your continued dedication and hard work!

Best regards,
[Your Name]`;
          break;
          
        case 'actionItems':
          bodyText = `Hi ${memberName},

Following our one-on-one session today, here are the action items we agreed upon:

ACTION ITEMS:
1. ${actionItem1}
   Due: ${actionItem1Due}
   Owner: [Owner Name]
   
2. ${actionItem2}
   Due: ${actionItem2Due}
   Owner: [Owner Name]
   
3. ${actionItem3}
   Due: ${actionItem3Due}
   Owner: [Owner Name]

Our next follow-up is scheduled for ${nextSessionDate} at ${nextSessionTime}.

Please confirm that these action items and deadlines align with your understanding.

Thank you,
[Your Name]`;
          break;
          
        case 'appreciation':
          bodyText = `Hi ${memberName},

I wanted to take a moment to express my appreciation for our conversation today and recognize the excellent work you've been doing.

SPECIFIC ACHIEVEMENTS:
• [Achievement 1]
• [Achievement 2]
• [Achievement 3]

Your contributions to the team have made a significant impact, particularly in [specific area]. I especially appreciate your [specific quality or behavior], which has helped [positive outcome].

We also discussed some next steps to further support your growth:

ACTION ITEMS:
1. ${actionItem1} - Due: ${actionItem1Due}
2. ${actionItem2} - Due: ${actionItem2Due}
3. ${actionItem3} - Due: ${actionItem3Due}

I look forward to our next one-on-one on ${nextSessionDate} at ${nextSessionTime}.

Thank you for your continued dedication and valuable contributions!

Best regards,
[Your Name]`;
          break;
      }
      
      emailBody.value = bodyText;
      document.getElementById('emailPreviewBody').textContent = bodyText;
    }
    
    // Set up action buttons
    function setupActionButtons() {
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', function() {
        if (confirm('Are you sure you want to cancel? Any unsaved changes will be lost.')) {
          google.script.host.close();
        }
      });
      
      // Save as draft button
      document.getElementById('saveAsDraftBtn').addEventListener('click', function() {
        saveSession(true);
      });
      
      // Complete session button
      document.getElementById('saveBtn').addEventListener('click', function() {
        saveSession(false);
      });
      
      // Send email button
      document.getElementById('sendEmailBtn').addEventListener('click', function() {
        sendFollowUpEmail();
      });
    }
    
    // Save one-on-one session
    function saveSession(isDraft = false) {
      // Validate required fields for non-draft saves
      if (!isDraft && !validateRequiredFields()) {
        return;
      }
      
      // Show loading overlay
      showLoading(true, isDraft ? 'Saving draft...' : 'Saving session...');
      
      // Get form data
      const formData = getFormData();
      formData.isDraft = isDraft;
      
      // Call server-side function to save session
      google.script.run
        .withSuccessHandler(function(result) {
          // Hide loading overlay
          showLoading(false);
          
          if (result.success) {
            showNotification(
              isDraft ? '✅ Draft Saved' : '✅ Session Complete', 
              isDraft ? 'Your one-on-one session was saved as a draft.' : 'Your one-on-one session was successfully completed.',
              'success'
            );
            
            // Close the form after a short delay
            setTimeout(function() {
              google.script.host.close();
            }, 1500);
          } else {
            showNotification(
              '❌ Error', 
              result.message || 'Failed to save the session. Please try again.',
              'error'
            );
          }
        })
        .withFailureHandler(function(error) {
          showLoading(false);
          showNotification('❌ Error', error.message || 'An unexpected error occurred.', 'error');
        })
        .saveOneOnOneSession(formData);
    }
    
    // Send follow-up email
    function sendFollowUpEmail() {
      // Get email data
      const emailData = {
        to: document.getElementById('emailPreviewTo').textContent,
        subject: document.getElementById('emailPreviewSubject').textContent,
        body: document.getElementById('emailPreviewBody').textContent,
        memberId: window.TeamMemberSelector?.getSelected()?.id || ''
      };
      
      // Validate email recipient
      if (!emailData.to || emailData.to === 'team.member@example.com') {
        showNotification('❌ Missing Recipient', 'Please select a team member or enter an email address.', 'error');
        return;
      }
      
      // Show loading overlay
      showLoading(true, 'Sending email...');
      
      // Call server-side function to send email
      google.script.run
        .withSuccessHandler(function(result) {
          // Hide loading overlay
          showLoading(false);
          
          if (result.success) {
            showNotification('✉️ Email Sent', 'Follow-up email was sent successfully.', 'success');
          } else {
            showNotification('❌ Error', result.message || 'Failed to send email. Please try again.', 'error');
          }
        })
        .withFailureHandler(function(error) {
          showLoading(false);
          showNotification('❌ Error', error.message || 'An unexpected error occurred.', 'error');
        })
        .sendOneOnOneFollowUpEmail(emailData);
    }
    
    // Collect all form data
    function getFormData() {
      const form = document.getElementById('oneOnOneForm');
      const formData = {};
      
      // Get all input elements
      const inputs = form.querySelectorAll('input, select, textarea');
      inputs.forEach(input => {
        // Skip elements without a name attribute
        if (!input.name) return;
        
        // Get the value based on input type
        if (input.type === 'checkbox') {
          formData[input.name] = input.checked;
        } else {
          formData[input.name] = input.value;
        }
      });
      
      // Get team member data
      const teamMember = window.TeamMemberSelector?.getSelected();
      if (teamMember && teamMember.id) {
        formData.teamMemberId = teamMember.id;
        formData.teamMemberName = teamMember.name;
      } else {
        // Get manually entered team member data
        formData.teamMemberId = '';
        formData.teamMemberName = `${formData.memberFirstName || ''} ${formData.memberLastName || ''}`.trim();
      }
      
      return formData;
    }
    
    // Validate required fields
    function validateRequiredFields() {
      // Check if team member is selected or entered manually
      const teamMember = window.TeamMemberSelector?.getSelected();
      const memberFirstName = document.getElementById('memberFirstName').value.trim();
      const memberLastName = document.getElementById('memberLastName').value.trim();
      
      if (!teamMember?.id && (!memberFirstName || !memberLastName)) {
        showNotification('❌ Required Fields', 'Please select a team member or enter team member details manually.', 'error');
        return false;
      }
      
      // Check if session date is filled
      const sessionDate = document.getElementById('sessionDate').value;
      if (!sessionDate) {
        showNotification('❌ Required Fields', 'Please enter a session date.', 'error');
        return false;
      }
      
      return true;
    }
    
    // Show/hide loading overlay
    function showLoading(show, message = 'Processing...') {
      const overlay = document.getElementById('loadingOverlay');
      const loadingText = document.getElementById('loadingText');
      
      loadingText.textContent = message;
      
      if (show) {
        overlay.classList.add('show');
      } else {
        overlay.classList.remove('show');
      }
    }
    
    // Show notification
    function showNotification(title, message, type = 'success') {
      const notification = document.getElementById('notification');
      const iconElement = notification.querySelector('.notification-icon i');
      
      // Set notification type
      notification.className = 'notification notification-' + type;
      
      // Set icon
      iconElement.className = type === 'success' ? 'fas fa-check' : 'fas fa-exclamation-circle';
      
      // Set content
      notification.querySelector('.notification-title').textContent = title;
      notification.querySelector('.notification-message').textContent = message;
      
      // Show notification
      notification.classList.add('show');
      
      // Auto hide after 5 seconds
      setTimeout(function() {
        notification.classList.remove('show');
      }, 5000);
    }
  </script>
</body>
</html>





<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>One-on-One Notes</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }
    
    .filters {
      margin-bottom: 24px;
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
    }
    
    .filter-row {
      display: flex;
      gap: 16px;
      margin-bottom: 16px;
    }
    
    .filter-group {
      flex: 1;
    }
    
    .filter-label {
      display: block;
      font-weight: 500;
      margin-bottom: 6px;
      color: var(--text-secondary);
    }
    
    .filter-select, .filter-input {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
    }
    
    .filter-select:focus, .filter-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .filter-search {
      position: relative;
      flex: 2;
    }
    
    .filter-search-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
    }
    
    .filter-search-input {
      width: 100%;
      padding: 10px 12px 10px 36px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
    }
    
    .filter-search-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .filter-actions {
      display: flex;
      justify-content: flex-end;
      gap: 12px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
      text-decoration: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-danger {
      background: var(--danger-color);
      color: white;
    }
    
    .btn-danger:hover {
      background: #dc2626;
    }
    
    .btn-sm {
      padding: 6px 12px;
      font-size: 12px;
    }
    
    .mb-4 {
      margin-bottom: 16px;
    }
    
    .mb-2 {
      margin-bottom: 8px;
    }
    
    .notes-list {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 32px;
    }
    
    .notes-list-header {
      background-color: var(--bg-secondary);
      border-top-left-radius: var(--radius-lg);
      border-top-right-radius: var(--radius-lg);
      padding: 16px 24px;
      font-weight: 600;
      border-bottom: 1px solid var(--border-light);
    }
    
    .note-item {
      border-bottom: 1px solid var(--border-light);
      padding: 16px 24px;
      transition: background-color var(--transition-fast);
    }
    
    .note-item:hover {
      background-color: var(--bg-secondary);
    }
    
    .note-item:last-child {
      border-bottom: none;
      border-bottom-left-radius: var(--radius-lg);
      border-bottom-right-radius: var(--radius-lg);
    }
    
    .note-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
    }
    
    .note-title {
      font-weight: 600;
      font-size: 16px;
      color: var(--text-primary);
    }
    
    .note-date {
      color: var(--text-tertiary);
      font-size: 12px;
    }
    
    .note-content {
      color: var(--text-secondary);
      margin-bottom: 12px;
    }
    
    .note-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .note-meta {
      display: flex;
      align-items: center;
      gap: 16px;
      color: var(--text-tertiary);
      font-size: 12px;
    }
    
    .note-actions {
      display: flex;
      gap: 8px;
    }
    
    .note-tag {
      display: inline-block;
      padding: 4px 10px;
      background-color: var(--info-light);
      color: var(--info-color);
      border-radius: 20px;
      font-size: 12px;
      font-weight: 500;
    }
    
    .note-tag.follow-up {
      background-color: var(--warning-light);
      color: var(--warning-color);
    }
    
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 8px;
      margin-top: 24px;
    }
    
    .pagination-btn {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: white;
      border: 1px solid var(--border-medium);
      color: var(--text-secondary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .pagination-btn:hover {
      background-color: var(--bg-secondary);
    }
    
    .pagination-btn.active {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }
    
    .pagination-btn.disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .empty-state {
      padding: 48px;
      text-align: center;
      color: var(--text-tertiary);
    }
    
    .empty-state-icon {
      font-size: 48px;
      margin-bottom: 16px;
      opacity: 0.6;
    }
    
    .empty-state-text {
      font-size: 16px;
      margin-bottom: 24px;
    }
    
    /* Note Modal */
    #noteModal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(15, 23, 42, 0.5);
      z-index: 100;
      overflow-y: auto;
    }
    
    .modal-content {
      background-color: white;
      border-radius: var(--radius-lg);
      margin: 48px auto;
      width: 90%;
      max-width: 800px;
      box-shadow: var(--shadow-lg);
    }
    
    .modal-header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px;
      border-top-left-radius: var(--radius-lg);
      border-top-right-radius: var(--radius-lg);
      position: relative;
    }
    
    .modal-title {
      font-family: 'Manrope', sans-serif;
      font-size: 20px;
      font-weight: 600;
    }
    
    .modal-close {
      position: absolute;
      top: 24px;
      right: 24px;
      background: none;
      border: none;
      color: white;
      font-size: 24px;
      cursor: pointer;
      padding: 0;
      margin: 0;
      transition: transform var(--transition-fast);
    }
    
    .modal-close:hover {
      transform: rotate(90deg);
    }
    
    .modal-body {
      padding: 24px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    textarea.form-control {
      min-height: 100px;
      resize: vertical;
    }
    
    .modal-footer {
      padding: 16px 24px;
      border-top: 1px solid var(--border-light);
      display: flex;
      justify-content: flex-end;
      gap: 12px;
      border-bottom-left-radius: var(--radius-lg);
      border-bottom-right-radius: var(--radius-lg);
    }
    
    .form-row {
      display: flex;
      gap: 16px;
    }
    
    .form-row .form-group {
      flex: 1;
    }
    
    .form-check {
      display: flex;
      align-items: center;
      margin-top: 8px;
      cursor: pointer;
    }
    
    .form-check-input {
      margin-right: 8px;
    }
    
    /* Loading State */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      position: relative;
      animation: rotate 1s linear infinite;
    }
    
    .loading-spinner::before, .loading-spinner::after {
      content: "";
      position: absolute;
      border-radius: 50%;
    }
    
    .loading-spinner::before {
      width: 48px;
      height: 48px;
      border: 5px solid rgba(85, 64, 175, 0.2);
    }
    
    .loading-spinner::after {
      width: 48px;
      height: 48px;
      border: 5px solid transparent;
      border-top-color: var(--primary-color);
      animation: rotate 0.5s linear infinite;
    }
    
    @keyframes rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Toast Notifications */
    .toast-container {
      position: fixed;
      bottom: 24px;
      right: 24px;
      z-index: 1000;
    }
    
    .toast {
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      padding: 16px;
      margin-top: 12px;
      display: flex;
      align-items: center;
      gap: 12px;
      min-width: 300px;
      transform: translateX(120%);
      transition: transform 0.3s ease;
    }
    
    .toast.show {
      transform: translateX(0);
    }
    
    .toast-icon {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background-color: var(--success-color);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }
    
    .toast-icon.error {
      background-color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 2px;
    }
    
    .toast-message {
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    .toast-close {
      background: none;
      border: none;
      color: var(--text-tertiary);
      cursor: pointer;
      padding: 4px;
    }
    
    /* Dropdown */
    .dropdown {
      position: relative;
    }
    
    .dropdown-toggle {
      cursor: pointer;
    }
    
    .dropdown-menu {
      position: absolute;
      top: 100%;
      right: 0;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-md);
      min-width: 180px;
      z-index: 10;
      display: none;
    }
    
    .dropdown-menu.show {
      display: block;
    }
    
    .dropdown-item {
      padding: 10px 16px;
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--text-primary);
      text-decoration: none;
      cursor: pointer;
    }
    
    .dropdown-item:hover {
      background-color: var(--bg-secondary);
    }
    
    .dropdown-divider {
      height: 1px;
      background-color: var(--border-light);
      margin: 4px 0;
    }
    
    /* Delete confirmation modal */
    #deleteConfirmationModal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(15, 23, 42, 0.5);
      z-index: 100;
      align-items: center;
      justify-content: center;
    }
    
    .delete-modal-content {
      background-color: white;
      border-radius: var(--radius-lg);
      padding: 24px;
      width: 90%;
      max-width: 400px;
      box-shadow: var(--shadow-lg);
    }
    
    .delete-modal-icon {
      width: 48px;
      height: 48px;
      background-color: var(--danger-light);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 16px;
    }
    
    .delete-modal-icon i {
      font-size: 24px;
      color: var(--danger-color);
    }
    
    .delete-modal-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 8px;
      text-align: center;
    }
    
    .delete-modal-message {
      color: var(--text-secondary);
      margin-bottom: 24px;
      text-align: center;
    }
    
    .delete-modal-actions {
      display: flex;
      justify-content: center;
      gap: 16px;
    }
    
    /* Export Modal */
    #exportModal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(15, 23, 42, 0.5);
      z-index: 100;
      align-items: center;
      justify-content: center;
    }
    
    .export-modal-content {
      background-color: white;
      border-radius: var(--radius-lg);
      padding: 24px;
      width: 90%;
      max-width: 500px;
      box-shadow: var(--shadow-lg);
    }
    
    .export-modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16px;
    }
    
    .export-modal-title {
      font-size: 18px;
      font-weight: 600;
    }
    
    .export-modal-close {
      background: none;
      border: none;
      color: var(--text-tertiary);
      font-size: 20px;
      cursor: pointer;
    }
    
    .export-format {
      margin-bottom: 16px;
    }
    
    .export-format-title {
      font-weight: 500;
      margin-bottom: 8px;
    }
    
    .format-options {
      display: flex;
      gap: 16px;
    }
    
    .format-option {
      flex: 1;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      padding: 16px;
      cursor: pointer;
      text-align: center;
      transition: all var(--transition-fast);
    }
    
    .format-option:hover {
      background-color: var(--bg-secondary);
    }
    
    .format-option.selected {
      border-color: var(--primary-color);
      background-color: var(--primary-light);
      color: white;
    }
    
    .format-icon {
      font-size: 24px;
      margin-bottom: 8px;
    }
    
    .format-label {
      font-weight: 500;
    }
    
    .export-actions {
      display: flex;
      justify-content: flex-end;
      gap: 12px;
      margin-top: 24px;
    }
    
    @media (max-width: 768px) {
      .content {
        padding: 16px;
      }
      
      .filter-row {
        flex-direction: column;
      }
      
      .form-row {
        flex-direction: column;
      }
      
      .modal-content {
        margin: 24px auto;
        width: 95%;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-comments"></i> One-on-One Notes
          </h1>
          <div class="header-subtitle">
            Track and manage team member one-on-ones
          </div>
        </div>
        
        <div class="header-actions">
          <button class="btn btn-secondary" id="exportBtn">
            <i class="fas fa-file-export"></i> Export
          </button>
          <button class="btn btn-primary" id="newNoteBtn">
            <i class="fas fa-plus"></i> New One-on-One
          </button>
        </div>
      </div>
    </div>
    
    <div class="content">
      <!-- Filters -->
      <div class="filters">
        <div class="filter-row">
          <div class="filter-group">
            <label class="filter-label">Team Member</label>
            <select class="filter-select" id="teamMemberFilter">
              <option value="">All Team Members</option>
              <!-- Team members will be populated dynamically -->
            </select>
          </div>
          
          <div class="filter-group">
            <label class="filter-label">Date Range</label>
            <select class="filter-select" id="dateRangeFilter">
              <option value="all">All Time</option>
              <option value="last7" selected>Last 7 Days</option>
              <option value="last30">Last 30 Days</option>
              <option value="last90">Last 90 Days</option>
              <option value="custom">Custom Range</option>
            </select>
          </div>
          
          <div class="filter-search">
            <label class="filter-label">Search</label>
            <div class="search-container">
              <i class="fas fa-search filter-search-icon"></i>
              <input type="text" class="filter-search-input" id="searchInput" placeholder="Search notes...">
            </div>
          </div>
        </div>
        
        <div class="filter-row" id="customDateRow" style="display: none;">
          <div class="filter-group">
            <label class="filter-label">From Date</label>
            <input type="date" class="filter-input" id="startDateInput">
          </div>
          
          <div class="filter-group">
            <label class="filter-label">To Date</label>
            <input type="date" class="filter-input" id="endDateInput">
          </div>
          
          <div class="filter-group" style="flex: 2;">
            <!-- Spacer -->
          </div>
        </div>
        
        <div class="filter-actions">
          <button class="btn btn-secondary" id="resetFiltersBtn">
            <i class="fas fa-undo"></i> Reset Filters
          </button>
          <button class="btn btn-primary" id="applyFiltersBtn">
            <i class="fas fa-filter"></i> Apply Filters
          </button>
        </div>
      </div>
      
      <!-- Notes List -->
      <div class="notes-list" id="notesList">
        <div class="notes-list-header">Recent One-on-One Notes</div>
        
        <!-- Notes will be populated dynamically -->
        <div class="empty-state">
          <div class="empty-state-icon">
            <i class="fas fa-clipboard-list"></i>
          </div>
          <div class="empty-state-text">No one-on-one notes found</div>
          <button class="btn btn-primary" id="emptyStateBtn">
            <i class="fas fa-plus"></i> Create First One-on-One
          </button>
        </div>
      </div>
      
      <!-- Pagination -->
      <div class="pagination" id="pagination">
        <button class="pagination-btn" id="prevPageBtn">
          <i class="fas fa-chevron-left"></i>
        </button>
        <!-- Page buttons will be added dynamically -->
        <button class="pagination-btn" id="nextPageBtn">
          <i class="fas fa-chevron-right"></i>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Note Modal -->
  <div id="noteModal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title" id="modalTitle">New One-on-One Session</h2>
        <button class="modal-close" id="closeModalBtn">&times;</button>
      </div>
      <div class="modal-body">
        <form id="noteForm">
          <input type="hidden" id="sessionId">
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label" for="teamMember">Team Member</label>
              <select class="form-control" id="teamMember" required>
                <option value="">Select Team Member</option>
                <!-- Team members will be populated dynamically -->
              </select>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="sessionDate">Session Date</label>
              <input type="date" class="form-control" id="sessionDate" required>
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label" for="preparationNotes">Preparation Notes</label>
            <textarea class="form-control" id="preparationNotes" placeholder="Notes to prepare for the session..."></textarea>
          </div>
          
          <div class="form-group">
            <label class="form-label" for="discussionTopics">Discussion Topics</label>
            <textarea class="form-control" id="discussionTopics" placeholder="Topics discussed during the session..." required></textarea>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label" for="performanceHighlights">Performance Highlights</label>
              <textarea class="form-control" id="performanceHighlights" placeholder="Areas where the team member is doing well..."></textarea>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="areasForDevelopment">Areas for Development</label>
              <textarea class="form-control" id="areasForDevelopment" placeholder="Areas where the team member can improve..."></textarea>
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label" for="actionItems">Action Items</label>
            <textarea class="form-control" id="actionItems" placeholder="Actions to take following the session..."></textarea>
            <label class="form-check">
              <input type="checkbox" class="form-check-input" id="createActionItems">
              Create these as tracked action items
            </label>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label" for="followUpDate">Follow-up Date</label>
              <input type="date" class="form-control" id="followUpDate">
            </div>
            
            <div class="form-group">
              <label class="form-label" for="overallNotes">Overall Notes</label>
              <textarea class="form-control" id="overallNotes" placeholder="Additional notes or observations..."></textarea>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" id="cancelBtn">Cancel</button>
        <button class="btn btn-primary" id="saveNoteBtn">Save Note</button>
      </div>
    </div>
  </div>
  
  <!-- Delete Confirmation Modal -->
  <div id="deleteConfirmationModal">
    <div class="delete-modal-content">
      <div class="delete-modal-icon">
        <i class="fas fa-exclamation-triangle"></i>
      </div>
      <h3 class="delete-modal-title">Delete One-on-One Note?</h3>
      <p class="delete-modal-message">
        Are you sure you want to delete this one-on-one note? This action cannot be undone.
      </p>
      <div class="delete-modal-actions">
        <button class="btn btn-secondary" id="cancelDeleteBtn">Cancel</button>
        <button class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
      </div>
    </div>
  </div>
  
  <!-- Export Modal -->
  <div id="exportModal">
    <div class="export-modal-content">
      <div class="export-modal-header">
        <h3 class="export-modal-title">Export One-on-One Notes</h3>
        <button class="export-modal-close" id="closeExportModalBtn">&times;</button>
      </div>
      <div class="export-format">
        <div class="export-format-title">Select Format</div>
        <div class="format-options">
          <div class="format-option selected" data-format="pdf">
            <div class="format-icon"><i class="fas fa-file-pdf"></i></div>
            <div class="format-label">PDF</div>
          </div>
          <div class="format-option" data-format="spreadsheet">
            <div class="format-icon"><i class="fas fa-file-excel"></i></div>
            <div class="format-label">Spreadsheet</div>
          </div>
        </div>
      </div>
      <div class="form-group">
        <label class="form-label">Export Options</label>
        <div class="form-check">
          <input type="checkbox" class="form-check-input" id="includePreparationNotes" checked>
          <label for="includePreparationNotes">Include Preparation Notes</label>
        </div>
        <div class="form-check">
          <input type="checkbox" class="form-check-input" id="applyCurrentFilters" checked>
          <label for="applyCurrentFilters">Apply Current Filters</label>
        </div>
      </div>
      <div class="export-actions">
        <button class="btn btn-secondary" id="cancelExportBtn">Cancel</button>
        <button class="btn btn-primary" id="confirmExportBtn">
          <i class="fas fa-file-export"></i> Export
        </button>
      </div>
    </div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container" id="toastContainer"></div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <script>
    // Global variables
    let teamMembers = [];
    let notes = [];
    let currentPage = 1;
    let totalPages = 1;
    let itemsPerPage = 10;
    let currentFilters = {
      teamMemberId: '',
      startDate: '',
      endDate: '',
      searchTerm: ''
    };
    let selectedNoteForDeletion = null;
    let selectedExportFormat = 'pdf';
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Load team members
      loadTeamMembers();
      
      // Set default date range filter (last 7 days)
      setDefaultDateRange();
      
      // Load initial notes
      loadNotes();
      
      // Set up event handlers
      setupEventHandlers();
    });
    
    // Load team members for dropdowns
    function loadTeamMembers() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            teamMembers = result.data;
            
            // Populate team member filter dropdown
            const teamMemberFilter = document.getElementById('teamMemberFilter');
            const teamMemberSelect = document.getElementById('teamMembers');
            
            // Clear existing options except the first one
            while (teamMemberFilter.options.length > 1) {
              teamMemberFilter.remove(1);
            }
            
            while (teamMemberSelect.options.length > 1) {
              teamMemberSelect.remove(1);
            }
            
            // Add team members to dropdowns
            teamMembers.forEach(member => {
              // For filter dropdown
              const filterOption = document.createElement('option');
              filterOption.value = member['Team Member ID'];
              filterOption.textContent = `${member['First Name']} ${member['Last Name']}`;
              teamMemberFilter.appendChild(filterOption);
              
              // For form dropdown
              const formOption = document.createElement('option');
              formOption.value = member['Team Member ID'];
              formOption.textContent = `${member['First Name']} ${member['Last Name']}`;
              formOption.dataset.firstName = member['First Name'];
              formOption.dataset.lastName = member['Last Name'];
              teamMemberSelect.appendChild(formOption);
            });
          } else {
            showToast('Error', result.message, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error', 'Failed to load team members: ' + error, 'error');
        })
        .getAllTeamMembers();
    }
    
    // Set default date range for "Last 7 days"
    function setDefaultDateRange() {
      const today = new Date();
      const sevenDaysAgo = new Date(today);
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
      
      currentFilters.startDate = formatDate(sevenDaysAgo);
      currentFilters.endDate = formatDate(today);
      
      document.getElementById('startDateInput').value = currentFilters.startDate;
      document.getElementById('endDateInput').value = currentFilters.endDate;
    }
    
    // Format date as YYYY-MM-DD
    function formatDate(date) {
      return date.toISOString().split('T')[0];
    }
    
    // Load notes with current filters
    function loadNotes() {
      showLoading();
      
      const filters = {
        ...currentFilters,
        page: currentPage,
        itemsPerPage: itemsPerPage
      };
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            notes = result.data.notes;
            totalPages = Math.ceil(result.data.total / itemsPerPage);
            
            renderNotes();
            renderPagination();
          } else {
            showToast('Error', result.message, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error', 'Failed to load notes: ' + error, 'error');
        })
        .getAllOneOnOneNotes(filters);
    }
    
    // Render notes to the UI
    function renderNotes() {
      const notesListContainer = document.getElementById('notesList');
      
      // Keep the header
      notesListContainer.innerHTML = '<div class="notes-list-header">Recent One-on-One Notes</div>';
      
      if (notes.length === 0) {
        // Show empty state
        const emptyState = document.createElement('div');
        emptyState.className = 'empty-state';
        emptyState.innerHTML = `
          <div class="empty-state-icon">
            <i class="fas fa-clipboard-list"></i>
          </div>
          <div class="empty-state-text">No one-on-one notes found</div>
          <button class="btn btn-primary" id="emptyStateBtn">
            <i class="fas fa-plus"></i> Create First One-on-One
          </button>
        `;
        notesListContainer.appendChild(emptyState);
        
        // Add event listener to the empty state button
        document.getElementById('emptyStateBtn').addEventListener('click', openNewNoteModal);
      } else {
        // Add each note
        notes.forEach(note => {
          const noteItem = document.createElement('div');
          noteItem.className = 'note-item';
          noteItem.dataset.id = note.sessionId;
          
          const sessionDate = new Date(note.sessionDate).toLocaleDateString();
          const followUpDate = note.followUpDate ? new Date(note.followUpDate).toLocaleDateString() : null;
          
          noteItem.innerHTML = `
            <div class="note-header">
              <div class="note-title">${note.teamMemberName}</div>
              <div class="note-date">${sessionDate}</div>
            </div>
            <div class="note-content">
              ${note.discussionTopics ? note.discussionTopics.substring(0, 150) + (note.discussionTopics.length > 150 ? '...' : '') : 'No discussion topics recorded'}
            </div>
            <div class="note-footer">
              <div class="note-meta">
                ${note.actionItems ? '<span><i class="fas fa-tasks"></i> Has action items</span>' : ''}
                ${followUpDate ? `<span class="note-tag follow-up"><i class="fas fa-calendar-check"></i> Follow-up: ${followUpDate}</span>` : ''}
              </div>
              <div class="note-actions">
                <button class="btn btn-sm btn-secondary view-note-btn" data-id="${note.sessionId}">
                  <i class="fas fa-eye"></i> View
                </button>
                <div class="dropdown">
                  <button class="btn btn-sm btn-secondary dropdown-toggle">
                    <i class="fas fa-ellipsis-v"></i>
                  </button>
                  <div class="dropdown-menu">
                    <div class="dropdown-item edit-note-btn" data-id="${note.sessionId}">
                      <i class="fas fa-edit"></i> Edit
                    </div>
                    <div class="dropdown-divider"></div>
                    <div class="dropdown-item delete-note-btn" data-id="${note.sessionId}">
                      <i class="fas fa-trash"></i> Delete
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `;
          
          notesListContainer.appendChild(noteItem);
        });
        
        // Add event listeners to note items
        setupNoteItemEventListeners();
      }
    }
    
    // Render pagination controls
    function renderPagination() {
      const paginationContainer = document.getElementById('pagination');
      
      // Clear existing buttons except prev and next
      const prevBtn = document.getElementById('prevPageBtn');
      const nextBtn = document.getElementById('nextPageBtn');
      
      while (paginationContainer.childElementCount > 2) {
        paginationContainer.removeChild(paginationContainer.children[1]);
      }
      
      // Update prev/next button states
      prevBtn.classList.toggle('disabled', currentPage === 1);
      nextBtn.classList.toggle('disabled', currentPage === totalPages || totalPages === 0);
      
      // Hide pagination if there's only one page or no pages
      paginationContainer.style.display = totalPages <= 1 ? 'none' : 'flex';
      
      // Don't add page buttons if there are no pages
      if (totalPages === 0) return;
      
      // Determine which page buttons to show
      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(totalPages, startPage + 4);
      
      // Adjust start if we're near the end
      if (endPage - startPage < 4) {
        startPage = Math.max(1, endPage - 4);
      }
      
      // Create page buttons
      for (let i = startPage; i <= endPage; i++) {
        const pageBtn = document.createElement('button');
        pageBtn.className = 'pagination-btn' + (i === currentPage ? ' active' : '');
        pageBtn.textContent = i;
        pageBtn.dataset.page = i;
        
        // Insert before the next button
        paginationContainer.insertBefore(pageBtn, nextBtn);
        
        // Add event listener
        pageBtn.addEventListener('click', function() {
          if (currentPage !== i) {
            currentPage = i;
            loadNotes();
          }
        });
      }
    }
    
    // Open the new note modal
    function openNewNoteModal() {
      const modal = document.getElementById('noteModal');
      const form = document.getElementById('noteForm');
      const modalTitle = document.getElementById('modalTitle');
      
      // Set modal title
      modalTitle.textContent = 'New One-on-One Session';
      
      // Reset form
      form.reset();
      document.getElementById('sessionId').value = '';
      
      // Default to current date
      document.getElementById('sessionDate').value = formatDate(new Date());
      
      // Show the modal
      modal.style.display = 'block';
      
      // Focus on team member dropdown
      document.getElementById('teamMember').focus();
    }
    
    // Open the edit note modal
    function openEditNoteModal(sessionId) {
      const modal = document.getElementById('noteModal');
      const form = document.getElementById('noteForm');
      const modalTitle = document.getElementById('modalTitle');
      
      // Set modal title
      modalTitle.textContent = 'Edit One-on-One Session';
      
      // Reset form
      form.reset();
      
      // Show loading
      showLoading();
      
      // Fetch the note data
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            const note = result.data;
            
            // Populate form fields
            document.getElementById('sessionId').value = note.sessionId;
            document.getElementById('teamMember').value = note.teamMemberId;
            document.getElementById('sessionDate').value = formatDate(new Date(note.sessionDate));
            document.getElementById('preparationNotes').value = note.preparationNotes || '';
            document.getElementById('discussionTopics').value = note.discussionTopics || '';
            document.getElementById('performanceHighlights').value = note.performanceHighlights || '';
            document.getElementById('areasForDevelopment').value = note.areasForDevelopment || '';
            document.getElementById('actionItems').value = note.actionItems || '';
            document.getElementById('followUpDate').value = note.followUpDate ? formatDate(new Date(note.followUpDate)) : '';
            document.getElementById('overallNotes').value = note.overallNotes || '';
            
            // Show the modal
            modal.style.display = 'block';
          } else {
            showToast('Error', result.message, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error', 'Failed to load note details: ' + error, 'error');
        })
        .getOneOnOneNoteById(sessionId);
    }
    
    // Save the note
    function saveNote() {
      const form = document.getElementById('noteForm');
      
      // Validate form
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }
      
      // Get form data
      const sessionId = document.getElementById('sessionId').value;
      const teamMemberSelect = document.getElementById('teamMember');
      const teamMemberId = teamMemberSelect.value;
      const teamMemberName = teamMemberSelect.options[teamMemberSelect.selectedIndex].text;
      
      const noteData = {
        sessionId: sessionId || undefined,
        teamMemberId: teamMemberId,
        teamMemberName: teamMemberName,
        sessionDate: document.getElementById('sessionDate').value,
        preparationNotes: document.getElementById('preparationNotes').value,
        discussionTopics: document.getElementById('discussionTopics').value,
        performanceHighlights: document.getElementById('performanceHighlights').value,
        areasForDevelopment: document.getElementById('areasForDevelopment').value,
        actionItems: document.getElementById('actionItems').value,
        createActionItems: document.getElementById('createActionItems').checked,
        followUpDate: document.getElementById('followUpDate').value || undefined,
        overallNotes: document.getElementById('overallNotes').value
      };
      
      // Show loading
      showLoading();
      
      // Save the note
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            // Close modal
            document.getElementById('noteModal').style.display = 'none';
            
            // Show success message
            showToast('Success', 'One-on-One note saved successfully', 'success');
            
            // Reload notes
            loadNotes();
          } else {
            showToast('Error', result.message, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error', 'Failed to save note: ' + error, 'error');
        })
        .saveOneOnOneNote(noteData);
    }
    
    // Delete a note
    function deleteNote(sessionId) {
      // Show loading
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            // Show success message
            showToast('Success', 'One-on-One note deleted successfully', 'success');
            
            // Reload notes
            loadNotes();
          } else {
            showToast('Error', result.message, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error', 'Failed to delete note: ' + error, 'error');
        })
        .deleteOneOnOneNote(sessionId);
    }
    
    // Export notes
    function exportNotes() {
      // Get export options
      const format = selectedExportFormat;
      const includePreparationNotes = document.getElementById('includePreparationNotes').checked;
      const applyCurrentFilters = document.getElementById('applyCurrentFilters').checked;
      
      const exportOptions = {
        format: format,
        includePreparationNotes: includePreparationNotes,
        filters: applyCurrentFilters ? currentFilters : {}
      };
      
      // Show loading
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            // Close export modal
            document.getElementById('exportModal').style.display = 'none';
            
            // Open the exported file in a new tab
            window.open(result.data.fileUrl, '_blank');
            
            // Show success message
            showToast('Success', 'One-on-One notes exported successfully', 'success');
          } else {
            showToast('Error', result.message, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error', 'Failed to export notes: ' + error, 'error');
        })
        .exportOneOnOneNotes(exportOptions);
    }
    
    // Apply filters
    function applyFilters() {
      const teamMemberId = document.getElementById('teamMemberFilter').value;
      const dateRange = document.getElementById('dateRangeFilter').value;
      const searchTerm = document.getElementById('searchInput').value.trim();
      
      currentFilters.teamMemberId = teamMemberId;
      currentFilters.searchTerm = searchTerm;
      
      if (dateRange === 'custom') {
        currentFilters.startDate = document.getElementById('startDateInput').value;
        currentFilters.endDate = document.getElementById('endDateInput').value;
      } else {
        // Set date range based on selection
        const today = new Date();
        let startDate = new Date(today);
        
        switch (dateRange) {
          case 'last7':
            startDate.setDate(today.getDate() - 7);
            break;
          case 'last30':
            startDate.setDate(today.getDate() - 30);
            break;
          case 'last90':
            startDate.setDate(today.getDate() - 90);
            break;
          case 'all':
            startDate = null;
            break;
        }
        
        currentFilters.startDate = startDate ? formatDate(startDate) : '';
        currentFilters.endDate = formatDate(today);
      }
      
      // Reset to first page
      currentPage = 1;
      
      // Load notes with new filters
      loadNotes();
    }
    
    // Reset filters
    function resetFilters() {
      document.getElementById('teamMemberFilter').value = '';
      document.getElementById('dateRangeFilter').value = 'last7';
      document.getElementById('searchInput').value = '';
      document.getElementById('customDateRow').style.display = 'none';
      
      // Reset to default date range
      setDefaultDateRange();
      
      // Reset current filters
      currentFilters = {
        teamMemberId: '',
        startDate: currentFilters.startDate, // Keep the default date range
        endDate: currentFilters.endDate,
        searchTerm: ''
      };
      
      // Reset to first page
      currentPage = 1;
      
      // Load notes with reset filters
      loadNotes();
    }
    
    // Set up event handlers
    function setupEventHandlers() {
      // New note button
      document.getElementById('newNoteBtn').addEventListener('click', openNewNoteModal);
      document.getElementById('emptyStateBtn')?.addEventListener('click', openNewNoteModal);
      
      // Modal close buttons
      document.getElementById('closeModalBtn').addEventListener('click', function() {
        document.getElementById('noteModal').style.display = 'none';
      });
      
      document.getElementById('cancelBtn').addEventListener('click', function() {
        document.getElementById('noteModal').style.display = 'none';
      });
      
      // Save note button
      document.getElementById('saveNoteBtn').addEventListener('click', saveNote);
      
      // Date range filter change
      document.getElementById('dateRangeFilter').addEventListener('change', function() {
        const customDateRow = document.getElementById('customDateRow');
        customDateRow.style.display = this.value === 'custom' ? 'flex' : 'none';
      });
      
      // Filter buttons
      document.getElementById('applyFiltersBtn').addEventListener('click', applyFilters);
      document.getElementById('resetFiltersBtn').addEventListener('click', resetFilters);
      
      // Pagination buttons
      document.getElementById('prevPageBtn').addEventListener('click', function() {
        if (currentPage > 1) {
          currentPage--;
          loadNotes();
        }
      });
      
      document.getElementById('nextPageBtn').addEventListener('click', function() {
        if (currentPage < totalPages) {
          currentPage++;
          loadNotes();
        }
      });
      
      // Export button
      document.getElementById('exportBtn').addEventListener('click', function() {
        document.getElementById('exportModal').style.display = 'flex';
      });
      
      // Export modal close button
      document.getElementById('closeExportModalBtn').addEventListener('click', function() {
        document.getElementById('exportModal').style.display = 'none';
      });
      
      document.getElementById('cancelExportBtn').addEventListener('click', function() {
        document.getElementById('exportModal').style.display = 'none';
      });
      
      // Export format options
      const formatOptions = document.querySelectorAll('.format-option');
      formatOptions.forEach(option => {
        option.addEventListener('click', function() {
          formatOptions.forEach(opt => opt.classList.remove('selected'));
          this.classList.add('selected');
          selectedExportFormat = this.dataset.format;
        });
      });
      
      // Confirm export button
      document.getElementById('confirmExportBtn').addEventListener('click', exportNotes);
      
      // Delete confirmation modal
      document.getElementById('cancelDeleteBtn').addEventListener('click', function() {
        document.getElementById('deleteConfirmationModal').style.display = 'none';
      });
      
      document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
        if (selectedNoteForDeletion) {
          document.getElementById('deleteConfirmationModal').style.display = 'none';
          deleteNote(selectedNoteForDeletion);
          selectedNoteForDeletion = null;
        }
      });
      
      // Set up dropdowns to close when clicking outside
      document.addEventListener('click', function(event) {
        const dropdowns = document.querySelectorAll('.dropdown-menu.show');
        dropdowns.forEach(dropdown => {
          if (!dropdown.parentElement.contains(event.target)) {
            dropdown.classList.remove('show');
          }
        });
      });
    }
    
    // Set up event listeners for note items (needs to be called after notes are rendered)
    function setupNoteItemEventListeners() {
      // View buttons
      document.querySelectorAll('.view-note-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const sessionId = this.dataset.id;
          openEditNoteModal(sessionId);
        });
      });
      
      // Edit buttons
      document.querySelectorAll('.edit-note-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const sessionId = this.dataset.id;
          openEditNoteModal(sessionId);
        });
      });
      
      // Delete buttons
      document.querySelectorAll('.delete-note-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const sessionId = this.dataset.id;
          selectedNoteForDeletion = sessionId;
          document.getElementById('deleteConfirmationModal').style.display = 'flex';
        });
      });
      
      // Dropdown toggles
      document.querySelectorAll('.dropdown-toggle').forEach(toggle => {
        toggle.addEventListener('click', function(event) {
          event.stopPropagation();
          const dropdown = this.nextElementSibling;
          dropdown.classList.toggle('show');
        });
      });
    }
    
    // Show loading indicator
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading indicator
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toastContainer = document.getElementById('toastContainer');
      
      const toast = document.createElement('div');
      toast.className = 'toast';
      
      toast.innerHTML = `
        <div class="toast-icon ${type === 'error' ? 'error' : ''}">
          <i class="fas ${type === 'error' ? 'fa-times' : 'fa-check'}"></i>
        </div>
        <div class="toast-content">
          <div class="toast-title">${title}</div>
          <div class="toast-message">${message}</div>
        </div>
        <button class="toast-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      toastContainer.appendChild(toast);
      
      // Show toast with animation
      setTimeout(() => {
        toast.classList.add('show');
      }, 10);
      
      // Add close button event
      toast.querySelector('.toast-close').addEventListener('click', () => {
        toast.classList.remove('show');
        setTimeout(() => {
          toastContainer.removeChild(toast);
        }, 300);
      });
      
      // Auto close after 5 seconds
      setTimeout(() => {
        if (toast.parentNode === toastContainer) {
          toast.classList.remove('show');
          setTimeout(() => {
            if (toast.parentNode === toastContainer) {
              toastContainer.removeChild(toast);
            }
          }, 300);
        }
      }, 5000);
    }
    </script>
</body>
</html>





<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>One-on-One Dashboard</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --text-light: #94a3b8;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      --shadow-xl: 0 20px 25px -5px rgba(15, 23, 42, 0.1), 0 8px 10px -6px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      --radius-xl: 24px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      overflow-x: hidden;
    }
    
    .dashboard-container {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      padding: 24px;
    }
    
    .dashboard-header {
      margin-bottom: 24px;
    }
    
    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .title-icon {
      width: 56px;
      height: 56px;
      border-radius: var(--radius-xl);
      background: var(--primary-gradient);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 24px;
      box-shadow: 0 10px 20px rgba(85, 64, 175, 0.3);
    }
    
    .title-text {
      display: flex;
      flex-direction: column;
    }
    
    .title-main {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: 4px;
    }
    
    .title-sub {
      font-size: 14px;
      color: var(--text-tertiary);
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .date-range-picker {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 8px 16px;
      background-color: white;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
    }
    
    .date-range-label {
      color: var(--text-tertiary);
      font-weight: 500;
    }
    
    .date-range-select {
      border: none;
      background: transparent;
      color: var(--primary-color);
      font-weight: 500;
      font-family: 'Inter', sans-serif;
      cursor: pointer;
    }
    
    .date-range-select:focus {
      outline: none;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-outline {
      background-color: white;
      border: 1px solid var(--border-medium);
      color: var(--text-secondary);
    }
    
    .btn-outline:hover {
      border-color: var(--primary-color);
      color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      gap: 24px;
      margin-bottom: 24px;
    }
    
    .col-span-3 {
      grid-column: span 3;
    }
    
    .col-span-4 {
      grid-column: span 4;
    }
    
    .col-span-5 {
      grid-column: span 5;
    }
    
    .col-span-6 {
      grid-column: span 6;
    }
    
    .col-span-7 {
      grid-column: span 7;
    }
    
    .col-span-8 {
      grid-column: span 8;
    }
    
    .col-span-9 {
      grid-column: span 9;
    }
    
    .col-span-12 {
      grid-column: span 12;
    }
    
    .dashboard-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      transition: transform var(--transition-normal), box-shadow var(--transition-normal);
      overflow: hidden;
      height: 100%;
      display: flex;
      flex-direction: column;
      position: relative;
    }
    
    .dashboard-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-title {
      font-size: 16px;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .card-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      border-radius: var(--radius-md);
      background: var(--primary-gradient);
      color: white;
      font-size: 16px;
    }
    
    .card-actions {
      display: flex;
      gap: 8px;
    }
    
    .card-action-btn {
      width: 32px;
      height: 32px;
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-light);
      background-color: white;
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .card-action-btn:hover {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }
    
    .card-body {
      padding: 24px;
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    
    .card-footer {
      padding: 16px 24px;
      border-top: 1px solid var(--border-light);
      background-color: var(--bg-secondary);
    }
    
    /* Stats cards */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 20px;
    }
    
    .stat-card {
      background-color: white;
      border-radius: var(--radius-lg);
      padding: 20px;
      box-shadow: var(--shadow-md);
      transition: transform var(--transition-normal), box-shadow var(--transition-normal);
      display: flex;
      flex-direction: column;
      gap: 16px;
    }
    
    .stat-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }
    
    .stat-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .stat-title {
      font-weight: 500;
      color: var(--text-tertiary);
      font-size: 13px;
    }
    
    .stat-icon {
      width: 36px;
      height: 36px;
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 18px;
    }
    
    .primary-icon {
      background-color: var(--primary-light);
      color: white;
    }
    
    .success-icon {
      background-color: var(--success-color);
      color: white;
    }
    
    .warning-icon {
      background-color: var(--warning-color);
      color: white;
    }
    
    .info-icon {
      background-color: var(--info-color);
      color: white;
    }
    
    .stat-value {
      font-size: 28px;
      font-weight: 700;
      color: var(--text-primary);
    }
    
    .stat-trend {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 13px;
    }
    
    .trend-positive {
      color: var(--success-color);
    }
    
    .trend-negative {
      color: var(--danger-color);
    }
    
    /* Chart container */
    .chart-container {
      flex: 1;
      min-height: 250px;
      position: relative;
    }
    
    /* Calendar view */
    .calendar-view {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 1px;
    }
    
    .calendar-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16px;
    }
    
    .calendar-month {
      font-size: 18px;
      font-weight: 600;
    }
    
    .calendar-nav {
      display: flex;
      gap: 8px;
    }
    
    .calendar-nav-btn {
      width: 32px;
      height: 32px;
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-light);
      background-color: white;
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .calendar-nav-btn:hover {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }
    
    .calendar-weekdays {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 1px;
      margin-bottom: 8px;
    }
    
    .calendar-weekday {
      padding: 8px 4px;
      text-align: center;
      font-weight: 600;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .calendar-day {
      aspect-ratio: 1;
      border-radius: var(--radius-md);
      padding: 4px;
      transition: all var(--transition-fast);
      display: flex;
      flex-direction: column;
      gap: 2px;
    }
    
    .calendar-day:hover {
      background-color: var(--bg-secondary);
    }
    
    .calendar-date {
      font-size: 14px;
      font-weight: 500;
      text-align: center;
      padding: 4px;
    }
    
    .calendar-date.today {
      background-color: var(--primary-color);
      color: white;
      border-radius: var(--radius-md);
    }
    
    .calendar-date.other-month {
      opacity: 0.5;
    }
    
    .calendar-events {
      display: flex;
      flex-direction: column;
      gap: 2px;
      overflow: hidden;
    }
    
    .calendar-event {
      display: block;
      font-size: 9px;
      padding: 2px 4px;
      border-radius: 2px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      cursor: pointer;
    }
    
    .calendar-event.event-primary {
      background-color: var(--primary-light);
      color: white;
    }
    
    .calendar-event.event-success {
      background-color: var(--success-color);
      color: white;
    }
    
    .calendar-event.event-warning {
      background-color: var(--warning-color);
      color: white;
    }
    
    .calendar-event.event-info {
      background-color: var(--info-color);
      color: white;
    }
    
    /* Team member sessions */
    .team-members-list {
      display: flex;
      flex-direction: column;
      gap: 12px;
      max-height: 400px;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: var(--primary-light) var(--bg-secondary);
    }
    
    .team-members-list::-webkit-scrollbar {
      width: 6px;
    }
    
    .team-members-list::-webkit-scrollbar-track {
      background: var(--bg-secondary);
    }
    
    .team-members-list::-webkit-scrollbar-thumb {
      background-color: var(--primary-light);
      border-radius: 20px;
    }
    
    .member-card {
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      padding: 12px;
      display: flex;
      align-items: center;
      gap: 12px;
      transition: all var(--transition-fast);
      cursor: pointer;
    }
    
    .member-card:hover {
      background-color: var(--bg-tertiary);
      transform: translateX(4px);
    }
    
    .member-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--primary-gradient);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      flex-shrink: 0;
    }
    
    .member-info {
      flex: 1;
      display: flex;
      flex-direction: column;
      min-width: 0;
    }
    
    .member-name {
      font-weight: 600;
      font-size: 14px;
      color: var(--text-primary);
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .member-status {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .member-metrics {
      display: flex;
      gap: 12px;
    }
    
    .member-metric {
      display: flex;
      flex-direction: column;
      align-items: center;
      min-width: 50px;
    }
    
    .metric-value {
      font-weight: 600;
      font-size: 14px;
      color: var(--primary-color);
    }
    
    .metric-label {
      font-size: 10px;
      color: var(--text-tertiary);
    }
    
    /* Table styles */
    .table-container {
      width: 100%;
      overflow-x: auto;
    }
    
    .data-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      margin: 0;
    }
    
    .data-table th,
    .data-table td {
      padding: 12px 16px;
      text-align: left;
      vertical-align: middle;
    }
    
    .data-table th {
      background-color: var(--bg-secondary);
      font-weight: 600;
      font-size: 12px;
      color: var(--text-tertiary);
      position: sticky;
      top: 0;
      z-index: 2;
    }
    
    .data-table th:first-child {
      border-top-left-radius: var(--radius-md);
    }
    
    .data-table th:last-child {
      border-top-right-radius: var(--radius-md);
    }
    
    .data-table tbody tr {
      transition: all var(--transition-fast);
      border-bottom: 1px solid var(--border-light);
    }
    
    .data-table tbody tr:hover {
      background-color: var(--bg-secondary);
    }
    
    .data-table tbody tr:last-child {
      border-bottom: none;
    }
    
    .data-table tbody tr:last-child td:first-child {
      border-bottom-left-radius: var(--radius-md);
    }
    
    .data-table tbody tr:last-child td:last-child {
      border-bottom-right-radius: var(--radius-md);
    }
    
    .table-member-cell {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .table-actions {
      display: flex;
      gap: 8px;
      justify-content: flex-end;
    }
    
    .table-action {
      width: 28px;
      height: 28px;
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: white;
      border: 1px solid var(--border-light);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .table-action:hover {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }
    
    .badge {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 2px 8px;
      font-size: 11px;
      font-weight: 500;
      border-radius: var(--radius-full);
      text-transform: uppercase;
    }
    
    .badge-primary {
      background-color: rgba(85, 64, 175, 0.1);
      color: var(--primary-color);
    }
    
    .badge-success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .badge-warning {
      background-color: var(--warning-light);
      color: var(--warning-color);
    }
    
    .badge-danger {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    /* Search bar */
    .search-bar {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 10px 16px;
      background-color: white;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
    }
    
    .search-input {
      border: none;
      background: none;
      flex: 1;
      font-family: 'Inter', sans-serif;
      font-size: 14px;
      color: var(--text-primary);
      outline: none;
    }
    
    .search-icon {
      color: var(--text-tertiary);
    }
    
    /* Insights card */
    .insights-list {
      display: flex;
      flex-direction: column;
      gap: 12px;
    }
    
    .insight-item {
      display: flex;
      gap: 12px;
      padding: 12px;
      border-radius: var(--radius-md);
      background-color: var(--bg-secondary);
      transition: all var(--transition-fast);
    }
    
    .insight-item:hover {
      background-color: var(--bg-tertiary);
      transform: translateX(4px);
    }
    
    .insight-icon {
      width: 36px;
      height: 36px;
      border-radius: var(--radius-md);
      background: var(--primary-gradient);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 16px;
      flex-shrink: 0;
    }
    
    .insight-content {
      flex: 1;
    }
    
    .insight-title {
      font-weight: 600;
      font-size: 14px;
      margin-bottom: 4px;
    }
    
    .insight-description {
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    /* Empty state */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 40px;
      text-align: center;
    }
    
    .empty-icon {
      font-size: 48px;
      color: var(--text-light);
      margin-bottom: 16px;
    }
    
    .empty-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 8px;
      color: var(--text-primary);
    }
    
    .empty-description {
      color: var(--text-tertiary);
      max-width: 300px;
      margin-bottom: 16px;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      z-index: 1000;
      backdrop-filter: blur(5px);
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(85, 64, 175, 0.1);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    .loading-text {
      margin-top: 12px;
      font-weight: 500;
      color: var(--primary-color);
    }
    
    /* Futuristic elements */
    .title-icon::before {
      content: '';
      position: absolute;
      inset: -5px;
      background: var(--primary-gradient);
      border-radius: inherit;
      opacity: 0.3;
      filter: blur(10px);
      z-index: -1;
    }
    
    @keyframes pulse {
      0% { transform: scale(1); opacity: 0.6; }
      50% { transform: scale(1.05); opacity: 0; }
      100% { transform: scale(1); opacity: 0; }
    }
    
    .pulse-element::before {
      content: '';
      position: absolute;
      inset: 0;
      border-radius: inherit;
      background: inherit;
      opacity: 0.6;
      z-index: -1;
      animation: pulse 2s infinite;
    }
    
    /* Responsive adjustments */
    @media (max-width: 1200px) {
      .dashboard-grid {
        grid-template-columns: repeat(8, 1fr);
      }
      
      .col-span-3, .col-span-4 {
        grid-column: span 4;
      }
      
      .col-span-5, .col-span-6, .col-span-7 {
        grid-column: span 8;
      }
      
      .col-span-8, .col-span-9, .col-span-12 {
        grid-column: span 8;
      }
      
      .stats-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }
    
    @media (max-width: 768px) {
      .dashboard-grid {
        grid-template-columns: repeat(4, 1fr);
        gap: 16px;
      }
      
      .col-span-3, .col-span-4, .col-span-5, .col-span-6, .col-span-7, .col-span-8, .col-span-9, .col-span-12 {
        grid-column: span 4;
      }
      
      .header-content {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
      }
      
      .header-actions {
        width: 100%;
        justify-content: space-between;
      }
      
      .stats-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>

<body>
  <div class="dashboard-container">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
      <div class="header-content">
        <div class="header-title">
          <div class="title-icon">
            <i class="fas fa-comments"></i>
          </div>
          <div class="title-text">
            <h1 class="title-main">One-on-One Dashboard ✨</h1>
            <p class="title-sub">Analytics and insights from your one-on-one sessions</p>
          </div>
        </div>
        
        <div class="header-actions">
          <div class="date-range-picker">
            <span class="date-range-label">Time Period:</span>
            <select id="dateRangeSelect" class="date-range-select">
              <option value="30">Last 30 Days</option>
              <option value="90">Last 3 Months</option>
              <option value="180">Last 6 Months</option>
              <option value="365">Last 12 Months</option>
              <option value="all">All Time</option>
            </select>
          </div>
          
          <button class="btn btn-outline" id="exportBtn">
            <i class="fas fa-download"></i> Export Data
          </button>
          
          <button class="btn btn-primary" id="newSessionBtn">
            <i class="fas fa-plus"></i> New Session
          </button>
        </div>
      </div>
    </div>
    
    <!-- Stats Overview -->
    <div class="stats-grid">
      <!-- Total Sessions Card -->
      <div class="stat-card pulse-element">
        <div class="stat-header">
          <h3 class="stat-title">Total Sessions</h3>
          <div class="stat-icon primary-icon">
            <i class="fas fa-calendar-check"></i>
          </div>
        </div>
        <div>
          <div class="stat-value" id="totalSessions">--</div>
          <div class="stat-trend trend-positive" id="sessionsTrend">
            <i class="fas fa-arrow-up"></i> <span>--% vs previous period</span>
          </div>
        </div>
      </div>
      
      <!-- Coverage Rate Card -->
      <div class="stat-card pulse-element">
        <div class="stat-header">
          <h3 class="stat-title">Team Coverage</h3>
          <div class="stat-icon success-icon">
            <i class="fas fa-users"></i>
          </div>
        </div>
        <div>
          <div class="stat-value" id="teamCoverage">--</div>
          <div class="stat-trend trend-positive" id="coverageTrend">
            <i class="fas fa-arrow-up"></i> <span>--% vs previous period</span>
          </div>
        </div>
      </div>
      
      <!-- Action Items Card -->
      <div class="stat-card pulse-element">
        <div class="stat-header">
          <h3 class="stat-title">Action Items</h3>
          <div class="stat-icon warning-icon">
            <i class="fas fa-tasks"></i>
          </div>
        </div>
        <div>
          <div class="stat-value" id="actionItems">--</div>
          <div class="stat-trend trend-positive" id="actionItemsTrend">
            <i class="fas fa-arrow-up"></i> <span>--% completion rate</span>
          </div>
        </div>
      </div>
      
      <!-- Avg Session Length Card -->
      <div class="stat-card pulse-element">
        <div class="stat-header">
          <h3 class="stat-title">Avg Session Length</h3>
          <div class="stat-icon info-icon">
            <i class="fas fa-clock"></i>
          </div>
        </div>
        <div>
          <div class="stat-value" id="avgSessionLength">--</div>
          <div class="stat-trend" id="sessionLengthTrend">
            <span>-- minutes per session</span>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Main Dashboard Grid -->
    <div class="dashboard-grid">
      <!-- Sessions Over Time Chart -->
      <div class="col-span-8">
        <div class="dashboard-card">
          <div class="card-header">
            <div class="card-title">
              <div class="card-icon">
                <i class="fas fa-chart-line"></i>
              </div>
              <span>One-on-One Sessions Over Time</span>
            </div>
            
            <div class="card-actions">
              <select id="chartViewSelect" class="date-range-select">
                <option value="sessions">Session Count</option>
                <option value="coverage">Team Coverage</option>
                <option value="actionItems">Action Items</option>
              </select>
            </div>
          </div>
          
          <div class="card-body">
            <div class="chart-container">
              <canvas id="sessionsChart"></canvas>
            </div>
          </div>
          
          <div class="card-footer">
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <div>
                <span style="font-weight: 500; color: var(--text-secondary);">Target: </span>
                <span style="color: var(--primary-color); font-weight: 600;">1 session per team member per month</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Key Insights Card -->
      <div class="col-span-4">
        <div class="dashboard-card">
          <div class="card-header">
            <div class="card-title">
              <div class="card-icon">
                <i class="fas fa-lightbulb"></i>
              </div>
              <span>Key Insights</span>
            </div>
          </div>
          
          <div class="card-body">
            <div class="insights-list" id="insightsList">
              <!-- Insights will be loaded dynamically -->
              <div class="insight-item">
                <div class="insight-icon">
                  <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div class="insight-content">
                  <h4 class="insight-title">Coverage Gap</h4>
                  <p class="insight-description">3 team members haven't had a one-on-one in over 30 days.</p>
                </div>
              </div>
              
              <div class="insight-item">
                <div class="insight-icon">
                  <i class="fas fa-chart-line"></i>
                </div>
                <div class="insight-content">
                  <h4 class="insight-title">Trending Topics</h4>
                  <p class="insight-description">"Workload" was mentioned in 75% of recent sessions.</p>
                </div>
              </div>
              
              <div class="insight-item">
                <div class="insight-icon">
                  <i class="fas fa-trophy"></i>
                </div>
                <div class="insight-content">
                  <h4 class="insight-title">Completion Rate</h4>
                  <p class="insight-description">Action item completion rate has improved by 15% this month.</p>
                </div>
              </div>
              
              <div class="insight-item">
                <div class="insight-icon">
                  <i class="fas fa-user-clock"></i>
                </div>
                <div class="insight-content">
                  <h4 class="insight-title">Time Management</h4>
                  <p class="insight-description">Average session length has decreased to 28 minutes.</p>
                </div>
              </div>
            </div>
          </div>
          
          <div class="card-footer">
            <button class="btn btn-outline" style="width: 100%;">
              <i class="fas fa-eye"></i> View All Insights
            </button>
          </div>
        </div>
      </div>
      
      <!-- Team Coverage Card -->
      <div class="col-span-4">
        <div class="dashboard-card">
          <div class="card-header">
            <div class="card-title">
              <div class="card-icon">
                <i class="fas fa-user-check"></i>
              </div>
              <span>Team Coverage</span>
            </div>
            
            <div class="card-actions">
              <div class="search-bar" style="width: 180px; padding: 6px 12px;">
                <i class="fas fa-search search-icon"></i>
                <input type="text" class="search-input" id="memberSearchInput" placeholder="Search members...">
              </div>
            </div>
          </div>
          
          <div class="card-body">
            <div class="team-members-list" id="teamMembersList">
              <!-- Team members will be loaded dynamically -->
              <div class="member-card">
                <div class="member-avatar">JD</div>
                <div class="member-info">
                  <div class="member-name">John Doe</div>
                  <div class="member-status">
                    <i class="fas fa-calendar-alt"></i> Last session: 5 days ago
                  </div>
                </div>
                <div class="member-metrics">
                  <div class="member-metric">
                    <div class="metric-value">4</div>
                    <div class="metric-label">Sessions</div>
                  </div>
                  <div class="member-metric">
                    <div class="metric-value">3</div>
                    <div class="metric-label">Actions</div>
                  </div>
                </div>
              </div>
              
              <div class="member-card">
                <div class="member-avatar">AS</div>
                <div class="member-info">
                  <div class="member-name">Alice Smith</div>
                  <div class="member-status">
                    <i class="fas fa-calendar-alt"></i> Last session: 2 weeks ago
                  </div>
                </div>
                <div class="member-metrics">
                  <div class="member-metric">
                    <div class="metric-value">3</div>
                    <div class="metric-label">Sessions</div>
                  </div>
                  <div class="member-metric">
                    <div class="metric-value">5</div>
                    <div class="metric-label">Actions</div>
                  </div>
                </div>
              </div>
              
              <div class="member-card">
                <div class="member-avatar">RJ</div>
                <div class="member-info">
                  <div class="member-name">Robert Johnson</div>
                  <div class="member-status">
                    <i class="fas fa-exclamation-circle" style="color: var(--danger-color);"></i> No sessions yet
                  </div>
                </div>
                <div class="member-metrics">
                  <div class="member-metric">
                    <div class="metric-value">0</div>
                    <div class="metric-label">Sessions</div>
                  </div>
                  <div class="member-metric">
                    <div class="metric-value">0</div>
                    <div class="metric-label">Actions</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="card-footer">
            <button class="btn btn-outline" style="width: 100%;" id="viewAllTeamBtn">
              <i class="fas fa-users"></i> View All Team Members
            </button>
          </div>
        </div>
      </div>
      
      <!-- Calendar View -->
      <div class="col-span-8">
        <div class="dashboard-card">
          <div class="card-header">
            <div class="card-title">
              <div class="card-icon">
                <i class="fas fa-calendar-alt"></i>
              </div>
              <span>One-on-One Calendar</span>
            </div>
            
            <div class="card-actions">
              <button class="card-action-btn" id="todayBtn" title="Go to Today">
                <i class="fas fa-calendar-day"></i>
              </button>
              <button class="card-action-btn" id="scheduleBtn" title="Schedule Session">
                <i class="fas fa-plus"></i>
              </button>
            </div>
          </div>
          
          <div class="card-body">
            <div class="calendar-header">
              <div class="calendar-month" id="currentMonth">April 2025</div>
              <div class="calendar-nav">
                <button class="calendar-nav-btn" id="prevMonthBtn">
                  <i class="fas fa-chevron-left"></i>
                </button>
                <button class="calendar-nav-btn" id="nextMonthBtn">
                  <i class="fas fa-chevron-right"></i>
                </button>
              </div>
            </div>
            
            <div class="calendar-weekdays">
              <div class="calendar-weekday">Sun</div>
              <div class="calendar-weekday">Mon</div>
              <div class="calendar-weekday">Tue</div>
              <div class="calendar-weekday">Wed</div>
              <div class="calendar-weekday">Thu</div>
              <div class="calendar-weekday">Fri</div>
              <div class="calendar-weekday">Sat</div>
            </div>
            
            <div class="calendar-view" id="calendarGrid">
              <!-- Calendar days will be generated dynamically -->
            </div>
          </div>
          
          <div class="card-footer">
            <div style="display: flex; gap: 16px;">
              <div style="display: flex; align-items: center; gap: 6px;">
                <span style="width: 10px; height: 10px; border-radius: 50%; background-color: var(--primary-light);"></span>
                <span style="font-size: 12px; color: var(--text-tertiary);">Regular Session</span>
              </div>
              <div style="display: flex; align-items: center; gap: 6px;">
                <span style="width: 10px; height: 10px; border-radius: 50%; background-color: var(--success-color);"></span>
                <span style="font-size: 12px; color: var(--text-tertiary);">Performance Review</span>
              </div>
              <div style="display: flex; align-items: center; gap: 6px;">
                <span style="width: 10px; height: 10px; border-radius: 50%; background-color: var(--warning-color);"></span>
                <span style="font-size: 12px; color: var(--text-tertiary);">Coaching Session</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Recent Sessions Table -->
      <div class="col-span-12">
        <div class="dashboard-card">
          <div class="card-header">
            <div class="card-title">
              <div class="card-icon">
                <i class="fas fa-history"></i>
              </div>
              <span>Recent One-on-One Sessions</span>
            </div>
            
            <div class="card-actions">
              <div class="search-bar" style="width: 240px;">
                <i class="fas fa-search search-icon"></i>
                <input type="text" class="search-input" id="sessionSearchInput" placeholder="Search sessions...">
              </div>
            </div>
          </div>
          
          <div class="card-body">
            <div class="table-container">
              <table class="data-table">
                <thead>
                  <tr>
                    <th>Team Member</th>
                    <th>Date</th>
                    <th>Type</th>
                    <th>Duration</th>
                    <th>Key Topics</th>
                    <th>Actions</th>
                    <th></th>
                  </tr>
                </thead>
                <tbody id="recentSessionsTable">
                  <!-- Sessions will be loaded dynamically -->
                                    <tr>
                    <td>
                      <div class="table-member-cell">
                        <div class="member-avatar">JD</div>
                        <div>John Doe</div>
                      </div>
                    </td>
                    <td>Apr 3, 2025</td>
                    <td><span class="badge badge-primary">Regular</span></td>
                    <td>30 min</td>
                    <td>Performance, Career Growth</td>
                    <td>3 items</td>
                    <td>
                      <div class="table-actions">
                        <button class="table-action view-session" data-id="123" title="View Details">
                          <i class="fas fa-eye"></i>
                        </button>
                        <button class="table-action edit-session" data-id="123" title="Edit">
                          <i class="fas fa-edit"></i>
                        </button>
                        <button class="table-action send-email" data-id="123" title="Send Follow-up">
                          <i class="fas fa-envelope"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                  
                  <tr>
                    <td>
                      <div class="table-member-cell">
                        <div class="member-avatar">AS</div>
                        <div>Alice Smith</div>
                      </div>
                    </td>
                    <td>Mar 28, 2025</td>
                    <td><span class="badge badge-success">Performance</span></td>
                    <td>45 min</td>
                    <td>Quarterly Review, Goals</td>
                    <td>5 items</td>
                    <td>
                      <div class="table-actions">
                        <button class="table-action view-session" data-id="122" title="View Details">
                          <i class="fas fa-eye"></i>
                        </button>
                        <button class="table-action edit-session" data-id="122" title="Edit">
                          <i class="fas fa-edit"></i>
                        </button>
                        <button class="table-action send-email" data-id="122" title="Send Follow-up">
                          <i class="fas fa-envelope"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                  
                  <tr>
                    <td>
                      <div class="table-member-cell">
                        <div class="member-avatar">MB</div>
                        <div>Michael Brown</div>
                      </div>
                    </td>
                    <td>Mar 25, 2025</td>
                    <td><span class="badge badge-warning">Coaching</span></td>
                    <td>35 min</td>
                    <td>Skill Development, Support</td>
                    <td>2 items</td>
                    <td>
                      <div class="table-actions">
                        <button class="table-action view-session" data-id="121" title="View Details">
                          <i class="fas fa-eye"></i>
                        </button>
                        <button class="table-action edit-session" data-id="121" title="Edit">
                          <i class="fas fa-edit"></i>
                        </button>
                        <button class="table-action send-email" data-id="121" title="Send Follow-up">
                          <i class="fas fa-envelope"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
          
          <div class="card-footer">
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <div>
                <span style="font-weight: 500; color: var(--text-secondary);">Showing </span>
                <span style="color: var(--primary-color); font-weight: 600;">3</span>
                <span style="color: var(--text-secondary);"> of </span>
                <span style="color: var(--primary-color); font-weight: 600;">24</span>
                <span style="color: var(--text-secondary);"> sessions</span>
              </div>
              <div>
                <button class="btn btn-outline" id="viewAllSessionsBtn">
                  <i class="fas fa-list"></i> View All Sessions
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
    <div class="loading-text">Loading dashboard data...</div>
  </div>
  
  <script>
    // Global variables
    let dashboardData = {};
    let sessionsChart = null;
    let currentMonth = new Date();
    
    // Initialize the dashboard on page load
    document.addEventListener('DOMContentLoaded', function() {
      // Show loading overlay
      showLoading(true);
      
      // Set current date in calendar
      updateCalendarView(currentMonth);
      
      // Load dashboard data
      loadDashboardData();
      
      // Set up event listeners
      setupEventListeners();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Date range selector
      document.getElementById('dateRangeSelect').addEventListener('change', function() {
        loadDashboardData();
      });
      
      // Chart view selector
      document.getElementById('chartViewSelect').addEventListener('change', function() {
        updateCharts();
      });
      
      // Calendar navigation
      document.getElementById('prevMonthBtn').addEventListener('click', function() {
        currentMonth.setMonth(currentMonth.getMonth() - 1);
        updateCalendarView(currentMonth);
      });
      
      document.getElementById('nextMonthBtn').addEventListener('click', function() {
        currentMonth.setMonth(currentMonth.getMonth() + 1);
        updateCalendarView(currentMonth);
      });
      
      document.getElementById('todayBtn').addEventListener('click', function() {
        currentMonth = new Date();
        updateCalendarView(currentMonth);
      });
      
      // New session button
      document.getElementById('newSessionBtn').addEventListener('click', function() {
        google.script.run.showOneOnOneForm();
      });
      
      // Schedule session button
      document.getElementById('scheduleBtn').addEventListener('click', function() {
        google.script.run.showOneOnOneForm();
      });
      
      // Export button
      document.getElementById('exportBtn').addEventListener('click', function() {
        google.script.run.showExportOptions();
      });
      
      // View all team members button
      document.getElementById('viewAllTeamBtn').addEventListener('click', function() {
        google.script.run.showTeamView();
      });
      
      // View all sessions button
      document.getElementById('viewAllSessionsBtn').addEventListener('click', function() {
        google.script.run.showAllOneOnOneNotes();
      });
      
      // Search team members
      document.getElementById('memberSearchInput').addEventListener('input', function() {
        filterTeamMembers(this.value);
      });
      
      // Search sessions
      document.getElementById('sessionSearchInput').addEventListener('input', function() {
        filterSessions(this.value);
      });
      
      // Session actions (view, edit, send email)
      document.querySelectorAll('.view-session').forEach(btn => {
        btn.addEventListener('click', function() {
          const sessionId = this.getAttribute('data-id');
          viewSession(sessionId);
        });
      });
      
      document.querySelectorAll('.edit-session').forEach(btn => {
        btn.addEventListener('click', function() {
          const sessionId = this.getAttribute('data-id');
          editSession(sessionId);
        });
      });
      
      document.querySelectorAll('.send-email').forEach(btn => {
        btn.addEventListener('click', function() {
          const sessionId = this.getAttribute('data-id');
          sendFollowUp(sessionId);
        });
      });
    }
    
    // Load dashboard data
    function loadDashboardData() {
      const dateRange = document.getElementById('dateRangeSelect').value;
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            dashboardData = result.data;
            updateDashboardUI(dashboardData);
          } else {
            console.error('Failed to load dashboard data:', result.message);
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading dashboard data:', error);
        })
        .getOneOnOneDashboardData(dateRange);
    }
    
    // Update dashboard UI with loaded data
    function updateDashboardUI(data) {
      // Update stats
      document.getElementById('totalSessions').textContent = data.stats.totalSessions || '0';
      document.getElementById('teamCoverage').textContent = formatPercentage(data.stats.teamCoverage) || '0%';
      document.getElementById('actionItems').textContent = data.stats.totalActionItems || '0';
      document.getElementById('avgSessionLength').textContent = formatMinutes(data.stats.avgSessionLength) || '0 min';
      
      // Update trends
      updateTrends(data.trends);
      
      // Update charts
      updateCharts();
      
      // Update team members list
      updateTeamMembersList(data.teamMembers);
      
      // Update recent sessions table
      updateRecentSessionsTable(data.recentSessions);
      
      // Update calendar events
      updateCalendarEvents(data.calendarEvents);
      
      // Update insights
      updateInsights(data.insights);
    }
    
    // Update trend indicators
    function updateTrends(trends) {
      // Sessions trend
      const sessionsTrend = document.getElementById('sessionsTrend');
      updateTrendElement(sessionsTrend, trends.sessions);
      
      // Coverage trend
      const coverageTrend = document.getElementById('coverageTrend');
      updateTrendElement(coverageTrend, trends.coverage);
      
      // Action items trend
      const actionItemsTrend = document.getElementById('actionItemsTrend');
      if (trends.actionItems) {
        actionItemsTrend.innerHTML = `<i class="fas fa-clipboard-check"></i> <span>${formatPercentage(trends.actionItems)} completion rate</span>`;
      }
      
      // Session length trend
      const sessionLengthTrend = document.getElementById('sessionLengthTrend');
      sessionLengthTrend.innerHTML = `<span>${formatMinutes(trends.avgLength)} per session</span>`;
    }
    
    // Update single trend element
    function updateTrendElement(element, trend) {
      if (!element || trend === undefined) return;
      
      if (trend > 0) {
        element.className = 'stat-trend trend-positive';
        element.innerHTML = `<i class="fas fa-arrow-up"></i> <span>${formatPercentage(Math.abs(trend))} vs previous</span>`;
      } else if (trend < 0) {
        element.className = 'stat-trend trend-negative';
        element.innerHTML = `<i class="fas fa-arrow-down"></i> <span>${formatPercentage(Math.abs(trend))} vs previous</span>`;
      } else {
        element.className = 'stat-trend';
        element.innerHTML = `<i class="fas fa-equals"></i> <span>No change vs previous</span>`;
      }
    }
    
    // Update charts based on selected view
    function updateCharts() {
      const chartView = document.getElementById('chartViewSelect').value;
      const chartData = dashboardData.chartData || {};
      
      // Get chart data based on selected view
      let labels = chartData.labels || [];
      let datasets = [];
      let title = '';
      
      switch (chartView) {
        case 'sessions':
          datasets = [{
            label: 'Number of Sessions',
            data: chartData.sessions || [],
            backgroundColor: 'rgba(85, 64, 175, 0.2)',
            borderColor: '#5540af',
            borderWidth: 2,
            tension: 0.4,
            fill: true
          }];
          title = 'One-on-One Sessions Over Time';
          break;
          
        case 'coverage':
          datasets = [{
            label: 'Team Coverage %',
            data: chartData.coverage || [],
            backgroundColor: 'rgba(16, 185, 129, 0.2)',
            borderColor: '#10b981',
            borderWidth: 2,
            tension: 0.4,
            fill: true
          }];
          title = 'Team Coverage Over Time';
          break;
          
        case 'actionItems':
          datasets = [{
            label: 'Action Items Created',
            data: chartData.itemsCreated || [],
            backgroundColor: 'rgba(59, 130, 246, 0.2)',
            borderColor: '#3b82f6',
            borderWidth: 2,
            tension: 0.4,
            fill: false,
            type: 'line',
            yAxisID: 'y'
          }, {
            label: 'Completion Rate %',
            data: chartData.itemsCompletion || [],
            backgroundColor: 'rgba(245, 158, 11, 0.2)',
            borderColor: '#f59e0b',
            borderWidth: 2,
            tension: 0.4,
            fill: false,
            type: 'line',
            yAxisID: 'y1'
          }];
          title = 'Action Items & Completion Rate';
          break;
      }
      
      // Create or update chart
      const ctx = document.getElementById('sessionsChart').getContext('2d');
      
      // Destroy existing chart if exists
      if (sessionsChart) {
        sessionsChart.destroy();
      }
      
      // Create new chart
      sessionsChart = new Chart(ctx, {
        type: chartView === 'actionItems' ? 'bar' : 'line',
        data: {
          labels: labels,
          datasets: datasets
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: false,
              text: title
            },
            tooltip: {
              mode: 'index',
              intersect: false,
              backgroundColor: 'white',
              titleColor: '#1e293b',
              bodyColor: '#475569',
              borderColor: '#e2e8f0',
              borderWidth: 1,
              padding: 12,
              boxPadding: 6,
              usePointStyle: true,
              titleFont: {
                size: 14,
                weight: 600
              },
              bodyFont: {
                size: 12
              },
              callbacks: {
                label: function(context) {
                  let label = context.dataset.label || '';
                  let value = context.parsed.y;
                  
                  if (label) {
                    label += ': ';
                  }
                  
                  if (chartView === 'coverage' || 
                    (chartView === 'actionItems' && context.datasetIndex === 1)) {
                    return label + formatPercentage(value);
                  } else {
                    return label + value;
                  }
                }
              }
            },
            legend: {
              position: 'top',
              align: 'end',
              labels: {
                usePointStyle: true,
                boxWidth: 8,
                font: {
                  size: 12
                }
              }
            }
          },
          scales: {
            x: {
              grid: {
                display: false
              },
              ticks: {
                font: {
                  size: 12
                }
              }
            },
            y: {
              beginAtZero: true,
              grid: {
                color: '#f1f5f9'
              },
              ticks: {
                font: {
                  size: 12
                },
                callback: function(value) {
                  if (chartView === 'coverage') {
                    return value + '%';
                  }
                  return value;
                }
              }
            },
            y1: chartView === 'actionItems' ? {
              position: 'right',
              beginAtZero: true,
              max: 100,
              grid: {
                display: false
              },
              ticks: {
                font: {
                  size: 12
                },
                callback: function(value) {
                  return value + '%';
                }
              }
            } : undefined
          }
        }
      });
    }
    
    // Update team members list
    function updateTeamMembersList(members) {
      const membersList = document.getElementById('teamMembersList');
      
      // Clear current list
      membersList.innerHTML = '';
      
      if (!members || members.length === 0) {
        membersList.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon">
              <i class="fas fa-user-slash"></i>
            </div>
            <div class="empty-title">No Team Members Yet</div>
            <div class="empty-description">No team members found. Add team members to get started with one-on-ones.</div>
          </div>
        `;
        return;
      }
      
      // Add each team member to the list
      members.forEach(member => {
        const memberCard = document.createElement('div');
        memberCard.className = 'member-card';
        memberCard.setAttribute('data-id', member.id);
        
        // Create initials for avatar
        const initials = getInitials(member.name);
        
        // Format last session date
        let lastSessionText;
        if (member.lastSession) {
          const daysAgo = getDaysAgo(member.lastSession);
          if (daysAgo === 0) {
            lastSessionText = 'Today';
          } else if (daysAgo === 1) {
            lastSessionText = 'Yesterday';
          } else if (daysAgo < 30) {
            lastSessionText = `${daysAgo} days ago`;
          } else {
            lastSessionText = formatDate(member.lastSession);
          }
        } else {
          lastSessionText = 'No sessions yet';
        }
        
        // Determine status icon
        let statusIcon = '<i class="fas fa-calendar-alt"></i>';
        if (!member.lastSession) {
          statusIcon = '<i class="fas fa-exclamation-circle" style="color: var(--danger-color);"></i>';
        } else if (getDaysAgo(member.lastSession) > 30) {
          statusIcon = '<i class="fas fa-exclamation-triangle" style="color: var(--warning-color);"></i>';
        }
        
        memberCard.innerHTML = `
          <div class="member-avatar">${initials}</div>
          <div class="member-info">
            <div class="member-name">${member.name}</div>
            <div class="member-status">
              ${statusIcon} Last session: ${lastSessionText}
            </div>
          </div>
          <div class="member-metrics">
            <div class="member-metric">
              <div class="metric-value">${member.sessionCount || 0}</div>
              <div class="metric-label">Sessions</div>
            </div>
            <div class="member-metric">
              <div class="metric-value">${member.actionItems || 0}</div>
              <div class="metric-label">Actions</div>
            </div>
          </div>
        `;
        
        // Add click event to view member sessions
        memberCard.addEventListener('click', function() {
          viewMemberSessions(member.id);
        });
        
        membersList.appendChild(memberCard);
      });
    }
    
    // Update recent sessions table
    function updateRecentSessionsTable(sessions) {
      const tableBody = document.getElementById('recentSessionsTable');
      
      // Clear current list
      tableBody.innerHTML = '';
      
      if (!sessions || sessions.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `
          <td colspan="7">
            <div class="empty-state">
              <div class="empty-icon">
                <i class="fas fa-calendar-times"></i>
              </div>
              <div class="empty-title">No Sessions Yet</div>
              <div class="empty-description">You haven't recorded any one-on-one sessions yet.</div>
              <button class="btn btn-primary" id="emptyStateNewSession">
                <i class="fas fa-plus"></i> Create Your First Session
              </button>
            </div>
          </td>
        `;
        tableBody.appendChild(emptyRow);
        
        // Add event listener to the new button
        document.getElementById('emptyStateNewSession').addEventListener('click', function() {
          google.script.run.showOneOnOneForm();
        });
        
        return;
      }
      
      // Add each session to the table
      sessions.forEach(session => {
        const row = document.createElement('tr');
        
        // Get session type badge class
        let badgeClass = 'badge-primary';
        switch (session.type) {
          case 'Performance Review':
            badgeClass = 'badge-success';
            break;
          case 'Coaching Session':
            badgeClass = 'badge-warning';
            break;
          case 'Development Planning':
            badgeClass = 'badge-info';
            break;
        }
        
        // Format session date
        const sessionDate = formatDate(session.date);
        
        // Get initials for avatar
        const initials = getInitials(session.memberName);
        
        row.innerHTML = `
          <td>
            <div class="table-member-cell">
              <div class="member-avatar">${initials}</div>
              <div>${session.memberName}</div>
            </div>
          </td>
          <td>${sessionDate}</td>
          <td><span class="badge ${badgeClass}">${session.type}</span></td>
          <td>${session.duration} min</td>
          <td>${session.topics || '-'}</td>
          <td>${session.actionItemCount || 0} items</td>
          <td>
            <div class="table-actions">
              <button class="table-action view-session" data-id="${session.id}" title="View Details">
                <i class="fas fa-eye"></i>
              </button>
              <button class="table-action edit-session" data-id="${session.id}" title="Edit">
                <i class="fas fa-edit"></i>
              </button>
              <button class="table-action send-email" data-id="${session.id}" title="Send Follow-up">
                <i class="fas fa-envelope"></i>
              </button>
            </div>
          </td>
        `;
        
        // Add event listeners for action buttons
        row.querySelector('.view-session').addEventListener('click', function() {
          viewSession(session.id);
        });
        
        row.querySelector('.edit-session').addEventListener('click', function() {
          editSession(session.id);
        });
        
        row.querySelector('.send-email').addEventListener('click', function() {
          sendFollowUp(session.id);
        });
        
        tableBody.appendChild(row);
      });
    }
    
    // Update calendar view
    function updateCalendarView(date) {
      // Update current month display
      const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                         'July', 'August', 'September', 'October', 'November', 'December'];
      document.getElementById('currentMonth').textContent = `${monthNames[date.getMonth()]} ${date.getFullYear()}`;
      
      // Get first and last day of the month
      const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
      const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
      
      // Get day of week for first day (0 = Sunday, 1 = Monday, etc.)
      const firstDayOfWeek = firstDay.getDay();
      
      // Get total number of days in month
      const totalDays = lastDay.getDate();
      
      // Get number of days from previous month to display
      const prevMonthDays = firstDayOfWeek;
      
      // Get last day of previous month
      const prevMonthLastDay = new Date(date.getFullYear(), date.getMonth(), 0).getDate();
      
      // Get number of days from next month to display
      const nextMonthDays = 42 - prevMonthDays - totalDays; // 42 = 6 rows of 7 days
      
      // Generate calendar HTML
      let calendarHTML = '';
      
      // Previous month days
      for (let i = prevMonthLastDay - prevMonthDays + 1; i <= prevMonthLastDay; i++) {
        calendarHTML += `
          <div class="calendar-day" data-date="${date.getFullYear()}-${date.getMonth().toString().padStart(2, '0')}-${i.toString().padStart(2, '0')}">
            <div class="calendar-date other-month">${i}</div>
            <div class="calendar-events"></div>
          </div>
        `;
      }
      
      // Current month days
      const today = new Date();
      for (let i = 1; i <= totalDays; i++) {
        const isToday = today.getDate() === i && 
                         today.getMonth() === date.getMonth() && 
                         today.getFullYear() === date.getFullYear();
        
        calendarHTML += `
          <div class="calendar-day" data-date="${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${i.toString().padStart(2, '0')}">
            <div class="calendar-date${isToday ? ' today' : ''}">${i}</div>
            <div class="calendar-events"></div>
          </div>
        `;
      }
      
      // Next month days
      for (let i = 1; i <= nextMonthDays; i++) {
        calendarHTML += `
          <div class="calendar-day" data-date="${date.getFullYear()}-${(date.getMonth() + 2).toString().padStart(2, '0')}-${i.toString().padStart(2, '0')}">
            <div class="calendar-date other-month">${i}</div>
            <div class="calendar-events"></div>
          </div>
        `;
      }
      
      // Update calendar grid
      document.getElementById('calendarGrid').innerHTML = calendarHTML;
      
      // Update calendar events if we have data
      if (dashboardData.calendarEvents) {
        updateCalendarEvents(dashboardData.calendarEvents);
      }
    }
    
    // Update calendar events
    function updateCalendarEvents(events) {
      if (!events || events.length === 0) return;
      
      // Clear existing events
      document.querySelectorAll('.calendar-events').forEach(el => {
        el.innerHTML = '';
      });
      
      // Add events to calendar
      events.forEach(event => {
        const eventDate = formatDateForCalendar(event.date);
        const calendarDay = document.querySelector(`.calendar-day[data-date="${eventDate}"]`);
        
        if (calendarDay) {
          const eventsContainer = calendarDay.querySelector('.calendar-events');
          
          // Determine event type class
          let eventClass = 'event-primary';
          switch (event.type) {
            case 'Performance Review':
              eventClass = 'event-success';
              break;
            case 'Coaching Session':
              eventClass = 'event-warning';
              break;
            case 'Development Planning':
              eventClass = 'event-info';
              break;
          }
          
          const eventEl = document.createElement('div');
          eventEl.className = `calendar-event ${eventClass}`;
          eventEl.textContent = event.memberName;
          eventEl.setAttribute('title', `${event.type} with ${event.memberName}`);
          eventEl.addEventListener('click', function(e) {
            e.stopPropagation();
            viewSession(event.id);
          });
          
          eventsContainer.appendChild(eventEl);
        }
      });
    }
    
    // Update insights
    function updateInsights(insights) {
      const insightsList = document.getElementById('insightsList');
      
      // Clear current list
      insightsList.innerHTML = '';
      
      if (!insights || insights.length === 0) {
        insightsList.innerHTML = `
          <div class="empty-state" style="padding: 20px;">
            <div class="empty-icon">
              <i class="fas fa-lightbulb"></i>
            </div>
            <div class="empty-title">No Insights Yet</div>
            <div class="empty-description">Insights will appear as you record more one-on-one sessions.</div>
          </div>
        `;
        return;
      }
      
      // Add each insight to the list
      insights.forEach(insight => {
        const insightItem = document.createElement('div');
        insightItem.className = 'insight-item';
        
        insightItem.innerHTML = `
          <div class="insight-icon">
            <i class="${insight.icon || 'fas fa-lightbulb'}"></i>
          </div>
          <div class="insight-content">
            <h4 class="insight-title">${insight.title}</h4>
            <p class="insight-description">${insight.description}</p>
          </div>
        `;
        
        insightsList.appendChild(insightItem);
      });
    }
    
    // Filter team members
    function filterTeamMembers(query) {
      const memberCards = document.querySelectorAll('.member-card');
      
      query = query.toLowerCase();
      
      memberCards.forEach(card => {
        const memberName = card.querySelector('.member-name').textContent.toLowerCase();
        
        if (memberName.includes(query)) {
          card.style.display = '';
        } else {
          card.style.display = 'none';
        }
      });
    }
    
    // Filter sessions
    function filterSessions(query) {
      const rows = document.querySelectorAll('#recentSessionsTable tr');
      
      query = query.toLowerCase();
      
      rows.forEach(row => {
        const memberName = row.querySelector('.table-member-cell')?.textContent.toLowerCase();
        const sessionType = row.querySelector('.badge')?.textContent.toLowerCase();
        const topics = row.cells[4]?.textContent.toLowerCase();
        
        if (!memberName) return; // Skip rows without member cells (like empty states)
        
        if (memberName.includes(query) || sessionType.includes(query) || topics.includes(query)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }
    
    // View session details
    function viewSession(sessionId) {
      google.script.run.showOneOnOneDetails(sessionId);
    }
    
    // Edit session
    function editSession(sessionId) {
      google.script.run.editOneOnOneSession(sessionId);
    }
    
    // Send follow-up email
    function sendFollowUp(sessionId) {
      google.script.run.showOneOnOneEmailForm(sessionId);
    }
    
    // View member sessions
    function viewMemberSessions(memberId) {
      google.script.run.showTeamMemberSessions(memberId);
    }
    
    // Show/hide loading overlay
    function showLoading(show) {
      const overlay = document.getElementById('loadingOverlay');
      if (show) {
        overlay.classList.add('show');
      } else {
        overlay.classList.remove('show');
      }
    }
    
    // Hide loading overlay
    function hideLoading() {
      showLoading(false);
    }
    
    // Utility function to format percentage
    function formatPercentage(value) {
      if (value === null || value === undefined) return '--';
      return Math.round(value) + '%';
    }
    
    // Utility function to format minutes
    function formatMinutes(value) {
      if (value === null || value === undefined) return '--';
      return Math.round(value) + ' min';
    }
    
    // Utility function to format date
    function formatDate(dateString) {
      if (!dateString) return '--';
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
    }
    
    // Utility function to format date for calendar lookup
    function formatDateForCalendar(dateString) {
      if (!dateString) return '';
      const date = new Date(dateString);
      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
    }
    
    // Utility function to get days ago from date
    function getDaysAgo(dateString) {
      if (!dateString) return null;
      
      const date = new Date(dateString);
      const today = new Date();
      
      // Reset time to compare just dates
      today.setHours(0, 0, 0, 0);
      date.setHours(0, 0, 0, 0);
      
      const diffTime = today.getTime() - date.getTime();
      return Math.floor(diffTime / (1000 * 60 * 60 * 24));
    }
    
    // Utility function to get initials from name
    function getInitials(name) {
      if (!name) return '--';
      
      // Split name by spaces and get first letter of each part
      return name.split(' ')
        .map(part => part.charAt(0))
        .join('');
    }
  </script>
</body>
</html>




<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Export One-on-One Notes</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: 40px 24px;
    }
    
    .header {
      text-align: center;
      margin-bottom: 40px;
      position: relative;
    }
    
    .header-icon {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: var(--primary-gradient);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 32px;
      margin: 0 auto 20px;
      position: relative;
    }
    
    .header-icon::before {
      content: '';
      position: absolute;
      inset: -6px;
      border-radius: 50%;
      background: conic-gradient(
        from 0deg,
        var(--primary-color),
        var(--secondary-color),
        var(--accent-color),
        var(--secondary-color),
        var(--primary-color)
      );
      z-index: -1;
      opacity: 0.7;
      animation: rotate 4s linear infinite;
    }
    
    @keyframes rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 32px;
      font-weight: 700;
      margin-bottom: 12px;
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
    }
    
    .header-subtitle {
      color: var(--text-secondary);
      font-size: 16px;
      max-width: 500px;
      margin: 0 auto;
    }
    
    .export-options {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 24px;
      margin-bottom: 32px;
    }
    
    .export-option {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      transition: transform var(--transition-normal), box-shadow var(--transition-normal);
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }
    
    .export-option:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }
    
    .export-option.selected {
      border: 2px solid var(--primary-color);
    }
    
    .export-option.selected::before {
      content: '✓';
      position: absolute;
      top: 12px;
      right: 12px;
      width: 24px;
      height: 24px;
      background-color: var(--primary-color);
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 14px;
    }
    
    .option-icon {
      width: 56px;
      height: 56px;
      border-radius: var(--radius-md);
      background: var(--primary-gradient);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      margin-bottom: 16px;
    }
    
    .option-title {
      font-weight: 600;
      font-size: 18px;
      margin-bottom: 8px;
    }
    
    .option-description {
      color: var(--text-tertiary);
      font-size: 14px;
    }
    
    .filters-section {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      margin-bottom: 32px;
    }
    
    .section-title {
      font-family: 'Manrope', sans-serif;
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .filters-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 16px;
    }
    
    .filter-group {
      margin-bottom: 16px;
    }
    
    .filter-label {
      display: block;
      font-weight: 500;
      margin-bottom: 6px;
      color: var(--text-secondary);
    }
    
    .filter-input {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-family: 'Inter', sans-serif;
      font-size: 14px;
      transition: all var(--transition-fast);
    }
    
    .filter-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .checkbox-group {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 12px;
    }
    
    .checkbox-input {
      appearance: none;
      width: 18px;
      height: 18px;
      border: 1.5px solid var(--border-medium);
      border-radius: 4px;
      position: relative;
      cursor: pointer;
    }
    
    .checkbox-input:checked {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    .checkbox-input:checked::after {
      content: '';
      position: absolute;
      top: 40%;
      left: 50%;
      transform: translate(-50%, -50%) rotate(45deg);
      width: 4px;
      height: 8px;
      border: solid white;
      border-width: 0 2px 2px 0;
    }
    
    .checkbox-input:focus {
      outline: 0;
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.2);
    }
    
    .checkbox-label {
      font-size: 14px;
      cursor: pointer;
    }
    
    .preview-section {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      margin-bottom: 32px;
    }
    
    .preview-container {
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      padding: 16px;
      margin-top: 16px;
      max-height: 300px;
      overflow-y: auto;
    }
    
    .preview-placeholder {
      color: var(--text-tertiary);
      text-align: center;
      padding: 40px 0;
    }
    
    .preview-placeholder i {
      font-size: 32px;
      margin-bottom: 16px;
      display: block;
    }
    
    .preview-table {
      width: 100%;
      border-collapse: collapse;
    }
    
    .preview-table th, .preview-table td {
      padding: 8px 12px;
      text-align: left;
      border-bottom: 1px solid var(--border-light);
    }
    
    .preview-table th {
      font-weight: 600;
      background-color: var(--bg-secondary);
      color: var(--text-secondary);
      font-size: 12px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .actions {
      display: flex;
      justify-content: center;
      gap: 16px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 12px 24px;
      border-radius: var(--radius-md);
      font-size: 15px;
      font-weight: 600;
      cursor: pointer;
      transition: all var(--transition-fast);
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-outline {
      background-color: white;
      border: 1px solid var(--border-medium);
      color: var(--text-secondary);
    }
    
    .btn-outline:hover {
      border-color: var(--primary-color);
      color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    /* Loading Spinner */
    .loading-indicator {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      margin-left: 8px;
      opacity: 0;
      transition: opacity var(--transition-fast);
    }
    
    .loading-indicator.show {
      opacity: 1;
    }
    
    .spinner {
      width: 16px;
      height: 16px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-top-color: white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      z-index: 1000;
      backdrop-filter: blur(5px);
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(85, 64, 175, 0.1);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 12px;
      font-weight: 500;
      color: var(--primary-color);
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .export-options {
        grid-template-columns: 1fr;
      }
      
      .filters-grid {
        grid-template-columns: 1fr;
      }
      
      .actions {
        flex-direction: column;
      }
      
      .btn {
        width: 100%;
      }
    }
    
    /* Decorative elements */
    .decoration {
      position: absolute;
      z-index: -1;
      opacity: 0.5;
      pointer-events: none;
    }
    
    .decoration-1 {
      top: -80px;
      left: -60px;
      width: 200px;
      height: 200px;
      border-radius: 50%;
      background: radial-gradient(circle, rgba(56, 189, 248, 0.2) 0%, rgba(56, 189, 248, 0) 70%);
    }
    
    .decoration-2 {
      bottom: -100px;
      right: -80px;
      width: 250px;
      height: 250px;
      border-radius: 50%;
      background: radial-gradient(circle, rgba(251, 113, 133, 0.2) 0%, rgba(251, 113, 133, 0) 70%);
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="decoration decoration-1"></div>
    <div class="decoration decoration-2"></div>
    
    <header class="header">
      <div class="header-icon">
        <i class="fas fa-file-export"></i>
      </div>
      <h1 class="header-title">Export One-on-One Notes</h1>
      <p class="header-subtitle">Choose your preferred export format and customize the data you want to include</p>
    </header>
    
    <div class="export-options">
      <div class="export-option" data-format="spreadsheet">
        <div class="option-icon">
          <i class="fas fa-table"></i>
        </div>
        <h3 class="option-title">Spreadsheet</h3>
        <p class="option-description">Export to a new sheet or CSV file for data analysis and filtering</p>
      </div>
      
      <div class="export-option" data-format="pdf">
        <div class="option-icon">
          <i class="fas fa-file-pdf"></i>
        </div>
        <h3 class="option-title">PDF Report</h3>
        <p class="option-description">Generate a professional PDF report, perfect for sharing and printing</p>
      </div>
      
      <div class="export-option" data-format="summary">
        <div class="option-icon">
          <i class="fas fa-file-alt"></i>
        </div>
        <h3 class="option-title">Executive Summary</h3>
        <p class="option-description">Create a condensed summary highlighting key points and action items</p>
      </div>
      
      <div class="export-option" data-format="email">
        <div class="option-icon">
          <i class="fas fa-envelope"></i>
        </div>
        <h3 class="option-title">Email Report</h3>
        <p class="option-description">Generate a report and send it directly via email to stakeholders</p>
      </div>
    </div>
    
    <div class="filters-section">
      <h2 class="section-title">
        <i class="fas fa-filter"></i> Data Filters
      </h2>
      
      <div class="filters-grid">
        <div class="filter-group">
          <label class="filter-label" for="teamMember">Team Member</label>
          <select id="teamMember" class="filter-input">
            <option value="all">All Team Members</option>
            <!-- Will be populated dynamically -->
          </select>
        </div>
        
        <div class="filter-group">
          <label class="filter-label" for="sessionType">Session Type</label>
          <select id="sessionType" class="filter-input">
            <option value="all">All Session Types</option>
            <option value="regular">Regular One-on-One</option>
            <option value="performance">Performance Review</option>
            <option value="coaching">Coaching Session</option>
            <option value="development">Development Planning</option>
            <option value="checkin">Quick Check-In</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label class="filter-label" for="dateFrom">From Date</label>
          <input type="date" id="dateFrom" class="filter-input">
        </div>
        
        <div class="filter-group">
          <label class="filter-label" for="dateTo">To Date</label>
          <input type="date" id="dateTo" class="filter-input">
        </div>
      </div>
      
      <h3 class="section-title" style="font-size: 16px; margin-top: 24px;">
        <i class="fas fa-check-square"></i> Included Content
      </h3>
      
      <div class="filters-grid">
        <div>
          <div class="checkbox-group">
            <input type="checkbox" id="includeSessionInfo" class="checkbox-input" checked>
            <label for="includeSessionInfo" class="checkbox-label">Session Information</label>
          </div>
          <div class="checkbox-group">
            <input type="checkbox" id="includeNotes" class="checkbox-input" checked>
            <label for="includeNotes" class="checkbox-label">Meeting Notes</label>
          </div>
          <div class="checkbox-group">
            <input type="checkbox" id="includeActionItems" class="checkbox-input" checked>
            <label for="includeActionItems" class="checkbox-label">Action Items</label>
          </div>
        </div>
        
        <div>
          <div class="checkbox-group">
            <input type="checkbox" id="includeReflections" class="checkbox-input" checked>
            <label for="includeReflections" class="checkbox-label">Reflections</label>
          </div>
          <div class="checkbox-group">
            <input type="checkbox" id="includeConfidential" class="checkbox-input">
            <label for="includeConfidential" class="checkbox-label">Confidential Notes</label>
          </div>
          <div class="checkbox-group">
            <input type="checkbox" id="includeNextSteps" class="checkbox-input" checked>
            <label for="includeNextSteps" class="checkbox-label">Next Steps</label>
          </div>
        </div>
      </div>
    </div>
    
    <div class="preview-section">
      <h2 class="section-title">
        <i class="fas fa-eye"></i> Preview
      </h2>
      
              <div class="preview-placeholder">
          <i class="fas fa-file-search"></i>
          <p>Select an export format and apply filters to see a preview</p>
        </div>
        
        <!-- This will be replaced with actual preview content -->
        <table class="preview-table" style="display: none;">
          <thead>
            <tr>
              <th>Team Member</th>
              <th>Date</th>
              <th>Type</th>
              <th>Topics</th>
              <th>Action Items</th>
            </tr>
          </thead>
          <tbody id="previewTableBody">
            <!-- Will be populated dynamically -->
          </tbody>
        </table>
      </div>
    </div>
    
    <div class="actions">
      <button class="btn btn-outline" id="cancelBtn">
        <i class="fas fa-times"></i> Cancel
      </button>
      <button class="btn btn-primary" id="exportBtn">
        <i class="fas fa-file-export"></i> Export Data
        <span class="loading-indicator" id="loadingIndicator">
          <div class="spinner"></div>
          <span>Processing...</span>
        </span>
      </button>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Generating export...</div>
  </div>
  
  <script>
    // Global variables
    let teamMembers = [];
    let selectedFormat = '';
    let previewData = [];
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
      // Load team members
      loadTeamMembers();
      
      // Set up event listeners
      setupEventListeners();
      
      // Set default dates (last 30 days)
      setDefaultDates();
    });
    
    // Load team members for filter dropdown
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            teamMembers = result.data || [];
            populateTeamMembersDropdown(teamMembers);
          } else {
            console.error('Failed to load team members:', result.message);
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error loading team members:', error);
        })
        .getAllTeamMembers();
    }
    
    // Populate team members dropdown
    function populateTeamMembersDropdown(members) {
      const dropdown = document.getElementById('teamMember');
      
      // Clear existing options except first one (All Team Members)
      while (dropdown.options.length > 1) {
        dropdown.remove(1);
      }
      
      // Add team members to dropdown
      members.forEach(member => {
        const option = document.createElement('option');
        option.value = member.id;
        option.textContent = member.name || `${member['First Name']} ${member['Last Name']}`;
        dropdown.appendChild(option);
      });
    }
    
    // Set up event listeners
    function setupEventListeners() {
      // Export option selection
      const exportOptions = document.querySelectorAll('.export-option');
      exportOptions.forEach(option => {
        option.addEventListener('click', function() {
          // Remove selected class from all options
          exportOptions.forEach(opt => opt.classList.remove('selected'));
          
          // Add selected class to clicked option
          this.classList.add('selected');
          
          // Update selected format
          selectedFormat = this.getAttribute('data-format');
          
          // Update preview
          updatePreview();
        });
      });
      
      // Filter changes
      document.getElementById('teamMember').addEventListener('change', updatePreview);
      document.getElementById('sessionType').addEventListener('change', updatePreview);
      document.getElementById('dateFrom').addEventListener('change', updatePreview);
      document.getElementById('dateTo').addEventListener('change', updatePreview);
      
      // Include content checkboxes
      document.getElementById('includeSessionInfo').addEventListener('change', updatePreview);
      document.getElementById('includeNotes').addEventListener('change', updatePreview);
      document.getElementById('includeActionItems').addEventListener('change', updatePreview);
      document.getElementById('includeReflections').addEventListener('change', updatePreview);
      document.getElementById('includeConfidential').addEventListener('change', updatePreview);
      document.getElementById('includeNextSteps').addEventListener('change', updatePreview);
      
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', function() {
        google.script.host.close();
      });
      
      // Export button
      document.getElementById('exportBtn').addEventListener('click', function() {
        exportData();
      });
    }
    
    // Set default dates (last 30 days)
    function setDefaultDates() {
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(today.getDate() - 30);
      
      // Format dates as YYYY-MM-DD
      document.getElementById('dateFrom').value = formatDate(thirtyDaysAgo);
      document.getElementById('dateTo').value = formatDate(today);
    }
    
    // Update preview based on selected options
    function updatePreview() {
      // Check if an export format is selected
      if (!selectedFormat) {
        document.querySelector('.preview-placeholder').style.display = '';
        document.querySelector('.preview-table').style.display = 'none';
        return;
      }
      
      // Show loading state
      document.querySelector('.preview-placeholder').innerHTML = `
        <i class="fas fa-spinner fa-spin"></i>
        <p>Generating preview...</p>
      `;
      document.querySelector('.preview-placeholder').style.display = '';
      document.querySelector('.preview-table').style.display = 'none';
      
      // Get filter values
      const filters = {
        teamMember: document.getElementById('teamMember').value,
        sessionType: document.getElementById('sessionType').value,
        dateFrom: document.getElementById('dateFrom').value,
        dateTo: document.getElementById('dateTo').value,
        includeSessionInfo: document.getElementById('includeSessionInfo').checked,
        includeNotes: document.getElementById('includeNotes').checked,
        includeActionItems: document.getElementById('includeActionItems').checked,
        includeReflections: document.getElementById('includeReflections').checked,
        includeConfidential: document.getElementById('includeConfidential').checked,
        includeNextSteps: document.getElementById('includeNextSteps').checked,
        format: selectedFormat
      };
      
      // Call server function to get preview data
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            previewData = result.data || [];
            displayPreview(previewData, selectedFormat);
          } else {
            // Show error in preview
            document.querySelector('.preview-placeholder').innerHTML = `
              <i class="fas fa-exclamation-triangle"></i>
              <p>${result.message || 'Error generating preview'}</p>
            `;
            document.querySelector('.preview-placeholder').style.display = '';
            document.querySelector('.preview-table').style.display = 'none';
          }
        })
        .withFailureHandler(function(error) {
          // Show error in preview
          document.querySelector('.preview-placeholder').innerHTML = `
            <i class="fas fa-exclamation-triangle"></i>
            <p>Error generating preview: ${error}</p>
          `;
          document.querySelector('.preview-placeholder').style.display = '';
          document.querySelector('.preview-table').style.display = 'none';
        })
        .getExportPreview(filters);
    }
    
    // Display preview based on format and data
    function displayPreview(data, format) {
      if (!data || data.length === 0) {
        document.querySelector('.preview-placeholder').innerHTML = `
          <i class="fas fa-search"></i>
          <p>No data found matching your filters</p>
        `;
        document.querySelector('.preview-placeholder').style.display = '';
        document.querySelector('.preview-table').style.display = 'none';
        return;
      }
      
      // Display preview based on format
      switch (format) {
        case 'spreadsheet':
          displayTablePreview(data);
          break;
          
        case 'pdf':
        case 'summary':
        case 'email':
          displayTextPreview(data, format);
          break;
          
        default:
          // Show generic preview placeholder
          document.querySelector('.preview-placeholder').innerHTML = `
            <i class="fas fa-file-search"></i>
            <p>Select an export format and apply filters to see a preview</p>
          `;
          document.querySelector('.preview-placeholder').style.display = '';
          document.querySelector('.preview-table').style.display = 'none';
      }
    }
    
    // Display table preview (for spreadsheet export)
    function displayTablePreview(data) {
      const tableBody = document.getElementById('previewTableBody');
      tableBody.innerHTML = '';
      
      // Show only first 5 items for preview
      const previewData = data.slice(0, 5);
      
      previewData.forEach(session => {
        const row = document.createElement('tr');
        
        row.innerHTML = `
          <td>${session.teamMemberName || 'N/A'}</td>
          <td>${formatDisplayDate(session.date) || 'N/A'}</td>
          <td>${session.type || 'Regular'}</td>
          <td>${session.topics || 'N/A'}</td>
          <td>${session.actionItems ? session.actionItems.length : '0'}</td>
        `;
        
        tableBody.appendChild(row);
      });
      
      // Add a "more data" row if there are more than 5 items
      if (data.length > 5) {
        const moreRow = document.createElement('tr');
        moreRow.innerHTML = `<td colspan="5" style="text-align: center; color: var(--text-tertiary);">... ${data.length - 5} more rows not shown in preview</td>`;
        tableBody.appendChild(moreRow);
      }
      
      document.querySelector('.preview-placeholder').style.display = 'none';
      document.querySelector('.preview-table').style.display = 'table';
    }
    
    // Display text preview (for PDF, summary, email exports)
    function displayTextPreview(data, format) {
      // Create a placeholder with format-specific message
      let previewMessage = '';
      let previewIcon = '';
      
      switch (format) {
        case 'pdf':
          previewIcon = 'fas fa-file-pdf';
          previewMessage = `PDF report will include ${data.length} one-on-one sessions`;
          break;
          
        case 'summary':
          previewIcon = 'fas fa-file-alt';
          previewMessage = `Executive summary will highlight key points from ${data.length} sessions`;
          break;
          
        case 'email':
          previewIcon = 'fas fa-envelope';
          previewMessage = `Email report will contain data from ${data.length} sessions`;
          break;
      }
      
      document.querySelector('.preview-placeholder').innerHTML = `
        <i class="${previewIcon}"></i>
        <p>${previewMessage}</p>
        <p style="font-size: 12px; margin-top: 8px;">Due to the complexity of the format, full preview is not available.</p>
      `;
      
      document.querySelector('.preview-placeholder').style.display = '';
      document.querySelector('.preview-table').style.display = 'none';
    }
    
    // Export data with selected options
    function exportData() {
      // Validate if an export format is selected
      if (!selectedFormat) {
        alert('Please select an export format');
        return;
      }
      
      // Show loading indicator on button
      document.getElementById('loadingIndicator').classList.add('show');
      
      // Show loading overlay for longer operations
      if (selectedFormat === 'pdf' || selectedFormat === 'email') {
        showLoading(true);
      }
      
      // Get export options
      const exportOptions = {
        teamMember: document.getElementById('teamMember').value,
        sessionType: document.getElementById('sessionType').value,
        dateFrom: document.getElementById('dateFrom').value,
        dateTo: document.getElementById('dateTo').value,
        includeSessionInfo: document.getElementById('includeSessionInfo').checked,
        includeNotes: document.getElementById('includeNotes').checked,
        includeActionItems: document.getElementById('includeActionItems').checked,
        includeReflections: document.getElementById('includeReflections').checked,
        includeConfidential: document.getElementById('includeConfidential').checked,
        includeNextSteps: document.getElementById('includeNextSteps').checked,
        format: selectedFormat
      };
      
      // Call server function to export data
      google.script.run
        .withSuccessHandler(function(result) {
          // Hide loading indicators
          document.getElementById('loadingIndicator').classList.remove('show');
          hideLoading();
          
          if (result.success) {
            // Show success message and close dialog if needed
            if (result.message) {
              alert(result.message);
            }
            
            // For email format, we stay on the page
            if (selectedFormat !== 'email') {
              google.script.host.close();
            }
          } else {
            alert('Error: ' + (result.message || 'Failed to export data'));
          }
        })
        .withFailureHandler(function(error) {
          // Hide loading indicators
          document.getElementById('loadingIndicator').classList.remove('show');
          hideLoading();
          
          alert('Error: ' + error);
        })
        .exportOneOnOneData(exportOptions);
    }
    
    // Show/hide loading overlay
    function showLoading(show) {
      const overlay = document.getElementById('loadingOverlay');
      overlay.classList.toggle('show', show);
    }
    
    // Hide loading overlay
    function hideLoading() {
      showLoading(false);
    }
    
    // Format date for input value (YYYY-MM-DD)
    function formatDate(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      
      return `${year}-${month}-${day}`;
    }
    
    // Format date for display
    function formatDisplayDate(dateStr) {
      if (!dateStr) return '';
      
      try {
        const date = new Date(dateStr);
        return date.toLocaleDateString('en-US', {
          month: 'short',
          day: 'numeric',
          year: 'numeric'
        });
      } catch (e) {
        return dateStr;
      }
    }
  </script>
</body>
</html>




/**
 * OneOnOneService.gs - Handles all functionality related to one-on-one meeting notes
 * 
 * 🌟 Provides functions for:
 * - One-on-one sheet initialization
 * - Creating one-on-one sessions
 * - Retrieving and updating session data
 * - Follow-up management
 * - Reports and analytics
 */

/**
 * 📝 Initialize the One-on-One Notes sheet with required headers
 * @return {Boolean} Success flag
 */
function initializeOneOnOneSheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(CONFIG.SHEETS.ONE_ON_ONE);
    
    // Create sheet if it doesn't exist
    if (!sheet) {
      sheet = ss.insertSheet(CONFIG.SHEETS.ONE_ON_ONE);
    }
    
    // Set up headers
    const headers = [
      'Session ID',
      'Team Member ID',
      'Team Member Name',
      'Session Date',
      'Preparation Notes',
      'Discussion Topics',
      'Performance Highlights',
      'Areas for Development',
      'Action Items',
      'Follow-up Date',
      'Overall Notes',
      'Status',
      'Created By',
      'Created Date',
      'Modified Date'
    ];
    
    // Check if headers already exist
    const existingHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Only set headers if they don't match
    if (existingHeaders.length !== headers.length || !headers.every((header, i) => header === existingHeaders[i])) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
      
      // Format the sheet
      sheet.autoResizeColumns(1, headers.length);
    }
    
    return true;
  } catch (error) {
    logError('initializeOneOnOneSheet', error);
    return false;
  }
}

/**
 * 🧹 Clear one-on-one cache
 * Call this function any time one-on-one data is modified
 * @return {Boolean} Success flag
 */
function clearOneOnOneCache() {
  try {
    const cache = CacheService.getScriptCache();
    cache.remove('oneOnOneCache');
    cache.remove('upcomingOneOnOnesCache');
    return true;
  } catch (error) {
    logError('clearOneOnOneCache', error);
    return false;
  }
}

/**
 * 📋 Get all one-on-one sessions with proper caching
 * @return {Object} Result with one-on-one sessions
 */
function getAllOneOnOneSessions() {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cachedData = cache.get('oneOnOneCache');
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.ONE_ON_ONE);
    
    if (!sheet) {
      return { 
        success: false, 
        message: 'One-on-One sheet not found. Please run initialization.',
        data: []
      };
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return { success: true, message: 'No sessions found.', data: [] };
    }
    
    const data = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    const sessions = data
      .filter(row => row[0]) // Filter out empty rows (check if Session ID exists)
      .map(row => {
        const session = {};
        headers.forEach((header, index) => {
          session[header] = row[index];
        });
        return session;
      });
    
    const result = { success: true, data: sessions };
    
    // Cache the result for 5 minutes
    cache.put('oneOnOneCache', JSON.stringify(result), 300);
    
    return result;
  } catch (error) {
    logError('getAllOneOnOneSessions', error);
    return { 
      success: false, 
      message: 'Error retrieving one-on-one sessions: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 🔍 Get one-on-one sessions for a specific team member
 * @param {String} teamMemberId - Team member ID
 * @return {Object} Result with team member's one-on-one sessions
 */
function getOneOnOneSessionsByTeamMember(teamMemberId) {
  try {
    if (!teamMemberId) {
      return { 
        success: false, 
        message: 'Team member ID is required',
        data: []
      };
    }
    
    // Get team member details first to validate
    const teamMemberResult = getTeamMemberById(teamMemberId);
    if (!teamMemberResult.success) {
      return { 
        success: false, 
        message: 'Team member not found: ' + teamMemberResult.message,
        data: []
      };
    }
    
    // Get all sessions
    const sessionsResult = getAllOneOnOneSessions();
    if (!sessionsResult.success) {
      return sessionsResult;
    }
    
    // Filter sessions for this team member
    const teamMemberSessions = sessionsResult.data
      .filter(session => session['Team Member ID'] === teamMemberId)
      .sort((a, b) => new Date(b['Session Date']) - new Date(a['Session Date'])); // Sort by date (newest first)
    
    return { 
      success: true, 
      data: teamMemberSessions,
      teamMember: {
        id: teamMemberResult.data['Team Member ID'],
        name: teamMemberResult.data['Full Name']
      }
    };
  } catch (error) {
    logError('getOneOnOneSessionsByTeamMember', error);
    return { 
      success: false, 
      message: 'Error retrieving one-on-one sessions: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 🔍 Get a specific one-on-one session by ID
 * @param {String} sessionId - Session ID
 * @return {Object} Result with session data
 */
function getOneOnOneSessionById(sessionId) {
  try {
    if (!sessionId) {
      return { success: false, message: 'Session ID is required' };
    }
    
    // Get all sessions
    const sessionsResult = getAllOneOnOneSessions();
    if (!sessionsResult.success) {
      return sessionsResult;
    }
    
    // Find the specific session
    const session = sessionsResult.data.find(s => s['Session ID'] === sessionId);
    
    if (!session) {
      return { success: false, message: 'Session not found', data: null };
    }
    
    // Get team member details for additional context
    let teamMemberDetails = { name: session['Team Member Name'] };
    const teamMemberResult = getTeamMemberById(session['Team Member ID']);
    
    if (teamMemberResult.success) {
      teamMemberDetails = {
        id: teamMemberResult.data['Team Member ID'],
        name: teamMemberResult.data['Full Name'],
        email: teamMemberResult.data['Email'],
        status: teamMemberResult.data['Status']
      };
    }
    
    return { 
      success: true, 
      data: session,
      teamMember: teamMemberDetails
    };
  } catch (error) {
    logError('getOneOnOneSessionById', error);
    return { 
      success: false, 
      message: 'Error retrieving session: ' + error.toString(),
      data: null
    };
  }
}

/**
 * 📅 Get upcoming one-on-one sessions
 * @param {Number} limit - Maximum number of sessions to return
 * @return {Object} Result with upcoming sessions
 */
function getUpcomingOneOnOneSessions(limit = 10) {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cacheKey = `upcomingOneOnOnesCache_${limit}`;
    const cachedData = cache.get(cacheKey);
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    // Get all sessions
    const sessionsResult = getAllOneOnOneSessions();
    if (!sessionsResult.success) {
      return sessionsResult;
    }
    
    const now = new Date();
    
    // Filter for upcoming follow-up sessions
    const upcomingSessions = sessionsResult.data
      .filter(session => {
        if (!session['Follow-up Date']) return false;
        const followupDate = new Date(session['Follow-up Date']);
        return followupDate >= now;
      })
      .sort((a, b) => new Date(a['Follow-up Date']) - new Date(b['Follow-up Date'])); // Sort by date (soonest first)
    
    // Limit to requested amount
    const limitedSessions = upcomingSessions.slice(0, limit);
    
    // Enrich with team member data
    const enrichedSessions = limitedSessions.map(session => {
      // Get team member details if possible
      let teamMember = { name: session['Team Member Name'] };
      const teamMemberResult = getTeamMemberById(session['Team Member ID']);
      
      if (teamMemberResult.success) {
        teamMember = {
          id: teamMemberResult.data['Team Member ID'],
          name: teamMemberResult.data['Full Name'],
          email: teamMemberResult.data['Email'],
          status: teamMemberResult.data['Status']
        };
      }
      
      return {
        sessionId: session['Session ID'],
        teamMember: teamMember,
        followUpDate: new Date(session['Follow-up Date']),
        actionItems: session['Action Items'] || ''
      };
    });
    
    const result = { 
      success: true, 
      data: enrichedSessions
    };
    
    // Cache the result for 5 minutes
    cache.put(cacheKey, JSON.stringify(result), 300);
    
    return result;
  } catch (error) {
    logError('getUpcomingOneOnOneSessions', error);
    return { 
      success: false, 
      message: 'Error retrieving upcoming one-on-one sessions: ' + error.toString(),
      data: []
    };
  }
}

/**
 * ➕ Create new one-on-one session
 * @param {Object} sessionData - One-on-one session data
 * @return {Object} Result with success flag and session ID
 */
function createOneOnOneSession(sessionData) {
  try {
    // Validate required fields
    if (!sessionData.teamMemberId) {
      return { 
        success: false, 
        message: 'Team member ID is required'
      };
    }
    
    if (!sessionData.sessionDate) {
      return { 
        success: false, 
        message: 'Session date is required'
      };
    }
    
    // Get team member details to validate
    const teamMemberResult = getTeamMemberById(sessionData.teamMemberId);
    if (!teamMemberResult.success) {
      return { 
        success: false, 
        message: 'Invalid team member: ' + teamMemberResult.message
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.ONE_ON_ONE);
    
    if (!sheet) {
      // Initialize sheet if it doesn't exist
      initializeOneOnOneSheet();
      sheet = ss.getSheetByName(CONFIG.SHEETS.ONE_ON_ONE);
    }
    
    // Generate a unique session ID
    const sessionId = 'SESSION-' + Utilities.getUuid().substring(0, 8).toUpperCase();
    
    // Current date for timestamps
    const now = new Date();
    
    // Get headers to ensure correct column order
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Prepare session data row
    const sessionRow = headers.map(header => {
      switch (header) {
        case 'Session ID':
          return sessionId;
        case 'Team Member ID':
          return sessionData.teamMemberId;
        case 'Team Member Name':
          return teamMemberResult.data['Full Name'];
        case 'Session Date':
          return new Date(sessionData.sessionDate);
        case 'Preparation Notes':
          return sessionData.preparationNotes || '';
        case 'Discussion Topics':
          return sessionData.discussionTopics || '';
        case 'Performance Highlights':
          return sessionData.performanceHighlights || '';
        case 'Areas for Development':
          return sessionData.areasForDevelopment || '';
        case 'Action Items':
          return sessionData.actionItems || '';
        case 'Follow-up Date':
          return sessionData.followupDate ? new Date(sessionData.followupDate) : null;
        case 'Overall Notes':
          return sessionData.overallNotes || '';
        case 'Status':
          return sessionData.status || 'Completed';
        case 'Created By':
          return Session.getEffectiveUser().getEmail();
        case 'Created Date':
          return now;
        case 'Modified Date':
          return now;
        default:
          return '';
      }
    });
    
    // Add new row to sheet
    sheet.appendRow(sessionRow);
    
    // Update team member's last and next one-on-one dates
    updateTeamMemberOneOnOneDates(
      sessionData.teamMemberId, 
      new Date(sessionData.sessionDate),
      sessionData.followupDate ? new Date(sessionData.followupDate) : null
    );
    
    // Clear cache
    clearOneOnOneCache();
    
    return { 
      success: true, 
      message: 'One-on-one session created successfully',
      sessionId: sessionId
    };
  } catch (error) {
    logError('createOneOnOneSession', error);
    return { 
      success: false, 
      message: 'Error creating one-on-one session: ' + error.toString()
    };
  }
}

/**
 * 🔄 Update an existing one-on-one session
 * @param {Object} sessionData - Session data to update
 * @return {Object} Result with success flag
 */
function updateOneOnOneSession(sessionData) {
  try {
    // Validate required fields
    if (!sessionData.sessionId) {
      return { 
        success: false, 
        message: 'Session ID is required'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.ONE_ON_ONE);
    
    if (!sheet) {
      return { 
        success: false, 
        message: 'One-on-One sheet not found'
      };
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find session row
    const sessionIdCol = headers.indexOf('Session ID');
    if (sessionIdCol === -1) {
      return { 
        success: false, 
        message: 'Invalid sheet structure - Session ID column not found'
      };
    }
    
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][sessionIdCol] === sessionData.sessionId) {
        rowIndex = i + 1; // +1 because arrays are 0-indexed but sheets are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      return { 
        success: false, 
        message: 'Session not found'
      };
    }
    
    // Current date for timestamp
    const now = new Date();
    
    // Update each field if provided
    headers.forEach((header, colIndex) => {
      let value = null;
      
      switch (header) {
        case 'Preparation Notes':
          value = sessionData.preparationNotes;
          break;
        case 'Discussion Topics':
          value = sessionData.discussionTopics;
          break;
        case 'Performance Highlights':
          value = sessionData.performanceHighlights;
          break;
        case 'Areas for Development':
          value = sessionData.areasForDevelopment;
          break;
        case 'Action Items':
          value = sessionData.actionItems;
          break;
        case 'Follow-up Date':
          value = sessionData.followupDate ? new Date(sessionData.followupDate) : null;
          break;
        case 'Overall Notes':
          value = sessionData.overallNotes;
          break;
        case 'Status':
          value = sessionData.status;
          break;
        case 'Modified Date':
          value = now;
          break;
        default:
          // Skip fields that shouldn't be updated
          return;
      }
      
      // Only update if value is provided
      if (value !== undefined && value !== null) {
        sheet.getRange(rowIndex, colIndex + 1).setValue(value);
      }
    });
    
    // Update team member's next one-on-one date if follow-up date was updated
    if (sessionData.followupDate !== undefined) {
      const teamMemberId = data[rowIndex - 1][headers.indexOf('Team Member ID')];
      const sessionDate = data[rowIndex - 1][headers.indexOf('Session Date')];
      
      updateTeamMemberOneOnOneDates(
        teamMemberId, 
        sessionDate,
        sessionData.followupDate ? new Date(sessionData.followupDate) : null
      );
    }
    
    // Clear cache
    clearOneOnOneCache();
    
    return { 
      success: true, 
      message: 'One-on-one session updated successfully'
    };
  } catch (error) {
    logError('updateOneOnOneSession', error);
    return { 
      success: false, 
      message: 'Error updating one-on-one session: ' + error.toString() 
    };
  }
}

/**
 * 🔄 Update team member's one-on-one dates
 * @param {String} teamMemberId - Team member ID
 * @param {Date} lastDate - Last one-on-one date
 * @param {Date} nextDate - Next one-on-one date
 * @return {Boolean} Success flag
 */
function updateTeamMemberOneOnOneDates(teamMemberId, lastDate, nextDate) {
  try {
    if (!teamMemberId) {
      return false;
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!sheet) {
      return false;
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find column indices
    const idCol = headers.indexOf('Team Member ID');
    const lastOneOnOneCol = headers.indexOf('Last One-on-One');
    const nextOneOnOneCol = headers.indexOf('Next One-on-One');
    
    if (idCol === -1 || lastOneOnOneCol === -1 || nextOneOnOneCol === -1) {
      return false;
    }
    
    // Find team member row
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === teamMemberId) {
        rowIndex = i + 1; // +1 because arrays are 0-indexed but sheets are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      return false;
    }
    
    // Update last date if provided and newer than current
    if (lastDate) {
      const currentLastDate = data[rowIndex - 1][lastOneOnOneCol];
      
      if (!currentLastDate || new Date(lastDate) > new Date(currentLastDate)) {
        sheet.getRange(rowIndex, lastOneOnOneCol + 1).setValue(lastDate);
      }
    }
    
    // Update next date if provided
    if (nextDate) {
      sheet.getRange(rowIndex, nextOneOnOneCol + 1).setValue(nextDate);
    }
    
    // Clear team member cache
    clearTeamMemberCache();
    
    return true;
  } catch (error) {
    logError('updateTeamMemberOneOnOneDates', error);
    return false;
  }
}

/**
 * 📊 Get one-on-one statistics for dashboard
 * @return {Object} One-on-one statistics
 */
function getOneOnOneStatistics() {
  try {
    // Get all sessions
    const sessionsResult = getAllOneOnOneSessions();
    if (!sessionsResult.success || sessionsResult.data.length === 0) {
      return {
        success: true,
        data: {
          totalSessions: 0,
          upcomingSessions: 0,
          completedLastMonth: 0,
          averagePerMonth: 0,
          mostRecent: null
        }
      };
    }
    
    // Calculate statistics
    const now = new Date();
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
    
    // Count upcoming sessions
    const upcomingSessions = sessionsResult.data.filter(session => {
      if (!session['Follow-up Date']) return false;
      const followupDate = new Date(session['Follow-up Date']);
      return followupDate >= now;
    }).length;
    
    // Count sessions completed in the last month
    const completedLastMonth = sessionsResult.data.filter(session => {
      const sessionDate = new Date(session['Session Date']);
      return sessionDate >= oneMonthAgo && sessionDate <= now;
    }).length;
    
    // Find most recent session
    const sortedSessions = [...sessionsResult.data].sort((a, b) => 
      new Date(b['Session Date']) - new Date(a['Session Date'])
    );
    
    const mostRecent = sortedSessions.length > 0 ? {
      date: new Date(sortedSessions[0]['Session Date']),
      teamMemberName: sortedSessions[0]['Team Member Name']
    } : null;
    
    // Calculate average per month (over the last 6 months)
    const sixMonthsAgo = new Date();
    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
    
    const sessionsInLastSixMonths = sessionsResult.data.filter(session => {
      const sessionDate = new Date(session['Session Date']);
      return sessionDate >= sixMonthsAgo;
    }).length;
    
    const averagePerMonth = sessionsInLastSixMonths / 6;
    
    return {
      success: true,
      data: {
        totalSessions: sessionsResult.data.length,
        upcomingSessions: upcomingSessions,
        completedLastMonth: completedLastMonth,
        averagePerMonth: averagePerMonth,
        mostRecent: mostRecent
      }
    };
  } catch (error) {
    logError('getOneOnOneStatistics', error);
    return { 
      success: false, 
      message: 'Error calculating one-on-one statistics: ' + error.toString()
    };
  }
}

/**
 * 🔍 Search one-on-one sessions
 * @param {Object} searchParams - Search parameters
 * @return {Object} Search results
 */
function searchOneOnOneSessions(searchParams = {}) {
  try {
    // Get all sessions
    const sessionsResult = getAllOneOnOneSessions();
    if (!sessionsResult.success) {
      return sessionsResult;
    }
    
    let filteredSessions = sessionsResult.data;
    
    // Filter by team member ID
    if (searchParams.teamMemberId) {
      filteredSessions = filteredSessions.filter(session => 
        session['Team Member ID'] === searchParams.teamMemberId
      );
    }
    
    // Filter by team member name
    if (searchParams.teamMemberName) {
      const searchName = searchParams.teamMemberName.toLowerCase();
      filteredSessions = filteredSessions.filter(session => 
        session['Team Member Name'] && 
        session['Team Member Name'].toLowerCase().includes(searchName)
      );
    }
    
    // Filter by date range (start date)
    if (searchParams.startDate) {
      const startDate = new Date(searchParams.startDate);
      filteredSessions = filteredSessions.filter(session => 
        new Date(session['Session Date']) >= startDate
      );
    }
    
    // Filter by date range (end date)
    if (searchParams.endDate) {
      const endDate = new Date(searchParams.endDate);
      filteredSessions = filteredSessions.filter(session => 
        new Date(session['Session Date']) <= endDate
      );
    }
    
    // Filter by status
    if (searchParams.status) {
      filteredSessions = filteredSessions.filter(session => 
        session['Status'] === searchParams.status
      );
    }
    
    // Filter by text search in notes/topics/action items
    if (searchParams.searchText) {
      const searchText = searchParams.searchText.toLowerCase();
      filteredSessions = filteredSessions.filter(session => {
        return (
          (session['Preparation Notes'] && 
           session['Preparation Notes'].toLowerCase().includes(searchText)) ||
          (session['Discussion Topics'] && 
           session['Discussion Topics'].toLowerCase().includes(searchText)) ||
          (session['Performance Highlights'] && 
           session['Performance Highlights'].toLowerCase().includes(searchText)) ||
          (session['Areas for Development'] && 
           session['Areas for Development'].toLowerCase().includes(searchText)) ||
          (session['Action Items'] && 
           session['Action Items'].toLowerCase().includes(searchText)) ||
          (session['Overall Notes'] && 
           session['Overall Notes'].toLowerCase().includes(searchText))
        );
      });
    }
    
    // Sort results
    if (searchParams.sortBy) {
      const sortField = searchParams.sortBy;
      const sortDirection = searchParams.sortDirection === 'asc' ? 1 : -1;
      
      filteredSessions.sort((a, b) => {
        if (sortField === 'Session Date' || sortField === 'Follow-up Date') {
          return sortDirection * (new Date(a[sortField]) - new Date(b[sortField]));
        } else {
          return sortDirection * (a[sortField] < b[sortField] ? -1 : 1);
        }
      });
    } else {
      // Default sort by session date descending
      filteredSessions.sort((a, b) => new Date(b['Session Date']) - new Date(a['Session Date']));
    }
    
    // Apply limit
    if (searchParams.limit && searchParams.limit > 0) {
      filteredSessions = filteredSessions.slice(0, searchParams.limit);
    }
    
    return { 
      success: true, 
      data: filteredSessions,
      totalResults: filteredSessions.length
    };
  } catch (error) {
    logError('searchOneOnOneSessions', error);
    return { 
      success: false, 
      message: 'Error searching one-on-one sessions: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 📅 Find team members who need one-on-one sessions
 * @param {Number} daysThreshold - Number of days since last one-on-one to consider overdue
 * @return {Object} Team members who need sessions
 */
function findTeamMembersNeedingOneOnOnes(daysThreshold = 30) {
  try {
    // Get all active team members
    const teamMembersResult = getActiveTeamMembers();
    if (!teamMembersResult.success) {
      return teamMembersResult;
    }
    
    const now = new Date();
    const threshold = new Date();
    threshold.setDate(threshold.getDate() - daysThreshold);
    
    // Filter team members who haven't had a one-on-one recently
    const needingSessions = teamMembersResult.data
      .filter(member => {
        // If no last one-on-one or it's older than threshold
        if (!member['Last One-on-One']) return true;
        return new Date(member['Last One-on-One']) < threshold;
      })
      .map(member => ({
        id: member['Team Member ID'],
        name: member['Full Name'],
        email: member['Email'],
        lastOneOnOne: member['Last One-on-One'] ? new Date(member['Last One-on-One']) : null,
        daysSinceLastSession: member['Last One-on-One'] ? 
          Math.floor((now - new Date(member['Last One-on-One'])) / (1000 * 60 * 60 * 24)) : null
      }))
      .sort((a, b) => {
        // Sort by: never had a session first, then by days since last session
        if (!a.lastOneOnOne && !b.lastOneOnOne) return 0;
        if (!a.lastOneOnOne) return -1;
        if (!b.lastOneOnOne) return 1;
        return b.daysSinceLastSession - a.daysSinceLastSession;
      });
    
    return { 
      success: true, 
      data: needingSessions
    };
  } catch (error) {
    logError('findTeamMembersNeedingOneOnOnes', error);
    return { 
      success: false, 
      message: 'Error finding team members needing one-on-ones: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 📧 Send follow-up email for one-on-one session
 * @param {String} sessionId - Session ID
 * @return {Object} Result with success flag
 */
function sendOneOnOneFollowupEmail(sessionId) {
  try {
    // Get session details
    const sessionResult = getOneOnOneSessionById(sessionId);
    if (!sessionResult.success) {
      return sessionResult;
    }
    
    const session = sessionResult.data;
    const teamMember = sessionResult.teamMember;
    
    // Validate email address
    if (!teamMember.email) {
      return { 
        success: false, 
        message: 'Team member email address not found'
      };
    }
    
    // Format session date
    const sessionDate = new Date(session['Session Date']);
    const formattedDate = Utilities.formatDate(sessionDate, Session.getScriptTimeZone(), 'MMMM d, yyyy');
    
    // Prepare email content
    const subject = `One-on-One Follow-up: ${formattedDate}`;
    
    const actionItems = session['Action Items'] || 'No action items recorded';
    const formattedActionItems = actionItems
      .split('\n')
      .map(item => `• ${item}`)
      .join('\n');
    
    // Create HTML email with nice formatting
    const htmlBody = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; color: #333;">
        <div style="background-color: #5540af; color: white; padding: 15px; border-radius: 5px 5px 0 0;">
          <h2 style="margin: 0;">One-on-One Follow-up</h2>
          <p style="margin: 5px 0 0;">Session on ${formattedDate}</p>
        </div>
        
        <div style="border: 1px solid #ddd; border-top: none; padding: 20px; border-radius: 0 0 5px 5px;">
          <p>Hello ${teamMember.name},</p>
          
          <p>Thank you for our one-on-one discussion on ${formattedDate}. This email summarizes the key points and action items we discussed.</p>
          
          ${session['Discussion Topics'] ? `
            <h3 style="color: #5540af; margin-top: 20px;">Topics Discussed</h3>
            <p>${session['Discussion Topics']}</p>
          ` : ''}
          
          ${session['Performance Highlights'] ? `
            <h3 style="color: #5540af; margin-top: 20px;">Performance Highlights</h3>
            <p>${session['Performance Highlights']}</p>
          ` : ''}
          
          ${session['Areas for Development'] ? `
            <h3 style="color: #5540af; margin-top: 20px;">Areas for Development</h3>
            <p>${session['Areas for Development']}</p>
          ` : ''}
          
          <h3 style="color: #5540af; margin-top: 20px;">Action Items</h3>
          <pre style="background: #f5f5f5; padding: 10px; border-radius: 5px;">${formattedActionItems}</pre>
          
          ${session['Follow-up Date'] ? `
            <p style="margin-top: 20px;">Our next one-on-one is scheduled for <strong>${Utilities.formatDate(new Date(session['Follow-up Date']), Session.getScriptTimeZone(), 'MMMM d, yyyy')}</strong>.</p>
          ` : ''}
          
          <p style="margin-top: 20px;">If you have any questions or need to discuss anything before our next meeting, please don't hesitate to reach out.</p>
          
          <p style="margin-top: 20px;">Best regards,<br>${Session.getEffectiveUser().getEmail().split('@')[0]}</p>
        </div>
      </div>
    `;
    
    // Send the email
    GmailApp.sendEmail(
      teamMember.email,
      subject,
      `One-on-One Follow-up: ${formattedDate}\n\nHello ${teamMember.name},\n\nThank you for our one-on-one discussion on ${formattedDate}. This email summarizes the key points and action items we discussed.\n\nAction Items:\n${formattedActionItems}\n\nBest regards,\n${Session.getEffectiveUser().getEmail().split('@')[0]}`, 
      {
        htmlBody: htmlBody,
        name: 'Team Lead Dashboard'
      }
    );
    
    // Update session status to indicate follow-up was sent
    updateOneOnOneSession({
      sessionId: sessionId,
      status: 'Follow-up Sent'
    });
    
    return { 
      success: true, 
      message: `Follow-up email sent to ${teamMember.name} at ${teamMember.email}`
    };
  } catch (error) {
    logError('sendOneOnOneFollowupEmail', error);
    return { 
      success: false, 
      message: 'Error sending follow-up email: ' + error.toString()
    };
  }
}

/**
 * 🗓️ Schedule a new one-on-one session
 * @param {Object} sessionData - New session data
 * @return {Object} Result with success flag and calendar event ID
 */
function scheduleOneOnOneSession(sessionData) {
  try {
    // Validate required fields
    if (!sessionData.teamMemberId || !sessionData.sessionDate) {
      return { 
        success: false, 
        message: 'Team member ID and session date are required'
      };
    }
    
    // Get team member details
    const teamMemberResult = getTeamMemberById(sessionData.teamMemberId);
    if (!teamMemberResult.success) {
      return { 
        success: false, 
        message: 'Invalid team member: ' + teamMemberResult.message
      };
    }
    
    const teamMember = teamMemberResult.data;
    
    // Parse session date and duration
    const startTime = new Date(sessionData.sessionDate);
    const endTime = new Date(startTime.getTime() + (sessionData.duration || 30) * 60000);
    
    // Create calendar event
    let calendarEvent;
    
    // Check if we should create a calendar event
    if (sessionData.createCalendarEvent) {
      // Get default calendar
      const calendar = CalendarApp.getDefaultCalendar();
      
      // Create event
      calendarEvent = calendar.createEvent(
        `One-on-One: ${teamMember['Full Name']}`,
        startTime,
        endTime,
        {
          description: sessionData.preparationNotes || 'One-on-one meeting',
          guests: teamMember['Email'],
          sendInvites: true
        }
      );
    }
    
    // Pre-create one-on-one session in the sheet (optional)
    if (sessionData.createSession) {
      createOneOnOneSession({
        teamMemberId: sessionData.teamMemberId,
        sessionDate: startTime,
        preparationNotes: sessionData.preparationNotes || '',
        discussionTopics: sessionData.discussionTopics || '',
        status: 'Scheduled'
      });
    } else {
      // Just update the team member's next one-on-one date
      updateTeamMemberOneOnOneDates(
        sessionData.teamMemberId,
        null, // Don't update last session
        startTime // Update next session
      );
    }
    
    return { 
      success: true, 
      message: 'One-on-one session scheduled successfully',
      eventId: calendarEvent ? calendarEvent.getId() : null
    };
  } catch (error) {
    logError('scheduleOneOnOneSession', error);
    return { 
      success: false, 
      message: 'Error scheduling one-on-one session: ' + error.toString()
    };
  }
}

/**
 * 📝 Create blank one-on-one session template
 * @param {String} teamMemberId - Team member ID
 * @return {Object} One-on-one session template
 */
function createOneOnOneTemplate(teamMemberId) {
  try {
    if (!teamMemberId) {
      return { 
        success: false, 
        message: 'Team member ID is required'
      };
    }
    
    // Get team member details
    const teamMemberResult = getTeamMemberById(teamMemberId);
    if (!teamMemberResult.success) {
      return { 
        success: false, 
        message: 'Invalid team member: ' + teamMemberResult.message
      };
    }
    
    const member = teamMemberResult.data;
    
    // Get previous sessions for this team member
    const previousSessionsResult = getOneOnOneSessionsByTeamMember(teamMemberId);
    
    // Get previous action items if available (from most recent session)
    let previousActionItems = '';
    if (previousSessionsResult.success && previousSessionsResult.data.length > 0) {
      previousActionItems = previousSessionsResult.data[0]['Action Items'] || '';
    }
    
    // Create template with default sections
    const template = {
      teamMemberId: teamMemberId,
      teamMemberName: member['Full Name'],
      sessionDate: new Date(),
      preparationNotes: `
Topics to discuss with ${member['First Name']}:
- Check-in and general well-being
- Progress updates
- Performance feedback
- Current challenges
- Goals and priorities
- Resource needs`,
      
      discussionTopics: '',
      
      performanceHighlights: '',
      
      areasForDevelopment: '',
      
      actionItems: previousActionItems ? `Previous action items:\n${previousActionItems}\n\nNew action items:` : '',
      
      overallNotes: '',
      
      followupDate: ''
    };
    
    return { 
      success: true, 
      data: template
    };
  } catch (error) {
    logError('createOneOnOneTemplate', error);
    return { 
      success: false, 
      message: 'Error creating one-on-one template: ' + error.toString()
    };
  }
}
/**
 * 🔍 Find one-on-one sessions that need follow-up
 * @param {Number} daysOverdue - Number of days after which a session needs follow-up
 * @return {Object} Result with sessions needing follow-up
 */
function findOverdueOneOnOneSessions(daysOverdue = 7) {
  try {
    // Get all sessions
    const sessionsResult = getAllOneOnOneSessions();
    if (!sessionsResult.success) {
      return sessionsResult;
    }
    
    const now = new Date();
    
    // Filter for completed sessions without follow-up
    const overdueSessionsData = sessionsResult.data.filter(session => {
      // Skip if already has follow-up or is not completed
      if (session['Status'] === 'Follow-up Sent' || session['Status'] !== 'Completed') {
        return false;
      }
      
      // Check if session is old enough to need follow-up
      const sessionDate = new Date(session['Session Date']);
      const daysSinceSession = Math.floor((now - sessionDate) / (1000 * 60 * 60 * 24));
      
      return daysSinceSession >= daysOverdue;
    });
    
    // Sort by date (oldest first)
    overdueSessionsData.sort((a, b) => new Date(a['Session Date']) - new Date(b['Session Date']));
    
    // Format for display
    const overdueSessions = overdueSessionsData.map(session => {
      // Get team member details if possible
      let teamMember = { name: session['Team Member Name'] };
      const teamMemberResult = getTeamMemberById(session['Team Member ID']);
      
      if (teamMemberResult.success) {
        teamMember = {
          id: teamMemberResult.data['Team Member ID'],
          name: teamMemberResult.data['Full Name'],
          email: teamMemberResult.data['Email'],
          status: teamMemberResult.data['Status']
        };
      }
      
      const sessionDate = new Date(session['Session Date']);
      const daysSinceSession = Math.floor((now - sessionDate) / (1000 * 60 * 60 * 24));
      
      return {
        sessionId: session['Session ID'],
        teamMember: teamMember,
        sessionDate: sessionDate,
        formattedDate: Utilities.formatDate(sessionDate, Session.getScriptTimeZone(), 'MMM d, yyyy'),
        daysSinceSession: daysSinceSession,
        hasActionItems: !!session['Action Items'],
        status: session['Status']
      };
    });
    
    return { 
      success: true, 
      data: overdueSessions
    };
  } catch (error) {
    logError('findOverdueOneOnOneSessions', error);
    return { 
      success: false, 
      message: 'Error finding overdue one-on-one sessions: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 📝 Create one-on-one session template with team member history
 * @param {String} teamMemberId - Team member ID
 * @param {Date} sessionDate - Date for the session
 * @return {Object} Template with prefilled data based on history
 */
function createOneOnOneSessionTemplate(teamMemberId, sessionDate) {
  try {
    if (!teamMemberId) {
      return { 
        success: false, 
        message: 'Team member ID is required'
      };
    }
    
    // Get team member details
    const teamMemberResult = getTeamMemberById(teamMemberId);
    if (!teamMemberResult.success) {
      return { 
        success: false, 
        message: 'Invalid team member: ' + teamMemberResult.message
      };
    }
    
    const teamMember = teamMemberResult.data;
    const now = sessionDate || new Date();
    
    // Get previous sessions for this team member
    const previousSessionsResult = getOneOnOneSessionsByTeamMember(teamMemberId);
    let previousSessions = [];
    
    if (previousSessionsResult.success) {
      previousSessions = previousSessionsResult.data;
    }
    
    // Get previous action items that might not be completed
    let pendingActionItems = '';
    
    if (previousSessions.length > 0) {
      const lastSession = previousSessions[0]; // Already sorted newest first
      const actionItems = lastSession['Action Items'] || '';
      
      // Find uncompleted action items (ones without [DONE] or [COMPLETE])
      if (actionItems) {
        const items = actionItems.split('\n');
        const pendingItems = items.filter(item => {
          const normalizedItem = item.trim().toLowerCase();
          return normalizedItem && 
                 !normalizedItem.includes('[done]') && 
                 !normalizedItem.includes('[complete]') &&
                 !normalizedItem.includes('✓') && 
                 !normalizedItem.includes('✅');
        });
        
        if (pendingItems.length > 0) {
          pendingActionItems = '--- Previous Action Items ---\n' + pendingItems.join('\n') + '\n\n';
        }
      }
    }
    
    // Get performance data for discussion
    const startDate = new Date(now);
    startDate.setDate(startDate.getDate() - 30); // Last 30 days
    
    let performanceNotes = '';
    
    // Get metrics for this team member
    const metricsResult = getTeamMemberMetrics(teamMemberId, startDate, now);
    
    if (metricsResult.success && metricsResult.data.length > 0) {
      // Calculate average metrics
      const metrics = metricsResult.data;
      const answerRates = metrics.map(m => Number(m['Answer Rate']) || 0).filter(val => val > 0);
      const onQueuePercentages = metrics.map(m => Number(m['On Queue Percentage']) || 0).filter(val => val > 0);
      
      const avgAnswerRate = answerRates.length > 0 ? 
        answerRates.reduce((a, b) => a + b, 0) / answerRates.length : 0;
        
      const avgOnQueuePercentage = onQueuePercentages.length > 0 ? 
        onQueuePercentages.reduce((a, b) => a + b, 0) / onQueuePercentages.length : 0;
      
      performanceNotes += `Recent performance metrics:\n`;
      performanceNotes += `- Answer Rate: ${Math.round(avgAnswerRate)}%\n`;
      performanceNotes += `- On Queue Percentage: ${Math.round(avgOnQueuePercentage)}%\n`;
      
      // Add call volume
      let totalCallsAccepted = 0;
      metrics.forEach(metric => {
        totalCallsAccepted += Number(metric['Calls Accepted']) || 0;
      });
      
      performanceNotes += `- Total Calls Accepted (last 30 days): ${totalCallsAccepted}\n\n`;
    }
    
    // Get QA scores if available
    const qaResult = getTeamMemberQAData(teamMemberId, startDate, now);
    
    if (qaResult && qaResult.overallScore) {
      performanceNotes += `Recent QA review score: ${Math.round(qaResult.overallScore)}%\n`;
      performanceNotes += `Total reviews: ${qaResult.totalReviews}\n\n`;
    }
    
    // Create template with default sections
    const template = {
      teamMemberId: teamMemberId,
      teamMemberName: teamMember['Full Name'],
      sessionDate: now,
      preparationNotes: `
${performanceNotes}
Topics to discuss with ${teamMember['First Name']}:
- Check-in and general well-being
- Review last month's performance
- Discussion of ongoing projects/tasks
- Areas for improvement
- Support needed
- Goals for the next month`,
      
      discussionTopics: '',
      
      performanceHighlights: '',
      
      areasForDevelopment: '',
      
      actionItems: pendingActionItems + 'New action items:\n- ',
      
      overallNotes: '',
      
      followupDate: ''
    };
    
    return { 
      success: true, 
      data: template
    };
  } catch (error) {
    logError('createOneOnOneSessionTemplate', error);
    return { 
      success: false, 
      message: 'Error creating one-on-one session template: ' + error.toString()
    };
  }
}

/**
 * 📊 Generate one-on-one analytics
 * @param {Date} startDate - Optional start date for analysis
 * @param {Date} endDate - Optional end date for analysis
 * @return {Object} One-on-one analytics data
 */
function generateOneOnOneAnalytics(startDate, endDate) {
  try {
    // Set default date range if not provided (last 6 months)
    if (!startDate) {
      startDate = new Date();
      startDate.setMonth(startDate.getMonth() - 6);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Get all one-on-one sessions
    const sessionsResult = getAllOneOnOneSessions();
    if (!sessionsResult.success) {
      return sessionsResult;
    }
    
    // Filter for date range
    const sessions = sessionsResult.data.filter(session => {
      const sessionDate = new Date(session['Session Date']);
      return sessionDate >= startDate && sessionDate <= endDate;
    });
    
    // Get active team members
    const teamMembersResult = getActiveTeamMembers();
    let activeTeamMembers = [];
    
    if (teamMembersResult.success) {
      activeTeamMembers = teamMembersResult.data;
    }
    
    // Count sessions by team member
    const sessionsByMember = {};
    const sessionsByMonth = {};
    let totalSessions = 0;
    
    sessions.forEach(session => {
      const memberId = session['Team Member ID'];
      const sessionDate = new Date(session['Session Date']);
      const monthKey = `${sessionDate.getFullYear()}-${(sessionDate.getMonth() + 1).toString().padStart(2, '0')}`;
      
      // Count by team member
      if (!sessionsByMember[memberId]) {
        sessionsByMember[memberId] = {
          id: memberId,
          name: session['Team Member Name'],
          count: 0,
          months: {}
        };
      }
      
      sessionsByMember[memberId].count++;
      
      // Track months for this team member
      if (!sessionsByMember[memberId].months[monthKey]) {
        sessionsByMember[memberId].months[monthKey] = 0;
      }
      sessionsByMember[memberId].months[monthKey]++;
      
      // Count by month
      if (!sessionsByMonth[monthKey]) {
        sessionsByMonth[monthKey] = {
          month: monthKey,
          count: 0,
          teamMembers: new Set()
        };
      }
      
      sessionsByMonth[monthKey].count++;
      sessionsByMonth[monthKey].teamMembers.add(memberId);
      
      totalSessions++;
    });
    
    // Calculate additional metrics
    const uniqueTeamMembers = new Set(sessions.map(s => s['Team Member ID'])).size;
    const averagePerTeamMember = uniqueTeamMembers > 0 ? totalSessions / uniqueTeamMembers : 0;
    
    // Calculate coverage (% of active team members who had at least one session)
    const coverage = activeTeamMembers.length > 0 ? 
      (uniqueTeamMembers / activeTeamMembers.length) * 100 : 0;
    
    // Team members with no sessions
    const memberIdsWithSessions = new Set(sessions.map(s => s['Team Member ID']));
    const teamMembersWithNoSessions = activeTeamMembers.filter(
      member => !memberIdsWithSessions.has(member['Team Member ID'])
    ).map(member => ({
      id: member['Team Member ID'],
      name: member['Full Name']
    }));
    
    // Format monthly data for charts
    const monthlyData = Object.keys(sessionsByMonth)
      .sort() // Sort chronologically
      .map(key => {
        const data = sessionsByMonth[key];
        const [year, month] = key.split('-');
        const date = new Date(parseInt(year), parseInt(month) - 1, 1);
        
        return {
          month: key,
          label: Utilities.formatDate(date, Session.getScriptTimeZone(), 'MMM yyyy'),
          count: data.count,
          uniqueTeamMembers: data.teamMembers.size
        };
      });
    
    // Team member data for charts
    const teamMemberData = Object.values(sessionsByMember)
      .sort((a, b) => b.count - a.count) // Sort by count (descending)
      .map(member => ({
        id: member.id,
        name: member.name,
        count: member.count,
        coverage: Object.keys(member.months).length, // Number of months with at least one session
        coveragePercentage: Object.keys(member.months).length / getMonthCount(startDate, endDate) * 100
      }));
    
    return { 
      success: true, 
      data: {
        totalSessions: totalSessions,
        uniqueTeamMembers: uniqueTeamMembers,
        averagePerTeamMember: averagePerTeamMember,
        coverage: coverage,
        teamMembersWithNoSessions: teamMembersWithNoSessions,
        monthlyData: monthlyData,
        teamMemberData: teamMemberData,
        dateRange: {
          start: startDate,
          end: endDate,
          formattedStart: Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'MMM d, yyyy'),
          formattedEnd: Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'MMM d, yyyy')
        }
      }
    };
  } catch (error) {
    logError('generateOneOnOneAnalytics', error);
    return { 
      success: false, 
      message: 'Error generating one-on-one analytics: ' + error.toString()
    };
  }
}

/**
 * 📅 Get number of months between two dates
 * @param {Date} startDate - Start date
 * @param {Date} endDate - End date
 * @return {Number} Number of months
 */
function getMonthCount(startDate, endDate) {
  return (endDate.getFullYear() - startDate.getFullYear()) * 12 + 
         (endDate.getMonth() - startDate.getMonth()) + 1;
}

/**
 * 📝 Get common discussion topics from past one-on-ones
 * @return {Object} List of common discussion topics
 */
function getCommonDiscussionTopics() {
  try {
    // Get all sessions
    const sessionsResult = getAllOneOnOneSessions();
    if (!sessionsResult.success) {
      return sessionsResult;
    }
    
    // Extract all discussion topics
    const allTopics = [];
    
    sessionsResult.data.forEach(session => {
      if (session['Discussion Topics']) {
        const topics = session['Discussion Topics']
          .split('\n')
          .map(t => t.trim())
          .filter(t => t.length > 0 && !t.startsWith('---') && !t.startsWith('=='));
        
        allTopics.push(...topics);
      }
    });
    
    // Count occurrences of each topic
    const topicCounts = {};
    
    allTopics.forEach(topic => {
      // Normalize topic by removing leading dashes, etc.
      const normalizedTopic = topic.replace(/^[-*•]/, '').trim();
      
      if (normalizedTopic.length > 3) { // Skip very short entries
        if (!topicCounts[normalizedTopic]) {
          topicCounts[normalizedTopic] = 0;
        }
        
        topicCounts[normalizedTopic]++;
      }
    });
    
    // Sort topics by frequency
    const sortedTopics = Object.keys(topicCounts)
      .map(topic => ({
        topic: topic,
        count: topicCounts[topic]
      }))
      .sort((a, b) => b.count - a.count);
    
    // Group topics into categories
    const categoryKeywords = {
      'performance': ['performance', 'metrics', 'goals', 'achievement', 'kpi', 'target', 'score'],
      'development': ['development', 'growth', 'learning', 'training', 'skill', 'improve', 'course'],
      'wellbeing': ['wellbeing', 'health', 'wellness', 'stress', 'balance', 'mental', 'work-life'],
      'career': ['career', 'promotion', 'advancement', 'path', 'future', 'role', 'position'],
      'team': ['team', 'collaboration', 'colleagues', 'cooperation', 'working together'],
      'feedback': ['feedback', 'review', 'recognition', 'critique', 'praise', 'constructive'],
      'projects': ['project', 'task', 'assignment', 'work', 'deadline', 'schedule', 'initiative']
    };
    
    const categorizedTopics = {};
    
    Object.keys(categoryKeywords).forEach(category => {
      categorizedTopics[category] = [];
    });
    
    // Categorize topics based on keywords
    sortedTopics.forEach(topicObj => {
      const topic = topicObj.topic.toLowerCase();
      let matched = false;
      
      for (const [category, keywords] of Object.entries(categoryKeywords)) {
        if (keywords.some(keyword => topic.includes(keyword))) {
          categorizedTopics[category].push(topicObj);
          matched = true;
          break;
        }
      }
      
      // If no category matched, put in "other"
      if (!matched) {
        if (!categorizedTopics['other']) {
          categorizedTopics['other'] = [];
        }
        categorizedTopics['other'].push(topicObj);
      }
    });
    
    return { 
      success: true, 
      data: {
        allTopics: sortedTopics.slice(0, 50), // Top 50 topics
        categorizedTopics: categorizedTopics
      }
    };
  } catch (error) {
    logError('getCommonDiscussionTopics', error);
    return { 
      success: false, 
      message: 'Error retrieving common discussion topics: ' + error.toString()
    };
  }
}

/**
 * 📅 Create a one-on-one schedule for the team
 * @param {Object} options - Schedule options
 * @return {Object} Generated schedule
 */
function createOneOnOneSchedule(options = {}) {
  try {
    // Set defaults
    const frequency = options.frequency || 'monthly'; // weekly, biweekly, monthly
    const durationMinutes = options.duration || 30;
    const startDate = options.startDate ? new Date(options.startDate) : new Date();
    const endDate = options.endDate ? new Date(options.endDate) : new Date(startDate.getTime() + (90 * 24 * 60 * 60 * 1000)); // 90 days
    const startHour = options.startHour || 9; // 9 AM
    const endHour = options.endHour || 16; // 4 PM
    const daysOfWeek = options.daysOfWeek || [1, 2, 3, 4, 5]; // Mon-Fri
    const excludeDates = options.excludeDates || [];
    
    // Get active team members
    const teamMembersResult = getActiveTeamMembers();
    if (!teamMembersResult.success) {
      return { 
        success: false, 
        message: 'Failed to retrieve team members: ' + teamMembersResult.message
      };
    }
    
    const teamMembers = teamMembersResult.data;
    
    // Calculate session interval based on frequency
    let daysInterval;
    switch(frequency) {
      case 'weekly':
        daysInterval = 7;
        break;
      case 'biweekly':
        daysInterval = 14;
        break;
      case 'monthly':
        daysInterval = 30;
        break;
      default:
        daysInterval = 30;
    }
    
    // Generate schedule
    const schedule = [];
    let currentDate = new Date(startDate);
    
    // Process each team member
    for (const member of teamMembers) {
      let memberDate = new Date(currentDate);
      let sessionsScheduled = 0;
      
      // Calculate how many sessions to schedule for this period
      const endTime = endDate.getTime();
      
      while (memberDate.getTime() <= endTime && sessionsScheduled < 6) { // Limit to 6 sessions per member
        // Check if date is valid
        if (isValidScheduleDate(memberDate, daysOfWeek, excludeDates)) {
          // Find an available time slot
          const timeSlot = findAvailableTimeSlot(schedule, memberDate, startHour, endHour, durationMinutes);
          
          if (timeSlot) {
            // Add session to schedule
            schedule.push({
              teamMemberId: member['Team Member ID'],
              teamMemberName: member['Full Name'],
              date: new Date(timeSlot),
              formattedDate: Utilities.formatDate(timeSlot, Session.getScriptTimeZone(), 'EEEE, MMMM d, yyyy'),
              formattedTime: Utilities.formatDate(timeSlot, Session.getScriptTimeZone(), 'h:mm a'),
              duration: durationMinutes
            });
            
            sessionsScheduled++;
          }
        }
        
        // Move to next potential date
        memberDate.setDate(memberDate.getDate() + daysInterval);
      }
      
      // Move start date for next team member
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    // Sort schedule by date
    schedule.sort((a, b) => a.date.getTime() - b.date.getTime());
    
    return { 
      success: true, 
      data: {
        schedule: schedule,
        options: {
          frequency: frequency,
          duration: durationMinutes,
          startDate: startDate,
          endDate: endDate,
          startHour: startHour,
          endHour: endHour,
          daysOfWeek: daysOfWeek
        }
      }
    };
  } catch (error) {
    logError('createOneOnOneSchedule', error);
    return { 
      success: false, 
      message: 'Error creating one-on-one schedule: ' + error.toString()
    };
  }
}

/**
 * ✅ Check if a date is valid for scheduling
 * @param {Date} date - Date to check
 * @param {Array} validDays - Array of valid days (0-6, where 0 is Sunday)
 * @param {Array} excludeDates - Array of dates to exclude
 * @return {Boolean} True if date is valid
 */
function isValidScheduleDate(date, validDays, excludeDates) {
  // Check if day of week is valid
  if (!validDays.includes(date.getDay())) {
    return false;
  }
  
  // Check against excluded dates
  const dateString = Utilities.formatDate(date, Session.getScriptTimeZone(), 'yyyy-MM-dd');
  
  for (const excludeDate of excludeDates) {
    const excludeDateString = Utilities.formatDate(new Date(excludeDate), Session.getScriptTimeZone(), 'yyyy-MM-dd');
    
    if (dateString === excludeDateString) {
      return false;
    }
  }
  
  return true;
}

/**
 * 🔍 Find available time slot for a one-on-one
 * @param {Array} schedule - Current schedule
 * @param {Date} date - Target date
 * @param {Number} startHour - Earliest hour (0-23)
 * @param {Number} endHour - Latest hour (0-23)
 * @param {Number} durationMinutes - Duration in minutes
 * @return {Date} Available time slot or null if none found
 */
function findAvailableTimeSlot(schedule, date, startHour, endHour, durationMinutes) {
  // Create date objects for the start and end of the workday
  const dayStart = new Date(date);
  dayStart.setHours(startHour, 0, 0, 0);
  
  const dayEnd = new Date(date);
  dayEnd.setHours(endHour, 0, 0, 0);
  
  // Get scheduled times for this day
  const sameDaySchedule = schedule.filter(session => {
    const sessionDate = session.date;
    return sessionDate.getFullYear() === date.getFullYear() && 
           sessionDate.getMonth() === date.getMonth() && 
           sessionDate.getDate() === date.getDate();
  });
  
  // If no sessions scheduled yet today, use start of day
  if (sameDaySchedule.length === 0) {
    return dayStart;
  }
  
  // Check for gaps between scheduled sessions
  sameDaySchedule.sort((a, b) => a.date.getTime() - b.date.getTime());
  
  // Check if there's a slot at the start of the day
  if (sameDaySchedule[0].date.getTime() - dayStart.getTime() >= durationMinutes * 60 * 1000) {
    return dayStart;
  }
  
  // Check for gaps between sessions
  for (let i = 0; i < sameDaySchedule.length - 1; i++) {
    const currentEndTime = new Date(sameDaySchedule[i].date);
    currentEndTime.setMinutes(currentEndTime.getMinutes() + sameDaySchedule[i].duration);
    
    const nextStartTime = sameDaySchedule[i + 1].date;
    
    if (nextStartTime.getTime() - currentEndTime.getTime() >= durationMinutes * 60 * 1000) {
      return currentEndTime;
    }
  }
  
  // Check if there's a slot at the end of the day
  const lastEndTime = new Date(sameDaySchedule[sameDaySchedule.length - 1].date);
  lastEndTime.setMinutes(lastEndTime.getMinutes() + sameDaySchedule[sameDaySchedule.length - 1].duration);
  
  if (dayEnd.getTime() - lastEndTime.getTime() >= durationMinutes * 60 * 1000) {
    return lastEndTime;
  }
  
  // No available slot found
  return null;
}

/**
 * 📝 Export one-on-one sessions to Google Calendar
 * @param {Array} sessionIds - Array of session IDs to export
 * @return {Object} Result with success flag
 */
function exportOneOnOnesToCalendar(sessionIds) {
  try {
    if (!sessionIds || !Array.isArray(sessionIds) || sessionIds.length === 0) {
      return { 
        success: false, 
        message: 'No session IDs provided'
      };
    }
    
    const successfulExports = [];
    const failedExports = [];
    
    // Get all sessions
    const sessionsResult = getAllOneOnOneSessions();
    if (!sessionsResult.success) {
      return sessionsResult;
    }
    
    const calendar = CalendarApp.getDefaultCalendar();
    
    // Process each session ID
    for (const sessionId of sessionIds) {
      try {
        // Find the session
        const session = sessionsResult.data.find(s => s['Session ID'] === sessionId);
        
        if (!session) {
          failedExports.push({
            sessionId: sessionId,
            error: 'Session not found'
          });
          continue;
        }
        
        // Get team member details
        let teamMemberEmail = '';
        const teamMemberResult = getTeamMemberById(session['Team Member ID']);
        
        if (teamMemberResult.success && teamMemberResult.data['Email']) {
          teamMemberEmail = teamMemberResult.data['Email'];
        }
        
        // Create calendar event
        const sessionDate = new Date(session['Session Date']);
        const endTime = new Date(sessionDate);
        endTime.setMinutes(endTime.getMinutes() + 30); // Default to 30-min sessions
        
        // Prepare event description
        let description = 'One-on-One Meeting with ' + session['Team Member Name'];
        
        if (session['Discussion Topics']) {
          description += '\n\nTopics:\n' + session['Discussion Topics'];
        }
        
        if (session['Preparation Notes']) {
          description += '\n\nPreparation Notes:\n' + session['Preparation Notes'];
        }
        
        // Create event options
        const eventOptions = {
          description: description
        };
        
        // Add guest if email is available
        if (teamMemberEmail) {
          eventOptions.guests = teamMemberEmail;
        }
        
        // Create the event
        const event = calendar.createEvent(
          `One-on-One: ${session['Team Member Name']}`,
          sessionDate,
          endTime,
          eventOptions
        );
        
        successfulExports.push({
          sessionId: sessionId,
          eventId: event.getId(),
          teamMemberName: session['Team Member Name'],
          date: sessionDate
        });
      } catch (sessionError) {
        failedExports.push({
          sessionId: sessionId,
          error: sessionError.toString()
        });
      }
    }
    
    return { 
      success: true, 
      data: {
        successfulExports: successfulExports,
        failedExports: failedExports,
        totalSuccess: successfulExports.length,
        totalFailed: failedExports.length
      }
    };
  } catch (error) {
    logError('exportOneOnOnesToCalendar', error);
    return { 
      success: false, 
      message: 'Error exporting one-on-ones to calendar: ' + error.toString()
    };
  }
}

/**
 * 🛠️ Process recurring one-on-ones
 * Sets up recurring sessions based on previously scheduled ones
 * @return {Object} Result with processed sessions
 */
function processRecurringOneOnOnes() {
  try {
    // Get completed sessions
    const sessionsResult = getAllOneOnOneSessions();
    if (!sessionsResult.success) {
      return sessionsResult;
    }
    
    const now = new Date();
    
    // Find completed sessions with follow-up dates that don't have a corresponding scheduled session
    const completedSessions = sessionsResult.data.filter(session => 
      session['Status'] === 'Completed' && 
      session['Follow-up Date'] && 
      new Date(session['Follow-up Date']) > now
    );
    
    // Process each completed session
    const newSessionsCreated = [];
    const alreadyScheduled = [];
    const errors = [];
    
    for (const session of completedSessions) {
      try {
        const followUpDate = new Date(session['Follow-up Date']);
        const teamMemberId = session['Team Member ID'];
        const teamMemberName = session['Team Member Name'];
        
        // Check if a session is already scheduled for this follow-up
        const existingFollowUp = sessionsResult.data.some(s => 
          s['Team Member ID'] === teamMemberId && 
          s['Session Date'] && 
          Math.abs(new Date(s['Session Date']) - followUpDate) < 24 * 60 * 60 * 1000 // Within 24 hours
        );
        
        if (existingFollowUp) {
          alreadyScheduled.push({
            teamMemberId: teamMemberId,
            teamMemberName: teamMemberName,
            followUpDate: followUpDate
          });
          continue;
        }
        
        // Create template for new session
        const templateResult = createOneOnOneSessionTemplate(teamMemberId, followUpDate);
        
        if (!templateResult.success) {
          errors.push({
            teamMemberId: teamMemberId,
            teamMemberName: teamMemberName,
            error: templateResult.message
          });
          continue;
        }
        
        // Create new session
        const newSessionData = {
          teamMemberId: teamMemberId,
          sessionDate: followUpDate,
          preparationNotes: templateResult.data.preparationNotes,
          discussionTopics: '',
          status: 'Scheduled'
        };
        
        const createResult = createOneOnOneSession(newSessionData);
        
        if (createResult.success) {
          newSessionsCreated.push({
            teamMemberId: teamMemberId,
            teamMemberName: teamMemberName,
            sessionDate: followUpDate,
            sessionId: createResult.sessionId
          });
        } else {
          errors.push({
            teamMemberId: teamMemberId,
            teamMemberName: teamMemberName,
            error: createResult.message
          });
        }
      } catch (sessionError) {
        errors.push({
          teamMemberId: session['Team Member ID'],
          teamMemberName: session['Team Member Name'],
          error: sessionError.toString()
        });
      }
    }
    
    return { 
      success: true, 
      data: {
        newSessionsCreated: newSessionsCreated,
        alreadyScheduled: alreadyScheduled,
        errors: errors,
        totalCreated: newSessionsCreated.length,
        totalAlreadyScheduled: alreadyScheduled.length,
        totalErrors: errors.length
      }
    };
  } catch (error) {
    logError('processRecurringOneOnOnes', error);
    return { 
      success: false, 
      message: 'Error processing recurring one-on-ones: ' + error.toString()
    };
  }
}
/**
 * 📋 Get team member options for dropdowns with manual entry support
 * @return {Object} Result with team member options
 */
function getTeamMemberOptions() {
  try {
    const result = getActiveTeamMembers();
    
    if (!result.success || result.data.length === 0) {
      return {
        success: false,
        message: "No team members found. Please add team members first.",
        data: []
      };
    }
    
    // Format data for select dropdowns
    const options = result.data.map(member => ({
      id: member['Team Member ID'],
      name: member['Full Name'],
      firstName: member['First Name'],
      lastName: member['Last Name'],
      email: member['Email'] || ''
    }));
    
    return {
      success: true,
      data: options
    };
  } catch (error) {
    logError('getTeamMemberOptions', error);
    return { success: false, message: error.toString(), data: [] };
  }
}
/**
 * 👥 Get all team members
 * @return {Object} Result with team members data
 */
function getAllTeamMembers() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!sheet) {
      return {
        success: false,
        message: 'Team Members sheet not found. Please run initialization.',
        data: []
      };
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return { 
        success: true, 
        message: 'No team members found.', 
        data: [] 
      };
    }
    
    const data = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    const teamMembers = data
      .filter(row => row[0]) // Filter out empty rows
      .map(row => {
        const member = {};
        headers.forEach((header, index) => {
          member[header] = row[index];
        });
        return member;
      });
    
    return { 
      success: true, 
      data: teamMembers 
    };
  } catch (error) {
    logError('getAllTeamMembers', error);
    return { 
      success: false, 
      message: 'Error retrieving team members: ' + error.toString(),
      data: []
    };
  }
}




<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>One-on-One Session Details</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    .page-container {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      gap: 24px;
      min-height: 100vh;
      padding: 24px;
    }
    
    .main-content {
      grid-column: span 8;
      display: flex;
      flex-direction: column;
      gap: 24px;
    }
    
    .details-sidebar {
      grid-column: span 4;
      display: flex;
      flex-direction: column;
      gap: 24px;
      position: sticky;
      top: 24px;
      height: fit-content;
    }
    
    .page-header {
      background-color: white;
      border-radius: var(--radius-lg);
      padding: 24px;
      box-shadow: var(--shadow-md);
      position: relative;
      overflow: hidden;
    }
    
    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title-section {
      display: flex;
      flex-direction: column;
    }
    
    .header-meta {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 8px;
    }
    
    .session-type-tag {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      padding: 4px 10px;
      border-radius: var(--radius-md);
      font-size: 12px;
      font-weight: 500;
    }
    
    .tag-regular {
      background-color: rgba(85, 64, 175, 0.1);
      color: var(--primary-color);
    }
    
    .tag-performance {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--success-color);
    }
    
    .tag-coaching {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--warning-color);
    }
    
    .tag-development {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--info-color);
    }
    
    .session-date {
      font-size: 13px;
      color: var(--text-tertiary);
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .session-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
    }
    
    .session-subtitle {
      color: var(--text-secondary);
      font-size: 14px;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-outline {
      background-color: white;
      border: 1px solid var(--border-medium);
      color: var(--text-secondary);
    }
    
    .btn-outline:hover {
      border-color: var(--primary-color);
      color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(251, 113, 133, 0.4);
    }
    
    /* Tab navigation */
    .tabs-container {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }
    
    .tabs-navigation {
      display: flex;
      overflow-x: auto;
      scrollbar-width: thin;
      scrollbar-color: var(--primary-light) var(--bg-secondary);
    }
    
    .tabs-navigation::-webkit-scrollbar {
      height: 4px;
    }
    
    .tabs-navigation::-webkit-scrollbar-track {
      background: var(--bg-secondary);
    }
    
    .tabs-navigation::-webkit-scrollbar-thumb {
      background-color: var(--primary-light);
      border-radius: 20px;
    }
    
    .tab-button {
      padding: 16px 24px;
      font-weight: 500;
      color: var(--text-tertiary);
      background-color: transparent;
      border: none;
      cursor: pointer;
      position: relative;
      white-space: nowrap;
      transition: all var(--transition-fast);
    }
    
    .tab-button:hover {
      color: var(--primary-color);
    }
    
    .tab-button.active {
      color: var(--primary-color);
    }
    
    .tab-button.active::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 2px;
      background: var(--primary-gradient);
    }
    
    .tab-content {
      padding: 24px;
    }
    
    .tab-panel {
      display: none;
    }
    
    .tab-panel.active {
      display: block;
      animation: fadeIn 0.3s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(5px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    /* Session content */
    .section {
      margin-bottom: 24px;
    }
    
    .section-header {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 16px;
      padding-bottom: 8px;
      border-bottom: 1px solid var(--border-light);
    }
    
    .section-icon {
      width: 32px;
      height: 32px;
      border-radius: var(--radius-md);
      background: var(--primary-gradient);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 14px;
    }
    
    .section-title {
      font-family: 'Manrope', sans-serif;
      font-size: 16px;
      font-weight: 600;
    }
    
    .info-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 16px;
    }
    
    .info-item {
      display: flex;
      flex-direction: column;
    }
    
    .info-label {
      font-size: 12px;
      color: var(--text-tertiary);
      margin-bottom: 4px;
    }
    
    .info-value {
      font-weight: 500;
    }
    
    .rating-display {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .rating-badge {
      padding: 4px 12px;
      border-radius: var(--radius-md);
      font-weight: 500;
      font-size: 13px;
    }
    
    .rating-low {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--danger-color);
    }
    
    .rating-moderate {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--warning-color);
    }
    
    .rating-high {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--success-color);
    }
    
    .rating-very-high {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--info-color);
    }
    
    .notes-content {
      padding: 16px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      white-space: pre-wrap;
      line-height: 1.6;
    }
    
    /* Action items */
    .action-items-list {
      display: flex;
      flex-direction: column;
      gap: 12px;
    }
    
    .action-item {
      padding: 16px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      position: relative;
    }
    
    .action-item-header {
      display: flex;
      align-items: flex-start;
      gap: 12px;
      margin-bottom: 12px;
    }
    
    .action-checkbox {
      margin-top: 2px;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      border: 2px solid var(--border-medium);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      flex-shrink: 0;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .action-checkbox.completed {
      background-color: var(--success-color);
      border-color: var(--success-color);
    }
    
    .action-description {
      flex: 1;
      font-weight: 500;
    }
    
    .action-item-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 8px;
    }
    
    .action-meta {
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .action-assignee, .action-due-date {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .action-status {
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: 600;
      text-transform: uppercase;
    }
    
    .status-open {
      background-color: rgba(85, 64, 175, 0.1);
      color: var(--primary-color);
    }
    
    .status-completed {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--success-color);
    }
    
    .status-overdue {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--danger-color);
    }
    
    /* Meeting reflection */
    .reflection-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 16px;
    }
    
    .reflection-item {
      background-color: var(--bg-secondary);
      padding: 16px;
      border-radius: var(--radius-md);
      display: flex;
      flex-direction: column;
      gap: 12px;
    }
    
    .reflection-header {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .reflection-icon {
      width: 28px;
      height: 28px;
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--primary-gradient);
      color: white;
      font-size: 12px;
    }
    
    .reflection-title {
      font-weight: 600;
      font-size: 14px;
    }
    
    .reflection-content {
      font-size: 13px;
      line-height: 1.6;
      white-space: pre-wrap;
    }
    
    /* Sidebar components */
    .sidebar-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      overflow: hidden;
    }
    
    .sidebar-card-header {
      padding: 16px 20px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .sidebar-card-title {
      font-weight: 600;
      font-size: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .sidebar-card-icon {
      width: 28px;
      height: 28px;
      border-radius: var(--radius-md);
      background: var(--primary-gradient);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
    }
    
    .sidebar-card-body {
      padding: 20px;
    }
    
    /* Team member sidebar */
    .member-card {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
      padding-bottom: 20px;
    }
    
    .member-avatar {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: var(--primary-gradient);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 32px;
      font-weight: 600;
      margin-bottom: 16px;
      position: relative;
    }
    
    .member-avatar::before {
      content: '';
      position: absolute;
      top: -4px;
      left: -4px;
      right: -4px;
      bottom: -4px;
      background: conic-gradient(
        from 0deg,
        var(--primary-color),
        var(--secondary-color),
        var(--accent-color),
        var(--secondary-color),
        var(--primary-color)
      );
      border-radius: 50%;
      z-index: -1;
      opacity: 0.8;
      animation: rotate 4s linear infinite;
    }
    
    @keyframes rotate {
      0% { transform: rotate(0); }
      100% { transform: rotate(360deg); }
    }
    
    .member-name {
      font-weight: 600;
      font-size: 18px;
      margin-bottom: 4px;
    }
    
    .member-title {
      color: var(--text-tertiary);
      margin-bottom: 16px;
    }
    
    .member-stats {
      width: 100%;
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 12px;
    }
    
    .member-stat {
      padding: 8px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      text-align: center;
    }
    
    .stat-value {
      font-weight: 600;
      font-size: 16px;
      color: var(--primary-color);
    }
    
    .stat-label {
      font-size: 11px;
      color: var(--text-tertiary);
    }
    
    /* Next session card */
    .next-session {
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      padding: 16px;
      margin-top: 12px;
    }
    
    .next-session-date {
      font-weight: 600;
      margin-bottom: 4px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .next-session-time {
      color: var(--text-tertiary);
      font-size: 13px;
    }
    
    /* History card */
    .session-history {
      max-height: 300px;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 12px;
    }
    
    .history-item {
      padding: 12px;
      border-radius: var(--radius-md);
      background-color: var(--bg-secondary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .history-item:hover {
      background-color: var(--bg-tertiary);
    }
    
    .history-item.current {
      background-color: rgba(85, 64, 175, 0.1);
      border: 1px dashed var(--primary-color);
    }
    
    .history-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 4px;
    }
    
    .history-date {
      font-weight: 500;
      font-size: 13px;
    }
    
    .history-badge {
      font-size: 10px;
      padding: 2px 6px;
      border-radius: 10px;
    }
    
    .history-topics {
      font-size: 12px;
      color: var(--text-tertiary);
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      z-index: 1000;
      backdrop-filter: blur(5px);
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(85, 64, 175, 0.1);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    .loading-text {
      margin-top: 12px;
      font-weight: 500;
      color: var(--primary-color);
    }
    
    /* Responsive adjustments */
    @media (max-width: 992px) {
      .page-container {
        grid-template-columns: 1fr;
        gap: 16px;
      }
      
      .main-content, .details-sidebar {
        grid-column: 1;
      }
      
      .reflection-grid {
        grid-template-columns: 1fr;
      }
    }
    
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
      }
      
      .header-actions {
        width: 100%;
        display: grid;
        grid-template-columns: 1fr 1fr;
      }
      
      .info-grid {
        grid-template-columns: 1fr;
      }
      
      .tabs-navigation {
        overflow-x: auto;
      }
    }
  </style>
</head>

<body>
  <div class="page-container">
    <div class="main-content">
      <header class="page-header">
        <div class="header-content">
          <div class="header-title-section">
            <div class="header-meta">
              <div class="session-type-tag tag-regular" id="sessionTypeTag">Regular One-on-One</div>
              <div class="session-date" id="sessionDate">
                <i class="far fa-calendar-alt"></i> April 5, 2025
              </div>
            </div>
            <h1 class="session-title">One-on-One with <span id="memberName">John Doe</span></h1>
            <p class="session-subtitle" id="sessionDuration">30 minute session</p>
          </div>
          
          <div class="header-actions">
            <button class="btn btn-outline" id="backBtn">
              <i class="fas fa-arrow-left"></i> Back
            </button>
            <button class="btn btn-outline" id="emailBtn">
              <i class="fas fa-envelope"></i> Send Email
            </button>
            <button class="btn btn-primary" id="editBtn">
              <i class="fas fa-edit"></i> Edit
            </button>
          </div>
        </div>
      </header>
      
      <div class="tabs-container">
        <div class="tabs-navigation">
          <button class="tab-button active" data-tab="overview">
            <i class="fas fa-clipboard"></i> Overview
          </button>
          <button class="tab-button" data-tab="meeting">
            <i class="fas fa-comments"></i> Meeting Notes
          </button>
          <button class="tab-button" data-tab="action-items">
            <i class="fas fa-tasks"></i> Action Items
          </button>
          <button class="tab-button" data-tab="reflection">
            <i class="fas fa-lightbulb"></i> Reflection
          </button>
          <button class="tab-button" data-tab="email">
            <i class="fas fa-envelope"></i> Email Summary
          </button>
        </div>
        
        <div class="tab-content">
          <!-- Overview Tab -->
          <div class="tab-panel active" id="overview">
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-info-circle"></i>
                </div>
                <h2 class="section-title">Session Summary</h2>
              </div>
              
              <div class="info-grid">
                <div class="info-item">
                  <div class="info-label">Session Type</div>
                  <div class="info-value" id="overviewType">Regular One-on-One</div>
                </div>
                
                <div class="info-item">
                  <div class="info-label">Date & Time</div>
                  <div class="info-value" id="overviewDateTime">April 5, 2025, 10:30 AM</div>
                </div>
                
                <div class="info-item">
                  <div class="info-label">Duration</div>
                  <div class="info-value" id="overviewDuration">30 minutes</div>
                </div>
                
                <div class="info-item">
                  <div class="info-label">Status</div>
                  <div class="info-value" id="overviewStatus">Complete</div>
                </div>
              </div>
            </div>
            
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-user-check"></i>
                </div>
                <h2 class="section-title">Current Status</h2>
              </div>
              
              <div class="info-grid">
                <div class="info-item">
                  <div class="info-label">Workload Level</div>
                  <div class="info-value" id="workloadLevel">
                    <div class="rating-display">
                      <div class="rating-badge rating-high">Balanced</div>
                    </div>
                  </div>
                </div>
                
                <div class="info-item">
                  <div class="info-label">Energy/Motivation</div>
                  <div class="info-value" id="energyLevel">
                    <div class="rating-display">
                      <div class="rating-badge rating-high">High</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-comment-alt"></i>
                </div>
                <h2 class="section-title">Key Topics Discussed</h2>
              </div>
              
              <div class="notes-content" id="topicsContent">
                - Performance metrics and call quality
                - Recent challenges with difficult calls
                - Training opportunities for advanced de-escalation
                - Work-life balance and schedule preferences
              </div>
            </div>
            
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-tasks"></i>
                </div>
                <h2 class="section-title">Action Items</h2>
              </div>
              
              <div class="action-items-list" id="overviewActionItems">
                <div class="action-item">
                  <div class="action-item-header">
                    <div class="action-checkbox">
                      <i class="fas fa-check"></i>
                    </div>
                    <div class="action-description">Complete de-escalation training module in learning portal</div>
                  </div>
                  <div class="action-item-footer">
                    <div class="action-meta">
                      <div class="action-assignee">
                        <i class="fas fa-user"></i> John Doe
                      </div>
                      <div class="action-due-date">
                        <i class="fas fa-calendar"></i> April 15, 2025
                      </div>
                    </div>
                    <div class="action-status status-open">Open</div>
                  </div>
                </div>
                
                <div class="action-item">
                  <div class="action-item-header">
                    <div class="action-checkbox completed">
                      <i class="fas fa-check"></i>
                    </div>
                    <div class="action-description">Review call quality metrics and identify areas for improvement</div>
                  </div>
                  <div class="action-item-footer">
                    <div class="action-meta">
                      <div class="action-assignee">
                        <i class="fas fa-user"></i> John Doe
                      </div>
                      <div class="action-due-date">
                        <i class="fas fa-calendar"></i> April 8, 2025
                      </div>
                    </div>
                    <div class="action-status status-completed">Completed</div>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-calendar-alt"></i>
                </div>
                <h2 class="section-title">Next Steps</h2>
              </div>
              
              <div class="info-grid">
                <div class="info-item">
                  <div class="info-label">Next One-on-One</div>
                  <div class="info-value" id="nextSessionDate">April 19, 2025 at 10:30 AM</div>
                </div>
                
                <div class="info-item">
                  <div class="info-label">Focus Areas</div>
                  <div class="info-value" id="focusAreas">Progress on action items, training completion</div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Meeting Notes Tab -->
          <div class="tab-panel" id="meeting">
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-comment-dots"></i>
                </div>
                <h2 class="section-title">Quick Status Sync</h2>
              </div>
              
              <div class="info-grid">
                <div class="info-item">
                  <div class="info-label">Critical Discussion Points</div>
                  <div class="notes-content" id="criticalTopics">
                    Team member expressed challenges with handling emotionally charged calls. Would like more training on de-escalation techniques. Also requested feedback on recent performance metrics.
                  </div>
                </div>
                
                <div class="info-item">
                  <div class="info-label">Immediate Blockers</div>
                  <div class="notes-content" id="immediateBlockers">
                    Technical issues with headset causing some call quality problems. IT has been notified and replacement is on the way.
                  </div>
                </div>
              </div>
            </div>
            
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-chart-pie"></i>
                </div>
                <h2 class="section-title">Performance Deep Dive</h2>
              </div>
              
              <div class="info-item">
                <div class="info-label">Quantitative Metrics Review</div>
                <div class="notes-content" id="quantitativeMetrics">
                  - Call handling: 92% answer rate, exceeding target by 7%
                  - Average talk time: 12.5 minutes, within optimal range
                  - Call quality scores: 88% (above team average of 82%)
                  - First call resolution: 76% (team average is 70%)
                </div>
              </div>
              
              <div class="info-item" style="margin-top: 16px;">
                <div class="info-label">Qualitative Impact Assessment</div>
                <div class="notes-content" id="qualitativeImpact">
                                    John has demonstrated exceptional empathy and patience with callers, particularly in crisis situations. Has received positive feedback from several callers who specifically mentioned feeling heard and supported. Shows strong active listening skills and ability to identify underlying concerns.

Areas for growth include increasing technical knowledge of more complex products to reduce time spent finding information during calls.
                </div>
              </div>
              
              <div class="info-item" style="margin-top: 16px;">
                <div class="info-label">Strategic Insight Capture</div>
                <div class="notes-content" id="strategicInsight">
                  Strengths to leverage:
                  - Exceptional rapport building with callers
                  - Strong emotional intelligence and de-escalation skills
                  - Consistent quality scores above team average
                  
                  Development areas:
                  - Advanced technical knowledge of complex products
                  - Confidence in handling challenging situations independently
                  - Leadership skills for potential mentoring opportunities
                </div>
              </div>
            </div>
            
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-graduation-cap"></i>
                </div>
                <h2 class="section-title">Strategic Development Planning</h2>
              </div>
              
              <div class="info-item">
                <div class="info-label">Skill Mastery Mapping</div>
                <div class="notes-content" id="skillMapping">
                  Current proficiency levels:
                  - Crisis de-escalation: Intermediate (ready for advanced training)
                  - Product knowledge: Intermediate (needs deeper dive on complex products)
                  - Call management: Advanced
                  - Documentation: Advanced
                  
                  Learning resources identified:
                  - Advanced De-escalation Techniques course (available in LMS)
                  - Complex Products Deep Dive series (scheduled for next month)
                  - Mentoring Skills Workshop (opportunity for growth)
                </div>
              </div>
              
              <div class="info-item" style="margin-top: 16px;">
                <div class="info-label">Career Trajectory Alignment</div>
                <div class="notes-content" id="careerAlignment">
                  John expressed interest in eventually moving into a team lead position. We discussed:
                  - Timeline: 1-2 years
                  - Skills needed: mentoring, quality assessment, scheduling, team motivation
                  - Experience gaps: needs exposure to coaching and quality assessment
                  
                  Agreed to look for opportunities for John to shadow team leads and participate in quality review sessions to gain exposure.
                </div>
              </div>
            </div>
            
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-hands-helping"></i>
                </div>
                <h2 class="section-title">Support and Resource Optimization</h2>
              </div>
              
              <div class="info-grid">
                <div class="info-item">
                  <div class="info-label">Obstacle Identification</div>
                  <div class="notes-content" id="obstacleIdentification">
                    - Technical equipment issues (headset replacement needed)
                    - Knowledge gaps in complex products causing longer call times
                    - Limited visibility into career advancement opportunities
                    - Need for more advanced training materials
                  </div>
                </div>
                
                <div class="info-item">
                  <div class="info-label">Leadership Support Calibration</div>
                  <div class="notes-content" id="leadershipSupport">
                    Immediate needs:
                    - Expedite IT ticket for equipment replacement
                    - Provide access to complex product documentation
                    
                    Mentorship opportunities:
                    - Connect with Sarah (Team Lead) for shadowing session
                    - Schedule quality review participation next month
                    
                    Training recommendations:
                    - Enroll in Advanced De-escalation course
                    - Provide early access to Complex Products training
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Action Items Tab -->
          <div class="tab-panel" id="action-items">
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-handshake"></i>
                </div>
                <h2 class="section-title">Commitments Established</h2>
              </div>
              
              <div class="notes-content" id="commitmentsSynthesis">
                We established clear action items with specific ownership and timelines. John will focus on completing the training modules and reviewing performance metrics, while I will arrange shadowing opportunities and follow up on equipment issues. We agreed to check progress via email before our next scheduled one-on-one.

Key priorities:
1. Address technical equipment needs
2. Complete advanced training modules
3. Begin exposure to leadership/mentoring opportunities
              </div>
            </div>
            
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-tasks"></i>
                </div>
                <h2 class="section-title">Action Item Tracking</h2>
              </div>
              
              <div class="action-items-list" id="actionItemsList">
                <div class="action-item">
                  <div class="action-item-header">
                    <div class="action-checkbox">
                      <i class="fas fa-check"></i>
                    </div>
                    <div class="action-description">Complete advanced de-escalation training module in learning portal</div>
                  </div>
                  <div class="action-item-footer">
                    <div class="action-meta">
                      <div class="action-assignee">
                        <i class="fas fa-user"></i> John Doe
                      </div>
                      <div class="action-due-date">
                        <i class="fas fa-calendar"></i> April 15, 2025
                      </div>
                    </div>
                    <div class="action-status status-open">Open</div>
                  </div>
                </div>
                
                <div class="action-item">
                  <div class="action-item-header">
                    <div class="action-checkbox completed">
                      <i class="fas fa-check"></i>
                    </div>
                    <div class="action-description">Review call quality metrics and identify areas for improvement</div>
                  </div>
                  <div class="action-item-footer">
                    <div class="action-meta">
                      <div class="action-assignee">
                        <i class="fas fa-user"></i> John Doe
                      </div>
                      <div class="action-due-date">
                        <i class="fas fa-calendar"></i> April 8, 2025
                      </div>
                    </div>
                    <div class="action-status status-completed">Completed</div>
                  </div>
                </div>
                
                <div class="action-item">
                  <div class="action-item-header">
                    <div class="action-checkbox">
                      <i class="fas fa-check"></i>
                    </div>
                    <div class="action-description">Arrange shadowing session with senior team lead</div>
                  </div>
                  <div class="action-item-footer">
                    <div class="action-meta">
                      <div class="action-assignee">
                        <i class="fas fa-user"></i> Team Lead
                      </div>
                      <div class="action-due-date">
                        <i class="fas fa-calendar"></i> April 20, 2025
                      </div>
                    </div>
                    <div class="action-status status-open">Open</div>
                  </div>
                </div>
                
                <div class="action-item">
                  <div class="action-item-header">
                    <div class="action-checkbox">
                      <i class="fas fa-check"></i>
                    </div>
                    <div class="action-description">Follow up on headset replacement request with IT department</div>
                  </div>
                  <div class="action-item-footer">
                    <div class="action-meta">
                      <div class="action-assignee">
                        <i class="fas fa-user"></i> Team Lead
                      </div>
                      <div class="action-due-date">
                        <i class="fas fa-calendar"></i> April 7, 2025
                      </div>
                    </div>
                    <div class="action-status status-overdue">Overdue</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Reflection Tab -->
          <div class="tab-panel" id="reflection">
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-lightbulb"></i>
                </div>
                <h2 class="section-title">Reflection and Improvement</h2>
              </div>
              
              <div class="reflection-grid">
                <div class="reflection-item">
                  <div class="reflection-header">
                    <div class="reflection-icon">
                      <i class="fas fa-question"></i>
                    </div>
                    <h3 class="reflection-title">What support did the counselor most need?</h3>
                  </div>
                  <div class="reflection-content" id="supportNeeded">
                    John primarily needed:
                    1. Technical equipment support to resolve call quality issues
                    2. Advanced training resources to enhance skills
                    3. Clear career development path with specific steps
                    4. Validation of his strong performance and soft skills
                  </div>
                </div>
                
                <div class="reflection-item">
                  <div class="reflection-header">
                    <div class="reflection-icon">
                      <i class="fas fa-leaf"></i>
                    </div>
                    <h3 class="reflection-title">How can I better facilitate their growth?</h3>
                  </div>
                  <div class="reflection-content" id="facilitateGrowth">
                    To better support John's development:
                    - Provide more frequent, informal check-ins between formal 1:1s
                    - Create more opportunities for leadership exposure and mentoring
                    - Help connect training directly to career aspirations
                    - Offer more specific feedback on calls that demonstrate excellence
                  </div>
                </div>
                
                <div class="reflection-item">
                  <div class="reflection-header">
                    <div class="reflection-icon">
                      <i class="fas fa-cogs"></i>
                    </div>
                    <h3 class="reflection-title">Are there systemic support mechanisms we can improve?</h3>
                  </div>
                  <div class="reflection-content" id="systemicImprovements">
                    Systemic improvements needed:
                    - Equipment replacement process needs streamlining
                    - More advanced training modules for experienced team members
                    - Clearer path for career advancement and skill development
                    - Better visibility into leadership opportunities for high performers
                  </div>
                </div>
              </div>
            </div>
            
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-user-shield"></i>
                </div>
                <h2 class="section-title">Confidential Development Notes</h2>
              </div>
              
              <div class="notes-content" id="confidentialNotes">
                Growth areas:
                - John sometimes hesitates before addressing complex technical issues, revealing a knowledge gap that could be addressed with targeted training.
                - Could benefit from more assertiveness in challenging caller scenarios.
                - Occasionally misses opportunities to set clear expectations with callers.

Strengths to develop:
- Exceptional empathy and rapport building could make John an excellent future mentor/coach for new team members.
- Strong attention to detail in documentation could be leveraged for quality assessment roles.
- Natural ability to de-escalate could be shared with the broader team through informal knowledge-sharing sessions.

Long-term insights:
- Shows potential for a team lead role within 12-18 months with proper development.
- Would also excel in a quality specialist track if interested in a non-management path.
- Consider for pilot programs or new initiatives due to adaptability and positive attitude.
              </div>
            </div>
          </div>
          
          <!-- Email Summary Tab -->
          <div class="tab-panel" id="email">
            <div class="section">
              <div class="section-header">
                <div class="section-icon">
                  <i class="fas fa-envelope"></i>
                </div>
                <h2 class="section-title">Follow-Up Email</h2>
              </div>
              
              <div class="info-grid">
                <div class="info-item">
                  <div class="info-label">Sent Date</div>
                  <div class="info-value" id="emailSentDate">April 5, 2025, 2:15 PM</div>
                </div>
                
                <div class="info-item">
                  <div class="info-label">Recipient</div>
                  <div class="info-value" id="emailRecipient">john.doe@example.com</div>
                </div>
              </div>
              
              <div style="margin-top: 20px;">
                <div class="info-label">Subject</div>
                <div class="info-value" id="emailSubject">One-on-One Session Summary - April 5, 2025</div>
              </div>
              
              <div style="margin-top: 20px; padding: 24px; border: 1px solid var(--border-medium); border-radius: var(--radius-md); background-color: white;">
                <div class="notes-content" id="emailBody" style="background-color: white; padding: 0;">
                  Hi John,

Thank you for our productive one-on-one session today. I wanted to summarize our discussion and the action items we agreed on.

KEY DISCUSSION POINTS:
- Your performance metrics have been excellent, particularly your call quality score of 88%
- We discussed your interest in eventually moving into a team lead position
- Current challenges with technical equipment and knowledge gaps in complex products
- Development opportunities through training and shadowing experiences

ACTION ITEMS:
1. Complete advanced de-escalation training module (Due: April 15)
2. Review call quality metrics and identify improvement areas (Due: April 8)
3. I'll arrange a shadowing session with a senior team lead (Due: April 20)
4. I'll follow up on your headset replacement request with IT (Due: April 7)

Our next one-on-one session is scheduled for April 19, 2025 at 10:30 AM.

Please let me know if you have any questions or need any support in the meantime.

Best regards,
[Your Name]
Team Lead | Crisis Services
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="details-sidebar">
      <div class="sidebar-card">
        <div class="sidebar-card-header">
          <div class="sidebar-card-title">
            <div class="sidebar-card-icon">
              <i class="fas fa-user"></i>
            </div>
            <span>Team Member</span>
          </div>
        </div>
        <div class="sidebar-card-body">
          <div class="member-card">
            <div class="member-avatar" id="sidebarMemberAvatar">JD</div>
            <div class="member-name" id="sidebarMemberName">John Doe</div>
            <div class="member-title">Counselor</div>
            
            <div class="member-stats">
              <div class="member-stat">
                <div class="stat-value" id="totalSessions">4</div>
                <div class="stat-label">Sessions</div>
              </div>
              <div class="member-stat">
                <div class="stat-value" id="totalActionItems">12</div>
                <div class="stat-label">Actions</div>
              </div>
              <div class="member-stat">
                <div class="stat-value" id="completionRate">75%</div>
                <div class="stat-label">Completed</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="sidebar-card">
        <div class="sidebar-card-header">
          <div class="sidebar-card-title">
            <div class="sidebar-card-icon">
              <i class="fas fa-calendar-alt"></i>
            </div>
            <span>Next Session</span>
          </div>
        </div>
        <div class="sidebar-card-body">
          <div class="next-session">
            <div class="next-session-date" id="sidebarNextDate">
              <i class="fas fa-calendar-day"></i> April 19, 2025
            </div>
            <div class="next-session-time" id="sidebarNextTime">
              10:30 AM (30 minutes)
            </div>
          </div>
          
          <button class="btn btn-outline" style="margin-top: 16px; width: 100%;" id="rescheduleBtn">
            <i class="fas fa-calendar-plus"></i> Reschedule
          </button>
        </div>
      </div>
      
      <div class="sidebar-card">
        <div class="sidebar-card-header">
          <div class="sidebar-card-title">
            <div class="sidebar-card-icon">
              <i class="fas fa-history"></i>
            </div>
            <span>Session History</span>
          </div>
        </div>
        <div class="sidebar-card-body">
          <div class="session-history" id="sessionHistory">
            <div class="history-item current">
              <div class="history-header">
                <div class="history-date">April 5, 2025</div>
                <div class="history-badge badge-primary">Regular</div>
              </div>
              <div class="history-topics">Performance metrics, Career development, Training needs</div>
            </div>
            
            <div class="history-item">
              <div class="history-header">
                <div class="history-date">March 22, 2025</div>
                <div class="history-badge badge-primary">Regular</div>
              </div>
              <div class="history-topics">Call quality, Customer feedback, Schedule preferences</div>
            </div>
            
            <div class="history-item">
              <div class="history-header">
                <div class="history-date">March 8, 2025</div>
                <div class="history-badge badge-success">Performance</div>
              </div>
              <div class="history-topics">Quarterly review, Goal setting, Performance metrics</div>
            </div>
            
            <div class="history-item">
              <div class="history-header">
                <div class="history-date">February 22, 2025</div>
                <div class="history-badge badge-primary">Regular</div>
              </div>
              <div class="history-topics">Workload balance, Training opportunities, Team collaboration</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
    <div class="loading-text">Loading session details...</div>
  </div>
  
  <script>
    // Global variables
    let sessionData = {};
    
    // Initialize the page on load
    document.addEventListener('DOMContentLoaded', function() {
      showLoading(true);
      
      // Get the session ID from URL parameters or cache
      const sessionId = getSessionId();
      
      if (sessionId) {
        loadSessionData(sessionId);
      } else {
        showLoading(false);
        alert('No session ID provided. Please try again.');
        goBack();
      }
      
      // Set up event listeners
      setupEventListeners();
    });
    
    // Get session ID from URL or cache
    function getSessionId() {
      try {
        return google.script.get('sessionId');
      } catch (e) {
        console.error('Error getting session ID:', e);
        return null;
      }
    }
    
    // Load session data
    function loadSessionData(sessionId) {
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            sessionData = result.data;
            updateUI(sessionData);
          } else {
            alert('Failed to load session data: ' + (result.message || 'Unknown error'));
            goBack();
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading session data:', error);
          alert('Error loading session data. Please try again.');
          goBack();
        })
        .getOneOnOneSessionDetails(sessionId);
    }
    
    // Set up event listeners
    function setupEventListeners() {
      // Tab navigation
      const tabButtons = document.querySelectorAll('.tab-button');
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          switchTab(tabId);
        });
      });
      
      // Button actions
      document.getElementById('backBtn').addEventListener('click', goBack);
      document.getElementById('editBtn').addEventListener('click', editSession);
      document.getElementById('emailBtn').addEventListener('click', sendEmail);
      document.getElementById('rescheduleBtn').addEventListener('click', rescheduleSession);
      
      // Session history items
      const historyItems = document.querySelectorAll('.history-item:not(.current)');
      historyItems.forEach(item => {
        item.addEventListener('click', function() {
          const date = this.querySelector('.history-date').textContent;
          viewHistoricalSession(date);
        });
      });
      
      // Action item checkboxes
      const actionCheckboxes = document.querySelectorAll('.action-checkbox');
      actionCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('click', function() {
          toggleActionItem(this);
        });
      });
    }
    
    // Switch between tabs
    function switchTab(tabId) {
      // Hide all tab panels
      document.querySelectorAll('.tab-panel').forEach(panel => {
        panel.classList.remove('active');
      });
      
      // Deactivate all tab buttons
      document.querySelectorAll('.tab-button').forEach(button => {
        button.classList.remove('active');
      });
      
      // Activate selected tab
      document.getElementById(tabId).classList.add('active');
      document.querySelector(`.tab-button[data-tab="${tabId}"]`).classList.add('active');
    }
    
    // Update UI with session data
    function updateUI(data) {
      // Update header
      document.getElementById('sessionTypeTag').textContent = data.type || 'Regular One-on-One';
      document.getElementById('sessionTypeTag').className = `session-type-tag tag-${getTypeClass(data.type)}`;
      document.getElementById('sessionDate').innerHTML = `<i class="far fa-calendar-alt"></i> ${formatDate(data.date)}`;
      document.getElementById('memberName').textContent = data.teamMemberName || 'Team Member';
      document.getElementById('sessionDuration').textContent = `${data.duration || 30} minute session`;
      
      // Update overview tab
      document.getElementById('overviewType').textContent = data.type || 'Regular One-on-One';
      document.getElementById('overviewDateTime').textContent = formatDateTime(data.date, data.time);
      document.getElementById('overviewDuration').textContent = `${data.duration || 30} minutes`;
      document.getElementById('overviewStatus').textContent = data.isDraft ? 'Draft' : 'Complete';
      
      document.getElementById('workloadLevel').innerHTML = `
        <div class="rating-display">
          <div class="rating-badge rating-${getRatingClass(data.workloadStatus)}">${formatRating(data.workloadStatus)}</div>
        </div>
      `;
      
      document.getElementById('energyLevel').innerHTML = `
        <div class="rating-display">
          <div class="rating-badge rating-${getRatingClass(data.energyLevel)}">${formatRating(data.energyLevel)}</div>
        </div>
      `;
      
      // Update topics content
      if (data.criticalTopics) {
        document.getElementById('topicsContent').textContent = data.criticalTopics;
      }
      
      // Update action items
      if (data.actionItems && data.actionItems.length > 0) {
        updateActionItems('overviewActionItems', data.actionItems.slice(0, 2));
        updateActionItems('actionItemsList', data.actionItems);
      }
      
      // Update next session info
      if (data.nextSessionDate) {
        const nextSessionDateFormatted = formatDate(data.nextSessionDate);
        const nextSessionTimeFormatted = formatTime(data.nextSessionTime);
        
        document.getElementById('nextSessionDate').textContent = `${nextSessionDateFormatted} at ${nextSessionTimeFormatted}`;
        document.getElementById('sidebarNextDate').innerHTML = `<i class="fas fa-calendar-day"></i> ${nextSessionDateFormatted}`;
        document.getElementById('sidebarNextTime').textContent = `${nextSessionTimeFormatted} (${data.duration || 30} minutes)`;
      }
      
      // Update meeting notes tab content if available
      updateIfExists('criticalTopics', data.criticalTopics);
      updateIfExists('immediateBlockers', data.immediateBlockers);
      updateIfExists('quantitativeMetrics', data.quantitativeMetrics);
      updateIfExists('qualitativeImpact', data.qualitativeImpact);
      updateIfExists('strategicInsight', data.strategicInsight);
      updateIfExists('skillMapping', data.skillMapping);
      updateIfExists('careerAlignment', data.careerAlignment);
      updateIfExists('obstacleIdentification', data.obstacleIdentification);
      updateIfExists('leadershipSupport', data.leadershipSupport);
      
      // Update commitments and reflection tab content if available
      updateIfExists('commitmentsSynthesis', data.commitmentsSynthesis);
      updateIfExists('supportNeeded', data.supportNeeded);
      updateIfExists('facilitateGrowth', data.facilitateGrowth);
      updateIfExists('systemicImprovements', data.systemicImprovements);
      updateIfExists('confidentialNotes', data.confidentialNotes || data.growthAreas + '\n\n' + data.strengthDevelopment + '\n\n' + data.careerInsights);
      
      // Update email tab content if available
      updateIfExists('emailSubject', data.emailSubject);
      updateIfExists('emailBody', data.emailBody);
      
      if (data.emailSentDate) {
        document.getElementById('emailSentDate').textContent = formatDateTime(data.emailSentDate);
      }
      
      if (data.emailRecipient || data.teamMemberEmail) {
        document.getElementById('emailRecipient').textContent = data.emailRecipient || data.teamMemberEmail;
      }
      
      // Update sidebar
      document.getElementById('sidebarMemberName').textContent = data.teamMemberName || 'Team Member';
      document.getElementById('sidebarMemberAvatar').textContent = getInitials(data.teamMemberName);
      
      // Update stats if available
      if (data.memberStats) {
        document.getElementById('totalSessions').textContent = data.memberStats.sessionCount || '0';
        document.getElementById('totalActionItems').textContent = data.memberStats.totalActionItems || '0';
        document.getElementById('completionRate').textContent = `${data.memberStats.completionRate || 0}%`;
      }
      
      // Update session history if available
      if (data.sessionHistory && data.sessionHistory.length > 0) {
        updateSessionHistory(data.sessionHistory);
      }
    }
    
    // Update element content if data exists
    function updateIfExists(elementId, content) {
      if (content && document.getElementById(elementId)) {
        document.getElementById(elementId).textContent = content;
      }
    }
    
    // Update action items list
    function updateActionItems(containerId, items) {
      const container = document.getElementById(containerId);
      if (!container || !items || items.length === 0) return;
      
      container.innerHTML = '';
      
      items.forEach(item => {
        const actionItem = document.createElement('div');
        actionItem.className = 'action-item';
        actionItem.setAttribute('data-id', item.id);
        
        // Determine status class and text
        let statusClass = 'status-open';
        let statusText = 'Open';
        
        if (item.completed) {
          statusClass = 'status-completed';
          statusText = 'Completed';
        } else if (item.dueDate && new Date(item.dueDate) < new Date()) {
          statusClass = 'status-overdue';
          statusText = 'Overdue';
        }
        
        actionItem.innerHTML = `
          <div class="action-item-header">
            <div class="action-checkbox ${item.completed ? 'completed' : ''}">
              <i class="fas fa-check"></i>
            </div>
            <div class="action-description">${item.description}</div>
          </div>
          <div class="action-item-footer">
            <div class="action-meta">
              <div class="action-assignee">
                <i class="fas fa-user"></i> ${item.assignee || 'Unassigned'}
              </div>
              <div class="action-due-date">
                <i class="fas fa-calendar"></i> ${formatDate(item.dueDate) || 'No due date'}
              </div>
            </div>
            <div class="action-status ${statusClass}">${statusText}</div>
          </div>
        `;
        
        // Add click event to checkbox
        actionItem.querySelector('.action-checkbox').addEventListener('click', function() {
          toggleActionItem(this);
        });
        
        container.appendChild(actionItem);
      });
    }
    
    // Update session history
    function updateSessionHistory(history) {
      const container = document.getElementById('sessionHistory');
      if (!container || !history || history.length === 0) return;
      
      container.innerHTML = '';
      
      // Add current session first
      const currentItem = document.createElement('div');
      currentItem.className = 'history-item current';
      currentItem.innerHTML = `
        <div class="history-header">
          <div class="history-date">${formatDate(sessionData.date)}</div>
          <div class="history-badge badge-${getTypeClass(sessionData.type)}">${formatShortType(sessionData.type)}</div>
        </div>
        <div class="history-topics">${sessionData.topics || 'No topics recorded'}</div>
      `;
      container.appendChild(currentItem);
      
      // Add other sessions
      history.forEach(session => {
        if (session.id === sessionData.id) return; // Skip current session
        
        const historyItem = document.createElement('div');
        historyItem.className = 'history-item';
        historyItem.setAttribute('data-id', session.id);
        
        historyItem.innerHTML = `
          <div class="history-header">
            <div class="history-date">${formatDate(session.date)}</div>
            <div class="history-badge badge-${getTypeClass(session.type)}">${formatShortType(session.type)}</div>
          </div>
          <div class="history-topics">${session.topics || 'No topics recorded'}</div>
        `;
        
        // Add click event
        historyItem.addEventListener('click', function() {
          viewSession(session.id);
        });
        
        container.appendChild(historyItem);
      });
    }
    
    // Toggle action item completion status
    function toggleActionItem(checkbox) {
      const actionItem = checkbox.closest('.action-item');
      const itemId = actionItem.getAttribute('data-id');
      const isCompleted = checkbox.classList.contains('completed');
      
      // Toggle visual state
      checkbox.classList.toggle('completed');
      
      const statusElement = actionItem.querySelector('.action-status');
      if (isCompleted) {
        statusElement.className = 'action-status status-open';
        statusElement.textContent = 'Open';
      } else {
        statusElement.className = 'action-status status-completed';
        statusElement.textContent = 'Completed';
      }
      
      // Update all instances of the same action item
      document.querySelectorAll(`.action-item[data-id="${itemId}"]`).forEach(item => {
        const cb = item.querySelector('.action-checkbox');
        const status = item.querySelector('.action-status');
        
        if (cb !== checkbox) { // Don't update the one we just clicked
          cb.classList.toggle('completed', !isCompleted);
          
          if (status) {
            if (isCompleted) {
              status.className = 'action-status status-open';
              status.textContent = 'Open';
            } else {
              status.className = 'action-status status-completed';
              status.textContent = 'Completed';
            }
          }
        }
      });
      
      // Update in the backend
      updateActionItemStatus(itemId, !isCompleted);
    }
    
    // Update action item status in the backend
    function updateActionItemStatus(itemId, completed) {
      google.script.run
        .withSuccessHandler(function(result) {
          if (!result.success) {
            console.error('Failed to update action item:', result.message);
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error updating action item:', error);
        })
        .updateOneOnOneActionItemStatus(sessionData.id, itemId, completed);
    }
    
    // Go back to the previous page
    function goBack() {
      google.script.run.showAllOneOnOneNotes();
    }
    
    // Edit the current session
    function editSession() {
      google.script.run.editOneOnOneSession(sessionData.id);
    }
    
    // Send follow-up email
    function sendEmail() {
      google.script.run.showOneOnOneEmailForm(sessionData.id);
    }
    
    // View another session
    function viewSession(sessionId) {
      google.script.run.showOneOnOneDetails(sessionId);
    }
    
    // View historical session based on date
    function viewHistoricalSession(dateStr) {
      // This would need to be implemented on the server side
      // to look up a session by date and team member
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          if (result.success && result.sessionId) {
            viewSession(result.sessionId);
          } else {
            alert('Session not found for the selected date.');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error finding session:', error);
          alert('Error finding session for the selected date.');
        })
        .findOneOnOneSessionByDate(sessionData.teamMemberId, dateStr);
    }
    
    // Reschedule next session
    function rescheduleSession() {
      google.script.run.showRescheduleDialog(sessionData.id);
    }
    
    // Show/hide loading overlay
    function showLoading(show) {
      const overlay = document.getElementById('loadingOverlay');
      overlay.classList.toggle('show', show);
    }
    
    // Hide loading overlay
    function hideLoading() {
      showLoading(false);
    }
    
    // Get CSS class for session type
    function getTypeClass(type) {
      if (!type) return 'regular';
      
      const typeLower = type.toLowerCase();
      if (typeLower.includes('performance')) return 'performance';
      if (typeLower.includes('coaching')) return 'coaching';
      if (typeLower.includes('development')) return 'development';
      return 'regular';
    }
    
    // Get short version of session type for badges
    function formatShortType(type) {
      if (!type) return 'Regular';
      
      const typeLower = type.toLowerCase();
      if (typeLower.includes('performance')) return 'Performance';
      if (typeLower.includes('coaching')) return 'Coaching';
      if (typeLower.includes('development')) return 'Development';
      if (typeLower.includes('check-in')) return 'Check-in';
      return 'Regular';
    }
    
    // Get CSS class for rating
    function getRatingClass(rating) {
      if (!rating) return 'moderate';
      
      const ratingLower = rating.toLowerCase();
      if (ratingLower.includes('low')) return 'low';
      if (ratingLower.includes('moderate')) return 'moderate';
      if (ratingLower.includes('high')) {
        return ratingLower.includes('very') ? 'very-high' : 'high';
      }
      if (ratingLower.includes('overwhelming')) return 'low';
      if (ratingLower.includes('balanced')) return 'high';
      
      return 'moderate';
    }
    
    // Format rating for display
    function formatRating(rating) {
      if (!rating) return 'Not Specified';
      
      // Capitalize first letter
      return rating.charAt(0).toUpperCase() + rating.slice(1);
    }
    
    // Format date 
    function formatDate(dateStr) {
      if (!dateStr) return 'N/A';
      
      try {
        const date = new Date(dateStr);
        return date.toLocaleDateString('en-US', {
          month: 'long',
          day: 'numeric',
          year: 'numeric'
        });
      } catch (e) {
        console.error('Error formatting date:', e);
        return dateStr;
      }
    }
    
    // Format time
    function formatTime(timeStr) {
      if (!timeStr) return 'N/A';
      
      try {
        // Handle different time formats
        let hours, minutes;
        
        if (timeStr.includes(':')) {
          [hours, minutes] = timeStr.split(':').map(Number);
        } else {
          hours = Math.floor(timeStr);
          minutes = Math.round((timeStr - hours) * 60);
        }
        
        const period = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12 || 12; // Convert to 12-hour format
        
        return `${hours}:${minutes.toString().padStart(2, '0')} ${period}`;
      } catch (e) {
        console.error('Error formatting time:', e);
        return timeStr;
      }
    }
    
    // Format date and time
    function formatDateTime(dateStr, timeStr) {
      const date = formatDate(dateStr);
      if (!timeStr) return date;
      
      const time = formatTime(timeStr);
      return `${date}, ${time}`;
    }
    
    // Get initials from name
    function getInitials(name) {
      if (!name) return '--';
      
      return name
        .split(' ')
        .map(part => part.charAt(0))
        .join('')
        .toUpperCase();
    }
  </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manager One-on-One Session</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
      overflow-x: hidden;
    }
    
    .page-container {
      max-width: 100%;
      min-height: 100%;
      display: flex;
      flex-direction: column;
    }
    
    .page-header {
      padding: 20px 24px;
      background: var(--primary-gradient);
      color: white;
      position: relative;
      overflow: hidden;
    }
    
    .page-header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
      position: relative;
      z-index: 2;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .header-subtitle {
      font-size: 14px;
      opacity: 0.9;
      position: relative;
      z-index: 2;
    }
    
    .cyber-line {
      position: absolute;
      height: 2px;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);
      width: 100%;
      bottom: 0;
      left: 0;
      animation: scanline 3s linear infinite;
    }
    
    /* Tabs navigation */
    .tabs-container {
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    
    .tabs-navigation {
      background-color: var(--bg-secondary);
      padding: 0 24px;
      overflow-x: auto;
      white-space: nowrap;
      border-bottom: 1px solid var(--border-medium);
      position: sticky;
      top: 0;
      z-index: 10;
      scrollbar-width: thin;
      scrollbar-color: var(--primary-light) var(--bg-secondary);
    }
    
    .tabs-navigation::-webkit-scrollbar {
      height: 4px;
    }
    
    .tabs-navigation::-webkit-scrollbar-track {
      background: var(--bg-secondary);
    }
    
    .tabs-navigation::-webkit-scrollbar-thumb {
      background-color: var(--primary-light);
      border-radius: 20px;
    }
    
    .tab-list {
      display: inline-flex;
      list-style: none;
      margin: 0;
      padding: 0;
    }
    
    .tab-item {
      display: inline-block;
      position: relative;
    }
    
    .tab-button {
      padding: 14px 20px;
      background: transparent;
      border: none;
      color: var(--text-tertiary);
      font-weight: 500;
      cursor: pointer;
      font-size: 14px;
      transition: color var(--transition-fast);
      display: flex;
      align-items: center;
      gap: 8px;
      white-space: nowrap;
    }
    
    .tab-button:hover {
      color: var(--primary-color);
    }
    
    .tab-button.active {
      color: var(--primary-color);
    }
    
    .tab-button.active::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 2px;
      background: var(--primary-gradient);
    }
    
    .tab-badge {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 18px;
      height: 18px;
      background-color: var(--primary-color);
      color: white;
      border-radius: 50%;
      font-size: 11px;
      font-weight: 600;
    }
    
    /* Tab content */
    .tab-content {
      flex: 1;
      padding: 24px;
      overflow-y: auto;
    }
    
    .tab-pane {
      display: none;
      animation: fadeIn 0.3s ease;
    }
    
    .tab-pane.active {
      display: block;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    /* Form styling */
    .form-section {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      margin-bottom: 24px;
      position: relative;
      overflow: hidden;
    }
    
    .section-header {
      margin-bottom: 20px;
      padding-bottom: 10px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .section-title {
      font-family: 'Manrope', sans-serif;
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .section-title i {
      color: var(--primary-color);
    }
    
    .section-subtitle {
      font-size: 13px;
      color: var(--text-tertiary);
      margin-top: 4px;
    }
    
    .form-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 20px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group.full-width {
      grid-column: 1 / -1;
    }
    
    .form-label {
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .input-group {
      position: relative;
      display: flex;
      flex-direction: column;
    }
    
    .input-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
      z-index: 1;
    }
    
    input[type="text"],
    input[type="email"],
    input[type="date"],
    input[type="time"],
    select,
    textarea {
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      color: var(--text-primary);
      width: 100%;
      font-family: 'Inter', sans-serif;
      transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
    }
    
    input[type="text"].with-icon,
    input[type="email"].with-icon,
    input[type="date"].with-icon,
    select.with-icon {
      padding-left: 36px;
    }
    
    input:focus,
    select:focus,
    textarea:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .input-group.error input,
    .input-group.error select,
    .input-group.error textarea {
      border-color: var(--danger-color);
      background-color: var(--danger-light);
    }
    
    .error-message {
      color: var(--danger-color);
      font-size: 12px;
      margin-top: 4px;
    }
    
    textarea {
      min-height: 100px;
      resize: vertical;
    }
    
    .field-help {
      font-size: 12px;
      color: var(--text-tertiary);
      margin-top: 4px;
    }
    
    /* Checkboxes */
    .checklist {
      list-style-type: none;
      margin: 0;
      padding: 0;
    }
    
    .checklist-item {
      padding: 8px 0;
      display: flex;
      align-items: flex-start;
      gap: 10px;
    }
    
    input[type="checkbox"] {
      appearance: none;
      width: 18px;
      height: 18px;
      border: 1.5px solid var(--border-medium);
      border-radius: 4px;
      margin: 0;
      position: relative;
      cursor: pointer;
      flex-shrink: 0;
      margin-top: 2px;
    }
    
    input[type="checkbox"]::after {
      content: '';
      position: absolute;
      top: 40%;
      left: 50%;
      transform: translate(-50%, -50%) rotate(45deg);
      width: 4px;
      height: 8px;
      border-bottom: 2px solid white;
      border-right: 2px solid white;
      opacity: 0;
      transition: opacity var(--transition-fast);
    }
    
    input[type="checkbox"]:checked {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    input[type="checkbox"]:checked::after {
      opacity: 1;
    }
    
    input[type="checkbox"]:focus {
      outline: 0;
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.2);
    }
    
    .checklist-label {
      font-size: 14px;
      line-height: 1.4;
      cursor: pointer;
    }
    
    /* KPI metrics card */
    .kpi-metrics {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 16px;
      margin-bottom: 20px;
    }
    
    .kpi-card {
      padding: 16px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      border: 1px solid var(--border-light);
    }
    
    .kpi-card-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 10px;
    }
    
    .kpi-title {
      font-weight: 600;
      font-size: 14px;
      color: var(--text-primary);
    }
    
    .kpi-icon {
      color: var(--primary-color);
      font-size: 16px;
    }
    
    .kpi-value-group {
      display: flex;
      align-items: baseline;
      gap: 8px;
      margin-bottom: 8px;
    }
    
    .kpi-value {
      font-size: 24px;
      font-weight: 700;
      color: var(--text-primary);
    }
    
    .kpi-unit {
      font-size: 14px;
      color: var(--text-tertiary);
    }
    
    .kpi-progress {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .kpi-progress-bar {
      flex: 1;
      height: 6px;
      background-color: var(--border-medium);
      border-radius: 3px;
      overflow: hidden;
      position: relative;
    }
    
    .kpi-progress-fill {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      background: var(--primary-gradient);
      border-radius: 3px;
    }
    
    .kpi-progress-fill.success {
      background: linear-gradient(90deg, #10b981, #34d399);
    }
    
    .kpi-progress-fill.warning {
      background: linear-gradient(90deg, #f59e0b, #fbbf24);
    }
    
    .kpi-progress-fill.danger {
      background: linear-gradient(90deg, #ef4444, #f87171);
    }
    
    .kpi-progress-text {
      font-size: 12px;
      font-weight: 500;
      white-space: nowrap;
    }
    
    .kpi-progress-text.success {
      color: var(--success-color);
    }
    
    .kpi-progress-text.warning {
      color: var(--warning-color);
    }
    
    .kpi-progress-text.danger {
      color: var(--danger-color);
    }
    
    /* Tasks section */
    .task-list {
      display: flex;
      flex-direction: column;
      gap: 12px;
    }
    
    .task-item {
      padding: 16px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      position: relative;
      border: 1px solid var(--border-light);
    }
    
    .task-header {
      display: flex;
      align-items: flex-start;
      gap: 12px;
      margin-bottom: 12px;
    }
    
    .task-checkbox {
      width: 20px;
      height: 20px;
      border-radius: 4px;
      border: 1.5px solid var(--border-medium);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      flex-shrink: 0;
      cursor: pointer;
      transition: all var(--transition-fast);
      margin-top: 2px;
    }
    
    .task-checkbox.completed {
      background-color: var(--success-color);
      border-color: var(--success-color);
    }
    
    .task-input-group {
      flex: 1;
    }
    
    .task-input {
      width: 100%;
      border: none;
      background: none;
      font-size: 14px;
      font-weight: 500;
      outline: none;
      padding: 0;
      margin-bottom: 4px;
    }
    
    .task-input::placeholder {
      color: var(--text-tertiary);
    }
    
    .task-options {
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .task-option {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
      cursor: pointer;
    }
    
    .task-option:hover {
      color: var(--primary-color);
    }
    
    .task-option-dropdown {
      position: absolute;
      top: 100%;
      left: 0;
      width: 100%;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-md);
      padding: 12px;
      z-index: 10;
      display: none;
    }
    
    .task-item.show-options .task-option-dropdown {
      display: block;
    }
    
    .task-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 12px;
    }
    
    .task-assignee {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .task-due-date {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .task-actions {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .task-action-btn {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: transparent;
      border: none;
      border-radius: var(--radius-sm);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .task-action-btn:hover {
      color: var(--primary-color);
      background-color: var(--bg-tertiary);
    }
    
    .add-task-btn {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 12px 16px;
      background-color: var(--bg-secondary);
      border: 1px dashed var(--border-medium);
      border-radius: var(--radius-md);
      color: var(--text-tertiary);
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      width: 100%;
      justify-content: center;
    }
    
    .add-task-btn:hover {
      color: var(--primary-color);
      border-color: var(--primary-color);
      background-color: var(--primary-light);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    /* Platform toggle */
    .platform-toggle {
      display: flex;
      border-radius: var(--radius-md);
      overflow: hidden;
      margin-bottom: 16px;
      background-color: var(--bg-secondary);
      padding: 4px;
    }
    
    .platform-option {
      flex: 1;
      padding: 8px 16px;
      text-align: center;
      font-weight: 500;
      font-size: 13px;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .platform-option.active {
      background-color: white;
      border-radius: var(--radius-md);
      color: var(--primary-color);
      box-shadow: var(--shadow-sm);
    }
    
    /* Footer actions */
    .actions-footer {
      position: sticky;
      bottom: 0;
      background-color: white;
      padding: 16px 24px;
      box-shadow: 0 -4px 10px rgba(15, 23, 42, 0.05);
      display: flex;
      justify-content: space-between;
      align-items: center;
      z-index: 10;
      margin-top: auto;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 20px;
      border-radius: var(--radius-md);
      font-size: 14px;
      font-weight: 500;
      transition: all var(--transition-fast);
      border: none;
      cursor: pointer;
    }
    
    .btn-secondary {
      background-color: var(--bg-secondary);
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-tertiary);
      border-color: var(--text-tertiary);
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(251, 113, 133, 0.4);
    }
    
    .btn-group {
      display: flex;
      gap: 10px;
    }
    
    /* Loading spinner */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      z-index: 100;
      backdrop-filter: blur(4px);
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.3);
      border-radius: 50%;
      border-top-color: var(--primary-color);
      animation: rotate 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 16px;
      font-weight: 500;
      color: var(--primary-color);
    }
    
    /* Toast notification */
    .toast-notification {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px 20px;
      background: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 16px;
      transform: translateY(150%);
      transition: transform 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55);
      z-index: 1000;
    }
    
    .toast-notification.show {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    .toast-close {
      color: var(--text-tertiary);
      cursor: pointer;
      padding: 4px;
    }
    
    /* Asana integration */
    .asana-section {
      padding: 16px;
      background-color: #F6F8F9;
      border: 1px solid #E8ECEE;
      border-left: 4px solid #796EFF;
      border-radius: var(--radius-md);
      margin-bottom: 20px;
    }
    
    .asana-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16px;
    }
    
    .asana-title {
      display: flex;
      align-items: center;
      gap: 10px;
      font-weight: 600;
    }
    
    .asana-logo {
      height: 24px;
    }
    
    .asana-project-select {
      margin-bottom: 16px;
    }
    
    .asana-field {
      margin-bottom: 12px;
    }
    
    .asana-field label {
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
      font-size: 13px;
    }
    
    /* Animation elements */
    @keyframes scanline {
      0% {
        opacity: 0;
      }
      50% {
        opacity: 1;
      }
      100% {
        opacity: 0;
      }
    }
    
    .form-section::after {
      content: '';
      position: absolute;
      height: 1px;
      background: linear-gradient(90deg, transparent, var(--primary-light), transparent);
      width: 100%;
      bottom: 0;
      left: 0;
      animation: scanline 4s linear infinite;
    }
    
    .pulse {
      position: relative;
    }
    
    .pulse::before {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      background: inherit;
      border-radius: inherit;
      z-index: -1;
      opacity: 0.6;
      animation: pulse-animation 2s infinite;
    }
    
    @keyframes pulse-animation {
      0% {
        transform: scale(1);
        opacity: 0.6;
      }
      50% {
        transform: scale(1.05);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 0;
      }
    }
    
    @keyframes rotate {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .form-grid {
        grid-template-columns: 1fr;
      }
      
      .kpi-metrics {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>

<body>
  <div class="page-container">
    <header class="page-header">
      <div class="header-title">
        <i class="fas fa-user-tie"></i> Manager One-on-One Session
      </div>
      <div class="header-subtitle">Document your meetings with your manager, track KPIs, and create actionable tasks</div>
      <div class="cyber-line"></div>
    </header>
    
    <div class="tabs-container">
      <nav class="tabs-navigation">
        <ul class="tab-list">
          <li class="tab-item">
            <button type="button" class="tab-button active" data-tab="general">
              <i class="fas fa-info-circle"></i> General Info
            </button>
          </li>
          <li class="tab-item">
            <button type="button" class="tab-button" data-tab="kpi">
              <i class="fas fa-chart-line"></i> Team KPIs
            </button>
          </li>
          <li class="tab-item">
            <button type="button" class="tab-button" data-tab="counselors">
              <i class="fas fa-users"></i> Counselor Updates
            </button>
          </li>
          <li class="tab-item">
            <button type="button" class="tab-button" data-tab="tasks">
              <i class="fas fa-tasks"></i> Tasks & Action Items
            </button>
          </li>
          <li class="tab-item">
            <button type="button" class="tab-button" data-tab="feedback">
              <i class="fas fa-comment-alt"></i> Feedback & Notes
            </button>
          </li>
        </ul>
      </nav>
      
      <div class="tab-content">
        <form id="managerOneOnOneForm">
          <!-- General Info Tab -->
          <div class="tab-pane active" id="general">
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-calendar-check"></i> Session Information</div>
                  <div class="section-subtitle">Record details about your meeting with your manager</div>
                </div>
              </div>
              
              <div class="form-grid">
                <div class="form-group">
                  <label class="form-label" for="sessionDate">Meeting Date</label>
                  <div class="input-group">
                    <input type="date" id="sessionDate" name="sessionDate" class="with-icon" required>
                    <i class="fas fa-calendar input-icon"></i>
                  </div>
                </div>
                
                <div class="form-group">
                  <label class="form-label" for="sessionTime">Meeting Time</label>
                  <div class="input-group">
                    <input type="time" id="sessionTime" name="sessionTime" class="with-icon">
                    <i class="fas fa-clock input-icon"></i>
                  </div>
                </div>
                
                <div class="form-group">
                  <label class="form-label" for="managerName">Manager Name</label>
                  <div class="input-group">
                    <input type="text" id="managerName" name="managerName" class="with-icon">
                    <i class="fas fa-user-tie input-icon"></i>
                  </div>
                </div>
                
                <div class="form-group">
                  <label class="form-label" for="sessionDuration">Duration (minutes)</label>
                  <div class="input-group">
                    <select id="sessionDuration" name="sessionDuration">
                      <option value="15">15 minutes</option>
                      <option value="30" selected>30 minutes</option>
                      <option value="45">45 minutes</option>
                      <option value="60">60 minutes</option>
                      <option value="90">90 minutes</option>
                    </select>
                  </div>
                </div>
                
                <div class="form-group full-width">
                  <label class="form-label" for="meetingType">Meeting Type</label>
                  <div class="input-group">
                    <select id="meetingType" name="meetingType">
                      <option value="regular">Regular Check-in</option>
                      <option value="kpi">KPI Review</option>
                      <option value="performance">Performance Discussion</option>
                      <option value="project">Project Update</option>
                      <option value="coaching">Coaching Session</option>
                      <option value="other">Other</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-bullseye"></i> Meeting Objectives</div>
                  <div class="section-subtitle">Define what you aim to achieve in this meeting</div>
                </div>
              </div>
              
              <div class="form-group">
                <div class="input-group">
                  <textarea id="meetingObjectives" name="meetingObjectives" placeholder="List your key objectives for this meeting with your manager..."></textarea>
                </div>
                <div class="field-help">Include specific questions, updates, or decisions needed from your manager</div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Preparation Checklist</label>
                <ul class="checklist">
                  <li class="checklist-item">
                    <input type="checkbox" id="prepKPIs" name="prepKPIs">
                    <label class="checklist-label" for="prepKPIs">Review and update team KPI metrics</label>
                  </li>
                  <li class="checklist-item">
                    <input type="checkbox" id="prepCounselors" name="prepCounselors">
                    <label class="checklist-label" for="prepCounselors">Compile key counselor updates and issues</label>
                  </li>
                  <li class="checklist-item">
                    <input type="checkbox" id="prepProjects" name="prepProjects">
                    <label class="checklist-label" for="prepProjects">Document project status updates</label>
                  </li>
                  <li class="checklist-item">
                    <input type="checkbox" id="prepQuestions" name="prepQuestions">
                    <label class="checklist-label" for="prepQuestions">Prepare specific questions for manager</label>
                  </li>
                  <li class="checklist-item">
                    <input type="checkbox" id="prepChallenges" name="prepChallenges">
                    <label class="checklist-label" for="prepChallenges">Identify challenges requiring manager support</label>
                  </li>
                </ul>
              </div>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-project-diagram"></i> Organizational Updates</div>
                  <div class="section-subtitle">Note any important organizational information shared by your manager</div>
                </div>
              </div>
              
              <div class="form-group">
                <div class="input-group">
                  <textarea id="orgUpdates" name="orgUpdates" placeholder="Document any organizational updates, changes, or announcements shared by your manager..."></textarea>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Team KPIs Tab -->
          <div class="tab-pane" id="kpi">
            <!-- KPI Metrics Section - UPDATED -->
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-chart-pie"></i> Team Performance Metrics</div>
                  <div class="section-subtitle">Track and discuss key performance indicators for your team</div>
                </div>
              </div>
              
              <div class="kpi-metrics">
                <!-- Calls Offered KPI -->
                <div class="kpi-card">
                  <div class="kpi-card-header">
                    <div class="kpi-title">Calls Offered</div>
                    <div class="kpi-icon"><i class="fas fa-phone"></i></div>
                  </div>
                  <div class="kpi-value-group">
                    <input type="number" id="callsOffered" name="callsOffered" min="0" step="1" value="" style="width: 60px; text-align: right;">
                    <div class="kpi-unit">calls</div>
                  </div>
                  <div class="kpi-progress">
                    <div class="kpi-progress-bar">
                      <div class="kpi-progress-fill success" style="width: 92%;"></div>
                    </div>
                    <div class="kpi-progress-text success">Tracking</div>
                  </div>
                  
                  <div style="margin-top: 12px;">
                    <label class="form-label">Target</label>
                    <input type="text" name="callsOfferedTarget" value="—" readonly style="background-color: #f8f9fa;">
                  </div>
                  <div style="margin-top: 12px;">
                    <label class="form-label">Notes</label>
                    <textarea name="callsOfferedNotes" placeholder="Notes on calls offered..."></textarea>
                  </div>
                </div>
                
                <!-- Calls Accepted KPI -->
                <div class="kpi-card">
                  <div class="kpi-card-header">
                    <div class="kpi-title">Calls Accepted</div>
                    <div class="kpi-icon"><i class="fas fa-phone-volume"></i></div>
                  </div>
                  <div class="kpi-value-group">
                    <input type="number" id="callsAccepted" name="callsAccepted" min="0" step="1" value="" style="width: 60px; text-align: right;">
                    <div class="kpi-unit">calls</div>
                  </div>
                  <div class="kpi-progress">
                    <div class="kpi-progress-bar">
                      <div class="kpi-progress-fill success" style="width: 94%;"></div>
                    </div>
                    <div class="kpi-progress-text success">Tracking</div>
                  </div>
                  
                  <div style="margin-top: 12px;">
                    <label class="form-label">Target</label>
                    <input type="text" name="callsAcceptedTarget" value="—" readonly style="background-color: #f8f9fa;">
                  </div>
                  <div style="margin-top: 12px;">
                    <label class="form-label">Notes</label>
                    <textarea name="callsAcceptedNotes" placeholder="Notes on calls accepted..."></textarea>
                  </div>
                </div>
                
                <!-- Answer Rate KPI -->
                <div class="kpi-card">
                  <div class="kpi-card-header">
                    <div class="kpi-title">Answer Rate</div>
                    <div class="kpi-icon"><i class="fas fa-percentage"></i></div>
                  </div>
                  <div class="kpi-value-group">
                    <input type="number" id="answerRate" name="answerRate" min="0" max="100" step="0.1" value="" style="width: 60px; text-align: right;">
                    <div class="kpi-unit">%</div>
                  </div>
                  <div class="kpi-progress">
                    <div class="kpi-progress-bar">
                      <div class="kpi-progress-fill warning" style="width: 94%;"></div>
                    </div>
                    <div class="kpi-progress-text warning">Target: 95%+</div>
                  </div>
                  
                  <div style="margin-top: 12px;">
                    <label class="form-label">Target</label>
                    <input type="text" name="answerRateTarget" value="95% & Higher" readonly style="background-color: #f8f9fa;">
                  </div>
                  <div style="margin-top: 12px;">
                    <label class="form-label">Notes</label>
                    <textarea name="answerRateNotes" placeholder="Notes on answer rate..."></textarea>
                  </div>
                </div>
                
                <!-- Average Talk Time KPI -->
                <div class="kpi-card">
                  <div class="kpi-card-header">
                    <div class="kpi-title">Average Talk Time</div>
                    <div class="kpi-icon"><i class="fas fa-clock"></i></div>
                  </div>
                  <div class="kpi-value-group">
                    <input type="number" id="averageTalkTime" name="averageTalkTime" min="0" max="60" step="0.1" value="" style="width: 60px; text-align: right;">
                    <div class="kpi-unit">minutes</div>
                  </div>
                  <div class="kpi-progress">
                    <div class="kpi-progress-bar">
                      <div class="kpi-progress-fill success" style="width: 95%;"></div>
                    </div>
                    <div class="kpi-progress-text success">Target: 15-20 min</div>
                  </div>
                  
                  <div style="margin-top: 12px;">
                    <label class="form-label">Target</label>
                    <input type="text" name="talkTimeTarget" value="15-20 minutes" readonly style="background-color: #f8f9fa;">
                  </div>
                  <div style="margin-top: 12px;">
                    <label class="form-label">Notes</label>
                    <textarea name="talkTimeNotes" placeholder="Notes on average talk time..."></textarea>
                  </div>
                </div>
                
                <!-- ACW Percentage KPI -->
                <div class="kpi-card">
                  <div class="kpi-card-header">
                    <div class="kpi-title">ACW Percentage</div>
                    <div class="kpi-icon"><i class="fas fa-stopwatch"></i></div>
                  </div>
                  <div class="kpi-value-group">
                    <input type="number" id="acwPercentage" name="acwPercentage" min="0" max="30" step="0.1" value="" style="width: 60px; text-align: right;">
                    <div class="kpi-unit">minutes</div>
                  </div>
                  <div class="kpi-progress">
                    <div class="kpi-progress-bar">
                      <div class="kpi-progress-fill danger" style="width: 65%;"></div>
                    </div>
                    <div class="kpi-progress-text danger">Target: ≤ 5 min</div>
                  </div>
                  
                  <div style="margin-top: 12px;">
                    <label class="form-label">Target</label>
                    <input type="text" name="acwTarget" value="5 minutes or less" readonly style="background-color: #f8f9fa;">
                  </div>
                  <div style="margin-top: 12px;">
                    <label class="form-label">Notes</label>
                    <textarea name="acwNotes" placeholder="Notes on ACW percentage..."></textarea>
                  </div>
                </div>
                
                <!-- On Queue Percentage KPI -->
                <div class="kpi-card">
                  <div class="kpi-card-header">
                    <div class="kpi-title">On Queue Percentage</div>
                    <div class="kpi-icon"><i class="fas fa-headset"></i></div>
                  </div>
                  <div class="kpi-value-group">
                    <input type="number" id="onQueuePercentage" name="onQueuePercentage" min="0" max="100" step="0.1" value="" style="width: 60px; text-align: right;">
                    <div class="kpi-unit">%</div>
                  </div>
                  <div class="kpi-progress">
                    <div class="kpi-progress-bar">
                      <div class="kpi-progress-fill success" style="width: 68%;"></div>
                    </div>
                    <div class="kpi-progress-text success">Target: 65%+</div>
                  </div>
                  
                  <div style="margin-top: 12px;">
                    <label class="form-label">Target</label>
                    <input type="text" name="onQueueTarget" value="65% and higher" readonly style="background-color: #f8f9fa;">
                  </div>
                  <div style="margin-top: 12px;">
                    <label class="form-label">Notes</label>
                    <textarea name="onQueueNotes" placeholder="Notes on on-queue percentage..."></textarea>
                  </div>
                </div>
                
                <!-- Off Queue Percentage KPI -->
                <div class="kpi-card">
                  <div class="kpi-card-header">
                    <div class="kpi-title">Off Queue Percentage</div>
                    <div class="kpi-icon"><i class="fas fa-user-alt-slash"></i></div>
                  </div>
                  <div class="kpi-value-group">
                    <input type="number" id="offQueuePercentage" name="offQueuePercentage" min="0" max="100" step="0.1" value="" style="width: 60px; text-align: right;">
                    <div class="kpi-unit">%</div>
                  </div>
                  <div class="kpi-progress">
                    <div class="kpi-progress-bar">
                      <div class="kpi-progress-fill success" style="width: 32%;"></div>
                    </div>
                    <div class="kpi-progress-text success">Tracking</div>
                  </div>
                  
                  <div style="margin-top: 12px;">
                    <label class="form-label">Target</label>
                    <input type="text" name="offQueueTarget" value="—" readonly style="background-color: #f8f9fa;">
                  </div>
                  <div style="margin-top: 12px;">
                    <label class="form-label">Notes</label>
                    <textarea name="offQueueNotes" placeholder="Notes on off-queue percentage..."></textarea>
                  </div>
                </div>
                
                <!-- Interacting Time KPI -->
                <div class="kpi-card">
                  <div class="kpi-card-header">
                    <div class="kpi-title">Interacting Time</div>
                    <div class="kpi-icon"><i class="fas fa-users"></i></div>
                  </div>
                  <div class="kpi-value-group">
                    <input type="number" id="interactingTime" name="interactingTime" min="0" max="24" step="0.1" value="" style="width: 60px; text-align: right;">
                    <div class="kpi-unit">hours</div>
                  </div>
                  <div class="kpi-progress">
                    <div class="kpi-progress-bar">
                      <div class="kpi-progress-fill success" style="width: 85%;"></div>
                    </div>
                    <div class="kpi-progress-text success">Target: 4-6 hrs (≥50%)</div>
                  </div>
                  
                  <div style="margin-top: 12px;">
                    <label class="form-label">Target</label>
                    <input type="text" name="interactingTimeTarget" value="4-6 hrs (≥ 50%)" readonly style="background-color: #f8f9fa;">
                  </div>
                  <div style="margin-top: 12px;">
                    <label class="form-label">Notes</label>
                    <textarea name="interactingTimeNotes" placeholder="Notes on interacting time..."></textarea>
                  </div>
                </div>
              </div>
              
              <button type="button" class="add-task-btn" id="addKpiBtn">
                <i class="fas fa-plus"></i> Add Custom KPI Metric
              </button>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-comment-dots"></i> KPI Discussion Notes</div>
                  <div class="section-subtitle">Document discussions about team performance metrics</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="kpiStrengths">Performance Strengths</label>
                <div class="input-group">
                  <textarea id="kpiStrengths" name="kpiStrengths" placeholder="Document areas where your team is performing well..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="kpiChallenges">Performance Challenges</label>
                <div class="input-group">
                  <textarea id="kpiChallenges" name="kpiChallenges" placeholder="Document metrics where your team is facing challenges..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="kpiActions">Agreed Actions to Improve Metrics</label>
                <div class="input-group">
                  <textarea id="kpiActions" name="kpiActions" placeholder="List specific actions agreed with your manager to improve performance metrics..."></textarea>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Counselor Updates Tab -->
          <div class="tab-pane" id="counselors">
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-users"></i> Team Member Updates</div>
                  <div class="section-subtitle">Share important updates about your team's counselors</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="highPerformers">High Performers & Recognition</label>
                <div class="input-group">
                  <textarea id="highPerformers" name="highPerformers" placeholder="Note counselors who deserve recognition for outstanding work..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="improvementNeeded">Counselors Needing Support</label>
                <div class="input-group">
                  <textarea id="improvementNeeded" name="improvementNeeded" placeholder="Note counselors who may need additional coaching or support..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="staffingIssues">Staffing Concerns & Planning</label>
                <div class="input-group">
                  <textarea id="staffingIssues" name="staffingIssues" placeholder="Document any staffing challenges, planned time off, or resource needs..."></textarea>
                </div>
              </div>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-graduation-cap"></i> Training & Development</div>
                  <div class="section-subtitle">Discuss team training needs and development opportunities</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="trainingNeeds">Identified Training Needs</label>
                <div class="input-group">
                  <textarea id="trainingNeeds" name="trainingNeeds" placeholder="Document specific training needs for your team..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="developmentPlans">Career Development Opportunities</label>
                <div class="input-group">
                  <textarea id="developmentPlans" name="developmentPlans" placeholder="Note opportunities for team growth and career advancement..."></textarea>
                </div>
              </div>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-exclamation-triangle"></i> Critical Issues</div>
                  <div class="section-subtitle">Document urgent matters requiring immediate attention</div>
                </div>
              </div>
              
              <div class="form-group">
                <div class="input-group">
                  <textarea id="criticalIssues" name="criticalIssues" placeholder="Document any critical issues or concerns about team members that require immediate attention..."></textarea>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Tasks & Action Items Tab -->
          <div class="tab-pane" id="tasks">
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-tasks"></i> Action Items & Follow-ups</div>
                  <div class="section-subtitle">Track tasks and action items from your manager meetings</div>
                </div>
                
                <div class="platform-toggle">
                  <div class="platform-option active" data-platform="internal">Internal Tasks</div>
                  <div class="platform-option" data-platform="asana">Asana Tasks</div>
                </div>
              </div>
              
              <!-- Internal Tasks Section -->
              <div class="platform-content" id="internal-tasks-content">
                <div class="task-list" id="taskList">
                  <!-- Sample task - will be dynamically generated -->
                  <div class="task-item">
                    <div class="task-header">
                      <div class="task-checkbox"></div>
                      <div class="task-input-group">
                        <input type="text" class="task-input" name="taskDescription[]" placeholder="Enter task description..." value="Update team KPIs dashboard with latest metrics">
                        <div class="task-options">
                          <div class="task-option">
                            <i class="fas fa-user-check"></i> Assign to me
                          </div>
                          <div class="task-option">
                            <i class="fas fa-calendar-alt"></i> Set due date
                          </div>
                          <div class="task-option">
                            <i class="fas fa-tag"></i> Add labels
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="task-footer">
                      <div style="display: flex; gap: 16px;">
                        <div class="task-assignee">
                          <i class="fas fa-user"></i> <span>Myself</span>
                          <input type="hidden" name="taskAssignee[]" value="self">
                        </div>
                        <div class="task-due-date">
                          <i class="fas fa-calendar-alt"></i> <span>Apr 12, 2025</span>
                          <input type="hidden" name="taskDueDate[]" value="2025-04-12">
                        </div>
                      </div>
                      <div class="task-actions">
                        <button type="button" class="task-action-btn">
                          <i class="fas fa-trash-alt"></i>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
                
                <button type="button" class="add-task-btn" id="addTaskBtn">
                  <i class="fas fa-plus"></i> Add New Task
                </button>
              </div>
              
              <!-- Asana Tasks Section -->
              <div class="platform-content" id="asana-tasks-content" style="display: none;">
                <div class="asana-section">
                  <div class="asana-header">
                    <div class="asana-title">
                      <img src="https://cdn.worldvectorlogo.com/logos/asana-logo.svg" alt="Asana Logo" class="asana-logo">
                      <span>Asana Integration</span>
                    </div>
                  </div>
                  
                  <div class="asana-project-select">
                    <label class="form-label" for="asanaProject">Select Project</label>
                    <div class="input-group">
                      <select id="asanaProject" name="asanaProject">
                        <option value="">-- Select an Asana Project --</option>
                        <option value="project1">Team Leadership</option>
                        <option value="project2">Q2 Initiatives</option>
                        <option value="project3">Crisis Response Improvement</option>
                      </select>
                    </div>
                  </div>
                  
                  <div class="asana-field">
                    <label for="asanaTaskName">Task Name</label>
                    <input type="text" id="asanaTaskName" name="asanaTaskName" placeholder="Enter task name">
                  </div>
                  
                  <div class="asana-field">
                    <label for="asanaTaskDescription">Description</label>
                    <textarea id="asanaTaskDescription" name="asanaTaskDescription" placeholder="Enter task description"></textarea>
                  </div>
                  
                  <div class="form-grid">
                    <div class="asana-field">
                      <label for="asanaAssignee">Assignee</label>
                      <select id="asanaAssignee" name="asanaAssignee">
                        <option value="me">Myself</option>
                        <option value="manager">My Manager</option>
                      </select>
                    </div>
                    
                    <div class="asana-field">
                      <label for="asanaDueDate">Due Date</label>
                      <input type="date" id="asanaDueDate" name="asanaDueDate">
                    </div>
                  </div>
                  
                                    <button type="button" class="btn btn-primary" id="createAsanaTaskBtn" style="width: 100%; margin-top: 16px;">
                    <i class="fas fa-plus"></i> Create Asana Task
                  </button>
                </div>
                
                <div class="form-section" style="padding: 16px; margin-top: 20px;">
                  <div class="section-header">
                    <div class="section-title"><i class="fas fa-link"></i> Linked Asana Tasks</div>
                  </div>
                  
                  <div id="linkedAsanaTasks">
                    <div style="text-align: center; padding: 20px; color: var(--text-tertiary);">
                      No Asana tasks linked to this session yet
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Feedback & Notes Tab -->
          <div class="tab-pane" id="feedback">
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-comment-alt"></i> Manager Feedback</div>
                  <div class="section-subtitle">Document feedback received from your manager</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="strengthFeedback">Strengths & Positive Feedback</label>
                <div class="input-group">
                  <textarea id="strengthFeedback" name="strengthFeedback" placeholder="Document positive feedback and recognized strengths from your manager..."></textarea>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="improvementFeedback">Areas for Improvement</label>
                <div class="input-group">
                  <textarea id="improvementFeedback" name="improvementFeedback" placeholder="Document constructive feedback and development suggestions from your manager..."></textarea>
                </div>
              </div>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-lightbulb"></i> Discussion Highlights</div>
                  <div class="section-subtitle">Document key points and insights from your conversation</div>
                </div>
              </div>
              
              <div class="form-group">
                <div class="input-group">
                  <textarea id="discussionHighlights" name="discussionHighlights" placeholder="Document important discussion points and insights from the meeting..."></textarea>
                </div>
              </div>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-sticky-note"></i> Personal Notes</div>
                  <div class="section-subtitle">Private notes for your own reference</div>
                </div>
              </div>
              
              <div class="form-group">
                <div class="input-group">
                  <textarea id="personalNotes" name="personalNotes" placeholder="Add any personal notes or reminders about the meeting (visible only to you)..."></textarea>
                </div>
              </div>
            </div>
            
            <div class="form-section">
              <div class="section-header">
                <div>
                  <div class="section-title"><i class="fas fa-calendar-alt"></i> Next Steps & Follow-up</div>
                  <div class="section-subtitle">Plan next steps following this meeting</div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="nextSteps">Next Steps</label>
                <div class="input-group">
                  <textarea id="nextSteps" name="nextSteps" placeholder="Document agreed next steps and responsibilities..."></textarea>
                </div>
              </div>
              
              <div class="form-grid">
                <div class="form-group">
                  <label class="form-label" for="nextMeetingDate">Next Meeting Date</label>
                  <div class="input-group">
                    <input type="date" id="nextMeetingDate" name="nextMeetingDate" class="with-icon">
                    <i class="fas fa-calendar input-icon"></i>
                  </div>
                </div>
                
                <div class="form-group">
                  <label class="form-label" for="nextMeetingTime">Next Meeting Time</label>
                  <div class="input-group">
                    <input type="time" id="nextMeetingTime" name="nextMeetingTime" class="with-icon">
                    <i class="fas fa-clock input-icon"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
    
    <!-- Action Footer -->
    <div class="actions-footer">
      <div class="btn-group">
        <button type="button" class="btn btn-secondary" id="cancelBtn">
          <i class="fas fa-times"></i> Cancel
        </button>
        <button type="button" class="btn btn-secondary" id="saveAsDraftBtn">
          <i class="fas fa-save"></i> Save as Draft
        </button>
      </div>
      
      <div class="btn-group">
        <button type="button" class="btn btn-secondary" id="prevTabBtn">
          <i class="fas fa-arrow-left"></i> Previous
        </button>
        <button type="button" class="btn btn-primary" id="nextTabBtn">
          Next <i class="fas fa-arrow-right"></i>
        </button>
        <button type="button" class="btn btn-primary" id="saveBtn" style="display: none;">
          <i class="fas fa-check"></i> Complete Session
        </button>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
    <div class="loading-text">Saving session...</div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast-notification" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Your changes have been saved successfully.</div>
    </div>
    <div class="toast-close">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let currentTab = 'general';
    let taskCounter = 1;
    let asanaTaskCounter = 0;
    
    // Initialize form 
    document.addEventListener('DOMContentLoaded', function() {
      // Set today's date as default
      const today = new Date();
      document.getElementById('sessionDate').valueAsDate = today;
      
      // Set up event listeners
      setupEventListeners();
      
      // Check if we're editing an existing session
      loadSessionData();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Tab navigation
      const tabButtons = document.querySelectorAll('.tab-button');
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          switchTab(tabId);
        });
      });
      
      // Next and previous tab buttons
      document.getElementById('nextTabBtn').addEventListener('click', goToNextTab);
      document.getElementById('prevTabBtn').addEventListener('click', goToPrevTab);
      
      // Save, save as draft, and cancel buttons
      document.getElementById('saveBtn').addEventListener('click', saveSession);
      document.getElementById('saveAsDraftBtn').addEventListener('click', saveAsDraft);
      document.getElementById('cancelBtn').addEventListener('click', cancelForm);
      
      // Task management buttons
      document.getElementById('addTaskBtn').addEventListener('click', addNewTask);
      
      // Existing task action buttons
      const deleteTaskBtns = document.querySelectorAll('.task-action-btn');
      deleteTaskBtns.forEach(btn => {
        btn.addEventListener('click', deleteTask);
      });
      
      // Asana task creation
      document.getElementById('createAsanaTaskBtn').addEventListener('click', createAsanaTask);
      
      // Platform toggle for tasks
      const platformOptions = document.querySelectorAll('.platform-option');
      platformOptions.forEach(option => {
        option.addEventListener('click', function() {
          const platform = this.getAttribute('data-platform');
          toggleTaskPlatform(platform);
        });
      });
      
      // Add KPI metric button
      document.getElementById('addKpiBtn').addEventListener('click', addNewKpiMetric);
      
      // Close toast notification
      document.querySelector('.toast-close').addEventListener('click', hideToast);
    }
    
    // Switch between tabs
    function switchTab(tabId) {
      // Hide all tab panes
      const tabPanes = document.querySelectorAll('.tab-pane');
      tabPanes.forEach(pane => {
        pane.classList.remove('active');
      });
      
      // Show the selected tab
      document.getElementById(tabId).classList.add('active');
      
      // Update active tab button
      const tabButtons = document.querySelectorAll('.tab-button');
      tabButtons.forEach(button => {
        if (button.getAttribute('data-tab') === tabId) {
          button.classList.add('active');
        } else {
          button.classList.remove('active');
        }
      });
      
      // Update current tab
      currentTab = tabId;
      
      // Update next/prev button visibility
      updateNavigationButtons();
    }
    
    // Go to next tab
    function goToNextTab() {
      const tabs = ['general', 'kpi', 'counselors', 'tasks', 'feedback'];
      const currentIndex = tabs.indexOf(currentTab);
      
      if (currentIndex < tabs.length - 1) {
        switchTab(tabs[currentIndex + 1]);
      }
    }
    
    // Go to previous tab
    function goToPrevTab() {
      const tabs = ['general', 'kpi', 'counselors', 'tasks', 'feedback'];
      const currentIndex = tabs.indexOf(currentTab);
      
      if (currentIndex > 0) {
        switchTab(tabs[currentIndex - 1]);
      }
    }
    
    // Update navigation buttons based on current tab
    function updateNavigationButtons() {
      const tabs = ['general', 'kpi', 'counselors', 'tasks', 'feedback'];
      const currentIndex = tabs.indexOf(currentTab);
      const prevBtn = document.getElementById('prevTabBtn');
      const nextBtn = document.getElementById('nextTabBtn');
      const saveBtn = document.getElementById('saveBtn');
      
      // Show/hide previous button
      if (currentIndex === 0) {
        prevBtn.style.display = 'none';
      } else {
        prevBtn.style.display = 'flex';
      }
      
      // Show/hide next button and save button
      if (currentIndex === tabs.length - 1) {
        nextBtn.style.display = 'none';
        saveBtn.style.display = 'flex';
      } else {
        nextBtn.style.display = 'flex';
        saveBtn.style.display = 'none';
      }
    }
    
    // Add a new task
    function addNewTask() {
      const taskList = document.getElementById('taskList');
      const newTask = document.createElement('div');
      newTask.className = 'task-item';
      newTask.innerHTML = `
        <div class="task-header">
          <div class="task-checkbox"></div>
          <div class="task-input-group">
            <input type="text" class="task-input" name="taskDescription[]" placeholder="Enter task description...">
            <div class="task-options">
              <div class="task-option">
                <i class="fas fa-user-check"></i> Assign to me
              </div>
              <div class="task-option">
                <i class="fas fa-calendar-alt"></i> Set due date
              </div>
              <div class="task-option">
                <i class="fas fa-tag"></i> Add labels
              </div>
            </div>
          </div>
        </div>
        <div class="task-footer">
          <div style="display: flex; gap: 16px;">
            <div class="task-assignee">
              <i class="fas fa-user"></i> <span>Myself</span>
              <input type="hidden" name="taskAssignee[]" value="self">
            </div>
            <div class="task-due-date">
              <i class="fas fa-calendar-alt"></i> <span>Not set</span>
              <input type="hidden" name="taskDueDate[]" value="">
            </div>
          </div>
          <div class="task-actions">
            <button type="button" class="task-action-btn">
              <i class="fas fa-trash-alt"></i>
            </button>
          </div>
        </div>
      `;
      
      taskList.appendChild(newTask);
      
      // Add event listeners for the new task
      const deleteBtn = newTask.querySelector('.task-action-btn');
      deleteBtn.addEventListener('click', deleteTask);
      
      // Assign options for new task
      const assignOption = newTask.querySelector('.task-option:nth-child(1)');
      assignOption.addEventListener('click', function() {
        const assigneeSpan = newTask.querySelector('.task-assignee span');
        const assigneeInput = newTask.querySelector('.task-assignee input');
        
        if (assigneeInput.value === 'self') {
          assigneeSpan.textContent = 'Manager';
          assigneeInput.value = 'manager';
        } else {
          assigneeSpan.textContent = 'Myself';
          assigneeInput.value = 'self';
        }
      });
      
      // Due date option for new task
      const dueDateOption = newTask.querySelector('.task-option:nth-child(2)');
      dueDateOption.addEventListener('click', function() {
        const datePicker = document.createElement('input');
        datePicker.type = 'date';
        datePicker.style.position = 'absolute';
        datePicker.style.opacity = '0';
        datePicker.style.zIndex = '-1';
        
        document.body.appendChild(datePicker);
        
        datePicker.showPicker();
        
        datePicker.addEventListener('change', function() {
          const dueDateSpan = newTask.querySelector('.task-due-date span');
          const dueDateInput = newTask.querySelector('.task-due-date input');
          
          dueDateInput.value = datePicker.value;
          dueDateSpan.textContent = formatDate(new Date(datePicker.value));
          
          document.body.removeChild(datePicker);
        });
      });
      
      taskCounter++;
      
      // Focus on the new task's input field
      const newTaskInput = newTask.querySelector('.task-input');
      newTaskInput.focus();
    }
    
    // Delete a task
    function deleteTask(event) {
      const taskItem = event.target.closest('.task-item');
      taskItem.remove();
    }
    
    // Create an Asana task
    function createAsanaTask() {
      // Validate inputs
      const projectSelect = document.getElementById('asanaProject');
      const taskName = document.getElementById('asanaTaskName');
      const taskDescription = document.getElementById('asanaTaskDescription');
      const assignee = document.getElementById('asanaAssignee');
      const dueDate = document.getElementById('asanaDueDate');
      
      if (!projectSelect.value) {
        showToast('Please select a project', 'Please select an Asana project to continue.', 'error');
        return;
      }
      
      if (!taskName.value) {
        showToast('Task name required', 'Please enter a name for your Asana task.', 'error');
        return;
      }
      
      // Create the task (in a real implementation, this would call the Asana API)
      const linkedTasksContainer = document.getElementById('linkedAsanaTasks');
      
      // Check if we're showing the "no tasks" placeholder
      if (linkedTasksContainer.querySelector('div').textContent.includes('No Asana tasks')) {
        linkedTasksContainer.innerHTML = '';
      }
      
      // Create a fake task card (in production, this would use real Asana task data)
      const taskCard = document.createElement('div');
      taskCard.style.padding = '12px';
      taskCard.style.backgroundColor = '#F6F8F9';
      taskCard.style.border = '1px solid #E8ECEE';
      taskCard.style.borderRadius = '8px';
      taskCard.style.marginBottom = '12px';
      
      taskCard.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
          <div style="font-weight: 600;">${taskName.value}</div>
          <div style="font-size: 12px; color: var(--text-tertiary);">
            <i class="fas fa-link"></i> Task #${1000 + asanaTaskCounter}
          </div>
        </div>
        <div style="font-size: 13px; color: var(--text-secondary); margin-bottom: 8px;">
          ${taskDescription.value || 'No description provided'}
        </div>
        <div style="display: flex; justify-content: space-between; font-size: 12px; color: var(--text-tertiary);">
          <div><i class="fas fa-user"></i> ${assignee.value === 'me' ? 'Myself' : 'Manager'}</div>
          <div><i class="fas fa-calendar"></i> ${dueDate.value ? formatDate(new Date(dueDate.value)) : 'No due date'}</div>
        </div>
      `;
      
      // Add hidden input fields to include in form submission
      const projectInput = document.createElement('input');
      projectInput.type = 'hidden';
      projectInput.name = `asana_project_${asanaTaskCounter}`;
      projectInput.value = projectSelect.value;
      taskCard.appendChild(projectInput);
      
      const nameInput = document.createElement('input');
      nameInput.type = 'hidden';
      nameInput.name = `asana_name_${asanaTaskCounter}`;
      nameInput.value = taskName.value;
      taskCard.appendChild(nameInput);
      
      const descInput = document.createElement('input');
      descInput.type = 'hidden';
      descInput.name = `asana_description_${asanaTaskCounter}`;
      descInput.value = taskDescription.value;
      taskCard.appendChild(descInput);
      
      const assigneeInput = document.createElement('input');
      assigneeInput.type = 'hidden';
      assigneeInput.name = `asana_assignee_${asanaTaskCounter}`;
      assigneeInput.value = assignee.value;
      taskCard.appendChild(assigneeInput);
      
      const dueDateInput = document.createElement('input');
      dueDateInput.type = 'hidden';
      dueDateInput.name = `asana_duedate_${asanaTaskCounter}`;
      dueDateInput.value = dueDate.value;
      taskCard.appendChild(dueDateInput);
      
      linkedTasksContainer.appendChild(taskCard);
      
      // Clear form fields
      taskName.value = '';
      taskDescription.value = '';
      dueDate.value = '';
      
      // Increment counter
      asanaTaskCounter++;
      
      // Show success message
      showToast('Task Created', 'The Asana task has been created successfully.', 'success');
    }
    
    // Toggle between internal tasks and Asana tasks
    function toggleTaskPlatform(platform) {
      const platformOptions = document.querySelectorAll('.platform-option');
      platformOptions.forEach(option => {
        option.classList.toggle('active', option.getAttribute('data-platform') === platform);
      });
      
      // Show appropriate content
      const internalContent = document.getElementById('internal-tasks-content');
      const asanaContent = document.getElementById('asana-tasks-content');
      
      if (platform === 'internal') {
        internalContent.style.display = 'block';
        asanaContent.style.display = 'none';
      } else {
        internalContent.style.display = 'none';
        asanaContent.style.display = 'block';
      }
    }
    
    // Add a new custom KPI metric
    function addNewKpiMetric() {
      const metricsContainer = document.querySelector('.kpi-metrics');
      
      // Prompt the user for the metric name
      const metricName = prompt("Enter KPI metric name:", "");
      
      if (!metricName) return; // User cancelled
      
      // Create new KPI card
      const kpiCard = document.createElement('div');
      kpiCard.className = 'kpi-card';
      
      // Generate a unique identifier for form field names
      const metricId = 'custom_' + Date.now();
      
      kpiCard.innerHTML = `
        <div class="kpi-card-header">
          <div class="kpi-title">${metricName}</div>
          <div class="kpi-icon"><i class="fas fa-chart-bar"></i></div>
        </div>
        <div class="kpi-value-group">
          <input type="number" id="${metricId}_value" name="${metricId}_value" min="0" max="100" step="0.1" value="0" style="width: 60px; text-align: right;">
          <div class="kpi-unit">
            <select name="${metricId}_unit">
              <option value="%">%</option>
              <option value="min">min</option>
              <option value="sec">sec</option>
              <option value="/5">/5</option>
              <option value="">none</option>
            </select>
          </div>
        </div>
        <div class="kpi-progress">
          <div class="kpi-progress-bar">
            <div class="kpi-progress-fill" style="width: 0%;"></div>
          </div>
          <div class="kpi-progress-text">N/A</div>
        </div>
        
        <div style="margin-top: 12px;">
          <label class="form-label">Target</label>
          <input type="number" name="${metricId}_target" value="0" min="0" max="100" step="0.1">
        </div>
        <div style="margin-top: 12px;">
          <label class="form-label">Notes</label>
          <textarea name="${metricId}_notes" placeholder="Notes on ${metricName} performance..."></textarea>
        </div>
        <div style="margin-top: 12px; text-align: right;">
          <button type="button" class="btn btn-secondary delete-kpi-btn" style="padding: 4px 8px; font-size: 12px;">
            <i class="fas fa-trash"></i> Remove
          </button>
        </div>
      `;
      
      metricsContainer.appendChild(kpiCard);
      
      // Add event listener to delete button
      const deleteBtn = kpiCard.querySelector('.delete-kpi-btn');
      deleteBtn.addEventListener('click', function() {
        if (confirm('Are you sure you want to remove this KPI metric?')) {
          kpiCard.remove();
        }
      });
      
      // Add event listeners for updating progress bar
      const valueInput = kpiCard.querySelector(`#${metricId}_value`);
      const progressFill = kpiCard.querySelector('.kpi-progress-fill');
      const progressText = kpiCard.querySelector('.kpi-progress-text');
      
      valueInput.addEventListener('input', function() {
        const value = parseFloat(this.value) || 0;
        progressFill.style.width = Math.min(value, 100) + '%';
        progressText.textContent = value;
        
        // Update color based on value
        if (value < 50) {
          progressFill.className = 'kpi-progress-fill danger';
          progressText.className = 'kpi-progress-text danger';
        } else if (value < 75) {
          progressFill.className = 'kpi-progress-fill warning';
          progressText.className = 'kpi-progress-text warning';
        } else {
          progressFill.className = 'kpi-progress-fill success';
          progressText.className = 'kpi-progress-text success';
        }
      });
    }
    
    // Load session data when editing an existing session
    function loadSessionData() {
      try {
        // Check if we're editing an existing session
        google.script.run
          .withSuccessHandler(function(sessionData) {
            if (sessionData && sessionData.id) {
              // This is an existing session, populate form fields
              populateFormFields(sessionData);
            }
          })
          .withFailureHandler(function(error) {
            console.error('Error loading session data:', error);
          })
          .getManagerSessionToEdit();
      } catch (e) {
        // This is fine - means we're creating a new session
        console.log('Creating new session');
      }
    }
    
    // Populate form fields with existing session data
    function populateFormFields(sessionData) {
      // General tab fields
      if (sessionData.sessionDate) document.getElementById('sessionDate').value = formatDateForInput(new Date(sessionData.sessionDate));
      if (sessionData.sessionTime) document.getElementById('sessionTime').value = sessionData.sessionTime;
      if (sessionData.managerName) document.getElementById('managerName').value = sessionData.managerName;
      if (sessionData.sessionDuration) document.getElementById('sessionDuration').value = sessionData.sessionDuration;
      if (sessionData.meetingType) document.getElementById('meetingType').value = sessionData.meetingType;
      if (sessionData.meetingObjectives) document.getElementById('meetingObjectives').value = sessionData.meetingObjectives;
      if (sessionData.orgUpdates) document.getElementById('orgUpdates').value = sessionData.orgUpdates;
      
      // Set checkboxes
      if (sessionData.prepKPIs) document.getElementById('prepKPIs').checked = true;
      if (sessionData.prepCounselors) document.getElementById('prepCounselors').checked = true;
      if (sessionData.prepProjects) document.getElementById('prepProjects').checked = true;
      if (sessionData.prepQuestions) document.getElementById('prepQuestions').checked = true;
      if (sessionData.prepChallenges) document.getElementById('prepChallenges').checked = true;
      
      // KPI tab fields
      if (sessionData.callsOffered) document.getElementById('callsOffered').value = sessionData.callsOffered;
      if (sessionData.callsAccepted) document.getElementById('callsAccepted').value = sessionData.callsAccepted;
      if (sessionData.answerRate) document.getElementById('answerRate').value = sessionData.answerRate;
      if (sessionData.averageTalkTime) document.getElementById('averageTalkTime').value = sessionData.averageTalkTime;
      if (sessionData.acwPercentage) document.getElementById('acwPercentage').value = sessionData.acwPercentage;
      if (sessionData.onQueuePercentage) document.getElementById('onQueuePercentage').value = sessionData.onQueuePercentage;
      if (sessionData.offQueuePercentage) document.getElementById('offQueuePercentage').value = sessionData.offQueuePercentage;
      if (sessionData.interactingTime) document.getElementById('interactingTime').value = sessionData.interactingTime;
      
      if (sessionData.kpiStrengths) document.getElementById('kpiStrengths').value = sessionData.kpiStrengths;
      if (sessionData.kpiChallenges) document.getElementById('kpiChallenges').value = sessionData.kpiChallenges;
      if (sessionData.kpiActions) document.getElementById('kpiActions').value = sessionData.kpiActions;
      
      // Counselor updates tab
      if (sessionData.highPerformers) document.getElementById('highPerformers').value = sessionData.highPerformers;
      if (sessionData.improvementNeeded) document.getElementById('improvementNeeded').value = sessionData.improvementNeeded;
      if (sessionData.staffingIssues) document.getElementById('staffingIssues').value = sessionData.staffingIssues;
      if (sessionData.trainingNeeds) document.getElementById('trainingNeeds').value = sessionData.trainingNeeds;
      if (sessionData.developmentPlans) document.getElementById('developmentPlans').value = sessionData.developmentPlans;
      if (sessionData.criticalIssues) document.getElementById('criticalIssues').value = sessionData.criticalIssues;
      
      // Tasks - populate existing tasks
      if (sessionData.tasks && sessionData.tasks.length > 0) {
        const taskList = document.getElementById('taskList');
        taskList.innerHTML = ''; // Clear default task
        
        sessionData.tasks.forEach(task => {
          addTaskToUI(task);
        });
      }
      
      // Asana tasks - populate existing linked tasks
      if (sessionData.asanaTasks && sessionData.asanaTasks.length > 0) {
        const linkedTasksContainer = document.getElementById('linkedAsanaTasks');
        linkedTasksContainer.innerHTML = ''; // Clear placeholder
        
        sessionData.asanaTasks.forEach(task => {
          addAsanaTaskToUI(task);
        });
        
        asanaTaskCounter = sessionData.asanaTasks.length;
      }
      
      // Feedback tab
      if (sessionData.strengthFeedback) document.getElementById('strengthFeedback').value = sessionData.strengthFeedback;
      if (sessionData.improvementFeedback) document.getElementById('improvementFeedback').value = sessionData.improvementFeedback;
      if (sessionData.discussionHighlights) document.getElementById('discussionHighlights').value = sessionData.discussionHighlights;
      if (sessionData.personalNotes) document.getElementById('personalNotes').value = sessionData.personalNotes;
      if (sessionData.nextSteps) document.getElementById('nextSteps').value = sessionData.nextSteps;
      
      if (sessionData.nextMeetingDate) document.getElementById('nextMeetingDate').value = formatDateForInput(new Date(sessionData.nextMeetingDate));
      if (sessionData.nextMeetingTime) document.getElementById('nextMeetingTime').value = sessionData.nextMeetingTime;
      
      // Add session ID as a hidden field
      const idInput = document.createElement('input');
      idInput.type = 'hidden';
      idInput.name = 'id';
      idInput.value = sessionData.id;
      document.getElementById('managerOneOnOneForm').appendChild(idInput);
    }
    
    // Add existing task to UI
    function addTaskToUI(task) {
      const taskList = document.getElementById('taskList');
      const taskItem = document.createElement('div');
      taskItem.className = 'task-item';
      
      taskItem.innerHTML = `
        <div class="task-header">
          <div class="task-checkbox ${task.completed ? 'completed' : ''}">
            ${task.completed ? '<i class="fas fa-check"></i>' : ''}
          </div>
          <div class="task-input-group">
            <input type="text" class="task-input" name="taskDescription[]" value="${task.description || ''}">
            <div class="task-options">
              <div class="task-option">
                <i class="fas fa-user-check"></i> ${task.assignee === 'manager' ? 'Assign to me' : 'Assign to manager'}
              </div>
              <div class="task-option">
                <i class="fas fa-calendar-alt"></i> Set due date
              </div>
              <div class="task-option">
                <i class="fas fa-tag"></i> Add labels
              </div>
            </div>
          </div>
        </div>
        <div class="task-footer">
          <div style="display: flex; gap: 16px;">
            <div class="task-assignee">
              <i class="fas fa-user"></i> <span>${task.assignee === 'manager' ? 'Manager' : 'Myself'}</span>
              <input type="hidden" name="taskAssignee[]" value="${task.assignee || 'self'}">
            </div>
            <div class="task-due-date">
              <i class="fas fa-calendar-alt"></i> <span>${task.dueDate ? formatDate(new Date(task.dueDate)) : 'Not set'}</span>
              <input type="hidden" name="taskDueDate[]" value="${task.dueDate || ''}">
            </div>
          </div>
          <div class="task-actions">
            <button type="button" class="task-action-btn">
              <i class="fas fa-trash-alt"></i>
            </button>
          </div>
        </div>
        <input type="hidden" name="taskCompleted[]" value="${task.completed ? 'true' : 'false'}">
        ${task.id ? `<input type="hidden" name="taskId[]" value="${task.id}">` : ''}
      `;
      
      taskList.appendChild(taskItem);
      
      // Add event listeners for this task
      const deleteBtn = taskItem.querySelector('.task-action-btn');
      deleteBtn.addEventListener('click', deleteTask);
      
      const taskCheckbox = taskItem.querySelector('.task-checkbox');
      taskCheckbox.addEventListener('click', function() {
        const isCompleted = this.classList.contains('completed');
        this.classList.toggle('completed');
        
        if (isCompleted) {
          this.innerHTML = '';
        } else {
          this.innerHTML = '<i class="fas fa-check"></i>';
        }
        
        const completedInput = taskItem.querySelector('input[name="taskCompleted[]"]');
        completedInput.value = !isCompleted;
      });
    }
    
    // Add existing Asana task to UI
    function addAsanaTaskToUI(task) {
      const linkedTasksContainer = document.getElementById('linkedAsanaTasks');
      
      const taskCard = document.createElement('div');
      taskCard.style.padding = '12px';
      taskCard.style.backgroundColor = '#F6F8F9';
      taskCard.style.border = '1px solid #E8ECEE';
      taskCard.style.borderRadius = '8px';
      taskCard.style.marginBottom = '12px';
      
      taskCard.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
          <div style="font-weight: 600;">${task.name || 'Unnamed Task'}</div>
          <div style="font-size: 12px; color: var(--text-tertiary);">
            <i class="fas fa-link"></i> Task #${task.asanaId || '0000'}
          </div>
        </div>
        <div style="font-size: 13px; color: var(--text-secondary); margin-bottom: 8px;">
          ${task.description || 'No description provided'}
        </div>
        <div style="display: flex; justify-content: space-between; font-size: 12px; color: var(--text-tertiary);">
          <div><i class="fas fa-user"></i> ${task.assignee === 'me' ? 'Myself' : 'Manager'}</div>
          <div><i class="fas fa-calendar"></i> ${task.dueDate ? formatDate(new Date(task.dueDate)) : 'No due date'}</div>
        </div>
        <input type="hidden" name="asana_id_${asanaTaskCounter}" value="${task.id || ''}">
        <input type="hidden" name="asana_asana_id_${asanaTaskCounter}" value="${task.asanaId || ''}">
        <input type="hidden" name="asana_project_${asanaTaskCounter}" value="${task.project || ''}">
        <input type="hidden" name="asana_name_${asanaTaskCounter}" value="${task.name || ''}">
        <input type="hidden" name="asana_description_${asanaTaskCounter}" value="${task.description || ''}">
        <input type="hidden" name="asana_assignee_${asanaTaskCounter}" value="${task.assignee || 'me'}">
        <input type="hidden" name="asana_duedate_${asanaTaskCounter}" value="${task.dueDate || ''}">
        <input type="hidden" name="asana_completed_${asanaTaskCounter}" value="${task.completed ? 'true' : 'false'}">
      `;
      
      linkedTasksContainer.appendChild(taskCard);
      asanaTaskCounter++;
    }
    
    // Save the session as complete
    function saveSession() {
      saveFormData(false);
    }
    
    // Save the session as draft
    function saveAsDraft() {
      saveFormData(true);
    }
    
    // Save form data
    function saveFormData(isDraft) {
      // Show loading overlay
      showLoading(isDraft ? 'Saving draft...' : 'Completing session...');
      
      // Get form data
      const form = document.getElementById('managerOneOnOneForm');
      const formData = new FormData(form);
      
      // Convert FormData to plain object
      const data = {};
      formData.forEach((value, key) => {
        // For array fields, handle specially
        if (key.endsWith('[]')) {
          const cleanKey = key.substring(0, key.length - 2);
          if (!data[cleanKey]) data[cleanKey] = [];
          data[cleanKey].push(value);
        } else {
          data[key] = value;
        }
      });
      
      // Add isDraft flag
      data.isDraft = isDraft;
      
      // Send to server
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showToast(
              isDraft ? 'Draft Saved' : 'Session Complete', 
              isDraft ? 'Your session draft was saved successfully.' : 'Your session was completed successfully.',
              'success'
            );
            
            // Close the dialog after short delay
            setTimeout(function() {
              google.script.host.close();
            }, 1500);
          } else {
            showToast('Error', result.message || 'Failed to save the session.', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error', error.message || 'An unexpected error occurred.', 'error');
        })
        .saveManagerOneOnOneSession(data);
    }
    
    // Cancel the form
    function cancelForm() {
      if (confirm('Are you sure you want to cancel? Any unsaved changes will be lost.')) {
        google.script.host.close();
      }
    }
    
    // Show loading overlay
    function showLoading(message = 'Processing...') {
      const overlay = document.getElementById('loadingOverlay');
      const loadingText = document.querySelector('.loading-text');
      
      loadingText.textContent = message;
      overlay.classList.add('show');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('show');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const iconElement = toast.querySelector('.toast-icon');
      
      // Set toast type
      iconElement.className = 'toast-icon ' + type;
      
      // Set icon
      const iconI = iconElement.querySelector('i');
      iconI.className = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle';
      
      // Set content
      toast.querySelector('.toast-title').textContent = title;
      toast.querySelector('.toast-message').textContent = message;
      
      // Show toast
      toast.classList.add('show');
      
      // Auto hide after 5 seconds
      setTimeout(function() {
        hideToast();
      }, 5000);
    }
    
    // Hide toast notification
    function hideToast() {
      document.getElementById('toast').classList.remove('show');
    }
    
    // Format date for display
    function formatDate(date) {
      const options = { month: 'short', day: 'numeric', year: 'numeric' };
      return date.toLocaleDateString('en-US', options);
    }
    
    // Format date for input fields (YYYY-MM-DD)
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }
  </script>
</body>
</html>











 <!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manager One-on-One Notes</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    .page-container {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      padding: 24px;
    }
    
    .page-header {
      margin-bottom: 24px;
    }
    
    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .title-icon {
      width: 56px;
      height: 56px;
      border-radius: var(--radius-lg);
      background: var(--primary-gradient);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 24px;
      box-shadow: 0 10px 20px rgba(85, 64, 175, 0.3);
      position: relative;
      overflow: hidden;
    }
    
    .title-text {
      display: flex;
      flex-direction: column;
    }
    
    .title-main {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: 4px;
    }
    
    .title-sub {
      font-size: 14px;
      color: var(--text-tertiary);
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-outline {
      background-color: white;
      border: 1px solid var(--border-medium);
      color: var(--text-secondary);
    }
    
    .btn-outline:hover {
      border-color: var(--primary-color);
      color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    .filters-bar {
      padding: 16px 20px;
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      align-items: center;
    }
    
    .filter-group {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .filter-label {
      font-size: 13px;
      font-weight: 500;
      color: var(--text-secondary);
    }
    
    .filter-select {
      padding: 8px 30px 8px 12px;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-medium);
      background-color: white;
      font-family: 'Inter', sans-serif;
      font-size: 13px;
      color: var(--text-primary);
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%2364748b' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 10px center;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .filter-select:focus {
      outline: none;
      border-color: var(--primary-color);
    }
    
    .search-input {
      flex: 1;
      min-width: 200px;
      padding: 8px 12px 8px 36px;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-medium);
      font-family: 'Inter', sans-serif;
      font-size: 13px;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%2364748b' viewBox='0 0 16 16'%3E%3Cpath d='M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: left 12px center;
      transition: all var(--transition-fast);
    }
    
    .search-input:focus {
      outline: none;
      border-color: var(--primary-color);
    }
    
    .view-toggle {
      display: flex;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      padding: 4px;
    }
    
    .view-option {
      padding: 6px 12px;
      font-size: 13px;
      border-radius: var(--radius-md);
      cursor: pointer;
      color: var(--text-tertiary);
      transition: all var(--transition-fast);
    }
    
    .view-option.active {
      background-color: white;
      color: var(--primary-color);
      box-shadow: var(--shadow-sm);
    }
    
    .view-option i {
      margin-right: 6px;
    }
    
    .main-content {
      flex: 1;
    }
    
    /* Meetings timeline view */
    .timeline-container {
      position: relative;
      padding-left: 36px;
    }
    
    .timeline-line {
      position: absolute;
      left: 8px;
      top: 0;
      width: 2px;
      height: 100%;
      background: var(--border-medium);
      background: linear-gradient(to bottom, var(--primary-light), var(--secondary-color));
    }
    
    .timeline-item {
      position: relative;
      margin-bottom: 24px;
      animation: fadeIn 0.5s ease forwards;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .timeline-dot {
      position: absolute;
      left: -36px;
      top: 16px;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      background: var(--primary-color);
      border: 3px solid white;
      box-shadow: var(--shadow-sm);
    }
    
    .timeline-dot::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 100%;
      width: 20px;
      height: 2px;
      background: var(--border-medium);
      transform: translateY(-50%);
      z-index: -1;
    }
    
    .timeline-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      overflow: hidden;
      transition: transform var(--transition-normal), box-shadow var(--transition-normal);
      transform: translateZ(0);
      position: relative;
    }
    
    .timeline-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }
    
    .timeline-header {
      padding: 16px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid var(--border-light);
    }
    
    .timeline-date {
      display: flex;
      align-items: center;
      gap: 8px;
      font-weight: 600;
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    .timeline-title-group {
      display: flex;
      flex-direction: column;
    }
    
    .timeline-title {
      font-weight: 600;
      font-size: 16px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .timeline-badge {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 4px 10px;
      border-radius: var(--radius-md);
      font-size: 12px;
      font-weight: 500;
      gap: 4px;
    }
    
    .badge-primary {
      background-color: rgba(85, 64, 175, 0.1);
      color: var(--primary-color);
    }
    
    .badge-draft {
      background-color: var(--warning-light);
      color: var(--warning-color);
    }
    
    .timeline-body {
      padding: 16px 20px;
    }
    
    .timeline-info {
      margin-bottom: 16px;
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
    }
    
    .info-item {
      display: flex;
      align-items: center;
      gap: 6px;
      color: var(--text-tertiary);
      font-size: 13px;
    }
    
    .content-preview {
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      padding: 12px;
      margin-bottom: 16px;
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .timeline-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
    }
    
    .timeline-tag {
      display: inline-flex;
      padding: 4px 10px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .timeline-footer {
      padding: 12px 20px;
      border-top: 1px solid var(--border-light);
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: var(--bg-secondary);
    }
    
    .task-count {
      font-size: 13px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .timeline-actions {
      display: flex;
      gap: 8px;
    }
    
    .timeline-action {
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: var(--radius-md);
      background-color: white;
      border: 1px solid var(--border-medium);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .timeline-action:hover {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }
    
    /* Meetings cards view */
    .cards-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      gap: 24px;
    }
    
    .meeting-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      overflow: hidden;
      transition: transform var(--transition-normal), box-shadow var(--transition-normal);
      transform: translateZ(0);
      position: relative;
      height: 100%;
    }
    
    .meeting-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }
    
    .card-header {
      padding: 16px;
      background: var(--primary-gradient);
      color: white;
      position: relative;
      overflow: hidden;
    }
    
    .card-header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .card-date {
      font-size: 13px;
      opacity: 0.8;
      margin-bottom: 4px;
    }
    
    .card-title {
      font-weight: 700;
      font-size: 18px;
      margin-bottom: 8px;
      position: relative;
    }
    
    .card-type {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      padding: 4px 10px;
      background-color: rgba(255, 255, 255, 0.2);
      border-radius: var(--radius-md);
      font-size: 12px;
      font-weight: 500;
    }
    
    .card-draft-badge {
      position: absolute;
      top: 16px;
      right: 16px;
      background-color: var(--warning-color);
      color: white;
      font-size: 12px;
      font-weight: 600;
      padding: 4px 10px;
      border-radius: var(--radius-md);
      z-index: 2;
    }
    
    .card-body {
      padding: 16px;
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 16px;
    }
    
    .card-section {
      display: flex;
      flex-direction: column;
      gap: 6px;
    }
    
    .section-title {
      font-weight: 600;
      font-size: 13px;
      color: var(--text-tertiary);
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .section-content {
      font-size: 14px;
      color: var(--text-secondary);
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
    }
    
    .card-tasks {
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      padding: 12px;
    }
    
    .task-list-preview {
      margin-top: 8px;
    }
    
    .task-item-preview {
      display: flex;
      align-items: flex-start;
      gap: 8px;
      margin-bottom: 8px;
      font-size: 13px;
    }
    
    .task-checkbox-preview {
      width: 16px;
      height: 16px;
      border-radius: 4px;
      border: 1.5px solid var(--border-medium);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      flex-shrink: 0;
      margin-top: 2px;
    }
    
    .task-checkbox-preview.completed {
      background-color: var(--success-color);
      border-color: var(--success-color);
    }
    
    .card-footer {
      padding: 12px 16px;
      border-top: 1px solid var(--border-light);
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: var(--bg-secondary);
    }
    
    /* Pagination */
    .pagination {
      margin-top: 24px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      background-color: white;
      border-radius: var(--radius-lg);
      padding: 12px 20px;
      box-shadow: var(--shadow-md);
    }
    
    .pagination-info {
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    .pagination-controls {
      display: flex;
      align-items: center;
    }
    
    .pagination-button {
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: white;
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      color: var(--text-secondary);
      cursor: pointer;
      transition: all var(--transition-fast);
      margin: 0 2px;
    }
    
    .pagination-button:hover:not(:disabled) {
      background-color: var(--bg-secondary);
    }
    
    .pagination-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .pagination-button.active {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }
    
    /* Empty state */
    .empty-state {
      background-color: white;
      border-radius: var(--radius-lg);
      padding: 40px;
      text-align: center;
      box-shadow: var(--shadow-md);
    }
    
    .empty-icon {
      font-size: 48px;
      color: var(--text-light);
      margin-bottom: 16px;
    }
    
    .empty-title {
      font-family: 'Manrope', sans-serif;
      font-size: 20px;
      font-weight: 700;
      margin-bottom: 8px;
      color: var(--text-primary);
    }
    
    .empty-description {
      color: var(--text-tertiary);
      max-width: 400px;
      margin: 0 auto 24px;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      backdrop-filter: blur(5px);
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.1);
      border-top-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    /* Special effects */
    .title-icon::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 2px;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);
      bottom: 0;
      left: 0;
      animation: scan 2s linear infinite;
    }
    
    @keyframes scan {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }
    
    .timeline-card::after,
    .meeting-card::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: linear-gradient(90deg, transparent, var(--primary-light), transparent);
      opacity: 0;
      transition: opacity var(--transition-fast);
    }
    
    .timeline-card:hover::after,
    .meeting-card:hover::after {
      opacity: 1;
      animation: scan 2s linear infinite;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
      }
      
      .header-actions {
        width: 100%;
      }
      
      .filters-bar {
        flex-direction: column;
        align-items: stretch;
      }
      
      .filter-group {
        width: 100%;
      }
      
      .filter-select {
        width: 100%;
      }
      
      .filter-label {
        min-width: 80px;
      }
      
      .cards-grid {
        grid-template-columns: 1fr;
      }
      
      .pagination {
        flex-direction: column;
        gap: 12px;
      }
    }
  </style>
</head>

<body>
  <div class="page-container">
    <header class="page-header">
      <div class="header-content">
        <div class="header-title">
          <div class="title-icon">
            <i class="fas fa-user-tie"></i>
          </div>
          <div class="title-text">
            <h1 class="title-main">Manager One-on-One Notes 📝</h1>
            <p class="title-sub">Track and review your meetings with your manager</p>
          </div>
        </div>
        
        <div class="header-actions">
          <button class="btn btn-outline" id="dashboardBtn">
            <i class="fas fa-tachometer-alt"></i> Dashboard
          </button>
          <button class="btn btn-primary" id="newSessionBtn">
                       <i class="fas fa-plus"></i> New Session
          </button>
        </div>
      </div>
    </header>
    
    <div class="filters-bar">
      <div class="filter-group">
        <span class="filter-label">Manager:</span>
        <select id="managerFilter" class="filter-select">
          <option value="all">All Managers</option>
          <!-- Will be populated dynamically -->
        </select>
      </div>
      
      <div class="filter-group">
        <span class="filter-label">Type:</span>
        <select id="typeFilter" class="filter-select">
          <option value="all">All Types</option>
          <option value="regular">Regular Check-in</option>
          <option value="kpi">KPI Review</option>
          <option value="performance">Performance Discussion</option>
          <option value="project">Project Update</option>
          <option value="coaching">Coaching Session</option>
          <option value="other">Other</option>
        </select>
      </div>
      
      <div class="filter-group">
        <span class="filter-label">Date Range:</span>
        <select id="dateRangeFilter" class="filter-select">
          <option value="30">Last 30 Days</option>
          <option value="90">Last 90 Days</option>
          <option value="180">Last 6 Months</option>
          <option value="365">Last 12 Months</option>
          <option value="all">All Time</option>
          <option value="custom">Custom Range</option>
        </select>
      </div>
      
      <div class="filter-group" style="flex: 1;">
        <input type="text" id="searchInput" class="search-input" placeholder="Search notes, topics, or action items...">
      </div>
      
      <div class="view-toggle">
        <div class="view-option active" data-view="timeline">
          <i class="fas fa-stream"></i> Timeline
        </div>
        <div class="view-option" data-view="cards">
          <i class="fas fa-th-large"></i> Cards
        </div>
      </div>
    </div>
    
    <main class="main-content">
      <!-- Timeline View -->
      <div id="timelineView" class="timeline-container">
        <div class="timeline-line"></div>
        
        <!-- Will be populated dynamically, showing example timeline item -->
        <div class="timeline-item">
          <div class="timeline-dot"></div>
          <div class="timeline-card">
            <div class="timeline-header">
              <div class="timeline-title-group">
                <div class="timeline-title">
                  KPI Performance Review
                  <span class="timeline-badge badge-primary">KPI Review</span>
                </div>
              </div>
              <div class="timeline-date">
                <i class="far fa-calendar-alt"></i> April 3, 2025
              </div>
            </div>
            
            <div class="timeline-body">
              <div class="timeline-info">
                <div class="info-item">
                  <i class="fas fa-user-tie"></i> Sarah Johnson
                </div>
                <div class="info-item">
                  <i class="fas fa-clock"></i> 45 minutes
                </div>
              </div>
              
              <div class="content-preview">
                Discussed team metrics performance from Q1, with focus on improving average talk time which is currently 22 minutes (goal: 15-20 min). Implemented new training to help agents resolve calls more efficiently.
              </div>
              
              <div class="timeline-tags">
                <div class="timeline-tag">KPI Review</div>
                <div class="timeline-tag">Performance</div>
                <div class="timeline-tag">Training</div>
              </div>
            </div>
            
            <div class="timeline-footer">
              <div class="task-count">
                <i class="fas fa-tasks"></i> 3 action items
              </div>
              <div class="timeline-actions">
                <button class="timeline-action view-session" data-id="123" title="View Details">
                  <i class="fas fa-eye"></i>
                </button>
                <button class="timeline-action edit-session" data-id="123" title="Edit">
                  <i class="fas fa-edit"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <div class="timeline-item">
          <div class="timeline-dot"></div>
          <div class="timeline-card">
            <div class="timeline-header">
              <div class="timeline-title-group">
                <div class="timeline-title">
                  Weekly One-on-One
                  <span class="timeline-badge badge-draft">Draft</span>
                </div>
              </div>
              <div class="timeline-date">
                <i class="far fa-calendar-alt"></i> March 27, 2025
              </div>
            </div>
            
            <div class="timeline-body">
              <div class="timeline-info">
                <div class="info-item">
                  <i class="fas fa-user-tie"></i> Sarah Johnson
                </div>
                <div class="info-item">
                  <i class="fas fa-clock"></i> 30 minutes
                </div>
              </div>
              
              <div class="content-preview">
                Regular check-in to discuss team updates and individual performance. Discussed resource allocation for upcoming project launch.
              </div>
              
              <div class="timeline-tags">
                <div class="timeline-tag">Regular Check-in</div>
                <div class="timeline-tag">Projects</div>
                <div class="timeline-tag">Resources</div>
              </div>
            </div>
            
            <div class="timeline-footer">
              <div class="task-count">
                <i class="fas fa-tasks"></i> 2 action items
              </div>
              <div class="timeline-actions">
                <button class="timeline-action view-session" data-id="122" title="View Details">
                  <i class="fas fa-eye"></i>
                </button>
                <button class="timeline-action edit-session" data-id="122" title="Edit">
                  <i class="fas fa-edit"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Cards View -->
      <div id="cardsView" class="cards-grid" style="display: none;">
        <!-- Will be populated dynamically, showing example card -->
        <div class="meeting-card">
          <div class="card-header">
            <div class="card-date">April 3, 2025</div>
            <div class="card-title">KPI Performance Review</div>
            <div class="card-type"><i class="fas fa-chart-line"></i> KPI Review</div>
          </div>
          
          <div class="card-body">
            <div class="card-section">
              <div class="section-title">
                <i class="fas fa-user-tie"></i> Manager
              </div>
              <div class="section-content">
                Sarah Johnson
              </div>
            </div>
            
            <div class="card-section">
              <div class="section-title">
                <i class="fas fa-comment"></i> Meeting Notes
              </div>
              <div class="section-content">
                Discussed team metrics performance from Q1, with focus on improving average talk time which is currently 22 minutes (goal: 15-20 min). Implemented new training to help agents resolve calls more efficiently.
              </div>
            </div>
            
            <div class="card-tasks">
              <div class="section-title">
                <i class="fas fa-tasks"></i> Action Items <span style="margin-left: auto;">(3)</span>
              </div>
              <div class="task-list-preview">
                <div class="task-item-preview">
                  <div class="task-checkbox-preview"></div>
                  <div>Create ACW reduction plan</div>
                </div>
                <div class="task-item-preview">
                  <div class="task-checkbox-preview completed">
                    <i class="fas fa-check" style="font-size: 10px;"></i>
                  </div>
                  <div>Schedule talk time training</div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="card-footer">
            <div class="info-item">
              <i class="fas fa-clock"></i> 45 minutes
            </div>
            <div class="timeline-actions">
              <button class="timeline-action view-session" data-id="123" title="View Details">
                <i class="fas fa-eye"></i>
              </button>
              <button class="timeline-action edit-session" data-id="123" title="Edit">
                <i class="fas fa-edit"></i>
              </button>
            </div>
          </div>
        </div>
        
        <div class="meeting-card">
          <div class="card-header">
            <div class="card-date">March 27, 2025</div>
            <div class="card-title">Weekly One-on-One</div>
            <div class="card-type"><i class="fas fa-calendar-check"></i> Regular Check-in</div>
            <div class="card-draft-badge">Draft</div>
          </div>
          
          <div class="card-body">
            <div class="card-section">
              <div class="section-title">
                <i class="fas fa-user-tie"></i> Manager
              </div>
              <div class="section-content">
                Sarah Johnson
              </div>
            </div>
            
            <div class="card-section">
              <div class="section-title">
                <i class="fas fa-comment"></i> Meeting Notes
              </div>
              <div class="section-content">
                Regular check-in to discuss team updates and individual performance. Discussed resource allocation for upcoming project launch.
              </div>
            </div>
            
            <div class="card-tasks">
              <div class="section-title">
                <i class="fas fa-tasks"></i> Action Items <span style="margin-left: auto;">(2)</span>
              </div>
              <div class="task-list-preview">
                <div class="task-item-preview">
                  <div class="task-checkbox-preview"></div>
                  <div>Follow up on resource request</div>
                </div>
                <div class="task-item-preview">
                  <div class="task-checkbox-preview"></div>
                  <div>Prepare project timeline</div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="card-footer">
            <div class="info-item">
              <i class="fas fa-clock"></i> 30 minutes
            </div>
            <div class="timeline-actions">
              <button class="timeline-action view-session" data-id="122" title="View Details">
                <i class="fas fa-eye"></i>
              </button>
              <button class="timeline-action edit-session" data-id="122" title="Edit">
                <i class="fas fa-edit"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Empty state -->
      <div id="emptyState" class="empty-state" style="display: none;">
        <div class="empty-icon">
          <i class="fas fa-calendar-times"></i>
        </div>
        <h2 class="empty-title">No Manager Sessions Found</h2>
        <p class="empty-description">You haven't recorded any one-on-one sessions with your manager yet. Use these sessions to track important discussions, feedback, and action items.</p>
        <button class="btn btn-primary" id="emptyStateBtn">
          <i class="fas fa-plus"></i> Create Your First Session
        </button>
      </div>
      
      <!-- Pagination -->
      <div class="pagination">
        <div class="pagination-info">
          <span id="paginationInfo">Showing 1-2 of 2 sessions</span>
        </div>
        <div class="pagination-controls">
          <button class="pagination-button" id="firstPageBtn" disabled>
            <i class="fas fa-angle-double-left"></i>
          </button>
          <button class="pagination-button" id="prevPageBtn" disabled>
            <i class="fas fa-angle-left"></i>
          </button>
          <div id="paginationPages" style="display: flex; gap: 8px;">
            <button class="pagination-button active">1</button>
          </div>
          <button class="pagination-button" id="nextPageBtn" disabled>
            <i class="fas fa-angle-right"></i>
          </button>
          <button class="pagination-button" id="lastPageBtn" disabled>
            <i class="fas fa-angle-double-right"></i>
          </button>
        </div>
      </div>
    </main>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <script>
    // Global variables
    let sessions = [];
    let filteredSessions = [];
    let currentPage = 1;
    let sessionsPerPage = 10;
    let currentView = 'timeline';
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
      // Show loading
      showLoading(true);
      
      // Load data
      loadManagerSessions();
      
      // Set up event listeners
      setupEventListeners();
    });
    
    // Load manager sessions data
    function loadManagerSessions() {
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            sessions = result.sessions || [];
            
            // Populate manager filter
            populateManagerFilter(result.managers || []);
            
            // Apply filters and update view
            applyFilters();
          } else {
            console.error('Failed to load manager sessions:', result.message);
            showEmptyState(result.message || 'Failed to load data. Please try again.');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading manager sessions:', error);
          showEmptyState('Error loading data. Please try again.');
        })
        .getManagerOneOnOneSessions();
    }
    
    // Populate manager filter dropdown
    function populateManagerFilter(managers) {
      const managerFilter = document.getElementById('managerFilter');
      
      // Clear existing options except the first one
      while (managerFilter.options.length > 1) {
        managerFilter.remove(1);
      }
      
      // Add each manager to the dropdown
      managers.forEach(manager => {
        const option = document.createElement('option');
        option.value = manager.id || manager.name;
        option.textContent = manager.name;
        managerFilter.appendChild(option);
      });
    }
    
    // Set up event listeners
    function setupEventListeners() {
      // Filters
      document.getElementById('managerFilter').addEventListener('change', applyFilters);
      document.getElementById('typeFilter').addEventListener('change', applyFilters);
      document.getElementById('dateRangeFilter').addEventListener('change', handleDateRangeChange);
      document.getElementById('searchInput').addEventListener('input', debounce(applyFilters, 300));
      
      // View toggle
      document.querySelectorAll('.view-option').forEach(option => {
        option.addEventListener('click', function() {
          switchView(this.getAttribute('data-view'));
        });
      });
      
      // New session button
      document.getElementById('newSessionBtn').addEventListener('click', newManagerSession);
      document.getElementById('emptyStateBtn')?.addEventListener('click', newManagerSession);
      
      // Dashboard button
      document.getElementById('dashboardBtn').addEventListener('click', showDashboard);
      
      // Pagination buttons
      document.getElementById('firstPageBtn').addEventListener('click', () => goToPage(1));
      document.getElementById('prevPageBtn').addEventListener('click', () => goToPage(currentPage - 1));
      document.getElementById('nextPageBtn').addEventListener('click', () => goToPage(currentPage + 1));
      document.getElementById('lastPageBtn').addEventListener('click', () => {
        const totalPages = Math.ceil(filteredSessions.length / sessionsPerPage);
        goToPage(totalPages);
      });
      
      // Set up action buttons for example entries
      setupActionButtons();
    }
    
    // Set up action buttons for session cards/items
    function setupActionButtons() {
      // View session buttons
      document.querySelectorAll('.view-session').forEach(btn => {
        btn.addEventListener('click', function() {
          const sessionId = this.getAttribute('data-id');
          viewManagerSession(sessionId);
        });
      });
      
      // Edit session buttons
      document.querySelectorAll('.edit-session').forEach(btn => {
        btn.addEventListener('click', function() {
          const sessionId = this.getAttribute('data-id');
          editManagerSession(sessionId);
        });
      });
    }
    
    // Apply filters to sessions
    function applyFilters() {
      const managerFilter = document.getElementById('managerFilter').value;
      const typeFilter = document.getElementById('typeFilter').value;
      const dateRangeFilter = document.getElementById('dateRangeFilter');
      const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
      
      // Determine date range
      let startDate = null;
      let endDate = null;
      
      if (dateRangeFilter.value === 'custom') {
        startDate = dateRangeFilter.getAttribute('data-start-date') 
          ? new Date(dateRangeFilter.getAttribute('data-start-date')) 
          : null;
        endDate = dateRangeFilter.getAttribute('data-end-date') 
          ? new Date(dateRangeFilter.getAttribute('data-end-date')) 
          : null;
      } else if (dateRangeFilter.value !== 'all') {
        const days = parseInt(dateRangeFilter.value);
        endDate = new Date();
        startDate = new Date();
        startDate.setDate(startDate.getDate() - days);
      }
      
      // Apply filters
      filteredSessions = sessions.filter(session => {
        // Manager filter
        if (managerFilter !== 'all' && session.managerId !== managerFilter && session.managerName !== managerFilter) {
          return false;
        }
        
        // Type filter
        if (typeFilter !== 'all' && session.meetingType !== typeFilter) {
          return false;
        }
        
        // Date filter
        if (startDate && endDate) {
          const sessionDate = new Date(session.sessionDate);
          if (sessionDate < startDate || sessionDate > endDate) {
            return false;
          }
        }
        
        // Search filter
        if (searchTerm) {
          // Search in different fields
          const searchableFields = [
            session.managerName || '',
            session.meetingType || '',
            session.meetingObjectives || '',
            session.orgUpdates || '',
            session.kpiStrengths || '',
            session.kpiChallenges || '',
            session.kpiActions || '',
            session.highPerformers || '',
            session.improvementNeeded || '',
            session.staffingIssues || '',
            session.discussionHighlights || '',
            session.nextSteps || ''
          ];
          
          // Also search in task descriptions
          if (session.tasks && Array.isArray(session.tasks)) {
            session.tasks.forEach(task => {
              searchableFields.push(task.description || '');
            });
          }
          
          // Check if any field contains the search term
          return searchableFields.some(field => 
            field.toLowerCase().includes(searchTerm)
          );
        }
        
        return true;
      });
      
      // Reset to first page
      currentPage = 1;
      
      // Update the view
      renderView();
    }
    
    // Handle date range filter change
    function handleDateRangeChange() {
      const dateRangeFilter = document.getElementById('dateRangeFilter');
      
      if (dateRangeFilter.value === 'custom') {
        // Show date range picker dialog
        google.script.run
          .withSuccessHandler(function(result) {
            if (result && result.startDate && result.endDate) {
              // Store custom date range
              dateRangeFilter.setAttribute('data-start-date', result.startDate);
              dateRangeFilter.setAttribute('data-end-date', result.endDate);
              applyFilters();
            } else {
              // Reset to previous value if cancelled
              dateRangeFilter.value = dateRangeFilter.getAttribute('data-previous-value') || '30';
            }
          })
          .showDateRangePicker();
        
        // Store previous value
        dateRangeFilter.setAttribute('data-previous-value', dateRangeFilter.value);
      } else {
        applyFilters();
      }
    }
    
    // Switch between timeline and cards view
    function switchView(view) {
      currentView = view;
      
      // Update toggle buttons
      document.querySelectorAll('.view-option').forEach(option => {
        option.classList.toggle('active', option.getAttribute('data-view') === view);
      });
      
      renderView();
    }
    
    // Render the view based on current view type
    function renderView() {
      // Check if we have sessions
      if (filteredSessions.length === 0) {
        showEmptyState();
        return;
      }
      
      // Get sessions for current page
      const startIndex = (currentPage - 1) * sessionsPerPage;
      const endIndex = Math.min(startIndex + sessionsPerPage, filteredSessions.length);
      const currentPageSessions = filteredSessions.slice(startIndex, endIndex);
      
      // Hide empty state
      document.getElementById('emptyState').style.display = 'none';
      
      // Show pagination
      document.querySelector('.pagination').style.display = 'flex';
      
      if (currentView === 'timeline') {
        renderTimelineView(currentPageSessions);
      } else {
        renderCardsView(currentPageSessions);
      }
      
      // Update pagination
      updatePagination();
    }
    
    // Render timeline view
    function renderTimelineView(sessions) {
      const timelineContainer = document.getElementById('timelineView');
      timelineContainer.style.display = 'block';
      
      // Hide cards view
      document.getElementById('cardsView').style.display = 'none';
      
      // Clear current timeline (except the line)
      timelineContainer.innerHTML = '<div class="timeline-line"></div>';
      
      // Add each session to timeline
      sessions.forEach((session, index) => {
        const timelineItem = document.createElement('div');
        timelineItem.className = 'timeline-item';
        timelineItem.style.animationDelay = `${index * 0.1}s`;
        
        // Determine badge class
        let badgeClass = 'badge-primary';
        if (session.isDraft) {
          badgeClass = 'badge-draft';
        }
        
        // Format date
        const formattedDate = formatDate(session.sessionDate);
        
        // Determine title based on meeting type
        let meetingTitle = session.meetingType === 'other' 
          ? (session.customTitle || 'Meeting with Manager') 
          : getMeetingTypeTitle(session.meetingType);
        
        // Generate session tags
        let tagsHtml = '';
        if (session.tags && Array.isArray(session.tags)) {
          tagsHtml = session.tags.map(tag => `<div class="timeline-tag">${tag}</div>`).join('');
        } else {
          // Generate default tags
          tagsHtml = `
            <div class="timeline-tag">${getMeetingTypeText(session.meetingType)}</div>
            ${session.kpiActions ? '<div class="timeline-tag">KPI</div>' : ''}
            ${session.isDraft ? '<div class="timeline-tag">Draft</div>' : ''}
          `;
        }
        
        timelineItem.innerHTML = `
          <div class="timeline-dot"></div>
          <div class="timeline-card">
            <div class="timeline-header">
              <div class="timeline-title-group">
                <div class="timeline-title">
                  ${meetingTitle}
                  <span class="timeline-badge ${badgeClass}">
                    ${session.isDraft ? 'Draft' : getMeetingTypeText(session.meetingType)}
                  </span>
                </div>
              </div>
              <div class="timeline-date">
                <i class="far fa-calendar-alt"></i> ${formattedDate}
              </div>
            </div>
            
            <div class="timeline-body">
              <div class="timeline-info">
                <div class="info-item">
                  <i class="fas fa-user-tie"></i> ${session.managerName || 'Manager'}
                </div>
                <div class="info-item">
                  <i class="fas fa-clock"></i> ${session.sessionDuration || '30'} minutes
                </div>
              </div>
              
              <div class="content-preview">
                ${getSessionPreviewText(session)}
              </div>
              
              <div class="timeline-tags">
                ${tagsHtml}
              </div>
            </div>
            
            <div class="timeline-footer">
              <div class="task-count">
                <i class="fas fa-tasks"></i> ${getTaskCount(session)} action items
              </div>
              <div class="timeline-actions">
                <button class="timeline-action view-session" data-id="${session.id}" title="View Details">
                  <i class="fas fa-eye"></i>
                </button>
                <button class="timeline-action edit-session" data-id="${session.id}" title="Edit">
                  <i class="fas fa-edit"></i>
                </button>
              </div>
            </div>
          </div>
        `;
        
        timelineContainer.appendChild(timelineItem);
      });
      
      // Reattach event handlers for action buttons
      setupActionButtons();
    }
    
    // Render cards view
    function renderCardsView(sessions) {
      const cardsContainer = document.getElementById('cardsView');
      cardsContainer.style.display = 'grid';
      
      // Hide timeline view
      document.getElementById('timelineView').style.display = 'none';
      
      // Clear current cards
      cardsContainer.innerHTML = '';
      
      // Add each session as a card
      sessions.forEach((session, index) => {
        const card = document.createElement('div');
        card.className = 'meeting-card';
        card.style.animationDelay = `${index * 0.1}s`;
        
        // Format date
        const formattedDate = formatDate(session.sessionDate);
        
        // Determine title based on meeting type
        let meetingTitle = session.meetingType === 'other' 
          ? (session.customTitle || 'Meeting with Manager') 
          : getMeetingTypeTitle(session.meetingType);
        
        // Get meeting type icon
        const typeIcon = getMeetingTypeIcon(session.meetingType);
        
        // Prepare task preview HTML
        let tasksHtml = '<div class="task-list-preview">';
        if (session.tasks && Array.isArray(session.tasks) && session.tasks.length > 0) {
          // Display up to 2 tasks
          const displayTasks = session.tasks.slice(0, 2);
          tasksHtml += displayTasks.map(task => `
            <div class="task-item-preview">
              <div class="task-checkbox-preview${task.completed ? ' completed' : ''}">
                ${task.completed ? '<i class="fas fa-check" style="font-size: 10px;"></i>' : ''}
              </div>
              <div>${task.description || ''}</div>
            </div>
          `).join('');
          
          // If there are more tasks, show a message
          if (session.tasks.length > 2) {
            tasksHtml += `
              <div class="task-item-preview" style="color: var(--text-tertiary);">
                <div style="margin-left: 24px;">+ ${session.tasks.length - 2} more items</div>
              </div>
            `;
          }
        } else {
          tasksHtml += `
            <div class="task-item-preview" style="color: var(--text-tertiary);">
              <div>No action items recorded</div>
            </div>
          `;
        }
        tasksHtml += '</div>';
        
        card.innerHTML = `
          <div class="card-header">
            <div class="card-date">${formattedDate}</div>
            <div class="card-title">${meetingTitle}</div>
            <div class="card-type"><i class="${typeIcon}"></i> ${getMeetingTypeText(session.meetingType)}</div>
            ${session.isDraft ? '<div class="card-draft-badge">Draft</div>' : ''}
          </div>
          
          <div class="card-body">
            <div class="card-section">
              <div class="section-title">
                <i class="fas fa-user-tie"></i> Manager
              </div>
              <div class="section-content">
                ${session.managerName || 'Not specified'}
              </div>
            </div>
            
            <div class="card-section">
              <div class="section-title">
                <i class="fas fa-comment"></i> Meeting Notes
              </div>
              <div class="section-content">
                ${getSessionPreviewText(session)}
              </div>
            </div>
            
            <div class="card-tasks">
              <div class="section-title">
                <i class="fas fa-tasks"></i> Action Items <span style="margin-left: auto;">(${getTaskCount(session)})</span>
              </div>
              ${tasksHtml}
            </div>
          </div>
          
          <div class="card-footer">
            <div class="info-item">
              <i class="fas fa-clock"></i> ${session.sessionDuration || '30'} minutes
            </div>
            <div class="timeline-actions">
              <button class="timeline-action view-session" data-id="${session.id}" title="View Details">
                <i class="fas fa-eye"></i>
              </button>
              <button class="timeline-action edit-session" data-id="${session.id}" title="Edit">
                <i class="fas fa-edit"></i>
              </button>
            </div>
          </div>
        `;
        
        cardsContainer.appendChild(card);
      });
      
      // Reattach event handlers for action buttons
      setupActionButtons();
    }
    
    // Show empty state
    function showEmptyState(message = null) {
      const emptyState = document.getElementById('emptyState');
      const description = emptyState.querySelector('.empty-description');
      
      if (message) {
        description.textContent = message;
      } else {
        description.textContent = 'You haven\'t recorded any one-on-one sessions with your manager yet. Use these sessions to track important discussions, feedback, and action items.';
      }
      
      // Hide the views
      document.getElementById('timelineView').style.display = 'none';
      document.getElementById('cardsView').style.display = 'none';
      
      // Hide pagination
      document.querySelector('.pagination').style.display = 'none';
      
      // Show empty state
      emptyState.style.display = 'block';
    }
    
    // Update pagination controls
    function updatePagination() {
      const totalSessions = filteredSessions.length;
      const totalPages = Math.ceil(totalSessions / sessionsPerPage);
      
      // Update info text
      const startIndex = (currentPage - 1) * sessionsPerPage + 1;
      const endIndex = Math.min(startIndex + sessionsPerPage - 1, totalSessions);
      document.getElementById('paginationInfo').textContent = `Showing ${startIndex}-${endIndex} of ${totalSessions} sessions`;
      
      // Enable/disable buttons
      document.getElementById('firstPageBtn').disabled = currentPage === 1;
      document.getElementById('prevPageBtn').disabled = currentPage === 1;
      document.getElementById('nextPageBtn').disabled = currentPage === totalPages;
      document.getElementById('lastPageBtn').disabled = currentPage === totalPages;
      
      // Update page numbers
      const pagesContainer = document.getElementById('paginationPages');
      pagesContainer.innerHTML = '';
      
      // Determine which page numbers to show
      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(totalPages, startPage + 4);
      
      // Adjust if we're near the end
      if (endPage - startPage < 4) {
        startPage = Math.max(1, endPage - 4);
      }
      
      for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.className = 'pagination-button' + (i === currentPage ? ' active' : '');
        pageButton.textContent = i;
        pageButton.addEventListener('click', () => goToPage(i));
        pagesContainer.appendChild(pageButton);
      }
    }
    
    // Go to specified page
    function goToPage(page) {
      currentPage = page;
      renderView();
    }
    
    // Get session preview text
    function getSessionPreviewText(session) {
      // Check for most relevant notes fields in order of importance
      const notesSources = [
        session.discussionHighlights,
        session.meetingObjectives,
        session.kpiChallenges,
        session.kpiStrengths,
        session.kpiActions,
        session.orgUpdates,
        session.highPerformers,
        session.improvementNeeded,
        session.staffingIssues
      ];
      
      for (const source of notesSources) {
        if (source && source.trim()) {
          return truncateText(source, 200);
        }
      }
      
      return 'No detailed notes recorded for this session.';
    }
    
    // Get task count
    function getTaskCount(session) {
      return session.tasks && Array.isArray(session.tasks) ? session.tasks.length : 0;
    }
    
    // Get meeting type text
    function getMeetingTypeText(type) {
      switch (type) {
        case 'regular': return 'Regular Check-in';
        case 'kpi': return 'KPI Review';
        case 'performance': return 'Performance Discussion';
        case 'project': return 'Project Update';
        case 'coaching': return 'Coaching Session';
        case 'other': return 'Other';
        default: return type || 'Meeting';
      }
    }
    
    // Get meeting type icon
    function getMeetingTypeIcon(type) {
      switch (type) {
        case 'regular': return 'fas fa-calendar-check';
        case 'kpi': return 'fas fa-chart-line';
        case 'performance': return 'fas fa-user-chart';
        case 'project': return 'fas fa-project-diagram';
        case 'coaching': return 'fas fa-chalkboard-teacher';
        case 'other': return 'fas fa-calendar';
        default: return 'fas fa-calendar';
      }
    }
    
    // Get meeting title based on type
    function getMeetingTypeTitle(type) {
      switch (type) {
        case 'regular': return 'Regular Check-in with Manager';
        case 'kpi': return 'KPI Performance Review';
        case 'performance': return 'Performance Discussion';
        case 'project': return 'Project Update Meeting';
        case 'coaching': return 'Coaching Session';
        case 'other': return 'Meeting with Manager';
        default: return 'Meeting with Manager';
      }
    }
    
    // Create new manager session
    function newManagerSession() {
      google.script.run.showManagerOneOnOneForm();
    }
    
    // View manager session
    function viewManagerSession(sessionId) {
      google.script.run.showManagerOneOnOneDetails(sessionId);
    }
    
    // Edit manager session
    function editManagerSession(sessionId) {
      google.script.run.editManagerOneOnOneSession(sessionId);
    }
    
    // Show dashboard
    function showDashboard() {
      google.script.run.showManagerOneOnOneDashboard();
    }
    
    // Show loading overlay
    function showLoading(show) {
      document.getElementById('loadingOverlay').classList.toggle('show', show);
    }
    
    // Hide loading overlay
    function hideLoading() {
      showLoading(false);
    }
    
    // Truncate text to specified length
    function truncateText(text, maxLength) {
      if (!text) return '';
      if (text.length <= maxLength) return text;
      return text.substring(0, maxLength) + '...';
    }
    
    // Format date
    function formatDate(dateStr) {
      if (!dateStr) return 'No date';
      
      try {
        const date = new Date(dateStr);
        return date.toLocaleDateString('en-US', {
          month: 'long',
          day: 'numeric',
          year: 'numeric'
        });
      } catch (e) {
        return dateStr;
      }
    }
    
    // Debounce function for search input
    function debounce(func, delay) {
      let timeout;
      return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), delay);
      };
    }
  </script>
</body>
</html>









<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manager One-on-One Dashboard</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }
    
    .date-filter {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 20px 24px;
      margin-bottom: 24px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .date-range-label {
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .date-filter-controls {
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .date-select {
      padding: 8px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      background-color: white;
      color: var(--text-primary);
      font-size: 14px;
      min-width: 200px;
    }
    
    .date-select:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
      text-decoration: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .metric-cards {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 24px;
      margin-bottom: 32px;
    }
    
    .metric-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      display: flex;
      flex-direction: column;
    }
    
    .metric-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 20px;
    }
    
    .metric-title {
      font-family: 'Manrope', sans-serif;
      font-size: 16px;
      font-weight: 600;
      color: var(--text-secondary);
    }
    
    .metric-icon {
      width: 40px;
      height: 40px;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 18px;
    }
    
    .metric-icon.purple {
      background-color: var(--primary-light);
      color: white;
    }
    
    .metric-icon.blue {
      background-color: var(--info-color);
      color: white;
    }
    
    .metric-icon.green {
      background-color: var(--success-color);
      color: white;
    }
    
    .metric-icon.orange {
      background-color: var(--warning-color);
      color: white;
    }
    
    .metric-value {
      font-family: 'Manrope', sans-serif;
      font-size: 32px;
      font-weight: 700;
      margin-bottom: 8px;
    }
    
    .metric-trend {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 13px;
    }
    
    .trend-up {
      color: var(--success-color);
    }
    
    .trend-down {
      color: var(--danger-color);
    }
    
    .trend-neutral {
      color: var(--text-tertiary);
    }
    
    .chart-row {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 24px;
      margin-bottom: 32px;
    }
    
    .chart-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
    }
    
    .chart-card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .chart-card-title {
      font-family: 'Manrope', sans-serif;
      font-size: 18px;
      font-weight: 600;
    }
    
    .chart-container {
      position: relative;
      height: 300px;
      width: 100%;
    }
    
    .list-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 0;
      margin-bottom: 32px;
    }
    
    .list-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .list-title {
      font-family: 'Manrope', sans-serif;
      font-size: 18px;
      font-weight: 600;
    }
    
    .list-filter {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .list-table {
      width: 100%;
      border-collapse: collapse;
    }
    
    .list-table th {
      text-align: left;
      padding: 16px 24px;
      font-weight: 600;
      color: var(--text-secondary);
      background-color: var(--bg-secondary);
      border-bottom: 1px solid var(--border-light);
    }
    
    .list-table td {
      padding: 16px 24px;
      border-bottom: 1px solid var(--border-light);
      color: var(--text-primary);
    }
    
    .list-table tr:last-child td {
      border-bottom: none;
    }
    
    .list-table tr:hover td {
      background-color: var(--bg-secondary);
    }
    
    .view-all {
      font-weight: 500;
      color: var(--primary-color);
      display: flex;
      align-items: center;
      gap: 6px;
      cursor: pointer;
      transition: color var(--transition-fast);
    }
    
    .view-all:hover {
      color: var(--primary-light);
    }
    
    .status-badge {
      display: inline-flex;
      align-items: center;
      padding: 4px 10px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 500;
    }
    
    .status-badge.completed {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .status-badge.pending {
      background-color: var(--warning-light);
      color: var(--warning-color);
    }
    
    .status-badge.missed {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .priority-badges {
      display: flex;
      gap: 12px;
      margin-top: 16px;
      flex-wrap: wrap;
    }
    
    .priority-badge {
      padding: 8px 16px;
      border-radius: var(--radius-md);
      background-color: var(--bg-secondary);
      color: var(--text-secondary);
      font-weight: 500;
      font-size: 13px;
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .priority-badge .count {
      background-color: white;
      color: var(--text-primary);
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 11px;
      font-weight: 600;
    }
    
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 48px;
      text-align: center;
    }
    
    .empty-state-icon {
      font-size: 48px;
      color: var(--text-tertiary);
      margin-bottom: 16px;
      opacity: 0.6;
    }
    
    .empty-state-title {
      font-weight: 600;
      font-size: 18px;
      margin-bottom: 8px;
    }
    
    .empty-state-message {
      color: var(--text-secondary);
      margin-bottom: 24px;
      max-width: 400px;
    }
    
    /* Loading indicator */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      position: relative;
      animation: rotate 1s linear infinite;
    }
    
    .loading-spinner::before, .loading-spinner::after {
      content: "";
      position: absolute;
      border-radius: 50%;
    }
    
    .loading-spinner::before {
      width: 48px;
      height: 48px;
      border: 5px solid rgba(85, 64, 175, 0.2);
    }
    
    .loading-spinner::after {
      width: 48px;
      height: 48px;
      border: 5px solid transparent;
      border-top-color: var(--primary-color);
      animation: rotate 0.5s linear infinite;
    }
    
    @keyframes rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Toast notifications */
    .toast-container {
      position: fixed;
      bottom: 24px;
      right: 24px;
      z-index: 1000;
    }
    
    .toast {
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      padding: 16px;
      margin-top: 12px;
      display: flex;
      align-items: center;
      gap: 12px;
      min-width: 300px;
      transform: translateX(120%);
      transition: transform 0.3s ease;
    }
    
    .toast.show {
      transform: translateX(0);
    }
    
    .toast-icon {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background-color: var(--success-color);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }
    
    .toast-icon.error {
      background-color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 2px;
    }
    
    .toast-message {
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    .toast-close {
      background: none;
      border: none;
      color: var(--text-tertiary);
      cursor: pointer;
      padding: 4px;
    }
    
    @media (max-width: 1024px) {
      .chart-row {
        grid-template-columns: 1fr;
      }
    }
    
    @media (max-width: 768px) {
      .content {
        padding: 16px;
      }
      
      .metric-cards {
        grid-template-columns: 1fr;
      }
      
      .date-filter {
        flex-direction: column;
        align-items: stretch;
        gap: 16px;
      }
      
      .date-filter-controls {
        flex-direction: column;
        align-items: stretch;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-handshake"></i> Manager One-on-One Dashboard
          </h1>
          <div class="header-subtitle">
            Track and analyze your one-on-one sessions with your manager
          </div>
        </div>
        
        <div class="header-actions">
          <button class="btn btn-primary" id="newSessionBtn">
            <i class="fas fa-plus"></i> New Session
          </button>
        </div>
      </div>
    </div>
    
    <div class="content">
      <!-- Date filter -->
      <div class="date-filter">
        <div class="date-range-label">Viewing data for:</div>
        <div class="date-filter-controls">
          <select class="date-select" id="dateRangeSelect">
            <option value="last3months">Last 3 Months</option>
            <option value="last6months" selected>Last 6 Months</option>
            <option value="last12months">Last 12 Months</option>
            <option value="custom">Custom Range</option>
          </select>
          <div id="customDateControls" style="display: none; flex-direction: row; gap: 8px; align-items: center;">
            <input type="date" class="date-select" id="startDate">
            <span>to</span>
            <input type="date" class="date-select" id="endDate">
          </div>
          <button class="btn btn-secondary" id="applyFiltersBtn">
            <i class="fas fa-filter"></i> Apply
          </button>
        </div>
      </div>
      
      <!-- Metrics overview -->
      <div class="metric-cards">
        <div class="metric-card">
          <div class="metric-header">
            <div class="metric-title">Total Sessions</div>
            <div class="metric-icon purple">
              <i class="fas fa-handshake"></i>
            </div>
          </div>
          <div class="metric-value" id="totalSessionsValue">--</div>
          <div class="metric-trend">
            <i class="fas fa-arrow-up trend-up"></i>
            <span>12% from previous period</span>
          </div>
        </div>
        
        <div class="metric-card">
          <div class="metric-header">
            <div class="metric-title">Avg. Days Between Sessions</div>
            <div class="metric-icon blue">
              <i class="fas fa-calendar-alt"></i>
            </div>
          </div>
          <div class="metric-value" id="avgDaysBetweenValue">--</div>
          <div class="metric-trend">
            <i class="fas fa-arrow-down trend-down"></i>
            <span>8% from previous period</span>
          </div>
        </div>
        
        <div class="metric-card">
          <div class="metric-header">
            <div class="metric-title">Commitment Completion</div>
            <div class="metric-icon green">
              <i class="fas fa-check"></i>
            </div>
          </div>
          <div class="metric-value" id="commitmentRateValue">--</div>
          <div class="metric-trend">
            <i class="fas fa-minus trend-neutral"></i>
            <span>No change from previous</span>
          </div>
        </div>
        
        <div class="metric-card">
          <div class="metric-header">
            <div class="metric-title">Next Session</div>
            <div class="metric-icon orange">
              <i class="fas fa-hourglass-half"></i>
            </div>
          </div>
          <div class="metric-value" id="nextSessionValue">--</div>
          <div class="metric-trend">
            <i class="fas fa-calendar"></i>
            <span id="daysToNextSession">Not scheduled</span>
          </div>
        </div>
      </div>
      
      <!-- Charts -->
      <div class="chart-row">
        <div class="chart-card">
          <div class="chart-card-header">
            <div class="chart-card-title">Sessions Over Time</div>
          </div>
          <div class="chart-container">
            <canvas id="sessionsChart"></canvas>
          </div>
        </div>
        
        <div class="chart-card">
          <div class="chart-card-header">
            <div class="chart-card-title">Commitment Status</div>
          </div>
          <div class="chart-container">
            <canvas id="commitmentsChart"></canvas>
          </div>
        </div>
      </div>
      
      <!-- Top priorities -->
      <div class="chart-card" style="margin-bottom: 32px;">
        <div class="chart-card-header">
          <div class="chart-card-title">Top Leadership Priorities</div>
        </div>
        <div id="prioritiesList">
          <div class="priority-badges" id="priorityBadgesContainer">
            <!-- Will be populated dynamically -->
            <div class="priority-badge">
              Team Growth <span class="count">8</span>
            </div>
            <div class="priority-badge">
              Quality Improvement <span class="count">6</span>
            </div>
            <div class="priority-badge">
              Metrics Targets <span class="count">5</span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Recent sessions -->
      <div class="list-card">
        <div class="list-header">
          <div class="list-title">Recent One-on-One Sessions</div>
          <div class="view-all" id="viewAllSessionsBtn">
            View All <i class="fas fa-chevron-right"></i>
          </div>
        </div>
        
        <table class="list-table" id="sessionsTable">
          <thead>
            <tr>
              <th>Date</th>
              <th>Manager</th>
              <th>Key Topics</th>
              <th>Follow-up</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="sessionsTableBody">
            <!-- Will be populated dynamically -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container" id="toastContainer"></div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <script>
    // Global variables
    let dashboardMetrics = {};
    let recentSessions = [];
    let currentDateRange = 'last6months';
    let customStartDate = '';
    let customEndDate = '';
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set up event handlers
      setupEventHandlers();
      
      // Set default date range
      setDefaultDateRange();
      
      // Load dashboard data
      loadDashboardData();
    });
    
    // Set up event handlers
    function setupEventHandlers() {
      // Date range select
      document.getElementById('dateRangeSelect').addEventListener('change', function() {
        const customControls = document.getElementById('customDateControls');
        if (this.value === 'custom') {
          customControls.style.display = 'flex';
        } else {
          customControls.style.display = 'none';
          currentDateRange = this.value;
        }
      });
      
      // Apply filters button
      document.getElementById('applyFiltersBtn').addEventListener('click', applyFilters);
      
      // New session button
      document.getElementById('newSessionBtn').addEventListener('click', createNewSession);
      
      // View all sessions button
      document.getElementById('viewAllSessionsBtn').addEventListener('click', viewAllSessions);
    }
    
    // Set default date range
    function setDefaultDateRange() {
      const today = new Date();
      
      // Default to last 6 months
      const sixMonthsAgo = new Date(today);
      sixMonthsAgo.setMonth(today.getMonth() - 6);
      
      customStartDate = formatDate(sixMonthsAgo);
      customEndDate = formatDate(today);
      
      document.getElementById('startDate').value = customStartDate;
      document.getElementById('endDate').value = customEndDate;
    }
    
    // Format date as YYYY-MM-DD
    function formatDate(date) {
      return date.toISOString().split('T')[0];
    }
    
    // Apply filters
    function applyFilters() {
      const dateRange = document.getElementById('dateRangeSelect').value;
      
      if (dateRange === 'custom') {
        customStartDate = document.getElementById('startDate').value;
        customEndDate = document.getElementById('endDate').value;
        
        if (!customStartDate || !customEndDate) {
          showToast('Error', 'Please select both start and end dates', 'error');
          return;
        }
        
        currentDateRange = 'custom';
      } else {
        currentDateRange = dateRange;
      }
      
      // Reload dashboard data with new filters
      loadDashboardData();
    }
    
    // Load dashboard data
    function loadDashboardData() {
      showLoading();
      
      // Prepare filters based on selected date range
      const filters = getDateFilters();
      
      // Load metrics data
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            dashboardMetrics = result.data;
            renderDashboardMetrics();
          } else {
            hideLoading();
            showToast('Error', result.message, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error', 'Failed to load dashboard metrics: ' + error, 'error');
        })
        .getManagerOneOnOneMetrics(filters);
      
      // Load recent sessions
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            recentSessions = result.data;
            renderRecentSessions();
          } else {
            showToast('Error', result.message, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error', 'Failed to load recent sessions: ' + error, 'error');
        })
        .getAllManagerOneOnOneNotes({ ...filters, limit: 5 });
    }
    
    // Get date filters based on selected range
    function getDateFilters() {
      const today = new Date();
      let startDate;
      
      switch (currentDateRange) {
        case 'last3months':
          startDate = new Date(today);
          startDate.setMonth(today.getMonth() - 3);
          return { 
            startDate: formatDate(startDate),
            endDate: formatDate(today)
          };
          
        case 'last6months':
          startDate = new Date(today);
          startDate.setMonth(today.getMonth() - 6);
          return {
            startDate: formatDate(startDate),
            endDate: formatDate(today)
          };
          
        case 'last12months':
          startDate = new Date(today);
          startDate.setMonth(today.getMonth() - 12);
          return {
            startDate: formatDate(startDate),
            endDate: formatDate(today)
          };
          
        case 'custom':
          return {
            startDate: customStartDate,
            endDate: customEndDate
          };
          
        default:
          startDate = new Date(today);
          startDate.setMonth(today.getMonth() - 6);
          return {
            startDate: formatDate(startDate),
            endDate: formatDate(today)
          };
      }
    }
    
    // Render dashboard metrics
    function renderDashboardMetrics() {
      if (!dashboardMetrics) return;
      
      // Update metric cards
      document.getElementById('totalSessionsValue').textContent = dashboardMetrics.totalSessions || 0;
      document.getElementById('avgDaysBetweenValue').textContent = 
        dashboardMetrics.averageTimeBetweenSessions ? Math.round(dashboardMetrics.averageTimeBetweenSessions) : 0;
      
      const commitmentRate = dashboardMetrics.commitmentCompletion 
        ? Math.round(dashboardMetrics.commitmentCompletion.completion_rate * 100)
        : 0;
      document.getElementById('commitmentRateValue').textContent = commitmentRate + '%';
      
      // Find the next scheduled session
      const nextSession = findNextScheduledSession();
      const nextSessionElement = document.getElementById('nextSessionValue');
      const daysToNextElement = document.getElementById('daysToNextSession');
      
      if (nextSession) {
        const sessionDate = new Date(nextSession['Session Date']);
        nextSessionElement.textContent = sessionDate.toLocaleDateString();
        
        const today = new Date();
        const daysDiff = Math.round((sessionDate - today) / (1000 * 60 * 60 * 24));
        daysToNextElement.textContent = daysDiff > 0 
          ? `In ${daysDiff} day${daysDiff !== 1 ? 's' : ''}` 
          : daysDiff === 0 ? 'Today' : 'Overdue';
      } else {
        nextSessionElement.textContent = 'Not Scheduled';
        daysToNextElement.textContent = 'No upcoming sessions';
      }
      
      // Render priority badges
      renderPriorityBadges();
      
      // Render charts
      renderSessionsChart();
      renderCommitmentsChart();
    }
    
    // Find the next scheduled session
    function findNextScheduledSession() {
      if (!recentSessions || recentSessions.length === 0) return null;
      
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      let nextSession = null;
      let closestDiff = Infinity;
      
      recentSessions.forEach(session => {
        if (session['Next Session Date']) {
          const sessionDate = new Date(session['Next Session Date']);
          sessionDate.setHours(0, 0, 0, 0);
          
          if (sessionDate >= today) {
            const diff = sessionDate - today;
            if (diff < closestDiff) {
              closestDiff = diff;
              nextSession = session;
            }
          }
        }
      });
      
      return nextSession;
    }
    
    // Render priority badges
    function renderPriorityBadges() {
      const container = document.getElementById('priorityBadgesContainer');
      container.innerHTML = '';
      
      if (dashboardMetrics.topPriorities && Object.keys(dashboardMetrics.topPriorities).length > 0) {
        // Sort priorities by count (descending)
        const sortedPriorities = Object.entries(dashboardMetrics.topPriorities)
          .sort((a, b) => b[1] - a[1])
          .slice(0, 8); // Limit to top 8
        
        sortedPriorities.forEach(([priority, count]) => {
          const badge = document.createElement('div');
          badge.className = 'priority-badge';
          badge.innerHTML = `${priority} <span class="count">${count}</span>`;
          container.appendChild(badge);
        });
      } else {
        container.innerHTML = '<p>No priority data available</p>';
      }
    }
    
    // Render sessions chart
    function renderSessionsChart() {
      const ctx = document.getElementById('sessionsChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (window.sessionsChart) {
        window.sessionsChart.destroy();
      }
      
      // Prepare data
      const labels = [];
      const data = [];
      
      if (dashboardMetrics.sessionsByMonth) {
        // Sort months chronologically
        const sortedMonths = Object.keys(dashboardMetrics.sessionsByMonth).sort();
        
        sortedMonths.forEach(month => {
          // Format month for display (YYYY-MM to MMM YYYY)
          const [year, monthNum] = month.split('-');
          const date = new Date(year, parseInt(monthNum) - 1, 1);
          const formattedMonth = date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
          
          labels.push(formattedMonth);
          data.push(dashboardMetrics.sessionsByMonth[month]);
        });
      }
      
      // Create chart
      window.sessionsChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Sessions',
            data: data,
            backgroundColor: 'rgba(85, 64, 175, 0.7)',
            borderColor: 'rgba(85, 64, 175, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                precision: 0
              }
            }
          }
        }
      });
    }
    
    // Render commitments chart
    function renderCommitmentsChart() {
      const ctx = document.getElementById('commitmentsChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (window.commitmentsChart) {
        window.commitmentsChart.destroy();
      }
      
      // Prepare data
      const completed = dashboardMetrics.commitmentCompletion ? dashboardMetrics.commitmentCompletion.completed : 0;
      const pending = dashboardMetrics.commitmentCompletion ? dashboardMetrics.commitmentCompletion.pending : 0;
      
      // Create chart
      window.commitmentsChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: ['Completed', 'Pending/Missed'],
          datasets: [{
            data: [completed, pending],
            backgroundColor: [
              'rgba(16, 185, 129, 0.7)', // Green
              'rgba(239, 68, 68, 0.7)'   // Red
            ],
            borderColor: [
              'rgba(16, 185, 129, 1)',
              'rgba(239, 68, 68, 1)'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom'
            }
          },
          cutout: '70%'
        }
      });
    }
    
    // Render recent sessions
    function renderRecentSessions() {
      const tableBody = document.getElementById('sessionsTableBody');
      tableBody.innerHTML = '';
      
      if (recentSessions && recentSessions.length > 0) {
        recentSessions.forEach(session => {
          const row = document.createElement('tr');
          
          // Format session date
          const sessionDate = new Date(session['Session Date']).toLocaleDateString();
          
          // Get follow-up date if available
          let followUpDate = session['Next Session Date'] 
            ? new Date(session['Next Session Date']).toLocaleDateString()
            : 'Not scheduled';
          
          // Check if follow-up is overdue
          let followUpStatus = 'pending';
          if (session['Next Session Date']) {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const nextDate = new Date(session['Next Session Date']);
            nextDate.setHours(0, 0, 0, 0);
            
            if (nextDate < today) {
              followUpStatus = 'missed';
            }
          }
          
          // Extract key topics from Leadership Priorities
          const keyTopics = session['Leadership Priorities'] 
            ? session['Leadership Priorities'].split(/[,;]/).map(t => t.trim()).slice(0, 2).join(', ')
            : 'None recorded';
          
          // Build row content
          row.innerHTML = `
            <td>${sessionDate}</td>
            <td>${session['Manager Name'] || 'Unknown'}</td>
            <td>${keyTopics}</td>
            <td>
              <span class="status-badge ${followUpStatus}">
                ${followUpDate}
              </span>
            </td>
            <td>
              <button class="btn btn-secondary" onclick="viewSessionDetails('${session['Session ID']}')">
                <i class="fas fa-eye"></i> View
              </button>
            </td>
          `;
          
          tableBody.appendChild(row);
        });
      } else {
        // No sessions found
        const row = document.createElement('tr');
        row.innerHTML = `
          <td colspan="5">
            <div class="empty-state">
              <div class="empty-state-icon"><i class="fas fa-calendar-times"></i></div>
              <div class="empty-state-title">No sessions found</div>
              <div class="empty-state-message">There are no manager one-on-one sessions recorded in the selected time period.</div>
              <button class="btn btn-primary" onclick="createNewSession()">
                <i class="fas fa-plus"></i> Create First Session
              </button>
            </div>
          </td>
        `;
        tableBody.appendChild(row);
      }
    }
    
    // View all sessions
    function viewAllSessions() {
      // This would typically navigate to a full list view
      // For now, we'll just show a message
      showToast('Info', 'Navigate to full sessions list (to be implemented)', 'info');
    }
    
    // Create new session - redirect to the form
    function createNewSession() {
      google.script.run.showManagerOneOnOneForm();
    }
    
    // View session details
    function viewSessionDetails(sessionId) {
      if (!sessionId) return;
      
      // Show loading
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            // This would typically open a detailed view of the session
            // For now, we'll just redirect to the form with the session ID
            google.script.run.showManagerOneOnOneForm(sessionId);
          } else {
            showToast('Error', result.message, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error', 'Failed to retrieve session details: ' + error, 'error');
        })
        .getManagerOneOnOneNoteById(sessionId);
    }
    
    // Show loading indicator
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading indicator
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toastContainer = document.getElementById('toastContainer');
      
      const toast = document.createElement('div');
      toast.className = 'toast';
      
      toast.innerHTML = `
        <div class="toast-icon ${type === 'error' ? 'error' : ''}">
          <i class="fas ${type === 'error' ? 'fa-times' : type === 'info' ? 'fa-info' : 'fa-check'}"></i>
        </div>
        <div class="toast-content">
          <div class="toast-title">${title}</div>
          <div class="toast-message">${message}</div>
        </div>
        <button class="toast-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      toastContainer.appendChild(toast);
      
      // Show toast with animation
      setTimeout(() => {
        toast.classList.add('show');
      }, 10);
      
      // Add close button event
      toast.querySelector('.toast-close').addEventListener('click', () => {
        toast.classList.remove('show');
        setTimeout(() => {
          toastContainer.removeChild(toast);
        }, 300);
      });
      
      // Auto close after 5 seconds
      setTimeout(() => {
        if (toast.parentNode === toastContainer) {
          toast.classList.remove('show');
          setTimeout(() => {
            if (toast.parentNode === toastContainer) {
              toastContainer.removeChild(toast);
            }
          }, 300);
        }
      }, 5000);
    }
  </script>
</body>
</html>










/**
 * ManagerOneOnOneService.gs - Handles all manager one-on-one sessions functionality
 * 
 * 🌟 Provides functions for:
 * - Manager one-on-one session CRUD operations
 * - KPI tracking and reporting
 * - Task management with Asana integration
 * - Dashboard analytics 
 * - Metrics visualization
 */

/**
 * 📝 Initialize the Manager One-on-One sheet with required headers
 */
function initializeManagerOneOnOneSheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
    
    // Create sheet if it doesn't exist
    if (!sheet) {
      sheet = ss.insertSheet(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
    }
    
    // Set up headers
    const headers = [
      'Session ID',
      'Manager Name',
      'Manager ID',
      'Session Date',
      'Session Time',
      'Session Duration',
      'Meeting Type',
      'Meeting Objectives',
      'Org Updates',
      // KPI Metrics
      'Calls Offered',
      'Calls Accepted',
      'Answer Rate',
      'Average Talk Time',
      'ACW Percentage',
      'On Queue Percentage',
      'Off Queue Percentage',
      'Interacting Time',
      // KPI Analysis
      'KPI Strengths',
      'KPI Challenges',
      'KPI Actions',
      // Counselor Updates
      'High Performers',
      'Improvement Needed',
      'Staffing Issues',
      'Training Needs',
      'Development Plans',
      'Critical Issues',
      // Tasks and action items
      'Tasks',
      'Asana Tasks',
      // Feedback and Notes
      'Strength Feedback',
      'Improvement Feedback',
      'Discussion Highlights',
      'Personal Notes',
      'Next Steps',
      // Follow-up
      'Next Meeting Date',
      'Next Meeting Time',
      // Meta data
      'Is Draft',
      'Created By',
      'Created Date',
      'Last Modified'
    ];
    
    // Check if headers already exist
    const existingHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Only set headers if they don't match
    if (existingHeaders.length !== headers.length || !headers.every((header, i) => header === existingHeaders[i])) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
      
      // Format the sheet
      sheet.autoResizeColumns(1, headers.length);
    }
    
    return true;
  } catch (error) {
    logError('initializeManagerOneOnOneSheet', error);
    return false;
  }
}

/**
 * 📝 Initialize the Manager Tasks sheet with required headers
 */
function initializeManagerTasksSheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_TASKS);
    
    // Create sheet if it doesn't exist
    if (!sheet) {
      sheet = ss.insertSheet(CONFIG.SHEETS.MANAGER_TASKS);
    }
    
    // Set up headers
    const headers = [
      'Task ID',
      'Session ID',
      'Manager ID',
      'Manager Name',
      'Description',
      'Due Date',
      'Assignee',
      'Completed',
      'Completion Date',
      'Is Asana Task',
      'Asana Task ID',
      'Asana Project',
      'Notes',
      'Created Date',
      'Last Modified'
    ];
    
    // Check if headers already exist
    const existingHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Only set headers if they don't match
    if (existingHeaders.length !== headers.length || !headers.every((header, i) => header === existingHeaders[i])) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
      
      // Format the sheet
      sheet.autoResizeColumns(1, headers.length);
    }
    
    return true;
  } catch (error) {
    logError('initializeManagerTasksSheet', error);
    return false;
  }
}

/**
 * 📝 Initialize the KPI Tracking sheet with required headers
 */
function initializeKPITrackingSheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(CONFIG.SHEETS.KPI_TRACKING);
    
    // Create sheet if it doesn't exist
    if (!sheet) {
      sheet = ss.insertSheet(CONFIG.SHEETS.KPI_TRACKING);
    }
    
    // Set up headers
    const headers = [
      'Tracking ID',
      'Session ID',
      'Date',
      'Calls Offered',
      'Calls Accepted',
      'Answer Rate',
      'Average Talk Time',
      'ACW Percentage',
      'On Queue Percentage',
      'Off Queue Percentage',
      'Interacting Time',
      'Notes',
      'Created By',
      'Created Date'
    ];
    
    // Check if headers already exist
    const existingHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Only set headers if they don't match
    if (existingHeaders.length !== headers.length || !headers.every((header, i) => header === existingHeaders[i])) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
      
      // Format the sheet
      sheet.autoResizeColumns(1, headers.length);
    }
    
    return true;
  } catch (error) {
    logError('initializeKPITrackingSheet', error);
    return false;
  }
}

/**
 * 🔄 Initialize all Manager One-on-One related sheets
 */
function initializeManagerOneOnOneSheets() {
  initializeManagerOneOnOneSheet();
  initializeManagerTasksSheet();
  initializeKPITrackingSheet();
}

/**
 * 📋 Show manager one-on-one form
 * @param {String} sessionId - Optional ID for editing an existing session
 */
function showManagerOneOnOneForm(sessionId = null) {
  try {
    // Store session ID in cache if editing
    if (sessionId) {
      CacheService.getUserCache().put('editManagerSessionId', sessionId);
    } else {
      CacheService.getUserCache().remove('editManagerSessionId');
    }
    
    const htmlOutput = HtmlService
      .createTemplateFromFile('manager-one-on-one-form')
      .evaluate()
      .setWidth(900)
      .setHeight(700)
      .setTitle('Manager One-on-One Session');
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Manager One-on-One Session');
  } catch (error) {
    logError('showManagerOneOnOneForm', error);
    showErrorMessage('Error: ' + error.toString());
  }
}

/**
 * 📊 Show manager one-on-one notes list
 */
function showManagerOneOnOneNotes() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('manager-one-on-one-notes')
      .evaluate()
      .setWidth(1000)
      .setHeight(700)
      .setTitle('Manager One-on-One Notes');
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Manager One-on-One Notes');
  } catch (error) {
    logError('showManagerOneOnOneNotes', error);
    showErrorMessage('Error: ' + error.toString());
  }
}

/**
 * 📈 Show manager one-on-one dashboard
 */
function showManagerOneOnOneDashboard() {
  try {
    const htmlOutput = HtmlService
      .createTemplateFromFile('manager-one-on-one-dashboard')
      .evaluate()
      .setWidth(1000)
      .setHeight(800)
      .setTitle('Manager One-on-One Dashboard');
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Manager One-on-One Dashboard');
  } catch (error) {
    logError('showManagerOneOnOneDashboard', error);
    showErrorMessage('Error: ' + error.toString());
  }
}

/**
 * 🔍 Show manager one-on-one session details
 * @param {String} sessionId - The ID of the session to view
 */
function showManagerOneOnOneDetails(sessionId) {
  try {
    // Store session ID in cache
    CacheService.getUserCache().put('viewManagerSessionId', sessionId);
    
    const htmlOutput = HtmlService
      .createTemplateFromFile('manager-one-on-one-details')
      .evaluate()
      .setWidth(1000)
      .setHeight(700)
      .setTitle('Manager One-on-One Session Details');
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Manager One-on-One Session Details');
  } catch (error) {
    logError('showManagerOneOnOneDetails', error);
    showErrorMessage('Error: ' + error.toString());
  }
}

/**
 * ✏️ Edit an existing manager one-on-one session
 * @param {String} sessionId - The ID of the session to edit
 */
function editManagerOneOnOneSession(sessionId) {
  showManagerOneOnOneForm(sessionId);
}

/**
 * 💾 Get manager session to edit
 * @return {Object} Session data for editing
 */
function getManagerSessionToEdit() {
  try {
    const cache = CacheService.getUserCache();
    const sessionId = cache.get('editManagerSessionId');
    
    if (!sessionId) return null;
    
    return getManagerOneOnOneSessionById(sessionId).data;
  } catch (error) {
    logError('getManagerSessionToEdit', error);
    return null;
  }
}

/**
 * 💾 Save manager one-on-one session
 * @param {Object} sessionData - The session data to save
 * @return {Object} Success status and session ID
 */
function saveManagerOneOnOneSession(sessionData) {
  try {
    // Initialize sheets if they don't exist
    initializeManagerOneOnOneSheets();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
    
    if (!sheet) {
      return { success: false, message: 'Manager One-on-One sheet not found' };
    }
    
    // Check if we're editing an existing session
    let isEditing = false;
    let sessionId = sessionData.id || '';
    
    if (!sessionId) {
      // Generate a new unique ID for the session
      sessionId = 'M' + new Date().getTime().toString();
    } else {
      isEditing = true;
    }
    
    // Get sheet headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Prepare data for saving
    const rowData = headers.map(header => {
      switch(header) {
        case 'Session ID':
          return sessionId;
        case 'Manager Name':
          return sessionData.managerName || '';
        case 'Manager ID':
          return sessionData.managerId || '';
        case 'Session Date':
          return sessionData.sessionDate ? new Date(sessionData.sessionDate) : new Date();
        case 'Session Time':
          return sessionData.sessionTime || '';
        case 'Session Duration':
          return sessionData.sessionDuration || 30;
        case 'Meeting Type':
          return sessionData.meetingType || 'regular';
        case 'Meeting Objectives':
          return sessionData.meetingObjectives || '';
        case 'Org Updates':
          return sessionData.orgUpdates || '';
        // KPI Metrics
        case 'Calls Offered':
          return sessionData.callsOffered || '';
        case 'Calls Accepted':
          return sessionData.callsAccepted || '';
        case 'Answer Rate':
          return sessionData.answerRate || '';
        case 'Average Talk Time':
          return sessionData.averageTalkTime || '';
        case 'ACW Percentage':
          return sessionData.acwPercentage || '';
        case 'On Queue Percentage':
          return sessionData.onQueuePercentage || '';
        case 'Off Queue Percentage':
          return sessionData.offQueuePercentage || '';
        case 'Interacting Time':
          return sessionData.interactingTime || '';
        // KPI Analysis
        case 'KPI Strengths':
          return sessionData.kpiStrengths || '';
        case 'KPI Challenges':
          return sessionData.kpiChallenges || '';
        case 'KPI Actions':
          return sessionData.kpiActions || '';
        // Counselor Updates
        case 'High Performers':
          return sessionData.highPerformers || '';
        case 'Improvement Needed':
          return sessionData.improvementNeeded || '';
        case 'Staffing Issues':
          return sessionData.staffingIssues || '';
        case 'Training Needs':
          return sessionData.trainingNeeds || '';
        case 'Development Plans':
          return sessionData.developmentPlans || '';
        case 'Critical Issues':
          return sessionData.criticalIssues || '';
        // Tasks
        case 'Tasks':
          return JSON.stringify(extractManagerTasks(sessionData)) || '[]';
        case 'Asana Tasks':
          return JSON.stringify(extractAsanaTasks(sessionData)) || '[]';
        // Feedback and Notes
        case 'Strength Feedback':
          return sessionData.strengthFeedback || '';
        case 'Improvement Feedback':
          return sessionData.improvementFeedback || '';
        case 'Discussion Highlights':
          return sessionData.discussionHighlights || '';
        case 'Personal Notes':
          return sessionData.personalNotes || '';
        case 'Next Steps':
          return sessionData.nextSteps || '';
        // Follow-up
        case 'Next Meeting Date':
          return sessionData.nextMeetingDate ? new Date(sessionData.nextMeetingDate) : '';
        case 'Next Meeting Time':
          return sessionData.nextMeetingTime || '';
        // Meta data
        case 'Is Draft':
          return sessionData.isDraft === 'true' || sessionData.isDraft === true;
        case 'Created By':
          return Session.getEffectiveUser().getEmail();
        case 'Created Date':
          return isEditing ? '' : new Date();
        case 'Last Modified':
          return new Date();
        default:
          return '';
      }
    });
    
    // If editing, find the row with the session ID
    if (isEditing) {
      const idColumnIndex = headers.indexOf('Session ID');
      
      if (idColumnIndex === -1) {
        return { success: false, message: 'Session ID column not found' };
      }
      
      const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
      let rowIndex = -1;
      
      for (let i = 0; i < data.length; i++) {
                if (data[i][idColumnIndex] === sessionId) {
          rowIndex = i + 2; // +2 because arrays are 0-indexed and we have a header row
          break;
        }
      }
      
      if (rowIndex === -1) {
        return { success: false, message: 'Session not found for editing' };
      }
      
      sheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    } else {
      // Append new row
      sheet.appendRow(rowData);
    }
    
    // Save tasks separately
    saveManagerTasks(sessionId, sessionData);
    
    // Save KPI metrics to tracking sheet if this is a KPI review
    if (sessionData.meetingType === 'kpi') {
      saveKPIMetrics(sessionId, sessionData);
    }
    
    // Save Asana tasks if any
    saveAsanaTasks(sessionId, sessionData);
    
    return { 
      success: true, 
      sessionId: sessionId,
      message: isEditing ? 'Session updated successfully' : 'Session saved successfully'
    };
  } catch (error) {
    logError('saveManagerOneOnOneSession', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📊 Save KPI metrics to tracking sheet
 * @param {String} sessionId - The ID of the session
 * @param {Object} sessionData - Session data containing KPI metrics
 * @return {Object} Success status
 */
function saveKPIMetrics(sessionId, sessionData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.KPI_TRACKING);
    
    if (!sheet) {
      return { success: false, message: 'KPI Tracking sheet not found' };
    }
    
    // Generate a tracking ID
    const trackingId = 'K' + new Date().getTime().toString();
    
    // Get headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Prepare row data
    const rowData = headers.map(header => {
      switch(header) {
        case 'Tracking ID':
          return trackingId;
        case 'Session ID':
          return sessionId;
        case 'Date':
          return sessionData.sessionDate ? new Date(sessionData.sessionDate) : new Date();
        case 'Calls Offered':
          return sessionData.callsOffered || '';
        case 'Calls Accepted':
          return sessionData.callsAccepted || '';
        case 'Answer Rate':
          return sessionData.answerRate || '';
        case 'Average Talk Time':
          return sessionData.averageTalkTime || '';
        case 'ACW Percentage':
          return sessionData.acwPercentage || '';
        case 'On Queue Percentage':
          return sessionData.onQueuePercentage || '';
        case 'Off Queue Percentage':
          return sessionData.offQueuePercentage || '';
        case 'Interacting Time':
          return sessionData.interactingTime || '';
        case 'Notes':
          return sessionData.kpiActions || '';
        case 'Created By':
          return Session.getEffectiveUser().getEmail();
        case 'Created Date':
          return new Date();
        default:
          return '';
      }
    });
    
    // Append to sheet
    sheet.appendRow(rowData);
    
    return { success: true };
  } catch (error) {
    logError('saveKPIMetrics', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📋 Extract tasks from session data
 * @param {Object} sessionData - The session data
 * @return {Array} Array of tasks
 */
function extractManagerTasks(sessionData) {
  try {
    const tasks = [];
    
    // Check for task descriptions and related fields in the data
    if (sessionData.taskDescription && Array.isArray(sessionData.taskDescription)) {
      for (let i = 0; i < sessionData.taskDescription.length; i++) {
        if (sessionData.taskDescription[i] && sessionData.taskDescription[i].trim() !== '') {
          tasks.push({
            description: sessionData.taskDescription[i],
            dueDate: sessionData.taskDueDate ? sessionData.taskDueDate[i] || '' : '',
            assignee: sessionData.taskAssignee ? sessionData.taskAssignee[i] || 'self' : 'self',
            completed: sessionData.taskCompleted ? (sessionData.taskCompleted[i] === 'true' || sessionData.taskCompleted[i] === true) : false,
            id: sessionData.taskId ? sessionData.taskId[i] || '' : ''
          });
        }
      }
    }
    
    return tasks;
  } catch (error) {
    logError('extractManagerTasks', error);
    return [];
  }
}

/**
 * 📋 Extract Asana tasks from session data
 * @param {Object} sessionData - The session data
 * @return {Array} Array of Asana tasks
 */
function extractAsanaTasks(sessionData) {
  try {
    const asanaTasks = [];
    
    // Find all Asana task data in the form
    const keys = Object.keys(sessionData);
    const asanaProjectKeys = keys.filter(key => key.startsWith('asana_project_'));
    
    for (const projectKey of asanaProjectKeys) {
      const index = projectKey.replace('asana_project_', '');
      const project = sessionData[projectKey];
      
      if (project && project.trim() !== '') {
        asanaTasks.push({
          id: sessionData[`asana_id_${index}`] || '',
          asanaId: sessionData[`asana_asana_id_${index}`] || '',
          project: project,
          name: sessionData[`asana_name_${index}`] || '',
          description: sessionData[`asana_description_${index}`] || '',
          assignee: sessionData[`asana_assignee_${index}`] || 'me',
          dueDate: sessionData[`asana_duedate_${index}`] || '',
          completed: sessionData[`asana_completed_${index}`] === 'true' || sessionData[`asana_completed_${index}`] === true
        });
      }
    }
    
    return asanaTasks;
  } catch (error) {
    logError('extractAsanaTasks', error);
    return [];
  }
}

/**
 * 💾 Save manager tasks to the Manager Tasks sheet
 * @param {String} sessionId - The ID of the one-on-one session
 * @param {Object} sessionData - The session data containing tasks
 */
function saveManagerTasks(sessionId, sessionData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_TASKS);
    
    if (!sheet) {
      logError('saveManagerTasks', 'Manager Tasks sheet not found');
      return;
    }
    
    // Extract tasks
    const tasks = extractManagerTasks(sessionData);
    if (tasks.length === 0) {
      return; // No tasks to save
    }
    
    // Get headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // For each task
    tasks.forEach(task => {
      // Check if this is an existing task
      let isExistingTask = false;
      let existingRowIndex = -1;
      
      if (task.id) {
        // Find the row with the task ID
        const idColumnIndex = headers.indexOf('Task ID');
        if (idColumnIndex !== -1) {
          const data = sheet.getRange(2, idColumnIndex + 1, sheet.getLastRow() - 1, 1).getValues();
          for (let i = 0; i < data.length; i++) {
            if (data[i][0] === task.id) {
              isExistingTask = true;
              existingRowIndex = i + 2; // +2 because arrays are 0-indexed and we have a header row
              break;
            }
          }
        }
      }
      
      // Generate a task ID if it doesn't exist
      if (!task.id) {
        task.id = 'T' + new Date().getTime().toString() + Math.floor(Math.random() * 1000);
      }
      
      // Prepare data for saving
      const rowData = headers.map(header => {
        switch(header) {
          case 'Task ID':
            return task.id;
          case 'Session ID':
            return sessionId;
          case 'Manager ID':
            return sessionData.managerId || '';
          case 'Manager Name':
            return sessionData.managerName || '';
          case 'Description':
            return task.description || '';
          case 'Due Date':
            return task.dueDate ? new Date(task.dueDate) : '';
          case 'Assignee':
            return task.assignee || 'self';
          case 'Completed':
            return task.completed || false;
          case 'Completion Date':
            return task.completed ? new Date() : '';
          case 'Is Asana Task':
            return false;
          case 'Asana Task ID':
            return '';
          case 'Asana Project':
            return '';
          case 'Notes':
            return '';
          case 'Created Date':
            return isExistingTask ? sheet.getRange(existingRowIndex, headers.indexOf('Created Date') + 1).getValue() : new Date();
          case 'Last Modified':
            return new Date();
          default:
            return '';
        }
      });
      
      // Update or append to sheet
      if (isExistingTask) {
        sheet.getRange(existingRowIndex, 1, 1, rowData.length).setValues([rowData]);
      } else {
        sheet.appendRow(rowData);
      }
    });
  } catch (error) {
    logError('saveManagerTasks', error);
  }
}

/**
 * 💾 Save Asana tasks to the Manager Tasks sheet
 * @param {String} sessionId - The ID of the one-on-one session
 * @param {Object} sessionData - The session data containing Asana tasks
 */
function saveAsanaTasks(sessionId, sessionData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_TASKS);
    
    if (!sheet) {
      logError('saveAsanaTasks', 'Manager Tasks sheet not found');
      return;
    }
    
    // Extract Asana tasks
    const asanaTasks = extractAsanaTasks(sessionData);
    if (asanaTasks.length === 0) {
      return; // No Asana tasks to save
    }
    
    // Get headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // For each Asana task
    asanaTasks.forEach(task => {
      // Check if this is an existing task
      let isExistingTask = false;
      let existingRowIndex = -1;
      
      if (task.id) {
        // Find the row with the task ID
        const idColumnIndex = headers.indexOf('Task ID');
        if (idColumnIndex !== -1) {
          const data = sheet.getRange(2, idColumnIndex + 1, sheet.getLastRow() - 1, 1).getValues();
          for (let i = 0; i < data.length; i++) {
            if (data[i][0] === task.id) {
              isExistingTask = true;
              existingRowIndex = i + 2; // +2 because arrays are 0-indexed and we have a header row
              break;
            }
          }
        }
      }
      
      // Generate a task ID if it doesn't exist
      if (!task.id) {
        task.id = 'A' + new Date().getTime().toString() + Math.floor(Math.random() * 1000);
      }
      
      // Prepare data for saving
      const rowData = headers.map(header => {
        switch(header) {
          case 'Task ID':
            return task.id;
          case 'Session ID':
            return sessionId;
          case 'Manager ID':
            return sessionData.managerId || '';
          case 'Manager Name':
            return sessionData.managerName || '';
          case 'Description':
            return task.name || '';
          case 'Due Date':
            return task.dueDate ? new Date(task.dueDate) : '';
          case 'Assignee':
            return task.assignee || 'me';
          case 'Completed':
            return task.completed || false;
          case 'Completion Date':
            return task.completed ? new Date() : '';
          case 'Is Asana Task':
            return true;
          case 'Asana Task ID':
            return task.asanaId || '';
          case 'Asana Project':
            return task.project || '';
          case 'Notes':
            return task.description || '';
          case 'Created Date':
            return isExistingTask ? sheet.getRange(existingRowIndex, headers.indexOf('Created Date') + 1).getValue() : new Date();
          case 'Last Modified':
            return new Date();
          default:
            return '';
        }
      });
      
      // Update or append to sheet
      if (isExistingTask) {
        sheet.getRange(existingRowIndex, 1, 1, rowData.length).setValues([rowData]);
      } else {
        sheet.appendRow(rowData);
      }
    });
  } catch (error) {
    logError('saveAsanaTasks', error);
  }
}

/**
 * 🔄 Update manager action item status
 * @param {String} taskId - The ID of the action item
 * @param {Boolean} completed - Whether the action item is completed
 * @return {Object} Success status
 */
function updateManagerActionItemStatus(taskId, completed) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_TASKS);
    
    if (!sheet) {
      return { success: false, message: 'Manager Tasks sheet not found' };
    }
    
    // Get headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const idColIndex = headers.indexOf('Task ID');
    const completedColIndex = headers.indexOf('Completed');
    const completionDateColIndex = headers.indexOf('Completion Date');
    const lastModifiedColIndex = headers.indexOf('Last Modified');
    
    if (idColIndex === -1 || completedColIndex === -1) {
      return { success: false, message: 'Required columns not found' };
    }
    
    // Find the action item
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
    let rowIndex = -1;
    
    for (let i = 0; i < data.length; i++) {
      if (data[i][idColIndex] === taskId) {
        rowIndex = i + 2; // +2 because arrays are 0-indexed and we have a header row
        break;
      }
    }
    
    if (rowIndex === -1) {
      return { success: false, message: 'Action item not found' };
    }
    
    // Update completed status
    sheet.getRange(rowIndex, completedColIndex + 1).setValue(completed);
    
    // Update completion date if completed
    if (completionDateColIndex !== -1) {
      sheet.getRange(rowIndex, completionDateColIndex + 1).setValue(completed ? new Date() : '');
    }
    
    // Update last modified date
    if (lastModifiedColIndex !== -1) {
      sheet.getRange(rowIndex, lastModifiedColIndex + 1).setValue(new Date());
    }
    
    // Check if this is an Asana task
    const isAsanaColIndex = headers.indexOf('Is Asana Task');
    const asanaIdColIndex = headers.indexOf('Asana Task ID');
    
    if (isAsanaColIndex !== -1 && asanaIdColIndex !== -1) {
      const isAsanaTask = data[rowIndex - 2][isAsanaColIndex];
      const asanaTaskId = data[rowIndex - 2][asanaIdColIndex];
      
      if (isAsanaTask && asanaTaskId) {
        // Update Asana task status
        // Note: This would require Asana API integration
        // For now we'll just log the intention
        console.log(`Would update Asana task ${asanaTaskId} to ${completed ? 'completed' : 'incomplete'}`);
      }
    }
    
    return { success: true };
  } catch (error) {
    logError('updateManagerActionItemStatus', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 🔍 Get manager one-on-one sessions
 * @return {Object} Success status and sessions data
 */
function getManagerOneOnOneSessions() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
    
    if (!sheet) {
      return { success: false, message: 'Manager One-on-One sheet not found', sessions: [] };
    }
    
    // Get data range
    const dataRange = sheet.getDataRange();
    const data = dataRange.getValues();
    
    if (data.length <= 1) {
      return { success: true, sessions: [], managers: [] };
    }
    
    const headers = data[0];
    const sessions = [];
    const managers = new Map(); // Use Map to track unique managers
    
    // Map data to sessions array
    for (let i = 1; i < data.length; i++) {
      const session = {};
      
      headers.forEach((header, index) => {
        session[header] = data[i][index];
      });
      
      // Parse tasks if needed
      if (session['Tasks'] && typeof session['Tasks'] === 'string') {
        try {
          session.tasks = JSON.parse(session['Tasks']);
        } catch (e) {
          session.tasks = [];
        }
      } else {
        session.tasks = [];
      }
      
      // Parse Asana tasks if needed
      if (session['Asana Tasks'] && typeof session['Asana Tasks'] === 'string') {
        try {
          session.asanaTasks = JSON.parse(session['Asana Tasks']);
        } catch (e) {
          session.asanaTasks = [];
        }
      } else {
        session.asanaTasks = [];
      }
      
      // Track unique managers
      if (session['Manager Name'] && !managers.has(session['Manager Name'])) {
        managers.set(session['Manager Name'], {
          name: session['Manager Name'],
          id: session['Manager ID'] || session['Manager Name']
        });
      }
      
      // Format the session for the UI
      sessions.push({
        id: session['Session ID'],
        managerId: session['Manager ID'],
        managerName: session['Manager Name'],
        sessionDate: session['Session Date'],
        meetingType: session['Meeting Type'],
        meetingTitle: getMeetingTypeTitle(session['Meeting Type']),
        preview: getManagerSessionPreview(session),
        tasks: session.tasks,
        asanaTasks: session.asanaTasks,
        isDraft: session['Is Draft'],
        taskCount: (session.tasks ? session.tasks.length : 0) + (session.asanaTasks ? session.asanaTasks.length : 0)
      });
    }
    
    // Sort sessions by date (newest first)
    sessions.sort((a, b) => new Date(b.sessionDate) - new Date(a.sessionDate));
    
    return { 
      success: true, 
      sessions, 
      managers: Array.from(managers.values()) 
    };
  } catch (error) {
    logError('getManagerOneOnOneSessions', error);
    return { success: false, message: error.toString(), sessions: [] };
  }
}

/**
 * 🔍 Get manager one-on-one session by ID
 * @param {String} sessionId - The ID of the session
 * @return {Object} Success status and session data
 */
function getManagerOneOnOneSessionById(sessionId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
    
    if (!sheet) {
      return { success: false, message: 'Manager One-on-One sheet not found' };
    }
    
    // Get headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const idColIndex = headers.indexOf('Session ID');
    
    if (idColIndex === -1) {
      return { success: false, message: 'Session ID column not found' };
    }
    
    // Find the session
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
    let sessionData = null;
    
    for (let i = 0; i < data.length; i++) {
      if (data[i][idColIndex] === sessionId) {
        sessionData = {};
        
        // Map row data to object using headers
        headers.forEach((header, index) => {
          sessionData[header] = data[i][index];
        });
        
        break;
      }
    }
    
    if (!sessionData) {
      return { success: false, message: 'Session not found' };
    }
    
    // Parse tasks from JSON
    if (sessionData['Tasks'] && typeof sessionData['Tasks'] === 'string') {
      try {
        sessionData.tasks = JSON.parse(sessionData['Tasks']);
      } catch (e) {
        sessionData.tasks = [];
      }
    } else {
      sessionData.tasks = [];
    }
    
    // Parse Asana tasks from JSON
    if (sessionData['Asana Tasks'] && typeof sessionData['Asana Tasks'] === 'string') {
      try {
        sessionData.asanaTasks = JSON.parse(sessionData['Asana Tasks']);
      } catch (e) {
        sessionData.asanaTasks = [];
      }
    } else {
      sessionData.asanaTasks = [];
    }
    
    // Get tasks from the Manager Tasks sheet
    const tasksResult = getManagerTasksForSession(sessionId);
    if (tasksResult.success && tasksResult.tasks.length > 0) {
      sessionData.tasks = tasksResult.tasks.filter(task => !task.isAsanaTask);
      sessionData.asanaTasks = tasksResult.tasks.filter(task => task.isAsanaTask);
    }
    
    // Format data for the UI
    const formattedData = {
      id: sessionData['Session ID'],
      managerId: sessionData['Manager ID'],
      managerName: sessionData['Manager Name'],
      sessionDate: sessionData['Session Date'],
      sessionTime: sessionData['Session Time'],
      sessionDuration: sessionData['Session Duration'],
      meetingType: sessionData['Meeting Type'],
      meetingObjectives: sessionData['Meeting Objectives'],
      orgUpdates: sessionData['Org Updates'],
      // KPI Metrics
      callsOffered: sessionData['Calls Offered'],
      callsAccepted: sessionData['Calls Accepted'],
      answerRate: sessionData['Answer Rate'],
      averageTalkTime: sessionData['Average Talk Time'],
      acwPercentage: sessionData['ACW Percentage'],
      onQueuePercentage: sessionData['On Queue Percentage'],
      offQueuePercentage: sessionData['Off Queue Percentage'],
      interactingTime: sessionData['Interacting Time'],
      // KPI Analysis
      kpiStrengths: sessionData['KPI Strengths'],
      kpiChallenges: sessionData['KPI Challenges'],
      kpiActions: sessionData['KPI Actions'],
      // Counselor Updates
      highPerformers: sessionData['High Performers'],
      improvementNeeded: sessionData['Improvement Needed'],
      staffingIssues: sessionData['Staffing Issues'],
      trainingNeeds: sessionData['Training Needs'],
      developmentPlans: sessionData['Development Plans'],
      criticalIssues: sessionData['Critical Issues'],
      // Tasks
      tasks: sessionData.tasks,
      asanaTasks: sessionData.asanaTasks,
      // Feedback and Notes
      strengthFeedback: sessionData['Strength Feedback'],
      improvementFeedback: sessionData['Improvement Feedback'],
      discussionHighlights: sessionData['Discussion Highlights'],
      personalNotes: sessionData['Personal Notes'],
      nextSteps: sessionData['Next Steps'],
      // Follow-up
      nextMeetingDate: sessionData['Next Meeting Date'],
      nextMeetingTime: sessionData['Next Meeting Time'],
      // Meta data
      isDraft: sessionData['Is Draft'],
      createdBy: sessionData['Created By'],
      createdDate: sessionData['Created Date'],
      lastModified: sessionData['Last Modified'],
      // Additional fields for UI
      meetingTitle: getMeetingTypeTitle(sessionData['Meeting Type']),
      preview: getManagerSessionPreview(sessionData)
    };
    
    return { success: true, data: formattedData };
  } catch (error) {
    logError('getManagerOneOnOneSessionById', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 🔍 Get tasks for a manager session
 * @param {String} sessionId - The ID of the session
 * @return {Object} Success status and tasks data
 */
function getManagerTasksForSession(sessionId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_TASKS);
    
    if (!sheet) {
      return { success: false, message: 'Manager Tasks sheet not found', tasks: [] };
    }
    
    // Get headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const sessionIdColIndex = headers.indexOf('Session ID');
    
    if (sessionIdColIndex === -1) {
      return { success: false, message: 'Session ID column not found', tasks: [] };
    }
    
    // Find all tasks for this session
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
    const tasks = [];
    
    for (let i = 0; i < data.length; i++) {
      if (data[i][sessionIdColIndex] === sessionId) {
        const task = {};
        
        // Map row data to object using headers
        headers.forEach((header, index) => {
          task[toCamelCase(header)] = data[i][index];
        });
        
        tasks.push(task);
      }
    }
    
    return { success: true, tasks };
  } catch (error) {
    logError('getManagerTasksForSession', error);
    return { success: false, message: error.toString(), tasks: [] };
  }
}

/**
 * 📊 Get filtered manager action items
 * @param {String} filter - The filter to apply (open, completed, all, overdue)
 * @return {Object} Success status and action items data
 */
function getFilteredManagerActionItems(filter) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_TASKS);
    
    if (!sheet) {
      return { success: false, message: 'Manager Tasks sheet not found', data: [] };
    }
    
    // Get all data
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
    
    // Map column indices for easier reference
    const idColIndex = headers.indexOf('Task ID');
    const descColIndex = headers.indexOf('Description');
    const dueDateColIndex = headers.indexOf('Due Date');
    const completedColIndex = headers.indexOf('Completed');
    const sessionIdColIndex = headers.indexOf('Session ID');
    
    if (idColIndex === -1 || descColIndex === -1 || completedColIndex === -1 || sessionIdColIndex === -1) {
      return { success: false, message: 'Required columns not found', data: [] };
    }
    
    // Get session data for connecting tasks to session details
    const sessionSheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
    let sessionData = [];
    
    if (sessionSheet) {
      const sessionHeaders = sessionSheet.getRange(1, 1, 1, sessionSheet.getLastColumn()).getValues()[0];
      const sessionIdSessionColIndex = sessionHeaders.indexOf('Session ID');
      const sessionDateColIndex = sessionHeaders.indexOf('Session Date');
      const meetingTypeColIndex = sessionHeaders.indexOf('Meeting Type');
      
      if (sessionIdSessionColIndex !== -1 && sessionDateColIndex !== -1) {
        sessionData = sessionSheet.getRange(2, 1, sessionSheet.getLastRow() - 1, sessionSheet.getLastColumn()).getValues();
      }
    }
    
    // Process and filter action items
    const actionItems = [];
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      const dueDate = row[dueDateColIndex] ? new Date(row[dueDateColIndex]) : null;
      const completed = row[completedColIndex] === true;
      const isOverdue = dueDate && dueDate < today && !completed;
      
      // Apply filter
      if (filter === 'open' && completed) continue;
      if (filter === 'completed' && !completed) continue;
      if (filter === 'overdue' && !isOverdue) continue;
      
      // Find session info
      let sessionInfo = { date: 'Unknown', type: 'Unknown' };
      
      if (sessionData.length > 0) {
        const sessionId = row[sessionIdColIndex];
        for (let j = 0; j < sessionData.length; j++) {
          if (sessionData[j][sessionIdSessionColIndex] === sessionId) {
            const sessionDate = sessionData[j][sessionDateColIndex] ? new Date(sessionData[j][sessionDateColIndex]) : null;
            const meetingType = sessionData[j][meetingTypeColIndex] || 'regular';
            
            sessionInfo = {
              date: sessionDate ? formatShortDate(sessionDate) : 'Unknown',
              type: meetingType
            };
            break;
          }
        }
      }
      
      // Format due date text
      let dueText = 'No due date';
      if (dueDate) {
        if (completed) {
          dueText = `Completed ${formatShortDate(row[headers.indexOf('Completion Date')])}`;
        } else {
          const diffDays = Math.round((dueDate - today) / (1000 * 60 * 60 * 24));
          
          if (diffDays < 0) {
            dueText = `Due ${Math.abs(diffDays)} days ago`;
          } else if (diffDays === 0) {
            dueText = 'Due today';
          } else if (diffDays === 1) {
            dueText = 'Due tomorrow';
          } else {
            dueText = `Due in ${diffDays} days`;
          }
        }
      }
      
      // Create action item object
      actionItems.push({
        id: row[idColIndex],
        description: row[descColIndex],
        dueDate: dueDate,
        dueText: dueText,
        completed: completed,
        isOverdue: isOverdue,
        sessionId: row[sessionIdColIndex],
        sessionDate: sessionInfo.date,
        sessionType: sessionInfo.type,
        sessionTitle: getMeetingTypeTitle(sessionInfo.type),
        isAsanaTask: row[headers.indexOf('Is Asana Task')] === true
      });
    }
    
    // Sort by due date (overdue first, then upcoming, then no due date, then completed)
    actionItems.sort((a, b) => {
      if (a.completed && !b.completed) return 1;
      if (!a.completed && b.completed) return -1;
      if (a.isOverdue && !b.isOverdue) return -1;
      if (!a.isOverdue && b.isOverdue) return 1;
      if (a.dueDate && b.dueDate) return a.dueDate - b.dueDate;
      if (a.dueDate && !b.dueDate) return -1;
      if (!a.dueDate && b.dueDate) return 1;
      return 0;
    });
    
    return { success: true, data: actionItems };
  } catch (error) {
    logError('getFilteredManagerActionItems', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * 📊 Get manager one-on-one dashboard data
 * @return {Object} Success status and dashboard data
 */
function getManagerOneOnOneDashboardData() {
  try {
    // Get basic session data
    const sessionsResult = getManagerOneOnOneSessions();
    
    if (!sessionsResult.success) {
      return { success: false, message: sessionsResult.message };
    }
    
    const sessions = sessionsResult.sessions || [];
    
    // Get KPI metrics
    const kpiMetricsResult = getManagerKPIMetrics('current');
    const kpiMetrics = kpiMetricsResult.success ? kpiMetricsResult.data : [];
    
    // Get action items
    const actionItemsResult = getFilteredManagerActionItems('all');
    const actionItems = actionItemsResult.success ? actionItemsResult.data : [];
    
    // Calculate stats
    const totalSessions = sessions.length;
    const kpiSessions = sessions.filter(session => session.meetingType === 'kpi').length;
    const completedTasks = actionItems.filter(item => item.completed).length;
    const openTasks = actionItems.filter(item => !item.completed).length;
    
    // Prepare chart data (last 90 days)
    const chartData = prepareChartData(sessions, actionItems, 90);
    
    // Get recent sessions (last 5)
    const recentSessions = sessions.slice(0, 5);
    
    // Generate insights
    const insights = generateManagerInsights(sessions, kpiMetrics, actionItems);
    
    return {
      success: true,
      data: {
        stats: {
          totalSessions,
          kpiSessions,
          completedTasks,
          openTasks
        },
        chartData,
        kpiMetrics,
        actionItems: actionItems.slice(0, 4), // Just show 4 items in the dashboard
        recentSessions,
        insights
      }
    };
  } catch (error) {
    logError('getManagerOneOnOneDashboardData', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📊 Get manager KPI metrics
 * @param {String} timeRange - The time range to get metrics for (current, previous, ytd)
 * @return {Object} Success status and metrics data
 */
function getManagerKPIMetrics(timeRange) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.KPI_TRACKING);
    
    if (!sheet) {
      return { success: false, message: 'KPI Tracking sheet not found', data: [] };
    }
    
    // Get all data
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
    
    if (data.length === 0) {
      return { success: true, data: getDefaultKPIMetrics() };
    }
    
    // Map column indices
    const dateColIndex = headers.indexOf('Date');
    const callsOfferedColIndex = headers.indexOf('Calls Offered');
    const callsAcceptedColIndex = headers.indexOf('Calls Accepted');
    const answerRateColIndex = headers.indexOf('Answer Rate');
    const avgTalkTimeColIndex = headers.indexOf('Average Talk Time');
    const acwColIndex = headers.indexOf('ACW Percentage');
    const onQueueColIndex = headers.indexOf('On Queue Percentage');
    const offQueueColIndex = headers.indexOf('Off Queue Percentage');
    const interactingTimeColIndex = headers.indexOf('Interacting Time');
    
    if (dateColIndex === -1) {
      return { success: false, message: 'Required columns not found', data: [] };
    }
    
    // Determine date range based on timeRange parameter
    let filterDate = null;
    const today = new Date();
    const currentYear = today.getFullYear();
    
    if (timeRange === 'previous') {
      // Previous period (last month)
      filterDate = new Date();
      filterDate.setMonth(filterDate.getMonth() - 1);
    } else if (timeRange === 'ytd') {
      // Year to date
      filterDate = new Date(currentYear, 0, 1); // January 1st of current year
    }
    
    // Filter and sort data by date
    let filteredData = data;
    
    if (filterDate) {
      filteredData = data.filter(row => {
        const rowDate = row[dateColIndex] ? new Date(row[dateColIndex]) : null;
        return rowDate && rowDate >= filterDate;
      });
    }
    
    // Sort by date (newest first)
    filteredData.sort((a, b) => new Date(b[dateColIndex]) - new Date(a[dateColIndex]));
    
    // Use the most recent entry
    if (filteredData.length === 0) {
      return { success: true, data: getDefaultKPIMetrics() };
    }
    
    const mostRecent = filteredData[0];
    
    // Function to determine KPI status based on value and target
    const getKpiStatus = (value, target, isHigherBetter = true, thresholds = { warning: 0.1, critical: 0.2 }) => {
      if (!value || !target) return { status: 'good', statusText: 'Good', percentage: 90 };
      
      // Convert to numbers if they're strings
      const numValue = typeof value === 'string' ? parseFloat(value) : value;
      const numTarget = typeof target === 'string' ? parseFloat(target) : target;
      
      if (isNaN(numValue) || isNaN(numTarget)) return { status: 'good', statusText: 'Good', percentage: 90 };
      
      let percentage, status, statusText;
      
      if (isHigherBetter) {
        // For metrics where higher is better (like answer rate)
        percentage = Math.min(100, Math.round((numValue / numTarget) * 100));
        
        if (numValue >= numTarget) {
          status = 'good';
          statusText = 'Good';
        } else {
          const diff = (numTarget - numValue) / numTarget;
          if (diff > thresholds.critical) {
            status = 'critical';
            statusText = 'Critical';
          } else if (diff > thresholds.warning) {
            status = 'warning';
            statusText = 'Warning';
          } else {
            status = 'good';
            statusText = 'Good';
          }
        }
      } else {
        // For metrics where lower is better (like ACW time)
        percentage = Math.min(100, Math.round((numTarget / numValue) * 100));
        
        if (numValue <= numTarget) {
          status = 'good';
          statusText = 'Good';
        } else {
          const diff = (numValue - numTarget) / numTarget;
          if (diff > thresholds.critical) {
            status = 'critical';
            statusText = 'Critical';
          } else if (diff > thresholds.warning) {
            status = 'warning';
            statusText = 'Warning';
          } else {
            status = 'good';
            statusText = 'Good';
          }
        }
      }
      
      return { status, statusText, percentage };
    };
    
    // Build KPI metrics array
    const kpiMetrics = [
      {
        name: 'Calls Offered',
        icon: 'fas fa-phone',
        value: mostRecent[callsOfferedColIndex] || '0',
        target: '—',
        ...getKpiStatus(mostRecent[callsOfferedColIndex], 1, true),
        percentage: 92
      },
      {
        name: 'Calls Accepted',
        icon: 'fas fa-phone-volume',
        value: mostRecent[callsAcceptedColIndex] || '0',
        target: '—',
        ...getKpiStatus(mostRecent[callsAcceptedColIndex], 1, true),
        percentage: 94
      },
      {
        name: 'Answer Rate',
        icon: 'fas fa-percentage',
        value: formatPercentage(mostRecent[answerRateColIndex]),
        target: '95%+',
        ...getKpiStatus(parseFloat(mostRecent[answerRateColIndex]), 95, true),
        percentage: parseFloat(mostRecent[answerRateColIndex]) || 90
      },
      {
        name: 'Average Talk Time',
        icon: 'fas fa-clock',
        value: formatTime(mostRecent[avgTalkTimeColIndex]),
        target: '15-20 min',
        ...getKpiStatus(parseFloat(mostRecent[avgTalkTimeColIndex]), 17.5, true, { warning: 0.2, critical: 0.3 }),
        percentage: 76
      },
      {
        name: 'ACW Percentage',
        icon: 'fas fa-stopwatch',
        value: formatTime(mostRecent[acwColIndex]),
        target: '5 min or less',
        ...getKpiStatus(parseFloat(mostRecent[acwColIndex]), 5, false),
        percentage: 65
      },
      {
        name: 'On Queue Percentage',
        icon: 'fas fa-headset',
        value: formatPercentage(mostRecent[onQueueColIndex]),
        target: '65%+',
        ...getKpiStatus(parseFloat(mostRecent[onQueueColIndex]), 65, true),
        percentage: parseFloat(mostRecent[onQueueColIndex]) || 68
      },
      {
        name: 'Off Queue Percentage',
        icon: 'fas fa-user-alt-slash',
        value: formatPercentage(mostRecent[offQueueColIndex]),
        target: '—',
        ...getKpiStatus(1, 1, true),
        percentage: parseFloat(mostRecent[offQueueColIndex]) || 32
      },
      {
        name: 'Interacting Time',
        icon: 'fas fa-users',
        value: formatInteractingTime(mostRecent[interactingTimeColIndex]),
        target: '4-6 hrs (≥50%)',
        ...getKpiStatus(parseFloat(mostRecent[interactingTimeColIndex]), 5, true),
        percentage: 85
      }
    ];
    
    return { success: true, data: kpiMetrics };
  } catch (error) {
    logError('getManagerKPIMetrics', error);
    return { success: false, message: error.toString(), data: getDefaultKPIMetrics() };
  }
}

/**
 * 📊 Get manager one-on-one chart data
 * @param {String} timeRange - The time range to get data for (30, 90, 180, 365 days)
 * @param {String} chartType - The type of chart data to get (sessions, kpis, tasks)
 * @return {Object} Success status and chart data
 */
function getManagerOneOnOneChartData(timeRange, chartType) {
  try {
    // Convert timeRange to number of days
    const days = parseInt(timeRange) || 90;
    
    // Get sessions
    const sessionsResult = getManagerOneOnOneSessions();
    if (!sessionsResult.success) {
      return { success: false, message: sessionsResult.message };
    }
    
    const sessions = sessionsResult.sessions || [];
    
    // Get KPI data if needed
    let kpiData = [];
    if (chartType === 'kpis') {
      const kpiResult = getKPIHistoricalData();
      if (kpiResult.success) {
        kpiData = kpiResult.data;
      }
    }
    
    // Get action items if needed
    let actionItems = [];
    if (chartType === 'sessions' || chartType === 'tasks') {
      const actionItemsResult = getFilteredManagerActionItems('all');
      if (actionItemsResult.success) {
        actionItems = actionItemsResult.data;
      }
    }
    
    // Generate chart data based on type
    let chartData = {};
    
    if (chartType === 'sessions') {
      chartData = prepareChartData(sessions, actionItems, days);
    } else if (chartType === 'kpis') {
      chartData = prepareKPIChartData(kpiData, days);
    } else if (chartType === 'tasks') {
      chartData = prepareTasksChartData(sessions, actionItems, days);
    }
    
    return { success: true, data: chartData };
  } catch (error) {
    logError('getManagerOneOnOneChartData', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📊 Get KPI historical data
 * @return {Object} Success status and KPI data
 */
function getKPIHistoricalData() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.KPI_TRACKING);
    
    if (!sheet) {
      return { success: false, message: 'KPI Tracking sheet not found', data: [] };
    }
    
    // Get all data
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
    
    if (data.length === 0) {
      return { success: true, data: [] };
    }
    
    // Map column indices
    const dateColIndex = headers.indexOf('Date');
    const answerRateColIndex = headers.indexOf('Answer Rate');
    const acwColIndex = headers.indexOf('ACW Percentage');
    
    if (dateColIndex === -1 || answerRateColIndex === -1 || acwColIndex === -1) {
      return { success: false, message: 'Required columns not found', data: [] };
    }
    
    // Transform data for charting
    const kpiData = data.map(row => ({
      date: row[dateColIndex] ? new Date(row[dateColIndex]) : null,
      answerRate: parseFloat(row[answerRateColIndex]) || null,
      acwTime: parseFloat(row[acwColIndex]) || null
    })).filter(item => item.date !== null);
    
    // Sort by date (oldest to newest)
    kpiData.sort((a, b) => a.date - b.date);
    
    return { success: true, data: kpiData };
  } catch (error) {
    logError('getKPIHistoricalData', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * 📊 Prepare general chart data
 * @param {Array} sessions - Array of sessions
 * @param {Array} actionItems - Array of action items
 * @param {Number} days - Number of days back to include
 * @return {Object} Chart data for rendering
 */
function prepareChartData(sessions, actionItems, days) {
  try {
    // Determine date range
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(endDate.getDate() - days);
    
    // Filter sessions in range
    const sessionsInRange = sessions.filter(session => {
      const sessionDate = session.sessionDate ? new Date(session.sessionDate) : null;
      return sessionDate && sessionDate >= startDate && sessionDate <= endDate;
    });
    
    // Generate labels (dates)
    const dateLabels = [];
    
    // For shorter ranges, show individual dates
    if (days <= 90) {
      // Create weekly labels
      const weekCount = Math.ceil(days / 7);
      for (let i = 0; i < weekCount; i++) {
        const weekDate = new Date(startDate);
        weekDate.setDate(startDate.getDate() + (i * 7));
        dateLabels.push(formatShortDate(weekDate));
      }
    } else {
      // Create monthly labels
      const monthCount = Math.ceil(days / 30);
      for (let i = 0; i < monthCount; i++) {
        const monthDate = new Date(startDate);
        monthDate.setMonth(startDate.getMonth() + i);
        dateLabels.push(formatMonth(monthDate));
      }
    }
    
    // Count sessions by date
    const sessionCounts = new Array(dateLabels.length).fill(0);
    
    sessionsInRange.forEach(session => {
      const sessionDate = new Date(session.sessionDate);
      
      // Find which label bucket this session belongs to
      if (days <= 90) {
        // Weekly buckets
        const weekIndex = Math.floor((sessionDate - startDate) / (7 * 24 * 60 * 60 * 1000));
        if (weekIndex >= 0 && weekIndex < sessionCounts.length) {
          sessionCounts[weekIndex]++;
        }
      } else {
        // Monthly buckets
        const monthDiff = (sessionDate.getFullYear() - startDate.getFullYear()) * 12 + 
                         sessionDate.getMonth() - startDate.getMonth();
        if (monthDiff >= 0 && monthDiff < sessionCounts.length) {
          sessionCounts[monthDiff]++;
        }
      }
    });
    
    // Count action items by date
    const actionItemCounts = new Array(dateLabels.length).fill(0);
    
    // Filter and group action items
    actionItems.forEach(item => {
      if (!item.dueDate) return;
      
      const dueDate = new Date(item.dueDate);
      if (dueDate < startDate || dueDate > endDate) return;
      
      // Find which label bucket this item belongs to
      if (days <= 90) {
        // Weekly buckets
        const weekIndex = Math.floor((dueDate - startDate) / (7 * 24 * 60 * 60 * 1000));
        if (weekIndex >= 0 && weekIndex < actionItemCounts.length) {
          actionItemCounts[weekIndex]++;
        }
      } else {
        // Monthly buckets
        const monthDiff = (dueDate.getFullYear() - startDate.getFullYear()) * 12 + 
                        dueDate.getMonth() - startDate.getMonth();
        if (monthDiff >= 0 && monthDiff < actionItemCounts.length) {
          actionItemCounts[monthDiff]++;
        }
      }
    });
    
    return {
      labels: dateLabels,
      sessions: sessionCounts,
      actionItems: actionItemCounts
    };
  } catch (error) {
    logError('prepareChartData', error);
    return { labels: [], sessions: [], actionItems: [] };
  }
}

/**
 * 📊 Prepare KPI chart data
 * @param {Array} kpiData - Array of KPI data points
 * @param {Number} days - Number of days back to include
 * @return {Object} Chart data for rendering
 */
function prepareKPIChartData(kpiData, days) {
  try {
    // Determine date range
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(endDate.getDate() - days);
    
    // Filter KPI data in range
    const kpiInRange = kpiData.filter(item => 
      item.date >= startDate && item.date <= endDate
    );
    
    // Generate labels (dates)
    const dateLabels = [];
    let bucketSize = 1; // default: daily
    
    if (days > 180) {
      bucketSize = 30; // monthly
    } else if (days > 60) {
      bucketSize = 14; // bi-weekly
    } else if (days > 30) {
      bucketSize = 7; // weekly
    }
    
    // Create date labels
    for (let i = 0; i <= days; i += bucketSize) {
      const labelDate = new Date(startDate);
      labelDate.setDate(startDate.getDate() + i);
      if (bucketSize >= 30) {
        dateLabels.push(formatMonth(labelDate));
      } else {
        dateLabels.push(formatShortDate(labelDate));
      }
    }
    
    // Initialize data arrays
    const answerRateData = new Array(dateLabels.length).fill(null);
    const acwTimeData = new Array(dateLabels.length).fill(null);
    
    // Group and average data into buckets
    kpiInRange.forEach(item => {
      // Find bucket index
      const dayIndex = Math.floor((item.date - startDate) / (24 * 60 * 60 * 1000));
      const bucketIndex = Math.floor(dayIndex / bucketSize);
      
      if (bucketIndex >= 0 && bucketIndex < dateLabels.length) {
        // If this is the first value for this bucket, set it directly
        if (answerRateData[bucketIndex] === null && item.answerRate !== null) {
          answerRateData[bucketIndex] = item.answerRate;
        } else if (item.answerRate !== null) {
          // If already has value, take the most recent (assuming data is sorted)
          answerRateData[bucketIndex] = item.answerRate;
        }
        
        if (acwTimeData[bucketIndex] === null && item.acwTime !== null) {
          acwTimeData[bucketIndex] = item.acwTime;
        } else if (item.acwTime !== null) {
          acwTimeData[bucketIndex] = item.acwTime;
        }
      }
    });
    
    // Fill gaps in data
    for (let i = 0; i < dateLabels.length; i++) {
      // Find nearest non-null value for answerRate
      if (answerRateData[i] === null) {
        answerRateData[i] = findNearestValue(answerRateData, i) || 90;
      }
      
      // Find nearest non-null value for acwTime
      if (acwTimeData[i] === null) {
        acwTimeData[i] = findNearestValue(acwTimeData, i) || 5;
      }
    }
    
    return {
      labels: dateLabels,
      answerRate: answerRateData,
      acwTime: acwTimeData
    };
  } catch (error) {
    logError('prepareKPIChartData', error);
    return { labels: [], answerRate: [], acwTime: [] };
  }
}

/**
 * 📊 Prepare tasks chart data
 * @param {Array} sessions - Array of sessions
 * @param {Array} actionItems - Array of action items
 * @param {Number} days - Number of days back to include
 * @return {Object} Chart data for rendering
 */
function prepareTasksChartData(sessions, actionItems, days) {
  try {
    // Determine date range
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(endDate.getDate() - days);
    
    // Generate labels (dates)
    const dateLabels = [];
    
    // For shorter ranges, show individual dates
    if (days <= 90) {
      // Create weekly labels
      const weekCount = Math.ceil(days / 7);
      for (let i = 0; i < weekCount; i++) {
        const weekDate = new Date(startDate);
        weekDate.setDate(startDate.getDate() + (i * 7));
        dateLabels.push(formatShortDate(weekDate));
      }
    } else {
      // Create monthly labels
      const monthCount = Math.ceil(days / 30);
      for (let i = 0; i < monthCount; i++) {
        const monthDate = new Date(startDate);
        monthDate.setMonth(startDate.getMonth() + i);
        dateLabels.push(formatMonth(monthDate));
      }
    }
    
    // Count tasks created by date (based on session date)
    const tasksCreatedCounts = new Array(dateLabels.length).fill(0);
    
    // Group sessions by date and count tasks
    sessions.forEach(session => {
      const sessionDate = new Date(session.sessionDate);
      if (sessionDate < startDate || sessionDate > endDate) return;
      
      const taskCount = (session.tasks ? session.tasks.length : 0) + 
                       (session.asanaTasks ? session.asanaTasks.length : 0);
      
      // Find which label bucket this session belongs to
      if (days <= 90) {
        // Weekly buckets
        const weekIndex = Math.floor((sessionDate - startDate) / (7 * 24 * 60 * 60 * 1000));
        if (weekIndex >= 0 && weekIndex < tasksCreatedCounts.length) {
          tasksCreatedCounts[weekIndex] += taskCount;
        }
      } else {
        // Monthly buckets
        const monthDiff = (sessionDate.getFullYear() - startDate.getFullYear()) * 12 + 
                        sessionDate.getMonth() - startDate.getMonth();
        if (monthDiff >= 0 && monthDiff < tasksCreatedCounts.length) {
          tasksCreatedCounts[monthDiff] += taskCount;
        }
      }
    });
    
    // Count tasks completed by date
    const tasksCompletedCounts = new Array(dateLabels.length).fill(0);
    
    // Filter and group completed action items
    actionItems
      .filter(item => item.completed)
      .forEach(item => {
        // For completed tasks, use completion date
        const completionDate = item.completionDate ? new Date(item.completionDate) : null;
        if (!completionDate || completionDate < startDate || completionDate > endDate) return;
        
        // Find which label bucket this item belongs to
        if (days <= 90) {
          // Weekly buckets
          const weekIndex = Math.floor((completionDate - startDate) / (7 * 24 * 60 * 60 * 1000));
          if (weekIndex >= 0 && weekIndex < tasksCompletedCounts.length) {
            tasksCompletedCounts[weekIndex]++;
          }
        } else {
          // Monthly buckets
          const monthDiff = (completionDate.getFullYear() - startDate.getFullYear()) * 12 + 
                          completionDate.getMonth() - startDate.getMonth();
          if (monthDiff >= 0 && monthDiff < tasksCompletedCounts.length) {
            tasksCompletedCounts[monthDiff]++;
          }
        }
      });
    
    return {
      labels: dateLabels,
      tasksCreated: tasksCreatedCounts,
      tasksCompleted: tasksCompletedCounts
    };
  } catch (error) {
    logError('prepareTasksChartData', error);
    return { labels: [], tasksCreated: [], tasksCompleted: [] };
  }
}

/**
 * 💡 Generate insights for the dashboard
 * @param {Array} sessions - Sessions data
 * @param {Array} kpiMetrics - KPI metrics data
 * @param {Array} actionItems - Action items data
 * @return {Array} Insights
 */
function generateManagerInsights(sessions, kpiMetrics, actionItems) {
  try {
    const insights = [];
    
    // Performance trend insight
    const lowPerformingKpis = kpiMetrics.filter(kpi => kpi.status === 'warning' || kpi.status === 'critical');
    if (lowPerformingKpis.length > 0) {
      const worstKpi = lowPerformingKpis.reduce((worst, current) => 
        (current.percentage < worst.percentage) ? current : worst, lowPerformingKpis[0]);
      
      insights.push({
        type: 'trend',
        icon: 'fas fa-chart-line',
        title: 'Performance Trend',
        content: `Your ${worstKpi.name} (${worstKpi.value}) is ${worstKpi.status === 'critical' ? 'significantly' : 'slightly'} below target (${worstKpi.target}). This is an area that needs immediate attention to improve team performance.`
            });
    } else {
      insights.push({
        type: 'trend',
        icon: 'fas fa-chart-line',
        title: 'Performance Trend',
        content: 'All KPI metrics are currently meeting or exceeding targets. Continue to maintain this excellent level of performance.'
      });
    }
    
    // Common discussion topics insight
    if (sessions.length > 0) {
      // Analyze discussion topics from recent sessions
      const topicFrequency = {};
      const recentSessions = sessions.slice(0, 10); // Analyze last 10 sessions
      
      recentSessions.forEach(session => {
        // Check various text fields for common keywords
        const textFields = [
          session.preview || '',
          session.kpiStrengths || '',
          session.kpiChallenges || '',
          session.kpiActions || '',
          session.discussionHighlights || ''
        ];
        
        const combinedText = textFields.join(' ').toLowerCase();
        
        // Common topics to look for
        const topicsToAnalyze = [
          'call quality', 'answer rate', 'acw', 'talk time', 'staffing', 
          'training', 'development', 'performance', 'metrics', 'queue'
        ];
        
        topicsToAnalyze.forEach(topic => {
          if (combinedText.includes(topic)) {
            topicFrequency[topic] = (topicFrequency[topic] || 0) + 1;
          }
        });
      });
      
      // Find most common topics
      const sortedTopics = Object.entries(topicFrequency)
        .sort((a, b) => b[1] - a[1])
        .filter(([_, count]) => count > 1); // Only include topics mentioned multiple times
      
      if (sortedTopics.length > 0) {
        const topTopic = sortedTopics[0];
        const mentionPercentage = Math.round((topTopic[1] / recentSessions.length) * 100);
        
        insights.push({
          type: 'topics',
          icon: 'fas fa-comment-dots',
          title: 'Common Discussion Topics',
          content: `"${capitalizeFirstLetter(topTopic[0])}" was mentioned in ${mentionPercentage}% of your recent sessions. ${
            getTopicRecommendation(topTopic[0])
          }`
        });
      } else {
        insights.push({
          type: 'topics',
          icon: 'fas fa-comment-dots',
          title: 'Discussion Topics',
          content: 'No recurring themes detected in your recent sessions. Consider using consistent terminology to better track important topics over time.'
        });
      }
    }
    
    // Action item tracking insight
    const completedItems = actionItems.filter(item => item.completed).length;
    const openItems = actionItems.filter(item => !item.completed).length;
    const overdueItems = actionItems.filter(item => item.isOverdue).length;
    
    if (actionItems.length > 0) {
      const completionRate = Math.round((completedItems / actionItems.length) * 100);
      
      insights.push({
        type: 'tasks',
        icon: 'fas fa-tasks',
        title: 'Action Item Tracking',
        content: `${openItems} action items are still open${overdueItems > 0 ? `, with ${overdueItems} now overdue` : ''}. Your completion rate of ${completionRate}% ${
          completionRate > 75 ? 'is impressive' : 'could be improved'
        }. ${getActionItemRecommendation(completionRate, overdueItems)}`
      });
    }
    
    // KPI focus recommendation insight
    const criticalKpis = kpiMetrics.filter(kpi => kpi.status === 'critical');
    const warningKpis = kpiMetrics.filter(kpi => kpi.status === 'warning');
    
    if (criticalKpis.length > 0) {
      const criticalKpi = criticalKpis[0];
      insights.push({
        type: 'feedback',
        icon: 'fas fa-clipboard-check',
        title: 'Recommended Focus',
        content: `${criticalKpi.name} (${criticalKpi.value}) is significantly below target (${criticalKpi.target}). Focus on specific strategies to improve this metric in your next manager one-on-one.`
      });
    } else if (warningKpis.length > 0) {
      const warningKpi = warningKpis[0];
      insights.push({
        type: 'feedback',
        icon: 'fas fa-clipboard-check',
        title: 'Recommended Focus',
        content: `${warningKpi.name} (${warningKpi.value}) is slightly below target (${warningKpi.target}). Consider discussing strategies for improvement in your next session.`
      });
    } else {
      insights.push({
        type: 'feedback',
        icon: 'fas fa-clipboard-check',
        title: 'Continuous Improvement',
        content: 'All KPIs are meeting targets. Consider discussing innovative approaches to exceed current performance targets and improve team efficiency.'
      });
    }
    
    return insights;
  } catch (error) {
    logError('generateManagerInsights', error);
    return [
      {
        type: 'error',
        icon: 'fas fa-exclamation-circle',
        title: 'Insights Unavailable',
        content: 'Unable to generate insights due to insufficient data. Continue recording your manager one-on-ones to receive personalized recommendations.'
      }
    ];
  }
}

/**
 * 💡 Get recommendation for a specific topic
 * @param {String} topic - Topic to get recommendation for
 * @return {String} Recommendation text
 */
function getTopicRecommendation(topic) {
  switch (topic.toLowerCase()) {
    case 'call quality':
      return 'Consider creating a specialized training initiative focused on call quality best practices.';
    case 'acw':
    case 'after call work':
      return 'Creating an ACW reduction plan with specific targets could improve this metric.';
    case 'answer rate':
      return 'Analyzing peak call times and adjusting staffing accordingly may help improve answer rate.';
    case 'talk time':
      return 'Additional training on efficient call handling techniques could optimize talk time.';
    case 'staffing':
      return 'Developing a more flexible staffing model may address recurring staffing concerns.';
    case 'training':
      return 'Consider developing a structured training program to address this recurring topic.';
    case 'development':
      return 'Creating individual development plans for team members could be beneficial.';
    case 'performance':
      return 'Implementing more frequent coaching sessions may help address performance concerns.';
    case 'metrics':
      return 'Consider reviewing which metrics are most impactful for your team\'s success.';
    case 'queue':
      return 'Analyzing queue management strategies could lead to improved efficiency.';
    default:
      return 'Consider developing a focused initiative around this topic.';
  }
}

/**
 * 💡 Get recommendation for action items based on completion rate
 * @param {Number} completionRate - Action item completion rate
 * @param {Number} overdueItems - Number of overdue items
 * @return {String} Recommendation text
 */
function getActionItemRecommendation(completionRate, overdueItems) {
  if (overdueItems > 3) {
    return 'Focus on clearing overdue items before creating new commitments.';
  } else if (completionRate < 50) {
    return 'Consider scheduling dedicated time each week for completing action items.';
  } else if (completionRate < 75) {
    return 'Setting clearer deadlines and priorities may help improve completion rate.';
  } else {
    return 'Maintain this excellent level of follow-through on commitments.';
  }
}

/**
 * 📊 Get default KPI metrics
 * @return {Array} Default KPI metrics
 */
function getDefaultKPIMetrics() {
  return [
    {
      name: 'Calls Offered',
      icon: 'fas fa-phone',
      value: '5,287',
      target: '—',
      status: 'good',
      statusText: 'Good',
      percentage: 92
    },
    {
      name: 'Calls Accepted',
      icon: 'fas fa-phone-volume',
      value: '5,023',
      target: '—',
      status: 'good',
      statusText: 'Good',
      percentage: 94
    },
    {
      name: 'Answer Rate',
      icon: 'fas fa-percentage',
      value: '94.3%',
      target: '95%+',
      status: 'warning',
      statusText: 'Warning',
      percentage: 94.3
    },
    {
      name: 'Average Talk Time',
      icon: 'fas fa-clock',
      value: '16.8 min',
      target: '15-20 min',
      status: 'good',
      statusText: 'Good',
      percentage: 76
    },
    {
      name: 'ACW Percentage',
      icon: 'fas fa-stopwatch',
      value: '7.2 min',
      target: '5 min or less',
      status: 'critical',
      statusText: 'Critical',
      percentage: 65
    },
    {
      name: 'On Queue Percentage',
      icon: 'fas fa-headset',
      value: '68.4%',
      target: '65%+',
      status: 'good',
      statusText: 'Good',
      percentage: 68.4
    },
    {
      name: 'Off Queue Percentage',
      icon: 'fas fa-user-alt-slash',
      value: '31.6%',
      target: '—',
      status: 'good',
      statusText: 'Good',
      percentage: 31.6
    },
    {
      name: 'Interacting Time',
      icon: 'fas fa-users',
      value: '5.1 hrs (57%)',
      target: '4-6 hrs (≥50%)',
      status: 'good',
      statusText: 'Good',
      percentage: 85
    }
  ];
}

/**
 * 📝 Get meeting type title
 * @param {String} type - The meeting type
 * @return {String} Title for the meeting type
 */
function getMeetingTypeTitle(type) {
  switch (type) {
    case 'regular':
      return 'Regular Check-in with Manager';
    case 'kpi':
      return 'KPI Performance Review';
    case 'performance':
      return 'Performance Discussion';
    case 'project':
      return 'Project Update Meeting';
    case 'coaching':
      return 'Coaching Session';
    case 'other':
      return 'Meeting with Manager';
    default:
      return 'Meeting with Manager';
  }
}

/**
 * 📝 Get session preview text
 * @param {Object} session - Session data
 * @return {String} Preview text for the session
 */
function getManagerSessionPreview(session) {
  // Check for most relevant notes fields in order of importance
  const notesSources = [
    session['Discussion Highlights'],
    session['Meeting Objectives'],
    session['KPI Challenges'],
    session['KPI Strengths'],
    session['KPI Actions'],
    session['Org Updates'],
    session['High Performers'],
    session['Improvement Needed'],
    session['Staffing Issues']
  ];
  
  for (const source of notesSources) {
    if (source && source.trim()) {
      return truncateText(source, 200);
    }
  }
  
  return 'No detailed notes recorded for this session.';
}

/**
 * 🔡 Capitalize first letter of each word
 * @param {String} text - Text to capitalize
 * @return {String} Capitalized text
 */
function capitalizeFirstLetter(text) {
  if (!text) return '';
  return text.replace(/\b\w/g, letter => letter.toUpperCase());
}

/**
 * ✂️ Truncate text to a maximum length
 * @param {String} text - Text to truncate
 * @param {Number} maxLength - Maximum length
 * @return {String} Truncated text
 */
function truncateText(text, maxLength) {
  if (!text || text.length <= maxLength) {
    return text;
  }
  
  return text.substring(0, maxLength) + '...';
}

/**
 * 📅 Format date into short form (MMM D, YYYY)
 * @param {Date} date - Date to format
 * @return {String} Formatted date
 */
function formatShortDate(date) {
  if (!date) return '';
  
  try {
    const options = { month: 'short', day: 'numeric', year: 'numeric' };
    return date.toLocaleDateString('en-US', options);
  } catch (e) {
    return String(date);
  }
}

/**
 * 📅 Format month (MMM YYYY)
 * @param {Date} date - Date to format
 * @return {String} Formatted month
 */
function formatMonth(date) {
  if (!date) return '';
  
  try {
    const options = { month: 'short', year: 'numeric' };
    return date.toLocaleDateString('en-US', options);
  } catch (e) {
    return String(date);
  }
}

/**
 * 🔢 Format percentage value
 * @param {Number|String} value - Value to format
 * @return {String} Formatted percentage
 */
function formatPercentage(value) {
  if (value === undefined || value === null || value === '') return '0%';
  
  try {
    const numValue = parseFloat(value);
    return isNaN(numValue) ? '0%' : `${numValue.toFixed(1)}%`;
  } catch (e) {
    return String(value);
  }
}

/**
 * ⏱️ Format time value (minutes)
 * @param {Number|String} value - Value to format (minutes)
 * @return {String} Formatted time
 */
function formatTime(value) {
  if (value === undefined || value === null || value === '') return '0 min';
  
  try {
    const numValue = parseFloat(value);
    return isNaN(numValue) ? '0 min' : `${numValue.toFixed(1)} min`;
  } catch (e) {
    return String(value);
  }
}

/**
 * ⏱️ Format interacting time value
 * @param {Number|String} value - Value to format
 * @return {String} Formatted time
 */
function formatInteractingTime(value) {
  if (value === undefined || value === null || value === '') return '0 hrs (0%)';
  
  try {
    const numValue = parseFloat(value);
    if (isNaN(numValue)) return '0 hrs (0%)';
    
    // Assuming value is hours, calculate percentage (of 8-hour day)
    const percentage = Math.min(100, Math.round((numValue / 8) * 100));
    return `${numValue.toFixed(1)} hrs (${percentage}%)`;
  } catch (e) {
    return String(value);
  }
}

/**
 * 🧬 Convert header to camelCase
 * @param {String} header - Header text
 * @return {String} camelCase version
 */
function toCamelCase(header) {
  return header
    .split(' ')
    .map((word, index) => {
      if (index === 0) {
        return word.toLowerCase();
      }
      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
    })
    .join('');
}

/**
 * 🔢 Find nearest non-null value in array
 * @param {Array} array - Array to search
 * @param {Number} index - Index to start from
 * @return {Any} Nearest non-null value or null
 */
function findNearestValue(array, index) {
  // Check left side
  for (let i = index - 1; i >= 0; i--) {
    if (array[i] !== null) return array[i];
  }
  
  // Check right side
  for (let i = index + 1; i < array.length; i++) {
    if (array[i] !== null) return array[i];
  }
  
  return null;
}
/**
 * 🤝 Manager One-on-One Service
 * Handles data operations for manager one-on-one meetings and sessions
 */

/**
 * Get all manager one-on-one notes with optional filtering
 * @param {Object} filters - Optional filter criteria
 * @return {Object} Result with success status and notes data
 */
function getAllManagerOneOnOneNotes(filters = {}) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
    
    if (!sheet) {
      return { success: false, message: 'Manager One-on-One sheet not found', data: [] };
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    let notes = [];
    
    // Skip the header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Create note object with all columns
      const note = {};
      for (let j = 0; j < headers.length; j++) {
        note[headers[j]] = row[j];
      }
      
      // Apply filters if provided
      let includeNote = true;
      
      if (filters.startDate && new Date(note['Session Date']) < new Date(filters.startDate)) {
        includeNote = false;
      }
      
      if (filters.endDate && new Date(note['Session Date']) > new Date(filters.endDate)) {
        includeNote = false;
      }
      
      if (filters.managerName && note['Manager Name'] !== filters.managerName) {
        includeNote = false;
      }
      
      if (filters.searchTerm) {
        const searchRegex = new RegExp(filters.searchTerm, 'i');
        const searchableText = `${note['Manager Name']} ${note['Team Status Overview']} ${note['Leadership Priorities']}`;
        if (!searchRegex.test(searchableText)) {
          includeNote = false;
        }
      }
      
      // Add note if it passes all filters
      if (includeNote) {
        notes.push(note);
      }
    }
    
    // Sort notes by date (newest first) if no custom sort provided
    if (!filters.sortBy) {
      notes.sort((a, b) => new Date(b['Session Date']) - new Date(a['Session Date']));
    }
    
    return { success: true, data: notes };
  } catch (error) {
    logError('getAllManagerOneOnOneNotes', error);
    return { success: false, message: error.toString(), data: [] };
  }
}

/**
 * Get a specific manager one-on-one note by ID
 * @param {String} sessionId - The session ID to retrieve
 * @return {Object} Result with success status and note data
 */
function getManagerOneOnOneNoteById(sessionId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
    
    if (!sheet) {
      return { success: false, message: 'Manager One-on-One sheet not found' };
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find the session ID column index
    const sessionIdIndex = headers.indexOf('Session ID');
    if (sessionIdIndex === -1) {
      return { success: false, message: 'Session ID column not found' };
    }
    
    // Look for the session ID
    for (let i = 1; i < data.length; i++) {
      if (data[i][sessionIdIndex] === sessionId) {
        // Found the session, create a note object
        const note = {};
        for (let j = 0; j < headers.length; j++) {
          note[headers[j]] = data[i][j];
        }
        return { success: true, data: note };
      }
    }
    
    // Session not found
    return { success: false, message: 'Session not found' };
  } catch (error) {
    logError('getManagerOneOnOneNoteById', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * Save a manager one-on-one note (create new or update existing)
 * @param {Object} noteData - The note data to save
 * @return {Object} Result with success status and updated note
 */
function saveManagerOneOnOneNote(noteData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
    
    if (!sheet) {
      return { success: false, message: 'Manager One-on-One sheet not found' };
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const now = new Date();
    
    // Check if this is an existing note or a new one
    let existingRowIndex = -1;
    
    if (noteData.sessionId) {
      // Find the session ID column index
      const sessionIdIndex = headers.indexOf('Session ID');
      if (sessionIdIndex === -1) {
        return { success: false, message: 'Session ID column not found' };
      }
      
      // Look for existing session ID
      for (let i = 1; i < data.length; i++) {
        if (data[i][sessionIdIndex] === noteData.sessionId) {
          existingRowIndex = i;
          break;
        }
      }
    }
    
    if (existingRowIndex !== -1) {
      // Update existing note
      const rowIndex = existingRowIndex + 1; // +1 because sheets are 1-indexed
      
      // Update each field
      for (let j = 0; j < headers.length; j++) {
        const header = headers[j];
        if (header !== 'Session ID' && header !== 'Created Date') {
          if (header === 'Modified Date') {
            sheet.getRange(rowIndex, j + 1).setValue(now);
          } else if (header === 'Session Date' || header === 'Next Session Date') {
            sheet.getRange(rowIndex, j + 1).setValue(noteData[header] ? new Date(noteData[header]) : '');
          } else if (noteData[header] !== undefined) {
            sheet.getRange(rowIndex, j + 1).setValue(noteData[header]);
          }
        }
      }
      
      // Process action items if needed
      if (noteData.createActionItems) {
        processManagerOneOnOneActionItems(noteData);
      }
      
      return {
        success: true,
        message: 'Manager One-on-One note updated successfully',
        data: {
          ...noteData,
          modifiedDate: now
        }
      };
    } else {
      // Create new note
      const newSessionId = Utilities.getUuid();
      
      // Prepare row data
      const newRow = [];
      for (let j = 0; j < headers.length; j++) {
        const header = headers[j];
        if (header === 'Session ID') {
          newRow.push(newSessionId);
        } else if (header === 'Created Date' || header === 'Modified Date') {
          newRow.push(now);
        } else if (header === 'Session Date' || header === 'Next Session Date') {
          newRow.push(noteData[header] ? new Date(noteData[header]) : '');
        } else {
          newRow.push(noteData[header] || '');
        }
      }
      
      sheet.appendRow(newRow);
      
      // Process action items if needed
      if (noteData.createActionItems) {
        processManagerOneOnOneActionItems({
          ...noteData,
          sessionId: newSessionId
        });
      }
      
      return {
        success: true,
        message: 'Manager One-on-One note created successfully',
        data: {
          ...noteData,
          sessionId: newSessionId,
          createdDate: now,
          modifiedDate: now
        }
      };
    }
  } catch (error) {
    logError('saveManagerOneOnOneNote', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * Delete a manager one-on-one note
 * @param {String} sessionId - The session ID to delete
 * @return {Object} Result with success status
 */
function deleteManagerOneOnOneNote(sessionId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.MANAGER_ONE_ON_ONE);
    
    if (!sheet) {
      return { success: false, message: 'Manager One-on-One sheet not found' };
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find the session ID column index
    const sessionIdIndex = headers.indexOf('Session ID');
    if (sessionIdIndex === -1) {
      return { success: false, message: 'Session ID column not found' };
    }
    
    // Find the row to delete
    let rowToDelete = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][sessionIdIndex] === sessionId) {
        rowToDelete = i + 1; // +1 because sheets are 1-indexed
        break;
      }
    }
    
    if (rowToDelete === -1) {
      return { success: false, message: 'Session not found' };
    }
    
    // Delete the row
    sheet.deleteRow(rowToDelete);
    
    return { success: true, message: 'Manager One-on-One note deleted successfully' };
  } catch (error) {
    logError('deleteManagerOneOnOneNote', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * Process action items from a manager one-on-one note
 * @param {Object} noteData - The note data containing action items
 * @private
 */
function processManagerOneOnOneActionItems(noteData) {
  try {
    // Check for team lead commitments
    if (noteData['Team Lead Commitments']) {
      const commitments = noteData['Team Lead Commitments'].split(/\n+/);
      
      commitments.forEach(commitment => {
        if (commitment.trim()) {
          // Create action item
          const actionItemData = {
            title: commitment.trim().substring(0, 50) + (commitment.trim().length > 50 ? '...' : ''),
            description: commitment.trim(),
            status: 'Not Started',
            priority: 'High',
            dueDate: noteData['Next Session Date'] || new Date(new Date().setDate(new Date().getDate() + 14)),
            category: 'Manager One-on-One',
            source: `Manager One-on-One: ${noteData['Session Date']}`,
            assignees: Session.getActiveUser().getEmail(),
            sourceId: noteData.sessionId
          };
          
          // Call the action items service to create the item
          createActionItem(actionItemData);
        }
      });
    }
    
    // Check for manager commitments - these might be assigned to the manager
    if (noteData['Manager Commitments']) {
      const managerCommitments = noteData['Manager Commitments'].split(/\n+/);
      
      managerCommitments.forEach(commitment => {
        if (commitment.trim()) {
          // Create action item (assigned to manager)
          const actionItemData = {
            title: commitment.trim().substring(0, 50) + (commitment.trim().length > 50 ? '...' : ''),
            description: commitment.trim(),
            status: 'Not Started',
            priority: 'High',
            dueDate: noteData['Next Session Date'] || new Date(new Date().setDate(new Date().getDate() + 14)),
            category: 'Manager One-on-One',
            source: `Manager One-on-One: ${noteData['Session Date']}`,
            assignees: noteData['Manager Name'],
            sourceId: noteData.sessionId,
            notifyAssignee: true
          };
          
          // Call the action items service to create the item
          createActionItem(actionItemData);
        }
      });
    }
  } catch (error) {
    logError('processManagerOneOnOneActionItems', error);
  }
}

/**
 * Get manager one-on-one metrics for dashboard
 * @param {Object} filters - Optional filter criteria
 * @return {Object} Metrics data for dashboard
 */
function getManagerOneOnOneMetrics(filters = {}) {
  try {
    // Get all manager one-on-one sessions
    const notesResult = getAllManagerOneOnOneNotes(filters);
    
    if (!notesResult.success) {
      return { success: false, message: notesResult.message };
    }
    
    const notes = notesResult.data;
    
    // If no notes to analyze
    if (notes.length === 0) {
      return { 
        success: true, 
        data: {
          totalSessions: 0,
          averageTimeBetweenSessions: 0,
          sessionsByMonth: {},
          topPriorities: {},
          commitmentCompletion: { completed: 0, pending: 0, completion_rate: 0 }
        }
      };
    }
    
    // Calculate metrics
    const metrics = {
      // Overall metrics
      totalSessions: notes.length,
      averageTimeBetweenSessions: 0,
      
      // Time-based metrics
      sessionsByMonth: {},
      
      // Priority analysis
      topPriorities: {},
      
      // Commitment tracking
      commitmentCompletion: {
        completed: 0,
        pending: 0,
        completion_rate: 0
      }
    };
    
    // Sort notes by date
    const sortedNotes = [...notes].sort((a, b) => new Date(a['Session Date']) - new Date(b['Session Date']));
    
    // Calculate session intervals
    let totalIntervals = 0;
    let intervalCount = 0;
    
    for (let i = 1; i < sortedNotes.length; i++) {
      const prevDate = new Date(sortedNotes[i-1]['Session Date']);
      const currentDate = new Date(sortedNotes[i]['Session Date']);
      const daysBetween = (currentDate - prevDate) / (1000 * 60 * 60 * 24);
      
      totalIntervals += daysBetween;
      intervalCount++;
    }
    
    // Calculate average time between sessions
    metrics.averageTimeBetweenSessions = intervalCount > 0 ? 
      totalIntervals / intervalCount : 0;
    
    // Analyze sessions by month
    notes.forEach(note => {
      const sessionDate = new Date(note['Session Date']);
      const monthKey = `${sessionDate.getFullYear()}-${String(sessionDate.getMonth() + 1).padStart(2, '0')}`;
      metrics.sessionsByMonth[monthKey] = (metrics.sessionsByMonth[monthKey] || 0) + 1;
    });
    
    // Analyze leadership priorities
    notes.forEach(note => {
      if (note['Leadership Priorities']) {
        const priorities = note['Leadership Priorities'].split(/[,;]\s*/).map(p => p.trim());
        priorities.forEach(priority => {
          if (priority) {
            metrics.topPriorities[priority] = (metrics.topPriorities[priority] || 0) + 1;
          }
        });
      }
    });
    
    // Sort priorities by frequency
    metrics.topPriorities = Object.entries(metrics.topPriorities)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .reduce((obj, [key, value]) => {
        obj[key] = value;
        return obj;
      }, {});
    
    // Analyze commitment completion
    for (let i = 0; i < sortedNotes.length - 1; i++) {
      const currentNote = sortedNotes[i];
      const nextNote = sortedNotes[i+1];
      
      const currentCommitments = currentNote['Team Lead Commitments'] ? 
        currentNote['Team Lead Commitments'].split(/\n+/).filter(c => c.trim()).length : 0;
      
      if (currentCommitments > 0 && nextNote['Previous Action Items Progress']) {
        const progressText = nextNote['Previous Action Items Progress'].toLowerCase();
        
        // Simple heuristic: count "completed" or "done" items
        const completedMatches = progressText.match(/(completed|done|finished|resolved)/g);
        const completedCount = completedMatches ? completedMatches.length : 0;
        
        metrics.commitmentCompletion.completed += completedCount;
        metrics.commitmentCompletion.pending += (currentCommitments - completedCount);
      }
    }
    
    // Calculate completion rate
    const totalCommitments = metrics.commitmentCompletion.completed + metrics.commitmentCompletion.pending;
    metrics.commitmentCompletion.completion_rate = totalCommitments > 0 ? 
      metrics.commitmentCompletion.completed / totalCommitments : 0;
    
    return { 
      success: true, 
      data: metrics
    };
  } catch (error) {
    logError('getManagerOneOnOneMetrics', error);
    return { success: false, message: error.toString() };
  }
}






<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Note</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
      
      /* Note colors */
      --note-blue: #60a5fa;
      --note-green: #34d399;
      --note-yellow: #fbbf24;
      --note-orange: #fb923c;
      --note-red: #f87171;
      --note-purple: #a78bfa;
      --note-pink: #f472b6;
      --note-gray: #9ca3af;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      padding: 20px;
    }
    
    .header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 20px;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 20px;
      font-weight: 700;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .header-subtitle {
      color: var(--text-tertiary);
      font-size: 13px;
      margin-top: 4px;
    }
    
    .note-form {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 20px;
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    
    .form-section {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .form-group {
      margin-bottom: 16px;
    }
    
    .form-row {
      display: flex;
      gap: 16px;
      margin-bottom: 16px;
    }
    
    .form-col {
      flex: 1;
    }
    
    input[type="text"],
    input[type="date"],
    textarea,
    select {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      color: var(--text-primary);
      transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
    }
    
    input[type="text"]:focus,
    input[type="date"]:focus,
    textarea:focus,
    select:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    textarea {
      min-height: 200px;
      resize: vertical;
    }
    
    .input-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
    }
    
    .input-field {
      position: relative;
    }
    
    .input-icon + input {
      padding-left: 36px;
    }
    
    /* Tags input */
    .tags-input-container {
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      padding: 5px;
      display: flex;
      flex-wrap: wrap;
      gap: 5px;
      align-items: center;
    }
    
    .tags-input-container:focus-within {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .tag-item {
      background-color: var(--primary-light);
      color: white;
      padding: 5px 8px;
      border-radius: var(--radius-sm);
      display: flex;
      align-items: center;
      gap: 5px;
      font-size: 12px;
    }
    
    .tag-item .close {
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 16px;
      height: 16px;
      border-radius: 50%;
    }
    
    .tag-item .close:hover {
      background-color: rgba(255, 255, 255, 0.2);
    }
    
    .tags-input {
      flex: 1;
      min-width: 100px;
      border: none;
      outline: none;
      padding: 5px;
      font-size: 14px;
    }
    
    /* Color picker */
    .color-picker {
      display: flex;
      gap: 8px;
      margin-top: 8px;
    }
    
    .color-option {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      cursor: pointer;
      border: 2px solid transparent;
      transition: transform var(--transition-fast), border var(--transition-fast);
    }
    
    .color-option:hover {
      transform: scale(1.1);
    }
    
    .color-option.active {
      border-color: var(--text-primary);
      transform: scale(1.1);
    }
    
    .color-blue { background-color: var(--note-blue); }
    .color-green { background-color: var(--note-green); }
    .color-yellow { background-color: var(--note-yellow); }
    .color-orange { background-color: var(--note-orange); }
    .color-red { background-color: var(--note-red); }
    .color-purple { background-color: var(--note-purple); }
    .color-pink { background-color: var(--note-pink); }
    .color-gray { background-color: var(--note-gray); }
    
    /* Toggle switch */
    .toggle-container {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 40px;
      height: 20px;
    }
    
    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--border-medium);
      transition: var(--transition-fast);
      border-radius: 20px;
    }
    
    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 16px;
      width: 16px;
      left: 2px;
      bottom: 2px;
      background-color: white;
      transition: var(--transition-fast);
      border-radius: 50%;
    }
    
    input:checked + .toggle-slider {
      background-color: var(--primary-color);
    }
    
    input:checked + .toggle-slider:before {
      transform: translateX(20px);
    }
    
    .toggle-label {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    /* Action buttons */
    .action-buttons {
      display: flex;
      justify-content: space-between;
      margin-top: auto;
      padding-top: 20px;
      border-top: 1px solid var(--border-light);
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: var(--bg-secondary);
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-tertiary);
      border-color: var(--text-tertiary);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(251, 113, 133, 0.4);
    }
    
    .btn-group {
      display: flex;
      gap: 10px;
    }
    
    /* Toast notification */
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      box-shadow: var(--shadow-lg);
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      gap: 12px;
      transform: translateY(150%);
      transition: transform 0.3s ease;
      z-index: 1000;
    }
    
    .toast.show {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
      color: var(--text-primary);
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      cursor: pointer;
      color: var(--text-tertiary);
      padding: 4px;
    }
    
    /* Loading spinner */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: rgba(255, 255, 255, 0.8);
      z-index: 100;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary-color);
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    /* Tag suggestions */
    .tag-suggestions {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background-color: white;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      max-height: 150px;
      overflow-y: auto;
      z-index: 10;
      box-shadow: var(--shadow-md);
      display: none;
    }
    
    .tag-suggestions.show {
      display: block;
    }
    
    .tag-suggestion-item {
      padding: 8px 12px;
      cursor: pointer;
      transition: background-color var(--transition-fast);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .tag-suggestion-item:hover {
      background-color: var(--bg-secondary);
    }
    
    .tag-suggestion-color {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }
    
    /* Responsive adjustments */
    @media (max-width: 600px) {
      .form-row {
        flex-direction: column;
        gap: 12px;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div>
        <h1 class="header-title">
          <i class="fas fa-sticky-note"></i> 
          <span id="formTitle">Create Note</span>
        </h1>
        <div class="header-subtitle">
          Keep track of important information, tasks, and ideas
        </div>
      </div>
    </header>
    
    <form class="note-form" id="noteForm">
      <div class="form-section">
        <div class="form-group">
          <label class="form-label" for="noteTitle">Title</label>
          <div class="input-field">
            <i class="fas fa-heading input-icon"></i>
            <input type="text" id="noteTitle" name="title" placeholder="Enter a title for your note" required>
          </div>
        </div>
        
        <div class="form-group">
          <label class="form-label" for="noteContent">Note Content</label>
          <textarea id="noteContent" name="content" placeholder="Write your note here..."></textarea>
        </div>
        
        <div class="form-row">
          <div class="form-col">
            <label class="form-label" for="noteCategory">Category</label>
            <select id="noteCategory" name="category">
              <option value="General">General</option>
              <option value="Task">Task</option>
              <option value="Idea">Idea</option>
              <option value="Meeting">Meeting</option>
              <option value="Project">Project</option>
              <option value="Personal">Personal</option>
            </select>
          </div>
          
          <div class="form-col">
            <label class="form-label" for="notePriority">Priority</label>
            <select id="notePriority" name="priority">
              <option value="Low">Low</option>
              <option value="Medium" selected>Medium</option>
              <option value="High">High</option>
              <option value="Urgent">Urgent</option>
            </select>
          </div>
        </div>
        
        <div class="form-group">
          <label class="form-label">Tags</label>
          <div class="tags-input-container">
            <div id="tagsList">
              <!-- Tags will be added here dynamically -->
            </div>
            <input type="text" class="tags-input" id="tagInput" placeholder="Add tags..." autocomplete="off">
          </div>
          <div class="tag-suggestions" id="tagSuggestions">
            <!-- Tag suggestions will appear here -->
          </div>
        </div>
        
        <div class="form-group">
          <label class="form-label">Note Color</label>
          <div class="color-picker">
            <div class="color-option color-blue active" data-color="blue"></div>
            <div class="color-option color-green" data-color="green"></div>
            <div class="color-option color-yellow" data-color="yellow"></div>
            <div class="color-option color-orange" data-color="orange"></div>
            <div class="color-option color-red" data-color="red"></div>
            <div class="color-option color-purple" data-color="purple"></div>
            <div class="color-option color-pink" data-color="pink"></div>
            <div class="color-option color-gray" data-color="gray"></div>
          </div>
          <input type="hidden" id="noteColor" name="color" value="blue">
        </div>
      </div>
      
      <div class="form-section">
        <div class="form-group">
          <div class="toggle-container">
            <label class="toggle-switch">
              <input type="checkbox" id="pinToggle" name="pinned">
              <span class="toggle-slider"></span>
            </label>
            <div class="toggle-label">Pin this note</div>
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-col">
            <div class="form-group">
              <label class="form-label" for="noteDueDate">Due Date (Optional)</label>
              <input type="date" id="noteDueDate" name="dueDate">
            </div>
          </div>
          
          <div class="form-col">
            <div class="form-group">
              <div class="toggle-container">
                <label class="toggle-switch">
                  <input type="checkbox" id="reminderToggle" name="reminderSet">
                  <span class="toggle-slider"></span>
                </label>
                <div class="toggle-label">Add to calendar as reminder</div>
              </div>
              <div style="font-size: 11px; color: var(--text-tertiary); margin-top: 5px; margin-left: 48px;">
                Will add an event to your Google Calendar
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Hidden inputs for editing mode -->
      <input type="hidden" id="noteId" name="id" value="">
      <input type="hidden" id="calendarEventId" name="calendarEventId" value="">
      <input type="hidden" id="calendarEventLink" name="calendarEventLink" value="">
      <input type="hidden" id="noteStatus" name="status" value="Active">
      
      <div class="action-buttons">
        <div class="btn-group">
          <button type="button" class="btn btn-secondary" id="cancelBtn">
            <i class="fas fa-times"></i> Cancel
          </button>
        </div>
        
        <div class="btn-group">
          <button type="button" class="btn btn-danger" id="deleteBtn" style="display: none;">
            <i class="fas fa-trash"></i> Delete
          </button>
          <button type="submit" class="btn btn-primary" id="saveBtn">
            <i class="fas fa-save"></i> Save Note
          </button>
        </div>
      </div>
    </form>
    
    <!-- Toast notification -->
    <div class="toast" id="toast">
      <div class="toast-icon success">
        <i class="fas fa-check-circle"></i>
      </div>
      <div class="toast-content">
        <div class="toast-title">Success!</div>
        <div class="toast-message">Your note has been saved.</div>
      </div>
      <div class="toast-close" onclick="hideToast()">
        <i class="fas fa-times"></i>
      </div>
    </div>
    
    <!-- Loading overlay -->
    <div class="loading-overlay" id="loadingOverlay">
      <div class="spinner"></div>
    </div>
  </div>
  
  <script>
    // Global variables
    let selectedTags = [];
    let availableTags = [];
    let isEditMode = false;
    
    // Initialize form when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
      setupEventListeners();
      loadFormData();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Form submission
      document.getElementById('noteForm').addEventListener('submit', handleFormSubmit);
      
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', handleCancel);
      
      // Delete button
      document.getElementById('deleteBtn').addEventListener('click', handleDelete);
      
      // Tags input
      document.getElementById('tagInput').addEventListener('keydown', handleTagInput);
      document.getElementById('tagInput').addEventListener('input', handleTagSearch);
      
      // Color picker
      const colorOptions = document.querySelectorAll('.color-option');
      colorOptions.forEach(option => {
        option.addEventListener('click', function() {
          selectColor(this.getAttribute('data-color'));
        });
      });
      
      // Due date and reminder toggle relationship
      document.getElementById('noteDueDate').addEventListener('change', function() {
        if (this.value) {
          document.getElementById('reminderToggle').disabled = false;
        } else {
          document.getElementById('reminderToggle').checked = false;
          document.getElementById('reminderToggle').disabled = true;
        }
      });
      
      // Document click event for closing tag suggestions
      document.addEventListener('click', function(e) {
        if (!e.target.closest('#tagInput') && !e.target.closest('#tagSuggestions')) {
          document.getElementById('tagSuggestions').classList.remove('show');
        }
      });
    }
    
    // Load form data when editing a note
    function loadFormData() {
      try {
        // Load available tags first
        google.script.run
          .withSuccessHandler(function(tags) {
            availableTags = tags || [];
          })
          .withFailureHandler(handleError)
          .getAvailableTags();
        
        // Check if we're editing an existing note
        google.script.run
          .withSuccessHandler(function(noteData) {
            if (noteData && noteData.id) {
              populateFormFields(noteData);
            }
          })
          .withFailureHandler(handleError)
          .getNoteToEdit();
      } catch (e) {
        console.log('Creating new note');
      }
    }
    
    // Populate form fields with note data for editing
    function populateFormFields(noteData) {
      // Set form to edit mode
      isEditMode = true;
      
      // Update form title
      document.getElementById('formTitle').textContent = 'Edit Note';
      
      // Fill in basic fields
      document.getElementById('noteId').value = noteData.id || '';
      document.getElementById('noteTitle').value = noteData.title || '';
      document.getElementById('noteContent').value = noteData.content || '';
      document.getElementById('noteCategory').value = noteData.category || 'General';
      document.getElementById('notePriority').value = noteData.priority || 'Medium';
      
      // Tags
      if (noteData.tags) {
        const tags = typeof noteData.tags === 'string' ? 
          noteData.tags.split(',').map(tag => tag.trim()) : 
          noteData.tags;
          
        selectedTags = tags;
        renderTags();
      }
      
      // Color
      if (noteData.color) {
        selectColor(noteData.color);
      }
      
      // Pinned status
      document.getElementById('pinToggle').checked = noteData.pinned === true || noteData.pinned === 'true';
      
      // Due date
      if (noteData.dueDate) {
        document.getElementById('noteDueDate').value = formatDateForInput(new Date(noteData.dueDate));
      }
      
      // Reminder toggle
      document.getElementById('reminderToggle').checked = noteData.reminderSet === true || noteData.reminderSet === 'true';
      
      // Calendar event details
      document.getElementById('calendarEventId').value = noteData.calendarEventId || '';
      document.getElementById('calendarEventLink').value = noteData.calendarEventLink || '';
      
      // Status
      document.getElementById('noteStatus').value = noteData.status || 'Active';
      
      // Show delete button in edit mode
      document.getElementById('deleteBtn').style.display = 'flex';
    }
    
    // Handle form submission
    function handleFormSubmit(e) {
      e.preventDefault();
      
      // Show loading overlay
      showLoading();
      
      // Collect form data
      const formData = new FormData(document.getElementById('noteForm'));
      
      // Add tags to form data (they're stored as hidden input)
      formData.append('tags', selectedTags.join(','));
      
      // Convert FormData to object
      const noteData = {};
      formData.forEach((value, key) => {
        noteData[key] = value;
      });
      
      // Save note
      google.script.run
        .withSuccessHandler(handleSaveSuccess)
        .withFailureHandler(handleSaveError)
        .saveGeneralNote(noteData);
    }
    
    // Handle successful save
    function handleSaveSuccess(result) {
      hideLoading();
      
      if (result.success) {
        showToast('Success!', 'Your note has been saved.', 'success');
        
        // Close form after a short delay
        setTimeout(function() {
          google.script.host.close();
        }, 1500);
      } else {
        showToast('Error', result.message || 'Failed to save note.', 'error');
      }
    }
    
    // Handle save error
    function handleSaveError(error) {
      hideLoading();
      showToast('Error', 'Failed to save note: ' + error.message, 'error');
    }
    
    // Handle general error
    function handleError(error) {
      console.error('Error:', error);
    }
    
    // Handle cancel button
    function handleCancel() {
      if (confirm('Are you sure you want to cancel? Any unsaved changes will be lost.')) {
        google.script.host.close();
      }
    }
    
    // Handle delete button
    function handleDelete() {
      const noteId = document.getElementById('noteId').value;
      
      if (!noteId) return;
      
      if (confirm('Are you sure you want to delete this note? This action cannot be undone.')) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(function(result) {
            hideLoading();
            
            if (result.success) {
              showToast('Deleted!', 'Your note has been deleted.', 'success');
              
              // Close form after a short delay
              setTimeout(function() {
                google.script.host.close();
              }, 1500);
            } else {
              showToast('Error', result.message || 'Failed to delete note.', 'error');
            }
          })
          .withFailureHandler(function(error) {
            hideLoading();
            showToast('Error', 'Failed to delete note: ' + error.message, 'error');
          })
          .deleteGeneralNote(noteId);
      }
    }
    
    // Handle tag input
    function handleTagInput(e) {
      if (e.key === 'Enter' || e.key === ',') {
        e.preventDefault();
        
        const input = document.getElementById('tagInput');
        const tag = input.value.trim();
        
        if (tag && !selectedTags.includes(tag)) {
          selectedTags.push(tag);
          renderTags();
        }
        
        input.value = '';
        document.getElementById('tagSuggestions').classList.remove('show');
      }
    }
    
    // Handle tag search for suggestions
    function handleTagSearch() {
      const input = document.getElementById('tagInput');
      const query = input.value.trim().toLowerCase();
      
      if (!query) {
        document.getElementById('tagSuggestions').classList.remove('show');
        return;
      }
      
      // Filter available tags
      const filteredTags = availableTags.filter(tag => 
        tag.name.toLowerCase().includes(query) && !selectedTags.includes(tag.name)
      );
      
      if (filteredTags.length > 0) {
        renderTagSuggestions(filteredTags);
      } else {
        document.getElementById('tagSuggestions').classList.remove('show');
      }
    }
    
    // Render tag suggestions
    function renderTagSuggestions(tags) {
      const suggestions = document.getElementById('tagSuggestions');
      suggestions.innerHTML = '';
      
      tags.slice(0, 5).forEach(tag => {
        const suggestion = document.createElement('div');
        suggestion.className = 'tag-suggestion-item';
        
        const colorSpan = document.createElement('span');
        colorSpan.className = 'tag-suggestion-color';
        colorSpan.style.backgroundColor = tag.color || '#9ca3af';
        
        suggestion.appendChild(colorSpan);
        suggestion.appendChild(document.createTextNode(tag.name));
        
        suggestion.addEventListener('click', function() {
          if (!selectedTags.includes(tag.name)) {
            selectedTags.push(tag.name);
            renderTags();
          }
          
          document.getElementById('tagInput').value = '';
          document.getElementById('tagSuggestions').classList.remove('show');
        });
        
        suggestions.appendChild(suggestion);
      });
      
      suggestions.classList.add('show');
    }
    
    // Render selected tags
    function renderTags() {
      const tagsList = document.getElementById('tagsList');
      tagsList.innerHTML = '';
      
      selectedTags.forEach(tag => {
        const tagElement = document.createElement('div');
        tagElement.className = 'tag-item';
        tagElement.innerHTML = `
          ${tag}
          <span class="close" data-tag="${tag}">×</span>
        `;
        
        tagsList.appendChild(tagElement);
        
        // Add click event to remove tag
        const closeBtn = tagElement.querySelector('.close');
        closeBtn.addEventListener('click', function() {
          const tagToRemove = this.getAttribute('data-tag');
          selectedTags = selectedTags.filter(t => t !== tagToRemove);
          renderTags();
        });
      });
    }
    
    // Select color
    function selectColor(color) {
      // Update hidden input
      document.getElementById('noteColor').value = color;
      
      // Update active class
      const colorOptions = document.querySelectorAll('.color-option');
      colorOptions.forEach(option => {
        option.classList.toggle('active', option.getAttribute('data-color') === color);
      });
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('show');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('show');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const iconElement = toast.querySelector('.toast-icon');
      
      // Set toast type
      iconElement.className = 'toast-icon ' + type;
      
      // Set icon
      const iconI = iconElement.querySelector('i');
      iconI.className = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle';
      
      // Set content
      toast.querySelector('.toast-title').textContent = title;
      toast.querySelector('.toast-message').textContent = message;
      
      // Show toast
      toast.classList.add('show');
      
      // Auto hide after 5 seconds
      setTimeout(function() {
        hideToast();
      }, 5000);
    }
    
    // Hide toast notification
    function hideToast() {
      document.getElementById('toast').classList.remove('show');
    }
    
    // Format date for input fields (YYYY-MM-DD)
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }
  </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Notes</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
      
      /* Note colors */
      --note-blue: #60a5fa;
      --note-green: #34d399;
      --note-yellow: #fbbf24;
      --note-orange: #fb923c;
      --note-red: #f87171;
      --note-purple: #a78bfa;
      --note-pink: #f472b6;
      --note-gray: #9ca3af;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 16px 24px;
      box-shadow: var(--shadow-md);
    }
    
    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 20px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .header-subtitle {
      font-size: 13px;
      opacity: 0.9;
      margin-top: 4px;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .layout-container {
      display: flex;
      flex: 1;
      min-height: 0; /* Important for nested scroll containers */
    }
    
    .sidebar {
      width: 240px;
      background-color: white;
      border-right: 1px solid var(--border-light);
      display: flex;
      flex-direction: column;
      flex-shrink: 0;
    }
    
    .sidebar-header {
      padding: 16px;
      border-bottom: 1px solid var(--border-light);
    }
    
    .search-box {
      position: relative;
      display: flex;
      align-items: center;
    }
    
    .search-icon {
      position: absolute;
      left: 12px;
      color: var(--text-tertiary);
    }
    
    .search-input {
      width: 100%;
      padding: 8px 8px 8px 36px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 13px;
    }
    
    .search-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .sidebar-content {
      padding: 16px;
      overflow-y: auto;
      flex: 1;
    }
    
    .sidebar-section {
      margin-bottom: 24px;
    }
    
    .sidebar-title {
      font-weight: 600;
      font-size: 13px;
      text-transform: uppercase;
      color: var(--text-tertiary);
      margin-bottom: 8px;
      letter-spacing: 0.5px;
    }
    
    .nav-list {
      list-style: none;
    }
    
    .nav-item {
      margin-bottom: 4px;
    }
    
    .nav-link {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 12px;
      border-radius: var(--radius-md);
      color: var(--text-secondary);
      text-decoration: none;
      transition: all var(--transition-fast);
      cursor: pointer;
    }
    
    .nav-link:hover {
      background-color: var(--bg-secondary);
      color: var(--primary-color);
    }
    
    .nav-link.active {
      background-color: var(--primary-light);
      color: white;
    }
    
    .nav-link-icon {
      font-size: 16px;
      width: 20px;
      text-align: center;
    }
    
    .nav-link-text {
      flex: 1;
      font-size: 13px;
    }
    
    .nav-link-count {
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      font-size: 12px;
      border-radius: 10px;
      padding: 2px 8px;
      font-weight: 500;
      transition: all var(--transition-fast);
    }
    
    .nav-link:hover .nav-link-count {
      background-color: var(--primary-light);
      color: white;
    }
    
    .nav-link.active .nav-link-count {
      background-color: white;
      color: var(--primary-color);
    }
    
    .tag-list {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }
    
    .tag-item {
      display: flex;
      align-items: center;
      padding: 4px 8px;
      border-radius: var(--radius-md);
      font-size: 13px;
      color: var(--text-secondary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .tag-item:hover {
      background-color: var(--bg-secondary);
    }
    
    .tag-color {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 8px;
      flex-shrink: 0;
    }
    
    .tag-name {
      flex: 1;
    }
    
    .tag-count {
      color: var(--text-tertiary);
      font-size: 12px;
    }
    
    .main-content {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    
    .toolbar {
      padding: 12px 16px;
      background-color: white;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .view-options {
      display: flex;
      gap: 8px;
    }
    
    .view-button {
      padding: 6px 12px;
      border-radius: var(--radius-md);
      background-color: var(--bg-secondary);
      border: none;
      color: var(--text-secondary);
      font-size: 13px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .view-button:hover {
      background-color: var(--bg-tertiary);
    }
    
    .view-button.active {
      background-color: var(--primary-light);
      color: white;
    }
    
    .filter-options {
      display: flex;
      gap: 8px;
    }
    
    .filter-select {
      padding: 6px 32px 6px 12px;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-medium);
      font-size: 13px;
      background-color: white;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%2364748b' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 8px center;
      background-size: 12px;
      appearance: none;
      -webkit-appearance: none;
      cursor: pointer;
    }
    
    .filter-select:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .notes-container {
      padding: 16px;
      overflow-y: auto;
      flex: 1;
    }
    
    .notes-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
      gap: 16px;
    }
    
    .notes-list {
      display: flex;
      flex-direction: column;
      gap: 12px;
    }
    
    .note-card {
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-sm);
      transition: all var(--transition-normal);
      cursor: pointer;
      position: relative;
      border-top: 4px solid var(--note-blue);
    }
    
    .note-card:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .note-card.blue { border-top-color: var(--note-blue); }
    .note-card.green { border-top-color: var(--note-green); }
    .note-card.yellow { border-top-color: var(--note-yellow); }
    .note-card.orange { border-top-color: var(--note-orange); }
    .note-card.red { border-top-color: var(--note-red); }
    .note-card.purple { border-top-color: var(--note-purple); }
    .note-card.pink { border-top-color: var(--note-pink); }
    .note-card.gray { border-top-color: var(--note-gray); }
    
    .note-pin {
      position: absolute;
      top: 12px;
      right: 12px;
      font-size: 16px;
      color: var(--text-tertiary);
    }
    
    .note-content {
      padding: 16px;
    }
    
    .note-title {
      font-weight: 600;
      font-size: 16px;
      margin-bottom: 6px;
      color: var(--text-primary);
      word-break: break-word;
    }
    
    .note-preview {
      font-size: 13px;
      color: var(--text-secondary);
      margin-bottom: 12px;
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
      word-break: break-word;
    }
    
    .note-footer {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 12px 16px;
      background-color: var(--bg-secondary);
      border-bottom-left-radius: var(--radius-md);
      border-bottom-right-radius: var(--radius-md);
      font-size: 12px;
    }
    
    .note-meta {
      display: flex;
      align-items: center;
      gap: 12px;
      color: var(--text-tertiary);
    }
    
    .note-date, .note-category {
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .note-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 4px;
      margin-top: 12px;
    }
    
    .note-tag {
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      border-radius: var(--radius-sm);
      padding: 2px 6px;
      font-size: 11px;
      font-weight: 500;
    }
    
    .note-list-item {
      display: flex;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-sm);
      transition: all var(--transition-normal);
      cursor: pointer;
      overflow: hidden;
      border-left: 4px solid var(--note-blue);
    }
    
    .note-list-item:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-1px);
    }
    
    .note-list-item.blue { border-left-color: var(--note-blue); }
    .note-list-item.green { border-left-color: var(--note-green); }
    .note-list-item.yellow { border-left-color: var(--note-yellow); }
    .note-list-item.orange { border-left-color: var(--note-orange); }
    .note-list-item.red { border-left-color: var(--note-red); }
    .note-list-item.purple { border-left-color: var(--note-purple); }
    .note-list-item.pink { border-left-color: var(--note-pink); }
    .note-list-item.gray { border-left-color: var(--note-gray); }
    
    .note-list-content {
      flex: 1;
      padding: 12px 16px;
      min-width: 0; /* Allow text truncation to work */
    }
    
    .note-list-title {
      font-weight: 600;
      font-size: 15px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 4px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .note-list-preview {
      font-size: 13px;
      color: var(--text-secondary);
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    .note-list-meta {
      display: flex;
      align-items: center;
      padding: 12px 16px;
      background-color: var(--bg-secondary);
      font-size: 12px;
      color: var(--text-tertiary);
      gap: 16px;
      white-space: nowrap;
    }
    
    .note-list-date, .note-list-category {
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .priority-badge {
      height: 6px;
      width: 6px;
      border-radius: 50%;
      background-color: var(--note-gray);
      margin-right: 8px;
    }
    
    .priority-badge.low { background-color: var(--note-blue); }
    .priority-badge.medium { background-color: var(--note-green); }
    .priority-badge.high { background-color: var(--note-orange); }
    .priority-badge.urgent { background-color: var(--note-red); }
    
    /* Empty state */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 80px 20px;
      color: var(--text-tertiary);
      text-align: center;
    }
    
    .empty-icon {
      font-size: 48px;
      margin-bottom: 16px;
      opacity: 0.5;
    }
    
    .empty-title {
      font-family: 'Manrope', sans-serif;
      font-weight: 600;
      font-size: 18px;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .empty-description {
      font-size: 14px;
      max-width: 400px;
      margin: 0 auto;
      line-height: 1.6;
    }
    
    .empty-button {
      margin-top: 20px;
      padding: 10px 16px;
      background: var(--primary-gradient);
      color: white;
      border: none;
      border-radius: var(--radius-md);
      font-weight: 500;
      cursor: pointer;
      box-shadow: var(--shadow-sm);
      transition: all var(--transition-fast);
    }
    
    .empty-button:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    /* Loading spinner */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: rgba(255, 255, 255, 0.8);
      z-index: 100;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary-color);
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    /* Note detail modal */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(15, 23, 42, 0.5);
      backdrop-filter: blur(5px);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .modal-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .modal-container {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      width: 90%;
      max-width: 600px;
      max-height: 90vh;
      display: flex;
      flex-direction: column;
      transform: translateY(20px);
      transition: transform var(--transition-normal);
      overflow: hidden;
    }
    
    .modal-overlay.show .modal-container {
      transform: translateY(0);
    }
    
    .modal-header {
      padding: 20px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .modal-title {
      font-family: 'Manrope', sans-serif;
      font-weight: 700;
      font-size: 18px;
    }
    
    .modal-close {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background-color: var(--bg-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: background-color var(--transition-fast);
    }
    
    .modal-close:hover {
      background-color: var(--bg-tertiary);
    }
    
    .modal-body {
      padding: 20px;
      overflow-y: auto;
      flex: 1;
    }
    
    .modal-note-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 24px;
    }
    
    .modal-note-title {
      font-size: 24px;
      font-weight: 700;
      color: var(--text-primary);
      word-break: break-word;
      padding-right: 40px;
    }
    
        .modal-note-title {
      font-size: 24px;
      font-weight: 700;
      color: var(--text-primary);
      word-break: break-word;
      padding-right: 40px;
    }
    
    .modal-note-meta {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      margin-bottom: 24px;
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    .modal-note-meta-item {
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .modal-note-content {
      font-size: 15px;
      line-height: 1.6;
      color: var(--text-secondary);
      white-space: pre-wrap;
      word-break: break-word;
      margin-bottom: 24px;
    }
    
    .modal-note-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-bottom: 24px;
    }
    
    .modal-note-tag {
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      border-radius: var(--radius-md);
      padding: 4px 10px;
      font-size: 12px;
      font-weight: 500;
    }
    
    .modal-footer {
      padding: 16px 20px;
      border-top: 1px solid var(--border-light);
      display: flex;
      justify-content: space-between;
      background-color: var(--bg-secondary);
    }
    
    .modal-actions {
      display: flex;
      gap: 8px;
    }
    
    .modal-button {
      padding: 8px 16px;
      border-radius: var(--radius-md);
      font-size: 13px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      border: none;
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .modal-button-primary {
      background: var(--primary-gradient);
      color: white;
    }
    
    .modal-button-primary:hover {
      box-shadow: 0 4px 6px rgba(85, 64, 175, 0.25);
    }
    
    .modal-button-secondary {
      background-color: white;
      border: 1px solid var(--border-medium);
      color: var(--text-secondary);
    }
    
    .modal-button-secondary:hover {
      background-color: var(--bg-tertiary);
    }
    
    .modal-button-danger {
      background: var(--accent-gradient);
      color: white;
    }
    
    .modal-button-danger:hover {
      box-shadow: 0 4px 6px rgba(251, 113, 133, 0.25);
    }
    
    /* Toast notification */
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      box-shadow: var(--shadow-lg);
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      gap: 12px;
      transform: translateY(150%);
      transition: transform 0.3s ease;
      z-index: 1000;
    }
    
    .toast.show {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
      color: var(--text-primary);
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      cursor: pointer;
      color: var(--text-tertiary);
      padding: 4px;
    }
    
    /* Responsive styles */
    @media (max-width: 900px) {
      .sidebar {
        width: 200px;
      }
    }
    
    @media (max-width: 768px) {
      .sidebar {
        display: none;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="header">
      <div class="header-content">
        <div>
          <div class="header-title">
            <i class="fas fa-sticky-note"></i> My Notes
          </div>
          <div class="header-subtitle">
            Organize your thoughts, tasks, and important information
          </div>
        </div>
        <div class="header-actions">
          <button class="view-button" id="newNoteBtn">
            <i class="fas fa-plus"></i> New Note
          </button>
        </div>
      </div>
    </div>
    
    <div class="layout-container">
      <div class="sidebar">
        <div class="sidebar-header">
          <div class="search-box">
            <i class="fas fa-search search-icon"></i>
            <input type="text" class="search-input" id="searchInput" placeholder="Search notes...">
          </div>
        </div>
        
        <div class="sidebar-content">
          <div class="sidebar-section">
            <div class="sidebar-title">Views</div>
            <ul class="nav-list">
              <li class="nav-item">
                <div class="nav-link active" data-filter="all">
                  <div class="nav-link-icon"><i class="fas fa-th-large"></i></div>
                  <div class="nav-link-text">All Notes</div>
                  <div class="nav-link-count" id="allNotesCount">0</div>
                </div>
              </li>
              <li class="nav-item">
                <div class="nav-link" data-filter="pinned">
                  <div class="nav-link-icon"><i class="fas fa-thumbtack"></i></div>
                  <div class="nav-link-text">Pinned</div>
                  <div class="nav-link-count" id="pinnedCount">0</div>
                </div>
              </li>
              <li class="nav-item">
                <div class="nav-link" data-filter="recent">
                  <div class="nav-link-icon"><i class="fas fa-clock"></i></div>
                  <div class="nav-link-text">Recent</div>
                  <div class="nav-link-count" id="recentCount">0</div>
                </div>
              </li>
              <li class="nav-item">
                <div class="nav-link" data-filter="today">
                  <div class="nav-link-icon"><i class="fas fa-calendar-day"></i></div>
                  <div class="nav-link-text">Due Today</div>
                  <div class="nav-link-count" id="todayCount">0</div>
                </div>
              </li>
              <li class="nav-item">
                <div class="nav-link" data-filter="upcoming">
                  <div class="nav-link-icon"><i class="fas fa-calendar"></i></div>
                  <div class="nav-link-text">Upcoming</div>
                  <div class="nav-link-count" id="upcomingCount">0</div>
                </div>
              </li>
            </ul>
          </div>
          
          <div class="sidebar-section">
            <div class="sidebar-title">Categories</div>
            <ul class="nav-list" id="categoriesList">
              <!-- Categories will be loaded dynamically -->
              <li class="nav-item">
                <div class="nav-link" data-filter="category:General">
                  <div class="nav-link-icon"><i class="fas fa-sticky-note"></i></div>
                  <div class="nav-link-text">General</div>
                  <div class="nav-link-count">0</div>
                </div>
              </li>
            </ul>
          </div>
          
          <div class="sidebar-section">
            <div class="sidebar-title">Tags</div>
            <div class="tag-list" id="tagsList">
              <!-- Tags will be loaded dynamically -->
            </div>
          </div>
        </div>
      </div>
      
      <div class="main-content">
        <div class="toolbar">
          <div class="view-options">
            <button class="view-button active" id="gridViewBtn">
              <i class="fas fa-th-large"></i> Grid
            </button>
            <button class="view-button" id="listViewBtn">
              <i class="fas fa-list"></i> List
            </button>
          </div>
          
          <div class="filter-options">
            <select class="filter-select" id="sortSelect">
              <option value="modified:desc">Last Modified</option>
              <option value="created:desc">Date Created</option>
              <option value="dueDate:asc">Due Date</option>
              <option value="title:asc">Title (A-Z)</option>
              <option value="title:desc">Title (Z-A)</option>
            </select>
            <select class="filter-select" id="prioritySelect">
              <option value="all">All Priorities</option>
              <option value="Low">Low</option>
              <option value="Medium">Medium</option>
              <option value="High">High</option>
              <option value="Urgent">Urgent</option>
            </select>
          </div>
        </div>
        
        <div class="notes-container">
          <div class="notes-grid" id="notesGrid">
            <!-- Notes will be loaded dynamically -->
          </div>
          
          <div class="notes-list" id="notesList" style="display:none;">
            <!-- Notes will be loaded dynamically in list view -->
          </div>
          
          <!-- Empty state (shown when no notes) -->
          <div class="empty-state" id="emptyState" style="display:none;">
            <div class="empty-icon">
              <i class="fas fa-sticky-note"></i>
            </div>
            <h3 class="empty-title">No notes found</h3>
            <p class="empty-description">
              You haven't created any notes yet. Start capturing your thoughts, tasks, and important information.
            </p>
            <button class="empty-button" id="emptyStateBtn">
              <i class="fas fa-plus"></i> Create Your First Note
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Note detail modal -->
  <div class="modal-overlay" id="noteDetailModal">
    <div class="modal-container">
      <div class="modal-header">
        <div class="modal-title">Note Details</div>
        <div class="modal-close" id="closeModal">
          <i class="fas fa-times"></i>
        </div>
      </div>
      <div class="modal-body" id="modalContent">
        <!-- Note details will be loaded here -->
      </div>
      <div class="modal-footer">
        <div class="modal-info">
          <span id="modalCreatedDate"></span>
        </div>
        <div class="modal-actions">
          <button class="modal-button modal-button-secondary" id="modalEditBtn">
            <i class="fas fa-edit"></i> Edit
          </button>
          <button class="modal-button modal-button-danger" id="modalDeleteBtn">
            <i class="fas fa-trash"></i> Delete
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="spinner"></div>
  </div>
  
  <!-- Toast notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Note has been successfully updated.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let allNotes = [];
    let filteredNotes = [];
    let currentFilter = 'all';
    let currentView = 'grid';
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
      // Show loading
      showLoading();
      
      // Load notes data
      loadNotes();
      
      // Set up event listeners
      setupEventListeners();
    });
    
    // Load notes from server
    function loadNotes() {
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            allNotes = result.notes || [];
            
            // Populate categories and tags
            populateCategories(result.categories || []);
            populateTags(result.tags || []);
            
            // Apply initial filters and update the view
            applyFilters();
          } else {
            console.error('Failed to load notes:', result.message);
            showToast('Error', result.message || 'Failed to load notes', 'error');
            showEmptyState('Failed to load notes. Please try again.');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading notes:', error);
          showToast('Error', 'Failed to load notes', 'error');
          showEmptyState('Error loading notes. Please try again.');
        })
        .getGeneralNotes();
    }
    
    // Set up event listeners
    function setupEventListeners() {
      // New note button
      document.getElementById('newNoteBtn').addEventListener('click', createNewNote);
      document.getElementById('emptyStateBtn').addEventListener('click', createNewNote);
      
      // View options
      document.getElementById('gridViewBtn').addEventListener('click', function() {
        switchView('grid');
      });
      
      document.getElementById('listViewBtn').addEventListener('click', function() {
        switchView('list');
      });
      
      // Filter options
      document.getElementById('sortSelect').addEventListener('change', applyFilters);
      document.getElementById('prioritySelect').addEventListener('change', applyFilters);
      
      // Search
      document.getElementById('searchInput').addEventListener('input', debounce(applyFilters, 300));
      
      // Sidebar filters
      document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', function() {
          const filter = this.getAttribute('data-filter');
          applyNavFilter(filter);
        });
      });
      
      // Modal close button
      document.getElementById('closeModal').addEventListener('click', closeNoteModal);
      
      // Modal action buttons
      document.getElementById('modalEditBtn').addEventListener('click', editCurrentNote);
      document.getElementById('modalDeleteBtn').addEventListener('click', deleteCurrentNote);
      
      // Toast close
      document.getElementById('toastClose').addEventListener('click', hideToast);
    }
    
    // Create new note
    function createNewNote() {
      google.script.run.showGeneralNoteForm();
    }
    
    // Switch between grid and list views
    function switchView(view) {
      currentView = view;
      
      // Update button states
      document.getElementById('gridViewBtn').classList.toggle('active', view === 'grid');
      document.getElementById('listViewBtn').classList.toggle('active', view === 'list');
      
      // Show appropriate container
      document.getElementById('notesGrid').style.display = view === 'grid' ? 'grid' : 'none';
      document.getElementById('notesList').style.display = view === 'list' ? 'flex' : 'none';
      
      // Re-render notes in the selected view
      renderNotes();
    }
    
    // Apply filters based on sidebar navigation
    function applyNavFilter(filter) {
      currentFilter = filter;
      
      // Update active state in navigation
      document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.toggle('active', link.getAttribute('data-filter') === filter);
      });
      
      applyFilters();
    }
    
    // Apply all filters and sorting
    function applyFilters() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
      const sortOption = document.getElementById('sortSelect').value;
      const priorityFilter = document.getElementById('prioritySelect').value;
      
      // Start with all notes
      let notes = [...allNotes];
      
      // Apply search filter
      if (searchTerm) {
        notes = notes.filter(note => {
          return (
            (note.title && note.title.toLowerCase().includes(searchTerm)) ||
            (note.content && note.content.toLowerCase().includes(searchTerm)) ||
            (note.tags && note.tags.toLowerCase().includes(searchTerm))
          );
        });
      }
      
      // Apply priority filter
      if (priorityFilter !== 'all') {
        notes = notes.filter(note => note.priority === priorityFilter);
      }
      
      // Apply current navigation filter
      if (currentFilter !== 'all') {
        if (currentFilter === 'pinned') {
          notes = notes.filter(note => note.pinned);
        } else if (currentFilter === 'recent') {
          // Get notes from the last 7 days
          const sevenDaysAgo = new Date();
          sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
          notes = notes.filter(note => new Date(note.lastModified) >= sevenDaysAgo);
        } else if (currentFilter === 'today') {
          // Get notes due today
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          const tomorrow = new Date(today);
          tomorrow.setDate(tomorrow.getDate() + 1);
          
          notes = notes.filter(note => {
            if (!note.dueDate) return false;
            const dueDate = new Date(note.dueDate);
            dueDate.setHours(0, 0, 0, 0);
            return dueDate.getTime() === today.getTime();
          });
        } else if (currentFilter === 'upcoming') {
          // Get notes with future due dates
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          
          notes = notes.filter(note => {
            if (!note.dueDate) return false;
            const dueDate = new Date(note.dueDate);
            return dueDate > today;
          });
        } else if (currentFilter.startsWith('category:')) {
          // Filter by category
          const category = currentFilter.replace('category:', '');
          notes = notes.filter(note => note.category === category);
        } else if (currentFilter.startsWith('tag:')) {
          // Filter by tag
          const tag = currentFilter.replace('tag:', '');
          notes = notes.filter(note => {
            if (!note.tags) return false;
            const noteTags = typeof note.tags === 'string' ? 
              note.tags.split(',').map(t => t.trim()) : note.tags;
            return noteTags.includes(tag);
          });
        }
      }
      
      // Apply sorting
      const [sortField, sortDirection] = sortOption.split(':');
      
      notes.sort((a, b) => {
        let aVal = a[sortField];
        let bVal = b[sortField];
        
        // Handle nullish values
        if (!aVal && aVal !== 0) return sortDirection === 'asc' ? 1 : -1;
        if (!bVal && bVal !== 0) return sortDirection === 'asc' ? -1 : 1;
        
        // Handle dates
        if (sortField === 'created' || sortField === 'modified' || sortField === 'dueDate') {
          aVal = new Date(aVal);
          bVal = new Date(bVal);
        }
        
        // String comparison for strings
        if (typeof aVal === 'string') {
          const result = aVal.localeCompare(bVal);
          return sortDirection === 'asc' ? result : -result;
        }
        
        // Numeric comparison for everything else
        const result = aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
        return sortDirection === 'asc' ? result : -result;
      });
      
      // Move pinned notes to the top
      notes.sort((a, b) => {
        if (a.pinned && !b.pinned) return -1;
        if (!a.pinned && b.pinned) return 1;
        return 0;
      });
      
      // Update filtered notes
      filteredNotes = notes;
      
      // Render the filtered notes
      renderNotes();
      
      // Update counts
      updateSidebar();
    }
    
    // Render notes based on current view
    function renderNotes() {
      if (filteredNotes.length === 0) {
        // Show empty state
        document.getElementById('notesGrid').style.display = 'none';
        document.getElementById('notesList').style.display = 'none';
        document.getElementById('emptyState').style.display = 'flex';
        return;
      }
      
      // Hide empty state
      document.getElementById('emptyState').style.display = 'none';
      
      if (currentView === 'grid') {
        renderGridView();
      } else {
        renderListView();
      }
    }
    
    // Render grid view of notes
    function renderGridView() {
      const gridContainer = document.getElementById('notesGrid');
      gridContainer.innerHTML = '';
      
      filteredNotes.forEach(note => {
        const noteCard = document.createElement('div');
        noteCard.className = `note-card ${note.color || 'blue'}`;
        noteCard.dataset.id = note.id;
        
        // Note preview content
        const contentPreview = note.content ? 
          (note.content.length > 150 ? note.content.substring(0, 150) + '...' : note.content) : '';
        
        // Format tags
        let tagsHtml = '';
        if (note.tags) {
          const noteTags = typeof note.tags === 'string' ? 
            note.tags.split(',').map(tag => tag.trim()) : note.tags;
          
          tagsHtml = noteTags.map(tag => `<div class="note-tag">${tag}</div>`).join('');
        }
        
        // Format date
        const formattedDate = note.lastModified ? formatDate(new Date(note.lastModified)) : '';
        
        noteCard.innerHTML = `
          ${note.pinned ? '<div class="note-pin"><i class="fas fa-thumbtack"></i></div>' : ''}
          <div class="note-content">
            <div class="note-title">${note.title || 'Untitled Note'}</div>
            <div class="note-preview">${contentPreview}</div>
            ${tagsHtml ? `<div class="note-tags">${tagsHtml}</div>` : ''}
          </div>
          <div class="note-footer">
            <div class="note-meta">
              <div class="note-date">
                <i class="far fa-clock"></i> ${formattedDate}
              </div>
              <div class="note-category">
                <i class="fas fa-folder"></i> ${note.category || 'General'}
              </div>
            </div>
            <div class="note-priority">
              <div class="priority-badge ${note.priority?.toLowerCase() || 'medium'}"></div>
            </div>
          </div>
        `;
        
        // Add click event to open note
        noteCard.addEventListener('click', function() {
          openNoteDetail(note.id);
        });
        
        gridContainer.appendChild(noteCard);
      });
    }
    
    // Render list view of notes
    function renderListView() {
      const listContainer = document.getElementById('notesList');
      listContainer.innerHTML = '';
      
      filteredNotes.forEach(note => {
        const noteItem = document.createElement('div');
        noteItem.className = `note-list-item ${note.color || 'blue'}`;
        noteItem.dataset.id = note.id;
        
        // Note preview content
        const contentPreview = note.content ? 
          (note.content.length > 100 ? note.content.substring(0, 100) + '...' : note.content) : '';
        
        // Format date
        const formattedDate = note.lastModified ? formatDate(new Date(note.lastModified)) : '';
        
        noteItem.innerHTML = `
          <div class="note-list-content">
            <div class="note-list-title">
              <div class="priority-badge ${note.priority?.toLowerCase() || 'medium'}"></div>
              ${note.title || 'Untitled Note'}
              ${note.pinned ? '<i class="fas fa-thumbtack" style="color: var(--text-tertiary); font-size: 12px; margin-left: auto;"></i>' : ''}
            </div>
            <div class="note-list-preview">${contentPreview}</div>
          </div>
          <div class="note-list-meta">
            <div class="note-list-date">
              <i class="far fa-clock"></i> ${formattedDate}
            </div>
            <div class="note-list-category">
              <i class="fas fa-folder"></i> ${note.category || 'General'}
            </div>
          </div>
        `;
        
        // Add click event to open note
        noteItem.addEventListener('click', function() {
          openNoteDetail(note.id);
        });
        
        listContainer.appendChild(noteItem);
      });
    }
    
    // Open note detail modal
    function openNoteDetail(noteId) {
      const note = allNotes.find(n => n.id === noteId);
      
      if (!note) {
        showToast('Error', 'Note not found', 'error');
        return;
      }
      
      // Store current note ID on the modal
      document.getElementById('noteDetailModal').dataset.noteId = noteId;
      
      // Populate modal content
      const modalContent = document.getElementById('modalContent');
      
      // Format tags
      let tagsHtml = '';
      if (note.tags) {
        const noteTags = typeof note.tags === 'string' ? 
          note.tags.split(',').map(tag => tag.trim()) : note.tags;
        
        tagsHtml = noteTags.map(tag => `<div class="modal-note-tag">${tag}</div>`).join('');
      }
      
      // Format dates
      const formattedCreatedDate = note.createdDate ? formatDate(new Date(note.createdDate)) : '';
      const formattedModifiedDate = note.lastModified ? formatDate(new Date(note.lastModified)) : '';
      const formattedDueDate = note.dueDate ? formatDate(new Date(note.dueDate)) : '';
      
      // Due date badge
      let dueDateBadge = '';
      if (note.dueDate) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const dueDate = new Date(note.dueDate);
        dueDate.setHours(0, 0, 0, 0);
        
        if (dueDate.getTime() === today.getTime()) {
          dueDateBadge = '<span style="background-color: var(--warning-light); color: var(--warning-color); padding: 2px 6px; border-radius: 4px; font-size: 11px; margin-left: 6px;">TODAY</span>';
        } else if (dueDate < today) {
          dueDateBadge = '<span style="background-color: var(--danger-light); color: var(--danger-color); padding: 2px 6px; border-radius: 4px; font-size: 11px; margin-left: 6px;">OVERDUE</span>';
        }
      }
      
      modalContent.innerHTML = `
        <div class="modal-note-header">
          <h2 class="modal-note-title">${note.title || 'Untitled Note'}</h2>
        </div>
        <div class="modal-note-meta">
          <div class="modal-note-meta-item">
            <i class="fas fa-calendar-plus"></i> Created: ${formattedCreatedDate}
          </div>
          <div class="modal-note-meta-item">
            <i class="fas fa-edit"></i> Modified: ${formattedModifiedDate}
          </div>
          <div class="modal-note-meta-item">
            <i class="fas fa-folder"></i> Category: ${note.category || 'General'}
          </div>
          <div class="modal-note-meta-item">
            <i class="fas fa-flag"></i> Priority: ${note.priority || 'Medium'}
          </div>
          ${note.dueDate ? `
            <div class="modal-note-meta-item">
              <i class="fas fa-calendar-day"></i> Due Date: ${formattedDueDate} ${dueDateBadge}
            </div>
          ` : ''}
          ${note.reminderSet ? `
            <div class="modal-note-meta-item">
              <i class="fas fa-bell"></i> Calendar Reminder Set
            </div>
          ` : ''}
        </div>
        <div class="modal-note-content">${note.content || 'No content provided.'}</div>
        ${tagsHtml ? `<div class="modal-note-tags">${tagsHtml}</div>` : ''}
      `;
      
      // Set created date in footer
      document.getElementById('modalCreatedDate').textContent = `Created on ${formattedCreatedDate}`;
      
      // Show modal
      document.getElementById('noteDetailModal').classList.add('show');
    }
    
    // Close note detail modal
    function closeNoteModal() {
      document.getElementById('noteDetailModal').classList.remove('show');
    }
    
    // Edit current note
    function editCurrentNote() {
      const noteId = document.getElementById('noteDetailModal').dataset.noteId;
      if (!noteId) return;
      
      closeNoteModal();
      
      // Open edit form
      google.script.run.showGeneralNoteForm(noteId);
    }
    
    // Delete current note
    function deleteCurrentNote() {
      const noteId = document.getElementById('noteDetailModal').dataset.noteId;
      if (!noteId) return;
      
      if (confirm('Are you sure you want to delete this note? This action cannot be undone.')) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(function(result) {
            hideLoading();
            closeNoteModal();
            
            if (result.success) {
              // Remove note from arrays
              allNotes = allNotes.filter(note => note.id !== noteId);
              filteredNotes = filteredNotes.filter(note => note.id !== noteId);
              
              // Re-render notes
              renderNotes();
              updateSidebar();
              
              showToast('Success', 'Note deleted successfully', 'success');
            } else {
              showToast('Error', result.message || 'Failed to delete note', 'error');
            }
          })
          .withFailureHandler(function(error) {
            hideLoading();
            showToast('Error', 'Failed to delete note: ' + error.message, 'error');
          })
          .deleteGeneralNote(noteId);
      }
    }
    
    // Populate categories in the sidebar
    function populateCategories(categories) {
      const categoriesList = document.getElementById('categoriesList');
      categoriesList.innerHTML = '';
      
      categories.forEach(category => {
        const item = document.createElement('li');
        item.className = 'nav-item';
        
        let iconClass = 'fas fa-sticky-note';
        
        // Assign icons based on category name
        switch(category.name.toLowerCase()) {
          case 'task':
            iconClass = 'fas fa-tasks';
            break;
          case 'idea':
            iconClass = 'fas fa-lightbulb';
            break;
          case 'meeting':
            iconClass = 'fas fa-users';
            break;
          case 'project':
            iconClass = 'fas fa-project-diagram';
            break;
          case 'personal':
            iconClass = 'fas fa-user';
            break;
        }
        
        item.innerHTML = `
          <div class="nav-link" data-filter="category:${category.name}">
            <div class="nav-link-icon"><i class="${iconClass}"></i></div>
            <div class="nav-link-text">${category.name}</div>
            <div class="nav-link-count">${category.count || 0}</div>
          </div>
        `;
        
        // Add event listener
        const link = item.querySelector('.nav-link');
        link.addEventListener('click', function() {
          const filter = this.getAttribute('data-filter');
          applyNavFilter(filter);
        });
        
        categoriesList.appendChild(item);
      });
    }
    
    // Populate tags in the sidebar
    function populateTags(tags) {
      const tagsList = document.getElementById('tagsList');
      tagsList.innerHTML = '';
      
      tags.forEach(tag => {
        const item = document.createElement('div');
        item.className = 'tag-item';
        item.setAttribute('data-filter', `tag:${tag.name}`);
        
        item.innerHTML = `
          <div class="tag-color" style="background-color: ${tag.color || 'var(--note-gray)'}"></div>
          <div class="tag-name">${tag.name}</div>
          <div class="tag-count">${tag.count || 0}</div>
        `;
        
        // Add event listener
        item.addEventListener('click', function() {
          const filter = this.getAttribute('data-filter');
          applyNavFilter(filter);
        });
        
        tagsList.appendChild(item);
      });
    }
    
    // Update sidebar counts
    function updateSidebar() {
      // Update counts
      document.getElementById('allNotesCount').textContent = allNotes.length;
      document.getElementById('pinnedCount').textContent = allNotes.filter(note => note.pinned).length;
      document.getElementById('recentCount').textContent = getRecentCount();
      document.getElementById('todayCount').textContent = getTodayCount();
      document.getElementById('upcomingCount').textContent = getUpcomingCount();
    }
    
    // Get count of recent notes (last 7 days)
    function getRecentCount() {
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
      
      return allNotes.filter(note => new Date(note.lastModified) >= sevenDaysAgo).length;
    }
    
    // Get count of notes due today
    function getTodayCount() {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      return allNotes.filter(note => {
        if (!note.dueDate) return false;
        const dueDate = new Date(note.dueDate);
        dueDate.setHours(0, 0, 0, 0);
        return dueDate.getTime() === today.getTime();
      }).length;
    }
    
    // Get count of upcoming notes
    function getUpcomingCount() {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      return allNotes.filter(note => {
        if (!note.dueDate) return false;
        const dueDate = new Date(note.dueDate);
        return dueDate > today;
      }).length;
    }
    
    // Show empty state with custom message
    function showEmptyState(message) {
      document.getElementById('notesGrid').style.display = 'none';
      document.getElementById('notesList').style.display = 'none';
      
      const emptyState = document.getElementById('emptyState');
      const description = emptyState.querySelector('.empty-description');
      
      if (message) {
        description.textContent = message;
      }
      
      emptyState.style.display = 'flex';
    }
    
    // Format date for display
    function formatDate(date) {
      return date.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('show');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('show');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const iconElement = toast.querySelector('.toast-icon');
      
      // Set toast type
      iconElement.className = 'toast-icon ' + type;
      
      // Set icon
      const iconI = iconElement.querySelector('i');
      iconI.className = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle';
      
      // Set content
      toast.querySelector('.toast-title').textContent = title;
      toast.querySelector('.toast-message').textContent = message;
      
      // Show toast
      toast.classList.add('show');
      
      // Auto hide after 5 seconds
      setTimeout(hideToast, 5000);
    }
    
    // Hide toast notification
    function hideToast() {
      document.getElementById('toast').classList.remove('show');
    }
    
    // Debounce function for search input
    function debounce(func, wait) {
      let timeout;
      return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => {
          func.apply(context, args);
        }, wait);
      };
    }
  </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Notes Dashboard</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
      
      /* Note colors */
      --note-blue: #60a5fa;
      --note-green: #34d399;
      --note-yellow: #fbbf24;
      --note-orange: #fb923c;
      --note-red: #f87171;
      --note-purple: #a78bfa;
      --note-pink: #f472b6;
      --note-gray: #9ca3af;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .dashboard-container {
      min-height: 100vh;
      padding: 24px;
      display: flex;
      flex-direction: column;
      gap: 24px;
    }
    
    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .title-icon {
      width: 56px;
      height: 56px;
      border-radius: var(--radius-lg);
      background: var(--primary-gradient);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 24px;
      box-shadow: 0 10px 20px rgba(85, 64, 175, 0.3);
      position: relative;
      overflow: hidden;
    }
    
    .title-icon::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 2px;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.7), transparent);
      bottom: 0;
      left: -100%;
      animation: scan 3s linear infinite;
    }
    
    @keyframes scan {
      0% { left: -100%; }
      100% { left: 100%; }
    }
    
    .title-text {
      display: flex;
      flex-direction: column;
    }
    
    .title-main {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: 4px;
    }
    
    .title-sub {
      font-size: 14px;
      color: var(--text-tertiary);
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 10px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(85, 64, 175, 0.4);
    }
    
    .btn-outline {
      background-color: white;
      border: 1px solid var(--border-medium);
      color: var(--text-secondary);
    }
    
    .btn-outline:hover {
      border-color: var(--primary-color);
      color: var(--primary-color);
      background-color: rgba(85, 64, 175, 0.05);
    }
    
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      gap: 24px;
    }
    
    /* Stats cards */
    .stats-section {
      grid-column: span 12;
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 24px;
    }
    
    .stat-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      display: flex;
      flex-direction: column;
      position: relative;
      overflow: hidden;
    }
    
    .stat-header {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 16px;
    }
    
    .stat-icon {
      width: 40px;
      height: 40px;
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 16px;
      box-shadow: var(--shadow-sm);
      color: white;
      position: relative;
      z-index: 1;
    }
    
    .stat-icon::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: inherit;
      opacity: 0.2;
      z-index: -1;
    }
    
    .icon-primary {
      background: var(--primary-gradient);
    }
    
    .icon-primary::after {
      background: var(--primary-gradient);
    }
    
    .icon-success {
      background: linear-gradient(135deg, #10b981, #34d399);
    }
    
    .icon-success::after {
      background: linear-gradient(135deg, #10b981, #34d399);
    }
    
    .icon-warning {
      background: linear-gradient(135deg, #f59e0b, #fbbf24);
    }
    
    .icon-warning::after {
      background: linear-gradient(135deg, #f59e0b, #fbbf24);
    }
    
    .icon-info {
      background: linear-gradient(135deg, #3b82f6, #60a5fa);
    }
    
    .icon-info::after {
      background: linear-gradient(135deg, #3b82f6, #60a5fa);
    }
    
    .stat-title {
      font-size: 13px;
      color: var(--text-tertiary);
      font-weight: 500;
    }
    
    .stat-value {
      font-family: 'Manrope', sans-serif;
      font-size: 32px;
      font-weight: 700;
      margin-top: 8px;
      margin-bottom: 12px;
    }
    
    .stat-trend {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 12px;
    }
    
    .trend-positive {
      color: var(--success-color);
    }
    
    .trend-negative {
      color: var(--danger-color);
    }
    
    /* Charts and data visualizations */
    .chart-section {
      grid-column: span 8;
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      display: flex;
      flex-direction: column;
    }
    
    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 24px;
    }
    
    .chart-title {
      font-family: 'Manrope', sans-serif;
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .chart-title-icon {
      color: var(--primary-color);
    }
    
    .chart-controls {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .chart-select {
      padding: 8px 32px 8px 12px;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-medium);
      background-color: white;
      font-size: 13px;
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%2364748b' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 8px center;
      background-size: 12px;
    }
    
    .chart-select:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .chart-container {
      flex: 1;
      position: relative;
      min-height: 300px;
      margin-top: 12px;
    }
    
    /* Tags and Categories section */
    .analysis-section {
      grid-column: span 4;
      display: flex;
      flex-direction: column;
      gap: 24px;
    }
    
    .tags-section, .categories-section {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      display: flex;
      flex-direction: column;
    }
    
    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .section-title {
      font-family: 'Manrope', sans-serif;
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .tag-list, .category-list {
      display: flex;
      flex-direction: column;
      gap: 12px;
    }
    
    .tag-item, .category-item {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .tag-color {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }
    
    .tag-name, .category-name {
      flex: 1;
      font-weight: 500;
    }
    
    .tag-count, .category-count {
      background-color: var(--bg-secondary);
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .tag-item:hover .tag-name, .category-item:hover .category-name {
      color: var(--primary-color);
    }
    
    /* Activity section */
    .activity-section {
      grid-column: span 6;
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      display: flex;
      flex-direction: column;
    }
    
    .activity-list {
      display: flex;
      flex-direction: column;
      gap: 16px;
      margin-top: 12px;
    }
    
    .activity-item {
      display: flex;
      gap: 16px;
      align-items: flex-start;
    }
    
    .activity-icon {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      flex-shrink: 0;
    }
    
    .icon-create {
      background-color: var(--primary-light);
    }
    
    .icon-edit {
      background-color: var(--note-blue);
    }
    
    .icon-delete {
      background-color: var(--note-red);
    }
    
    .activity-content {
      flex: 1;
    }
    
    .activity-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .activity-title span {
      font-weight: normal;
      color: var(--text-tertiary);
    }
    
    .activity-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    /* Calendar section */
    .calendar-section {
      grid-column: span 6;
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      display: flex;
      flex-direction: column;
    }
    
    .calendar-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .calendar-title {
      font-family: 'Manrope', sans-serif;
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .calendar-title-icon {
      color: var(--note-purple);
    }
    
    .calendar-navigation {
      display: flex;
      gap: 8px;
      align-items: center;
    }
    
    .calendar-nav-btn {
      width: 28px;
      height: 28px;
      border-radius: 50%;
      border: 1px solid var(--border-medium);
      background-color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .calendar-nav-btn:hover {
      background-color: var(--bg-secondary);
      border-color: var(--text-tertiary);
    }
    
    .calendar-month {
      font-weight: 600;
      min-width: 120px;
      text-align: center;
    }
    
    .calendar-grid {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 4px;
    }
    
    .calendar-weekday {
      text-align: center;
      font-weight: 600;
      font-size: 12px;
      color: var(--text-tertiary);
      padding: 8px 0;
    }
    
    .calendar-day {
      aspect-ratio: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      border-radius: var(--radius-md);
      font-size: 14px;
      cursor: pointer;
      transition: all var(--transition-fast);
      position: relative;
    }
    
    .calendar-day:hover {
      background-color: var(--bg-secondary);
    }
    
    .calendar-day.today {
      background-color: var(--primary-light);
      color: white;
    }
    
    .calendar-day.has-notes::after {
      content: '';
      position: absolute;
      bottom: 4px;
      width: 4px;
      height: 4px;
      border-radius: 50%;
      background-color: var(--primary-color);
    }
    
    .calendar-day.today.has-notes::after {
      background-color: white;
    }
    
    .calendar-day.other-month {
      color: var(--text-tertiary);
      opacity: 0.5;
    }
    
    /* Upcoming due dates section */
    .upcoming-section {
      grid-column: span 12;
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      display: flex;
      flex-direction: column;
    }
    
    .upcoming-list {
      display: flex;
      flex-wrap: nowrap;
      gap: 16px;
      overflow-x: auto;
      padding: 8px 0;
    }
    
    .upcoming-card {
      min-width: 280px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      padding: 16px;
      border-top: 3px solid var(--note-blue);
      transition: all var(--transition-fast);
    }
    
    .upcoming-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-sm);
    }
    
    .upcoming-card.today {
      border-top-color: var(--note-orange);
    }
    
    .upcoming-card.overdue {
      border-top-color: var(--note-red);
    }
    
    .upcoming-date {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 12px;
    }
    
    .date-text {
      font-weight: 600;
    }
    
    .due-badge {
      font-size: 11px;
      padding: 2px 8px;
      border-radius: 12px;
    }
    
    .due-badge.today {
      background-color: var(--warning-light);
      color: var(--warning-color);
    }
    
    .due-badge.overdue {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .upcoming-title {
      font-weight: 600;
      font-size: 15px;
      margin-bottom: 8px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .upcoming-details {
      display: flex;
      align-items: center;
      justify-content: space-between;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .upcoming-category {
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .upcoming-priority {
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .priority-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background-color: var(--note-gray);
      display: inline-block;
    }
    
    .priority-dot.low {
      background-color: var(--note-blue);
    }
    
    .priority-dot.medium {
      background-color: var(--note-green);
    }
    
    .priority-dot.high {
      background-color: var(--note-orange);
    }
    
    .priority-dot.urgent {
      background-color: var(--note-red);
    }
    
    /* Loading spinner */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: rgba(255, 255, 255, 0.8);
      z-index: 100;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary-color);
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    /* Toast notification */
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      box-shadow: var(--shadow-lg);
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      gap: 12px;
      transform: translateY(150%);
      transition: transform 0.3s ease;
      z-index: 1000;
    }
    
    .toast.show {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
      color: var(--text-primary);
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      cursor: pointer;
      color: var(--text-tertiary);
      padding: 4px;
    }
    
    /* Responsive styles */
    @media (max-width: 1200px) {
      .stats-section {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .chart-section, .activity-section, .calendar-section {
        grid-column: span 12;
      }
      
      .analysis-section {
        grid-column: span 12;
        flex-direction: row;
      }
      
      .tags-section, .categories-section {
        flex: 1;
      }
    }
    
    @media (max-width: 768px) {
      .stats-section {
        grid-template-columns: 1fr;
      }
      
      .analysis-section {
        flex-direction: column;
      }
      
      .dashboard-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
      }
      
      .header-actions {
        width: 100%;
      }
      
      .chart-header, .section-header, .activity-header, .calendar-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 12px;
      }
      
      .chart-controls {
        width: 100%;
      }
    }
  </style>
</head>

<body>
  <div class="dashboard-container">
    <header class="dashboard-header">
      <div class="header-title">
        <div class="title-icon">
          <i class="fas fa-sticky-note"></i>
        </div>
        <div class="title-text">
          <h1 class="title-main">Notes Dashboard 📊</h1>
          <p class="title-sub">Analyze and track your note-taking habits and upcoming deadlines</p>
        </div>
      </div>
      
      <div class="header-actions">
        <button class="btn btn-outline" id="viewAllNotesBtn">
          <i class="fas fa-list"></i> View All Notes
        </button>
        <button class="btn btn-primary" id="newNoteBtn">
          <i class="fas fa-plus"></i> Create Note
        </button>
      </div>
    </header>
    
    <div class="dashboard-grid">
      <!-- Stats Summary -->
      <div class="stats-section">
        <div class="stat-card">
          <div class="stat-header">
            <div class="stat-icon icon-primary">
              <i class="fas fa-sticky-note"></i>
            </div>
            <div class="stat-title">Total Notes</div>
          </div>
          <div class="stat-value" id="totalNotesValue">0</div>
          <div class="stat-trend trend-positive">
            <i class="fas fa-arrow-up"></i> <span id="notesGrowthText">0% from last month</span>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-header">
            <div class="stat-icon icon-info">
              <i class="fas fa-thumbtack"></i>
            </div>
            <div class="stat-title">Pinned Notes</div>
          </div>
          <div class="stat-value" id="pinnedNotesValue">0</div>
          <div class="stat-trend">
            <i class="fas fa-percentage"></i> <span id="pinnedPercentageText">0% of total notes</span>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-header">
            <div class="stat-icon icon-warning">
              <i class="fas fa-calendar-day"></i>
            </div>
            <div class="stat-title">Due Today</div>
          </div>
          <div class="stat-value" id="dueTodayValue">0</div>
          <div class="stat-trend">
            <i class="fas fa-clock"></i> Requiring attention
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-header">
            <div class="stat-icon icon-success">
              <i class="fas fa-tags"></i>
            </div>
            <div class="stat-title">Tags Used</div>
          </div>
          <div class="stat-value" id="tagsCountValue">0</div>
          <div class="stat-trend">
            <i class="fas fa-check-circle"></i> Helping organize content
          </div>
        </div>
      </div>
      
      <!-- Activity Over Time Chart -->
      <div class="chart-section">
        <div class="chart-header">
          <div class="chart-title">
            <i class="fas fa-chart-line chart-title-icon"></i> Note Activity Over Time
          </div>
          <div class="chart-controls">
            <select id="timeRangeSelect" class="chart-select">
              <option value="30">Last 30 Days</option>
              <option value="90" selected>Last 90 Days</option>
              <option value="180">Last 6 Months</option>
              <option value="365">Last Year</option>
            </select>
            <select id="chartTypeSelect" class="chart-select">
              <option value="created">Created</option>
              <option value="modified">Modified</option>
              <option value="both" selected>Both</option>
            </select>
          </div>
        </div>
        <div class="chart-container">
          <canvas id="activityChart"></canvas>
        </div>
      </div>
      
      <!-- Tags and Categories Analysis -->
      <div class="analysis-section">
        <div class="tags-section">
          <div class="section-header">
            <div class="section-title">
              <i class="fas fa-tags" style="color: var(--note-green);"></i> Top Tags
            </div>
          </div>
          <div class="tag-list" id="topTagsList">
            <!-- Will be populated dynamically -->
            <div class="tag-item">
              <div class="tag-color" style="background-color: var(--note-blue);"></div>
              <div class="tag-name">work</div>
              <div class="tag-count">12</div>
            </div>
            <div class="tag-item">
              <div class="tag-color" style="background-color: var(--note-green);"></div>
              <div class="tag-name">personal</div>
              <div class="tag-count">8</div>
            </div>
            <div class="tag-item">
              <div class="tag-color" style="background-color: var(--note-purple);"></div>
              <div class="tag-name">important</div>
              <div class="tag-count">6</div>
            </div>
            <div class="tag-item">
              <div class="tag-color" style="background-color: var(--note-orange);"></div>
              <div class="tag-name">follow-up</div>
              <div class="tag-count">5</div>
            </div>
            <div class="tag-item">
              <div class="tag-color" style="background-color: var(--note-pink);"></div>
              <div class="tag-name">idea</div>
              <div class="tag-count">4</div>
            </div>
          </div>
        </div>
        
        <div class="categories-section">
          <div class="section-header">
            <div class="section-title">
              <i class="fas fa-folder" style="color: var(--note-blue);"></i> Categories
            </div>
          </div>
          <div class="chart-container" style="height: 240px;">
            <canvas id="categoriesChart"></canvas>
          </div>
        </div>
      </div>
      
      <!-- Recent Activity -->
      <div class="activity-section">
        <div class="section-header">
          <div class="section-title">
            <i class="fas fa-history" style="color: var(--note-purple);"></i> Recent Activity
          </div>
        </div>
        <div class="activity-list" id="activityList">
          <!-- Will be populated dynamically -->
          <div class="activity-item">
            <div class="activity-icon icon-create">
              <i class="fas fa-plus"></i>
            </div>
            <div class="activity-content">
              <div class="activity-title">Created note <span>"Weekly team meeting notes"</span></div>
              <div class="activity-meta">
                <div class="activity-category">Meeting</div>
                <div class="activity-time">2 hours ago</div>
              </div>
            </div>
          </div>
          <div class="activity-item">
            <div class="activity-icon icon-edit">
              <i class="fas fa-pencil-alt"></i>
            </div>
            <div class="activity-content">
              <div class="activity-title">Updated note <span>"Project deadlines"</span></div>
              <div class="activity-meta">
                <div class="activity-category">Project</div>
                <div class="activity-time">Yesterday</div>
              </div>
            </div>
          </div>
          <div class="activity-item">
            <div class="activity-icon icon-create">
              <i class="fas fa-plus"></i>
            </div>
            <div class="activity-content">
              <div class="activity-title">Created note <span>"Marketing campaign ideas"</span></div>
              <div class="activity-meta">
                <div class="activity-category">Idea</div>
                <div class="activity-time">3 days ago</div>
              </div>
            </div>
          </div>
          <div class="activity-item">
            <div class="activity-icon icon-delete">
              <i class="fas fa-trash"></i>
            </div>
            <div class="activity-content">
              <div class="activity-title">Deleted note <span>"Old draft"</span></div>
              <div class="activity-meta">
                <div class="activity-category">General</div>
                <div class="activity-time">1 week ago</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Calendar View -->
      <div class="calendar-section">
        <div class="calendar-header">
          <div class="calendar-title">
            <i class="fas fa-calendar-alt calendar-title-icon"></i> Note Calendar
          </div>
          <div class="calendar-navigation">
            <button class="calendar-nav-btn" id="prevMonthBtn">
              <i class="fas fa-chevron-left"></i>
            </button>
            <div class="calendar-month" id="currentMonthYear">April 2025</div>
            <button class="calendar-nav-btn" id="nextMonthBtn">
              <i class="fas fa-chevron-right"></i>
            </button>
          </div>
        </div>
        <div class="calendar-grid">
          <!-- Calendar weekday headers -->
          <div class="calendar-weekday">Sun</div>
          <div class="calendar-weekday">Mon</div>
          <div class="calendar-weekday">Tue</div>
          <div class="calendar-weekday">Wed</div>
          <div class="calendar-weekday">Thu</div>
          <div class="calendar-weekday">Fri</div>
          <div class="calendar-weekday">Sat</div>
          
          <!-- Calendar days will be populated dynamically -->
          <div id="calendarDays"></div>
        </div>
      </div>
      
      <!-- Upcoming Due Dates -->
      <div class="upcoming-section">
        <div class="section-header">
          <div class="section-title">
            <i class="fas fa-calendar-check" style="color: var(--note-orange);"></i> Upcoming Due Dates
          </div>
        </div>
        <div class="upcoming-list" id="upcomingList">
          <!-- Will be populated dynamically -->
          <div class="upcoming-card today">
            <div class="upcoming-date">
              <div class="date-text">Today</div>
              <div class="due-badge today">TODAY</div>
            </div>
            <div class="upcoming-title">Submit quarterly report</div>
            <div class="upcoming-details">
              <div class="upcoming-category">
                <i class="fas fa-folder"></i> Task
              </div>
              <div class="upcoming-priority">
                <span class="priority-dot high"></span> High
              </div>
            </div>
          </div>
          
          <div class="upcoming-card">
            <div class="upcoming-date">
              <div class="date-text">Tomorrow</div>
            </div>
            <div class="upcoming-title">Team retrospective meeting notes</div>
            <div class="upcoming-details">
              <div class="upcoming-category">
                <i class="fas fa-folder"></i> Meeting
              </div>
              <div class="upcoming-priority">
                <span class="priority-dot medium"></span> Medium
              </div>
            </div>
          </div>
          
          <div class="upcoming-card">
            <div class="upcoming-date">
              <div class="date-text">Apr 10, 2025</div>
            </div>
            <div class="upcoming-title">Project milestone presentation</div>
            <div class="upcoming-details">
              <div class="upcoming-category">
                <i class="fas fa-folder"></i> Project
              </div>
              <div class="upcoming-priority">
                <span class="priority-dot high"></span> High
              </div>
            </div>
          </div>
          
          <div class="upcoming-card overdue">
            <div class="upcoming-date">
              <div class="date-text">Apr 2, 2025</div>
              <div class="due-badge overdue">OVERDUE</div>
            </div>
            <div class="upcoming-title">Follow up on client meeting</div>
            <div class="upcoming-details">
              <div class="upcoming-category">
                <i class="fas fa-folder"></i> General
              </div>
              <div class="upcoming-priority">
                <span class="priority-dot urgent"></span> Urgent
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <!-- Toast notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Your notes have been loaded successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let notesData = [];
    let currentDate = new Date('2025-04-05');
    let displayedMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    let notesWithDates = {};
    
    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
      // Show loading overlay
      showLoading();
      
      // Load dashboard data
      loadDashboardData();
      
      // Set up event listeners
      setupEventListeners();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Button click events
      document.getElementById('newNoteBtn').addEventListener('click', createNewNote);
      document.getElementById('viewAllNotesBtn').addEventListener('click', viewAllNotes);
      document.getElementById('toastClose').addEventListener('click', hideToast);
      
      // Chart controls
      document.getElementById('timeRangeSelect').addEventListener('change', updateActivityChart);
      document.getElementById('chartTypeSelect').addEventListener('change', updateActivityChart);
      
      // Calendar navigation
      document.getElementById('prevMonthBtn').addEventListener('click', () => changeMonth(-1));
      document.getElementById('nextMonthBtn').addEventListener('click', () => changeMonth(1));
    }
    
    // Load dashboard data
    function loadDashboardData() {
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            notesData = result.notes || [];
            
            // Update dashboard sections
            updateStatsSummary(result.stats);
            renderActivityChart(result.activity);
            renderCategoriesChart(result.categories);
            updateTopTags(result.topTags);
            updateRecentActivity(result.recentActivity);
            updateCalendar();
            updateUpcomingDueDates(result.upcomingDueDates);
            
            // Hide loading overlay
            hideLoading();
          } else {
            console.error('Failed to load dashboard data:', result.message);
            showToast('Error', result.message || 'Failed to load dashboard data', 'error');
            hideLoading();
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error loading dashboard data:', error);
          showToast('Error', 'Failed to load dashboard data', 'error');
          hideLoading();
        })
        .getGeneralNotesDashboardData();
    }
    
    // Update stats summary section
    function updateStatsSummary(stats) {
      if (!stats) return;
      
      document.getElementById('totalNotesValue').textContent = stats.totalNotes || 0;
      document.getElementById('pinnedNotesValue').textContent = stats.pinnedNotes || 0;
      document.getElementById('dueTodayValue').textContent = stats.dueToday || 0;
      document.getElementById('tagsCountValue').textContent = stats.tagsUsed || 0;
      
      document.getElementById('notesGrowthText').textContent = `${stats.notesGrowth || 0}% from last month`;
      document.getElementById('pinnedPercentageText').textContent = `${stats.pinnedPercentage || 0}% of total notes`;
    }
    
    // Render activity chart
    function renderActivityChart(activityData) {
      if (!activityData) return;
      
      const ctx = document.getElementById('activityChart').getContext('2d');
      
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: activityData.labels,
          datasets: [
            {
              label: 'Created',
              data: activityData.created,
              backgroundColor: 'rgba(85, 64, 175, 0.2)',
              borderColor: 'rgba(85, 64, 175, 1)',
              borderWidth: 2,
              tension: 0.3,
              pointBackgroundColor: 'rgba(85, 64, 175, 1)'
            },
            {
              label: 'Modified',
              data: activityData.modified,
              backgroundColor: 'rgba(56, 189, 248, 0.2)',
              borderColor: 'rgba(56, 189, 248, 1)',
              borderWidth: 2,
              tension: 0.3,
              pointBackgroundColor: 'rgba(56, 189, 248, 1)'
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                precision: 0
              }
            }
          },
          plugins: {
            legend: {
              position: 'top'
            },
            tooltip: {
              mode: 'index',
              intersect: false
            }
          }
        }
      });
    }
    
    // Update activity chart when options change
    function updateActivityChart() {
      const timeRange = document.getElementById('timeRangeSelect').value;
      const chartType = document.getElementById('chartTypeSelect').value;
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            // Update the chart with new data
            updateChartData(result.activityData, chartType);
            hideLoading();
          } else {
            console.error('Failed to update chart:', result.message);
            hideLoading();
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error updating chart:', error);
          hideLoading();
        })
        .getNotesActivityChartData(timeRange, chartType);
    }
    
    // Update chart with new data
    function updateChartData(chartData, chartType) {
      const chart = Chart.getChart('activityChart');
      
      if (!chart || !chartData) return;
      
      // Update labels
      chart.data.labels = chartData.labels;
      
      // Update datasets based on chart type
      if (chartType === 'created') {
        chart.data.datasets = [chart.data.datasets[0]];
        chart.data.datasets[0].data = chartData.created;
      } else if (chartType === 'modified') {
        chart.data.datasets = [chart.data.datasets.length > 1 ? chart.data.datasets[1] : chart.data.datasets[0]];
        chart.data.datasets[0].label = 'Modified';
        chart.data.datasets[0].data = chartData.modified;
        chart.data.datasets[0].backgroundColor = 'rgba(56, 189, 248, 0.2)';
        chart.data.datasets[0].borderColor = 'rgba(56, 189, 248, 1)';
        chart.data.datasets[0].pointBackgroundColor = 'rgba(56, 189, 248, 1)';
      } else {
        // Both
        chart.data.datasets = [
          {
            label: 'Created',
            data: chartData.created,
            backgroundColor: 'rgba(85, 64, 175, 0.2)',
            borderColor: 'rgba(85, 64, 175, 1)',
            borderWidth: 2,
            tension: 0.3,
            pointBackgroundColor: 'rgba(85, 64, 175, 1)'
          },
          {
            label: 'Modified',
            data: chartData.modified,
            backgroundColor: 'rgba(56, 189, 248, 0.2)',
            borderColor: 'rgba(56, 189, 248, 1)',
            borderWidth: 2,
            tension: 0.3,
            pointBackgroundColor: 'rgba(56, 189, 248, 1)'
          }
        ];
      }
      
      chart.update();
    }
    
    // Render categories chart
    function renderCategoriesChart(categories) {
      if (!categories) return;
      
      const ctx = document.getElementById('categoriesChart').getContext('2d');
      
      new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: categories.map(c => c.name),
          datasets: [{
            data: categories.map(c => c.count),
            backgroundColor: [
              'rgba(85, 64, 175, 0.7)',
              'rgba(56, 189, 248, 0.7)',
              'rgba(16, 185, 129, 0.7)',
              'rgba(245, 158, 11, 0.7)',
              'rgba(239, 68, 68, 0.7)',
              'rgba(167, 139, 250, 0.7)',
              'rgba(244, 114, 182, 0.7)',
              'rgba(156, 163, 175, 0.7)'
            ],
            borderColor: 'white',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                boxWidth: 12,
                padding: 15
              }
            }
          }
        }
      });
    }
    
    // Update top tags list
    function updateTopTags(tags) {
      if (!tags || !tags.length) return;
      
      const topTagsList = document.getElementById('topTagsList');
      topTagsList.innerHTML = '';
      
      tags.forEach(tag => {
        const tagItem = document.createElement('div');
        tagItem.className = 'tag-item';
        tagItem.innerHTML = `
          <div class="tag-color" style="background-color: ${tag.color || 'var(--note-gray)'};"></div>
          <div class="tag-name">${tag.name}</div>
          <div class="tag-count">${tag.count}</div>
        `;
        topTagsList.appendChild(tagItem);
      });
    }
    
    // Update recent activity list
    function updateRecentActivity(activities) {
      if (!activities || !activities.length) return;
      
      const activityList = document.getElementById('activityList');
      activityList.innerHTML = '';
      
      activities.forEach(activity => {
        const activityItem = document.createElement('div');
        activityItem.className = 'activity-item';
        
        // Determine icon class based on activity type
        let iconClass = 'icon-create';
        let iconElement = '<i class="fas fa-plus"></i>';
        
        if (activity.type === 'edit') {
          iconClass = 'icon-edit';
          iconElement = '<i class="fas fa-pencil-alt"></i>';
        } else if (activity.type === 'delete') {
          iconClass = 'icon-delete';
          iconElement = '<i class="fas fa-trash"></i>';
        }
        
        // Format action text based on activity type
        let actionText = 'Created note';
        if (activity.type === 'edit') actionText = 'Updated note';
        if (activity.type === 'delete') actionText = 'Deleted note';
        
        activityItem.innerHTML = `
          <div class="activity-icon ${iconClass}">
            ${iconElement}
          </div>
          <div class="activity-content">
            <div class="activity-title">${actionText} <span>"${activity.noteName}"</span></div>
            <div class="activity-meta">
              <div class="activity-category">${activity.category || 'General'}</div>
              <div class="activity-time">${formatTimeAgo(activity.date)}</div>
            </div>
          </div>
        `;
        
        activityList.appendChild(activityItem);
      });
    }
    
    // Update calendar view
    function updateCalendar() {
      // Process notes to find dates with notes
      notesWithDates = {};
      
      notesData.forEach(note => {
        if (note.dueDate) {
          const dateKey = new Date(note.dueDate).toDateString();
          if (!notesWithDates[dateKey]) {
            notesWithDates[dateKey] = [];
          }
          notesWithDates[dateKey].push(note);
        }
      });
      
      renderCalendar();
    }
    
    // Render calendar for the current month
    function renderCalendar() {
      const calendarDays = document.getElementById('calendarDays');
      calendarDays.innerHTML = '';
      
      // Update month/year display
      document.getElementById('currentMonthYear').textContent = formatMonthYear(displayedMonth);
      
      // Get first day of the month and the number of days
      const firstDay = new Date(displayedMonth.getFullYear(), displayedMonth.getMonth(), 1).getDay();
      const lastDate = new Date(displayedMonth.getFullYear(), displayedMonth.getMonth() + 1, 0).getDate();
      
      // Get last day of previous month
      const prevMonthLastDate = new Date(displayedMonth.getFullYear(), displayedMonth.getMonth(), 0).getDate();
      
      // Create calendar grid
      let dayCount = 1;
      let nextMonthDayCount = 1;
      
      // Create calendar days
      for (let i = 0; i < 42; i++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        
        if (i < firstDay) {
          // Previous month days
          const prevMonthDay = prevMonthLastDate - (firstDay - i - 1);
          dayElement.textContent = prevMonthDay;
          dayElement.classList.add('other-month');
          
          // Add previous month's year/month to check for notes
          const prevMonth = new Date(displayedMonth);
          prevMonth.setMonth(prevMonth.getMonth() - 1);
          const dateToCheck = new Date(prevMonth.getFullYear(), prevMonth.getMonth(), prevMonthDay);
          checkForNotes(dayElement, dateToCheck);
        } else if (dayCount > lastDate) {
          // Next month days
          dayElement.textContent = nextMonthDayCount++;
          dayElement.classList.add('other-month');
          
          // Add next month's year/month to check for notes
          const nextMonth = new Date(displayedMonth);
          nextMonth.setMonth(nextMonth.getMonth() + 1);
          const dateToCheck = new Date(nextMonth.getFullYear(), nextMonth.getMonth(), dayElement.textContent);
          checkForNotes(dayElement, dateToCheck);
        } else {
          // Current month days
          dayElement.textContent = dayCount;
          
          // Check if this is today
          const currentCalendarDate = new Date(displayedMonth.getFullYear(), displayedMonth.getMonth(), dayCount);
          
          if (isToday(currentCalendarDate)) {
            dayElement.classList.add('today');
          }
          
          // Check for notes on this day
          checkForNotes(dayElement, currentCalendarDate);
          
          // Add click event to show notes for this day
          dayElement.addEventListener('click', function() {
            showNotesForDate(currentCalendarDate);
          });
          
          dayCount++;
        }
        
        calendarDays.appendChild(dayElement);
        
        // Break after 6 weeks
        if (i === 41) break;
      }
    }
    
    // Check if a date has any notes and update the day element accordingly
    function checkForNotes(dayElement, date) {
      const dateKey = date.toDateString();
      if (notesWithDates[dateKey] && notesWithDates[dateKey].length > 0) {
        dayElement.classList.add('has-notes');
      }
    }
    
    // Change displayed month
    function changeMonth(offset) {
      displayedMonth.setMonth(displayedMonth.getMonth() + offset);
      renderCalendar();
    }
    
    // Show notes for a specific date
    function showNotesForDate(date) {
      const dateKey = date.toDateString();
      const notes = notesWithDates[dateKey] || [];
      
      // Format date for display
      const formattedDate = formatDate(date);
      
      if (notes.length === 0) {
        showToast('No Notes', `No notes due on ${formattedDate}`, 'info');
        return;
      }
      
      // In a real implementation, you might show a modal with the notes
      // For this example, we'll just show a toast
      showToast(`Notes for ${formattedDate}`, `Found ${notes.length} note(s) due on this date`, 'success');
      
      // You could navigate to the notes view filtered by this date
      // For example: google.script.run.showGeneralNotes(date.toISOString());
    }
    
    // Update upcoming due dates section
    function updateUpcomingDueDates(upcomingDates) {
      if (!upcomingDates || !upcomingDates.length) return;
      
      const upcomingList = document.getElementById('upcomingList');
      upcomingList.innerHTML = '';
      
      upcomingDates.forEach(note => {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const dueDate = new Date(note.dueDate);
        dueDate.setHours(0, 0, 0, 0);
        
        const isToday = dueDate.getTime() === today.getTime();
        const isOverdue = dueDate < today;
        
        let cardClass = '';
        let badgeHtml = '';
        
        if (isToday) {
          cardClass = 'today';
          badgeHtml = '<div class="due-badge today">TODAY</div>';
        } else if (isOverdue) {
          cardClass = 'overdue';
          badgeHtml = '<div class="due-badge overdue">OVERDUE</div>';
        }
        
        const dateText = isToday ? 'Today' : 
                        isOverdue ? formatDate(dueDate) :
                        dueDate.getTime() === today.getTime() + 86400000 ? 'Tomorrow' : 
                        formatDate(dueDate);
        
        const card = document.createElement('div');
        card.className = `upcoming-card ${cardClass}`;
        card.innerHTML = `
          <div class="upcoming-date">
            <div class="date-text">${dateText}</div>
            ${badgeHtml}
          </div>
          <div class="upcoming-title">${note.title || 'Untitled Note'}</div>
          <div class="upcoming-details">
            <div class="upcoming-category">
              <i class="fas fa-folder"></i> ${note.category || 'General'}
            </div>
            <div class="upcoming-priority">
              <span class="priority-dot ${note.priority?.toLowerCase() || 'medium'}"></span> ${note.priority || 'Medium'}
            </div>
          </div>
        `;
        
        // Add click event to open the note
        card.addEventListener('click', function() {
          openNote(note.id);
        });
        
        upcomingList.appendChild(card);
      });
    }
    
    // Create new note
    function createNewNote() {
      google.script.run.showGeneralNoteForm();
    }
    
    // View all notes
    function viewAllNotes() {
      google.script.run.showGeneralNotes();
    }
    
    // Open a specific note
    function openNote(noteId) {
      google.script.run.showGeneralNoteForm(noteId);
    }
    
    // Format date for display
    function formatDate(date) {
      const options = { month: 'short', day: 'numeric', year: 'numeric' };
      return date.toLocaleDateString('en-US', options);
    }
    
    // Format month and year for calendar header
    function formatMonthYear(date) {
      const options = { month: 'long', year: 'numeric' };
      return date.toLocaleDateString('en-US', options);
    }
    
    // Check if a date is today
    function isToday(date) {
      return date.toDateString() === currentDate.toDateString();
    }
    
    // Format relative time (e.g., "2 hours ago")
    function formatTimeAgo(dateString) {
      const date = new Date(dateString);
      const now = currentDate;
      
      const diffMs = now - date;
      const diffSec = Math.floor(diffMs / 1000);
      const diffMin = Math.floor(diffSec / 60);
      const diffHour = Math.floor(diffMin / 60);
      const diffDay = Math.floor(diffHour / 24);
      const diffMonth = Math.floor(diffDay / 30);
      const diffYear = Math.floor(diffMonth / 12);
      
      if (diffSec < 60) {
        return 'Just now';
      } else if (diffMin < 60) {
        return `${diffMin} minute${diffMin !== 1 ? 's' : ''} ago`;
      } else if (diffHour < 24) {
        return `${diffHour} hour${diffHour !== 1 ? 's' : ''} ago`;
      } else if (diffDay < 30) {
        return `${diffDay} day${diffDay !== 1 ? 's' : ''} ago`;
      } else if (diffMonth < 12) {
        return `${diffMonth} month${diffMonth !== 1 ? 's' : ''} ago`;
      } else {
        return `${diffYear} year${diffYear !== 1 ? 's' : ''} ago`;
      }
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('show');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('show');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const iconElement = toast.querySelector('.toast-icon');
      
      // Set toast type
      iconElement.className = 'toast-icon ' + type;
      
      // Set icon
      const iconI = iconElement.querySelector('i');
      if (type === 'success') {
        iconI.className = 'fas fa-check-circle';
      } else if (type === 'error') {
        iconI.className = 'fas fa-exclamation-circle';
      } else if (type === 'info') {
        iconI.className = 'fas fa-info-circle';
        iconElement.style.backgroundColor = 'rgba(59, 130, 246, 0.1)';
        iconElement.style.color = 'var(--info-color)';
      }
      
      // Set content
      toast.querySelector('.toast-title').textContent = title;
      toast.querySelector('.toast-message').textContent = message;
      
      // Show toast
      toast.classList.add('show');
      
      // Auto hide after 5 seconds
      setTimeout(hideToast, 5000);
    }
    
    // Hide toast notification
    function hideToast() {
      document.getElementById('toast').classList.remove('show');
    }
  </script>
</body>
</html>








/**
 * GeneralNotes.gs - Handles all general notes functionality
 * 
 * 🌟 Provides functions for:
 * - General notes CRUD operations
 * - Calendar integration
 * - Notes analytics and dashboard
 * - Tag management
 */

/**
 * 📝 Initialize the General Notes sheet with required headers
 * @return {Boolean} Success status
 */
function initializeGeneralNotesSheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES);
    
    // Create sheet if it doesn't exist
    if (!sheet) {
      sheet = ss.insertSheet(CONFIG.SHEETS.GENERAL_NOTES);
    }
    
    // Set up headers
    const headers = [
      'Note ID',
      'User Email',
      'User Name',
      'Title',
      'Content',
      'Tags',
      'Category',
      'Priority',
      'Due Date',
      'Reminder Set',
      'Calendar Event ID',
      'Calendar Event Link',
      'Color',
      'Pinned',
      'Status',
      'Created Date',
      'Last Modified'
    ];
    
    // Check if headers already exist
    const existingHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Only set headers if they don't match
    if (existingHeaders.length !== headers.length || !headers.every((header, i) => header === existingHeaders[i])) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
      
      // Format the sheet
      sheet.autoResizeColumns(1, headers.length);
    }
    
    return true;
  } catch (error) {
    logError('initializeGeneralNotesSheet', error);
    return false;
  }
}

/**
 * 📝 Initialize the General Notes Tags sheet with required headers
 * @return {Boolean} Success status
 */
function initializeGeneralNotesTagsSheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES_TAGS);
    
    // Create sheet if it doesn't exist
    if (!sheet) {
      sheet = ss.insertSheet(CONFIG.SHEETS.GENERAL_NOTES_TAGS);
    }
    
    // Set up headers
    const headers = [
      'Tag ID',
      'Tag Name',
      'Color',
      'Usage Count',
      'Created By',
      'Created Date'
    ];
    
    // Check if headers already exist
    const existingHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Only set headers if they don't match
    if (existingHeaders.length !== headers.length || !headers.every((header, i) => header === existingHeaders[i])) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
      
      // Format the sheet
      sheet.autoResizeColumns(1, headers.length);
    }
    
    return true;
  } catch (error) {
    logError('initializeGeneralNotesTagsSheet', error);
    return false;
  }
}

/**
 * 📝 Initialize the General Notes Activity sheet with required headers
 * @return {Boolean} Success status
 */
function initializeGeneralNotesActivitySheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES_ACTIVITY);
    
    // Create sheet if it doesn't exist
    if (!sheet) {
      sheet = ss.insertSheet(CONFIG.SHEETS.GENERAL_NOTES_ACTIVITY);
    }
    
    // Set up headers
    const headers = [
      'Activity ID',
      'Note ID',
      'User Email',
      'User Name',
      'Action Type',
      'Note Title',
      'Note Category',
      'Activity Date'
    ];
    
    // Check if headers already exist
    const existingHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Only set headers if they don't match
    if (existingHeaders.length !== headers.length || !headers.every((header, i) => header === existingHeaders[i])) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
      
      // Format the sheet
      sheet.autoResizeColumns(1, headers.length);
    }
    
    return true;
  } catch (error) {
    logError('initializeGeneralNotesActivitySheet', error);
    return false;
  }
}

/**
 * 🔄 Initialize all General Notes related sheets
 * @return {Boolean} Success status
 */
function initializeGeneralNotesSheets() {
  const notesInitialized = initializeGeneralNotesSheet();
  const tagsInitialized = initializeGeneralNotesTagsSheet();
  const activityInitialized = initializeGeneralNotesActivitySheet();
  
  return notesInitialized && tagsInitialized && activityInitialized;
}

/**
 * 📋 Show create/edit general note form
 * @param {String} noteId - Optional ID for editing an existing note
 */
function showGeneralNoteForm(noteId = null) {
  try {
    // Initialize sheets if they don't exist
    initializeGeneralNotesSheets();
    
    // Store note ID in cache if editing
    if (noteId) {
      CacheService.getUserCache().put('editNoteId', noteId);
    } else {
      CacheService.getUserCache().remove('editNoteId');
    }
    
    const htmlOutput = HtmlService
      .createTemplateFromFile('general-note-form')
      .evaluate()
      .setWidth(800)
      .setHeight(650)
      .setTitle('📝 Create/Edit Note');
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, '📝 Create/Edit Note');
  } catch (error) {
    logError('showGeneralNoteForm', error);
    showErrorMessage('Error: ' + error.toString());
  }
}

/**
 * 📋 Show general notes list
 */
function showGeneralNotes() {
  try {
    // Initialize sheets if they don't exist
    initializeGeneralNotesSheets();
    
    const htmlOutput = HtmlService
      .createTemplateFromFile('general-notes')
      .evaluate()
      .setWidth(900)
      .setHeight(700)
      .setTitle('📋 My Notes');
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, '📋 My Notes');
  } catch (error) {
    logError('showGeneralNotes', error);
    showErrorMessage('Error: ' + error.toString());
  }
}

/**
 * 📊 Show general notes dashboard
 */
function showGeneralNotesDashboard() {
  try {
    // Initialize sheets if they don't exist
    initializeGeneralNotesSheets();
    
    const htmlOutput = HtmlService
      .createTemplateFromFile('general-notes-dashboard')
      .evaluate()
      .setWidth(900)
      .setHeight(700)
      .setTitle('📊 Notes Dashboard');
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, '📊 Notes Dashboard');
  } catch (error) {
    logError('showGeneralNotesDashboard', error);
    showErrorMessage('Error: ' + error.toString());
  }
}

/**
 * 💾 Get note to edit
 * @return {Object} Note data or null
 */
function getNoteToEdit() {
  try {
    const cache = CacheService.getUserCache();
    const noteId = cache.get('editNoteId');
    
    if (!noteId) return null;
    
    const note = getGeneralNoteById(noteId);
    return note.success ? note.data : null;
  } catch (error) {
    logError('getNoteToEdit', error);
    return null;
  }
}

/**
 * 🔍 Get a general note by ID
 * @param {String} noteId - The ID of the note to retrieve
 * @return {Object} Success status and note data
 */
function getGeneralNoteById(noteId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES);
    
    if (!sheet) {
      return { success: false, message: 'General Notes sheet not found' };
    }
    
    // Get the headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const idColIndex = headers.indexOf('Note ID');
    
    if (idColIndex === -1) {
      return { success: false, message: 'Note ID column not found' };
    }
    
    // Find the note
    const dataRange = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn());
    const values = dataRange.getValues();
    
    for (let i = 0; i < values.length; i++) {
      if (values[i][idColIndex] === noteId) {
        // Found the note, create object with headers as keys
        const noteData = {};
        headers.forEach((header, index) => {
          noteData[header] = values[i][index];
        });
        
        // Convert to the format expected by the UI
        const formattedNote = {
          id: noteData['Note ID'],
          title: noteData['Title'],
          content: noteData['Content'],
          tags: noteData['Tags'],
          category: noteData['Category'],
          priority: noteData['Priority'],
          dueDate: noteData['Due Date'],
          reminderSet: noteData['Reminder Set'],
          calendarEventId: noteData['Calendar Event ID'],
          calendarEventLink: noteData['Calendar Event Link'],
          color: noteData['Color'],
          pinned: noteData['Pinned'],
          status: noteData['Status'],
          createdDate: noteData['Created Date'],
          lastModified: noteData['Last Modified']
        };
        
        return { success: true, data: formattedNote };
      }
    }
    
    return { success: false, message: 'Note not found' };
  } catch (error) {
    logError('getGeneralNoteById', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 💾 Save a general note
 * @param {Object} noteData - The note data to save
 * @return {Object} Success status and note ID
 */
function saveGeneralNote(noteData) {
  try {
    // Initialize sheets if they don't exist
    initializeGeneralNotesSheets();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES);
    
    if (!sheet) {
      return { success: false, message: 'General Notes sheet not found' };
    }
    
    // Check if we're editing an existing note
    let isEditing = false;
    let noteId = noteData.id || '';
    let previousNote = null;
    
    if (!noteId) {
      // Generate a new unique ID for the note
      noteId = 'N' + new Date().getTime().toString();
    } else {
      isEditing = true;
      // Get previous version of note for activity tracking
      const prevNoteResult = getGeneralNoteById(noteId);
      if (prevNoteResult.success) {
        previousNote = prevNoteResult.data;
      }
    }
    
    // Get current user info
    const user = Session.getEffectiveUser();
    const userEmail = user.getEmail();
    const userName = userEmail.split('@')[0]; // Simple username extraction
    
    // Get sheet headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Parse tags into proper format
    let tags = noteData.tags || '';
    if (Array.isArray(tags)) {
      tags = tags.join(',');
    }
    
    // Convert empty due date to null
    let dueDate = null;
    if (noteData.dueDate && noteData.dueDate.trim() !== '') {
      dueDate = new Date(noteData.dueDate);
    }
    
    // Prepare data for saving
    const rowData = headers.map(header => {
      switch(header) {
        case 'Note ID':
          return noteId;
        case 'User Email':
          return userEmail;
        case 'User Name':
          return userName;
        case 'Title':
          return noteData.title || 'Untitled Note';
        case 'Content':
          return noteData.content || '';
        case 'Tags':
          return tags;
        case 'Category':
          return noteData.category || 'General';
        case 'Priority':
          return noteData.priority || 'Medium';
        case 'Due Date':
          return dueDate;
        case 'Reminder Set':
          return noteData.reminderSet === 'true' || noteData.reminderSet === true;
        case 'Calendar Event ID':
          return noteData.calendarEventId || '';
        case 'Calendar Event Link':
          return noteData.calendarEventLink || '';
        case 'Color':
          return noteData.color || 'blue';
        case 'Pinned':
          return noteData.pinned === 'true' || noteData.pinned === true;
        case 'Status':
          return noteData.status || 'Active';
        case 'Created Date':
          return isEditing ? previousNote?.createdDate || new Date() : new Date();
        case 'Last Modified':
          return new Date();
        default:
          return '';
      }
    });
    
    // If editing, find the row with the note ID
    if (isEditing) {
      const idColumnIndex = headers.indexOf('Note ID');
      
      if (idColumnIndex === -1) {
        return { success: false, message: 'Note ID column not found' };
      }
      
      const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
      let rowIndex = -1;
      
      for (let i = 0; i < data.length; i++) {
        if (data[i][idColumnIndex] === noteId) {
          rowIndex = i + 2; // +2 because arrays are 0-indexed and we have a header row
          break;
        }
      }
      
      if (rowIndex === -1) {
        return { success: false, message: 'Note not found for editing' };
      }
      
      sheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    } else {
      // Append new row
      sheet.appendRow(rowData);
    }
    
    // Handle calendar integration if due date is set
    let calendarResult = { success: true };
    
    if (dueDate && noteData.reminderSet) {
      if (isEditing && noteData.calendarEventId) {
        calendarResult = updateCalendarEvent(noteId, noteData);
      } else {
        calendarResult = createCalendarEvent(noteId, noteData);
        
        // If calendar event was created, update the note with event details
        if (calendarResult.success && calendarResult.eventId) {
          updateNoteCalendarInfo(noteId, calendarResult.eventId, calendarResult.eventLink);
        }
      }
    } else if (isEditing && noteData.calendarEventId && (!dueDate || !noteData.reminderSet)) {
      // Remove calendar event if reminder was unset or due date removed
      deleteCalendarEvent(noteId, noteData.calendarEventId);
      updateNoteCalendarInfo(noteId, '', '');
    }
    
    // Process tags
    if (tags) {
      processNoteTags(tags.split(',').map(tag => tag.trim()));
    }
    
    // Record activity
    const activityType = isEditing ? 'edit' : 'create';
    recordNoteActivity(noteId, userEmail, userName, activityType, noteData.title, noteData.category);
    
    return { success: true, noteId: noteId };
  } catch (error) {
    logError('saveGeneralNote', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 🗑️ Delete a general note
 * @param {String} noteId - The ID of the note to delete
 * @return {Object} Success status
 */
function deleteGeneralNote(noteId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES);
    
    if (!sheet) {
      return { success: false, message: 'General Notes sheet not found' };
    }
    
    // Get the headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const idColIndex = headers.indexOf('Note ID');
    const calendarEventIdIndex = headers.indexOf('Calendar Event ID');
    const titleIndex = headers.indexOf('Title');
    const categoryIndex = headers.indexOf('Category');
    
    if (idColIndex === -1) {
      return { success: false, message: 'Note ID column not found' };
    }
    
    // Find the note
    const dataRange = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn());
    const values = dataRange.getValues();
    
    for (let i = 0; i < values.length; i++) {
      if (values[i][idColIndex] === noteId) {
        // Get calendar event ID to delete (if exists)
        const calendarEventId = calendarEventIdIndex !== -1 ? values[i][calendarEventIdIndex] : '';
        
        // Get note title and category for activity log
        const noteTitle = titleIndex !== -1 ? values[i][titleIndex] : 'Untitled Note';
        const noteCategory = categoryIndex !== -1 ? values[i][categoryIndex] : 'General';
        
        // Delete the calendar event if it exists
        if (calendarEventId) {
          deleteCalendarEvent(noteId, calendarEventId);
        }
        
        // Delete the row
        sheet.deleteRow(i + 2); // +2 because arrays are 0-indexed and we have a header row
        
        // Record delete activity
        const user = Session.getEffectiveUser();
        const userEmail = user.getEmail();
        const userName = userEmail.split('@')[0];
        recordNoteActivity(noteId, userEmail, userName, 'delete', noteTitle, noteCategory);
        
        return { success: true };
      }
    }
    
    return { success: false, message: 'Note not found' };
  } catch (error) {
    logError('deleteGeneralNote', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📆 Create a calendar event for a note
 * @param {String} noteId - The ID of the note
 * @param {Object} noteData - The note data
 * @return {Object} Success status and event details
 */
function createCalendarEvent(noteId, noteData) {
  try {
    if (!noteData.dueDate || !noteData.reminderSet) {
      return { success: false, message: 'No due date or reminder set' };
    }
    
    // Get the default calendar
    const calendar = CalendarApp.getDefaultCalendar();
    if (!calendar) {
      return { success: false, message: 'Cannot access calendar' };
    }
    
    // Format title and description
    const eventTitle = `Note Reminder: ${noteData.title || 'Untitled Note'}`;
    const eventDescription = `${noteData.content || 'No content'}\n\n` +
      `Category: ${noteData.category || 'General'}\n` +
      `Priority: ${noteData.priority || 'Medium'}\n` +
      `Tags: ${noteData.tags || 'None'}\n\n` +
      `This reminder was created by the Team Management App.`;
    
    // Set event time (due date at 9 AM for 30 minutes)
    const dueDate = new Date(noteData.dueDate);
    dueDate.setHours(9, 0, 0);
    const endTime = new Date(dueDate.getTime() + 30 * 60000); // 30 minutes later
    
    // Create the event
    const event = calendar.createEvent(
      eventTitle,
      dueDate,
      endTime,
      { description: eventDescription }
    );
    
    // Set reminder for 1 hour before
    event.addPopupReminder(60);
    
    // Get event ID and link
    const eventId = event.getId();
    const eventLink = event.getHtmlLink();
    
    return { 
      success: true, 
      eventId: eventId, 
      eventLink: eventLink 
    };
  } catch (error) {
    logError('createCalendarEvent', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📆 Update a calendar event for a note
 * @param {String} noteId - The ID of the note
 * @param {Object} noteData - The note data
 * @return {Object} Success status
 */
function updateCalendarEvent(noteId, noteData) {
  try {
    if (!noteData.calendarEventId || !noteData.dueDate) {
      return { success: false, message: 'No calendar event ID or due date' };
    }
    
    // Get the event
    let event;
    try {
      event = CalendarApp.getEventById(noteData.calendarEventId);
    } catch (e) {
      // Event might have been deleted manually
      return { success: false, message: 'Calendar event not found' };
    }
    
    if (!event) {
      return { success: false, message: 'Calendar event not found' };
    }
    
    // Format title and description
    const eventTitle = `Note Reminder: ${noteData.title || 'Untitled Note'}`;
    const eventDescription = `${noteData.content || 'No content'}\n\n` +
      `Category: ${noteData.category || 'General'}\n` +
      `Priority: ${noteData.priority || 'Medium'}\n` +
      `Tags: ${noteData.tags || 'None'}\n\n` +
      `This reminder was created by the Team Management App.`;
    
    // Set event time (due date at 9 AM for 30 minutes)
    const dueDate = new Date(noteData.dueDate);
    dueDate.setHours(9, 0, 0);
    const endTime = new Date(dueDate.getTime() + 30 * 60000); // 30 minutes later
    
    // Update the event
    event.setTitle(eventTitle);
    event.setDescription(eventDescription);
    event.setTime(dueDate, endTime);
    
    // Make sure there's a reminder
    const reminders = event.getPopupReminders();
    if (reminders.length === 0) {
      event.addPopupReminder(60);
    }
    
    return { success: true };
  } catch (error) {
    logError('updateCalendarEvent', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📆 Delete a calendar event for a note
 * @param {String} noteId - The ID of the note
 * @param {String} eventId - The ID of the calendar event
 * @return {Object} Success status
 */
function deleteCalendarEvent(noteId, eventId) {
  try {
    if (!eventId) return { success: true }; // Nothing to delete
    
    // Get the event
    let event;
    try {
      event = CalendarApp.getEventById(eventId);
    } catch (e) {
      // Event might already be deleted
      return { success: true };
    }
    
    if (!event) {
      return { success: true }; // Event doesn't exist
    }
    
    // Delete the event
    event.deleteEvent();
    return { success: true };
  } catch (error) {
    logError('deleteCalendarEvent', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📝 Update note with calendar information
 * @param {String} noteId - The ID of the note
 * @param {String} eventId - The ID of the calendar event
 * @param {String} eventLink - The link to the calendar event
 * @return {Object} Success status
 */
function updateNoteCalendarInfo(noteId, eventId, eventLink) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES);
    
    if (!sheet) {
      return { success: false, message: 'General Notes sheet not found' };
    }
    
    // Get the headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const idColIndex = headers.indexOf('Note ID');
    const eventIdColIndex = headers.indexOf('Calendar Event ID');
    const eventLinkColIndex = headers.indexOf('Calendar Event Link');
    
    if (idColIndex === -1 || eventIdColIndex === -1 || eventLinkColIndex === -1) {
      return { success: false, message: 'Required columns not found' };
    }
    
    // Find the note
    const dataRange = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn());
    const values = dataRange.getValues();
    
    for (let i = 0; i < values.length; i++) {
      if (values[i][idColIndex] === noteId) {
        // Update calendar info
        const rowIndex = i + 2; // +2 because arrays are 0-indexed and we have a header row
        sheet.getRange(rowIndex, eventIdColIndex + 1).setValue(eventId);
        sheet.getRange(rowIndex, eventLinkColIndex + 1).setValue(eventLink);
        return { success: true };
      }
    }
    
    return { success: false, message: 'Note not found' };
  } catch (error) {
    logError('updateNoteCalendarInfo', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 🏷️ Process tags from a note
 * @param {Array} tags - Array of tag names
 * @return {Object} Success status
 */
function processNoteTags(tags) {
  if (!tags || !tags.length) return { success: true };
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES_TAGS);
    
    if (!sheet) {
      return { success: false, message: 'Tags sheet not found' };
    }
    
    // Get the headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const nameColIndex = headers.indexOf('Tag Name');
    const countColIndex = headers.indexOf('Usage Count');
    
    if (nameColIndex === -1 || countColIndex === -1) {
      return { success: false, message: 'Required columns not found' };
    }
    
    // Get current user
    const user = Session.getEffectiveUser();
    const userEmail = user.getEmail();
    
    // Get existing tags
    let existingTags = {};
    if (sheet.getLastRow() > 1) {
      const tagsData = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
      tagsData.forEach(row => {
        existingTags[row[nameColIndex].toLowerCase()] = {
          row: tagsData.indexOf(row) + 2, // +2 for header row and 0-indexing
          count: row[countColIndex]
        };
      });
    }
    
    // Process each tag
    tags.forEach(tag => {
      if (!tag) return;
      
      const tagLower = tag.toLowerCase();
      
      if (existingTags[tagLower]) {
        // Update existing tag count
        const rowIndex = existingTags[tagLower].row;
        const currentCount = existingTags[tagLower].count || 0;
        sheet.getRange(rowIndex, countColIndex + 1).setValue(currentCount + 1);
      } else {
        // Add new tag
        const tagId = 'T' + new Date().getTime().toString() + Math.floor(Math.random() * 1000);
        const tagColor = getTagColor(tag);
        
        const rowData = headers.map(header => {
          switch(header) {
            case 'Tag ID':
              return tagId;
            case 'Tag Name':
              return tag;
            case 'Color':
              return tagColor;
            case 'Usage Count':
              return 1;
            case 'Created By':
              return userEmail;
            case 'Created Date':
              return new Date();
            default:
              return '';
          }
        });
        
        sheet.appendRow(rowData);
        existingTags[tagLower] = { row: sheet.getLastRow(), count: 1 };
      }
    });
    
    return { success: true };
  } catch (error) {
    logError('processNoteTags', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 🎨 Get a consistent color for a tag based on its name
 * @param {String} tagName - The name of the tag
 * @return {String} A color name
 */
function getTagColor(tagName) {
  if (!tagName) return 'gray';
  
  // Colors to choose from
  const colors = ['blue', 'green', 'yellow', 'orange', 'red', 'purple', 'pink'];
  
  // Use the tag name as a simple hash to get a consistent color
  let hash = 0;
  for (let i = 0; i < tagName.length; i++) {
    hash = tagName.charCodeAt(i) + ((hash << 5) - hash);
  }
  
  // Get a color from the hash
  const colorIndex = Math.abs(hash) % colors.length;
  return colors[colorIndex];
}

/**
 * 📊 Record note activity for analytics
 * @param {String} noteId - The ID of the note
 * @param {String} userEmail - User's email
 * @param {String} userName - User's name
 * @param {String} actionType - Type of action (create, edit, delete)
 * @param {String} noteTitle - The title of the note
 * @param {String} noteCategory - The category of the note
 * @return {Object} Success status
 */
function recordNoteActivity(noteId, userEmail, userName, actionType, noteTitle, noteCategory) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES_ACTIVITY);
    
    if (!sheet) {
      return { success: false, message: 'Activity sheet not found' };
    }
    
    // Get the headers
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Generate a unique activity ID
    const activityId = 'A' + new Date().getTime().toString();
    
    // Prepare the activity data
    const rowData = headers.map(header => {
      switch(header) {
        case 'Activity ID':
          return activityId;
        case 'Note ID':
          return noteId;
        case 'User Email':
          return userEmail;
        case 'User Name':
          return userName;
        case 'Action Type':
          return actionType;
        case 'Note Title':
          return noteTitle;
        case 'Note Category':
          return noteCategory;
        case 'Activity Date':
          return new Date();
        default:
          return '';
      }
    });
    
    // Add the activity
    sheet.appendRow(rowData);
    
    return { success: true };
  } catch (error) {
    logError('recordNoteActivity', error);
    // Don't let activity recording failure stop the main function
    return { success: false, message: error.toString() };
  }
}

/**
 * 📋 Get all general notes
 * @return {Object} Success status and notes data
 */
function getGeneralNotes() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES);
    
    if (!sheet || sheet.getLastRow() <= 1) {
      return { 
        success: true, 
        notes: [],
        categories: [],
        tags: []
      };
    }
    
    // Get current user
    const user = Session.getEffectiveUser();
    const userEmail = user.getEmail();
    
    // Get headers and data
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
    
    // Map headers to indices for easier access
    const headerMap = {};
    headers.forEach((header, index) => {
      headerMap[header] = index;
    });
    
    // Process notes
    const notes = [];
    const categoriesMap = {};
    const tagsUsed = new Set();
    
    data.forEach(row => {
      // Only include notes from the current user
      if (row[headerMap['User Email']] === userEmail) {
        const note = {
          id: row[headerMap['Note ID']],
          title: row[headerMap['Title']],
          content: row[headerMap['Content']],
          tags: row[headerMap['Tags']],
          category: row[headerMap['Category']],
          priority: row[headerMap['Priority']],
          dueDate: row[headerMap['Due Date']],
          reminderSet: row[headerMap['Reminder Set']],
          calendarEventId: row[headerMap['Calendar Event ID']],
          calendarEventLink: row[headerMap['Calendar Event Link']],
          color: row[headerMap['Color']],
          pinned: row[headerMap['Pinned']],
          status: row[headerMap['Status']],
          createdDate: row[headerMap['Created Date']],
          lastModified: row[headerMap['Last Modified']]
        };
        
        notes.push(note);
        
        // Track categories
        const category = note.category || 'General';
        if (!categoriesMap[category]) {
          categoriesMap[category] = 0;
        }
        categoriesMap[category]++;
        
        // Track tags
        if (note.tags) {
          const tagArray = typeof note.tags === 'string' ? 
            note.tags.split(',').map(tag => tag.trim()) : note.tags;
          
          tagArray.forEach(tag => {
            if (tag) tagsUsed.add(tag);
          });
        }
      }
    });
    
    // Format categories for the UI
    const categories = Object.keys(categoriesMap).map(category => ({
      name: category,
      count: categoriesMap[category]
    }));
    
    // Get tag details from the tags sheet
    const tags = getTagsDetails(Array.from(tagsUsed));
    
    return {
      success: true,
      notes,
      categories,
      tags
    };
  } catch (error) {
    logError('getGeneralNotes', error);
    return { success: false, message: error.toString(), notes: [], categories: [], tags: [] };
  }
}

/**
 * 🏷️ Get details for an array of tag names
 * @param {Array} tagNames - Array of tag names
 * @return {Array} Array of tag objects with details
 */
function getTagsDetails(tagNames) {
  if (!tagNames || !tagNames.length) return [];
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES_TAGS);
    
    if (!sheet || sheet.getLastRow() <= 1) {
      // Return basic tags if sheet doesn't exist or is empty
      return tagNames.map(tag => ({ name: tag, count: 1, color: getTagColor(tag) }));
    }
    
    // Get headers and data
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
    
    // Map headers to indices
    const nameIndex = headers.indexOf('Tag Name');
    const colorIndex = headers.indexOf('Color');
    const countIndex = headers.indexOf('Usage Count');
    
    if (nameIndex === -1) {
      // Return basic tags if required columns not found
      return tagNames.map(tag => ({ name: tag, count: 1, color: getTagColor(tag) }));
    }
    
    // Create a map of tag data
    const tagMap = {};
    data.forEach(row => {
      const tagName = row[nameIndex];
      if (tagName) {
        tagMap[tagName.toLowerCase()] = {
          name: tagName,
          color: colorIndex !== -1 ? row[colorIndex] : getTagColor(tagName),
          count: countIndex !== -1 ? row[countIndex] : 1
        };
      }
    });
    
    // Match input tag names to tag data
    return tagNames.map(tag => {
      return tagMap[tag.toLowerCase()] || { name: tag, count: 1, color: getTagColor(tag) };
    });
  } catch (error) {
    logError('getTagsDetails', error);
    return tagNames.map(tag => ({ name: tag, count: 1, color: getTagColor(tag) }));
  }
}

/**
 * 🏷️ Get all available tags
 * @return {Array} Array of tag objects
 */
function getAvailableTags() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES_TAGS);
    
    if (!sheet || sheet.getLastRow() <= 1) {
      return [];
    }
    
    // Get headers and data
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
    
    // Map headers to indices
    const nameIndex = headers.indexOf('Tag Name');
    const colorIndex = headers.indexOf('Color');
    const countIndex = headers.indexOf('Usage Count');
    
    if (nameIndex === -1) {
      return [];
    }
    
    // Create array of tag objects
    const tags = data.map(row => ({
      name: row[nameIndex],
      color: colorIndex !== -1 ? row[colorIndex] : getTagColor(row[nameIndex]),
      count: countIndex !== -1 ? row[countIndex] : 1
    })).filter(tag => tag.name); // Filter out any empty tag names
    
    return tags;
  } catch (error) {
    logError('getAvailableTags', error);
    return [];
  }
}

/**
 * 📊 Get general notes dashboard data
 * @return {Object} Dashboard data
 */
function getGeneralNotesDashboardData() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const notesSheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES);
    const activitySheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES_ACTIVITY);
    const tagsSheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES_TAGS);
    
    if (!notesSheet) {
      return { success: false, message: 'General Notes sheet not found' };
    }
    
    // Get current user
    const user = Session.getEffectiveUser();
    const userEmail = user.getEmail();
    
    // Get notes data
    let notes = [];
    let stats = { totalNotes: 0, pinnedNotes: 0, dueToday: 0, tagsUsed: 0 };
    
    if (notesSheet.getLastRow() > 1) {
      const headers = notesSheet.getRange(1, 1, 1, notesSheet.getLastColumn()).getValues()[0];
      const data = notesSheet.getRange(2, 1, notesSheet.getLastRow() - 1, notesSheet.getLastColumn()).getValues();
      
      // Map headers to indices
      const headerMap = {};
      headers.forEach((header, index) => {
        headerMap[header] = index;
      });
      
      // Process notes
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const lastMonth = new Date();
      lastMonth.setMonth(lastMonth.getMonth() - 1);
      
      let notesLastMonth = 0;
      const uniqueTags = new Set();
      
      data.forEach(row => {
        // Only include notes from the current user
        if (row[headerMap['User Email']] === userEmail) {
          const note = {
            id: row[headerMap['Note ID']],
            title: row[headerMap['Title']],
            content: row[headerMap['Content']],
            tags: row[headerMap['Tags']],
            category: row[headerMap['Category']],
            priority: row[headerMap['Priority']],
            dueDate: row[headerMap['Due Date']],
            reminderSet: row[headerMap['Reminder Set']],
            color: row[headerMap['Color']],
            pinned: row[headerMap['Pinned']],
            status: row[headerMap['Status']],
            createdDate: row[headerMap['Created Date']],
            lastModified: row[headerMap['Last Modified']]
          };
          
          notes.push(note);
          
          // Count stats
          stats.totalNotes++;
          
          if (note.pinned === true || note.pinned === 'true') {
            stats.pinnedNotes++;
          }
          
          if (note.dueDate) {
            const dueDate = new Date(note.dueDate);
            dueDate.setHours(0, 0, 0, 0);
            if (dueDate.getTime() === today.getTime()) {
              stats.dueToday++;
            }
          }
          
          // Count notes created in the last month
          if (note.createdDate && new Date(note.createdDate) >= lastMonth) {
            notesLastMonth++;
          }
          
          // Count unique tags
          if (note.tags) {
            const tagArray = typeof note.tags === 'string' ? 
              note.tags.split(',').map(tag => tag.trim()) : note.tags;
            
            tagArray.forEach(tag => {
              if (tag) uniqueTags.add(tag);
            });
          }
        }
      });
      
      // Calculate growth percentage
      const prevMonthTotal = stats.totalNotes - notesLastMonth;
      stats.notesGrowth = prevMonthTotal > 0 ? 
        Math.round((notesLastMonth / prevMonthTotal) * 100) - 100 : 
        notesLastMonth > 0 ? 100 : 0;
      
      // Calculate pinned percentage
      stats.pinnedPercentage = stats.totalNotes > 0 ? 
        Math.round((stats.pinnedNotes / stats.totalNotes) * 100) : 0;
      
      // Count unique tags
      stats.tagsUsed = uniqueTags.size;
    }
    
    // Get activity data for chart
    const activity = {
      labels: [],
      created: [],
      modified: []
    };
    
    // Generate labels for the last 90 days
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(endDate.getDate() - 90);
    
    // Create weekly labels
    const weekCount = Math.ceil(90 / 7);
    for (let i = 0; i < weekCount; i++) {
      const weekDate = new Date(startDate);
      weekDate.setDate(startDate.getDate() + (i * 7));
      activity.labels.push(formatShortDate(weekDate));
      activity.created.push(0);
      activity.modified.push(0);
    }
    
    // Process activity data if sheet exists
    if (activitySheet && activitySheet.getLastRow() > 1) {
      const actHeaders = activitySheet.getRange(1, 1, 1, activitySheet.getLastColumn()).getValues()[0];
      const actData = activitySheet.getRange(2, 1, activitySheet.getLastRow() - 1, activitySheet.getLastColumn()).getValues();
      
      // Map headers to indices
      const actHeaderMap = {};
      actHeaders.forEach((header, index) => {
        actHeaderMap[header] = index;
      });
      
      // Process activities
      actData.forEach(row => {
        // Only include activities from the current user
        if (row[actHeaderMap['User Email']] === userEmail) {
          const actionType = row[actHeaderMap['Action Type']];
          const activityDate = row[actHeaderMap['Activity Date']];
          
          if (activityDate && activityDate >= startDate) {
            // Find which week this activity belongs to
            const weekIndex = Math.floor((activityDate - startDate) / (7 * 24 * 60 * 60 * 1000));
            
            if (weekIndex >= 0 && weekIndex < activity.labels.length) {
              if (actionType === 'create') {
                activity.created[weekIndex]++;
              } else if (actionType === 'edit') {
                activity.modified[weekIndex]++;
              }
            }
          }
        }
      });
    }
    
    // Get categories data for chart
    const categories = [];
    const categoryCount = {};
    
    notes.forEach(note => {
      const category = note.category || 'General';
      if (!categoryCount[category]) {
        categoryCount[category] = 0;
      }
      categoryCount[category]++;
    });
    
    Object.keys(categoryCount).forEach(category => {
      categories.push({
        name: category,
        count: categoryCount[category]
      });
    });
    
    // Get top tags
    let topTags = [];
    
    if (tagsSheet && tagsSheet.getLastRow() > 1) {
      const tagHeaders = tagsSheet.getRange(1, 1, 1, tagsSheet.getLastColumn()).getValues()[0];
      const tagData = tagsSheet.getRange(2, 1, tagsSheet.getLastRow() - 1, tagsSheet.getLastColumn()).getValues();
      
      // Map headers to indices
      const nameIndex = tagHeaders.indexOf('Tag Name');
      const colorIndex = tagHeaders.indexOf('Color');
      const countIndex = tagHeaders.indexOf('Usage Count');
      
      if (nameIndex !== -1 && countIndex !== -1) {
        // Create tag objects and sort by usage count
        topTags = tagData
          .map(row => ({
            name: row[nameIndex],
            color: colorIndex !== -1 ? row[colorIndex] : getTagColor(row[nameIndex]),
            count: row[countIndex] || 0
          }))
          .filter(tag => tag.name && tag.count > 0)
          .sort((a, b) => b.count - a.count)
          .slice(0, 5); // Top 5 tags
      }
    }
    
    // Get recent activity
    let recentActivity = [];
    
    if (activitySheet && activitySheet.getLastRow() > 1) {
      const actHeaders = activitySheet.getRange(1, 1, 1, activitySheet.getLastColumn()).getValues()[0];
      const actData = activitySheet.getRange(2, 1, activitySheet.getLastRow() - 1, activitySheet.getLastColumn()).getValues();
      
      // Map headers to indices
      const actHeaderMap = {};
      actHeaders.forEach((header, index) => {
        actHeaderMap[header] = index;
      });
      
      // Process activities
      recentActivity = actData
        .filter(row => row[actHeaderMap['User Email']] === userEmail)
        .map(row => ({
          id: row[actHeaderMap['Activity ID']],
          noteId: row[actHeaderMap['Note ID']],
          type: row[actHeaderMap['Action Type']],
          noteName: row[actHeaderMap['Note Title']],
          category: row[actHeaderMap['Note Category']],
          date: row[actHeaderMap['Activity Date']]
        }))
        .sort((a, b) => new Date(b.date) - new Date(a.date))
        .slice(0, 4); // Most recent 4 activities
    }
    
    // Get upcoming due dates
    const upcomingDueDates = notes
      .filter(note => note.dueDate)
      .map(note => ({
        id: note.id,
        title: note.title,
        dueDate: note.dueDate,
        category: note.category,
        priority: note.priority
      }))
      .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))
      .slice(0, 4); // Next 4 due dates
    
    return {
      success: true,
      stats,
      activity,
      categories,
      topTags,
      recentActivity,
      upcomingDueDates,
      notes
    };
  } catch (error) {
    logError('getGeneralNotesDashboardData', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📊 Get activity chart data for different time ranges
 * @param {Number} timeRange - Number of days to include
 * @param {String} chartType - Type of chart data (created, modified, or both)
 * @return {Object} Chart data
 */
function getNotesActivityChartData(timeRange, chartType) {
  try {
    const days = parseInt(timeRange) || 90;
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const activitySheet = ss.getSheetByName(CONFIG.SHEETS.GENERAL_NOTES_ACTIVITY);
    
    if (!activitySheet || activitySheet.getLastRow() <= 1) {
      return { 
        success: true, 
        activityData: { 
          labels: generateDateLabels(days), 
          created: new Array(Math.ceil(days/7)).fill(0), 
          modified: new Array(Math.ceil(days/7)).fill(0) 
        } 
      };
    }
    
    // Get current user
    const user = Session.getEffectiveUser();
    const userEmail = user.getEmail();
    
    // Get activity data
    const actHeaders = activitySheet.getRange(1, 1, 1, activitySheet.getLastColumn()).getValues()[0];
    const actData = activitySheet.getRange(2, 1, activitySheet.getLastRow() - 1, activitySheet.getLastColumn()).getValues();
    
    // Map headers to indices
    const actHeaderMap = {};
    actHeaders.forEach((header, index) => {
      actHeaderMap[header] = index;
    });
    
    // Prepare chart data structure
    const activityData = {
      labels: generateDateLabels(days),
      created: new Array(activityData.labels.length).fill(0),
      modified: new Array(activityData.labels.length).fill(0)
    };
    
    // Determine date range
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(endDate.getDate() - days);
    
    // Process activities
    actData.forEach(row => {
      // Only include activities from the current user
      if (row[actHeaderMap['User Email']] === userEmail) {
        const actionType = row[actHeaderMap['Action Type']];
        const activityDate = row[actHeaderMap['Activity Date']];
        
        if (activityDate && activityDate >= startDate) {
          // Find which bucket this activity belongs to
          const bucketSize = days <= 90 ? 7 : 30; // Weekly or monthly buckets
          const bucketIndex = Math.floor((activityDate - startDate) / (bucketSize * 24 * 60 * 60 * 1000));
          
          if (bucketIndex >= 0 && bucketIndex < activityData.labels.length) {
            if (actionType === 'create') {
              activityData.created[bucketIndex]++;
            } else if (actionType === 'edit') {
              activityData.modified[bucketIndex]++;
            }
          }
        }
      }
    });
    
    return { success: true, activityData };
  } catch (error) {
    logError('getNotesActivityChartData', error);
    return { success: false, message: error.toString() };
  }
}

/**
 * 📅 Generate date labels for charts
 * @param {Number} days - Number of days to include
 * @return {Array} Array of date labels
 */
function generateDateLabels(days) {
  const labels = [];
  const endDate = new Date();
  const startDate = new Date();
  startDate.setDate(endDate.getDate() - days);
  
  if (days <= 90) {
    // Weekly labels
    const weekCount = Math.ceil(days / 7);
    for (let i = 0; i < weekCount; i++) {
      const weekDate = new Date(startDate);
      weekDate.setDate(startDate.getDate() + (i * 7));
      labels.push(formatShortDate(weekDate));
    }
  } else {
    // Monthly labels
    const monthCount = Math.ceil(days / 30);
    for (let i = 0; i < monthCount; i++) {
      const monthDate = new Date(startDate);
      monthDate.setMonth(startDate.getMonth() + i);
      labels.push(formatMonth(monthDate));
    }
  }
  
  return labels;
}

/**
 * 📅 Format short date (MMM D)
 * @param {Date} date - Date to format
 * @return {String} Formatted date
 */
function formatShortDate(date) {
  if (!date) return '';
  
  const options = { month: 'short', day: 'numeric' };
  return date.toLocaleDateString('en-US', options);
}

/**
 * 📅 Format month and year (MMM YYYY)
 * @param {Date} date - Date to format
 * @return {String} Formatted month and year
 */
function formatMonth(date) {
  if (!date) return '';
  
  const options = { month: 'short', year: 'numeric' };
  return date.toLocaleDateString('en-US', options);
}

/**
 * 🛠️ Initialize all General Notes settings
 */
function initializeGeneralNotes() {
  initializeGeneralNotesSheets();
}

/**
 * ⚠️ Log errors
 * @param {String} functionName - The name of the function where the error occurred
 * @param {Object} error - The error object
 */
function logError(functionName, error) {
  console.error(`Error in ${functionName}: ${error.toString()}`);
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const errorLogSheet = ss.getSheetByName('Error Log');
    
    if (errorLogSheet) {
      errorLogSheet.appendRow([
        new Date(),
        'GeneralNotes.gs',
        functionName,
        error.toString(),
        Session.getEffectiveUser().getEmail()
      ]);
    }
  } catch (e) {
    // Cannot log to sheet, just use console
    console.error('Failed to log to error sheet:', e);
  }
}







<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Metrics Data Entry</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 20px 24px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
      position: relative;
      z-index: 2;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      font-size: 14px;
      opacity: 0.9;
      position: relative;
      z-index: 2;
    }
    
    .tab-container {
      display: flex;
      overflow-x: auto;
      background-color: white;
      box-shadow: var(--shadow-sm);
      scrollbar-width: thin;
    }
    
    .tab-button {
      padding: 16px 24px;
      background: none;
      border: none;
      border-bottom: 3px solid transparent;
      font-weight: 600;
      font-size: 14px;
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-normal);
      white-space: nowrap;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .tab-button:hover {
      color: var(--primary-color);
    }
    
    .tab-button.active {
      color: var(--primary-color);
      border-bottom-color: var(--primary-color);
    }
    
    .content {
      flex: 1;
      padding: 24px;
      background-color: var(--bg-primary);
    }
    
    .tab-content {
      display: none;
    }
    
    .tab-content.active {
      display: block;
      animation: fadeIn 0.3s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      margin-bottom: 24px;
      overflow: hidden;
      position: relative;
    }
    
    .card::after {
      content: '';
      position: absolute;
      height: 2px;
      background: linear-gradient(90deg, transparent, rgba(85, 64, 175, 0.5), transparent);
      width: 100%;
      bottom: 0;
      left: 0;
    }
    
    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 16px;
      border-bottom: 1px solid var(--border-light);
    }
    
    .card-title {
      font-family: 'Manrope', sans-serif;
      font-weight: 700;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .form-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 16px;
      margin-bottom: 20px;
    }
    
    .form-group {
      margin-bottom: 16px;
    }
    
    .form-label {
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .form-label .required {
      color: var(--danger-color);
      margin-left: 4px;
    }
    
    .form-label .goal {
      color: var(--text-tertiary);
      font-weight: normal;
      font-size: 12px;
      margin-left: 4px;
    }
    
    .input-group {
      position: relative;
    }
    
    input[type="text"],
    input[type="number"],
    input[type="date"],
    select,
    textarea {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      color: var(--text-primary);
      transition: all var(--transition-fast);
      background-color: white;
    }
    
    input[type="text"]:focus,
    input[type="number"]:focus,
    input[type="date"]:focus,
    select:focus,
    textarea:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .input-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
      pointer-events: none;
    }
    
    input.has-icon {
      padding-left: 36px;
    }
    
    .input-suffix {
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
      pointer-events: none;
      font-size: 13px;
    }
    
    .metrics-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    
    .metrics-table th,
    .metrics-table td {
      padding: 12px 16px;
      text-align: left;
      border-bottom: 1px solid var(--border-light);
    }
    
    .metrics-table th {
      background-color: var(--bg-secondary);
      font-weight: 600;
      color: var(--text-secondary);
      position: sticky;
      top: 0;
      z-index: 10;
    }
    
    .metrics-table tbody tr:hover {
      background-color: var(--bg-secondary);
    }
    
    .metrics-table td input[type="number"] {
      width: 100%;
      padding: 8px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-sm);
      text-align: center;
    }
    
    .metric-status {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 8px;
    }
    
    .metric-status.success {
      background-color: var(--success-color);
    }
    
    .metric-status.warning {
      background-color: var(--warning-color);
    }
    
    .metric-status.danger {
      background-color: var(--danger-color);
    }
    
    .team-member {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .member-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background-color: var(--primary-light);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 12px;
    }
    
    .team-member-file-upload {
      display: flex;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .file-upload-button {
      padding: 10px 16px;
      background-color: var(--bg-secondary);
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      margin-right: 10px;
      cursor: pointer;
      transition: all var(--transition-fast);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .file-upload-button:hover {
      background-color: var(--bg-tertiary);
    }
    
    .file-upload-info {
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    .actions-footer {
      display: flex;
      justify-content: space-between;
      margin-top: 24px;
      padding-top: 16px;
      border-top: 1px solid var(--border-light);
    }
    
    .btn {
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      border: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: var(--bg-secondary);
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-tertiary);
    }
    
    .btn-group {
      display: flex;
      gap: 12px;
    }
    
    .metric-help {
      font-size: 12px;
      color: var(--text-tertiary);
      margin-top: 4px;
    }
    
    .date-selector {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 24px;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(85, 64, 175, 0.3);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 16px;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    
    /* Toast notification */
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
      max-width: 400px;
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    /* Toggle switch */
    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 42px;
      height: 24px;
    }

    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--border-medium);
      transition: var(--transition-normal);
      border-radius: 34px;
    }

    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: var(--transition-normal);
      border-radius: 50%;
    }

    input:checked + .toggle-slider {
      background-color: var(--primary-color);
    }

    input:checked + .toggle-slider:before {
      transform: translateX(18px);
    }
    
    .toggle-label {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .toggle-text {
      font-size: 14px;
      color: var(--text-secondary);
    }

    /* Status badges for metrics entries */
    .status-badge {
      display: inline-block;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: 600;
      text-transform: uppercase;
    }

    .status-badge.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }

    .status-badge.warning {
      background-color: var(--warning-light);
      color: var(--warning-color);
    }

    .status-badge.danger {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .form-grid {
        grid-template-columns: 1fr;
      }
      
      .metrics-table {
        display: block;
        overflow-x: auto;
      }
      
      .actions-footer {
        flex-direction: column;
        gap: 16px;
      }
      
      .btn-group {
        flex-direction: column;
        width: 100%;
      }
      
      .btn {
        width: 100%;
        justify-content: center;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <!-- Header section -->
    <header class="header">
      <div class="header-title">
        <i class="fas fa-chart-line"></i> Metrics Data Entry
      </div>
      <div class="header-subtitle">
        Enter and track performance metrics for your team and individual team members
      </div>
    </header>

    <!-- Tab navigation -->
    <div class="tab-container">
      <button class="tab-button active" data-tab="team">
        <i class="fas fa-users"></i> Team Metrics
      </button>
      <button class="tab-button" data-tab="individual">
        <i class="fas fa-user"></i> Individual Metrics
      </button>
      <button class="tab-button" data-tab="import">
        <i class="fas fa-file-import"></i> Import Data
      </button>
    </div>

    <!-- Main content area -->
    <div class="content">
      <!-- Team Metrics Tab -->
      <div class="tab-content active" id="team-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-users-cog"></i> Team Performance Metrics
            </div>
          </div>
          
          <form id="teamMetricsForm">
            <div class="date-selector">
              <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label" for="teamMetricsDate">Date <span class="required">*</span></label>
                <div class="input-group">
                  <i class="fas fa-calendar input-icon"></i>
                  <input type="date" id="teamMetricsDate" name="date" class="has-icon" required>
                </div>
              </div>
              
              <button type="button" id="setTodayBtn" class="btn btn-secondary">
                <i class="fas fa-calendar-day"></i> Today
              </button>
            </div>
            
            <div class="form-grid">
              <div class="form-group">
                <label class="form-label" for="callsOffered">Calls Offered <span class="required">*</span></label>
                <div class="input-group">
                  <input type="number" id="callsOffered" name="callsOffered" min="0" step="1" required>
                  <span class="input-suffix">calls</span>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="callsAccepted">Calls Accepted <span class="required">*</span></label>
                <div class="input-group">
                  <input type="number" id="callsAccepted" name="callsAccepted" min="0" step="1" required>
                  <span class="input-suffix">calls</span>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="answerRate">Answer Rate <span class="goal">(Goal: 95% & Higher)</span></label>
                <div class="input-group">
                  <input type="number" id="answerRate" name="answerRate" min="0" max="100" step="0.1">
                  <span class="input-suffix">%</span>
                </div>
                <div class="metric-help">This will be calculated automatically</div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="averageTalkTime">Average Talk Time <span class="goal">(Goal: 15-20 min)</span></label>
                <div class="input-group">
                  <input type="number" id="averageTalkTime" name="averageTalkTime" min="0" step="0.1" required>
                  <span class="input-suffix">min</span>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="acwPercentage">ACW Percentage <span class="goal">(Goal: 5 min or less)</span></label>
                <div class="input-group">
                  <input type="number" id="acwPercentage" name="acwPercentage" min="0" step="0.1" required>
                  <span class="input-suffix">min</span>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="onQueuePercentage">On Queue Percentage <span class="goal">(Goal: 65% & Higher)</span></label>
                <div class="input-group">
                  <input type="number" id="onQueuePercentage" name="onQueuePercentage" min="0" max="100" step="0.1" required>
                  <span class="input-suffix">%</span>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="offQueuePercentage">Off Queue Percentage</label>
                <div class="input-group">
                  <input type="number" id="offQueuePercentage" name="offQueuePercentage" min="0" max="100" step="0.1">
                  <span class="input-suffix">%</span>
                </div>
                <div class="metric-help">This will be calculated automatically</div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="interactingTime">Interacting Time <span class="goal">(Goal: 4-6 hrs; ≥ 50%)</span></label>
                <div class="input-group">
                  <input type="number" id="interactingTime" name="interactingTime" min="0" step="0.1" required>
                  <span class="input-suffix">hrs</span>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="teamNotes">Notes (Optional)</label>
              <textarea id="teamNotes" name="notes" rows="3" placeholder="Add any relevant notes about today's team performance..."></textarea>
            </div>
            
            <div class="actions-footer">
              <div class="toggle-label">
                <label class="toggle-switch">
                  <input type="checkbox" id="notifyTeamToggle" name="notifyTeam">
                  <span class="toggle-slider"></span>
                </label>
                <span class="toggle-text">Notify team members about metrics</span>
              </div>
              
              <div class="btn-group">
                <button type="button" id="resetTeamForm" class="btn btn-secondary">
                  <i class="fas fa-redo"></i> Reset Form
                </button>
                <button type="submit" class="btn btn-primary">
                  <i class="fas fa-save"></i> Save Team Metrics
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>

      <!-- Individual Metrics Tab -->
      <div class="tab-content" id="individual-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-user-check"></i> Individual Performance Metrics
            </div>
          </div>
          
          <form id="individualMetricsForm">
            <div class="date-selector">
              <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label" for="individualMetricsDate">Date <span class="required">*</span></label>
                <div class="input-group">
                  <i class="fas fa-calendar input-icon"></i>
                  <input type="date" id="individualMetricsDate" name="date" class="has-icon" required>
                </div>
              </div>
              
              <button type="button" id="setTodayIndividualBtn" class="btn btn-secondary">
                <i class="fas fa-calendar-day"></i> Today
              </button>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="teamMemberSelect">Select Team Member <span class="required">*</span></label>
              <select id="teamMemberSelect" name="teamMemberId" required>
                <option value="">-- Select Team Member --</option>
                <!-- Team members will be loaded dynamically -->
              </select>
            </div>
            
            <div class="form-grid">
              <div class="form-group">
                <label class="form-label" for="individualCallsOffered">Calls Offered <span class="required">*</span></label>
                <div class="input-group">
                  <input type="number" id="individualCallsOffered" name="callsOffered" min="0" step="1" required>
                  <span class="input-suffix">calls</span>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="individualCallsAccepted">Calls Accepted <span class="required">*</span></label>
                <div class="input-group">
                  <input type="number" id="individualCallsAccepted" name="callsAccepted" min="0" step="1" required>
                  <span class="input-suffix">calls</span>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="individualAnswerRate">Answer Rate <span class="goal">(Goal: 95% & Higher)</span></label>
                <div class="input-group">
                  <input type="number" id="individualAnswerRate" name="answerRate" min="0" max="100" step="0.1">
                  <span class="input-suffix">%</span>
                </div>
                <div class="metric-help">This will be calculated automatically</div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="individualAverageTalkTime">Average Talk Time <span class="goal">(Goal: 15-20 min)</span></label>
                <div class="input-group">
                  <input type="number" id="individualAverageTalkTime" name="averageTalkTime" min="0" step="0.1" required>
                  <span class="input-suffix">min</span>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="individualAcwPercentage">ACW Percentage <span class="goal">(Goal: 5 min or less)</span></label>
                <div class="input-group">
                  <input type="number" id="individualAcwPercentage" name="acwPercentage" min="0" step="0.1" required>
                  <span class="input-suffix">min</span>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="individualOnQueuePercentage">On Queue Percentage <span class="goal">(Goal: 65% & Higher)</span></label>
                <div class="input-group">
                  <input type="number" id="individualOnQueuePercentage" name="onQueuePercentage" min="0" max="100" step="0.1" required>
                  <span class="input-suffix">%</span>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="individualOffQueuePercentage">Off Queue Percentage</label>
                <div class="input-group">
                  <input type="number" id="individualOffQueuePercentage" name="offQueuePercentage" min="0" max="100" step="0.1">
                  <span class="input-suffix">%</span>
                </div>
                <div class="metric-help">This will be calculated automatically</div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="individualInteractingTime">Interacting Time <span class="goal">(Goal: 4-6 hrs; ≥ 50%)</span></label>
                <div class="input-group">
                  <input type="number" id="individualInteractingTime" name="interactingTime" min="0" step="0.1" required>
                  <span class="input-suffix">hrs</span>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="individualNotes">Notes (Optional)</label>
              <textarea id="individualNotes" name="notes" rows="3" placeholder="Add any relevant notes about this team member's performance..."></textarea>
            </div>
            
            <div class="actions-footer">
              <div class="toggle-label">
                <label class="toggle-switch">
                  <input type="checkbox" id="notifyMemberToggle" name="notifyMember">
                  <span class="toggle-slider"></span>
                </label>
                <span class="toggle-text">Notify team member about their metrics</span>
              </div>
              
              <div class="btn-group">
                <button type="button" id="resetIndividualForm" class="btn btn-secondary">
                  <i class="fas fa-redo"></i> Reset Form
                </button>
                <button type="submit" class="btn btn-primary">
                  <i class="fas fa-save"></i> Save Individual Metrics
                </button>
              </div>
            </div>
          </form>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-users"></i> Bulk Individual Metrics Entry
            </div>
          </div>
          
          <p>Enter metrics for multiple team members for the selected date.</p>
          
          <div class="date-selector">
            <div class="form-group" style="margin-bottom: 0;">
              <label class="form-label" for="bulkMetricsDate">Date <span class="required">*</span></label>
              <div class="input-group">
                <i class="fas fa-calendar input-icon"></i>
                <input type="date" id="bulkMetricsDate" name="date" class="has-icon" required>
              </div>
            </div>
            
            <button type="button" id="setTodayBulkBtn" class="btn btn-secondary">
              <i class="fas fa-calendar-day"></i> Today
            </button>
          </div>
          
          <div style="overflow-x: auto;">
            <table class="metrics-table" id="bulkMetricsTable">
              <thead>
                <tr>
                  <th>Team Member</th>
                  <th>Calls Offered</th>
                  <th>Calls Accepted</th>
                  <th>Answer Rate</th>
                  <th>Avg Talk Time</th>
                  <th>ACW</th>
                  <th>On Queue %</th>
                  <th>Off Queue %</th>
                  <th>Interacting Time</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                <!-- Team members will be loaded dynamically -->
              </tbody>
            </table>
          </div>
          
          <div class="actions-footer">
            <div class="toggle-label">
              <label class="toggle-switch">
                <input type="checkbox" id="notifyAllToggle" name="notifyAll">
                <span class="toggle-slider"></span>
              </label>
              <span class="toggle-text">Notify all team members about their metrics</span>
            </div>
            
            <div class="btn-group">
              <button type="button" id="calculateAllBtn" class="btn btn-secondary">
                <i class="fas fa-calculator"></i> Calculate All
              </button>
              <button type="button" id="saveBulkBtn" class="btn btn-primary">
                <i class="fas fa-save"></i> Save All Metrics
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Import Data Tab -->
      <div class="tab-content" id="import-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-file-import"></i> Import Metrics Data
            </div>
          </div>
          
          <p>Import metrics data from a CSV or Excel file. Download the template to ensure your data is correctly formatted.</p>
          
          <div style="margin: 24px 0;">
            <button type="button" id="downloadTemplateBtn" class="btn btn-secondary">
              <i class="fas fa-file-download"></i> Download Template
            </button>
          </div>
          
          <form id="importForm">
            <div class="date-selector">
              <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label" for="importDate">Date <span class="required">*</span></label>
                <div class="input-group">
                  <i class="fas fa-calendar input-icon"></i>
                  <input type="date" id="importDate" name="date" class="has-icon" required>
                </div>
              </div>
              
              <button type="button" id="setTodayImportBtn" class="btn btn-secondary">
                <i class="fas fa-calendar-day"></i> Today
              </button>
            </div>
            
            <div class="team-member-file-upload">
              <label for="fileUpload" class="file-upload-button">
                <i class="fas fa-file-upload"></i> Choose File
              </label>
              <input type="file" id="fileUpload" name="fileUpload" style="display: none;" accept=".csv,.xlsx,.xls">
              <span id="fileUploadInfo" class="file-upload-info">No file selected</span>
            </div>
            
            <div class="form-group">
              <label class="form-label">Import Options</label>
              <div style="display: flex; flex-direction: column; gap: 10px; margin-top: 10px;">
                <div class="toggle-label">
                  <label class="toggle-switch">
                    <input type="checkbox" id="overwriteToggle" name="overwrite" checked>
                    <span class="toggle-slider"></span>
                  </label>
                  <span class="toggle-text">Overwrite existing metrics for the same date</span>
                </div>
                
                <div class="toggle-label">
                  <label class="toggle-switch">
                    <input type="checkbox" id="skipErrorsToggle" name="skipErrors" checked>
                    <span class="toggle-slider"></span>
                  </label>
                  <span class="toggle-text">Skip rows with errors during import</span>
                </div>
              </div>
            </div>
            
            <div class="actions-footer">
              <div></div>
              
              <div class="btn-group">
                <button type="button" id="resetImportForm" class="btn btn-secondary">
                  <i class="fas fa-redo"></i> Reset
                </button>
                <button type="submit" class="btn btn-primary">
                  <i class="fas fa-file-import"></i> Import Data
                </button>
              </div>
            </div>
          </form>
        </div>
        
        <div class="card" id="importResultsCard" style="display: none;">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-list-check"></i> Import Results
            </div>
          </div>
          
          <div id="importResults">
            <!-- Results will be displayed here -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Processing...</div>
  </div>

  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Metrics have been saved successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>

  <script>
    // Global variables
    let teamMembers = [];
    
    // Initialize the form when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set today's date as default for all date fields
      const today = new Date();
      const formattedDate = formatDateForInput(today);
      document.getElementById('teamMetricsDate').value = formattedDate;
      document.getElementById('individualMetricsDate').value = formattedDate;
      document.getElementById('bulkMetricsDate').value = formattedDate;
      document.getElementById('importDate').value = formattedDate;
      
      // Load team members
      loadTeamMembers();
      
      // Set up event listeners
      setupEventListeners();
      
      // Set up form calculations
      setupCalculations();
    });
    
    // Load team members from server
    function loadTeamMembers() {
      showLoading('Loading team members...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          if (result.success) {
            teamMembers = result.teamMembers;
            populateTeamMembers();
          } else {
            showToast('Error', result.message || 'Failed to load team members', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading team members:', error);
          showToast('Error', 'Failed to load team members', 'error');
        })
        .getTeamMembers();
    }
    
    // Populate team members in the select and bulk entry table
    function populateTeamMembers() {
      // Populate select dropdown
      const select = document.getElementById('teamMemberSelect');
      select.innerHTML = '<option value="">-- Select Team Member --</option>';
      
      teamMembers.forEach(member => {
        const option = document.createElement('option');
        option.value = member.id;
        option.textContent = member.name;
        select.appendChild(option);
      });
      
      // Populate bulk metrics table
      const bulkTableBody = document.querySelector('#bulkMetricsTable tbody');
      bulkTableBody.innerHTML = '';
      
      teamMembers.forEach(member => {
        const row = document.createElement('tr');
        row.dataset.memberId = member.id;
        
        const initialLetters = member.name.split(' ').map(n => n[0]).join('');
        
        row.innerHTML = `
          <td>
            <div class="team-member">
              <div class="member-avatar">${initialLetters}</div>
              <div>${member.name}</div>
            </div>
          </td>
          <td>
            <input type="number" name="callsOffered_${member.id}" min="0" step="1">
          </td>
          <td>
            <input type="number" name="callsAccepted_${member.id}" min="0" step="1">
          </td>
          <td>
            <input type="number" name="answerRate_${member.id}" min="0" max="100" step="0.1" readonly>
          </td>
          <td>
            <input type="number" name="averageTalkTime_${member.id}" min="0" step="0.1">
          </td>
          <td>
            <input type="number" name="acwPercentage_${member.id}" min="0" step="0.1">
          </td>
          <td>
            <input type="number" name="onQueuePercentage_${member.id}" min="0" max="100" step="0.1">
          </td>
          <td>
            <input type="number" name="offQueuePercentage_${member.id}" min="0" max="100" step="0.1" readonly>
          </td>
          <td>
            <input type="number" name="interactingTime_${member.id}" min="0" step="0.1">
          </td>
          <td>
            <div class="status-badge">—</div>
          </td>
        `;
        
        bulkTableBody.appendChild(row);
        
        // Add event listeners for auto-calculations in each row
        const callsOfferedInput = row.querySelector(`input[name="callsOffered_${member.id}"]`);
        const callsAcceptedInput = row.querySelector(`input[name="callsAccepted_${member.id}"]`);
        const answerRateInput = row.querySelector(`input[name="answerRate_${member.id}"]`);
        const onQueueInput = row.querySelector(`input[name="onQueuePercentage_${member.id}"]`);
        const offQueueInput = row.querySelector(`input[name="offQueuePercentage_${member.id}"]`);
        
        // Calculate answer rate when calls offered or calls accepted change
        callsOfferedInput.addEventListener('input', function() {
          calculateAnswerRate(callsOfferedInput, callsAcceptedInput, answerRateInput);
          updateRowStatus(row);
        });
        
        callsAcceptedInput.addEventListener('input', function() {
          calculateAnswerRate(callsOfferedInput, callsAcceptedInput, answerRateInput);
          updateRowStatus(row);
        });
        
        // Calculate off queue when on queue changes
        onQueueInput.addEventListener('input', function() {
          calculateOffQueue(onQueueInput, offQueueInput);
          updateRowStatus(row);
        });
        
        // Update status when any metric changes
        row.querySelectorAll('input').forEach(input => {
          input.addEventListener('input', function() {
            updateRowStatus(row);
          });
        });
      });
    }
    
    // Set up event listeners
    function setupEventListeners() {
      // Tab switching
      const tabButtons = document.querySelectorAll('.tab-button');
      const tabContents = document.querySelectorAll('.tab-content');
      
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tab = this.dataset.tab;
          
          // Update active tab button
          tabButtons.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
          
          // Show selected tab content
          tabContents.forEach(content => content.classList.remove('active'));
          document.getElementById(`${tab}-tab`).classList.add('active');
        });
      });
      
      // Set today button click handlers
      document.getElementById('setTodayBtn').addEventListener('click', function() {
        document.getElementById('teamMetricsDate').value = formatDateForInput(new Date());
      });
      
      document.getElementById('setTodayIndividualBtn').addEventListener('click', function() {
        document.getElementById('individualMetricsDate').value = formatDateForInput(new Date());
      });
      
      document.getElementById('setTodayBulkBtn').addEventListener('click', function() {
        document.getElementById('bulkMetricsDate').value = formatDateForInput(new Date());
      });
      
      document.getElementById('setTodayImportBtn').addEventListener('click', function() {
        document.getElementById('importDate').value = formatDateForInput(new Date());
      });
      
      // Form submit handlers
      document.getElementById('teamMetricsForm').addEventListener('submit', function(e) {
        e.preventDefault();
        submitTeamMetrics();
      });
      
      document.getElementById('individualMetricsForm').addEventListener('submit', function(e) {
        e.preventDefault();
        submitIndividualMetrics();
      });
      
      document.getElementById('importForm').addEventListener('submit', function(e) {
        e.preventDefault();
        importMetricsData();
      });
      
      // Calculate all button handler
      document.getElementById('calculateAllBtn').addEventListener('click', calculateAllMetrics);
      
      // Save bulk metrics button handler
      document.getElementById('saveBulkBtn').addEventListener('click', saveBulkMetrics);
      
      // Reset form button handlers
      document.getElementById('resetTeamForm').addEventListener('click', function() {
        document.getElementById('teamMetricsForm').reset();
        document.getElementById('teamMetricsDate').value = formatDateForInput(new Date());
      });
      
      document.getElementById('resetIndividualForm').addEventListener('click', function() {
        document.getElementById('individualMetricsForm').reset();
        document.getElementById('individualMetricsDate').value = formatDateForInput(new Date());
      });
      
      document.getElementById('resetImportForm').addEventListener('click', function() {
        document.getElementById('importForm').reset();
        document.getElementById('importDate').value = formatDateForInput(new Date());
        document.getElementById('fileUploadInfo').textContent = 'No file selected';
        document.getElementById('importResultsCard').style.display = 'none';
      });
      
      // File upload handler
      document.getElementById('fileUpload').addEventListener('change', function(e) {
        const fileName = e.target.files[0]?.name || 'No file selected';
        document.getElementById('fileUploadInfo').textContent = fileName;
      });
      
      // Download template button
      document.getElementById('downloadTemplateBtn').addEventListener('click', downloadTemplate);
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', function() {
        document.getElementById('toast').classList.remove('visible');
      });
    }
    
    // Set up automatic calculations
    function setupCalculations() {
      // Team metrics calculations
      const teamCallsOffered = document.getElementById('callsOffered');
      const teamCallsAccepted = document.getElementById('callsAccepted');
      const teamAnswerRate = document.getElementById('answerRate');
      const teamOnQueue = document.getElementById('onQueuePercentage');
      const teamOffQueue = document.getElementById('offQueuePercentage');
      
      // Calculate answer rate when calls offered or calls accepted change
      teamCallsOffered.addEventListener('input', function() {
        calculateAnswerRate(teamCallsOffered, teamCallsAccepted, teamAnswerRate);
      });
      
      teamCallsAccepted.addEventListener('input', function() {
        calculateAnswerRate(teamCallsOffered, teamCallsAccepted, teamAnswerRate);
      });
      
      // Calculate off queue when on queue changes
      teamOnQueue.addEventListener('input', function() {
        calculateOffQueue(teamOnQueue, teamOffQueue);
      });
      
      // Individual metrics calculations
      const individualCallsOffered = document.getElementById('individualCallsOffered');
      const individualCallsAccepted = document.getElementById('individualCallsAccepted');
      const individualAnswerRate = document.getElementById('individualAnswerRate');
      const individualOnQueue = document.getElementById('individualOnQueuePercentage');
      const individualOffQueue = document.getElementById('individualOffQueuePercentage');
      
      // Calculate answer rate when calls offered or calls accepted change
      individualCallsOffered.addEventListener('input', function() {
        calculateAnswerRate(individualCallsOffered, individualCallsAccepted, individualAnswerRate);
      });
      
      individualCallsAccepted.addEventListener('input', function() {
        calculateAnswerRate(individualCallsOffered, individualCallsAccepted, individualAnswerRate);
      });
      
      // Calculate off queue when on queue changes
      individualOnQueue.addEventListener('input', function() {
        calculateOffQueue(individualOnQueue, individualOffQueue);
      });
    }
    
    // Calculate answer rate based on calls offered and calls accepted
    function calculateAnswerRate(callsOfferedInput, callsAcceptedInput, answerRateInput) {
      const callsOffered = parseFloat(callsOfferedInput.value) || 0;
      const callsAccepted = parseFloat(callsAcceptedInput.value) || 0;
      
      if (callsOffered > 0) {
        const answerRate = (callsAccepted / callsOffered) * 100;
        answerRateInput.value = answerRate.toFixed(1);
      } else {
        answerRateInput.value = '';
      }
    }
    
    // Calculate off queue percentage based on on queue percentage
    function calculateOffQueue(onQueueInput, offQueueInput) {
      const onQueuePercentage = parseFloat(onQueueInput.value) || 0;
      
      if (onQueuePercentage >= 0) {
        const offQueuePercentage = 100 - onQueuePercentage;
        offQueueInput.value = offQueuePercentage.toFixed(1);
      } else {
        offQueueInput.value = '';
      }
    }
    
    // Calculate all metrics in the bulk entry table
    function calculateAllMetrics() {
      const rows = document.querySelectorAll('#bulkMetricsTable tbody tr');
      
      rows.forEach(row => {
        const memberId = row.dataset.memberId;
        
        // Get inputs
        const callsOfferedInput = row.querySelector(`input[name="callsOffered_${memberId}"]`);
        const callsAcceptedInput = row.querySelector(`input[name="callsAccepted_${memberId}"]`);
        const answerRateInput = row.querySelector(`input[name="answerRate_${memberId}"]`);
        const onQueueInput = row.querySelector(`input[name="onQueuePercentage_${memberId}"]`);
        const offQueueInput = row.querySelector(`input[name="offQueuePercentage_${memberId}"]`);
        
        // Calculate answer rate
        calculateAnswerRate(callsOfferedInput, callsAcceptedInput, answerRateInput);
        
        // Calculate off queue percentage
        calculateOffQueue(onQueueInput, offQueueInput);
        
        // Update status indicators
        updateRowStatus(row);
      });
      
      showToast('Calculations Complete', 'All metrics have been calculated successfully.', 'success');
    }
    
    // Update status indicators in a row
    function updateRowStatus(row) {
      const memberId = row.dataset.memberId;
      
      // Get all metric inputs
      const answerRateInput = row.querySelector(`input[name="answerRate_${memberId}"]`);
      const talkTimeInput = row.querySelector(`input[name="averageTalkTime_${memberId}"]`);
      const acwInput = row.querySelector(`input[name="acwPercentage_${memberId}"]`);
      const onQueueInput = row.querySelector(`input[name="onQueuePercentage_${memberId}"]`);
      const interactingTimeInput = row.querySelector(`input[name="interactingTime_${memberId}"]`);
      
      // Get status badge
      const statusBadge = row.querySelector('.status-badge');
      
      // Check metrics against goals
      const answerRate = parseFloat(answerRateInput.value) || 0;
      const talkTime = parseFloat(talkTimeInput.value) || 0;
      const acw = parseFloat(acwInput.value) || 0;
      const onQueue = parseFloat(onQueueInput.value) || 0;
      const interactingTime = parseFloat(interactingTimeInput.value) || 0;
      
      // Check if any fields are empty (except readonly ones)
      const hasEmptyFields = ![talkTimeInput.value, acwInput.value, onQueueInput.value, interactingTimeInput.value]
        .some(value => value && value.trim() !== '');
      
      if (hasEmptyFields) {
        statusBadge.textContent = '—';
        statusBadge.className = 'status-badge';
        return;
      }
      
      // Count issues
      let criticalIssues = 0;
      let warnings = 0;
      
      // Answer rate goal: 95% & Higher
      if (answerRate < 90) {
        criticalIssues++;
      } else if (answerRate < 95) {
        warnings++;
      }
      
      // Talk time goal: 15-20 min
      if (talkTime < 10 || talkTime > 25) {
        criticalIssues++;
      } else if (talkTime < 15 || talkTime > 20) {
        warnings++;
      }
      
      // ACW goal: 5 min or less
      if (acw > 8) {
        criticalIssues++;
      } else if (acw > 5) {
        warnings++;
      }
      
      // On queue goal: 65% & Higher
      if (onQueue < 50) {
        criticalIssues++;
      } else if (onQueue < 65) {
        warnings++;
      }
      
      // Interacting time goal: 4-6 hrs; >= 50%
      if (interactingTime < 3) {
        criticalIssues++;
      } else if (interactingTime < 4 || interactingTime > 6) {
        warnings++;
      }
      
      // Update status badge
      if (criticalIssues > 0) {
        statusBadge.textContent = 'Critical';
        statusBadge.className = 'status-badge danger';
      } else if (warnings > 0) {
        statusBadge.textContent = 'Warning';
        statusBadge.className = 'status-badge warning';
      } else {
        statusBadge.textContent = 'Good';
        statusBadge.className = 'status-badge success';
      }
    }
    
    // Submit team metrics
    function submitTeamMetrics() {
      showLoading('Saving team metrics...');
      
      // Get form data
      const form = document.getElementById('teamMetricsForm');
      const formData = new FormData(form);
      const data = {};
      
      // Convert FormData to object
      formData.forEach((value, key) => {
        data[key] = value;
      });
      
      // Call server function to save metrics
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          if (result.success) {
            showToast('Success', 'Team metrics have been saved successfully!', 'success');
            // Reset form for next entry
            form.reset();
            document.getElementById('teamMetricsDate').value = formatDateForInput(new Date());
          } else {
            showToast('Error', result.message || 'Failed to save team metrics', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error saving team metrics:', error);
          showToast('Error', 'Failed to save team metrics', 'error');
        })
        .saveTeamMetrics(data);
    }
    
    // Submit individual metrics
    function submitIndividualMetrics() {
      showLoading('Saving individual metrics...');
      
      // Get form data
      const form = document.getElementById('individualMetricsForm');
      const formData = new FormData(form);
      const data = {};
      
      // Convert FormData to object
      formData.forEach((value, key) => {
        data[key] = value;
      });
      
      // Add team member name
      const teamMemberSelect = document.getElementById('teamMemberSelect');
      const selectedIndex = teamMemberSelect.selectedIndex;
      if (selectedIndex > 0) {
        data.teamMemberName = teamMemberSelect.options[selectedIndex].text;
      }
      
      // Call server function to save metrics
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          if (result.success) {
                        showToast('Success', 'Individual metrics have been saved successfully!', 'success');
            // Reset form for next entry
            form.reset();
            document.getElementById('individualMetricsDate').value = formatDateForInput(new Date());
          } else {
            showToast('Error', result.message || 'Failed to save individual metrics', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error saving individual metrics:', error);
          showToast('Error', 'Failed to save individual metrics', 'error');
        })
        .saveIndividualMetrics(data);
    }
    
    // Save bulk metrics for all team members
    function saveBulkMetrics() {
      showLoading('Saving metrics for all team members...');
      
      const date = document.getElementById('bulkMetricsDate').value;
      const notifyAll = document.getElementById('notifyAllToggle').checked;
      
      if (!date) {
        hideLoading();
        showToast('Error', 'Please select a date', 'error');
        return;
      }
      
      // Collect data for all team members
      const rows = document.querySelectorAll('#bulkMetricsTable tbody tr');
      const metricsData = [];
      
      rows.forEach(row => {
        const memberId = row.dataset.memberId;
        const memberName = row.querySelector('.team-member div:last-child').textContent;
        
        // Check if row has data
        const inputs = row.querySelectorAll('input[type="number"]');
        let hasData = false;
        
        inputs.forEach(input => {
          if (input.value && input.value.trim() !== '' && !input.readOnly) {
            hasData = true;
          }
        });
        
        if (!hasData) return; // Skip rows without data
        
        // Collect metrics for this team member
        const metrics = {
          date: date,
          teamMemberId: memberId,
          teamMemberName: memberName,
          callsOffered: row.querySelector(`input[name="callsOffered_${memberId}"]`).value || null,
          callsAccepted: row.querySelector(`input[name="callsAccepted_${memberId}"]`).value || null,
          answerRate: row.querySelector(`input[name="answerRate_${memberId}"]`).value || null,
          averageTalkTime: row.querySelector(`input[name="averageTalkTime_${memberId}"]`).value || null,
          acwPercentage: row.querySelector(`input[name="acwPercentage_${memberId}"]`).value || null,
          onQueuePercentage: row.querySelector(`input[name="onQueuePercentage_${memberId}"]`).value || null,
          offQueuePercentage: row.querySelector(`input[name="offQueuePercentage_${memberId}"]`).value || null,
          interactingTime: row.querySelector(`input[name="interactingTime_${memberId}"]`).value || null,
          notifyMember: notifyAll
        };
        
        metricsData.push(metrics);
      });
      
      if (metricsData.length === 0) {
        hideLoading();
        showToast('Error', 'No data to save. Please enter metrics for at least one team member.', 'error');
        return;
      }
      
      // Call server function to save bulk metrics
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          if (result.success) {
            showToast('Success', `Metrics saved for ${result.savedCount} team members!`, 'success');
            
            // Clear form
            rows.forEach(row => {
              const memberId = row.dataset.memberId;
              const inputs = row.querySelectorAll('input[type="number"]');
              inputs.forEach(input => input.value = '');
              const statusBadge = row.querySelector('.status-badge');
              statusBadge.textContent = '—';
              statusBadge.className = 'status-badge';
            });
            
            // Set today's date
            document.getElementById('bulkMetricsDate').value = formatDateForInput(new Date());
          } else {
            showToast('Error', result.message || 'Failed to save metrics', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error saving bulk metrics:', error);
          showToast('Error', 'Failed to save metrics', 'error');
        })
        .saveBulkMetrics(metricsData);
    }
    
    // Import metrics data from a file
    function importMetricsData() {
      const fileInput = document.getElementById('fileUpload');
      const date = document.getElementById('importDate').value;
      const overwrite = document.getElementById('overwriteToggle').checked;
      const skipErrors = document.getElementById('skipErrorsToggle').checked;
      
      if (!fileInput.files || fileInput.files.length === 0) {
        showToast('Error', 'Please select a file to import', 'error');
        return;
      }
      
      if (!date) {
        showToast('Error', 'Please select a date for the import', 'error');
        return;
      }
      
      showLoading('Importing metrics data...');
      
      // Get the file
      const file = fileInput.files[0];
      
      // Create a FileReader to read the file
      const reader = new FileReader();
      
      reader.onload = function(e) {
        const data = e.target.result;
        
        // Call server function to process the import
        google.script.run
          .withSuccessHandler(function(result) {
            hideLoading();
            if (result.success) {
              showToast('Success', `Import complete. ${result.importedCount} records imported.`, 'success');
              
              // Display import results
              document.getElementById('importResultsCard').style.display = 'block';
              
              // Format results
              let resultsHTML = `
                <div style="margin-bottom: 16px;">
                  <div style="font-weight: 600; margin-bottom: 8px; font-size: 16px;">Import Summary</div>
                  <div style="display: flex; gap: 16px; margin-bottom: 16px;">
                    <div>
                      <span style="color: var(--success-color); font-weight: 600;">${result.importedCount}</span> records imported
                    </div>
                    <div>
                      <span style="color: var(--warning-color); font-weight: 600;">${result.skippedCount}</span> records skipped
                    </div>
                    <div>
                      <span style="color: var(--danger-color); font-weight: 600;">${result.errorCount}</span> errors
                    </div>
                  </div>`;
              
              if (result.errors && result.errors.length > 0) {
                resultsHTML += `
                  <div style="font-weight: 600; margin-bottom: 8px;">Errors:</div>
                  <ul style="margin-left: 20px;">
                    ${result.errors.map(error => `<li style="margin-bottom: 4px; color: var(--danger-color);">${error}</li>`).join('')}
                  </ul>`;
              }
              
              resultsHTML += `</div>`;
              
              document.getElementById('importResults').innerHTML = resultsHTML;
              
              // Clear the file input
              fileInput.value = '';
              document.getElementById('fileUploadInfo').textContent = 'No file selected';
            } else {
              showToast('Error', result.message || 'Failed to import data', 'error');
            }
          })
          .withFailureHandler(function(error) {
            hideLoading();
            console.error('Error importing data:', error);
            showToast('Error', 'Failed to import data', 'error');
          })
          .importMetricsData({
            fileContents: data,
            fileName: file.name,
            date: date,
            overwrite: overwrite,
            skipErrors: skipErrors
          });
      };
      
      reader.onerror = function() {
        hideLoading();
        showToast('Error', 'Failed to read file', 'error');
      };
      
      reader.readAsDataURL(file);
    }
    
    // Download metrics import template
    function downloadTemplate() {
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            showToast('Success', 'Template downloaded successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to download template', 'error');
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error downloading template:', error);
          showToast('Error', 'Failed to download template', 'error');
        })
        .downloadMetricsTemplate();
    }
    
    // Format date for input fields (YYYY-MM-DD)
    function formatDateForInput(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
    
    // Show loading overlay
    function showLoading(message = 'Loading...') {
      const overlay = document.getElementById('loadingOverlay');
      const loadingText = document.querySelector('.loading-text');
      
      loadingText.textContent = message;
      overlay.classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      const overlay = document.getElementById('loadingOverlay');
      overlay.classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'success') {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      } else if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Hide toast after 5 seconds
      setTimeout(() => {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>









<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Metrics Reports</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 20px 24px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 4px;
      position: relative;
      z-index: 2;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      font-size: 14px;
      opacity: 0.9;
      position: relative;
      z-index: 2;
    }
    
    .tab-container {
      display: flex;
      overflow-x: auto;
      background-color: white;
      box-shadow: var(--shadow-sm);
      scrollbar-width: thin;
    }
    
    .tab-button {
      padding: 16px 24px;
      background: none;
      border: none;
      border-bottom: 3px solid transparent;
      font-weight: 600;
      font-size: 14px;
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-normal);
      white-space: nowrap;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .tab-button:hover {
      color: var(--primary-color);
    }
    
    .tab-button.active {
      color: var(--primary-color);
      border-bottom-color: var(--primary-color);
    }
    
    .content {
      flex: 1;
      padding: 24px;
      background-color: var(--bg-primary);
    }
    
    .tab-content {
      display: none;
    }
    
    .tab-content.active {
      display: block;
      animation: fadeIn 0.3s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      padding: 24px;
      margin-bottom: 24px;
      overflow: hidden;
      position: relative;
    }
    
    .card::after {
      content: '';
      position: absolute;
      height: 2px;
      background: linear-gradient(90deg, transparent, rgba(85, 64, 175, 0.5), transparent);
      width: 100%;
      bottom: 0;
      left: 0;
    }
    
    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 16px;
      border-bottom: 1px solid var(--border-light);
    }
    
    .card-title {
      font-family: 'Manrope', sans-serif;
      font-weight: 700;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    /* Filters */
    .filters-container {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      align-items: center;
      margin-bottom: 24px;
    }
    
    .filter-group {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .filter-label {
      font-weight: 500;
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .filter-select {
      padding: 8px 32px 8px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%2364748b' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 8px center;
      background-size: 12px;
      appearance: none;
      -webkit-appearance: none;
      min-width: 120px;
    }
    
    .filter-select:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .filter-date-input {
      padding: 8px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
    }
    
    .filter-date-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .filter-button {
      padding: 8px 16px;
      background-color: var(--primary-color);
      border: none;
      border-radius: var(--radius-md);
      color: white;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .filter-button:hover {
      background-color: var(--primary-dark);
    }
    
    .filter-button.secondary {
      background-color: var(--bg-secondary);
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .filter-button.secondary:hover {
      background-color: var(--bg-tertiary);
    }
    
    /* Metrics table */
    .metrics-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    
    .metrics-table th,
    .metrics-table td {
      padding: 12px 16px;
      text-align: left;
      border-bottom: 1px solid var(--border-light);
    }
    
    .metrics-table th {
      background-color: var(--bg-secondary);
      font-weight: 600;
      color: var(--text-secondary);
      position: sticky;
      top: 0;
      z-index: 10;
    }
    
    .metrics-table tbody tr:hover {
      background-color: var(--bg-secondary);
    }
    
    .metrics-table .goal-met {
      color: var(--success-color);
      font-weight: 500;
    }
    
    .metrics-table .goal-warning {
      color: var(--warning-color);
      font-weight: 500;
    }
    
    .metrics-table .goal-missed {
      color: var(--danger-color);
      font-weight: 500;
    }
    
    .metrics-table .highlight-row {
      background-color: var(--info-light);
    }
    
    .metrics-table .team-total {
      font-weight: 700;
      background-color: var(--bg-tertiary);
    }
    
    .metric-status {
      display: inline-block;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      margin-right: 8px;
    }
    
    .metric-status.success {
      background-color: var(--success-color);
    }
    
    .metric-status.warning {
      background-color: var(--warning-color);
    }
    
    .metric-status.danger {
      background-color: var(--danger-color);
    }
    
    /* Charts */
    .chart-container {
      position: relative;
      height: 400px;
      margin-bottom: 24px;
    }
    
    .chart-legend {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 20px;
      margin-top: 16px;
      margin-bottom: 16px;
    }
    
    .legend-item {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .legend-color {
      width: 16px;
      height: 16px;
      border-radius: 4px;
    }
    
    .chart-filters {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      gap: 16px;
      margin-bottom: 20px;
    }
    
    /* Team member */
    .team-member {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .member-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background-color: var(--primary-light);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 12px;
    }
    
    /* Pagination */
    .pagination {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 24px;
    }
    
    .pagination-info {
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    .pagination-controls {
      display: flex;
      gap: 8px;
    }
    
    .pagination-button {
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      background-color: white;
      color: var(--text-secondary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .pagination-button:hover:not(:disabled) {
      background-color: var(--bg-secondary);
      border-color: var(--text-tertiary);
    }
    
    .pagination-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .pagination-button.active {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
      color: white;
    }
    
    /* Empty state */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 60px 20px;
      text-align: center;
    }
    
    .empty-icon {
      font-size: 48px;
      color: var(--text-tertiary);
      opacity: 0.5;
      margin-bottom: 16px;
    }
    
    .empty-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .empty-message {
      color: var(--text-tertiary);
      max-width: 400px;
      margin-bottom: 24px;
    }
    
    /* Trend indicator */
    .trend-indicator {
      display: inline-flex;
      align-items: center;
      gap: 4px;
      font-size: 13px;
      font-weight: 500;
      margin-left: 6px;
    }
    
    .trend-indicator.up {
      color: var(--success-color);
    }
    
    .trend-indicator.down {
      color: var(--danger-color);
    }
    
    .trend-indicator.neutral {
      color: var(--text-tertiary);
    }
    
    /* Export options */
    .export-dropdown {
      position: relative;
      display: inline-block;
    }
    
    .export-button {
      padding: 8px 16px;
      background-color: white;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      color: var(--text-secondary);
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .export-button:hover {
      background-color: var(--bg-secondary);
    }
    
    .export-menu {
      position: absolute;
      top: 100%;
      right: 0;
      background-color: white;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-md);
      min-width: 150px;
      z-index: 100;
      display: none;
    }
    
    .export-menu.show {
      display: block;
      animation: fadeIn 0.2s ease;
    }
    
    .export-menu-item {
      padding: 10px 16px;
      display: flex;
      align-items: center;
      gap: 10px;
      color: var(--text-secondary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .export-menu-item:hover {
      background-color: var(--bg-secondary);
      color: var(--primary-color);
    }
    
    .export-menu-divider {
      height: 1px;
      background-color: var(--border-light);
      margin: 4px 0;
    }
    
    /* Goals & thresholds display */
    .metrics-goal {
      display: flex;
      align-items: center;
      margin-top: 16px;
      gap: 16px;
      flex-wrap: wrap;
    }
    
    .goal-item {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    .goal-color {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      display: inline-block;
    }
    
    .goal-color.success {
      background-color: var(--success-color);
    }
    
    .goal-color.warning {
      background-color: var(--warning-color);
    }
    
    .goal-color.danger {
      background-color: var(--danger-color);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(85, 64, 175, 0.3);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 16px;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    
    /* Toast notification */
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
      max-width: 400px;
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .filters-container {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .filter-group {
        width: 100%;
      }
      
      .filter-select, .filter-date-input {
        flex: 1;
      }
      
      .metrics-table {
        display: block;
        overflow-x: auto;
        white-space: nowrap;
      }
      
      .chart-container {
        height: 300px;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <!-- Header section -->
    <header class="header">
      <div class="header-title">
        <i class="fas fa-chart-bar"></i> Metrics Reports
      </div>
      <div class="header-subtitle">
        View and analyze performance metrics for your team and individual team members
      </div>
    </header>

    <!-- Tab navigation -->
    <div class="tab-container">
      <button class="tab-button active" data-tab="daily">
        <i class="fas fa-calendar-day"></i> Daily Metrics
      </button>
      <button class="tab-button" data-tab="weekly">
        <i class="fas fa-calendar-week"></i> Weekly Reports
      </button>
      <button class="tab-button" data-tab="monthly">
        <i class="fas fa-calendar-alt"></i> Monthly Reports
      </button>
      <button class="tab-button" data-tab="trends">
        <i class="fas fa-chart-line"></i> Performance Trends
      </button>
      <button class="tab-button" data-tab="compare">
        <i class="fas fa-balance-scale"></i> Compare Metrics
      </button>
    </div>

    <!-- Main content area -->
    <div class="content">
      <!-- Daily Metrics Tab -->
      <div class="tab-content active" id="daily-tab">
        <div class="filters-container">
          <div class="filter-group">
            <span class="filter-label">Date:</span>
            <input type="date" id="dailyDateFilter" class="filter-date-input">
          </div>
          
          <div class="filter-group">
            <span class="filter-label">View:</span>
            <select id="dailyViewFilter" class="filter-select">
              <option value="team">Team Summary</option>
              <option value="individual">Individual Metrics</option>
            </select>
          </div>
          
          <div class="filter-group" id="dailyMemberFilterGroup" style="display: none;">
            <span class="filter-label">Team Member:</span>
            <select id="dailyMemberFilter" class="filter-select">
              <option value="all">All Members</option>
              <!-- Team members will be populated dynamically -->
            </select>
          </div>
          
          <button type="button" id="dailyFilterBtn" class="filter-button">
            <i class="fas fa-search"></i> Apply Filters
          </button>
          
          <div class="export-dropdown" style="margin-left: auto;">
            <button type="button" id="dailyExportBtn" class="export-button">
              <i class="fas fa-download"></i> Export
            </button>
            <div class="export-menu" id="dailyExportMenu">
              <div class="export-menu-item" data-format="excel">
                <i class="fas fa-file-excel"></i> Export to Excel
              </div>
              <div class="export-menu-item" data-format="csv">
                <i class="fas fa-file-csv"></i> Export to CSV
              </div>
              <div class="export-menu-divider"></div>
              <div class="export-menu-item" data-format="pdf">
                <i class="fas fa-file-pdf"></i> Export to PDF
              </div>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-table"></i> <span id="dailyReportTitle">Daily Team Metrics Summary</span>
            </div>
          </div>
          
          <div id="dailyTableContainer">
            <table class="metrics-table" id="dailyMetricsTable">
              <thead>
                <tr>
                  <th>Metric</th>
                  <th>Value</th>
                  <th>Goal</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                <!-- Data will be loaded dynamically -->
                <tr>
                  <td>Calls Offered</td>
                  <td>125</td>
                  <td>—</td>
                  <td>—</td>
                </tr>
                <tr>
                  <td>Calls Accepted</td>
                  <td>120</td>
                  <td>—</td>
                  <td>—</td>
                </tr>
                <tr>
                  <td>Answer Rate</td>
                  <td class="goal-met">96.0%</td>
                  <td>95% & Higher</td>
                  <td><span class="metric-status success"></span> Goal Met</td>
                </tr>
                <tr>
                  <td>Average Talk Time</td>
                  <td class="goal-met">17.5 min</td>
                  <td>15-20 min</td>
                  <td><span class="metric-status success"></span> Goal Met</td>
                </tr>
                <tr>
                  <td>ACW Percentage</td>
                  <td class="goal-warning">5.8 min</td>
                  <td>5 min or less</td>
                  <td><span class="metric-status warning"></span> Near Goal</td>
                </tr>
                <tr>
                  <td>On Queue Percentage</td>
                  <td class="goal-met">68.2%</td>
                  <td>65% & Higher</td>
                  <td><span class="metric-status success"></span> Goal Met</td>
                </tr>
                <tr>
                  <td>Off Queue Percentage</td>
                  <td>31.8%</td>
                  <td>—</td>
                  <td>—</td>
                </tr>
                <tr>
                  <td>Interacting Time</td>
                  <td class="goal-met">5.2 hrs</td>
                  <td>4-6 hrs; ≥ 50%</td>
                  <td><span class="metric-status success"></span> Goal Met</td>
                </tr>
              </tbody>
            </table>
          </div>
          
          <!-- Daily metrics chart -->
          <div class="chart-container" id="dailyChartContainer" style="display: none;">
            <canvas id="dailyMetricsChart"></canvas>
          </div>
          
          <div class="metrics-goal">
            <div class="goal-item">
              <span class="goal-color success"></span> Goal Met
            </div>
            <div class="goal-item">
              <span class="goal-color warning"></span> Near Goal
            </div>
            <div class="goal-item">
              <span class="goal-color danger"></span> Below Goal
            </div>
          </div>
          
          <div class="pagination">
            <div class="pagination-info" id="dailyPaginationInfo">Showing 1-8 of 8 metrics</div>
            
            <div class="pagination-controls" id="dailyPaginationControls" style="display: none;">
              <button type="button" class="pagination-button" disabled>
                <i class="fas fa-chevron-left"></i>
              </button>
              <button type="button" class="pagination-button active">1</button>
              <button type="button" class="pagination-button">2</button>
              <button type="button" class="pagination-button">3</button>
              <button type="button" class="pagination-button">
                <i class="fas fa-chevron-right"></i>
              </button>
            </div>
          </div>
        </div>
        
        <div class="card" id="dailyNotesCard">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-sticky-note"></i> Notes
            </div>
          </div>
          
          <div id="dailyNotesContainer">
            <p>No notes available for this date.</p>
          </div>
        </div>
      </div>
      
      <!-- Weekly Reports Tab -->
      <div class="tab-content" id="weekly-tab">
        <div class="filters-container">
          <div class="filter-group">
            <span class="filter-label">Week:</span>
            <input type="date" id="weekStartFilter" class="filter-date-input">
            <span class="filter-label">to</span>
            <input type="date" id="weekEndFilter" class="filter-date-input" disabled>
          </div>
          
          <div class="filter-group">
            <span class="filter-label">View:</span>
            <select id="weeklyViewFilter" class="filter-select">
              <option value="team">Team Summary</option>
              <option value="individual">Individual Metrics</option>
            </select>
          </div>
          
          <div class="filter-group" id="weeklyMemberFilterGroup" style="display: none;">
            <span class="filter-label">Team Member:</span>
            <select id="weeklyMemberFilter" class="filter-select">
              <option value="all">All Members</option>
              <!-- Team members will be populated dynamically -->
            </select>
          </div>
          
          <button type="button" id="weeklyFilterBtn" class="filter-button">
            <i class="fas fa-search"></i> Apply Filters
          </button>
          
          <div class="export-dropdown" style="margin-left: auto;">
            <button type="button" id="weeklyExportBtn" class="export-button">
              <i class="fas fa-download"></i> Export
            </button>
            <div class="export-menu" id="weeklyExportMenu">
              <div class="export-menu-item" data-format="excel">
                <i class="fas fa-file-excel"></i> Export to Excel
              </div>
              <div class="export-menu-item" data-format="csv">
                <i class="fas fa-file-csv"></i> Export to CSV
              </div>
              <div class="export-menu-divider"></div>
              <div class="export-menu-item" data-format="pdf">
                <i class="fas fa-file-pdf"></i> Export to PDF
              </div>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-bar"></i> <span id="weeklyReportTitle">Weekly Team Performance Summary</span>
            </div>
          </div>
          
          <div class="chart-container">
            <canvas id="weeklyMetricsChart"></canvas>
          </div>
          
          <div class="chart-legend">
            <div class="legend-item">
              <div class="legend-color" style="background-color: rgba(85, 64, 175, 0.7);"></div>
              <span>Answer Rate (%)</span>
            </div>
            <div class="legend-item">
              <div class="legend-color" style="background-color: rgba(56, 189, 248, 0.7);"></div>
              <span>On Queue (%)</span>
            </div>
            <div class="legend-item">
              <div class="legend-color" style="background-color: rgba(16, 185, 129, 0.7);"></div>
              <span>Talk Time (min)</span>
            </div>
            <div class="legend-item">
              <div class="legend-color" style="background-color: rgba(245, 158, 11, 0.7);"></div>
              <span>ACW (min)</span>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-table"></i> Weekly Metrics Details
            </div>
          </div>
          
          <div style="overflow-x: auto;">
            <table class="metrics-table" id="weeklyMetricsTable">
              <thead>
                <tr>
                  <th>Day</th>
                  <th>Calls Offered</th>
                  <th>Calls Accepted</th>
                  <th>Answer Rate</th>
                  <th>Avg Talk Time</th>
                  <th>ACW</th>
                  <th>On Queue %</th>
                  <th>Off Queue %</th>
                  <th>Interacting Time</th>
                </tr>
              </thead>
              <tbody>
                <!-- Data will be loaded dynamically -->
                <tr>
                  <td>Monday, Apr 1</td>
                  <td>125</td>
                  <td>120</td>
                  <td class="goal-met">96.0%</td>
                  <td class="goal-met">17.5 min</td>
                  <td class="goal-warning">5.8 min</td>
                  <td class="goal-met">68.2%</td>
                  <td>31.8%</td>
                  <td class="goal-met">5.2 hrs</td>
                </tr>
                <tr>
                  <td>Tuesday, Apr 2</td>
                  <td>138</td>
                  <td>135</td>
                  <td class="goal-met">97.8%</td>
                  <td class="goal-met">16.2 min</td>
                  <td class="goal-met">4.5 min</td>
                  <td class="goal-met">70.6%</td>
                  <td>29.4%</td>
                  <td class="goal-met">5.5 hrs</td>
                </tr>
                <tr>
                  <td>Wednesday, Apr 3</td>
                  <td>142</td>
                  <td>132</td>
                  <td class="goal-warning">93.0%</td>
                  <td class="goal-missed">21.3 min</td>
                  <td class="goal-warning">6.2 min</td>
                  <td class="goal-met">67.3%</td>
                  <td>32.7%</td>
                  <td class="goal-met">4.8 hrs</td>
                </tr>
                <tr>
                  <td>Thursday, Apr 4</td>
                  <td>132</td>
                  <td>129</td>
                  <td class="goal-met">97.7%</td>
                  <td class="goal-met">18.0 min</td>
                  <td class="goal-warning">5.9 min</td>
                  <td class="goal-met">69.1%</td>
                  <td>30.9%</td>
                  <td class="goal-met">5.0 hrs</td>
                </tr>
                <tr>
                  <td>Friday, Apr 5</td>
                  <td>128</td>
                  <td>126</td>
                  <td class="goal-met">98.4%</td>
                  <td class="goal-met">16.8 min</td>
                  <td class="goal-met">4.7 min</td>
                  <td class="goal-met">71.2%</td>
                  <td>28.8%</td>
                  <td class="goal-met">5.3 hrs</td>
                </tr>
                <tr class="team-total">
                  <td>Weekly Average</td>
                  <td>133</td>
                  <td>128.4</td>
                  <td class="goal-met">96.5%</td>
                  <td class="goal-met">18.0 min</td>
                  <td class="goal-warning">5.4 min</td>
                  <td class="goal-met">69.3%</td>
                  <td>30.7%</td>
                  <td class="goal-met">5.2 hrs</td>
                </tr>
              </tbody>
            </table>
          </div>
          
          <div class="metrics-goal">
            <div class="goal-item">
              <span class="goal-color success"></span> Goal Met
            </div>
            <div class="goal-item">
              <span class="goal-color warning"></span> Near Goal
            </div>
            <div class="goal-item">
              <span class="goal-color danger"></span> Below Goal
            </div>
          </div>
        </div>
      </div>
      
      <!-- Monthly Reports Tab -->
      <div class="tab-content" id="monthly-tab">
        <div class="filters-container">
          <div class="filter-group">
            <span class="filter-label">Month:</span>
            <select id="monthFilter" class="filter-select">
              <option value="current">Current Month</option>
              <option value="previous">Previous Month</option>
              <option value="custom">Custom Month</option>
            </select>
          </div>
          
          <div class="filter-group" id="customMonthGroup" style="display: none;">
            <select id="monthSelectFilter" class="filter-select">
              <option value="1">January</option>
              <option value="2">February</option>
              <option value="3">March</option>
              <option value="4">April</option>
              <option value="5">May</option>
              <option value="6">June</option>
              <option value="7">July</option>
              <option value="8">August</option>
              <option value="9">September</option>
              <option value="10">October</option>
              <option value="11">November</option>
              <option value="12">December</option>
            </select>
            
            <select id="yearSelectFilter" class="filter-select">
              <!-- Years will be populated dynamically -->
            </select>
          </div>
          
          <div class="filter-group">
            <span class="filter-label">View:</span>
            <select id="monthlyViewFilter" class="filter-select">
              <option value="team">Team Summary</option>
              <option value="individual">Individual Metrics</option>
            </select>
          </div>
          
          <div class="filter-group" id="monthlyMemberFilterGroup" style="display: none;">
            <span class="filter-label">Team Member:</span>
            <select id="monthlyMemberFilter" class="filter-select">
              <option value="all">All Members</option>
              <!-- Team members will be populated dynamically -->
            </select>
          </div>
          
          <button type="button" id="monthlyFilterBtn" class="filter-button">
            <i class="fas fa-search"></i> Apply Filters
          </button>
          
          <div class="export-dropdown" style="margin-left: auto;">
            <button type="button" id="monthlyExportBtn" class="export-button">
              <i class="fas fa-download"></i> Export
            </button>
            <div class="export-menu" id="monthlyExportMenu">
              <div class="export-menu-item" data-format="excel">
                <i class="fas fa-file-excel"></i> Export to Excel
              </div>
              <div class="export-menu-item" data-format="csv">
                <i class="fas fa-file-csv"></i> Export to CSV
              </div>
              <div class="export-menu-divider"></div>
              <div class="export-menu-item" data-format="pdf">
                <i class="fas fa-file-pdf"></i> Export to PDF
              </div>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-line"></i> <span id="monthlyReportTitle">Monthly Performance Trends</span>
            </div>
          </div>
          
          <div class="chart-container">
            <canvas id="monthlyTrendChart"></canvas>
          </div>
          
          <div class="chart-legend">
            <div class="legend-item">
              <div class="legend-color" style="background-color: rgba(85, 64, 175, 0.7);"></div>
              <span>Call Volume</span>
            </div>
            <div class="legend-item">
              <div class="legend-color" style="background-color: rgba(16, 185, 129, 0.7);"></div>
              <span>Answer Rate (%)</span>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-pie"></i> Monthly Metrics Overview
            </div>
          </div>
          
          <div class="chart-filters">
            <span class="filter-label">Metric:</span>
            <select id="metricSelectFilter" class="filter-select">
              <option value="answerRate">Answer Rate</option>
              <option value="talkTime">Average Talk Time</option>
              <option value="acw">ACW</option>
              <option value="onQueue">On Queue Percentage</option>
              <option value="interactingTime">Interacting Time</option>
            </select>
          </div>
          
          <div class="chart-container">
            <canvas id="monthlyMetricChart"></canvas>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-table"></i> Monthly Metrics Summary
            </div>
          </div>
          
          <div id="monthlyTableContainer" style="overflow-x: auto;">
            <table class="metrics-table" id="monthlyMetricsTable">
              <thead>
                <tr>
                  <th>Week</th>
                  <th>Calls Offered</th>
                  <th>Calls Accepted</th>
                  <th>Answer Rate</th>
                  <th>Avg Talk Time</th>
                  <th>ACW</th>
                  <th>On Queue %</th>
                  <th>Interacting Time</th>
                </tr>
              </thead>
              <tbody>
                <!-- Data will be loaded dynamically -->
                <tr>
                  <td>Week 1 (Apr 1-7)</td>
                  <td>665</td>
                  <td>642</td>
                  <td class="goal-met">96.5%</td>
                  <td class="goal-met">18.0 min</td>
                  <td class="goal-warning">5.4 min</td>
                  <td class="goal-met">69.3%</td>
                  <td class="goal-met">5.2 hrs</td>
                </tr>
                <tr>
                  <td>Week 2 (Apr 8-14)</td>
                  <td>693</td>
                  <td>678</td>
                  <td class="goal-met">97.8%</td>
                  <td class="goal-met">17.2 min</td>
                  <td class="goal-met">4.8 min</td>
                  <td class="goal-met">72.1%</td>
                  <td class="goal-met">5.5 hrs</td>
                </tr>
                <tr>
                  <td>Week 3 (Apr 15-21)</td>
                  <td>712</td>
                  <td>682</td>
                  <td class="goal-warning">94.3%</td>
                  <td class="goal-met">19.5 min</td>
                  <td class="goal-warning">5.7 min</td>
                  <td class="goal-met">68.5%</td>
                  <td class="goal-met">4.9 hrs</td>
                </tr>
                <tr>
                  <td>Week 4 (Apr 22-28)</td>
                  <td>703</td>
                  <td>685</td>
                  <td class="goal-met">97.4%</td>
                  <td class="goal-met">16.8 min</td>
                  <td class="goal-met">4.5 min</td>
                  <td class="goal-met">70.9%</td>
                  <td class="goal-met">5.3 hrs</td>
                </tr>
                <tr>
                  <td>Week 5 (Apr 29-30)</td>
                  <td>276</td>
                  <td>268</td>
                  <td class="goal-met">97.1%</td>
                  <td class="goal-met">17.5 min</td>
                  <td class="goal-met">4.7 min</td>
                  <td class="goal-met">71.3%</td>
                  <td class="goal-met">5.4 hrs</td>
                </tr>
                <tr class="team-total">
                  <td>Monthly Average</td>
                  <td>3049</td>
                  <td>2955</td>
                  <td class="goal-met">96.9%</td>
                  <td class="goal-met">17.8 min</td>
                  <td class="goal-warning">5.1 min</td>
                  <td class="goal-met">70.4%</td>
                  <td class="goal-met">5.3 hrs</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
      
      <!-- Performance Trends Tab -->
      <div class="tab-content" id="trends-tab">
        <div class="filters-container">
          <div class="filter-group">
            <span class="filter-label">Date Range:</span>
            <select id="trendRangeFilter" class="filter-select">
              <option value="30">Last 30 Days</option>
              <option value="60">Last 60 Days</option>
              <option value="90" selected>Last 90 Days</option>
              <option value="180">Last 6 Months</option>
              <option value="365">Last 12 Months</option>
              <option value="custom">Custom Range</option>
            </select>
          </div>
          
          <div class="filter-group" id="customTrendRangeGroup" style="display: none;">
            <input type="date" id="trendStartFilter" class="filter-date-input">
            <span class="filter-label">to</span>
            <input type="date" id="trendEndFilter" class="filter-date-input">
          </div>
          
          <div class="filter-group">
                       <span class="filter-label">View:</span>
            <select id="trendViewFilter" class="filter-select">
              <option value="team">Team Summary</option>
              <option value="individual">Individual Metrics</option>
            </select>
          </div>
          
          <div class="filter-group" id="trendMemberFilterGroup" style="display: none;">
            <span class="filter-label">Team Member:</span>
            <select id="trendMemberFilter" class="filter-select">
              <option value="all">All Members</option>
              <!-- Team members will be populated dynamically -->
            </select>
          </div>
          
          <div class="filter-group">
            <span class="filter-label">Metric:</span>
            <select id="trendMetricFilter" class="filter-select">
              <option value="answerRate">Answer Rate</option>
              <option value="talkTime">Average Talk Time</option>
              <option value="acw">ACW</option>
              <option value="onQueue">On Queue Percentage</option>
              <option value="interactingTime">Interacting Time</option>
              <option value="all">All Metrics</option>
            </select>
          </div>
          
          <button type="button" id="trendFilterBtn" class="filter-button">
            <i class="fas fa-search"></i> Apply Filters
          </button>
          
          <div class="export-dropdown" style="margin-left: auto;">
            <button type="button" id="trendExportBtn" class="export-button">
              <i class="fas fa-download"></i> Export
            </button>
            <div class="export-menu" id="trendExportMenu">
              <div class="export-menu-item" data-format="excel">
                <i class="fas fa-file-excel"></i> Export to Excel
              </div>
              <div class="export-menu-item" data-format="csv">
                <i class="fas fa-file-csv"></i> Export to CSV
              </div>
              <div class="export-menu-divider"></div>
              <div class="export-menu-item" data-format="pdf">
                <i class="fas fa-file-pdf"></i> Export to PDF
              </div>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-line"></i> <span id="trendChartTitle">Performance Trend Analysis</span>
            </div>
          </div>
          
          <div class="chart-container">
            <canvas id="trendAnalysisChart"></canvas>
          </div>
          
          <div class="chart-legend" id="trendChartLegend">
            <div class="legend-item">
              <div class="legend-color" style="background-color: rgba(85, 64, 175, 0.7);"></div>
              <span>Answer Rate (%)</span>
            </div>
            <div class="legend-item">
              <div class="legend-color" style="background-color: rgba(16, 185, 129, 0.7);"></div>
              <span>Goal (95%)</span>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-bar"></i> Metrics Performance Over Time
            </div>
          </div>
          
          <div class="chart-container" id="metricsOverTimeContainer">
            <canvas id="metricsOverTimeChart"></canvas>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-table"></i> Trend Analysis Data
            </div>
          </div>
          
          <div style="overflow-x: auto;">
            <table class="metrics-table" id="trendDataTable">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Answer Rate</th>
                  <th>Avg Talk Time</th>
                  <th>ACW</th>
                  <th>On Queue %</th>
                  <th>Interacting Time</th>
                  <th>Trend</th>
                </tr>
              </thead>
              <tbody>
                <!-- Data will be loaded dynamically -->
                <tr>
                  <td>Jan 2025</td>
                  <td class="goal-met">96.2%</td>
                  <td class="goal-met">16.8 min</td>
                  <td class="goal-warning">5.4 min</td>
                  <td class="goal-met">67.5%</td>
                  <td class="goal-met">5.1 hrs</td>
                  <td><span class="trend-indicator neutral"><i class="fas fa-minus"></i> Stable</span></td>
                </tr>
                <tr>
                  <td>Feb 2025</td>
                  <td class="goal-met">97.1%</td>
                  <td class="goal-met">17.2 min</td>
                  <td class="goal-warning">5.2 min</td>
                  <td class="goal-met">68.9%</td>
                  <td class="goal-met">5.2 hrs</td>
                  <td><span class="trend-indicator up"><i class="fas fa-arrow-up"></i> Improving</span></td>
                </tr>
                <tr>
                  <td>Mar 2025</td>
                  <td class="goal-met">98.0%</td>
                  <td class="goal-met">16.5 min</td>
                  <td class="goal-met">4.8 min</td>
                  <td class="goal-met">70.2%</td>
                  <td class="goal-met">5.3 hrs</td>
                  <td><span class="trend-indicator up"><i class="fas fa-arrow-up"></i> Improving</span></td>
                </tr>
                <tr>
                  <td>Apr 2025</td>
                  <td class="goal-met">96.9%</td>
                  <td class="goal-met">17.8 min</td>
                  <td class="goal-warning">5.1 min</td>
                  <td class="goal-met">70.4%</td>
                  <td class="goal-met">5.3 hrs</td>
                  <td><span class="trend-indicator down"><i class="fas fa-arrow-down"></i> Declining</span></td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
      
      <!-- Compare Metrics Tab -->
      <div class="tab-content" id="compare-tab">
        <div class="filters-container">
          <div class="filter-group">
            <span class="filter-label">Comparison:</span>
            <select id="compareTypeFilter" class="filter-select">
              <option value="team-members">Team Members</option>
              <option value="time-periods">Time Periods</option>
            </select>
          </div>
          
          <!-- Team Members Comparison Filters -->
          <div id="teamMembersCompareFilters">
            <div class="filter-group">
              <span class="filter-label">Time Period:</span>
              <select id="comparePeriodFilter" class="filter-select">
                <option value="current-month">Current Month</option>
                <option value="previous-month">Previous Month</option>
                <option value="last-30-days">Last 30 Days</option>
                <option value="last-90-days">Last 90 Days</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
            
            <div class="filter-group" id="customCompareRangeGroup" style="display: none;">
              <input type="date" id="compareStartFilter" class="filter-date-input">
              <span class="filter-label">to</span>
              <input type="date" id="compareEndFilter" class="filter-date-input">
            </div>
            
            <div class="filter-group">
              <span class="filter-label">Team Members:</span>
              <select id="compareTeamMembersFilter" class="filter-select" multiple size="1">
                <!-- Team members will be populated dynamically -->
                <option value="all" selected>All Members</option>
              </select>
            </div>
          </div>
          
          <!-- Time Periods Comparison Filters -->
          <div id="timePeriodsCompareFilters" style="display: none;">
            <div class="filter-group">
              <span class="filter-label">First Period:</span>
              <select id="firstPeriodTypeFilter" class="filter-select">
                <option value="current-month">Current Month</option>
                <option value="previous-month">Previous Month</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
            
            <div class="filter-group" id="customFirstPeriodGroup" style="display: none;">
              <input type="date" id="firstPeriodStartFilter" class="filter-date-input">
              <span class="filter-label">to</span>
              <input type="date" id="firstPeriodEndFilter" class="filter-date-input">
            </div>
            
            <div class="filter-group">
              <span class="filter-label">Second Period:</span>
              <select id="secondPeriodTypeFilter" class="filter-select">
                <option value="previous-month">Previous Month</option>
                <option value="same-month-last-year">Same Month Last Year</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
            
            <div class="filter-group" id="customSecondPeriodGroup" style="display: none;">
              <input type="date" id="secondPeriodStartFilter" class="filter-date-input">
              <span class="filter-label">to</span>
              <input type="date" id="secondPeriodEndFilter" class="filter-date-input">
            </div>
            
            <div class="filter-group">
              <span class="filter-label">View:</span>
              <select id="comparePeriodViewFilter" class="filter-select">
                <option value="team">Team Summary</option>
                <option value="individual">Individual Team Member</option>
              </select>
            </div>
            
            <div class="filter-group" id="comparePeriodMemberGroup" style="display: none;">
              <span class="filter-label">Team Member:</span>
              <select id="comparePeriodMemberFilter" class="filter-select">
                <option value="all">All Members</option>
                <!-- Team members will be populated dynamically -->
              </select>
            </div>
          </div>
          
          <div class="filter-group">
            <span class="filter-label">Metric:</span>
            <select id="compareMetricFilter" class="filter-select">
              <option value="answerRate">Answer Rate</option>
              <option value="talkTime">Average Talk Time</option>
              <option value="acw">ACW</option>
              <option value="onQueue">On Queue Percentage</option>
              <option value="interactingTime">Interacting Time</option>
              <option value="all">All Metrics</option>
            </select>
          </div>
          
          <button type="button" id="compareFilterBtn" class="filter-button">
            <i class="fas fa-search"></i> Compare
          </button>
          
          <div class="export-dropdown" style="margin-left: auto;">
            <button type="button" id="compareExportBtn" class="export-button">
              <i class="fas fa-download"></i> Export
            </button>
            <div class="export-menu" id="compareExportMenu">
              <div class="export-menu-item" data-format="excel">
                <i class="fas fa-file-excel"></i> Export to Excel
              </div>
              <div class="export-menu-item" data-format="csv">
                <i class="fas fa-file-csv"></i> Export to CSV
              </div>
              <div class="export-menu-divider"></div>
              <div class="export-menu-item" data-format="pdf">
                <i class="fas fa-file-pdf"></i> Export to PDF
              </div>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-bar"></i> <span id="compareChartTitle">Team Members Comparison</span>
            </div>
          </div>
          
          <div class="chart-container">
            <canvas id="compareChart"></canvas>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-table"></i> Comparative Analysis
            </div>
          </div>
          
          <div style="overflow-x: auto;">
            <table class="metrics-table" id="compareTable">
              <thead>
                <tr id="compareTableHeader">
                  <th>Team Member</th>
                  <th>Answer Rate</th>
                  <th>Avg Talk Time</th>
                  <th>ACW</th>
                  <th>On Queue %</th>
                  <th>Interacting Time</th>
                  <th>Overall Rating</th>
                </tr>
              </thead>
              <tbody>
                <!-- Data will be loaded dynamically -->
                <tr>
                  <td>
                    <div class="team-member">
                      <div class="member-avatar">JD</div>
                      <div>Jane Doe</div>
                    </div>
                  </td>
                  <td class="goal-met">98.5%</td>
                  <td class="goal-met">16.3 min</td>
                  <td class="goal-met">4.2 min</td>
                  <td class="goal-met">73.8%</td>
                  <td class="goal-met">5.6 hrs</td>
                  <td><span class="metric-status success"></span> Excellent</td>
                </tr>
                <tr>
                  <td>
                    <div class="team-member">
                      <div class="member-avatar">JS</div>
                      <div>John Smith</div>
                    </div>
                  </td>
                  <td class="goal-met">97.2%</td>
                  <td class="goal-warning">21.1 min</td>
                  <td class="goal-warning">5.7 min</td>
                  <td class="goal-met">68.4%</td>
                  <td class="goal-met">4.9 hrs</td>
                  <td><span class="metric-status warning"></span> Good</td>
                </tr>
                <tr>
                  <td>
                    <div class="team-member">
                      <div class="member-avatar">MW</div>
                      <div>Mike Wilson</div>
                    </div>
                  </td>
                  <td class="goal-warning">92.8%</td>
                  <td class="goal-met">18.2 min</td>
                  <td class="goal-missed">7.3 min</td>
                  <td class="goal-warning">63.1%</td>
                  <td class="goal-warning">3.8 hrs</td>
                  <td><span class="metric-status danger"></span> Needs Improvement</td>
                </tr>
                <tr>
                  <td class="team-total">Team Average</td>
                  <td class="goal-met">96.9%</td>
                  <td class="goal-met">17.8 min</td>
                  <td class="goal-warning">5.1 min</td>
                  <td class="goal-met">70.4%</td>
                  <td class="goal-met">5.3 hrs</td>
                  <td><span class="metric-status success"></span> Good</td>
                </tr>
              </tbody>
            </table>
          </div>
          
          <div class="metrics-goal">
            <div class="goal-item">
              <span class="goal-color success"></span> Goal Met
            </div>
            <div class="goal-item">
              <span class="goal-color warning"></span> Near Goal
            </div>
            <div class="goal-item">
              <span class="goal-color danger"></span> Below Goal
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading data...</div>
  </div>

  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Data exported successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>

  <script>
    // Global variables
    let teamMembers = [];
    let currentMetricsData = {};
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set up tab switching
      setupTabs();
      
      // Set up export dropdowns
      setupExportDropdowns();
      
      // Set up filter visibility controls
      setupFilterVisibility();
      
      // Set dates to current date
      setDefaultDates();
      
      // Initialize year select for monthly filters
      initYearSelect();
      
      // Load team members data
      loadTeamMembers();
      
      // Load initial data for active tab
      loadInitialData();
    });
    
    // Set up tab switching
    function setupTabs() {
      const tabButtons = document.querySelectorAll('.tab-button');
      const tabContents = document.querySelectorAll('.tab-content');
      
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tab = this.getAttribute('data-tab');
          
          // Update active tab button
          tabButtons.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
          
          // Show selected tab content
          tabContents.forEach(content => content.classList.remove('active'));
          document.getElementById(tab + '-tab').classList.add('active');
          
          // Load data for the tab if needed
          loadTabData(tab);
        });
      });
    }
    
    // Set up export dropdown functionality
    function setupExportDropdowns() {
      const exportButtons = document.querySelectorAll('[id$="ExportBtn"]');
      
      exportButtons.forEach(button => {
        const menuId = button.id.replace('Btn', 'Menu');
        const menu = document.getElementById(menuId);
        
        // Toggle menu on button click
        button.addEventListener('click', function(e) {
          e.stopPropagation();
          
          // Close all other menus first
          document.querySelectorAll('.export-menu').forEach(m => {
            if (m.id !== menuId) {
              m.classList.remove('show');
            }
          });
          
          // Toggle this menu
          menu.classList.toggle('show');
        });
        
        // Handle export options
        menu.querySelectorAll('.export-menu-item').forEach(item => {
          item.addEventListener('click', function() {
            const format = this.getAttribute('data-format');
            const tabId = button.id.replace('ExportBtn', '');
            
            exportData(format, tabId);
            menu.classList.remove('show');
          });
        });
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function() {
        document.querySelectorAll('.export-menu').forEach(menu => {
          menu.classList.remove('show');
        });
      });
    }
    
    // Set up filter visibility based on selections
    function setupFilterVisibility() {
      // Daily view filter
      document.getElementById('dailyViewFilter').addEventListener('change', function() {
        const memberFilterGroup = document.getElementById('dailyMemberFilterGroup');
        memberFilterGroup.style.display = this.value === 'individual' ? 'block' : 'none';
      });
      
      // Weekly view filter
      document.getElementById('weeklyViewFilter').addEventListener('change', function() {
        const memberFilterGroup = document.getElementById('weeklyMemberFilterGroup');
        memberFilterGroup.style.display = this.value === 'individual' ? 'block' : 'none';
      });
      
      // Monthly view filter
      document.getElementById('monthlyViewFilter').addEventListener('change', function() {
        const memberFilterGroup = document.getElementById('monthlyMemberFilterGroup');
        memberFilterGroup.style.display = this.value === 'individual' ? 'block' : 'none';
      });
      
      // Monthly custom month filter
      document.getElementById('monthFilter').addEventListener('change', function() {
        const customMonthGroup = document.getElementById('customMonthGroup');
        customMonthGroup.style.display = this.value === 'custom' ? 'flex' : 'none';
      });
      
      // Trend view filter
      document.getElementById('trendViewFilter').addEventListener('change', function() {
        const memberFilterGroup = document.getElementById('trendMemberFilterGroup');
        memberFilterGroup.style.display = this.value === 'individual' ? 'block' : 'none';
      });
      
      // Trend range filter
      document.getElementById('trendRangeFilter').addEventListener('change', function() {
        const customRangeGroup = document.getElementById('customTrendRangeGroup');
        customRangeGroup.style.display = this.value === 'custom' ? 'flex' : 'none';
      });
      
      // Compare type filter
      document.getElementById('compareTypeFilter').addEventListener('change', function() {
        const teamMembersFilters = document.getElementById('teamMembersCompareFilters');
        const timePeriodsFilters = document.getElementById('timePeriodsCompareFilters');
        
        if (this.value === 'team-members') {
          teamMembersFilters.style.display = 'flex';
          timePeriodsFilters.style.display = 'none';
        } else {
          teamMembersFilters.style.display = 'none';
          timePeriodsFilters.style.display = 'flex';
        }
      });
      
      // Compare period filter
      document.getElementById('comparePeriodFilter').addEventListener('change', function() {
        const customRangeGroup = document.getElementById('customCompareRangeGroup');
        customRangeGroup.style.display = this.value === 'custom' ? 'flex' : 'none';
      });
      
      // First period type filter
      document.getElementById('firstPeriodTypeFilter').addEventListener('change', function() {
        const customGroup = document.getElementById('customFirstPeriodGroup');
        customGroup.style.display = this.value === 'custom' ? 'flex' : 'none';
      });
      
      // Second period type filter
      document.getElementById('secondPeriodTypeFilter').addEventListener('change', function() {
        const customGroup = document.getElementById('customSecondPeriodGroup');
        customGroup.style.display = this.value === 'custom' ? 'flex' : 'none';
      });
      
      // Compare period view filter
      document.getElementById('comparePeriodViewFilter').addEventListener('change', function() {
        const memberGroup = document.getElementById('comparePeriodMemberGroup');
        memberGroup.style.display = this.value === 'individual' ? 'flex' : 'none';
      });
    }
    
    // Set default dates in date filters
    function setDefaultDates() {
      const today = new Date();
      const todayString = formatDateForInput(today);
      
      // Daily metrics date
      document.getElementById('dailyDateFilter').value = todayString;
      
      // Weekly dates
      const weekStart = new Date(today);
      weekStart.setDate(today.getDate() - today.getDay()); // Go to start of week (Sunday)
      document.getElementById('weekStartFilter').value = formatDateForInput(weekStart);
      
      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekStart.getDate() + 6); // Go to end of week (Saturday)
      document.getElementById('weekEndFilter').value = formatDateForInput(weekEnd);
      
      // Trend dates
      const ninetyDaysAgo = new Date(today);
      ninetyDaysAgo.setDate(today.getDate() - 90);
      document.getElementById('trendStartFilter').value = formatDateForInput(ninetyDaysAgo);
      document.getElementById('trendEndFilter').value = todayString;
      
      // Compare dates
      document.getElementById('compareStartFilter').value = formatDateForInput(ninetyDaysAgo);
      document.getElementById('compareEndFilter').value = todayString;
      
      const thirtyDaysAgo = new Date(today);
      thirtyDaysAgo.setDate(today.getDate() - 30);
      document.getElementById('firstPeriodStartFilter').value = formatDateForInput(thirtyDaysAgo);
      document.getElementById('firstPeriodEndFilter').value = todayString;
      
      const sixtyDaysAgo = new Date(today);
      sixtyDaysAgo.setDate(today.getDate() - 60);
      document.getElementById('secondPeriodStartFilter').value = formatDateForInput(sixtyDaysAgo);
      document.getElementById('secondPeriodEndFilter').value = formatDateForInput(thirtyDaysAgo);
    }
    
    // Initialize year select dropdown
    function initYearSelect() {
      const yearSelect = document.getElementById('yearSelectFilter');
      const currentYear = new Date().getFullYear();
      
      // Add options for current year and 2 previous years
      for (let year = currentYear; year >= currentYear - 2; year--) {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        
        if (year === currentYear) {
          option.selected = true;
        }
        
        yearSelect.appendChild(option);
      }
    }
    
    // Load team members data
    function loadTeamMembers() {
      showLoading('Loading team members...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            teamMembers = result.teamMembers || [];
            populateTeamMembersDropdowns();
          } else {
            showToast('Error', result.message || 'Failed to load team members data', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading team members:', error);
          showToast('Error', 'Failed to load team members data', 'error');
        })
        .getTeamMembers();
    }
    
    // Populate team members in all dropdowns
    function populateTeamMembersDropdowns() {
      if (!teamMembers || !teamMembers.length) return;
      
      const dropdowns = [
        'dailyMemberFilter',
        'weeklyMemberFilter',
        'monthlyMemberFilter',
        'trendMemberFilter',
        'comparePeriodMemberFilter'
      ];
      
      dropdowns.forEach(dropdownId => {
        const dropdown = document.getElementById(dropdownId);
        
        if (dropdown) {
          // Clear any existing options after "All Members"
          while (dropdown.options.length > 1) {
            dropdown.remove(1);
          }
          
          // Add team members
          teamMembers.forEach(member => {
            const option = document.createElement('option');
            option.value = member.id;
            option.textContent = member.name;
            dropdown.appendChild(option);
          });
        }
      });
      
      // Handle the multi-select dropdown separately
      const multiSelect = document.getElementById('compareTeamMembersFilter');
      
      if (multiSelect) {
        // Clear any existing options after "All Members"
        while (multiSelect.options.length > 1) {
          multiSelect.remove(1);
        }
        
        // Add team members
        teamMembers.forEach(member => {
          const option = document.createElement('option');
          option.value = member.id;
          option.textContent = member.name;
          multiSelect.appendChild(option);
        });
      }
    }
    
    // Load initial data for the active tab
    function loadInitialData() {
      const activeTab = document.querySelector('.tab-button.active').getAttribute('data-tab');
      loadTabData(activeTab);
    }
    
    // Load data for a specific tab
    function loadTabData(tab) {
      switch (tab) {
        case 'daily':
          loadDailyMetrics();
          break;
        case 'weekly':
          loadWeeklyMetrics();
          break;
        case 'monthly':
          loadMonthlyMetrics();
          break;
        case 'trends':
          loadTrendMetrics();
          break;
        case 'compare':
          loadCompareMetrics();
          break;
      }
    }
    
    // Load daily metrics
    function loadDailyMetrics() {
      const date = document.getElementById('dailyDateFilter').value;
      const view = document.getElementById('dailyViewFilter').value;
      const memberId = view === 'individual' ? document.getElementById('dailyMemberFilter').value : 'team';
      
      if (!date) {
        showToast('Error', 'Please select a date', 'error');
        return;
      }
      
      showLoading('Loading daily metrics...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            currentMetricsData = result;
            
            if (view === 'team') {
              document.getElementById('dailyReportTitle').textContent = `Daily Team Metrics Summary for ${formatDate(new Date(date))}`;
              renderDailyTeamMetrics(result);
            } else {
              const memberName = getMemberName(memberId);
              document.getElementById('dailyReportTitle').textContent = `Daily Metrics for ${memberName} on ${formatDate(new Date(date))}`;
              renderDailyIndividualMetrics(result, memberId);
            }
          } else {
            showToast('Error', result.message || 'Failed to load daily metrics', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading daily metrics:', error);
          showToast('Error', 'Failed to load daily metrics', 'error');
        })
        .getDailyMetrics(date, view, memberId);
    }
    
    // Render daily team metrics
    function renderDailyTeamMetrics(data) {
      // Implement rendering of daily team metrics table and/or chart
      // This would use the data returned from the server to update the table and chart
      
      // For example, updating the table:
      const tableBody = document.getElementById('dailyMetricsTable').querySelector('tbody');
      tableBody.innerHTML = ''; // Clear existing rows
      
      // Add rows for each metric
      const metrics = data.metrics || [];
      
      metrics.forEach(metric => {
        const row = document.createElement('tr');
        
        // Determine status class
        let statusClass = '';
        let statusText = '—';
        let statusIcon = '';
        
        if (metric.hasGoal) {
          if (metric.meetsGoal) {
            statusClass = 'goal-met';
            statusText = 'Goal Met';
            statusIcon = '<span class="metric-status success"></span>';
          } else if (metric.nearGoal) {
            statusClass = 'goal-warning';
            statusText = 'Near Goal';
            statusIcon = '<span class="metric-status warning"></span>';
          } else {
            statusClass = 'goal-missed';
            statusText = 'Below Goal';
            statusIcon = '<span class="metric-status danger"></span>';
          }
        }
        
        row.innerHTML = `
          <td>${metric.name}</td>
          <td class="${statusClass}">${metric.value}</td>
          <td>${metric.goal || '—'}</td>
          <td>${metric.hasGoal ? statusIcon + ' ' + statusText : '—'}</td>
        `;
        
        tableBody.appendChild(row);
      });
      
      // Show table, hide chart
      document.getElementById('dailyTableContainer').style.display = 'block';
      document.getElementById('dailyChartContainer').style.display = 'none';
      
      // Update pagination info
      document.getElementById('dailyPaginationInfo').textContent = `Showing ${metrics.length} metrics`;
      
      // Update notes
      renderDailyNotes(data.notes);
    }
    
    // Render daily individual metrics
    function renderDailyIndividualMetrics(data, memberId) {
      // Similar to team metrics but for an individual
      // This might include different visualizations or highlight different aspects
      
      // Show chart, hide table
      document.getElementById('dailyTableContainer').style.display = 'none';
      document.getElementById('dailyChartContainer').style.display = 'block';
      
      // Create chart
      const chartCtx = document.getElementById('dailyMetricsChart').getContext('2d');
      
      // Clear any existing chart
      if (window.dailyChart) {
        window.dailyChart.destroy();
      }
      
      // Create new chart
      window.dailyChart = new Chart(chartCtx, {
        type: 'radar',
        data: {
          labels: data.chartLabels || ['Answer Rate', 'Talk Time', 'ACW', 'On Queue %', 'Interacting Time'],
          datasets: [{
            label: 'Performance',
            data: data.chartData || [95, 17, 5, 68, 5],
            fill: true,
            backgroundColor: 'rgba(85, 64, 175, 0.2)',
            borderColor: 'rgba(85, 64, 175, 1)',
            pointBackgroundColor: 'rgba(85, 64, 175, 1)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgba(85, 64, 175, 1)'
          }, {
            label: 'Goals',
            data: data.goalData || [95, 17.5, 5, 65, 5],
            fill: true,
            backgroundColor: 'rgba(16, 185, 129, 0.2)',
            borderColor: 'rgba(16, 185, 129, 1)',
            pointBackgroundColor: 'rgba(16, 185, 129, 1)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgba(16, 185, 129, 1)'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          elements: {
            line: {
              borderWidth: 3
            }
          },
          plugins: {
            legend: {
              position: 'bottom'
            }
          },
          scales: {
            r: {
              angleLines: {
                display: true
              },
              suggestedMin: 0
            }
          }
        }
      });
      
      // Update notes
      renderDailyNotes(data.notes);
    }
    
    // Render daily notes
    function renderDailyNotes(notes) {
      const notesContainer = document.getElementById('dailyNotesContainer');
      
      if (!notes || notes.length === 0) {
        notesContainer.innerHTML = '<p>No notes available for this date.</p>';
        return;
      }
      
      let notesHTML = '';
      
      notes.forEach(note => {
        notesHTML += `
          <div style="margin-bottom: 16px; padding-bottom: 16px; border-bottom: 1px solid var(--border-light);">
            <div style="font-weight: 600; margin-bottom: 8px;">${note.title || 'Note'}</div>
            <div style="white-space: pre-wrap;">${note.content || ''}</div>
            <div style="margin-top: 8px; font-size: 12px; color: var(--text-tertiary);">
              ${note.author ? 'By ' + note.author : ''} ${note.timestamp ? '• ' + formatDateTime(new Date(note.timestamp)) : ''}
            </div>
          </div>
        `;
      });
      
      notesContainer.innerHTML = notesHTML;
    }
    
    // Load weekly metrics
    function loadWeeklyMetrics() {
      const startDate = document.getElementById('weekStartFilter').value;
      const view = document.getElementById('weeklyViewFilter').value;
      const memberId = view === 'individual' ? document.getElementById('weeklyMemberFilter').value : 'team';
      
      if (!startDate) {
        showToast('Error', 'Please select a week start date', 'error');
        return;
      }
      
      // Auto-calculate end date (7 days from start)
      const endDateObj = new Date(startDate);
      endDateObj.setDate(endDateObj.getDate() + 6);
      const endDate = formatDateForInput(endDateObj);
      
      // Update the end date field
      document.getElementById('weekEndFilter').value = endDate;
      
      showLoading('Loading weekly metrics...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            currentMetricsData = result;
            
            if (view === 'team') {
              document.getElementById('weeklyReportTitle').textContent = `Weekly Team Performance: ${formatDate(new Date(startDate))} to ${formatDate(new Date(endDate))}`;
              renderWeeklyTeamMetrics(result);
            } else {
              const memberName = getMemberName(memberId);
              document.getElementById('weeklyReportTitle').textContent = `Weekly Performance for ${memberName}: ${formatDate(new Date(startDate))} to ${formatDate(new Date(endDate))}`;
              renderWeeklyIndividualMetrics(result, memberId);
            }
          } else {
            showToast('Error', result.message || 'Failed to load weekly metrics', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading weekly metrics:', error);
          showToast('Error', 'Failed to load weekly metrics', 'error');
        })
        .getWeeklyMetrics(startDate, endDate, view, memberId);
    }
    
    // Load monthly metrics
    function loadMonthlyMetrics() {
      const monthType = document.getElementById('monthFilter').value;
      let month, year;
      
      if (monthType === 'custom') {
        month = document.getElementById('monthSelectFilter').value;
        year = document.getElementById('yearSelectFilter').value;
      } else {
        const now = new Date();
        month = (monthType === 'current') ? now.getMonth() + 1 : now.getMonth();
        year = now.getFullYear();
        
        // Handle previous month being in previous year
        if (month === 0 && monthType === 'previous') {
          month = 12;
          year--;
        }
      }
      
      const view = document.getElementById('monthlyViewFilter').value;
      const memberId = view === 'individual' ? document.getElementById('monthlyMemberFilter').value : 'team';
      
      showLoading('Loading monthly metrics...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            currentMetricsData = result;
            
            const monthName = getMonthName(month);
            
            if (view === 'team') {
              document.getElementById('monthlyReportTitle').textContent = `${monthName} ${year} - Team Performance Trends`;
              renderMonthlyTeamMetrics(result);
            } else {
              const memberName = getMemberName(memberId);
              document.getElementById('monthlyReportTitle').textContent = `${monthName} ${year} - ${memberName}'s Performance Trends`;
              renderMonthlyIndividualMetrics(result, memberId);
            }
          } else {
            showToast('Error', result.message || 'Failed to load monthly metrics', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading monthly metrics:', error);
          showToast('Error', 'Failed to load monthly metrics', 'error');
        })
        .getMonthlyMetrics(month, year, view, memberId);
    }
    
    // Load trend metrics
    function loadTrendMetrics() {
      const rangeType = document.getElementById('trendRangeFilter').value;
      let startDate, endDate;
      
      if (rangeType === 'custom') {
        startDate = document.getElementById('trendStartFilter').value;
        endDate = document.getElementById('trendEndFilter').value;
      } else {
        // Calculate dates based on selected range
        const days = parseInt(rangeType);
        const now = new Date();
        endDate = formatDateForInput(now);
        
        const start = new Date();
        start.setDate(now.getDate() - days);
        startDate = formatDateForInput(start);
      }
      
      const view = document.getElementById('trendViewFilter').value;
      const memberId = view === 'individual' ? document.getElementById('trendMemberFilter').value : 'team';
      const metric = document.getElementById('trendMetricFilter').value;
      
      showLoading('Loading trend data...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            currentMetricsData = result;
            
            if (view === 'team') {
              document.getElementById('trendChartTitle').textContent = `Team Performance Trends: ${formatDate(new Date(startDate))} to ${formatDate(new Date(endDate))}`;
              renderTrendTeamMetrics(result, metric);
            } else {
              const memberName = getMemberName(memberId);
              document.getElementById('trendChartTitle').textContent = `${memberName}'s Performance Trends: ${formatDate(new Date(startDate))} to ${formatDate(new Date(endDate))}`;
              renderTrendIndividualMetrics(result, metric, memberId);
            }
          } else {
            showToast('Error', result.message || 'Failed to load trend data', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading trend data:', error);
          showToast('Error', 'Failed to load trend data', 'error');
        })
        .getTrendMetrics(startDate, endDate, view, memberId, metric);
    }
    
    // Load compare metrics
    function loadCompareMetrics() {
      const compareType = document.getElementById('compareTypeFilter').value;
      const metric = document.getElementById('compareMetricFilter').value;
      
      if (compareType === 'team-members') {
        // Team members comparison
        const periodType = document.getElementById('comparePeriodFilter').value;
        let startDate, endDate;
        
        if (periodType === 'custom') {
          startDate = document.getElementById('compareStartFilter').value;
          endDate = document.getElementById('compareEndFilter').value;
        } else {
          // Calculate dates based on selected period type
          const now = new Date();
          endDate = formatDateForInput(now);
          
          if (periodType === 'current-month') {
            // First day of current month
            startDate = formatDateForInput(new Date(now.getFullYear(), now.getMonth(), 1));
          } else if (periodType === 'previous-month') {
            // First day of previous month
            startDate = formatDateForInput(new Date(now.getFullYear(), now.getMonth() - 1, 1));
            // Last day of previous month
            endDate = formatDateForInput(new Date(now.getFullYear(), now.getMonth(), 0));
          } else if (periodType === 'last-30-days') {
            const start = new Date();
            start.setDate(now.getDate() - 30);
            startDate = formatDateForInput(start);
          } else if (periodType === 'last-90-days') {
            const start = new Date();
            start.setDate(now.getDate() - 90);
            startDate = formatDateForInput(start);
          }
        }
        
        const memberIds = Array.from(document.getElementById('compareTeamMembersFilter').selectedOptions)
          .map(option => option.value);
        
        if (memberIds.length === 0 || (memberIds.length === 1 && memberIds[0] === 'all')) {
          memberIds.length = 0; // Clear array if "all" is selected
          memberIds.push('all');
        }
        
        showLoading('Loading comparison data...');
        
        google.script.run
          .withSuccessHandler(function(result) {
            hideLoading();
            
            if (result.success) {
              currentMetricsData = result;
              document.getElementById('compareChartTitle').textContent = `Team Members Comparison: ${formatDate(new Date(startDate))} to ${formatDate(new Date(endDate))}`;
              renderTeamMembersComparison(result, metric);
            } else {
              showToast('Error', result.message || 'Failed to load comparison data', 'error');
            }
          })
          .withFailureHandler(function(error) {
            hideLoading();
            console.error('Error loading comparison data:', error);
            showToast('Error', 'Failed to load comparison data', 'error');
          })
          .compareTeamMembers(startDate, endDate, memberIds, metric);
      } else {
        // Time periods comparison
        const firstPeriodType = document.getElementById('firstPeriodTypeFilter').value;
        const secondPeriodType = document.getElementById('secondPeriodTypeFilter').value;
        
        let firstPeriodStart, firstPeriodEnd, secondPeriodStart, secondPeriodEnd;
        
        // Handle first period dates
        if (firstPeriodType === 'custom') {
          firstPeriodStart = document.getElementById('firstPeriodStartFilter').value;
          firstPeriodEnd = document.getElementById('firstPeriodEndFilter').value;
        } else {
          const now = new Date();
          
          if (firstPeriodType === 'current-month') {
            // First day of current month
            firstPeriodStart = formatDateForInput(new Date(now.getFullYear(), now.getMonth(), 1));
            // Today
            firstPeriodEnd = formatDateForInput(now);
          } else if (firstPeriodType === 'previous-month') {
            // First day of previous month
            firstPeriodStart = formatDateForInput(new Date(now.getFullYear(), now.getMonth() - 1, 1));
            // Last day of previous month
            firstPeriodEnd = formatDateForInput(new Date(now.getFullYear(), now.getMonth(), 0));
          }
        }
        
        // Handle second period dates
        if (secondPeriodType === 'custom') {
          secondPeriodStart = document.getElementById('secondPeriodStartFilter').value;
          secondPeriodEnd = document.getElementById('secondPeriodEndFilter').value;
        } else {
          const now = new Date();
          
          if (secondPeriodType === 'previous-month') {
            // First day of previous month
            secondPeriodStart = formatDateForInput(new Date(now.getFullYear(), now.getMonth() - 1, 1));
            // Last day of previous month
            secondPeriodEnd = formatDateForInput(new Date(now.getFullYear(), now.getMonth(), 0));
          } else if (secondPeriodType === 'same-month-last-year') {
            // First day of same month last year
            secondPeriodStart = formatDateForInput(new Date(now.getFullYear() - 1, now.getMonth(), 1));
            // Last day of same month last year
            secondPeriodEnd = formatDateForInput(new Date(now.getFullYear() - 1, now.getMonth() + 1, 0));
          }
        }
        
        const view = document.getElementById('comparePeriodViewFilter').value;
        const memberId = view === 'individual' ? document.getElementById('comparePeriodMemberFilter').value : 'team';
        
        showLoading('Loading comparison data...');
        
        google.script.run
          .withSuccessHandler(function(result) {
            hideLoading();
            
            if (result.success) {
              currentMetricsData = result;
              document.getElementById('compareChartTitle').textContent = 'Time Periods Comparison';
              renderTimePeriodsComparison(result, metric);
            } else {
              showToast('Error', result.message || 'Failed to load comparison data', 'error');
            }
          })
          .withFailureHandler(function(error) {
            hideLoading();
            console.error('Error loading comparison data:', error);
            showToast('Error', 'Failed to load comparison data', 'error');
          })
          .compareTimePeriods(
            firstPeriodStart, firstPeriodEnd,
            secondPeriodStart, secondPeriodEnd,
            view, memberId, metric
          );
      }
    }
    
    // Export metrics data
    function exportData(format, tabId) {
      if (!currentMetricsData || !currentMetricsData.success) {
        showToast('Error', 'No data available to export', 'error');
        return;
      }
      
      showLoading('Preparing export...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showToast('Success', `Data exported as ${format.toUpperCase()} successfully`, 'success');
            
            // If URL is provided for download, open it
            if (result.url) {
              window.open(result.url, '_blank');
            }
          } else {
            showToast('Error', result.message || `Failed to export data as ${format.toUpperCase()}`, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error exporting data:', error);
          showToast('Error', `Failed to export data as ${format.toUpperCase()}`, 'error');
        })
        .exportMetricsData(currentMetricsData, format, tabId);
    }
    
    // Get team member name by ID
    function getMemberName(memberId) {
      if (memberId === 'team' || memberId === 'all') {
        return 'All Team Members';
      }
      
      const member = teamMembers.find(m => m.id === memberId);
      return member ? member.name : 'Unknown Team Member';
    }
    
    // Format date for input fields (YYYY-MM-DD)
    function formatDateForInput(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
    
    // Format date for display (MMM D, YYYY)
    function formatDate(date) {
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return date.toLocaleDateString('en-US', options);
    }
    
    // Format date and time for display (MMM D, YYYY at HH:MM AM/PM)
    function formatDateTime(date) {
      const options = {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      };
      return date.toLocaleString('en-US', options);
    }
    
    // Get month name from number (1-12)
    function getMonthName(month) {
      const monthNames = [
        'January', 'February', 'March', 'April',
        'May', 'June', 'July', 'August',
        'September', 'October', 'November', 'December'
      ];
      return monthNames[parseInt(month) - 1] || '';
    }
    
    // Render weekly team metrics
    function renderWeeklyTeamMetrics(data) {
      // Implementation for rendering weekly team metrics
      // This would involve updating the weekly chart and table
    }
    
    // Render weekly individual metrics
    function renderWeeklyIndividualMetrics(data, memberId) {
      // Implementation for rendering weekly individual metrics
    }
    
    // Render monthly team metrics
    function renderMonthlyTeamMetrics(data) {
      // Implementation for rendering monthly team metrics
    }
    
    // Render monthly individual metrics
    function renderMonthlyIndividualMetrics(data, memberId) {
      // Implementation for rendering monthly individual metrics
    }
    
    // Render trend team metrics
    function renderTrendTeamMetrics(data, metric) {
      // Implementation for rendering trend metrics for the team
    }
    
    // Render trend individual metrics
    function renderTrendIndividualMetrics(data, metric, memberId) {
      // Implementation for rendering trend metrics for an individual
    }
    
    // Render team members comparison
    function renderTeamMembersComparison(data, metric) {
      // Implementation for comparing team members
    }
    
    // Render time periods comparison
    function renderTimePeriodsComparison(data, metric) {
      // Implementation for comparing time periods
    }
    
    // Show loading overlay
    function showLoading(message = 'Loading data...') {
      const overlay = document.getElementById('loadingOverlay');
      document.querySelector('.loading-text').textContent = message;
      overlay.classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'success') {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      } else if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Hide toast after 5 seconds
      setTimeout(() => {
        toast.classList.remove('visible');
      }, 5000);
      
      // Add click event for close button
      document.getElementById('toastClose').onclick = function() {
        toast.classList.remove('visible');
      };
    }
  </script>
</body>
</html>







<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Metrics Dashboard</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .dashboard-container {
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .dashboard-header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      box-shadow: var(--shadow-md);
      position: relative;
      overflow: hidden;
    }
    
    .dashboard-header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 28px;
      font-weight: 800;
      margin-bottom: 8px;
      position: relative;
      z-index: 2;
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .header-title i {
      font-size: 32px;
    }
    
    .header-subtitle {
      font-size: 16px;
      opacity: 0.9;
      position: relative;
      z-index: 2;
    }
    
    .dashboard-controls {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: white;
      padding: 16px 32px;
      border-bottom: 1px solid var(--border-light);
    }
    
        .view-controls {
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .view-toggle {
      display: flex;
      background-color: var(--bg-secondary);
      border-radius: 20px;
      padding: 3px;
    }
    
    .view-toggle-btn {
      padding: 8px 16px;
      border-radius: 18px;
      border: none;
      background: none;
      font-size: 13px;
      font-weight: 500;
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-normal);
    }
    
    .view-toggle-btn.active {
      background-color: white;
      box-shadow: var(--shadow-sm);
      color: var(--primary-color);
    }
    
    .view-toggle-btn:hover:not(.active) {
      color: var(--primary-light);
    }
    
    .date-range-picker {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .date-range-label {
      font-weight: 500;
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    .date-range-select {
      padding: 8px 32px 8px 12px;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-medium);
      background-color: white;
      color: var(--text-primary);
      font-size: 13px;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%2364748b' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 8px center;
      background-size: 12px;
      appearance: none;
      -webkit-appearance: none;
    }
    
    .date-range-select:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .action-buttons {
      display: flex;
      gap: 12px;
    }
    
    .btn {
      padding: 9px 16px;
      border-radius: var(--radius-md);
      font-size: 13px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      display: inline-flex;
      align-items: center;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .dashboard-content {
      flex: 1;
      padding: 24px 32px;
      display: flex;
      flex-direction: column;
      gap: 24px;
    }
    
    .metrics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
      gap: 24px;
    }
    
    .metric-card {
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-md);
      padding: 24px;
      transition: all var(--transition-normal);
      position: relative;
      overflow: hidden;
    }
    
    .metric-card:hover {
      transform: translateY(-3px);
      box-shadow: var(--shadow-lg);
    }
    
    .metric-card::after {
      content: '';
      position: absolute;
      height: 3px;
      bottom: 0;
      left: 0;
      right: 0;
    }
    
    .metric-card.success::after {
      background-color: var(--success-color);
    }
    
    .metric-card.warning::after {
      background-color: var(--warning-color);
    }
    
    .metric-card.danger::after {
      background-color: var(--danger-color);
    }
    
    .metric-title {
      font-size: 14px;
      color: var(--text-secondary);
      margin-bottom: 8px;
    }
    
    .metric-value {
      font-size: 28px;
      font-weight: 700;
      font-family: 'Manrope', sans-serif;
      margin-bottom: 4px;
    }
    
    .metric-card.success .metric-value {
      color: var(--success-color);
    }
    
    .metric-card.warning .metric-value {
      color: var(--warning-color);
    }
    
    .metric-card.danger .metric-value {
      color: var(--danger-color);
    }
    
    .metric-trend {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 13px;
    }
    
    .metric-trend.up {
      color: var(--success-color);
    }
    
    .metric-trend.down {
      color: var(--danger-color);
    }
    
    .metric-trend.neutral {
      color: var(--text-tertiary);
    }
    
    .metric-goal {
      margin-top: 12px;
      font-size: 12px;
      padding: 4px 8px;
      border-radius: 20px;
      display: inline-block;
    }
    
    .metric-goal.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .metric-goal.warning {
      background-color: var(--warning-light);
      color: var(--warning-color);
    }
    
    .metric-goal.danger {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .dashboard-row {
      display: flex;
      gap: 24px;
    }
    
    .dashboard-column {
      flex: 1;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 16px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-actions {
      display: flex;
      gap: 12px;
      align-items: center;
    }
    
    .card-content {
      padding: 20px 24px;
    }
    
    .chart-container {
      height: 300px;
      position: relative;
    }
    
    .chart-legend {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 16px;
      margin-top: 16px;
    }
    
    .legend-item {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .legend-color {
      width: 12px;
      height: 12px;
      border-radius: 3px;
    }
    
    .team-member-list {
      display: flex;
      flex-direction: column;
      gap: 16px;
    }
    
    .team-member-card {
      display: flex;
      align-items: center;
      gap: 16px;
      padding: 16px;
      border-radius: var(--radius-md);
      background-color: var(--bg-secondary);
      transition: all var(--transition-normal);
      cursor: pointer;
    }
    
    .team-member-card:hover {
      transform: translateX(5px);
      background-color: var(--bg-tertiary);
    }
    
    .member-avatar {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      background-color: var(--primary-light);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 16px;
    }
    
    .member-info {
      flex: 1;
    }
    
    .member-name {
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .member-flag {
      width: 18px;
      height: 18px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 11px;
      color: white;
    }
    
    .member-flag.warning {
      background-color: var(--warning-color);
    }
    
    .member-flag.danger {
      background-color: var(--danger-color);
    }
    
    .member-metrics {
      margin-top: 4px;
      display: flex;
      gap: 16px;
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    .member-metric {
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .member-metric.success {
      color: var(--success-color);
    }
    
    .member-metric.warning {
      color: var(--warning-color);
    }
    
    .member-metric.danger {
      color: var(--danger-color);
    }
    
    .member-trend {
      align-self: center;
      color: var(--text-tertiary);
    }
    
    .team-insights {
      display: flex;
      flex-direction: column;
      gap: 16px;
    }
    
    .insight-item {
      display: flex;
      gap: 16px;
      padding: 16px;
      border-radius: var(--radius-md);
      border-left: 3px solid transparent;
    }
    
    .insight-item.success {
      background-color: var(--success-light);
      border-left-color: var(--success-color);
    }
    
    .insight-item.warning {
      background-color: var(--warning-light);
      border-left-color: var(--warning-color);
    }
    
    .insight-item.danger {
      background-color: var(--danger-light);
      border-left-color: var(--danger-color);
    }
    
    .insight-item.info {
      background-color: var(--info-light);
      border-left-color: var(--info-color);
    }
    
    .insight-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      font-size: 18px;
    }
    
    .insight-icon.success {
      background-color: var(--success-color);
      color: white;
    }
    
    .insight-icon.warning {
      background-color: var(--warning-color);
      color: white;
    }
    
    .insight-icon.danger {
      background-color: var(--danger-color);
      color: white;
    }
    
    .insight-icon.info {
      background-color: var(--info-color);
      color: white;
    }
    
    .insight-content {
      flex: 1;
    }
    
    .insight-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .insight-description {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .heatmap {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 4px;
    }
    
    .heatmap-header {
      text-align: center;
      font-size: 12px;
      color: var(--text-tertiary);
      padding: 4px 0;
    }
    
    .heatmap-day {
      aspect-ratio: 1;
      border-radius: var(--radius-sm);
      position: relative;
    }
    
    .heatmap-day.level-0 {
      background-color: var(--bg-secondary);
    }
    
    .heatmap-day.level-1 {
      background-color: rgba(85, 64, 175, 0.2);
    }
    
    .heatmap-day.level-2 {
      background-color: rgba(85, 64, 175, 0.4);
    }
    
    .heatmap-day.level-3 {
      background-color: rgba(85, 64, 175, 0.6);
    }
    
    .heatmap-day.level-4 {
      background-color: rgba(85, 64, 175, 0.8);
    }
    
    .heatmap-tooltip {
      position: absolute;
      bottom: 110%;
      left: 50%;
      transform: translateX(-50%);
      background-color: var(--text-primary);
      color: white;
      padding: 6px 10px;
      border-radius: var(--radius-sm);
      font-size: 11px;
      white-space: nowrap;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-fast);
      z-index: 10;
    }
    
    .heatmap-day:hover .heatmap-tooltip {
      opacity: 1;
    }
    
    /* Toggle switch */
    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 38px;
      height: 20px;
    }
    
    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--border-medium);
      transition: var(--transition-normal);
      border-radius: 20px;
    }
    
    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 16px;
      width: 16px;
      left: 2px;
      bottom: 2px;
      background-color: white;
      transition: var(--transition-normal);
      border-radius: 50%;
    }
    
    input:checked + .toggle-slider {
      background-color: var(--primary-color);
    }
    
    input:checked + .toggle-slider:before {
      transform: translateX(18px);
    }
    
    .toggle-label {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .toggle-text {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    /* Alert banner */
    .alert-banner {
      margin-bottom: 24px;
      padding: 16px 24px;
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .alert-banner.warning {
      background-color: var(--warning-light);
      border-left: 4px solid var(--warning-color);
    }
    
    .alert-banner.danger {
      background-color: var(--danger-light);
      border-left: 4px solid var(--danger-color);
    }
    
    .alert-banner.success {
      background-color: var(--success-light);
      border-left: 4px solid var(--success-color);
    }
    
    .alert-icon {
      font-size: 20px;
      flex-shrink: 0;
    }
    
    .alert-banner.warning .alert-icon {
      color: var(--warning-color);
    }
    
    .alert-banner.danger .alert-icon {
      color: var(--danger-color);
    }
    
    .alert-banner.success .alert-icon {
      color: var(--success-color);
    }
    
    .alert-content {
      flex: 1;
    }
    
    .alert-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .alert-message {
      font-size: 13px;
    }
    
    .alert-close {
      cursor: pointer;
      color: var(--text-tertiary);
      padding: 4px;
      font-size: 16px;
    }
    
    /* Team member modal */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(15, 23, 42, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .modal-overlay.show {
      opacity: 1;
      pointer-events: all;
    }
    
    .modal-container {
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      overflow: hidden;
      display: flex;
      flex-direction: column;
      transform: translateY(20px);
      transition: transform var(--transition-normal);
    }
    
    .modal-overlay.show .modal-container {
      transform: translateY(0);
    }
    
    .modal-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .modal-title {
      font-family: 'Manrope', sans-serif;
      font-size: 18px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .modal-close {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .modal-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    .modal-body {
      padding: 24px;
      overflow-y: auto;
      flex: 1;
    }
    
    .modal-tabs {
      display: flex;
      border-bottom: 1px solid var(--border-light);
      margin: -24px -24px 24px -24px;
    }
    
    .modal-tab {
      padding: 16px 24px;
      font-weight: 600;
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-normal);
      border-bottom: 2px solid transparent;
    }
    
    .modal-tab.active {
      color: var(--primary-color);
      border-bottom-color: var(--primary-color);
    }
    
    .modal-tab:hover:not(.active) {
      color: var(--text-secondary);
    }
    
    .modal-section {
      display: none;
    }
    
    .modal-section.active {
      display: block;
    }
    
    .modal-footer {
      padding: 16px 24px;
      border-top: 1px solid var(--border-light);
      display: flex;
      justify-content: flex-end;
      gap: 12px;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(85, 64, 175, 0.3);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 16px;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    
    /* Toast notification */
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
      max-width: 400px;
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    /* Responsive adjustments */
    @media (max-width: 1200px) {
      .dashboard-row {
        flex-direction: column;
      }
    }
    
    @media (max-width: 768px) {
      .dashboard-header {
        padding: 20px 24px;
      }
      
      .dashboard-controls {
        flex-direction: column;
        align-items: stretch;
        gap: 16px;
        padding: 16px;
      }
      
      .date-range-picker {
        flex-wrap: wrap;
      }
      
      .action-buttons {
        justify-content: flex-end;
      }
      
      .dashboard-content {
        padding: 16px;
      }
      
      .metrics-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>

<body>
  <div class="dashboard-container">
    <header class="dashboard-header">
      <h1 class="header-title">
        <i class="fas fa-chart-line"></i> Metrics Dashboard
      </h1>
      <div class="header-subtitle">
        Monitor team and individual performance metrics and KPIs
      </div>
    </header>
    
    <div class="dashboard-controls">
      <div class="view-controls">
        <div class="view-toggle">
          <button class="view-toggle-btn active" data-view="team">Team View</button>
          <button class="view-toggle-btn" data-view="individual">Individual View</button>
        </div>
        
        <div class="date-range-picker">
          <span class="date-range-label">Time Period:</span>
          <select id="dateRangeSelect" class="date-range-select">
            <option value="today">Today</option>
            <option value="yesterday">Yesterday</option>
            <option value="thisWeek" selected>This Week</option>
            <option value="lastWeek">Last Week</option>
            <option value="thisMonth">This Month</option>
            <option value="lastMonth">Last Month</option>
            <option value="last30days">Last 30 Days</option>
            <option value="last90days">Last 90 Days</option>
            <option value="custom">Custom Range</option>
          </select>
          
          <div id="customDateRangeContainer" style="display: none; align-items: center; gap: 8px;">
            <input type="date" id="startDateInput" class="date-range-select">
            <span>to</span>
            <input type="date" id="endDateInput" class="date-range-select">
          </div>
        </div>
      </div>
      
      <div class="action-buttons">
        <button id="refreshBtn" class="btn btn-secondary">
          <i class="fas fa-sync-alt"></i> Refresh
        </button>
        <button id="exportBtn" class="btn btn-secondary">
          <i class="fas fa-file-export"></i> Export
        </button>
        <button id="enterDataBtn" class="btn btn-primary">
          <i class="fas fa-plus"></i> Enter Metrics
        </button>
      </div>
    </div>
    
    <div class="dashboard-content">
      <!-- Team View Content -->
      <div id="teamViewContent">
        <!-- Alert Banner (if needed) -->
        <div class="alert-banner warning" id="alertBanner">
          <div class="alert-icon">
            <i class="fas fa-exclamation-triangle"></i>
          </div>
          <div class="alert-content">
            <div class="alert-title">Performance Warning</div>
            <div class="alert-message">3 team members are consistently falling below target metrics.</div>
          </div>
          <div class="alert-close" id="closeAlert">
            <i class="fas fa-times"></i>
          </div>
        </div>
        
        <!-- Key Metrics Cards -->
        <div class="metrics-grid">
          <div class="metric-card success">
            <div class="metric-title">Team Answer Rate</div>
            <div class="metric-value">96.8%</div>
            <div class="metric-trend up">
              <i class="fas fa-arrow-up"></i> 2.4% vs last period
            </div>
            <div class="metric-goal success">Goal: 95% & Higher</div>
          </div>
          
          <div class="metric-card success">
            <div class="metric-title">Average Talk Time</div>
            <div class="metric-value">17.3 min</div>
            <div class="metric-trend neutral">
              <i class="fas fa-minus"></i> 0.2 min vs last period
            </div>
            <div class="metric-goal success">Goal: 15-20 min</div>
          </div>
          
          <div class="metric-card warning">
            <div class="metric-title">ACW Percentage</div>
            <div class="metric-value">5.7 min</div>
            <div class="metric-trend down">
              <i class="fas fa-arrow-down"></i> 0.8 min vs last period
            </div>
            <div class="metric-goal warning">Goal: 5 min or less</div>
          </div>
          
          <div class="metric-card success">
            <div class="metric-title">On Queue Percentage</div>
            <div class="metric-value">68.2%</div>
            <div class="metric-trend up">
              <i class="fas fa-arrow-up"></i> 3.5% vs last period
            </div>
            <div class="metric-goal success">Goal: 65% & Higher</div>
          </div>
          
          <div class="metric-card success">
            <div class="metric-title">Interacting Time</div>
            <div class="metric-value">5.2 hrs</div>
            <div class="metric-trend up">
              <i class="fas fa-arrow-up"></i> 0.3 hrs vs last period
            </div>
            <div class="metric-goal success">Goal: 4-6 hrs; ≥ 50%</div>
          </div>
          
          <div class="metric-card">
            <div class="metric-title">Total Calls Offered</div>
            <div class="metric-value">1,482</div>
            <div class="metric-trend up">
              <i class="fas fa-arrow-up"></i> 124 vs last period
            </div>
          </div>
        </div>
        
        <div class="dashboard-row">
          <div class="dashboard-column">
            <!-- Performance Trends Chart -->
            <div class="card">
              <div class="card-header">
                <div class="card-title">
                  <i class="fas fa-chart-line"></i> Team Performance Trends
                </div>
                <div class="card-actions">
                  <select id="trendMetricSelect" class="date-range-select">
                    <option value="answerRate">Answer Rate</option>
                    <option value="talkTime">Avg Talk Time</option>
                    <option value="acw">ACW</option>
                    <option value="onQueue">On Queue %</option>
                    <option value="interactingTime">Interacting Time</option>
                  </select>
                </div>
              </div>
              <div class="card-content">
                <div class="chart-container">
                  <canvas id="teamTrendsChart"></canvas>
                </div>
              </div>
            </div>
            
            <!-- Daily Activity Heatmap -->
            <div class="card">
              <div class="card-header">
                <div class="card-title">
                  <i class="fas fa-calendar-alt"></i> Daily Activity Heatmap
                </div>
              </div>
              <div class="card-content">
                <div class="heatmap">
                  <div class="heatmap-header">Mon</div>
                  <div class="heatmap-header">Tue</div>
                  <div class="heatmap-header">Wed</div>
                  <div class="heatmap-header">Thu</div>
                  <div class="heatmap-header">Fri</div>
                  <div class="heatmap-header">Sat</div>
                  <div class="heatmap-header">Sun</div>
                  
                  <!-- Sample heatmap days - will be generated dynamically -->
                  <div class="heatmap-day level-4">
                    <div class="heatmap-tooltip">Apr 1: 98.5% Answer Rate</div>
                  </div>
                  <div class="heatmap-day level-3">
                    <div class="heatmap-tooltip">Apr 2: 96.2% Answer Rate</div>
                  </div>
                  <div class="heatmap-day level-2">
                    <div class="heatmap-tooltip">Apr 3: 94.8% Answer Rate</div>
                  </div>
                  <div class="heatmap-day level-3">
                    <div class="heatmap-tooltip">Apr 4: 95.9% Answer Rate</div>
                  </div>
                  <div class="heatmap-day level-4">
                    <div class="heatmap-tooltip">Apr 5: 97.5% Answer Rate</div>
                  </div>
                  <div class="heatmap-day level-0">
                    <div class="heatmap-tooltip">Apr 6: No Data</div>
                  </div>
                  <div class="heatmap-day level-0">
                    <div class="heatmap-tooltip">Apr 7: No Data</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="dashboard-column">
            <!-- Team Members Performance -->
            <div class="card">
              <div class="card-header">
                <div class="card-title">
                  <i class="fas fa-user-friends"></i> Team Members Performance
                </div>
                <div class="card-actions">
                  <div class="toggle-label">
                    <span class="toggle-text">Show flagged only</span>
                    <label class="toggle-switch">
                      <input type="checkbox" id="showFlaggedOnly">
                      <span class="toggle-slider"></span>
                    </label>
                  </div>
                </div>
              </div>
              <div class="card-content">
                <div class="team-member-list" id="teamMembersList">
                  <!-- Team members will be loaded dynamically -->
                  <div class="team-member-card" data-member-id="1">
                    <div class="member-avatar">JD</div>
                    <div class="member-info">
                      <div class="member-name">
                        Jane Doe
                        <div class="member-flag danger">
                          <i class="fas fa-exclamation"></i>
                        </div>
                      </div>
                      <div class="member-metrics">
                        <div class="member-metric success">
                          <i class="fas fa-phone-alt"></i> 97.2%
                        </div>
                        <div class="member-metric danger">
                          <i class="fas fa-clock"></i> 8.3 min
                        </div>
                        <div class="member-metric warning">
                          <i class="fas fa-percentage"></i> 63.8%
                        </div>
                      </div>
                    </div>
                    <div class="member-trend">
                      <i class="fas fa-chevron-right"></i>
                    </div>
                  </div>
                  
                  <div class="team-member-card" data-member-id="2">
                    <div class="member-avatar">JS</div>
                    <div class="member-info">
                      <div class="member-name">
                        John Smith
                      </div>
                      <div class="member-metrics">
                        <div class="member-metric success">
                          <i class="fas fa-phone-alt"></i> 98.6%
                        </div>
                        <div class="member-metric success">
                          <i class="fas fa-clock"></i> 4.2 min
                        </div>
                        <div class="member-metric success">
                          <i class="fas fa-percentage"></i> 72.5%
                        </div>
                      </div>
                    </div>
                    <div class="member-trend">
                      <i class="fas fa-chevron-right"></i>
                    </div>
                  </div>
                  
                  <div class="team-member-card" data-member-id="3">
                    <div class="member-avatar">MW</div>
                    <div class="member-info">
                      <div class="member-name">
                        Mike Wilson
                        <div class="member-flag warning">
                          <i class="fas fa-exclamation"></i>
                        </div>
                      </div>
                      <div class="member-metrics">
                        <div class="member-metric warning">
                          <i class="fas fa-phone-alt"></i> 93.8%
                        </div>
                        <div class="member-metric success">
                          <i class="fas fa-clock"></i> 4.9 min
                        </div>
                        <div class="member-metric success">
                          <i class="fas fa-percentage"></i> 68.1%
                        </div>
                      </div>
                    </div>
                    <div class="member-trend">
                      <i class="fas fa-chevron-right"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Insights Card -->
            <div class="card">
              <div class="card-header">
                <div class="card-title">
                  <i class="fas fa-lightbulb"></i> Team Insights
                </div>
              </div>
              <div class="card-content">
                <div class="team-insights" id="insightsList">
                  <div class="insight-item warning">
                    <div class="insight-icon warning">
                      <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="insight-content">
                      <div class="insight-title">ACW Time Increasing</div>
                      <div class="insight-description">After-Call Work (ACW) time has increased by 12% over the past two weeks. This may be impacting overall productivity.</div>
                    </div>
                  </div>
                  
                  <div class="insight-item success">
                    <div class="insight-icon success">
                      <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="insight-content">
                      <div class="insight-title">Answer Rate Improvement</div>
                      <div class="insight-description">Team answer rate has improved to 96.8%, exceeding the goal of 95%. Excellent team performance!</div>
                    </div>
                  </div>
                  
                  <div class="insight-item info">
                    <div class="insight-icon info">
                      <i class="fas fa-info-circle"></i>
                    </div>
                    <div class="insight-content">
                      <div class="insight-title">Busiest Day Pattern</div>
                      <div class="insight-description">Monday consistently shows highest call volume. Consider adjusting staffing to accommodate this pattern.</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Individual View Content (initially hidden) -->
      <div id="individualViewContent" style="display: none;">
        <div class="dashboard-controls" style="background: none; padding: 0 0 24px 0; border: none;">
          <div class="view-controls">
            <div class="date-range-picker">
              <span class="date-range-label">Team Member:</span>
              <select id="teamMemberSelect" class="date-range-select">
                <option value="">Select Team Member</option>
                <!-- Team members will be populated dynamically -->
              </select>
            </div>
          </div>
        </div>
        
        <!-- Individual metrics will be loaded here -->
        <div id="individualMetricsContainer"></div>
      </div>
    </div>
  </div>
  
  <!-- Team Member Modal -->
  <div class="modal-overlay" id="memberModal">
    <div class="modal-container">
      <div class="modal-header">
        <div class="modal-title" id="modalTitle">
          <div class="member-avatar" id="modalAvatar">JD</div>
          <span id="modalMemberName">Jane Doe</span>
        </div>
        <div class="modal-close" id="closeModal">
          <i class="fas fa-times"></i>
        </div>
      </div>
      
      <div class="modal-tabs">
        <div class="modal-tab active" data-tab="performance">Performance</div>
        <div class="modal-tab" data-tab="trends">Trends</div>
        <div class="modal-tab" data-tab="history">History</div>
        <div class="modal-tab" data-tab="notes">Notes</div>
      </div>
      
      <div class="modal-body">
        <!-- Performance Tab -->
        <div class="modal-section active" id="performanceSection">
          <div class="metrics-grid" style="grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));">
            <div class="metric-card success">
              <div class="metric-title">Answer Rate</div>
              <div class="metric-value">97.2%</div>
              <div class="metric-trend up">
                <i class="fas fa-arrow-up"></i> 1.8%
              </div>
              <div class="metric-goal success">Goal: 95%+</div>
            </div>
            
            <div class="metric-card success">
              <div class="metric-title">Avg Talk Time</div>
              <div class="metric-value">16.8 min</div>
              <div class="metric-trend neutral">
                <i class="fas fa-minus"></i> 0.3 min
              </div>
              <div class="metric-goal success">Goal: 15-20min</div>
            </div>
            
            <div class="metric-card danger">
              <div class="metric-title">ACW</div>
              <div class="metric-value">8.3 min</div>
              <div class="metric-trend down">
                <i class="fas fa-arrow-down"></i> 2.1 min
              </div>
              <div class="metric-goal danger">Goal: ≤5min</div>
            </div>
            
            <div class="metric-card warning">
              <div class="metric-title">On Queue %</div>
              <div class="metric-value">63.8%</div>
              <div class="metric-trend down">
                <i class="fas fa-arrow-down"></i> 3.2%
              </div>
              <div class="metric-goal warning">Goal: 65%+</div>
            </div>
          </div>
          
          <div class="card" style="margin-top: 24px;">
            <div class="card-header">
              <div class="card-title">Performance Over Time</div>
              <div class="card-actions">
                <select id="modalMetricSelect" class="date-range-select">
                  <option value="answerRate">Answer Rate</option>
                  <option value="talkTime">Avg Talk Time</option>
                  <option value="acw">ACW</option>
                  <option value="onQueue">On Queue %</option>
                </select>
              </div>
            </div>
            <div class="card-content">
              <div class="chart-container">
                <canvas id="memberPerformanceChart"></canvas>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Trends Tab -->
        <div class="modal-section" id="trendsSection">
          <div class="card">
            <div class="card-header">
              <div class="card-title">Weekly Comparison</div>
            </div>
            <div class="card-content">
              <div class="chart-container">
                <canvas id="memberWeeklyChart"></canvas>
              </div>
            </div>
          </div>
          
          <div class="card" style="margin-top: 24px;">
            <div class="card-header">
              <div class="card-title">Performance vs Team Average</div>
              <div class="card-actions">
                <select id="comparisonMetricSelect" class="date-range-select">
                  <option value="all">All Metrics</option>
                  <option value="answerRate">Answer Rate</option>
                  <option value="talkTime">Avg Talk Time</option>
                  <option value="acw">ACW</option>
                  <option value="onQueue">On Queue %</option>
                </select>
              </div>
            </div>
            <div class="card-content">
              <div class="chart-container">
                <canvas id="memberComparisonChart"></canvas>
              </div>
            </div>
          </div>
        </div>
        
        <!-- History Tab -->
        <div class="modal-section" id="historySection">
          <div class="card">
            <div class="card-header">
              <div class="card-title">Metrics History</div>
              <div class="card-actions">
                <select id="historyRangeSelect" class="date-range-select">
                  <option value="lastWeek">Last 7 Days</option>
                  <option value="lastMonth">Last 30 Days</option>
                  <option value="last3Months">Last 90 Days</option>
                </select>
              </div>
            </div>
            <div class="card-content">
              <div style="overflow-x: auto;">
                <table class="metrics-table" id="historyTable">
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>Calls Offered</th>
                      <th>Calls Accepted</th>
                      <th>Answer Rate</th>
                      <th>Talk Time</th>
                      <th>ACW</th>
                      <th>On Queue %</th>
                      <th>Interacting Time</th>
                    </tr>
                  </thead>
                  <tbody>
                    <!-- Historical data will be loaded dynamically -->
                    <tr>
                      <td>Apr 5, 2025</td>
                      <td>42</td>
                      <td>41</td>
                      <td class="goal-met">97.6%</td>
                      <td class="goal-met">16.2 min</td>
                      <td class="goal-danger">8.1 min</td>
                      <td class="goal-warning">64.3%</td>
                      <td class="goal-met">5.1 hrs</td>
                    </tr>
                    <tr>
                      <td>Apr 4, 2025</td>
                      <td>38</td>
                      <td>37</td>
                      <td class="goal-met">97.4%</td>
                      <td class="goal-met">17.5 min</td>
                      <td class="goal-danger">8.4 min</td>
                      <td class="goal-warning">63.7%</td>
                      <td class="goal-met">4.9 hrs</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Notes Tab -->
        <div class="modal-section" id="notesSection">
          <div id="notesContainer">
            <!-- Notes will be loaded dynamically -->
            <div style="margin-bottom: 16px;">
              <div style="font-weight: 600; margin-bottom: 8px;">Performance Discussion - Apr 2, 2025</div>
              <div style="white-space: pre-wrap;">Discussed ACW time performance which is consistently above target. Jane will focus on streamlining post-call documentation.</div>
              <div style="margin-top: 8px; font-size: 12px; color: var(--text-tertiary);">
                By Team Lead • Apr 2, 2025
              </div>
            </div>
            <div style="margin-bottom: 16px; padding-bottom: 16px; border-bottom: 1px solid var(--border-light);">
              <div style="font-weight: 600; margin-bottom: 8px;">Training Completed - Mar 15, 2025</div>
              <div style="white-space: pre-wrap;">Completed advanced call handling training. Should see improvements in talk time efficiency.</div>
              <div style="margin-top: 8px; font-size: 12px; color: var(--text-tertiary);">
                By Team Lead • Mar 15, 2025
              </div>
            </div>
          </div>
          
          <!-- Add note form -->
          <div style="margin-top: 24px;">
            <div style="font-weight: 600; margin-bottom: 12px;">Add New Note</div>
            <textarea id="newNote" rows="4" style="width: 100%; padding: 12px; border-radius: var(--radius-md); border: 1px solid var(--border-medium);" placeholder="Enter note about this team member..."></textarea>
            <button id="addNoteBtn" class="btn btn-primary" style="margin-top: 12px;">
              <i class="fas fa-plus"></i> Add Note
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading dashboard data...</div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Your changes have been saved.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
  
  <script>
    // Global variables
    let teamMembers = [];
    let dashboardData = {};
    let currentView = 'team';
    let currentDateRange = 'thisWeek';
    let selectedTeamMember = null;
    
    // Chart objects to enable updating
    let teamTrendsChart = null;
    let memberPerformanceChart = null;
    let memberWeeklyChart = null;
    let memberComparisonChart = null;
    
    // Initialize the dashboard when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set up UI event listeners
      setupEventListeners();
      
      // Load dashboard data
      loadDashboardData();
      
      // Load team members
      loadTeamMembers();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // View toggle buttons
      const viewToggles = document.querySelectorAll('.view-toggle-btn');
      viewToggles.forEach(button => {
        button.addEventListener('click', function() {
          const view = this.getAttribute('data-view');
          switchView(view);
          
          // Update active button
          viewToggles.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
        });
      });
      
      // Date range select
      document.getElementById('dateRangeSelect').addEventListener('change', function() {
        currentDateRange = this.value;
        const customDateRange = document.getElementById('customDateRangeContainer');
        
        if (currentDateRange === 'custom') {
          customDateRange.style.display = 'flex';
          
          // Set default custom range (last 30 days)
          const today = new Date();
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(today.getDate() - 30);
          
          document.getElementById('startDateInput').value = formatDateForInput(thirtyDaysAgo);
          document.getElementById('endDateInput').value = formatDateForInput(today);
        } else {
          customDateRange.style.display = 'none';
          loadDashboardData();
        }
      });
      
      // Custom date range inputs
      document.getElementById('startDateInput').addEventListener('change', loadDashboardData);
      document.getElementById('endDateInput').addEventListener('change', loadDashboardData);
      
      // Refresh button
      document.getElementById('refreshBtn').addEventListener('click', function() {
        loadDashboardData();
      });
      
      // Export button
      document.getElementById('exportBtn').addEventListener('click', function() {
        exportDashboardData();
      });
      
      // Enter metrics button
      document.getElementById('enterDataBtn').addEventListener('click', function() {
        enterMetricsData();
      });
      
      // Team member select for individual view
      document.getElementById('teamMemberSelect').addEventListener('change', function() {
        selectedTeamMember = this.value;
        loadIndividualMetrics(selectedTeamMember);
      });
      
      // Show flagged only toggle
      document.getElementById('showFlaggedOnly').addEventListener('change', function() {
        filterTeamMembers(this.checked);
      });
      
      // Alert banner close button
      document.getElementById('closeAlert').addEventListener('click', function() {
        document.getElementById('alertBanner').style.display = 'none';
      });
      
      // Team member cards click
      document.addEventListener('click', function(event) {
        const teamMemberCard = event.target.closest('.team-member-card');
        if (teamMemberCard) {
          const memberId = teamMemberCard.getAttribute('data-member-id');
          openMemberModal(memberId);
        }
      });
      
      // Modal close button
      document.getElementById('closeModal').addEventListener('click', function() {
        document.getElementById('memberModal').classList.remove('show');
      });
      
      // Modal tabs
      const modalTabs = document.querySelectorAll('.modal-tab');
      modalTabs.forEach(tab => {
        tab.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          
          // Update active tab
          modalTabs.forEach(t => t.classList.remove('active'));
          this.classList.add('active');
          
          // Show selected tab content
          document.querySelectorAll('.modal-section').forEach(section => {
            section.classList.remove('active');
          });
          document.getElementById(tabId + 'Section').classList.add('active');
          
          // If trends tab, render/update charts
          if (tabId === 'trends') {
            updateMemberTrendsCharts();
          }
        });
      });
      
      // Add note button
      document.getElementById('addNoteBtn').addEventListener('click', function() {
        addMemberNote();
      });
      
      // Metric select for trends chart
      document.getElementById('trendMetricSelect').addEventListener('change', function() {
        updateTeamTrendsChart(dashboardData.teamTrends, this.value);
      });
      
      // Metric select for member performance chart
      document.getElementById('modalMetricSelect').addEventListener('change', function() {
        updateMemberPerformanceChart();
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', function() {
        hideToast();
      });
    }
    
    // Switch between team and individual views
    function switchView(view) {
      currentView = view;
      
      if (view === 'team') {
        document.getElementById('teamViewContent').style.display = 'block';
        document.getElementById('individualViewContent').style.display = 'none';
      } else {
        document.getElementById('teamViewContent').style.display = 'none';
        document.getElementById('individualViewContent').style.display = 'block';
        
        // If a team member is selected, load their metrics
        if (selectedTeamMember) {
          loadIndividualMetrics(selectedTeamMember);
        } else {
          document.getElementById('individualMetricsContainer').innerHTML = `
            <div style="text-align: center; padding: 40px;">
              <div style="font-size: 18px; color: var(--text-secondary); margin-bottom: 16px;">
                <i class="fas fa-user-circle" style="font-size: 48px; margin-bottom: 16px; opacity: 0.3;"></i>
                <div>Please select a team member</div>
              </div>
              <div style="color: var(--text-tertiary);">Select a team member from the dropdown above to view their metrics.</div>
            </div>
          `;
        }
      }
    }
    
    // Load dashboard data
    function loadDashboardData() {
      showLoading('Loading dashboard data...');
      
      // Prepare date range parameters
      let startDate, endDate;
      
      if (currentDateRange === 'custom') {
        startDate = document.getElementById('startDateInput').value;
        endDate = document.getElementById('endDateInput').value;
        
        if (!startDate || !endDate) {
          hideLoading();
          showToast('Error', 'Please select both start and end dates', 'error');
          return;
        }
      }
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            dashboardData = result;
            
            // Render dashboard components
            renderTeamMetricCards(dashboardData.teamMetrics);
            updateTeamTrendsChart(dashboardData.teamTrends, document.getElementById('trendMetricSelect').value);
            renderTeamMembers(dashboardData.teamMembers);
            renderHeatmap(dashboardData.heatmapData);
            renderInsights(dashboardData.insights);
            
            // Update alert banner
            updateAlertBanner(dashboardData.alerts);
            
            // If in individual view and a team member is selected, update their data
            if (currentView === 'individual' && selectedTeamMember) {
              loadIndividualMetrics(selectedTeamMember);
            }
          } else {
            showToast('Error', result.message || 'Failed to load dashboard data', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading dashboard data:', error);
          showToast('Error', 'Failed to load dashboard data', 'error');
        })
        .getDashboardData(currentDateRange, startDate, endDate);
    }
    
    // Load team members
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            teamMembers = result.teamMembers || [];
            populateTeamMemberDropdown();
          } else {
            console.error('Failed to load team members:', result.message);
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error loading team members:', error);
        })
        .getTeamMembers();
    }
    
    // Populate team member dropdown
    function populateTeamMemberDropdown() {
      const select = document.getElementById('teamMemberSelect');
      select.innerHTML = '<option value="">Select Team Member</option>';
      
      teamMembers.forEach(member => {
        const option = document.createElement('option');
        option.value = member.id;
        option.textContent = member.name;
        select.appendChild(option);
      });
    }
    
    // Render team metric cards
    function renderTeamMetricCards(metrics) {
      if (!metrics) return;
      
      // Example of updating one metric card (implement for all cards)
      if (metrics.answerRate) {
        updateMetricCard('Answer Rate', metrics.answerRate.value, metrics.answerRate.trend, 
                         metrics.answerRate.goal, metrics.answerRate.status);
      }
      
      if (metrics.talkTime) {
        updateMetricCard('Average Talk Time', metrics.talkTime.value, metrics.talkTime.trend, 
                                                  metrics.talkTime.goal, metrics.talkTime.status);
      }
      
      if (metrics.acw) {
        updateMetricCard('ACW Percentage', metrics.acw.value, metrics.acw.trend, 
                         metrics.acw.goal, metrics.acw.status);
      }
      
      if (metrics.onQueue) {
        updateMetricCard('On Queue Percentage', metrics.onQueue.value, metrics.onQueue.trend, 
                         metrics.onQueue.goal, metrics.onQueue.status);
      }
      
      if (metrics.interactingTime) {
        updateMetricCard('Interacting Time', metrics.interactingTime.value, metrics.interactingTime.trend, 
                         metrics.interactingTime.goal, metrics.interactingTime.status);
      }
      
      if (metrics.callsOffered) {
        updateMetricCard('Total Calls Offered', metrics.callsOffered.value, metrics.callsOffered.trend);
      }
    }
    
    // Update a single metric card
    function updateMetricCard(title, value, trend, goal, status) {
      // Find the metric card with this title
      const metricCards = document.querySelectorAll('.metric-card');
      let card = null;
      
      for (let i = 0; i < metricCards.length; i++) {
        const titleEl = metricCards[i].querySelector('.metric-title');
        if (titleEl && titleEl.textContent === title) {
          card = metricCards[i];
          break;
        }
      }
      
      if (!card) return;
      
      // Update value
      const valueEl = card.querySelector('.metric-value');
      if (valueEl) valueEl.textContent = value;
      
      // Update trend
      const trendEl = card.querySelector('.metric-trend');
      if (trendEl && trend) {
        let trendHTML = '';
        
        if (trend.direction === 'up') {
          trendEl.className = 'metric-trend up';
          trendHTML = `<i class="fas fa-arrow-up"></i> ${trend.value}`;
        } else if (trend.direction === 'down') {
          trendEl.className = 'metric-trend down';
          trendHTML = `<i class="fas fa-arrow-down"></i> ${trend.value}`;
        } else {
          trendEl.className = 'metric-trend neutral';
          trendHTML = `<i class="fas fa-minus"></i> ${trend.value}`;
        }
        
        trendEl.innerHTML = trendHTML;
      }
      
      // Update goal and status
      const goalEl = card.querySelector('.metric-goal');
      
      if (goalEl && goal) {
        goalEl.textContent = `Goal: ${goal}`;
        
        // Update card status
        card.className = 'metric-card';
        if (status) {
          card.classList.add(status);
          goalEl.className = `metric-goal ${status}`;
        }
      }
    }
    
    // Update team trends chart
    function updateTeamTrendsChart(trendsData, metricType) {
      if (!trendsData || !trendsData.dates) return;
      
      const ctx = document.getElementById('teamTrendsChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (teamTrendsChart) {
        teamTrendsChart.destroy();
      }
      
      // Get the selected metric data
      const metricData = trendsData[metricType] || [];
      const goalData = trendsData[`${metricType}Goal`] || Array(trendsData.dates.length).fill(null);
      
      // Create new chart
      teamTrendsChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: trendsData.dates,
          datasets: [
            {
              label: 'Actual',
              data: metricData,
              borderColor: 'rgba(85, 64, 175, 1)',
              backgroundColor: 'rgba(85, 64, 175, 0.1)',
              tension: 0.4,
              fill: true
            },
            {
              label: 'Goal',
              data: goalData,
              borderColor: 'rgba(16, 185, 129, 1)',
              borderWidth: 2,
              borderDash: [5, 5],
              pointRadius: 0,
              tension: 0,
              fill: false
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            intersect: false,
            mode: 'index'
          },
          scales: {
            x: {
              grid: {
                display: false
              }
            },
            y: {
              beginAtZero: false
            }
          },
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });
    }
    
    // Render team members list
    function renderTeamMembers(members) {
      if (!members || !members.length) return;
      
      const list = document.getElementById('teamMembersList');
      list.innerHTML = '';
      
      members.forEach(member => {
        // Create initials from name
        const nameParts = member.name.split(' ');
        const initials = nameParts.map(p => p[0]).join('');
        
        // Create member metrics HTML
        let metricsHTML = '';
        
        if (member.metrics) {
          Object.keys(member.metrics).forEach(key => {
            const metric = member.metrics[key];
            metricsHTML += `
              <div class="member-metric ${metric.status || ''}">
                <i class="fas ${getMetricIcon(key)}"></i> ${metric.value}
              </div>
            `;
          });
        }
        
        // Create flag if needed
        let flagHTML = '';
        if (member.flag) {
          flagHTML = `
            <div class="member-flag ${member.flag.type}">
              <i class="fas fa-exclamation"></i>
            </div>
          `;
        }
        
        // Create and add member card
        const card = document.createElement('div');
        card.className = 'team-member-card';
        card.setAttribute('data-member-id', member.id);
        card.setAttribute('data-flagged', member.flag ? 'true' : 'false');
        
        card.innerHTML = `
          <div class="member-avatar">${initials}</div>
          <div class="member-info">
            <div class="member-name">
              ${member.name}
              ${flagHTML}
            </div>
            <div class="member-metrics">
              ${metricsHTML}
            </div>
          </div>
          <div class="member-trend">
            <i class="fas fa-chevron-right"></i>
          </div>
        `;
        
        list.appendChild(card);
      });
    }
    
    // Get icon for metric type
    function getMetricIcon(metricType) {
      switch (metricType) {
        case 'answerRate': return 'fa-phone-alt';
        case 'talkTime': return 'fa-comments';
        case 'acw': return 'fa-clock';
        case 'onQueue': return 'fa-percentage';
        case 'interactingTime': return 'fa-headset';
        default: return 'fa-chart-line';
      }
    }
    
    // Filter team members to show only flagged ones
    function filterTeamMembers(showFlaggedOnly) {
      const members = document.querySelectorAll('.team-member-card');
      
      members.forEach(member => {
        const isFlagged = member.getAttribute('data-flagged') === 'true';
        member.style.display = (showFlaggedOnly && !isFlagged) ? 'none' : 'flex';
      });
    }
    
    // Render heatmap data
    function renderHeatmap(heatmapData) {
      if (!heatmapData || !heatmapData.days) return;
      
      const heatmap = document.querySelector('.heatmap');
      
      // Clear existing days (keep headers)
      const headers = Array.from(heatmap.querySelectorAll('.heatmap-header'));
      heatmap.innerHTML = '';
      
      // Re-add headers
      headers.forEach(header => {
        heatmap.appendChild(header);
      });
      
      // Add heatmap days
      heatmapData.days.forEach(day => {
        const dayElement = document.createElement('div');
        dayElement.className = `heatmap-day level-${day.level}`;
        
        const tooltip = document.createElement('div');
        tooltip.className = 'heatmap-tooltip';
        tooltip.textContent = day.tooltip;
        
        dayElement.appendChild(tooltip);
        heatmap.appendChild(dayElement);
      });
    }
    
    // Render insights
    function renderInsights(insights) {
      if (!insights || !insights.length) return;
      
      const insightsList = document.getElementById('insightsList');
      insightsList.innerHTML = '';
      
      insights.forEach(insight => {
        const item = document.createElement('div');
        item.className = `insight-item ${insight.type}`;
        
        let iconClass = 'fa-info-circle';
        if (insight.type === 'warning') iconClass = 'fa-exclamation-triangle';
        else if (insight.type === 'danger') iconClass = 'fa-exclamation-circle';
        else if (insight.type === 'success') iconClass = 'fa-check-circle';
        
        item.innerHTML = `
          <div class="insight-icon ${insight.type}">
            <i class="fas ${iconClass}"></i>
          </div>
          <div class="insight-content">
            <div class="insight-title">${insight.title}</div>
            <div class="insight-description">${insight.description}</div>
          </div>
        `;
        
        insightsList.appendChild(item);
      });
    }
    
    // Update alert banner
    function updateAlertBanner(alerts) {
      const alertBanner = document.getElementById('alertBanner');
      
      if (!alerts || alerts.length === 0) {
        alertBanner.style.display = 'none';
        return;
      }
      
      // Use the first alert for the banner
      const alert = alerts[0];
      
      alertBanner.className = `alert-banner ${alert.type}`;
      alertBanner.querySelector('.alert-title').textContent = alert.title;
      alertBanner.querySelector('.alert-message').textContent = alert.message;
      alertBanner.style.display = 'flex';
    }
    
    // Load individual metrics
    function loadIndividualMetrics(memberId) {
      showLoading('Loading individual metrics...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            renderIndividualMetrics(result);
          } else {
            showToast('Error', result.message || 'Failed to load individual metrics', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading individual metrics:', error);
          showToast('Error', 'Failed to load individual metrics', 'error');
        })
        .getIndividualMetrics(memberId, currentDateRange);
    }
    
    // Render individual metrics
    function renderIndividualMetrics(data) {
      const container = document.getElementById('individualMetricsContainer');
      
      // Format member name and initials
      const nameParts = data.memberName.split(' ');
      const initials = nameParts.map(p => p[0]).join('');
      
      // Create HTML for the metrics section
      container.innerHTML = `
        <div style="margin-bottom: 24px; display: flex; align-items: center; gap: 16px;">
          <div class="member-avatar" style="width: 56px; height: 56px; font-size: 20px;">${initials}</div>
          <div>
            <h2 style="font-size: 24px; font-weight: 700; margin-bottom: 4px;">${data.memberName}</h2>
            <div style="color: var(--text-tertiary);">Individual Performance Metrics</div>
          </div>
        </div>
        
        ${data.alerts && data.alerts.length > 0 ? `
        <div class="alert-banner ${data.alerts[0].type}" style="margin-bottom: 24px;">
          <div class="alert-icon">
            <i class="fas ${data.alerts[0].type === 'warning' ? 'fa-exclamation-triangle' : 'fa-exclamation-circle'}"></i>
          </div>
          <div class="alert-content">
            <div class="alert-title">${data.alerts[0].title}</div>
            <div class="alert-message">${data.alerts[0].message}</div>
          </div>
        </div>
        ` : ''}
        
        <div class="metrics-grid">
          ${generateMetricCardsHTML(data.metrics)}
        </div>
        
        <div class="dashboard-row">
          <div class="dashboard-column">
            <div class="card">
              <div class="card-header">
                <div class="card-title">
                  <i class="fas fa-chart-line"></i> Performance Trends
                </div>
              </div>
              <div class="card-content">
                <div class="chart-container">
                  <canvas id="individualTrendsChart"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="dashboard-row" style="margin-top: 24px;">
          <div class="dashboard-column">
            <div class="card">
              <div class="card-header">
                <div class="card-title">
                  <i class="fas fa-history"></i> Recent Metrics
                </div>
              </div>
              <div class="card-content">
                <div style="overflow-x: auto;">
                  <table class="metrics-table">
                    <thead>
                      <tr>
                        <th>Date</th>
                        <th>Calls Offered</th>
                        <th>Calls Accepted</th>
                        <th>Answer Rate</th>
                        <th>Talk Time</th>
                        <th>ACW</th>
                        <th>On Queue %</th>
                        <th>Interacting Time</th>
                      </tr>
                    </thead>
                    <tbody>
                      ${generateHistoryTableHTML(data.history)}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="dashboard-row" style="margin-top: 24px;">
          <div class="dashboard-column">
            <div class="card">
              <div class="card-header">
                <div class="card-title">
                  <i class="fas fa-sticky-note"></i> Notes
                </div>
                <div class="card-actions">
                  <button class="btn btn-secondary" id="addIndividualNoteBtn">
                    <i class="fas fa-plus"></i> Add Note
                  </button>
                </div>
              </div>
              <div class="card-content">
                ${generateNotesHTML(data.notes)}
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Initialize chart
      renderIndividualTrendsChart(data.trends);
      
      // Add event listener for add note button
      document.getElementById('addIndividualNoteBtn').addEventListener('click', function() {
        addIndividualNote(data.memberId);
      });
    }
    
    // Generate HTML for metric cards
    function generateMetricCardsHTML(metrics) {
      if (!metrics) return '';
      
      let html = '';
      
      Object.keys(metrics).forEach(key => {
        const metric = metrics[key];
        const metricName = getMetricDisplayName(key);
        
        // Skip if no metric name (unknown metric)
        if (!metricName) return;
        
        // Generate trend HTML
        let trendHTML = '';
        if (metric.trend) {
          let trendClass = 'neutral';
          let trendIcon = 'fa-minus';
          
          if (metric.trend.direction === 'up') {
            trendClass = 'up';
            trendIcon = 'fa-arrow-up';
          } else if (metric.trend.direction === 'down') {
            trendClass = 'down';
            trendIcon = 'fa-arrow-down';
          }
          
          trendHTML = `
            <div class="metric-trend ${trendClass}">
              <i class="fas ${trendIcon}"></i> ${metric.trend.value}
            </div>
          `;
        }
        
        // Generate goal HTML
        let goalHTML = '';
        if (metric.goal) {
          goalHTML = `<div class="metric-goal ${metric.status || ''}">${metric.goal}</div>`;
        }
        
        html += `
          <div class="metric-card ${metric.status || ''}">
            <div class="metric-title">${metricName}</div>
            <div class="metric-value">${metric.value}</div>
            ${trendHTML}
            ${goalHTML}
          </div>
        `;
      });
      
      return html;
    }
    
    // Get display name for metric type
    function getMetricDisplayName(metricType) {
      switch (metricType) {
        case 'answerRate': return 'Answer Rate';
        case 'talkTime': return 'Avg Talk Time';
        case 'acw': return 'ACW';
        case 'onQueue': return 'On Queue Percentage';
        case 'offQueue': return 'Off Queue Percentage';
        case 'interactingTime': return 'Interacting Time';
        case 'callsOffered': return 'Calls Offered';
        case 'callsAccepted': return 'Calls Accepted';
        default: return '';
      }
    }
    
    // Generate HTML for history table
    function generateHistoryTableHTML(history) {
      if (!history || !history.length) {
        return '<tr><td colspan="8" style="text-align: center; padding: 20px;">No historical data available</td></tr>';
      }
      
      let html = '';
      
      history.forEach(entry => {
        html += `
          <tr>
            <td>${formatDate(new Date(entry.date))}</td>
            <td>${entry.callsOffered || 0}</td>
            <td>${entry.callsAccepted || 0}</td>
            <td class="${getStatusClass(entry.answerRate.status)}">${entry.answerRate.value}</td>
            <td class="${getStatusClass(entry.talkTime.status)}">${entry.talkTime.value}</td>
            <td class="${getStatusClass(entry.acw.status)}">${entry.acw.value}</td>
            <td class="${getStatusClass(entry.onQueue.status)}">${entry.onQueue.value}</td>
            <td class="${getStatusClass(entry.interactingTime.status)}">${entry.interactingTime.value}</td>
          </tr>
        `;
      });
      
      return html;
    }
    
    // Get CSS class for status
    function getStatusClass(status) {
      if (!status) return '';
      
      switch (status) {
        case 'success': return 'goal-met';
        case 'warning': return 'goal-warning';
        case 'danger': return 'goal-missed';
        default: return '';
      }
    }
    
    // Generate HTML for notes
    function generateNotesHTML(notes) {
      if (!notes || !notes.length) {
        return '<div style="text-align: center; padding: 20px; color: var(--text-tertiary);">No notes available</div>';
      }
      
      let html = '';
      
      notes.forEach(note => {
        html += `
          <div style="margin-bottom: 16px; padding-bottom: 16px; border-bottom: 1px solid var(--border-light);">
            <div style="font-weight: 600; margin-bottom: 8px;">${note.title || 'Note'}</div>
            <div style="white-space: pre-wrap;">${note.content || ''}</div>
            <div style="margin-top: 8px; font-size: 12px; color: var(--text-tertiary);">
              ${note.author ? 'By ' + note.author : ''} ${note.timestamp ? '• ' + formatDateTime(new Date(note.timestamp)) : ''}
            </div>
          </div>
        `;
      });
      
      return html;
    }
    
    // Render individual trends chart
    function renderIndividualTrendsChart(trendsData) {
      if (!trendsData || !trendsData.dates) return;
      
      const ctx = document.getElementById('individualTrendsChart').getContext('2d');
      
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: trendsData.dates,
          datasets: [
            {
              label: 'Answer Rate',
              data: trendsData.answerRate,
              borderColor: 'rgba(85, 64, 175, 1)',
              backgroundColor: 'rgba(85, 64, 175, 0.1)',
              tension: 0.4,
              yAxisID: 'y'
            },
            {
              label: 'On Queue %',
              data: trendsData.onQueue,
              borderColor: 'rgba(16, 185, 129, 1)',
              backgroundColor: 'rgba(16, 185, 129, 0.1)',
              tension: 0.4,
              yAxisID: 'y'
            },
            {
              label: 'ACW',
              data: trendsData.acw,
              borderColor: 'rgba(245, 158, 11, 1)',
              backgroundColor: 'rgba(245, 158, 11, 0.1)',
              tension: 0.4,
              yAxisID: 'y1'
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            intersect: false,
            mode: 'index'
          },
          scales: {
            x: {
              grid: {
                display: false
              }
            },
            y: {
              type: 'linear',
              display: true,
              position: 'left',
              title: {
                display: true,
                text: 'Percentage'
              }
            },
            y1: {
              type: 'linear',
              display: true,
              position: 'right',
              grid: {
                drawOnChartArea: false
              },
              title: {
                display: true,
                text: 'Minutes'
              }
            }
          },
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });
    }
    
    // Open member modal with member details
    function openMemberModal(memberId) {
      showLoading('Loading team member data...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            populateMemberModal(result);
            document.getElementById('memberModal').classList.add('show');
          } else {
            showToast('Error', result.message || 'Failed to load team member data', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading team member data:', error);
          showToast('Error', 'Failed to load team member data', 'error');
        })
        .getTeamMemberDetails(memberId, currentDateRange);
    }
    
    // Populate member modal with data
    function populateMemberModal(data) {
      // Set member name and initials
      const nameParts = data.name.split(' ');
      const initials = nameParts.map(p => p[0]).join('');
      
      document.getElementById('modalMemberName').textContent = data.name;
      document.getElementById('modalAvatar').textContent = initials;
      
      // Store member ID on modal
      document.getElementById('memberModal').setAttribute('data-member-id', data.id);
      
      // Populate performance tab
      populatePerformanceTab(data.metrics);
      
      // Populate notes tab
      populateNotesTab(data.notes);
      
      // Populate history tab
      populateHistoryTab(data.history);
      
      // Initialize charts
      initializeMemberCharts(data.trends);
    }
    
    // Populate performance tab in modal
    function populatePerformanceTab(metrics) {
      if (!metrics) return;
      
      // Update each metric card in the performance tab
      Object.keys(metrics).forEach(key => {
        const metric = metrics[key];
        const metricName = getMetricDisplayName(key);
        
        // Find the card for this metric
        const cards = document.querySelectorAll('#performanceSection .metric-card');
        let card = null;
        
        for (let i = 0; i < cards.length; i++) {
          const title = cards[i].querySelector('.metric-title').textContent;
          if (title === metricName) {
            card = cards[i];
            break;
          }
        }
        
        if (!card) return;
        
        // Update card class based on status
        card.className = `metric-card ${metric.status || ''}`;
        
        // Update value
        card.querySelector('.metric-value').textContent = metric.value;
        
        // Update trend
        const trendEl = card.querySelector('.metric-trend');
        if (trendEl && metric.trend) {
          let trendClass = 'neutral';
          let trendIcon = 'fa-minus';
          
          if (metric.trend.direction === 'up') {
            trendClass = 'up';
            trendIcon = 'fa-arrow-up';
          } else if (metric.trend.direction === 'down') {
            trendClass = 'down';
            trendIcon = 'fa-arrow-down';
          }
          
          trendEl.className = `metric-trend ${trendClass}`;
          trendEl.innerHTML = `<i class="fas ${trendIcon}"></i> ${metric.trend.value}`;
        }
        
        // Update goal
        const goalEl = card.querySelector('.metric-goal');
        if (goalEl) {
          goalEl.className = `metric-goal ${metric.status || ''}`;
          goalEl.textContent = metric.goal || '';
        }
      });
    }
    
    // Populate notes tab in modal
    function populateNotesTab(notes) {
      const notesContainer = document.getElementById('notesContainer');
      
      if (!notes || !notes.length) {
        notesContainer.innerHTML = '<div style="color: var(--text-tertiary); text-align: center; padding: 20px;">No notes available</div>';
        return;
      }
      
      notesContainer.innerHTML = '';
      
      notes.forEach(note => {
        const noteDiv = document.createElement('div');
        noteDiv.style.marginBottom = '16px';
        noteDiv.style.paddingBottom = '16px';
        noteDiv.style.borderBottom = '1px solid var(--border-light)';
        
        noteDiv.innerHTML = `
          <div style="font-weight: 600; margin-bottom: 8px;">${note.title || 'Note'}</div>
          <div style="white-space: pre-wrap;">${note.content || ''}</div>
          <div style="margin-top: 8px; font-size: 12px; color: var(--text-tertiary);">
            ${note.author ? 'By ' + note.author : ''} ${note.timestamp ? '• ' + formatDateTime(new Date(note.timestamp)) : ''}
          </div>
        `;
        
        notesContainer.appendChild(noteDiv);
      });
    }
    
    // Populate history tab in modal
    function populateHistoryTab(history) {
      const tableBody = document.querySelector('#historyTable tbody');
      
      if (!history || !history.length) {
        tableBody.innerHTML = '<tr><td colspan="8" style="text-align: center; padding: 20px;">No historical data available</td></tr>';
        return;
      }
      
      tableBody.innerHTML = '';
      
      history.forEach(entry => {
        const row = document.createElement('tr');
        
        row.innerHTML = `
          <td>${formatDate(new Date(entry.date))}</td>
          <td>${entry.callsOffered || 0}</td>
          <td>${entry.callsAccepted || 0}</td>
          <td class="${getStatusClass(entry.answerRate.status)}">${entry.answerRate.value}</td>
          <td class="${getStatusClass(entry.talkTime.status)}">${entry.talkTime.value}</td>
          <td class="${getStatusClass(entry.acw.status)}">${entry.acw.value}</td>
          <td class="${getStatusClass(entry.onQueue.status)}">${entry.onQueue.value}</td>
          <td class="${getStatusClass(entry.interactingTime.status)}">${entry.interactingTime.value}</td>
        `;
        
        tableBody.appendChild(row);
      });
    }
    
    // Initialize member charts
    function initializeMemberCharts(trends) {
      if (!trends) return;
      
      // Initialize performance chart
      const performanceCtx = document.getElementById('memberPerformanceChart').getContext('2d');
      updateMemberPerformanceChart(trends, performanceCtx);
      
      // Store trends data for later use
      document.getElementById('memberModal').setAttribute('data-trends', JSON.stringify(trends));
    }
    
    // Update member performance chart
    function updateMemberPerformanceChart() {
      // Get stored trends data
      const trendsData = JSON.parse(document.getElementById('memberModal').getAttribute('data-trends') || '{}');
      if (!trendsData.dates) return;
      
      const metricType = document.getElementById('modalMetricSelect').value;
      const ctx = document.getElementById('memberPerformanceChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (memberPerformanceChart) {
        memberPerformanceChart.destroy();
      }
      
      // Get the goal data for this metric
      const goalKey = `${metricType}Goal`;
      const goalData = trendsData[goalKey] || Array(trendsData.dates.length).fill(null);
      
      // Create new chart
      memberPerformanceChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: trendsData.dates,
          datasets: [
            {
              label: getMetricDisplayName(metricType),
              data: trendsData[metricType] || [],
              borderColor: 'rgba(85, 64, 175, 1)',
              backgroundColor: 'rgba(85, 64, 175, 0.1)',
              tension: 0.4,
              fill: true
            },
            {
              label: 'Goal',
              data: goalData,
              borderColor: 'rgba(16, 185, 129, 1)',
              borderWidth: 2,
              borderDash: [5, 5],
              pointRadius: 0,
              tension: 0,
              fill: false
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            intersect: false,
            mode: 'index'
          },
          scales: {
            x: {
              grid: {
                display: false
              }
            },
            y: {
              beginAtZero: false
            }
          },
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });
    }
    
    // Update member trends charts
    function updateMemberTrendsCharts() {
      // Get stored trends data
      const trendsData = JSON.parse(document.getElementById('memberModal').getAttribute('data-trends') || '{}');
      if (!trendsData.dates) return;
      
      // Update weekly chart
      const weeklyCtx = document.getElementById('memberWeeklyChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (memberWeeklyChart) {
        memberWeeklyChart.destroy();
      }
      
      // Create new weekly chart
      memberWeeklyChart = new Chart(weeklyCtx, {
        type: 'bar',
        data: {
          labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
          datasets: [
            {
              label: 'Answer Rate',
              data: trendsData.weekdayAnswerRate || [],
              backgroundColor: 'rgba(85, 64, 175, 0.7)',
              borderRadius: 4
            },
            {
              label: 'On Queue %',
              data: trendsData.weekdayOnQueue || [],
              backgroundColor: 'rgba(16, 185, 129, 0.7)',
              borderRadius: 4
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: false
            }
          },
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });
      
      // Update comparison chart
      const comparisonCtx = document.getElementById('memberComparisonChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (memberComparisonChart) {
        memberComparisonChart.destroy();
      }
      
      // Create new comparison chart (radar chart)
      memberComparisonChart = new Chart(comparisonCtx, {
        type: 'radar',
        data: {
          labels: ['Answer Rate', 'Talk Time', 'ACW', 'On Queue %', 'Interacting Time'],
          datasets: [
            {
              label: 'Team Member',
              data: trendsData.currentMetrics || [0, 0, 0, 0, 0],
              fill: true,
              backgroundColor: 'rgba(85, 64, 175, 0.2)',
              borderColor: 'rgba(85, 64, 175, 1)',
              pointBackgroundColor: 'rgba(85, 64, 175, 1)',
              pointBorderColor: '#fff',
              pointHoverBackgroundColor: '#fff',
              pointHoverBorderColor: 'rgba(85, 64, 175, 1)'
            },
            {
              label: 'Team Average',
              data: trendsData.teamAverage || [0, 0, 0, 0, 0],
              fill: true,
              backgroundColor: 'rgba(16, 185, 129, 0.2)',
              borderColor: 'rgba(16, 185, 129, 1)',
              pointBackgroundColor: 'rgba(16, 185, 129, 1)',
              pointBorderColor: '#fff',
              pointHoverBackgroundColor: '#fff',
              pointHoverBorderColor: 'rgba(16, 185, 129, 1)'
            }
          ]
        },
        options: {
          elements: {
            line: {
              borderWidth: 2
            }
          }
        }
      });
    }
    
    // Add a note for a team member
    function addMemberNote() {
      const noteContent = document.getElementById('newNote').value.trim();
      
      if (!noteContent) {
        showToast('Error', 'Please enter note content', 'error');
        return;
      }
      
      const memberId = document.getElementById('memberModal').getAttribute('data-member-id');
      
      showLoading('Saving note...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            // Clear input
            document.getElementById('newNote').value = '';
            
            // Refresh notes tab
            populateNotesTab(result.notes);
            
            showToast('Success', 'Note saved successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to save note', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error saving note:', error);
          showToast('Error', 'Failed to save note', 'error');
        })
        .addTeamMemberNote(memberId, noteContent);
    }
    
    // Add a note for individual view
    function addIndividualNote(memberId) {
      // Create a simple prompt to get the note content
      const noteContent = prompt('Enter note for this team member:');
      
      if (!noteContent || noteContent.trim() === '') return;
      
      showLoading('Saving note...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            // Reload individual metrics to show the new note
            loadIndividualMetrics(memberId);
            showToast('Success', 'Note saved successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to save note', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error saving note:', error);
          showToast('Error', 'Failed to save note', 'error');
        })
        .addTeamMemberNote(memberId, noteContent);
    }
    
    // Export dashboard data
    function exportDashboardData() {
      showLoading('Preparing export...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Dashboard data exported successfully', 'success');
            
            // If URL is provided for download, open it
            if (result.url) {
              window.open(result.url, '_blank');
            }
          } else {
            showToast('Error', result.message || 'Failed to export dashboard data', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error exporting dashboard data:', error);
          showToast('Error', 'Failed to export dashboard data', 'error');
        })
        .exportDashboardData(currentView, currentDateRange);
    }
    
    // Open metrics data entry form
    function enterMetricsData() {
      google.script.run.showMetricsForm();
    }
    
    // Format date for display (e.g., Apr 5, 2025)
    function formatDate(date) {
      return date.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      });
    }
    
    // Format date and time for display (e.g., Apr 5, 2025, 2:30 PM)
    function formatDateTime(date) {
      return date.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
        hour: 'numeric',
        minute: 'numeric'
      });
    }
    
    // Format date for input fields (YYYY-MM-DD)
    function formatDateForInput(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
    
    // Show loading overlay
    function showLoading(message = 'Loading...') {
      const overlay = document.getElementById('loadingOverlay');
      const loadingText = document.querySelector('.loading-text');
      
      loadingText.textContent = message;
      overlay.classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      const overlay = document.getElementById('loadingOverlay');
      overlay.classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'success') {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      } else if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Hide toast after 5 seconds
      setTimeout(hideToast, 5000);
    }
    
    // Hide toast notification
    function hideToast() {
      document.getElementById('toast').classList.remove('visible');
    }
  </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Export Metrics</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1000px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--text-primary);
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .radio-group {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      margin-top: 8px;
    }
    
    .radio-option {
      flex: 1;
      min-width: 200px;
      background-color: var(--bg-secondary);
      border: 2px solid var(--bg-tertiary);
      border-radius: var(--radius-md);
      padding: 16px;
      cursor: pointer;
      transition: all var(--transition-normal);
      position: relative;
    }
    
    .radio-option:hover {
      border-color: var(--primary-light);
      background-color: var(--bg-tertiary);
    }
    
    .radio-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .radio-option input[type="radio"]:checked + .radio-content {
      color: var(--primary-color);
    }
    
    .radio-option input[type="radio"]:checked + .radio-content .radio-icon {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    .radio-option input[type="radio"]:checked + .radio-content .radio-icon::after {
      transform: scale(1);
    }
    
    .radio-content {
      display: flex;
      gap: 16px;
      align-items: center;
    }
    
    .radio-icon {
      width: 20px;
      height: 20px;
      border: 2px solid var(--text-tertiary);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      position: relative;
      transition: all var(--transition-normal);
    }
    
    .radio-icon::after {
      content: '';
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background-color: white;
      transform: scale(0);
      transition: transform var(--transition-normal);
    }
    
    .radio-text {
      flex: 1;
    }
    
    .radio-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .radio-description {
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    .format-icons {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      margin-top: 16px;
    }
    
    .format-option {
      flex: 1;
      min-width: 120px;
      background-color: var(--bg-secondary);
      border: 2px solid var(--bg-tertiary);
      border-radius: var(--radius-md);
      padding: 16px;
      text-align: center;
      cursor: pointer;
      transition: all var(--transition-normal);
    }
    
    .format-option:hover {
      border-color: var(--primary-light);
      background-color: var(--bg-tertiary);
    }
    
    .format-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .format-option input[type="radio"]:checked + .format-content {
      color: var(--primary-color);
    }
    
    .format-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 12px;
    }
    
    .format-icon {
      font-size: 32px;
      color: var(--text-tertiary);
    }
    
    input[type="radio"]:checked + .format-content .format-icon {
      color: var(--primary-color);
    }
    
    .format-label {
      font-weight: 600;
      font-size: 13px;
    }
    
    .checkbox-group {
      margin-top: 12px;
    }
    
    .checkbox-item {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 8px;
    }
    
    .checkbox-item input[type="checkbox"] {
      width: 18px;
      height: 18px;
      accent-color: var(--primary-color);
    }
    
    .date-range {
      display: flex;
      gap: 12px;
      align-items: center;
      margin-top: 8px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 12px 24px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .form-actions {
      display: flex;
      justify-content: flex-end;
      gap: 16px;
      margin-top: 32px;
    }
    
    .progress-container {
      width: 100%;
      height: 4px;
      background-color: var(--bg-secondary);
      border-radius: 2px;
      overflow: hidden;
      margin-bottom: 16px;
    }
    
    .progress-bar {
      height: 100%;
      background: var(--primary-gradient);
      transition: width var(--transition-normal);
    }
    
    .result-container {
      margin-top: 24px;
    }
    
    .result-file {
      display: flex;
      align-items: center;
      gap: 16px;
      padding: 16px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      background-color: var(--bg-secondary);
      margin-top: 16px;
    }
    
    .file-icon {
      width: 48px;
      height: 48px;
      background-color: var(--bg-tertiary);
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      color: var(--text-tertiary);
    }
    
    .file-info {
      flex: 1;
    }
    
    .file-name {
      font-weight: 500;
      margin-bottom: 4px;
    }
    
    .file-meta {
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    .file-action {
      display: flex;
      gap: 12px;
    }
    
    .info-box {
      background-color: var(--info-light);
      border-left: 4px solid var(--info-color);
      padding: 16px;
      margin: 20px 0;
      border-radius: var(--radius-md);
      color: var(--text-secondary);
    }
    
    .info-box-title {
      font-weight: 600;
      margin-bottom: 8px;
      color: var(--info-color);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(85, 64, 175, 0.3);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 16px;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    
    /* Toast notification */
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
      max-width: 400px;
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .header {
        padding: 20px;
      }
      
      .content {
        padding: 20px;
      }
      
      .form-actions {
        flex-direction: column;
      }
      
      .btn {
        width: 100%;
      }
      
      .radio-group,
      .format-icons {
        flex-direction: column;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-file-export"></i> Export Metrics
          </h1>
          <div class="header-subtitle">
            Export and download your team's performance metrics
          </div>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="card">
        <div class="card-header">
          <div class="card-title">
            <i class="fas fa-sliders-h"></i> Export Options
          </div>
        </div>
        
               <div class="card-content">
          <form id="exportForm">
            <div class="form-group">
              <label class="form-label">What would you like to export?</label>
              <div class="radio-group">
                <label class="radio-option">
                  <input type="radio" name="exportType" value="team" checked>
                  <div class="radio-content">
                    <div class="radio-icon"></div>
                    <div class="radio-text">
                      <div class="radio-title">Team Metrics</div>
                      <div class="radio-description">Export performance metrics for the entire team</div>
                    </div>
                  </div>
                </label>
                
                <label class="radio-option">
                  <input type="radio" name="exportType" value="individual">
                  <div class="radio-content">
                    <div class="radio-icon"></div>
                    <div class="radio-text">
                      <div class="radio-title">Individual Metrics</div>
                      <div class="radio-description">Export metrics for specific team members</div>
                    </div>
                  </div>
                </label>
              </div>
              
              <!-- Individual team members selector (hidden by default) -->
              <div id="teamMembersSelector" style="display: none; margin-top: 16px;">
                <label class="form-label">Select team members:</label>
                <div class="checkbox-group" id="teamMembersCheckboxes">
                  <!-- Will be populated dynamically -->
                  <div class="checkbox-item">
                    <input type="checkbox" id="allMembers" name="teamMember" value="all" checked>
                    <label for="allMembers">All team members</label>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Time period to export</label>
              <select id="timePeriod" class="form-control">
                <option value="current-month">Current month</option>
                <option value="previous-month">Previous month</option>
                <option value="current-quarter">Current quarter</option>
                <option value="previous-quarter">Previous quarter</option>
                <option value="year-to-date">Year to date</option>
                <option value="last-7-days">Last 7 days</option>
                <option value="last-30-days">Last 30 days</option>
                <option value="last-90-days">Last 90 days</option>
                <option value="custom">Custom date range</option>
              </select>
              
              <div id="customDateRange" class="date-range" style="display: none;">
                <div>
                  <label class="form-label">Start date:</label>
                  <input type="date" id="startDate" class="form-control">
                </div>
                <div>
                  <label class="form-label">End date:</label>
                  <input type="date" id="endDate" class="form-control">
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Export format</label>
              <div class="format-icons">
                <label class="format-option">
                  <input type="radio" name="exportFormat" value="excel" checked>
                  <div class="format-content">
                    <i class="fas fa-file-excel format-icon"></i>
                    <div class="format-label">Excel</div>
                  </div>
                </label>
                
                <label class="format-option">
                  <input type="radio" name="exportFormat" value="csv">
                  <div class="format-content">
                    <i class="fas fa-file-csv format-icon"></i>
                    <div class="format-label">CSV</div>
                  </div>
                </label>
                
                <label class="format-option">
                  <input type="radio" name="exportFormat" value="pdf">
                  <div class="format-content">
                    <i class="fas fa-file-pdf format-icon"></i>
                    <div class="format-label">PDF</div>
                  </div>
                </label>
                
                <label class="format-option">
                  <input type="radio" name="exportFormat" value="googleSheet">
                  <div class="format-content">
                    <i class="fas fa-file-spreadsheet format-icon"></i>
                    <div class="format-label">Google Sheet</div>
                  </div>
                </label>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Metrics to include</label>
              <div class="checkbox-group">
                <div class="checkbox-item">
                  <input type="checkbox" id="allMetrics" name="metrics" value="all" checked>
                  <label for="allMetrics">All metrics</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="metricCallsOffered" name="metrics" value="callsOffered">
                  <label for="metricCallsOffered">Calls Offered</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="metricCallsAccepted" name="metrics" value="callsAccepted">
                  <label for="metricCallsAccepted">Calls Accepted</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="metricAnswerRate" name="metrics" value="answerRate">
                  <label for="metricAnswerRate">Answer Rate</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="metricTalkTime" name="metrics" value="talkTime">
                  <label for="metricTalkTime">Average Talk Time</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="metricAcw" name="metrics" value="acw">
                  <label for="metricAcw">ACW (After Call Work)</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="metricOnQueue" name="metrics" value="onQueue">
                  <label for="metricOnQueue">On Queue Percentage</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="metricOffQueue" name="metrics" value="offQueue">
                  <label for="metricOffQueue">Off Queue Percentage</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="metricInteractingTime" name="metrics" value="interactingTime">
                  <label for="metricInteractingTime">Interacting Time</label>
                </div>
              </div>
            </div>
            
            <div class="info-box">
              <div class="info-box-title">
                <i class="fas fa-info-circle"></i> About exporting
              </div>
              <p>The exported file will include both raw metrics data and calculated performance statistics. 
              Larger date ranges may take longer to process. You'll be notified when your export is ready to download.</p>
            </div>
            
            <div class="form-actions">
              <button type="button" id="cancelBtn" class="btn btn-secondary">
                <i class="fas fa-times"></i> Cancel
              </button>
              <button type="submit" class="btn btn-primary">
                <i class="fas fa-file-export"></i> Export Data
              </button>
            </div>
          </form>
        </div>
      </div>
      
      <!-- Export Results (initially hidden) -->
      <div id="resultsCard" class="card" style="display: none;">
        <div class="card-header">
          <div class="card-title">
            <i class="fas fa-check-circle"></i> Export Results
          </div>
        </div>
        
        <div class="card-content">
          <div class="progress-container" id="exportProgress">
            <div class="progress-bar" style="width: 100%;"></div>
          </div>
          
          <div class="result-container">
            <div id="exportSuccess">
              <h3 style="color: var(--success-color); margin-bottom: 16px;">
                <i class="fas fa-check-circle"></i> Export Complete
              </h3>
              <p>Your metrics data has been successfully exported. You can download the file or view it directly.</p>
              
              <div class="result-file">
                <div class="file-icon" id="resultFileIcon">
                  <i class="fas fa-file-excel"></i>
                </div>
                <div class="file-info">
                  <div class="file-name" id="resultFileName">Metrics_Export_Team_Apr2025.xlsx</div>
                  <div class="file-meta" id="resultFileMeta">Excel file • Generated on Apr 6, 2025</div>
                </div>
                <div class="file-action">
                  <button class="btn btn-secondary" id="viewFileBtn">
                    <i class="fas fa-eye"></i> View
                  </button>
                  <button class="btn btn-primary" id="downloadFileBtn">
                    <i class="fas fa-download"></i> Download
                  </button>
                </div>
              </div>
              
              <div style="margin-top: 24px; text-align: center;">
                <button class="btn btn-secondary" id="createNewExportBtn">
                  <i class="fas fa-plus"></i> Create Another Export
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Processing export request...</div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Your metrics have been exported successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let teamMembers = [];
    let exportUrl = "";
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set up event listeners
      setupEventListeners();
      
      // Load team members
      loadTeamMembers();
      
      // Set default dates
      setDefaultDates();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Export type change
      document.querySelectorAll('input[name="exportType"]').forEach(function(radio) {
        radio.addEventListener('change', function() {
          const teamMembersSelector = document.getElementById('teamMembersSelector');
          teamMembersSelector.style.display = this.value === 'individual' ? 'block' : 'none';
        });
      });
      
      // Time period change
      document.getElementById('timePeriod').addEventListener('change', function() {
        const customDateRange = document.getElementById('customDateRange');
        customDateRange.style.display = this.value === 'custom' ? 'flex' : 'none';
      });
      
      // "All metrics" checkbox
      document.getElementById('allMetrics').addEventListener('change', function() {
        const metricCheckboxes = document.querySelectorAll('input[name="metrics"]:not([value="all"])');
        metricCheckboxes.forEach(checkbox => {
          checkbox.checked = this.checked;
          checkbox.disabled = this.checked;
        });
      });
      
      // "All members" checkbox
      document.getElementById('allMembers').addEventListener('change', function() {
        const memberCheckboxes = document.querySelectorAll('input[name="teamMember"]:not([value="all"])');
        memberCheckboxes.forEach(checkbox => {
          checkbox.checked = this.checked;
          checkbox.disabled = this.checked;
        });
      });
      
      // Export form submit
      document.getElementById('exportForm').addEventListener('submit', function(e) {
        e.preventDefault();
        exportMetrics();
      });
      
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', function() {
        google.script.run.closeMetricsExport();
      });
      
      // Create new export button
      document.getElementById('createNewExportBtn').addEventListener('click', function() {
        document.getElementById('exportForm').reset();
        document.getElementById('resultsCard').style.display = 'none';
      });
      
      // Download button
      document.getElementById('downloadFileBtn').addEventListener('click', function() {
        if (exportUrl) {
          window.open(exportUrl, '_blank');
        } else {
          showToast('Error', 'Export file not available for download', 'error');
        }
      });
      
      // View file button
      document.getElementById('viewFileBtn').addEventListener('click', function() {
        if (exportUrl) {
          window.open(exportUrl, '_blank');
        } else {
          showToast('Error', 'Export file not available for viewing', 'error');
        }
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', hideToast);
      
      // Handle individual checkbox selections
      document.addEventListener('click', function(e) {
        if (e.target && e.target.name === 'metrics' && e.target.value !== 'all') {
          // If an individual metric is unchecked, uncheck the "All metrics" checkbox
          if (!e.target.checked) {
            document.getElementById('allMetrics').checked = false;
          }
          
          // If all individual metrics are checked, check the "All metrics" checkbox
          const allIndividualChecked = Array.from(
            document.querySelectorAll('input[name="metrics"]:not([value="all"])')
          ).every(checkbox => checkbox.checked);
          
          if (allIndividualChecked) {
            document.getElementById('allMetrics').checked = true;
          }
        }
        
        if (e.target && e.target.name === 'teamMember' && e.target.value !== 'all') {
          // If an individual member is unchecked, uncheck the "All members" checkbox
          if (!e.target.checked) {
            document.getElementById('allMembers').checked = false;
          }
          
          // If all individual members are checked, check the "All members" checkbox
          const allMembersChecked = Array.from(
            document.querySelectorAll('input[name="teamMember"]:not([value="all"])')
          ).every(checkbox => checkbox.checked);
          
          if (allMembersChecked) {
            document.getElementById('allMembers').checked = true;
          }
        }
      });
    }
    
    // Load team members
    function loadTeamMembers() {
      showLoading('Loading team members...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            teamMembers = result.teamMembers;
            populateTeamMembers();
          } else {
            showToast('Error', result.message || 'Failed to load team members', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading team members:', error);
          showToast('Error', 'Failed to load team members', 'error');
        })
        .getTeamMembers();
    }
    
    // Populate team members checkboxes
    function populateTeamMembers() {
      const container = document.getElementById('teamMembersCheckboxes');
      
      // Keep the "All team members" option
      const allMembersOption = container.querySelector('.checkbox-item');
      container.innerHTML = '';
      container.appendChild(allMembersOption);
      
      // Add individual team members
      teamMembers.forEach(member => {
        const item = document.createElement('div');
        item.className = 'checkbox-item';
        
        const id = 'member_' + member.id;
        
        item.innerHTML = `
          <input type="checkbox" id="${id}" name="teamMember" value="${member.id}" disabled checked>
          <label for="${id}">${member.name}</label>
        `;
        
        container.appendChild(item);
      });
    }
    
    // Set default dates
    function setDefaultDates() {
      const today = new Date();
      const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
      
      // Set the default date range to current month
      document.getElementById('startDate').value = formatDateForInput(startOfMonth);
      document.getElementById('endDate').value = formatDateForInput(today);
    }
    
    // Export metrics
    function exportMetrics() {
      // Get form data
      const exportType = document.querySelector('input[name="exportType"]:checked').value;
      const timePeriod = document.getElementById('timePeriod').value;
      const exportFormat = document.querySelector('input[name="exportFormat"]:checked').value;
      
      // Get selected metrics
      let selectedMetrics = [];
      if (document.getElementById('allMetrics').checked) {
        selectedMetrics = ['all'];
      } else {
        document.querySelectorAll('input[name="metrics"]:checked').forEach(function(checkbox) {
          selectedMetrics.push(checkbox.value);
        });
      }
      
      if (selectedMetrics.length === 0) {
        showToast('Error', 'Please select at least one metric to export', 'error');
        return;
      }
      
      // Get selected team members
      let selectedMembers = [];
      if (exportType === 'individual') {
        if (document.getElementById('allMembers').checked) {
          selectedMembers = ['all'];
        } else {
          document.querySelectorAll('input[name="teamMember"]:checked').forEach(function(checkbox) {
            if (checkbox.value !== 'all') {
              selectedMembers.push(checkbox.value);
            }
          });
        }
        
        if (selectedMembers.length === 0) {
          showToast('Error', 'Please select at least one team member', 'error');
          return;
        }
      }
      
      // Get date range for custom period
      let startDate = null;
      let endDate = null;
      if (timePeriod === 'custom') {
        startDate = document.getElementById('startDate').value;
        endDate = document.getElementById('endDate').value;
        
        if (!startDate || !endDate) {
          showToast('Error', 'Please select both start and end dates', 'error');
          return;
        }
        
        // Validate date range
        if (new Date(startDate) > new Date(endDate)) {
          showToast('Error', 'Start date cannot be after end date', 'error');
          return;
        }
      }
      
      // Prepare export parameters
      const exportParams = {
        exportType: exportType,
        timePeriod: timePeriod,
        exportFormat: exportFormat,
        metrics: selectedMetrics,
        members: selectedMembers,
        startDate: startDate,
        endDate: endDate
      };
      
      // Show loading and start export
      showLoading('Processing export request...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            // Store export URL for download/view
            exportUrl = result.url;
            
            // Update result file information
            document.getElementById('resultFileName').textContent = result.fileName;
            document.getElementById('resultFileMeta').textContent = `${result.fileType} • Generated on ${formatDate(new Date())}`;
            
            // Update file icon
            const fileIconElement = document.getElementById('resultFileIcon').querySelector('i');
            fileIconElement.className = getFileIconClass(result.fileFormat);
            
            // Show results card
            document.getElementById('resultsCard').style.display = 'block';
            
            // Scroll to results
            document.getElementById('resultsCard').scrollIntoView({ behavior: 'smooth' });
            
            showToast('Success', 'Your metrics data has been successfully exported', 'success');
          } else {
            showToast('Error', result.message || 'Failed to export metrics data', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error exporting metrics:', error);
          showToast('Error', 'Failed to export metrics data', 'error');
        })
        .exportMetricsData(exportParams);
    }
    
    // Get file icon class based on file format
    function getFileIconClass(format) {
      switch (format) {
        case 'excel':
          return 'fas fa-file-excel';
        case 'csv':
          return 'fas fa-file-csv';
        case 'pdf':
          return 'fas fa-file-pdf';
        case 'googleSheet':
          return 'fas fa-file-spreadsheet';
        default:
          return 'fas fa-file';
      }
    }
    
    // Format date for input fields (YYYY-MM-DD)
    function formatDateForInput(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
    
    // Format date for display (e.g., Apr 6, 2025)
    function formatDate(date) {
      return date.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      });
    }
    
    // Show loading overlay
    function showLoading(message = 'Loading...') {
      const overlay = document.getElementById('loadingOverlay');
      document.querySelector('.loading-text').textContent = message;
      overlay.classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'success') {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      } else if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Hide toast after 5 seconds
      setTimeout(hideToast, 5000);
    }
    
    // Hide toast notification
    function hideToast() {
      document.getElementById('toast').classList.remove('visible');
    }
  </script>
</body>
</html>







<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Metrics Email Configuration</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 8px;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      opacity: 0.9;
    }
    
    .content {
      flex: 1;
      padding: 32px;
    }
    
    .tab-container {
      display: flex;
      border-bottom: 1px solid var(--border-light);
      margin-bottom: 24px;
      gap: 8px;
    }
    
    .tab-button {
      padding: 12px 24px;
      background: none;
      border: none;
      border-bottom: 3px solid transparent;
      font-weight: 600;
      font-size: 14px;
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-normal);
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: -1px;
    }
    
    .tab-button:hover {
      color: var(--primary-color);
    }
    
    .tab-button.active {
      color: var(--primary-color);
      border-bottom-color: var(--primary-color);
    }
    
    .tab-content {
      display: none;
    }
    
    .tab-content.active {
      display: block;
      animation: fadeIn 0.3s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--text-primary);
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-actions {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-content {
      padding: 24px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 42px;
      height: 24px;
    }
    
    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--text-tertiary);
      transition: var(--transition-normal);
      border-radius: 24px;
    }
    
    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: var(--transition-normal);
      border-radius: 50%;
    }
    
    input:checked + .toggle-slider {
      background-color: var(--primary-color);
    }
    
    input:checked + .toggle-slider:before {
      transform: translateX(18px);
    }
    
    .toggle-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 12px 0;
      border-bottom: 1px solid var(--border-light);
    }
    
    .toggle-container:last-child {
      border-bottom: none;
    }
    
    .toggle-label {
      font-weight: 500;
    }
    
    .schedule-selector {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
      margin-top: 12px;
    }
    
    .schedule-option {
      flex-grow: 1;
      min-width: 100px;
      background-color: var(--bg-secondary);
      border: 2px solid transparent;
      border-radius: var(--radius-md);
      padding: 12px;
      cursor: pointer;
      transition: all var(--transition-normal);
      text-align: center;
      font-weight: 500;
    }
    
    .schedule-option:hover {
      background-color: var(--bg-tertiary);
    }
    
    .schedule-option.active {
      background-color: var(--primary-light);
      border-color: var(--primary-color);
      color: white;
    }
    
    .recipient-list {
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      padding: 4px;
      min-height: 48px;
      margin-top: 12px;
    }
    
    .recipient {
      display: inline-flex;
      align-items: center;
      background-color: white;
      border-radius: var(--radius-sm);
      padding: 4px 8px;
      margin: 4px;
      font-size: 13px;
      box-shadow: var(--shadow-sm);
      gap: 6px;
    }
    
    .recipient-remove {
      cursor: pointer;
      color: var(--text-tertiary);
      font-size: 12px;
      width: 16px;
      height: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      background-color: var(--bg-tertiary);
    }
    
    .recipient-remove:hover {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .add-recipient {
      display: flex;
      gap: 8px;
      margin-top: 12px;
      align-items: flex-start;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      border: none;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-small {
      padding: 6px 12px;
      font-size: 13px;
    }
    
    .form-actions {
      display: flex;
      justify-content: flex-end;
      gap: 16px;
      margin-top: 32px;
    }
    
    .report-template {
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      padding: 16px;
      margin-top: 12px;
      display: flex;
      gap: 16px;
      align-items: flex-start;
      cursor: pointer;
      transition: all var(--transition-normal);
    }
    
    .report-template:hover {
      border-color: var(--primary-light);
      background-color: var(--bg-secondary);
    }
    
    .report-template.active {
      border-color: var(--primary-color);
      background-color: var(--bg-secondary);
    }
    
    .report-template-icon {
      width: 48px;
      height: 48px;
      background-color: var(--primary-light);
      border-radius: var(--radius-md);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      color: white;
      flex-shrink: 0;
    }
    
    .report-template-content {
      flex: 1;
    }
    
    .report-template-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .report-template-description {
      color: var(--text-tertiary);
      font-size: 13px;
    }
    
    .checkbox-group {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      margin-top: 12px;
    }
    
    .checkbox-item {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 12px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
    }
    
    .checkbox-item input[type="checkbox"] {
      width: 18px;
      height: 18px;
      accent-color: var(--primary-color);
    }
    
    .preview-container {
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      padding: 16px;
      margin-top: 16px;
    }
    
    .preview-header {
      padding-bottom: 12px;
      border-bottom: 1px solid var(--border-light);
      margin-bottom: 12px;
    }
    
    .preview-subject {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .preview-recipients {
      color: var(--text-tertiary);
      font-size: 13px;
    }
    
    .preview-body {
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      max-height: 300px;
      overflow-y: auto;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(85, 64, 175, 0.3);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 16px;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
      max-width: 400px;
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    @media (max-width: 768px) {
      .header {
        padding: 20px;
      }
      
      .content {
        padding: 16px;
      }
      
      .report-template {
        flex-direction: column;
      }
      
      .form-actions {
        flex-direction: column;
      }
      
      .btn {
        width: 100%;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <h1 class="header-title">
          <i class="fas fa-envelope-open-text"></i> Metrics Email Configuration
        </h1>
        <div class="header-subtitle">
          Configure automated email reports for performance metrics
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="tab-container">
        <button class="tab-button active" data-tab="schedule">
          <i class="fas fa-calendar-alt"></i> Schedule
        </button>
        <button class="tab-button" data-tab="recipients">
          <i class="fas fa-users"></i> Recipients
        </button>
        <button class="tab-button" data-tab="content">
          <i class="fas fa-file-alt"></i> Content
        </button>
        <button class="tab-button" data-tab="preview">
          <i class="fas fa-eye"></i> Preview
        </button>
      </div>
      
      <div class="tab-content active" id="schedule-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-calendar-alt"></i> Email Report Schedule
            </div>
          </div>
          
          <div class="card-content">
            <div class="toggle-container">
              <div class="toggle-label">Enable automated email reports</div>
              <label class="toggle-switch">
                <input type="checkbox" id="enableReports" checked>
                <span class="toggle-slider"></span>
              </label>
            </div>
            
            <div id="schedule-options">
              <div class="form-group">
                <label class="form-label">Report Frequency</label>
                <div class="schedule-selector">
                  <div class="schedule-option" data-value="daily">Daily</div>
                  <div class="schedule-option active" data-value="weekly">Weekly</div>
                  <div class="schedule-option" data-value="monthly">Monthly</div>
                  <div class="schedule-option" data-value="quarterly">Quarterly</div>
                </div>
              </div>
              
              <!-- Weekly options -->
              <div class="form-group" id="weekly-options">
                <label class="form-label">Select day of week</label>
                <div class="schedule-selector">
                  <div class="schedule-option" data-value="1">Mon</div>
                  <div class="schedule-option active" data-value="2">Tue</div>
                  <div class="schedule-option" data-value="3">Wed</div>
                  <div class="schedule-option" data-value="4">Thu</div>
                  <div class="schedule-option" data-value="5">Fri</div>
                  <div class="schedule-option" data-value="6">Sat</div>
                  <div class="schedule-option" data-value="0">Sun</div>
                </div>
              </div>
              
              <!-- Monthly options -->
              <div class="form-group" id="monthly-options" style="display: none;">
                <label class="form-label">Select day of month</label>
                <select class="form-control">
                  <option value="1">1st of month</option>
                  <option value="15" selected>15th of month</option>
                  <option value="last">Last day of month</option>
                  <option value="first_monday">First Monday of month</option>
                  <option value="last_friday">Last Friday of month</option>
                </select>
              </div>
              
              <!-- Quarterly options -->
              <div class="form-group" id="quarterly-options" style="display: none;">
                <label class="form-label">Select quarters</label>
                <div class="checkbox-group">
                  <div class="checkbox-item">
                    <input type="checkbox" id="q1" checked>
                    <label for="q1">Q1 (Jan-Mar)</label>
                  </div>
                  <div class="checkbox-item">
                    <input type="checkbox" id="q2" checked>
                    <label for="q2">Q2 (Apr-Jun)</label>
                  </div>
                  <div class="checkbox-item">
                    <input type="checkbox" id="q3" checked>
                    <label for="q3">Q3 (Jul-Sep)</label>
                  </div>
                  <div class="checkbox-item">
                    <input type="checkbox" id="q4" checked>
                    <label for="q4">Q4 (Oct-Dec)</label>
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Time of day to send reports</label>
                <select class="form-control" id="reportTime">
                  <option value="8:00">8:00 AM</option>
                  <option value="9:00" selected>9:00 AM</option>
                  <option value="12:00">12:00 PM</option>
                  <option value="15:00">3:00 PM</option>
                  <option value="17:00">5:00 PM</option>
                </select>
              </div>
              
              <div class="toggle-container">
                <div>
                  <div class="toggle-label">Send reports on holidays</div>
                  <div style="font-size: 13px; color: var(--text-tertiary);">Reports will be sent even on public holidays</div>
                </div>
                <label class="toggle-switch">
                  <input type="checkbox" id="sendOnHolidays">
                  <span class="toggle-slider"></span>
                </label>
              </div>
              
              <div class="toggle-container">
                <div>
                  <div class="toggle-label">Attach metrics file</div>
                  <div style="font-size: 13px; color: var(--text-tertiary);">Include a spreadsheet with raw metrics data</div>
                </div>
                <label class="toggle-switch">
                  <input type="checkbox" id="attachFile" checked>
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="form-actions">
              <button type="button" id="nextToRecipients" class="btn btn-primary">
                Next: Recipients <i class="fas fa-arrow-right"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <div class="tab-content" id="recipients-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-users"></i> Email Recipients
            </div>
          </div>
          
          <div class="card-content">
            <div class="form-group">
              <label class="form-label">Current Recipients</label>
              <div class="recipient-list" id="recipientsList">
                <!-- Example recipients -->
                <div class="recipient" data-email="manager@example.com">
                  <span>manager@example.com</span>
                  <div class="recipient-remove"><i class="fas fa-times"></i></div>
                </div>
                <div class="recipient" data-email="team-lead@example.com">
                  <span>team-lead@example.com</span>
                  <div class="recipient-remove"><i class="fas fa-times"></i></div>
                </div>
              </div>
              
              <div class="add-recipient">
                <input type="email" class="form-control" id="newRecipient" placeholder="Enter email address">
                <button type="button" id="addRecipientBtn" class="btn btn-secondary btn-small">
                  <i class="fas fa-plus"></i> Add
                </button>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Add Team Members</label>
              <div class="checkbox-group" id="teamMembersList">
                <!-- Will be populated dynamically -->
              </div>
            </div>
            
            <div class="toggle-container">
              <div>
                <div class="toggle-label">Send individual reports to team members</div>
                <div style="font-size: 13px; color: var(--text-tertiary);">Each team member receives their own performance report</div>
              </div>
              <label class="toggle-switch">
                <input type="checkbox" id="sendIndividualReports" checked>
                <span class="toggle-slider"></span>
              </label>
            </div>
            
            <div class="form-actions">
              <button type="button" id="backToSchedule" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back
              </button>
              <button type="button" id="nextToContent" class="btn btn-primary">
                Next: Content <i class="fas fa-arrow-right"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <div class="tab-content" id="content-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-file-alt"></i> Email Content
            </div>
          </div>
          
          <div class="card-content">
            <div class="form-group">
              <label class="form-label">Report Templates</label>
              
              <div class="report-template active" data-template="standard">
                <div class="report-template-icon">
                  <i class="fas fa-chart-bar"></i>
                </div>
                <div class="report-template-content">
                  <div class="report-template-title">Standard Performance Report</div>
                  <div class="report-template-description">
                    Includes key performance metrics with comparison to previous period and goals
                  </div>
                </div>
              </div>
              
              <div class="report-template" data-template="comprehensive">
                <div class="report-template-icon">
                  <i class="fas fa-chart-line"></i>
                </div>
                <div class="report-template-content">
                  <div class="report-template-title">Comprehensive Performance Analysis</div>
                  <div class="report-template-description">
                    Detailed report with all metrics, trend analysis, and actionable insights
                  </div>
                </div>
              </div>
              
              <div class="report-template" data-template="executive">
                <div class="report-template-icon">
                  <i class="fas fa-tachometer-alt"></i>
                </div>
                <div class="report-template-content">
                  <div class="report-template-title">Executive Summary</div>
                  <div class="report-template-description">
                    High-level overview with key metrics and important highlights only
                  </div>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Email Subject</label>
              <input type="text" class="form-control" id="emailSubject" value="Weekly Performance Metrics Report - {date}">
              <div style="font-size: 13px; color: var(--text-tertiary); margin-top: 4px;">
                Use {date} for the report date and {team} for team name
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Metrics to Include</label>
              <div class="checkbox-group">
                <div class="checkbox-item">
                  <input type="checkbox" id="includeAnswerRate" checked>
                  <label for="includeAnswerRate">Answer Rate</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="includeTalkTime" checked>
                  <label for="includeTalkTime">Talk Time</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="includeAcw" checked>
                  <label for="includeAcw">ACW</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="includeOnQueue" checked>
                  <label for="includeOnQueue">On Queue %</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="includeInteractingTime" checked>
                  <label for="includeInteractingTime">Interacting Time</label>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Additional Notes</label>
              <textarea class="form-control" id="additionalNotes" rows="4" placeholder="Enter any additional notes to include in the email..."></textarea>
            </div>
            
            <div class="toggle-container">
              <div>
                <div class="toggle-label">Include performance flags</div>
                <div style="font-size: 13px; color: var(--text-tertiary);">Highlight team members who are below target metrics</div>
              </div>
              <label class="toggle-switch">
                <input type="checkbox" id="includeFlags" checked>
                <span class="toggle-slider"></span>
              </label>
            </div>
            
            <div class="form-actions">
              <button type="button" id="backToRecipients" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back
              </button>
              <button type="button" id="nextToPreview" class="btn btn-primary">
                Next: Preview <i class="fas fa-arrow-right"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <div class="tab-content" id="preview-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-eye"></i> Preview Email Report
            </div>
            <div class="card-actions">
              <button type="button" id="refreshPreviewBtn" class="btn btn-secondary btn-small">
                <i class="fas fa-sync-alt"></i> Refresh
              </button>
            </div>
          </div>
          
          <div class="card-content">
            <div class="preview-container">
              <div class="preview-header">
                <div class="preview-subject">Weekly Performance Metrics Report - Apr 6, 2025</div>
                <div class="preview-recipients">To: manager@example.com, team-lead@example.com</div>
              </div>
              
              <div class="preview-body" id="emailPreviewContent">
                <!-- Will be populated dynamically -->
                <div style="font-family: Arial, sans-serif; color: #333;">
                  <p>Hello,</p>
                  
                  <p>Please find attached the weekly performance metrics report for the period ending Apr 6, 2025.</p>
                  
                  <div style="margin: 20px 0; padding: 15px; border: 1px solid #e2e8f0; border-radius: 5px; background-color: #f8fafc;">
                    <h2 style="color: #5540af; margin-top: 0;">Team Performance Summary</h2>
                    
                    <table style="width: 100%; border-collapse: collapse; margin: 15px 0;">
                      <tr style="background-color: #f1f5f9; text-align: left;">
                        <th style="padding: 10px; border-bottom: 1px solid #e2e8f0;">Metric</th>
                        <th style="padding: 10px; border-bottom: 1px solid #e2e8f0;">Current</th>
                        <th style="padding: 10px; border-bottom: 1px solid #e2e8f0;">Previous</th>
                        <th style="padding: 10px; border-bottom: 1px solid #e2e8f0;">Goal</th>
                        <th style="padding: 10px; border-bottom: 1px solid #e2e8f0;">Status</th>
                      </tr>
                      <tr>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">Answer Rate</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">96.8%</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">94.2%</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">95%</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0; color: #10b981;">✓ Met</td>
                      </tr>
                      <tr>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">Average Talk Time</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">17.3 min</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">17.5 min</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">15-20 min</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0; color: #10b981;">✓ Met</td>
                      </tr>
                      <tr>
                                                <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">ACW</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">5.7 min</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">6.5 min</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">≤5 min</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0; color: #f59e0b;">⚠ Near Goal</td>
                      </tr>
                      <tr>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">On Queue Percentage</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">68.2%</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">64.7%</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">65%</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0; color: #10b981;">✓ Met</td>
                      </tr>
                      <tr>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">Interacting Time</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">5.2 hrs</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">4.9 hrs</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0;">4-6 hrs</td>
                        <td style="padding: 10px; border-bottom: 1px solid #e2e8f0; color: #10b981;">✓ Met</td>
                      </tr>
                    </table>
                    
                    <h3 style="color: #5540af; margin-top: 20px;">Performance Flags</h3>
                    <p>The following team members have metrics that need attention:</p>
                    <ul style="margin-top: 10px;">
                      <li><strong>Jane Doe</strong>: ACW is 8.3 min (goal: ≤5 min)</li>
                      <li><strong>Mike Wilson</strong>: Answer Rate is 93.8% (goal: 95%)</li>
                    </ul>
                  </div>
                  
                  <p>Additional notes: Team performance has improved overall since last period, with significant gains in Answer Rate and On Queue Percentage. We should continue to focus on reducing ACW time.</p>
                  
                  <p style="margin-top: 20px;">Best regards,<br>
                  Team Management App</p>
                </div>
              </div>
            </div>
            
            <div class="form-group" style="margin-top: 24px;">
              <label class="form-label">Send a test email to:</label>
              <div class="add-recipient">
                <input type="email" class="form-control" id="testEmailRecipient" placeholder="Enter your email address">
                <button type="button" id="sendTestEmailBtn" class="btn btn-secondary">
                  <i class="fas fa-paper-plane"></i> Send Test
                </button>
              </div>
            </div>
            
            <div class="form-actions">
              <button type="button" id="backToContent" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back
              </button>
              <button type="button" id="saveConfigBtn" class="btn btn-primary">
                <i class="fas fa-save"></i> Save Configuration
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Saving configuration...</div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Email configuration has been saved successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let emailConfig = {};
    let teamMembers = [];
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set up event listeners
      setupEventListeners();
      
      // Load configuration data
      loadEmailConfiguration();
      
      // Load team members
      loadTeamMembers();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Tab switching
      const tabButtons = document.querySelectorAll('.tab-button');
      tabButtons.forEach(function(button) {
        button.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          switchTab(tabId);
        });
      });
      
      // Enable/disable reports toggle
      document.getElementById('enableReports').addEventListener('change', function() {
        const scheduleOptions = document.getElementById('schedule-options');
        scheduleOptions.style.display = this.checked ? 'block' : 'none';
      });
      
      // Schedule frequency selection
      const scheduleOptions = document.querySelectorAll('.schedule-option');
      scheduleOptions.forEach(function(option) {
        option.addEventListener('click', function() {
          // Remove active class from siblings
          const parent = this.parentElement;
          const siblings = parent.querySelectorAll('.schedule-option');
          siblings.forEach(sibling => sibling.classList.remove('active'));
          
          // Add active class to clicked option
          this.classList.add('active');
          
          // Show/hide appropriate schedule options
          const value = this.getAttribute('data-value');
          if (parent.classList.contains('schedule-selector') && !this.parentElement.id.includes('options')) {
            document.getElementById('weekly-options').style.display = value === 'weekly' ? 'block' : 'none';
            document.getElementById('monthly-options').style.display = value === 'monthly' ? 'block' : 'none';
            document.getElementById('quarterly-options').style.display = value === 'quarterly' ? 'block' : 'none';
          }
        });
      });
      
      // Report template selection
      const reportTemplates = document.querySelectorAll('.report-template');
      reportTemplates.forEach(function(template) {
        template.addEventListener('click', function() {
          reportTemplates.forEach(t => t.classList.remove('active'));
          this.classList.add('active');
        });
      });
      
      // Add recipient button
      document.getElementById('addRecipientBtn').addEventListener('click', function() {
        addRecipient();
      });
      
      // Enter key in recipient input
      document.getElementById('newRecipient').addEventListener('keyup', function(e) {
        if (e.key === 'Enter') {
          addRecipient();
        }
      });
      
      // Remove recipient
      document.addEventListener('click', function(e) {
        if (e.target.closest('.recipient-remove')) {
          const recipient = e.target.closest('.recipient');
          recipient.remove();
        }
      });
      
      // Send test email
      document.getElementById('sendTestEmailBtn').addEventListener('click', function() {
        sendTestEmail();
      });
      
      // Save configuration
      document.getElementById('saveConfigBtn').addEventListener('click', function() {
        saveConfiguration();
      });
      
      // Navigation buttons
      document.getElementById('nextToRecipients').addEventListener('click', function() {
        switchTab('recipients');
      });
      
      document.getElementById('backToSchedule').addEventListener('click', function() {
        switchTab('schedule');
      });
      
      document.getElementById('nextToContent').addEventListener('click', function() {
        switchTab('content');
      });
      
      document.getElementById('backToRecipients').addEventListener('click', function() {
        switchTab('recipients');
      });
      
      document.getElementById('nextToPreview').addEventListener('click', function() {
        switchTab('preview');
        refreshPreview();
      });
      
      document.getElementById('backToContent').addEventListener('click', function() {
        switchTab('content');
      });
      
      // Refresh preview button
      document.getElementById('refreshPreviewBtn').addEventListener('click', function() {
        refreshPreview();
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', function() {
        hideToast();
      });
    }
    
    // Switch tab
    function switchTab(tabId) {
      // Update active tab button
      const tabButtons = document.querySelectorAll('.tab-button');
      tabButtons.forEach(function(button) {
        button.classList.remove('active');
        if (button.getAttribute('data-tab') === tabId) {
          button.classList.add('active');
        }
      });
      
      // Update active tab content
      const tabContents = document.querySelectorAll('.tab-content');
      tabContents.forEach(function(content) {
        content.classList.remove('active');
      });
      document.getElementById(tabId + '-tab').classList.add('active');
    }
    
    // Load email configuration
    function loadEmailConfiguration() {
      showLoading('Loading configuration...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            emailConfig = result.config || {};
            populateConfiguration();
          } else {
            showToast('Error', result.message || 'Failed to load email configuration', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading email configuration:', error);
          showToast('Error', 'Failed to load email configuration', 'error');
        })
        .getEmailConfiguration();
    }
    
    // Load team members
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            teamMembers = result.teamMembers || [];
            populateTeamMembers();
          } else {
            console.error('Failed to load team members:', result.message);
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error loading team members:', error);
        })
        .getTeamMembers();
    }
    
    // Populate configuration in the form
    function populateConfiguration() {
      if (!emailConfig) return;
      
      // Enable/disable reports
      document.getElementById('enableReports').checked = emailConfig.enabled !== false;
      document.getElementById('schedule-options').style.display = emailConfig.enabled !== false ? 'block' : 'none';
      
      // Frequency
      if (emailConfig.frequency) {
        const frequencyOptions = document.querySelectorAll('.schedule-selector:first-of-type .schedule-option');
        frequencyOptions.forEach(function(option) {
          option.classList.toggle('active', option.getAttribute('data-value') === emailConfig.frequency);
        });
        
        // Show/hide appropriate schedule options
        document.getElementById('weekly-options').style.display = emailConfig.frequency === 'weekly' ? 'block' : 'none';
        document.getElementById('monthly-options').style.display = emailConfig.frequency === 'monthly' ? 'block' : 'none';
        document.getElementById('quarterly-options').style.display = emailConfig.frequency === 'quarterly' ? 'block' : 'none';
      }
      
      // Day of week for weekly reports
      if (emailConfig.frequency === 'weekly' && emailConfig.dayOfWeek) {
        const dayOptions = document.querySelectorAll('#weekly-options .schedule-option');
        dayOptions.forEach(function(option) {
          option.classList.toggle('active', option.getAttribute('data-value') === emailConfig.dayOfWeek.toString());
        });
      }
      
      // Day of month for monthly reports
      if (emailConfig.frequency === 'monthly' && emailConfig.dayOfMonth) {
        document.querySelector('#monthly-options select').value = emailConfig.dayOfMonth;
      }
      
      // Quarterly options
      if (emailConfig.frequency === 'quarterly' && emailConfig.quarters) {
        document.getElementById('q1').checked = emailConfig.quarters.includes('Q1');
        document.getElementById('q2').checked = emailConfig.quarters.includes('Q2');
        document.getElementById('q3').checked = emailConfig.quarters.includes('Q3');
        document.getElementById('q4').checked = emailConfig.quarters.includes('Q4');
      }
      
      // Time of day
      if (emailConfig.timeOfDay) {
        document.getElementById('reportTime').value = emailConfig.timeOfDay;
      }
      
      // Other options
      document.getElementById('sendOnHolidays').checked = emailConfig.sendOnHolidays === true;
      document.getElementById('attachFile').checked = emailConfig.attachFile !== false;
      
      // Recipients
      if (emailConfig.recipients && emailConfig.recipients.length) {
        const recipientsList = document.getElementById('recipientsList');
        recipientsList.innerHTML = '';
        
        emailConfig.recipients.forEach(function(recipient) {
          addRecipientToList(recipient);
        });
      }
      
      // Individual reports
      document.getElementById('sendIndividualReports').checked = emailConfig.sendIndividualReports !== false;
      
      // Report template
      if (emailConfig.template) {
        const templates = document.querySelectorAll('.report-template');
        templates.forEach(function(template) {
          template.classList.toggle('active', template.getAttribute('data-template') === emailConfig.template);
        });
      }
      
      // Email subject
      if (emailConfig.subject) {
        document.getElementById('emailSubject').value = emailConfig.subject;
      }
      
      // Metrics to include
      if (emailConfig.metrics) {
        document.getElementById('includeAnswerRate').checked = emailConfig.metrics.includes('answerRate');
        document.getElementById('includeTalkTime').checked = emailConfig.metrics.includes('talkTime');
        document.getElementById('includeAcw').checked = emailConfig.metrics.includes('acw');
        document.getElementById('includeOnQueue').checked = emailConfig.metrics.includes('onQueue');
        document.getElementById('includeInteractingTime').checked = emailConfig.metrics.includes('interactingTime');
      }
      
      // Additional notes
      if (emailConfig.notes) {
        document.getElementById('additionalNotes').value = emailConfig.notes;
      }
      
      // Include flags
      document.getElementById('includeFlags').checked = emailConfig.includeFlags !== false;
    }
    
    // Populate team members
    function populateTeamMembers() {
      const container = document.getElementById('teamMembersList');
      container.innerHTML = '';
      
      teamMembers.forEach(function(member) {
        const item = document.createElement('div');
        item.className = 'checkbox-item';
        
        const checked = emailConfig.teamMemberRecipients && 
                      emailConfig.teamMemberRecipients.includes(member.id) ? 'checked' : '';
        
        item.innerHTML = `
          <input type="checkbox" id="member_${member.id}" name="teamMember" value="${member.id}" ${checked}>
          <label for="member_${member.id}">${member.name} (${member.email})</label>
        `;
        
        container.appendChild(item);
      });
    }
    
    // Add a recipient to the list
    function addRecipient() {
      const input = document.getElementById('newRecipient');
      const email = input.value.trim();
      
      if (!email) return;
      
      // Basic email validation
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        showToast('Error', 'Please enter a valid email address', 'error');
        return;
      }
      
      // Check if already in list
      const existingRecipients = document.querySelectorAll('.recipient');
      let isDuplicate = false;
      existingRecipients.forEach(function(recipient) {
        if (recipient.getAttribute('data-email') === email) {
          isDuplicate = true;
        }
      });
      
      if (isDuplicate) {
        showToast('Error', 'This email is already in the recipients list', 'error');
        return;
      }
      
      // Add to list
      addRecipientToList(email);
      
      // Clear input
      input.value = '';
    }
    
    // Add a recipient element to the list
    function addRecipientToList(email) {
      const recipientsList = document.getElementById('recipientsList');
      const recipientElement = document.createElement('div');
      recipientElement.className = 'recipient';
      recipientElement.setAttribute('data-email', email);
      
      recipientElement.innerHTML = `
        <span>${email}</span>
        <div class="recipient-remove"><i class="fas fa-times"></i></div>
      `;
      
      recipientsList.appendChild(recipientElement);
    }
    
    // Refresh email preview
    function refreshPreview() {
      showLoading('Generating preview...');
      
      // Gather current configuration
      const currentConfig = getFormConfiguration();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            // Update email preview
            document.getElementById('emailPreviewContent').innerHTML = result.previewHtml;
            
            // Update subject and recipients
            document.querySelector('.preview-subject').textContent = result.subject;
            const recipientsText = result.recipients.join(', ');
            document.querySelector('.preview-recipients').textContent = 'To: ' + (recipientsText || 'No recipients selected');
          } else {
            showToast('Error', result.message || 'Failed to generate preview', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error generating preview:', error);
          showToast('Error', 'Failed to generate preview', 'error');
        })
        .generateEmailPreview(currentConfig);
    }
    
    // Send test email
    function sendTestEmail() {
      const emailAddress = document.getElementById('testEmailRecipient').value.trim();
      
      if (!emailAddress) {
        showToast('Error', 'Please enter an email address', 'error');
        return;
      }
      
      // Basic email validation
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(emailAddress)) {
        showToast('Error', 'Please enter a valid email address', 'error');
        return;
      }
      
      // Gather current configuration
      const currentConfig = getFormConfiguration();
      
      showLoading('Sending test email...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showToast('Success', `Test email sent to ${emailAddress}`, 'success');
          } else {
            showToast('Error', result.message || 'Failed to send test email', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error sending test email:', error);
          showToast('Error', 'Failed to send test email', 'error');
        })
        .sendTestEmail(emailAddress, currentConfig);
    }
    
    // Save configuration
    function saveConfiguration() {
      // Gather configuration from form
      const config = getFormConfiguration();
      
      showLoading('Saving configuration...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            emailConfig = config;
            showToast('Success', 'Email configuration has been saved successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to save configuration', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error saving configuration:', error);
          showToast('Error', 'Failed to save configuration', 'error');
        })
        .saveEmailConfiguration(config);
    }
    
    // Get current configuration from form
    function getFormConfiguration() {
      // Gather all form values
      const config = {};
      
      // Enabled status
      config.enabled = document.getElementById('enableReports').checked;
      
      // Frequency
      const frequencyOption = document.querySelector('.schedule-selector:first-of-type .schedule-option.active');
      config.frequency = frequencyOption ? frequencyOption.getAttribute('data-value') : 'weekly';
      
      // Day of week for weekly reports
      if (config.frequency === 'weekly') {
        const dayOption = document.querySelector('#weekly-options .schedule-option.active');
        config.dayOfWeek = dayOption ? parseInt(dayOption.getAttribute('data-value')) : 2; // Default to Tuesday (2)
      }
      
      // Day of month for monthly reports
      if (config.frequency === 'monthly') {
        config.dayOfMonth = document.querySelector('#monthly-options select').value;
      }
      
      // Quarters for quarterly reports
      if (config.frequency === 'quarterly') {
        config.quarters = [];
        if (document.getElementById('q1').checked) config.quarters.push('Q1');
        if (document.getElementById('q2').checked) config.quarters.push('Q2');
        if (document.getElementById('q3').checked) config.quarters.push('Q3');
        if (document.getElementById('q4').checked) config.quarters.push('Q4');
      }
      
      // Time of day
      config.timeOfDay = document.getElementById('reportTime').value;
      
      // Other options
      config.sendOnHolidays = document.getElementById('sendOnHolidays').checked;
      config.attachFile = document.getElementById('attachFile').checked;
      
      // Recipients
      config.recipients = [];
      document.querySelectorAll('.recipient').forEach(function(recipient) {
        config.recipients.push(recipient.getAttribute('data-email'));
      });
      
      // Team member recipients
      config.teamMemberRecipients = [];
      document.querySelectorAll('input[name="teamMember"]:checked').forEach(function(checkbox) {
        config.teamMemberRecipients.push(checkbox.value);
      });
      
      // Individual reports
      config.sendIndividualReports = document.getElementById('sendIndividualReports').checked;
      
      // Report template
      const templateElement = document.querySelector('.report-template.active');
      config.template = templateElement ? templateElement.getAttribute('data-template') : 'standard';
      
      // Email subject
      config.subject = document.getElementById('emailSubject').value;
      
      // Metrics to include
      config.metrics = [];
      if (document.getElementById('includeAnswerRate').checked) config.metrics.push('answerRate');
      if (document.getElementById('includeTalkTime').checked) config.metrics.push('talkTime');
      if (document.getElementById('includeAcw').checked) config.metrics.push('acw');
      if (document.getElementById('includeOnQueue').checked) config.metrics.push('onQueue');
      if (document.getElementById('includeInteractingTime').checked) config.metrics.push('interactingTime');
      
      // Additional notes
      config.notes = document.getElementById('additionalNotes').value;
      
      // Include flags
      config.includeFlags = document.getElementById('includeFlags').checked;
      
      return config;
    }
    
    // Show loading overlay
    function showLoading(message = 'Loading...') {
      const overlay = document.getElementById('loadingOverlay');
      document.querySelector('.loading-text').textContent = message;
      overlay.classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'success') {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      } else if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Hide toast after 5 seconds
      setTimeout(hideToast, 5000);
    }
    
    // Hide toast notification
    function hideToast() {
      document.getElementById('toast').classList.remove('visible');
    }
  </script>
</body>
</html>





/**
 * MetricsService.gs - Handles all functionality related to team metrics
 * 
 * 🌟 Provides functions for:
 * - Metrics sheet initialization
 * - Metrics data management
 * - Reporting and analytics
 * - Dashboard data generation
 */

/**
 * 📊 Initialize the Metrics sheet with required headers
 * @return {Boolean} Success flag
 */
function initializeMetricsSheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    
    // Create sheet if it doesn't exist
    if (!sheet) {
      sheet = ss.insertSheet(CONFIG.SHEETS.METRICS);
    }
    
    // Set up headers
    const headers = [
      'Metric ID',
      'Team Member ID',
      'Team Member Name',
      'Date',
      'Calls Offered',
      'Calls Accepted',
      'Answer Rate',
      'Average Talk Time',
      'ACW Percentage',
      'On Queue Percentage',
      'Off Queue Percentage',
      'Interacting Time',
      'Notes',
      'Created By',
      'Created Date',
      'Modified Date'
    ];
    
    // Check if headers already exist
    const existingHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Only set headers if they don't match
    if (existingHeaders.length !== headers.length || !headers.every((header, i) => header === existingHeaders[i])) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
      
      // Format the sheet
      sheet.autoResizeColumns(1, headers.length);
    }
    
    return true;
  } catch (error) {
    logError('initializeMetricsSheet', error);
    return false;
  }
}

/**
 * 🧹 Clear metrics cache
 * Call this function any time metrics data is modified
 * @return {Boolean} Success flag
 */
function clearMetricsCache() {
  try {
    const cache = CacheService.getScriptCache();
    cache.remove('metricsCache');
    cache.remove('teamMetricsSummaryCache');
    cache.remove('recentMetricsCache');
    return true;
  } catch (error) {
    logError('clearMetricsCache', error);
    return false;
  }
}

/**
 * 📊 Get all metrics data with proper caching
 * @return {Object} Result with metrics data
 */
function getAllMetrics() {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cachedData = cache.get('metricsCache');
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    
    if (!sheet) {
      return { 
        success: false, 
        message: 'Metrics sheet not found. Please run initialization.',
        data: []
      };
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return { success: true, message: 'No metrics data found.', data: [] };
    }
    
    const data = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    const metrics = data
      .filter(row => row[0]) // Filter out empty rows (check if Metric ID exists)
      .map(row => {
        const metric = {};
        headers.forEach((header, index) => {
          metric[header] = row[index];
        });
        return metric;
      });
    
    const result = { success: true, data: metrics };
    
    // Cache the result for 5 minutes
    cache.put('metricsCache', JSON.stringify(result), 300);
    
    return result;
  } catch (error) {
    logError('getAllMetrics', error);
    return { 
      success: false, 
      message: 'Error retrieving metrics: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 📊 Get metrics for a specific team member
 * @param {String} teamMemberId - Team member ID
 * @param {Date} startDate - Optional start date filter
 * @param {Date} endDate - Optional end date filter
 * @return {Object} Result with team member's metrics
 */
function getTeamMemberMetrics(teamMemberId, startDate, endDate) {
  try {
    if (!teamMemberId) {
      return { 
        success: false, 
        message: 'Team member ID is required',
        data: []
      };
    }
    
    // Get team member details first to validate
    const teamMemberResult = getTeamMemberById(teamMemberId);
    if (!teamMemberResult.success) {
      return { 
        success: false, 
        message: 'Team member not found: ' + teamMemberResult.message,
        data: []
      };
    }
    
    // Get all metrics
    const metricsResult = getAllMetrics();
    if (!metricsResult.success) {
      return metricsResult;
    }
    
    // Filter metrics for this team member
    let teamMemberMetrics = metricsResult.data.filter(metric => 
      metric['Team Member ID'] === teamMemberId
    );
    
    // Apply date filters if provided
    if (startDate) {
      const start = new Date(startDate);
      teamMemberMetrics = teamMemberMetrics.filter(metric => 
        new Date(metric['Date']) >= start
      );
    }
    
    if (endDate) {
      const end = new Date(endDate);
      teamMemberMetrics = teamMemberMetrics.filter(metric => 
        new Date(metric['Date']) <= end
      );
    }
    
    // Sort by date (newest first)
    teamMemberMetrics.sort((a, b) => new Date(b['Date']) - new Date(a['Date']));
    
    return { 
      success: true, 
      data: teamMemberMetrics,
      teamMember: {
        id: teamMemberResult.data['Team Member ID'],
        name: teamMemberResult.data['Full Name']
      }
    };
  } catch (error) {
    logError('getTeamMemberMetrics', error);
    return { 
      success: false, 
      message: 'Error retrieving team member metrics: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 📊 Get daily metrics for specific date
 * @param {Date} date - Date to retrieve metrics for
 * @return {Object} Result with daily metrics
 */
function getDailyMetrics(date) {
  try {
    if (!date) {
      // Default to today
      date = new Date();
    }
    
    // Convert to Date object if string was passed
    if (typeof date === 'string') {
      date = new Date(date);
    }
    
    // Format date for comparison (remove time component)
    const targetDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    
    // Get all metrics
    const metricsResult = getAllMetrics();
    if (!metricsResult.success) {
      return metricsResult;
    }
    
    // Filter metrics for the specified date
    const dailyMetrics = metricsResult.data.filter(metric => {
      const metricDate = new Date(metric['Date']);
      return metricDate.getFullYear() === targetDate.getFullYear() &&
             metricDate.getMonth() === targetDate.getMonth() &&
             metricDate.getDate() === targetDate.getDate();
    });
    
    // Get active team members for this day
    const activeTeamMembersResult = getActiveTeamMembers();
    let teamMembers = [];
    
    if (activeTeamMembersResult.success) {
      teamMembers = activeTeamMembersResult.data;
    }
    
    // Group metrics by team member
    const metricsByTeamMember = {};
    dailyMetrics.forEach(metric => {
      metricsByTeamMember[metric['Team Member ID']] = metric;
    });
    
    // Create composite result including team members who don't have metrics
    const compositeData = teamMembers.map(member => {
      const metrics = metricsByTeamMember[member['Team Member ID']];
      return {
        teamMemberId: member['Team Member ID'],
        teamMemberName: member['Full Name'],
        hasMetrics: !!metrics,
        metrics: metrics || {
          'Date': targetDate,
          'Calls Offered': null,
          'Calls Accepted': null,
          'Answer Rate': null,
          'Average Talk Time': null,
          'ACW Percentage': null,
          'On Queue Percentage': null,
          'Off Queue Percentage': null,
          'Interacting Time': null
        }
      };
    });
    
    return { 
      success: true, 
      data: compositeData,
      date: targetDate,
      formattedDate: Utilities.formatDate(targetDate, Session.getScriptTimeZone(), 'EEEE, MMMM d, yyyy')
    };
  } catch (error) {
    logError('getDailyMetrics', error);
    return { 
      success: false, 
      message: 'Error retrieving daily metrics: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 📊 Get team metrics summary with proper caching
 * @param {Date} startDate - Optional start date filter
 * @param {Date} endDate - Optional end date filter
 * @return {Object} Result with team metrics summary
 */
function getTeamMetricsSummary(startDate, endDate) {
  try {
    // Set default date range if not provided (last 30 days)
    if (!startDate) {
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 30);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Create cache key based on date range
    const cacheKey = `teamMetricsSummary_${startDate.toISOString().slice(0,10)}_${endDate.toISOString().slice(0,10)}`;
    
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cachedData = cache.get(cacheKey);
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    // Get all metrics
    const metricsResult = getAllMetrics();
    if (!metricsResult.success) {
      return metricsResult;
    }
    
    // Filter metrics for the date range
    const filteredMetrics = metricsResult.data.filter(metric => {
      const metricDate = new Date(metric['Date']);
      return metricDate >= startDate && metricDate <= endDate;
    });
    
    if (filteredMetrics.length === 0) {
      return {
        success: true,
        message: 'No metrics found for the specified date range.',
        data: {
          callsOffered: 0,
          callsAccepted: 0,
          answerRate: 0,
          avgTalkTime: 0,
          acwPercentage: 0,
          onQueuePercentage: 0,
          offQueuePercentage: 0,
          interactingTime: 0
        }
      };
    }
    
    // Calculate totals and averages
    let totalCallsOffered = 0;
    let totalCallsAccepted = 0;
    const answerRates = [];
    const talkTimes = [];
    const acwPercentages = [];
    const onQueuePercentages = [];
    const offQueuePercentages = [];
    const interactingTimes = [];
    
    filteredMetrics.forEach(metric => {
      if (metric['Calls Offered']) totalCallsOffered += Number(metric['Calls Offered']);
      if (metric['Calls Accepted']) totalCallsAccepted += Number(metric['Calls Accepted']);
      
      if (metric['Answer Rate']) answerRates.push(Number(metric['Answer Rate']));
      if (metric['Average Talk Time']) talkTimes.push(Number(metric['Average Talk Time']));
      if (metric['ACW Percentage']) acwPercentages.push(Number(metric['ACW Percentage']));
      if (metric['On Queue Percentage']) onQueuePercentages.push(Number(metric['On Queue Percentage']));
      if (metric['Off Queue Percentage']) offQueuePercentages.push(Number(metric['Off Queue Percentage']));
      if (metric['Interacting Time']) interactingTimes.push(Number(metric['Interacting Time']));
    });
    
    // Calculate averages
    const averageAnswerRate = answerRates.length > 0 ? 
      answerRates.reduce((a, b) => a + b, 0) / answerRates.length : 0;
    
    const averageTalkTime = talkTimes.length > 0 ?
      talkTimes.reduce((a, b) => a + b, 0) / talkTimes.length : 0;
    
    const averageAcwPercentage = acwPercentages.length > 0 ?
      acwPercentages.reduce((a, b) => a + b, 0) / acwPercentages.length : 0;
    
    const averageOnQueuePercentage = onQueuePercentages.length > 0 ?
      onQueuePercentages.reduce((a, b) => a + b, 0) / onQueuePercentages.length : 0;
    
    const averageOffQueuePercentage = offQueuePercentages.length > 0 ?
      offQueuePercentages.reduce((a, b) => a + b, 0) / offQueuePercentages.length : 0;
    
    const averageInteractingTime = interactingTimes.length > 0 ?
      interactingTimes.reduce((a, b) => a + b, 0) / interactingTimes.length : 0;
    
    // Prepare summary data
    const summary = {
      callsOffered: totalCallsOffered,
      callsAccepted: totalCallsAccepted,
      answerRate: averageAnswerRate,
      avgTalkTime: averageTalkTime,
      acwPercentage: averageAcwPercentage,
      onQueuePercentage: averageOnQueuePercentage,
      offQueuePercentage: averageOffQueuePercentage,
      interactingTime: averageInteractingTime,
      dataPoints: filteredMetrics.length,
      startDate: startDate,
      endDate: endDate
    };
    
    const result = { success: true, data: summary };
    
    // Cache the result for 5 minutes
    cache.put(cacheKey, JSON.stringify(result), 300);
    
    return result;
  } catch (error) {
    logError('getTeamMetricsSummary', error);
    return { 
      success: false, 
      message: 'Error calculating team metrics summary: ' + error.toString()
    };
  }
}

/**
 * 📊 Get recent metrics entries
 * @param {Number} limit - Maximum number of entries to return
 * @return {Object} Result with recent metrics
 */
function getRecentMetrics(limit = 10) {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cacheKey = `recentMetricsCache_${limit}`;
    const cachedData = cache.get(cacheKey);
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    // Get all metrics
    const metricsResult = getAllMetrics();
    if (!metricsResult.success) {
      return metricsResult;
    }
    
    // Sort by date (newest first) and limit the result
    const recentMetrics = metricsResult.data
      .sort((a, b) => new Date(b['Created Date']) - new Date(a['Created Date']))
      .slice(0, limit);
    
    const result = { success: true, data: recentMetrics };
    
    // Cache the result for 5 minutes
    cache.put(cacheKey, JSON.stringify(result), 300);
    
    return result;
  } catch (error) {
    logError('getRecentMetrics', error);
    return { 
      success: false, 
      message: 'Error retrieving recent metrics: ' + error.toString(),
      data: []
    };
  }
}

/**
 * ➕ Add metrics entry
 * @param {Object} metricsData - Metrics data
 * @return {Object} Result with success flag and metric ID
 */
function addMetricsEntry(metricsData) {
  try {
    // Validate required fields
    if (!metricsData.teamMemberId || !metricsData.date) {
      return { 
        success: false, 
        message: 'Team member ID and date are required'
      };
    }
    
    // Check for required numeric fields
    const requiredNumericFields = [
      'callsOffered',
      'callsAccepted'
    ];
    
    for (const field of requiredNumericFields) {
      if (metricsData[field] === undefined || metricsData[field] === null || isNaN(metricsData[field])) {
        return { 
          success: false, 
          message: `Field ${field} must be a number`
        };
      }
    }
    
    // Get team member details to validate
    const teamMemberResult = getTeamMemberById(metricsData.teamMemberId);
    if (!teamMemberResult.success) {
      return { 
        success: false, 
        message: 'Invalid team member: ' + teamMemberResult.message
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    
    if (!sheet) {
      // Initialize sheet if it doesn't exist
      initializeMetricsSheet();
      sheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    }
    
    // Generate a unique metric ID
    const metricId = 'METRIC-' + Utilities.getUuid().substring(0, 8).toUpperCase();
    
    // Current date for timestamps
    const now = new Date();
    
    // Convert date string to Date object if needed
    const metricDate = typeof metricsData.date === 'string' ? 
      new Date(metricsData.date) : metricsData.date;
    
    // Calculate derived metrics
    const answerRate = metricsData.callsOffered > 0 ? 
      (metricsData.callsAccepted / metricsData.callsOffered) * 100 : 0;
    
    // Get headers to ensure correct column order
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Prepare metrics data row
    const metricRow = headers.map(header => {
      switch (header) {
        case 'Metric ID':
          return metricId;
        case 'Team Member ID':
          return metricsData.teamMemberId;
        case 'Team Member Name':
          return teamMemberResult.data['Full Name'];
        case 'Date':
          return metricDate;
        case 'Calls Offered':
          return Number(metricsData.callsOffered);
        case 'Calls Accepted':
          return Number(metricsData.callsAccepted);
        case 'Answer Rate':
          return answerRate;
        case 'Average Talk Time':
          return metricsData.avgTalkTime ? Number(metricsData.avgTalkTime) : null;
        case 'ACW Percentage':
          return metricsData.acwPercentage ? Number(metricsData.acwPercentage) : null;
        case 'On Queue Percentage':
          return metricsData.onQueuePercentage ? Number(metricsData.onQueuePercentage) : null;
        case 'Off Queue Percentage':
          return metricsData.offQueuePercentage ? Number(metricsData.offQueuePercentage) : null;
        case 'Interacting Time':
          return metricsData.interactingTime ? Number(metricsData.interactingTime) : null;
        case 'Notes':
          return metricsData.notes || '';
        case 'Created By':
          return Session.getEffectiveUser().getEmail();
        case 'Created Date':
          return now;
        case 'Modified Date':
          return now;
        default:
          return '';
      }
    });
    
    // Add new row to sheet
    sheet.appendRow(metricRow);
    
    // Clear cache
    clearMetricsCache();
    
    // Send email notification if configured
    if (metricsData.sendEmailNotification) {
      sendMetricsNotificationEmail(metricId);
    }
    
    return { 
      success: true, 
      message: 'Metrics entry added successfully',
      metricId: metricId
    };
  } catch (error) {
    logError('addMetricsEntry', error);
    return { 
      success: false, 
      message: 'Error adding metrics entry: ' + error.toString()
    };
  }
}

/**
 * 🔄 Update existing metrics entry
 * @param {Object} metricsData - Updated metrics data
 * @return {Object} Result with success flag
 */
function updateMetricsEntry(metricsData) {
  try {
    // Validate required fields
    if (!metricsData.metricId) {
      return { 
        success: false, 
        message: 'Metric ID is required'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    
    if (!sheet) {
      return { 
        success: false, 
        message: 'Metrics sheet not found'
      };
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find metric row
    const metricIdCol = headers.indexOf('Metric ID');
    if (metricIdCol === -1) {
      return { 
        success: false, 
        message: 'Invalid sheet structure - Metric ID column not found'
      };
    }
    
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][metricIdCol] === metricsData.metricId) {
        rowIndex = i + 1; // +1 because arrays are 0-indexed but sheets are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      return { 
        success: false, 
        message: 'Metric entry not found'
      };
    }
    
    // Current date for timestamp
    const now = new Date();
    
    // Get team member name if needed
    let teamMemberName = '';
    if (metricsData.teamMemberId) {
      const teamMemberResult = getTeamMemberById(metricsData.teamMemberId);
      if (teamMemberResult.success) {
        teamMemberName = teamMemberResult.data['Full Name'];
      }
    }
    
    // Calculate answer rate if both calls offered and accepted are provided
    let answerRate;
    if (metricsData.callsOffered !== undefined && metricsData.callsAccepted !== undefined) {
      answerRate = metricsData.callsOffered > 0 ? 
        (metricsData.callsAccepted / metricsData.callsOffered) * 100 : 0;
    }
    
    // Update each field if provided
    headers.forEach((header, colIndex) => {
      let value = null;
      
      switch (header) {
        case 'Team Member ID':
          value = metricsData.teamMemberId;
          break;
        case 'Team Member Name':
          if (metricsData.teamMemberId && teamMemberName) {
            value = teamMemberName;
          }
          break;
        case 'Date':
          if (metricsData.date) {
            value = typeof metricsData.date === 'string' ? new Date(metricsData.date) : metricsData.date;
          }
          break;
        case 'Calls Offered':
          if (metricsData.callsOffered !== undefined) {
            value = Number(metricsData.callsOffered);
          }
          break;
        case 'Calls Accepted':
          if (metricsData.callsAccepted !== undefined) {
            value = Number(metricsData.callsAccepted);
          }
          break;
        case 'Answer Rate':
          if (answerRate !== undefined) {
            value = answerRate;
          }
          break;
        case 'Average Talk Time':
          if (metricsData.avgTalkTime !== undefined) {
            value = Number(metricsData.avgTalkTime);
          }
          break;
        case 'ACW Percentage':
          if (metricsData.acwPercentage !== undefined) {
            value = Number(metricsData.acwPercentage);
          }
          break;
        case 'On Queue Percentage':
          if (metricsData.onQueuePercentage !== undefined) {
            value = Number(metricsData.onQueuePercentage);
          }
          break;
        case 'Off Queue Percentage':
          if (metricsData.offQueuePercentage !== undefined) {
            value = Number(metricsData.offQueuePercentage);
          }
          break;
        case 'Interacting Time':
          if (metricsData.interactingTime !== undefined) {
            value = Number(metricsData.interactingTime);
          }
          break;
        case 'Notes':
          value = metricsData.notes;
          break;
        case 'Modified Date':
          value = now;
          break;
        default:
          // Skip fields that shouldn't be updated
          return;
      }
      
      // Only update if value is provided
      if (value !== undefined && value !== null) {
        sheet.getRange(rowIndex, colIndex + 1).setValue(value);
      }
    });
    
    // Clear cache
    clearMetricsCache();
    
    return { 
      success: true, 
      message: 'Metrics entry updated successfully'
    };
  } catch (error) {
    logError('updateMetricsEntry', error);
    return { 
      success: false, 
      message: 'Error updating metrics entry: ' + error.toString() 
    };
  }
}

/**
 * 🗑️ Delete metrics entry
 * @param {String} metricId - ID of the metrics entry to delete
 * @return {Object} Result with success flag
 */
function deleteMetricsEntry(metricId) {
  try {
    if (!metricId) {
      return { 
        success: false, 
        message: 'Metric ID is required'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    
    if (!sheet) {
      return { 
        success: false, 
        message: 'Metrics sheet not found'
      };
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find metric row
    const metricIdCol = headers.indexOf('Metric ID');
    if (metricIdCol === -1) {
      return { 
        success: false, 
        message: 'Invalid sheet structure - Metric ID column not found'
      };
    }
    
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][metricIdCol] === metricId) {
        rowIndex = i + 1; // +1 because arrays are 0-indexed but sheets are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      return { 
        success: false, 
        message: 'Metric entry not found'
      };
    }
    
    // Delete the row
    sheet.deleteRow(rowIndex);
    
    // Clear cache
    clearMetricsCache();
    
    return { 
      success: true, 
      message: 'Metrics entry deleted successfully'
    };
  } catch (error) {
    logError('deleteMetricsEntry', error);
    return { 
      success: false, 
      message: 'Error deleting metrics entry: ' + error.toString() 
    };
  }
}

/**
 * 📅 Get metrics data for dashboards with date range
 * @param {Date} startDate - Start date for metrics
 * @param {Date} endDate - End date for metrics
 * @param {Boolean} groupByDay - Whether to group metrics by day
 * @return {Object} Result with formatted metrics data for dashboard
 */
function getMetricsDashboardData(startDate, endDate, groupByDay = true) {
  try {
    // Set default date range if not provided (last 30 days)
    if (!startDate) {
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 30);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Get all metrics
    const metricsResult = getAllMetrics();
    if (!metricsResult.success) {
      return metricsResult;
    }
    
    // Filter metrics for the date range
    const filteredMetrics = metricsResult.data.filter(metric => {
      const metricDate = new Date(metric['Date']);
      return metricDate >= startDate && metricDate <= endDate;
    });
    
    if (filteredMetrics.length === 0) {
      return {
        success: true,
        message: 'No metrics found for the specified date range.',
        data: {
          summary: {
            callsOffered: 0,
            callsAccepted: 0,
            answerRate: 0,
            avgTalkTime: 0,
            acwPercentage: 0,
            onQueuePercentage: 0,
            offQueuePercentage: 0,
            interactingTime: 0
          },
          charts: {
            dates: [],
            answerRates: [],
            talkTimes: [],
            queuePercentages: []
          },
          topPerformers: [],
          bottomPerformers: []
        }
      };
    }
    
    // For grouped data (by day)
    const dailyData = {};
    
    // For team member performance data
    const teamMemberData = {};
    
    // Process all metrics
    filteredMetrics.forEach(metric => {
      const date = new Date(metric['Date']);
      const dateKey = Utilities.formatDate(date, Session.getScriptTimeZone(), 'yyyy-MM-dd');
      const teamMemberId = metric['Team Member ID'];
      
      // Process daily data
      if (groupByDay) {
        if (!dailyData[dateKey]) {
          dailyData[dateKey] = {
            date: date,
            callsOffered: 0,
            callsAccepted: 0,
            answerRates: [],
            talkTimes: [],
            acwPercentages: [],
            onQueuePercentages: [],
            offQueuePercentages: [],
            interactingTimes: []
          };
        }
        
        // Add metrics to daily totals
        dailyData[dateKey].callsOffered += Number(metric['Calls Offered']) || 0;
        dailyData[dateKey].callsAccepted += Number(metric['Calls Accepted']) || 0;
        
        if (metric['Answer Rate']) dailyData[dateKey].answerRates.push(Number(metric['Answer Rate']));
        if (metric['Average Talk Time']) dailyData[dateKey].talkTimes.push(Number(metric['Average Talk Time']));
        if (metric['ACW Percentage']) dailyData[dateKey].acwPercentages.push(Number(metric['ACW Percentage']));
        if (metric['On Queue Percentage']) dailyData[dateKey].onQueuePercentages.push(Number(metric['On Queue Percentage']));
        if (metric['Off Queue Percentage']) dailyData[dateKey].offQueuePercentages.push(Number(metric['Off Queue Percentage']));
        if (metric['Interacting Time']) dailyData[dateKey].interactingTimes.push(Number(metric['Interacting Time']));
      }
      
      // Process team member data
      if (!teamMemberData[teamMemberId]) {
        teamMemberData[teamMemberId] = {
          id: teamMemberId,
          name: metric['Team Member Name'],
          callsOffered: 0,
          callsAccepted: 0,
          answerRates: [],
          talkTimes: [],
          acwPercentages: [],
          onQueuePercentages: [],
          offQueuePercentages: [],
          interactingTimes: []
        };
      }
      
      // Add metrics to team member totals
      teamMemberData[teamMemberId].callsOffered += Number(metric['Calls Offered']) || 0;
      teamMemberData[teamMemberId].callsAccepted += Number(metric['Calls Accepted']) || 0;
      
      if (metric['Answer Rate']) teamMemberData[teamMemberId].answerRates.push(Number(metric['Answer Rate']));
      if (metric['Average Talk Time']) teamMemberData[teamMemberId].talkTimes.push(Number(metric['Average Talk Time']));
      if (metric['ACW Percentage']) teamMemberData[teamMemberId].acwPercentages.push(Number(metric['ACW Percentage']));
      if (metric['On Queue Percentage']) teamMemberData[teamMemberId].onQueuePercentages.push(Number(metric['On Queue Percentage']));
      if (metric['Off Queue Percentage']) teamMemberData[teamMemberId].offQueuePercentages.push(Number(metric['Off Queue Percentage']));
      if (metric['Interacting Time']) teamMemberData[teamMemberId].interactingTimes.push(Number(metric['Interacting Time']));
    });
    
    // Calculate team summary metrics
    let totalCallsOffered = 0;
    let totalCallsAccepted = 0;
    const allAnswerRates = [];
    const allTalkTimes = [];
    const allAcwPercentages = [];
    const allOnQueuePercentages = [];
    const allOffQueuePercentages = [];
    const allInteractingTimes = [];
    
    filteredMetrics.forEach(metric => {
      if (metric['Calls Offered']) totalCallsOffered += Number(metric['Calls Offered']) || 0;
      if (metric['Calls Accepted']) totalCallsAccepted += Number(metric['Calls Accepted']) || 0;
      
      if (metric['Answer Rate']) allAnswerRates.push(Number(metric['Answer Rate']));
      if (metric['Average Talk Time']) allTalkTimes.push(Number(metric['Average Talk Time']));
      if (metric['ACW Percentage']) allAcwPercentages.push(Number(metric['ACW Percentage']));
      if (metric['On Queue Percentage']) allOnQueuePercentages.push(Number(metric['On Queue Percentage']));
      if (metric['Off Queue Percentage']) allOffQueuePercentages.push(Number(metric['Off Queue Percentage']));
      if (metric['Interacting Time']) allInteractingTimes.push(Number(metric['Interacting Time']));
    });
    
    // Calculate averages for summary
    const avgAnswerRate = allAnswerRates.length > 0 ? 
      allAnswerRates.reduce((a, b) => a + b, 0) / allAnswerRates.length : 0;
    
    const avgTalkTime = allTalkTimes.length > 0 ?
      allTalkTimes.reduce((a, b) => a + b, 0) / allTalkTimes.length : 0;
    
    const avgAcwPercentage = allAcwPercentages.length > 0 ?
      allAcwPercentages.reduce((a, b) => a + b, 0) / allAcwPercentages.length : 0;
    
    const avgOnQueuePercentage = allOnQueuePercentages.length > 0 ?
      allOnQueuePercentages.reduce((a, b) => a + b, 0) / allOnQueuePercentages.length : 0;
    
    const avgOffQueuePercentage = allOffQueuePercentages.length > 0 ?
      allOffQueuePercentages.reduce((a, b) => a + b, 0) / allOffQueuePercentages.length : 0;
    
    const avgInteractingTime = allInteractingTimes.length > 0 ?
      allInteractingTimes.reduce((a, b) => a + b, 0) / allInteractingTimes.length : 0;
    
    // Calculate averages for each day
    const chartDates = [];
    const chartAnswerRates = [];
    const chartTalkTimes = [];
    const chartQueuePercentages = [];
    
    if (groupByDay) {
      // Sort dates
      const sortedDates = Object.keys(dailyData).sort();
      
      sortedDates.forEach(dateKey => {
        const day = dailyData[dateKey];
        const displayDate = Utilities.formatDate(day.date, Session.getScriptTimeZone(), 'MMM d');
        chartDates.push(displayDate);
        
        // Calculate daily averages
        const dailyAnswerRate = day.answerRates.length > 0 ?
          day.answerRates.reduce((a, b) => a + b, 0) / day.answerRates.length : 0;
        
        const dailyTalkTime = day.talkTimes.length > 0 ?
          day.talkTimes.reduce((a, b) => a + b, 0) / day.talkTimes.length : 0;
        
        const dailyOnQueuePercentage = day.onQueuePercentages.length > 0 ?
          day.onQueuePercentages.reduce((a, b) => a + b, 0) / day.onQueuePercentages.length : 0;
        
        chartAnswerRates.push(dailyAnswerRate);
        chartTalkTimes.push(dailyTalkTime);
        chartQueuePercentages.push(dailyOnQueuePercentage);
      });
    }
    
    // Calculate team member performance metrics
    Object.keys(teamMemberData).forEach(id => {
      const tm = teamMemberData[id];
      
      // Calculate averages
      tm.avgAnswerRate = tm.answerRates.length > 0 ?
        tm.answerRates.reduce((a, b) => a + b, 0) / tm.answerRates.length : 0;
      
      tm.avgTalkTime = tm.talkTimes.length > 0 ?
        tm.talkTimes.reduce((a, b) => a + b, 0) / tm.talkTimes.length : 0;
      
      tm.avgAcwPercentage = tm.acwPercentages.length > 0 ?
        tm.acwPercentages.reduce((a, b) => a + b, 0) / tm.acwPercentages.length : 0;
      
      tm.avgOnQueuePercentage = tm.onQueuePercentages.length > 0 ?
        tm.onQueuePercentages.reduce((a, b) => a + b, 0) / tm.onQueuePercentages.length : 0;
      
      tm.metricCount = tm.answerRates.length;
      
      // Calculate performance score (higher is better)
      // Formula considers high answer rate and on queue percentage as good,
      // low ACW percentage as good
      tm.performanceScore = (
        (tm.avgAnswerRate * 0.6) +
        (tm.avgOnQueuePercentage * 0.3) +
        ((100 - tm.avgAcwPercentage) * 0.1)
      ) / 100; // Scale to 0-1
    });
    
    // Convert to array and sort by performance score
    const performanceArray = Object.values(teamMemberData);
    performanceArray.sort((a, b) => b.performanceScore - a.performanceScore);
    
    // Get top and bottom performers
    const topPerformers = performanceArray.slice(0, 5).map(tm => ({
      name: tm.name,
      answerRate: tm.avgAnswerRate,
      onQueuePercentage: tm.avgOnQueuePercentage,
      acwPercentage: tm.avgAcwPercentage,
      score: tm.performanceScore
    }));
    
    const bottomPerformers = performanceArray.slice(-5).reverse().map(tm => ({
      name: tm.name,
      answerRate: tm.avgAnswerRate,
      onQueuePercentage: tm.avgOnQueuePercentage,
      acwPercentage: tm.avgAcwPercentage,
      score: tm.performanceScore
    }));
    
    return {
      success: true,
      data: {
        summary: {
          callsOffered: totalCallsOffered,
          callsAccepted: totalCallsAccepted,
          answerRate: avgAnswerRate,
          avgTalkTime: avgTalkTime,
          acwPercentage: avgAcwPercentage,
          onQueuePercentage: avgOnQueuePercentage,
          offQueuePercentage: avgOffQueuePercentage,
          interactingTime: avgInteractingTime
        },
        charts: {
          dates: chartDates,
          answerRates: chartAnswerRates,
          talkTimes: chartTalkTimes,
          queuePercentages: chartQueuePercentages
        },
        topPerformers: topPerformers,
        bottomPerformers: bottomPerformers,
        dateRange: {
          start: startDate,
          end: endDate,
          formattedStart: Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'MMM d, yyyy'),
          formattedEnd: Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'MMM d, yyyy')
        }
      }
    };
  } catch (error) {
    logError('getMetricsDashboardData', error);
    return { 
      success: false, 
      message: 'Error generating metrics dashboard data: ' + error.toString()
    };
  }
}

/**
 * 📧 Generate and send metrics report email
 * @param {Date} startDate - Start date for report
 * @param {Date} endDate - End date for report
 * @param {String} recipientEmail - Email recipient (if not provided, uses system config)
 * @return {Object} Result with success flag
 */
function sendMetricsReportEmail(startDate, endDate, recipientEmail) {
  try {
    // Set default date range if not provided (last 7 days)
    if (!startDate) {
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 7);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // If no recipient provided, get from system config
    if (!recipientEmail) {
      const configResult = getSystemConfig();
      if (configResult.success) {
        recipientEmail = configResult.data.metricsEmailRecipients || '';
      }
      
      // If still no recipient, use current user
      if (!recipientEmail) {
        recipientEmail = Session.getEffectiveUser().getEmail();
      }
    }
    
    // Get metrics dashboard data
    const dashboardResult = getMetricsDashboardData(startDate, endDate);
    if (!dashboardResult.success) {
      return dashboardResult;
    }
    
    const data = dashboardResult.data;
    
    // Format dates
    const startDateFormatted = Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'MMMM d, yyyy');
    const endDateFormatted = Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'MMMM d, yyyy');
    
    // Format metrics
    const formattedMetrics = {
      callsOffered: data.summary.callsOffered.toLocaleString(),
      callsAccepted: data.summary.callsAccepted.toLocaleString(),
      answerRate: data.summary.answerRate.toFixed(1) + '%',
      avgTalkTime: data.summary.avgTalkTime.toFixed(1) + ' min',
      acwPercentage: data.summary.acwPercentage.toFixed(1) + '%',
      onQueuePercentage: data.summary.onQueuePercentage.toFixed(1) + '%',
      offQueuePercentage: data.summary.offQueuePercentage.toFixed(1) + '%',
      interactingTime: data.summary.interactingTime.toFixed(1) + '%'
    };
    
    // Create HTML email with nice formatting
    const htmlBody = `
      <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; color: #333;">
        <div style="background: linear-gradient(90deg, #5540af, #5671cc); color: white; padding: 20px; border-radius: 6px 6px 0 0; text-align: center;">
          <h1 style="margin: 0; font-size: 24px;">Team Metrics Report</h1>
          <p style="margin: 8px 0 0; font-size: 16px;">${startDateFormatted} - ${endDateFormatted}</p>
        </div>
        
        <div style="border: 1px solid #e0e0e0; border-top: none; padding: 20px; border-radius: 0 0 6px 6px;">
          <div style="text-align: center; margin-bottom: 30px;">
            <p style="font-size: 16px;">This is an automated summary of your team's performance for the selected period.</p>
          </div>
          
          <div style="margin-bottom: 30px;">
            <h2 style="margin-top: 0; color: #5540af; font-size: 20px; border-bottom: 2px solid #e0e0e0; padding-bottom: 10px;">Key Metrics Summary</h2>
            
            <table style="width: 100%; border-collapse: collapse; margin-top: 15px;">
              <tr>
                <td style="width: 50%; padding: 12px; vertical-align: top;">
                  <div style="background-color: #f8f9fb; border-radius: 6px; padding: 15px;">
                    <h3 style="margin-top: 0; margin-bottom: 15px; color: #5540af; font-size: 16px;">Call Metrics</h3>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                      <div style="font-weight: 500;">Calls Offered:</div>
                      <div>${formattedMetrics.callsOffered}</div>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                      <div style="font-weight: 500;">Calls Accepted:</div>
                      <div>${formattedMetrics.callsAccepted}</div>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                      <div style="font-weight: 500;">Answer Rate:</div>
                      <div>${formattedMetrics.answerRate}</div>
                    </div>
                  </div>
                </td>
                <td style="width: 50%; padding: 12px; vertical-align: top;">
                  <div style="background-color: #f8f9fb; border-radius: 6px; padding: 15px;">
                    <h3 style="margin-top: 0; margin-bottom: 15px; color: #5540af; font-size: 16px;">Time Metrics</h3>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                      <div style="font-weight: 500;">Avg Talk Time:</div>
                      <div>${formattedMetrics.avgTalkTime}</div>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                      <div style="font-weight: 500;">ACW Percentage:</div>
                      <div>${formattedMetrics.acwPercentage}</div>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                      <div style="font-weight: 500;">Interacting Time:</div>
                      <div>${formattedMetrics.interactingTime}</div>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td style="width: 50%; padding: 12px; vertical-align: top;">
                  <div style="background-color: #f8f9fb; border-radius: 6px; padding: 15px;">
                    <h3 style="margin-top: 0; margin-bottom: 15px; color: #5540af; font-size: 16px;">Queue Metrics</h3>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                      <div style="font-weight: 500;">On Queue Percentage:</div>
                      <div>${formattedMetrics.onQueuePercentage}</div>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                      <div style="font-weight: 500;">Off Queue Percentage:</div>
                      <div>${formattedMetrics.offQueuePercentage}</div>
                    </div>
                  </div>
                </td>
                <td style="width: 50%; padding: 12px; vertical-align: top;">
                  <!-- Optional content for fourth box -->
                </td>
              </tr>
            </table>
          </div>
          
          <div style="margin-bottom: 30px;">
            <h2 style="margin-top: 0; color: #5540af; font-size: 20px; border-bottom: 2px solid #e0e0e0; padding-bottom: 10px;">Top Performers</h2>
            
            <table style="width: 100%; border-collapse: collapse; margin-top: 15px; text-align: left;">
              <thead>
                <tr style="background-color: #f8f9fb;">
                  <th style="padding: 10px; border-bottom: 1px solid #e0e0e0;">Team Member</th>
                  <th style="padding: 10px; border-bottom: 1px solid #e0e0e0;">Answer Rate</th>
                  <th style="padding: 10px; border-bottom: 1px solid #e0e0e0;">On Queue %</th>
                  <th style="padding: 10px; border-bottom: 1px solid #e0e0e0;">ACW %</th>
                </tr>
              </thead>
              <tbody>
                ${data.topPerformers.map(performer => `
                  <tr>
                    <td style="padding: 10px; border-bottom: 1px solid #e0e0e0;">${performer.name}</td>
                    <td style="padding: 10px; border-bottom: 1px solid #e0e0e0;">${performer.answerRate.toFixed(1)}%</td>
                    <td style="padding: 10px; border-bottom: 1px solid #e0e0e0;">${performer.onQueuePercentage.toFixed(1)}%</td>
                    <td style="padding: 10px; border-bottom: 1px solid #e0e0e0;">${performer.acwPercentage.toFixed(1)}%</td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
          
          <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
            <p style="font-size: 14px; color: #666;">This is an automated report generated by Team Lead Dashboard.</p>
            <p style="font-size: 14px; color: #666;">Generated on ${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'MMMM d, yyyy, h:mm a')}</p>
          </div>
        </div>
      </div>
    `;
    
    // Create plain text version
    const plainText = `
Team Metrics Report
${startDateFormatted} - ${endDateFormatted}

Key Metrics Summary:
- Calls Offered: ${formattedMetrics.callsOffered}
- Calls Accepted: ${formattedMetrics.callsAccepted}
- Answer Rate: ${formattedMetrics.answerRate}
- Avg Talk Time: ${formattedMetrics.avgTalkTime}
- ACW Percentage: ${formattedMetrics.acwPercentage}
- On Queue Percentage: ${formattedMetrics.onQueuePercentage}
- Off Queue Percentage: ${formattedMetrics.offQueuePercentage}
- Interacting Time: ${formattedMetrics.interactingTime}

Generated on ${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'MMMM d, yyyy, h:mm a')}
`;
    
    // Send the email
    GmailApp.sendEmail(
      recipientEmail,
      `Team Metrics Report: ${startDateFormatted} - ${endDateFormatted}`,
      plainText,
      {
        htmlBody: htmlBody,
        name: 'Team Lead Dashboard'
      }
    );
    
    return { 
      success: true, 
      message: `Metrics report sent to ${recipientEmail}`
    };
  } catch (error) {
    logError('sendMetricsReportEmail', error);
    return { 
      success: false, 
      message: 'Error sending metrics report: ' + error.toString()
    };
  }
}

/**
 * 📧 Send notification email for new metrics entry
 * @param {String} metricId - ID of the new metrics entry
 * @return {Object} Result with success flag
 */
function sendMetricsNotificationEmail(metricId) {
  try {
    if (!metricId) {
      return { 
        success: false, 
        message: 'Metric ID is required'
      };
    }
    
    // Get metrics data
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.METRICS);
    
    if (!sheet) {
      return { 
        success: false, 
        message: 'Metrics sheet not found'
      };
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find metric row
    const metricIdCol = headers.indexOf('Metric ID');
    if (metricIdCol === -1) {
      return { 
        success: false, 
        message: 'Invalid sheet structure - Metric ID column not found'
      };
    }
    
    let metricRow = null;
    for (let i = 1; i < data.length; i++) {
      if (data[i][metricIdCol] === metricId) {
        metricRow = data[i];
        break;
      }
    }
    
    if (!metricRow) {
      return { 
        success: false, 
        message: 'Metric entry not found'
      };
    }
    
    // Create metric object
    const metric = {};
    headers.forEach((header, index) => {
      metric[header] = metricRow[index];
    });
    
    // Check if email notifications are enabled
    const configResult = getSystemConfig();
    if (!configResult.success || configResult.data.metricsEmailEnabled !== "TRUE") {
      return {
        success: false,
        message: 'Email notifications are not enabled'
      };
    }
    
    const recipients = configResult.data.metricsEmailRecipients || Session.getEffectiveUser().getEmail();
    
    // Format date
    const metricDate = new Date(metric['Date']);
    const formattedDate = Utilities.formatDate(metricDate, Session.getScriptTimeZone(), 'MMMM d, yyyy');
    
    // Create HTML email with nice formatting
    const htmlBody = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; color: #333;">
        <div style="background-color: #5540af; color: white; padding: 15px; border-radius: 5px 5px 0 0;">
          <h2 style="margin: 0;">New Metrics Entry</h2>
          <p style="margin: 5px 0 0;">For ${metric['Team Member Name']} on ${formattedDate}</p>
        </div>
        
        <div style="border: 1px solid #ddd; border-top: none; padding: 20px; border-radius: 0 0 5px 5px;">
          <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
            <tr style="background-color: #f5f5f5;">
              <th style="padding: 8px; text-align: left; border-bottom: 1px solid #ddd;">Metric</th>
              <th style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">Value</th>
            </tr>
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #ddd;">Calls Offered</td>
              <td style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">${metric['Calls Offered']}</td>
            </tr>
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #ddd;">Calls Accepted</td>
              <td style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">${metric['Calls Accepted']}</td>
            </tr>
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #ddd;">Answer Rate</td>
              <td style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">${metric['Answer Rate']}%</td>
            </tr>
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #ddd;">Average Talk Time</td>
              <td style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">${metric['Average Talk Time']} min</td>
            </tr>
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #ddd;">ACW Percentage</td>
              <td style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">${metric['ACW Percentage']}%</td>
            </tr>
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #ddd;">On Queue Percentage</td>
              <td style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">${metric['On Queue Percentage']}%</td>
            </tr>
            <tr>
              <td style="padding: 8px; border-bottom: 1px solid #ddd;">Off Queue Percentage</td>
              <td style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">${metric['Off Queue Percentage']}%</td>
            </tr>
            <tr>
              <td style="padding: 8px;">Interacting Time</td>
              <td style="padding: 8px; text-align: right;">${metric['Interacting Time']}%</td>
            </tr>
          </table>
          
          ${metric['Notes'] ? `
            <div style="margin-top: 20px;">
              <h3 style="font-size: 16px; color: #5540af;">Notes</h3>
              <p style="background-color: #f5f5f5; padding: 10px; border-radius: 5px;">${metric['Notes']}</p>
            </div>
          ` : ''}
          
          <div style="margin-top: 25px; text-align: center;">
            <a href="${ScriptApp.getService().getUrl()}?page=metrics" style="background-color: #5540af; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; font-weight: bold;">View Metrics</a>
          </div>
          
          <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 14px; color: #777; text-align: center;">
            <p>This is an automated notification from Team Lead Dashboard.</p>
            <p>Generated on ${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'MMMM d, yyyy, h:mm a')}</p>
          </div>
        </div>
      </div>
    `;
    
    // Create plain text version
    const plainText = `
New Metrics Entry for ${metric['Team Member Name']} on ${formattedDate}

Metrics Summary:
- Calls Offered: ${metric['Calls Offered']}
- Calls Accepted: ${metric['Calls Accepted']}
- Answer Rate: ${metric['Answer Rate']}%
- Average Talk Time: ${metric['Average Talk Time']} min
- ACW Percentage: ${metric['ACW Percentage']}%
- On Queue Percentage: ${metric['On Queue Percentage']}%
- Off Queue Percentage: ${metric['Off Queue Percentage']}%
- Interacting Time: ${metric['Interacting Time']}%

${metric['Notes'] ? `Notes: ${metric['Notes']}` : ''}

Generated on ${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'MMMM d, yyyy, h:mm a')}
`;
    
    // Send the email
    GmailApp.sendEmail(
      recipients,
      `New Metrics Entry: ${metric['Team Member Name']} - ${formattedDate}`,
      plainText,
      {
        htmlBody: htmlBody,
        name: 'Team Lead Dashboard'
      }
    );
    
    return { 
      success: true, 
      message: `Metrics notification sent to ${recipients}`
    };
  } catch (error) {
    logError('sendMetricsNotificationEmail', error);
    return { 
      success: false, 
      message: 'Error sending metrics notification: ' + error.toString()
    };
  }
}

/**
 * 📊 Get team member performance comparison
 * @param {Array} teamMemberIds - List of team member IDs to compare
 * @param {Date} startDate - Optional start date filter
 * @param {Date} endDate - Optional end date filter
 * @return {Object} Result with comparison data
 */
function compareTeamMembers(teamMemberIds, startDate, endDate) {
  try {
    if (!teamMemberIds || !Array.isArray(teamMemberIds) || teamMemberIds.length === 0) {
      return { 
        success: false, 
        message: 'At least one team member ID is required'
      };
    }
    
    // Set default date range if not provided (last 30 days)
    if (!startDate) {
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 30);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Get metrics for each team member
    const teamMembersData = [];
    
    for (const memberId of teamMemberIds) {
      const memberResult = getTeamMemberMetrics(memberId, startDate, endDate);
      
      if (memberResult.success && memberResult.data.length > 0) {
        // Calculate average metrics for this team member
        const metrics = memberResult.data;
        const answerRates = metrics.map(m => Number(m['Answer Rate']) || 0).filter(val => val > 0);
        const talkTimes = metrics.map(m => Number(m['Average Talk Time']) || 0).filter(val => val > 0);
        const acwPercentages = metrics.map(m => Number(m['ACW Percentage']) || 0).filter(val => val > 0);
        const onQueuePercentages = metrics.map(m => Number(m['On Queue Percentage']) || 0).filter(val => val > 0);
        
        const avgAnswerRate = answerRates.length > 0 ? answerRates.reduce((a, b) => a + b, 0) / answerRates.length : 0;
        const avgTalkTime = talkTimes.length > 0 ? talkTimes.reduce((a, b) => a + b, 0) / talkTimes.length : 0;
        const avgAcwPercentage = acwPercentages.length > 0 ? acwPercentages.reduce((a, b) => a + b, 0) / acwPercentages.length : 0;
        const avgOnQueuePercentage = onQueuePercentages.length > 0 ? onQueuePercentages.reduce((a, b) => a + b, 0) / onQueuePercentages.length : 0;
        
        // Calculate total calls
        let totalCallsOffered = 0;
        let totalCallsAccepted = 0;
        
        metrics.forEach(metric => {
          totalCallsOffered += Number(metric['Calls Offered']) || 0;
          totalCallsAccepted += Number(metric['Calls Accepted']) || 0;
        });
        
        teamMembersData.push({
          id: memberId,
          name: memberResult.teamMember.name,
          metrics: {
            callsOffered: totalCallsOffered,
            callsAccepted: totalCallsAccepted,
            answerRate: avgAnswerRate,
            avgTalkTime: avgTalkTime,
            acwPercentage: avgAcwPercentage,
            onQueuePercentage: avgOnQueuePercentage
          },
          dataPoints: metrics.length
        });
      } else {
        // Add team member with empty metrics
        const memberInfo = getTeamMemberById(memberId);
        
        teamMembersData.push({
          id: memberId,
          name: memberInfo.success ? memberInfo.data['Full Name'] : `Team Member ${memberId}`,
          metrics: {
            callsOffered: 0,
            callsAccepted: 0,
            answerRate: 0,
            avgTalkTime: 0,
            acwPercentage: 0,
            onQueuePercentage: 0
          },
          dataPoints: 0
        });
      }
    }
    
    // Calculate team averages for context
    const teamResult = getTeamMetricsSummary(startDate, endDate);
    const teamAverages = teamResult.success ? teamResult.data : {
      answerRate: 0,
      avgTalkTime: 0,
      acwPercentage: 0,
      onQueuePercentage: 0
    };
    
    return {
      success: true,
      data: {
        teamMembers: teamMembersData,
        teamAverages: teamAverages,
        dateRange: {
          start: startDate,
          end: endDate,
          formattedStart: Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'MMM d, yyyy'),
          formattedEnd: Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'MMM d, yyyy')
        }
      }
    };
  } catch (error) {
    logError('compareTeamMembers', error);
    return { 
      success: false, 
      message: 'Error comparing team members: ' + error.toString()
    };
  }
}

/**
 * 📋 Get bulk metrics import template
 * @return {Object} Template for bulk metrics import
 */
function getBulkMetricsImportTemplate() {
  try {
    // Get all active team members
    const teamMembersResult = getActiveTeamMembers();
    if (!teamMembersResult.success) {
      return { 
        success: false, 
        message: 'Failed to retrieve team members: ' + teamMembersResult.message
      };
    }
    
    const today = new Date();
    const formattedDate = Utilities.formatDate(today, Session.getScriptTimeZone(), 'yyyy-MM-dd');
    
    // Create template rows for each team member
    const templateRows = teamMembersResult.data.map(member => ({
      teamMemberId: member['Team Member ID'],
      teamMemberName: member['Full Name'],
      date: formattedDate,
      callsOffered: '',
      callsAccepted: '',
      avgTalkTime: '',
      acwPercentage: '',
      onQueuePercentage: '',
      offQueuePercentage: '',
      interactingTime: '',
      notes: ''
    }));
    
    return { 
      success: true, 
      data: templateRows
    };
  } catch (error) {
    logError('getBulkMetricsImportTemplate', error);
    return { 
      success: false, 
      message: 'Error creating bulk import template: ' + error.toString()
    };
  }
}

/**
 * 📤 Import bulk metrics data
 * @param {Array} metricsData - Array of metrics data objects
 * @return {Object} Result with success flag and counts
 */
function importBulkMetrics(metricsData) {
  try {
    if (!Array.isArray(metricsData) || metricsData.length === 0) {
      return { 
        success: false, 
        message: 'No metrics data provided'
      };
    }
    
    let successCount = 0;
    let errorCount = 0;
    const errors = [];
    
    // Process each metrics entry
    metricsData.forEach((entry, index) => {
      try {
        // Skip entries without required data
        if (!entry.teamMemberId || !entry.date || 
            entry.callsOffered === '' || entry.callsAccepted === '') {
          errorCount++;
          errors.push(`Row ${index + 1}: Missing required fields`);
          return;
        }
        
        // Add metrics entry
        const result = addMetricsEntry({
          teamMemberId: entry.teamMemberId,
          date: entry.date,
          callsOffered: Number(entry.callsOffered),
          callsAccepted: Number(entry.callsAccepted),
          avgTalkTime: entry.avgTalkTime ? Number(entry.avgTalkTime) : null,
          acwPercentage: entry.acwPercentage ? Number(entry.acwPercentage) : null,
          onQueuePercentage: entry.onQueuePercentage ? Number(entry.onQueuePercentage) : null,
          offQueuePercentage: entry.offQueuePercentage ? Number(entry.offQueuePercentage) : null,
          interactingTime: entry.interactingTime ? Number(entry.interactingTime) : null,
          notes: entry.notes || ''
        });
        
        if (result.success) {
          successCount++;
        } else {
          errorCount++;
          errors.push(`Row ${index + 1}: ${result.message}`);
        }
      } catch (entryError) {
        errorCount++;
        errors.push(`Row ${index + 1}: ${entryError.toString()}`);
      }
    });
    
    // Clear cache once after all imports
    clearMetricsCache();
    
    return { 
      success: true, 
      message: `Successfully imported ${successCount} metrics entries with ${errorCount} errors`,
      data: {
        successCount: successCount,
        errorCount: errorCount,
        errors: errors
      }
    };
  } catch (error) {
    logError('importBulkMetrics', error);
    return { 
      success: false, 
      message: 'Error importing metrics: ' + error.toString()
    };
  }
}

/**
 * 📈 Get metrics trend analysis
 * @param {String} metricType - Type of metric to analyze ('answerRate', 'avgTalkTime', etc.)
 * @param {Date} startDate - Optional start date
 * @param {Date} endDate - Optional end date
 * @return {Object} Result with trend analysis data
 */
function getMetricsTrendAnalysis(metricType, startDate, endDate) {
  try {
    // Validate metric type
    const validMetrics = ['answerRate', 'avgTalkTime', 'acwPercentage', 'onQueuePercentage', 'offQueuePercentage', 'interactingTime'];
    
    if (!validMetrics.includes(metricType)) {
      return { 
        success: false, 
        message: 'Invalid metric type. Please choose one of: ' + validMetrics.join(', ')
      };
    }
    
    // Set default date range if not provided (last 90 days)
    if (!startDate) {
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 90);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Get all metrics
    const metricsResult = getAllMetrics();
    if (!metricsResult.success) {
      return metricsResult;
    }
    
    // Filter metrics for the date range
    const filteredMetrics = metricsResult.data.filter(metric => {
      const metricDate = new Date(metric['Date']);
      return metricDate >= startDate && metricDate <= endDate;
    });
    
    if (filteredMetrics.length === 0) {
      return {
        success: true,
        message: 'No metrics found for the specified date range.',
        data: {
          trend: 'No data',
          weeklyAverages: [],
          monthlyAverages: []
        }
      };
    }
    
    // Map column names from database to property names
    const metricColumnMap = {
      'answerRate': 'Answer Rate',
      'avgTalkTime': 'Average Talk Time',
      'acwPercentage': 'ACW Percentage',
      'onQueuePercentage': 'On Queue Percentage',
      'offQueuePercentage': 'Off Queue Percentage',
      'interactingTime': 'Interacting Time'
    };
    
    const metricColumn = metricColumnMap[metricType];
    
    // Group data by weeks and months
    const weeklyData = {};
    const monthlyData = {};
    
    filteredMetrics.forEach(metric => {
      const date = new Date(metric['Date']);
      const metricValue = Number(metric[metricColumn]) || 0;
      
      // Skip if no value
      if (metricValue <= 0) {
        return;
      }
      
      // Weekly grouping (year + week number)
      const weekNumber = getISOWeekNumber(date);
      const weekKey = `${date.getFullYear()}-W${weekNumber}`;
      
      if (!weeklyData[weekKey]) {
        weeklyData[weekKey] = {
          week: weekNumber,
          year: date.getFullYear(),
          date: date,
          values: []
        };
      }
      
      weeklyData[weekKey].values.push(metricValue);
      
      // Monthly grouping (year + month)
      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;
      
      if (!monthlyData[monthKey]) {
        monthlyData[monthKey] = {
          month: date.getMonth() + 1,
          year: date.getFullYear(),
          date: date,
          values: []
        };
      }
      
      monthlyData[monthKey].values.push(metricValue);
    });
    
    // Calculate averages for each week and month
    const weeklyAverages = Object.keys(weeklyData)
      .map(key => {
        const week = weeklyData[key];
        const avgValue = week.values.reduce((sum, val) => sum + val, 0) / week.values.length;
        
        return {
          period: key,
          label: `Week ${week.week}, ${week.year}`,
          displayDate: Utilities.formatDate(week.date, Session.getScriptTimeZone(), 'MMM d'),
          value: avgValue
        };
      })
      .sort((a, b) => a.period.localeCompare(b.period));
    
    const monthlyAverages = Object.keys(monthlyData)
      .map(key => {
        const month = monthlyData[key];
        const avgValue = month.values.reduce((sum, val) => sum + val, 0) / month.values.length;
        
        return {
          period: key,
          label: `${getMonthName(month.month)} ${month.year}`,
          displayDate: Utilities.formatDate(month.date, Session.getScriptTimeZone(), 'MMM yyyy'),
          value: avgValue
        };
      })
      .sort((a, b) => a.period.localeCompare(b.period));
    
    // Calculate trend
    let trend = 'stable';
    const trendThreshold = 0.05; // 5% change threshold
    
    if (weeklyAverages.length >= 2) {
      const firstAvg = weeklyAverages[0].value;
      const lastAvg = weeklyAverages[weeklyAverages.length - 1].value;
      
      const percentChange = (lastAvg - firstAvg) / firstAvg;
      
      if (percentChange > trendThreshold) {
        trend = 'improving';
      } else if (percentChange < -trendThreshold) {
        trend = 'declining';
      }
    }
    
    // Calculate month-over-month change
    let momChange = null;
    if (monthlyAverages.length >= 2) {
      const lastMonth = monthlyAverages[monthlyAverages.length - 1].value;
      const prevMonth = monthlyAverages[monthlyAverages.length - 2].value;
      
      momChange = lastMonth - prevMonth;
    }
    
    return {
      success: true,
      data: {
        metricType: metricType,
        metricName: metricColumn,
        trend: trend,
        weeklyAverages: weeklyAverages,
        monthlyAverages: monthlyAverages,
        monthOverMonthChange: momChange,
        dateRange: {
          start: startDate,
          end: endDate,
          formattedStart: Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'MMM d, yyyy'),
          formattedEnd: Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'MMM d, yyyy')
        }
      }
    };
  } catch (error) {
    logError('getMetricsTrendAnalysis', error);
    return { 
      success: false, 
      message: 'Error analyzing metrics trends: ' + error.toString()
    };
  }
}

/**
 * 📅 Get ISO week number for a date
 * @param {Date} date - Date to get week number for
 * @return {Number} ISO week number
 */
function getISOWeekNumber(date) {
  const d = new Date(date);
  d.setHours(0, 0, 0, 0);
  // Thursday in current week decides the year
  d.setDate(d.getDate() + 3 - (d.getDay() + 6) % 7);
  // January 4 is always in week 1
  const week1 = new Date(d.getFullYear(), 0, 4);
  // Adjust to Thursday in week 1 and count number of weeks from date to week1
  return 1 + Math.round(((d.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
}

/**
 * 📅 Get month name from month number
 * @param {Number} monthNum - Month number (1-12)
 * @return {String} Month name
 */
function getMonthName(monthNum) {
  const months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];
  return months[monthNum - 1];
}
/**
 * 👥 Get all team members
 * @return {Object} Result with team members data
 */
function getAllTeamMembers() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!sheet) {
      return {
        success: false,
        message: 'Team Members sheet not found. Please run initialization.',
        data: []
      };
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return { 
        success: true, 
        message: 'No team members found.', 
        data: [] 
      };
    }
    
    const data = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    const teamMembers = data
      .filter(row => row[0]) // Filter out empty rows
      .map(row => {
        const member = {};
        headers.forEach((header, index) => {
          member[header] = row[index];
        });
        return member;
      });
    
    return { 
      success: true, 
      data: teamMembers 
    };
  } catch (error) {
    logError('getAllTeamMembers', error);
    return { 
      success: false, 
      message: 'Error retrieving team members: ' + error.toString(),
      data: []
    };
  }
}






<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>QA Review Form</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--text-primary);
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-actions {
      display: flex;
      gap: 12px;
    }
    
    .card-content {
      padding: 24px;
    }
    
    .form-group {
      margin-bottom: 24px;
    }
    
    .form-row {
      display: flex;
      gap: 16px;
      margin-bottom: 16px;
    }
    
    .form-col {
      flex: 1;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    textarea.form-control {
      min-height: 80px;
      resize: vertical;
    }
    
    .section-title {
      font-family: 'Manrope', sans-serif;
      font-weight: 700;
      font-size: 16px;
      color: var(--primary-color);
      margin-top: 32px;
      margin-bottom: 16px;
      padding-bottom: 8px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .section-title i {
      color: var(--primary-color);
    }
    
    .criteria-card {
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      padding: 16px;
      margin-bottom: 16px;
      background-color: white;
      transition: box-shadow var(--transition-fast), border-color var(--transition-fast);
    }
    
    .criteria-card:hover {
      box-shadow: var(--shadow-md);
      border-color: var(--primary-light);
    }
    
    .criteria-header {
      font-weight: 600;
      margin-bottom: 12px;
    }
    
    .rating-group {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      margin-bottom: 16px;
    }
    
    .rating-option {
      position: relative;
    }
    
    .rating-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .rating-option label {
      display: inline-block;
      padding: 8px 16px;
      border-radius: var(--radius-sm);
      border: 1px solid var(--border-medium);
      background-color: var(--bg-secondary);
      font-size: 13px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .rating-option input[type="radio"]:checked + label {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-dark);
    }
    
    .rating-option input[type="radio"]:focus + label {
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.2);
    }
    
    .rating-option:hover label {
      border-color: var(--primary-light);
      background-color: var(--bg-tertiary);
    }
    
    .rating-option input[type="radio"]:checked:hover + label {
      background-color: var(--primary-dark);
    }
    
    .fully-met label {
      border-left: 3px solid var(--success-color);
    }
    
    .partially-met label {
      border-left: 3px solid var(--warning-color);
    }
    
    .not-met label {
      border-left: 3px solid var(--danger-color);
    }
    
    .na label {
      border-left: 3px solid var(--text-tertiary);
    }
    
    .fully-met input[type="radio"]:checked + label {
      background-color: var(--success-color);
    }
    
    .partially-met input[type="radio"]:checked + label {
      background-color: var(--warning-color);
    }
    
    .not-met input[type="radio"]:checked + label {
      background-color: var(--danger-color);
    }
    
    .na input[type="radio"]:checked + label {
      background-color: var(--text-tertiary);
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 12px 24px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .form-actions {
      display: flex;
      justify-content: flex-end;
      gap: 16px;
      margin-top: 32px;
      padding-top: 24px;
      border-top: 1px solid var(--border-light);
    }
    
    .score-summary {
      margin-top: 32px;
      padding: 20px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
    }
    
    .score-title {
      font-weight: 600;
      font-size: 16px;
      margin-bottom: 16px;
    }
    
    .score-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 16px;
    }
    
    .score-table th, .score-table td {
      padding: 8px;
      border-bottom: 1px solid var(--border-light);
    }
    
    .score-table th {
      text-align: left;
      color: var(--text-tertiary);
      font-weight: 500;
    }
    
    .score-result {
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .score-badge {
      font-size: 14px;
      padding: 5px 10px;
      border-radius: 20px;
      color: white;
      font-weight: 600;
    }
    
    .score-badge.excellent {
      background-color: var(--success-color);
    }
    
    .score-badge.good {
      background-color: var(--info-color);
    }
    
    .score-badge.needs-improvement {
      background-color: var(--warning-color);
    }
    
    .score-badge.critical {
      background-color: var(--danger-color);
    }
    
    .progress-bar-container {
      width: 100%;
      height: 8px;
      background-color: var(--bg-tertiary);
      border-radius: 4px;
      margin-top: 8px;
      overflow: hidden;
    }
    
    .progress-bar {
      height: 100%;
      border-radius: 4px;
    }
    
    .progress-bar.excellent {
      background-color: var(--success-color);
    }
    
    .progress-bar.good {
      background-color: var(--info-color);
    }
    
    .progress-bar.needs-improvement {
      background-color: var(--warning-color);
    }
    
    .progress-bar.critical {
      background-color: var(--danger-color);
    }
    
    .follow-up-action {
      position: relative;
    }
    
    .follow-up-action input {
      width: 100%;
      padding: 10px 12px;
      padding-right: 40px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      margin-bottom: 8px;
    }
    
    .follow-up-action input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .follow-up-action button {
      position: absolute;
      right: 8px;
      top: 8px;
      border: none;
      background: none;
      color: var(--danger-color);
      cursor: pointer;
      opacity: 0.7;
      transition: opacity var(--transition-fast);
    }
    
    .follow-up-action button:hover {
      opacity: 1;
    }
    
    .add-action-btn {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      color: var(--primary-color);
      background: none;
      border: 1px dashed var(--primary-color);
      padding: 8px 16px;
      border-radius: var(--radius-md);
      cursor: pointer;
      font-weight: 500;
      margin-top: 8px;
      transition: all var(--transition-fast);
    }
    
    .add-action-btn:hover {
      background-color: var(--primary-color);
      color: white;
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(85, 64, 175, 0.3);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 16px;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
      .header {
        padding: 20px;
      }
      
      .content {
        padding: 16px;
      }
      
      .form-row {
        flex-direction: column;
        gap: 8px;
      }
      
      .rating-group {
        flex-direction: column;
        gap: 4px;
      }
      
      .rating-option label {
        width: 100%;
        text-align: center;
      }
      
      .form-actions {
        flex-direction: column;
        gap: 8px;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-clipboard-check"></i> Quality Review
          </h1>
          <div class="header-subtitle">
            Conduct a comprehensive QA review
          </div>
        </div>
        <div class="header-actions">
          <button class="btn btn-secondary" id="saveAsDraftBtn">
            <i class="fas fa-save"></i> Save Draft
          </button>
        </div>
      </div>
    </header>
    
    <div class="content">
      <form id="qaForm">
        <!-- Counselor Information -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-user"></i> Counselor Information
            </div>
          </div>
          
          <div class="card-content">
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="counselorName">Counselor Name</label>
                  <select class="form-control" id="counselorName" name="counselorName" required>
                    <option value="">Select a counselor</option>
                    <!-- Will be populated with team members -->
                  </select>
                </div>
              </div>
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="interactionDate">Interaction Date</label>
                  <input type="date" class="form-control" id="interactionDate" name="interactionDate" required>
                </div>
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="interactionId">Interaction ID</label>
                  <input type="text" class="form-control" id="interactionId" name="interactionId" placeholder="Enter interaction ID" required>
                </div>
              </div>
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="channelType">Channel Type</label>
                  <select class="form-control" id="channelType" name="channelType">
                    <option value="chat">Chat</option>
                    <option value="phone">Phone</option>
                    <option value="email">Email</option>
                    <option value="video">Video</option>
                  </select>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Call Opening -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-phone-alt"></i> Call Opening
            </div>
          </div>
          
          <div class="card-content">
            <div class="criteria-card">
              <div class="criteria-header">Answered interaction in less than 20 seconds of joining</div>
              <div class="rating-group">
                <div class="rating-option fully-met">
                  <input type="radio" id="call-opening-1-2" name="answerTime" value="2">
                  <label for="call-opening-1-2">Fully Met (2)</label>
                </div>
                <div class="rating-option partially-met">
                  <input type="radio" id="call-opening-1-1" name="answerTime" value="1">
                  <label for="call-opening-1-1">Partially Met (1)</label>
                </div>
                <div class="rating-option not-met">
                  <input type="radio" id="call-opening-1-0" name="answerTime" value="0">
                  <label for="call-opening-1-0">Not Met (0)</label>
                </div>
                <div class="rating-option na">
                  <input type="radio" id="call-opening-1-na" name="answerTime" value="na">
                  <label for="call-opening-1-na">N/A</label>
                </div>
              </div>
              <textarea class="form-control" id="answerTimeNotes" name="answerTimeNotes" placeholder="Notes on performance for this criterion"></textarea>
            </div>
            
            <div class="criteria-card">
              <div class="criteria-header">Opening message completed with tact</div>
              <div class="rating-group">
                <div class="rating-option fully-met">
                  <input type="radio" id="call-opening-2-2" name="openingMessage" value="2">
                  <label for="call-opening-2-2">Fully Met (2)</label>
                </div>
                <div class="rating-option partially-met">
                  <input type="radio" id="call-opening-2-1" name="openingMessage" value="1">
                  <label for="call-opening-2-1">Partially Met (1)</label>
                </div>
                <div class="rating-option not-met">
                  <input type="radio" id="call-opening-2-0" name="openingMessage" value="0">
                  <label for="call-opening-2-0">Not Met (0)</label>
                </div>
                <div class="rating-option na">
                  <input type="radio" id="call-opening-2-na" name="openingMessage" value="na">
                  <label for="call-opening-2-na">N/A</label>
                </div>
              </div>
              <textarea class="form-control" id="openingMessageNotes" name="openingMessageNotes" placeholder="Notes on performance for this criterion"></textarea>
            </div>
          </div>
        </div>
        
        <!-- Risk Assessment -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-exclamation-triangle"></i> Risk Assessment
            </div>
          </div>
          
          <div class="card-content">
            <div class="criteria-card">
              <div class="criteria-header">SASS/Screener questions attempted at least twice (unless contact requested otherwise)</div>
              <div class="rating-group">
                <div class="rating-option fully-met">
                  <input type="radio" id="risk-1-2" name="screenerQuestions" value="2">
                  <label for="risk-1-2">Fully Met (2)</label>
                </div>
                <div class="rating-option partially-met">
                  <input type="radio" id="risk-1-1" name="screenerQuestions" value="1">
                  <label for="risk-1-1">Partially Met (1)</label>
                </div>
                <div class="rating-option not-met">
                  <input type="radio" id="risk-1-0" name="screenerQuestions" value="0">
                  <label for="risk-1-0">Not Met (0)</label>
                </div>
                <div class="rating-option na">
                  <input type="radio" id="risk-1-na" name="screenerQuestions" value="na">
                  <label for="risk-1-na">N/A</label>
                </div>
              </div>
              <textarea class="form-control" id="screenerQuestionsNotes" name="screenerQuestionsNotes" placeholder="Notes on performance for this criterion"></textarea>
            </div>
            
            <div class="criteria-card">
              <div class="criteria-header">Used creative non-judgmental empathy and built rapport</div>
              <div class="rating-group">
                <div class="rating-option fully-met">
                  <input type="radio" id="risk-2-2" name="empathyRapport" value="2">
                  <label for="risk-2-2">Fully Met (2)</label>
                </div>
                <div class="rating-option partially-met">
                  <input type="radio" id="risk-2-1" name="empathyRapport" value="1">
                  <label for="risk-2-1">Partially Met (1)</label>
                </div>
                <div class="rating-option not-met">
                  <input type="radio" id="risk-2-0" name="empathyRapport" value="0">
                  <label for="risk-2-0">Not Met (0)</label>
                </div>
                <div class="rating-option na">
                  <input type="radio" id="risk-2-na" name="empathyRapport" value="na">
                  <label for="risk-2-na">N/A</label>
                </div>
              </div>
              <textarea class="form-control" id="empathyRapportNotes" name="empathyRapportNotes" placeholder="Notes on performance for this criterion"></textarea>
            </div>
          </div>
        </div>
        
        <!-- Communication Skills -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-comments"></i> Communication Skills
            </div>
          </div>
          
          <div class="card-content">
            <div class="criteria-card">
              <div class="criteria-header">Demonstrated active listening through reflective responses</div>
              <div class="rating-group">
                <div class="rating-option fully-met">
                  <input type="radio" id="comm-1-2" name="activeListening" value="2">
                  <label for="comm-1-2">Fully Met (2)</label>
                </div>
                <div class="rating-option partially-met">
                  <input type="radio" id="comm-1-1" name="activeListening" value="1">
                  <label for="comm-1-1">Partially Met (1)</label>
                </div>
                <div class="rating-option not-met">
                  <input type="radio" id="comm-1-0" name="activeListening" value="0">
                  <label for="comm-1-0">Not Met (0)</label>
                </div>
                <div class="rating-option na">
                  <input type="radio" id="comm-1-na" name="activeListening" value="na">
                  <label for="comm-1-na">N/A</label>
                </div>
              </div>
              <textarea class="form-control" id="activeListeningNotes" name="activeListeningNotes" placeholder="Notes on performance for this criterion"></textarea>
            </div>
            
            <div class="criteria-card">
              <div class="criteria-header">Used appropriate LGBTQ+ inclusive language</div>
              <div class="rating-group">
                <div class="rating-option fully-met">
                  <input type="radio" id="comm-2-2" name="inclusiveLanguage" value="2">
                  <label for="comm-2-2">Fully Met (2)</label>
                </div>
                <div class="rating-option partially-met">
                  <input type="radio" id="comm-2-1" name="inclusiveLanguage" value="1">
                  <label for="comm-2-1">Partially Met (1)</label>
                </div>
                <div class="rating-option not-met">
                  <input type="radio" id="comm-2-0" name="inclusiveLanguage" value="0">
                  <label for="comm-2-0">Not Met (0)</label>
                </div>
                <div class="rating-option na">
                  <input type="radio" id="comm-2-na" name="inclusiveLanguage" value="na">
                  <label for="comm-2-na">N/A</label>
                </div>
              </div>
              <textarea class="form-control" id="inclusiveLanguageNotes" name="inclusiveLanguageNotes" placeholder="Notes on performance for this criterion"></textarea>
            </div>
            
            <div class="criteria-card">
              <div class="criteria-header">Responded to emotional content with appropriate empathy</div>
              <div class="rating-group">
                <div class="rating-option fully-met">
                  <input type="radio" id="comm-3-2" name="emotionalResponse" value="2">
                  <label for="comm-3-2">Fully Met (2)</label>
                </div>
                <div class="rating-option partially-met">
                  <input type="radio" id="comm-3-1" name="emotionalResponse" value="1">
                  <label for="comm-3-1">Partially Met (1)</label>
                </div>
                <div class="rating-option not-met">
                  <input type="radio" id="comm-3-0" name="emotionalResponse" value="0">
                  <label for="comm-3-0">Not Met (0)</label>
                </div>
                <div class="rating-option na">
                  <input type="radio" id="comm-3-na" name="emotionalResponse" value="na">
                  <label for="comm-3-na">N/A</label>
                </div>
              </div>
              <textarea class="form-control" id="emotionalResponseNotes" name="emotionalResponseNotes" placeholder="Notes on performance for this criterion"></textarea>
            </div>
          </div>
        </div>
        
        <!-- Support Effectiveness -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-hands-helping"></i> Support Effectiveness
            </div>
          </div>
          
          <div class="card-content">
            <div class="criteria-card">
              <div class="criteria-header">Provided appropriate resources relevant to the contact's needs</div>
              <div class="rating-group">
                <div class="rating-option fully-met">
                  <input type="radio" id="support-1-2" name="resources" value="2">
                  <label for="support-1-2">Fully Met (2)</label>
                </div>
                <div class="rating-option partially-met">
                  <input type="radio" id="support-1-1" name="resources" value="1">
                  <label for="support-1-1">Partially Met (1)</label>
                </div>
                <div class="rating-option not-met">
                  <input type="radio" id="support-1-0" name="resources" value="0">
                  <label for="support-1-0">Not Met (0)</label>
                </div>
                <div class="rating-option na">
                  <input type="radio" id="support-1-na" name="resources" value="na">
                  <label for="support-1-na">N/A</label>
                </div>
              </div>
              <textarea class="form-control" id="resourcesNotes" name="resourcesNotes" placeholder="Notes on performance for this criterion"></textarea>
            </div>
            
            <div class="criteria-card">
              <div class="criteria-header">Helped identify coping strategies or action steps</div>
              <div class="rating-group">
                <div class="rating-option fully-met">
                  <input type="radio" id="support-2-2" name="copingStrategies" value="2">
                  <label for="support-2-2">Fully Met (2)</label>
                </div>
                <div class="rating-option partially-met">
                  <input type="radio" id="support-2-1" name="copingStrategies" value="1">
                  <label for="support-2-1">Partially Met (1)</label>
                </div>
                <div class="rating-option not-met">
                  <input type="radio" id="support-2-0" name="copingStrategies" value="0">
                  <label for="support-2-0">Not Met (0)</label>
                </div>
                <div class="rating-option na">
                  <input type="radio" id="support-2-na" name="copingStrategies" value="na">
                  <label for="support-2-na">N/A</label>
                </div>
              </div>
              <textarea class="form-control" id="copingStrategiesNotes" name="copingStrategiesNotes" placeholder="Notes on performance for this criterion"></textarea>
            </div>
          </div>
        </div>
        
        <!-- Call Closure -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-door-closed"></i> Call Closure
            </div>
          </div>
          
          <div class="card-content">
            <div class="criteria-card">
              <div class="criteria-header">Summarized key points of the interaction</div>
              <div class="rating-group">
                <div class="rating-option fully-met">
                  <input type="radio" id="closure-1-2" name="summarized" value="2">
                  <label for="closure-1-2">Fully Met (2)</label>
                </div>
                <div class="rating-option partially-met">
                  <input type="radio" id="closure-1-1" name="summarized" value="1">
                  <label for="closure-1-1">Partially Met (1)</label>
                </div>
                <div class="rating-option not-met">
                  <input type="radio" id="closure-1-0" name="summarized" value="0">
                  <label for="closure-1-0">Not Met (0)</label>
                </div>
                <div class="rating-option na">
                  <input type="radio" id="closure-1-na" name="summarized" value="na">
                  <label for="closure-1-na">N/A</label>
                </div>
              </div>
              <textarea class="form-control" id="summarizedNotes" name="summarizedNotes" placeholder="Notes on performance for this criterion"></textarea>
            </div>
            
            <div class="criteria-card">
              <div class="criteria-header">Completed closure process appropriately</div>
              <div class="rating-group">
                <div class="rating-option fully-met">
                  <input type="radio" id="closure-2-2" name="closureProcess" value="2">
                  <label for="closure-2-2">Fully Met (2)</label>
                </div>
                <div class="rating-option partially-met">
                  <input type="radio" id="closure-2-1" name="closureProcess" value="1">
                  <label for="closure-2-1">Partially Met (1)</label>
                </div>
                <div class="rating-option not-met">
                  <input type="radio" id="closure-2-0" name="closureProcess" value="0">
                  <label for="closure-2-0">Not Met (0)</label>
                </div>
                <div class="rating-option na">
                  <input type="radio" id="closure-2-na" name="closureProcess" value="na">
                  <label for="closure-2-na">N/A</label>
                </div>
              </div>
              <textarea class="form-control" id="closureProcessNotes" name="closureProcessNotes" placeholder="Notes on performance for this criterion"></textarea>
            </div>
          </div>
        </div>
        
        <!-- Overall Feedback -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-comment-dots"></i> Overall Feedback
            </div>
          </div>
          
          <div class="card-content">
            <div class="form-group">
              <label class="form-label" for="overallFeedback">Comprehensive feedback about the interaction</label>
              <textarea class="form-control" id="overallFeedback" name="overallFeedback" rows="6" placeholder="Provide comprehensive feedback about the interaction, including specific strengths and growth opportunities"></textarea>
            </div>
          </div>
        </div>
        
        <!-- Score Summary -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-bar"></i> Score Summary
            </div>
          </div>
          
          <div class="card-content">
            <div id="scoreSummary" class="score-summary">
              <div class="score-title">Score Calculation</div>
              <table class="score-table">
                <tr>
                  <th>Section</th>
                  <th>Points</th>
                  <th>Possible Points</th>
                </tr>
                <tr>
                  <td>Call Opening</td>
                  <td id="callOpeningPoints">-</td>
                  <td>4</td>
                </tr>
                <tr>
                  <td>Risk Assessment</td>
                  <td id="riskAssessmentPoints">-</td>
                  <td>4</td>
                </tr>
                <tr>
                  <td>Communication Skills</td>
                  <td id="communicationPoints">-</td>
                  <td>6</td>
                </tr>
                <tr>
                  <td>Support Effectiveness</td>
                  <td id="supportPoints">-</td>
                  <td>4</td>
                </tr>
                <tr>
                  <td>Call Closure</td>
                  <td id="closurePoints">-</td>
                  <td>4</td>
                </tr>
              </table>
              
              <div class="score-result">
                <div>
                  Total Score: <span id="totalPoints">0</span> / <span id="possiblePoints">22</span> (<span id="percentageScore">0%</span>)
                </div>
                <div>
                  <span id="qualityBadge" class="score-badge">Not Calculated</span>
                </div>
              </div>
              
              <div class="progress-bar-container">
                <div id="scoreProgressBar" class="progress-bar" style="width: 0%"></div>
              </div>
              
              <div class="form-group" style="margin-top: 20px;">
                <label class="form-label">Quality Status</label>
                <div class="rating-group">
                  <div class="rating-option">
                    <input type="radio" id="quality-excellent" name="qualityStatus" value="excellent">
                    <label for="quality-excellent" style="border-left-color: var(--success-color);">Excellent (90-100%)</label>
                  </div>
                  <div class="rating-option">
                    <input type="radio" id="quality-good" name="qualityStatus" value="good">
                    <label for="quality-good" style="border-left-color: var(--info-color);">Good (75-89%)</label>
                  </div>
                  <div class="rating-option">
                    <input type="radio" id="quality-needs-improvement" name="qualityStatus" value="needs-improvement">
                    <label for="quality-needs-improvement" style="border-left-color: var(--warning-color);">Needs Improvement (<75%)</label>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Follow-Up Actions -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-tasks"></i> Follow-Up Actions
            </div>
          </div>
          
          <div class="card-content">
            <div id="followUpActions">
              <div class="follow-up-action">
                <input type="text" name="followUpAction[]" placeholder="Enter follow-up action">
                <button type="button" class="remove-action-btn"><i class="fas fa-times"></i></button>
              </div>
            </div>
            
            <button type="button" id="addActionBtn" class="add-action-btn">
              <i class="fas fa-plus"></i> Add Follow-Up Action
            </button>
            
            <div class="form-group" style="margin-top: 24px;">
              <label class="form-label" for="reviewerName">Reviewer</label>
              <input type="text" class="form-control" id="reviewerName" name="reviewerName" readonly>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="reviewDate">Review Date</label>
              <input type="date" class="form-control" id="reviewDate" name="reviewDate" readonly>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="sendEmail">Send review to counselor?</label>
              <div style="display: flex; gap: 8px; align-items: center;">
                <input type="checkbox" id="sendEmail" name="sendEmail" style="transform: scale(1.3);">
                <label for="sendEmail">Yes, send this review to the counselor via email</label>
              </div>
            </div>
          </div>
        </div>
        
        <div class="form-actions">
          <button type="button" id="cancelBtn" class="btn btn-secondary">
            <i class="fas fa-times"></i> Cancel
          </button>
          <button type="submit" id="submitBtn" class="btn btn-primary">
            <i class="fas fa-check"></i> Submit Review
          </button>
        </div>
      </form>
    </div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Quality review submitted successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Saving review...</div>
  </div>
  
  <script>
    // Global variables
    let teamMembers = [];
    let possiblePoints = 22;
    let isCalculating = false;
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set up event listeners
      setupEventListeners();
      
      // Load team members
      loadTeamMembers();
      
      // Set default dates
      setDefaultDates();
      
      // Set reviewer info
      setReviewerInfo();
    });
    
    // Setup event listeners
    function setupEventListeners() {
      // Calculate score on radio button change
      document.querySelectorAll('input[type="radio"]').forEach(function(radio) {
        radio.addEventListener('change', calculateScore);
      });
      
      // Add follow-up action button
      document.getElementById('addActionBtn').addEventListener('click', function() {
        addFollowUpAction();
      });
      
      // Remove follow-up action button
      document.addEventListener('click', function(e) {
        if (e.target.closest('.remove-action-btn')) {
          e.target.closest('.follow-up-action').remove();
        }
      });
      
      // Save as draft button
      document.getElementById('saveAsDraftBtn').addEventListener('click', function(e) {
        e.preventDefault();
        saveAsDraft();
      });
      
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', function() {
        if (confirm('Are you sure you want to cancel? Any unsaved changes will be lost.')) {
          google.script.host.close();
        }
      });
      
      // Form submit
      document.getElementById('qaForm').addEventListener('submit', function(e) {
        e.preventDefault();
        submitReview();
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', hideToast);
    }
    
    // Load team members
    function loadTeamMembers() {
      showLoading('Loading team members...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            teamMembers = result.teamMembers;
            populateTeamMembersDropdown();
          } else {
            showToast('Error', result.message || 'Failed to load team members', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading team members:', error);
          showToast('Error', 'Failed to load team members', 'error');
        })
        .getTeamMembers();
    }
    
    // Populate team members dropdown
    function populateTeamMembersDropdown() {
      const dropdown = document.getElementById('counselorName');
      
      // Clear existing options (except the first one)
      while (dropdown.options.length > 1) {
        dropdown.remove(1);
      }
      
      // Add team members
      teamMembers.forEach(function(member) {
        const option = document.createElement('option');
        option.value = member.id;
        option.textContent = member.name;
        dropdown.appendChild(option);
      });
    }
    
    // Set default dates
    function setDefaultDates() {
      const today = new Date();
      
      // Set interaction date default to today
      document.getElementById('interactionDate').value = formatDateForInput(today);
      
      // Set review date to today
      document.getElementById('reviewDate').value = formatDateForInput(today);
    }
    
    // Set reviewer info
    function setReviewerInfo() {
      google.script.run
        .withSuccessHandler(function(userEmail) {
          document.getElementById('reviewerName').value = userEmail;
        })
        .getCurrentUserEmail();
    }
    
    // Calculate score based on selected ratings
    function calculateScore() {
      if (isCalculating) return;
      isCalculating = true;
      
      // Get all radio groups
      const sections = [
        {
          name: 'Call Opening',
          selectors: ['input[name="answerTime"]:checked', 'input[name="openingMessage"]:checked'],
          outputId: 'callOpeningPoints'
        },
        {
          name: 'Risk Assessment',
          selectors: ['input[name="screenerQuestions"]:checked', 'input[name="empathyRapport"]:checked'],
          outputId: 'riskAssessmentPoints'
        },
        {
          name: 'Communication Skills',
          selectors: [
            'input[name="activeListening"]:checked',
            'input[name="inclusiveLanguage"]:checked',
            'input[name="emotionalResponse"]:checked'
          ],
          outputId: 'communicationPoints'
        },
        {
          name: 'Support Effectiveness',
          selectors: ['input[name="resources"]:checked', 'input[name="copingStrategies"]:checked'],
          outputId: 'supportPoints'
        },
        {
          name: 'Call Closure',
          selectors: ['input[name="summarized"]:checked', 'input[name="closureProcess"]:checked'],
          outputId: 'closurePoints'
        }
      ];
      
      let totalPoints = 0;
      let totalPossiblePoints = 0;
      
      // Calculate points for each section
      sections.forEach(function(section) {
        let sectionPoints = 0;
        let sectionPossiblePoints = 0;
        
        section.selectors.forEach(function(selector) {
          const selectedOption = document.querySelector(selector);
          
          if (selectedOption) {
            const value = selectedOption.value;
            
            if (value !== 'na') {
              sectionPoints += parseInt(value);
              sectionPossiblePoints += 2; // Each question is worth 2 points max
            }
          } else {
            sectionPossiblePoints += 2; // Still count possible points for unselected options
          }
        });
        
        // Update section points display
        document.getElementById(section.outputId).textContent = 
          sectionPoints + (sectionPossiblePoints < section.selectors.length * 2 ? '*' : '');
        
        totalPoints += sectionPoints;
        totalPossiblePoints += sectionPossiblePoints;
      });
      
      // Update total points display
      document.getElementById('totalPoints').textContent = totalPoints;
      document.getElementById('possiblePoints').textContent = totalPossiblePoints;
      
      // Calculate percentage
      const percentage = totalPossiblePoints > 0 ? ((totalPoints / totalPossiblePoints) * 100).toFixed(1) : 0;
      document.getElementById('percentageScore').textContent = percentage + '%';
      
      // Update progress bar
      const progressBar = document.getElementById('scoreProgressBar');
      progressBar.style.width = percentage + '%';
      
      // Determine quality status
      let qualityStatus, badgeClass;
      
      if (percentage >= 90) {
        qualityStatus = 'Excellent';
        badgeClass = 'excellent';
        document.getElementById('quality-excellent').checked = true;
      } else if (percentage >= 75) {
        qualityStatus = 'Good';
        badgeClass = 'good';
        document.getElementById('quality-good').checked = true;
      } else {
        qualityStatus = 'Needs Improvement';
        badgeClass = 'needs-improvement';
        document.getElementById('quality-needs-improvement').checked = true;
      }
      
      // Update quality badge
      const qualityBadge = document.getElementById('qualityBadge');
      qualityBadge.textContent = qualityStatus;
      qualityBadge.className = 'score-badge ' + badgeClass;
      
      // Update progress bar class
      progressBar.className = 'progress-bar ' + badgeClass;
      
      // Save possible points for form submission
      possiblePoints = totalPossiblePoints;
      
      isCalculating = false;
    }
    
    // Add a new follow-up action input
    function addFollowUpAction() {
      const followUpActions = document.getElementById('followUpActions');
      const actionDiv = document.createElement('div');
      actionDiv.className = 'follow-up-action';
      
      actionDiv.innerHTML = `
        <input type="text" name="followUpAction[]" placeholder="Enter follow-up action">
        <button type="button" class="remove-action-btn"><i class="fas fa-times"></i></button>
      `;
      
      followUpActions.appendChild(actionDiv);
    }
    
    // Save review as draft
    function saveAsDraft() {
      showLoading('Saving draft...');
      
      // Get form data
      const formData = getFormData(true);
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Review draft saved successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to save draft', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error saving draft:', error);
          showToast('Error', 'Failed to save draft', 'error');
        })
        .saveQAReviewDraft(formData);
    }
    
    // Submit review
    function submitReview() {
      // Validate form
      if (!validateForm()) {
        return;
      }
      
      showLoading('Submitting review...');
      
      // Get form data
      const formData = getFormData();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Quality review submitted successfully', 'success');
            
            // Close the form after a delay
            setTimeout(function() {
              google.script.host.close();
            }, 2000);
          } else {
            showToast('Error', result.message || 'Failed to submit review', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error submitting review:', error);
          showToast('Error', 'Failed to submit review', 'error');
        })
        .submitQAReview(formData);
    }
    
    // Get form data
    function getFormData(isDraft = false) {
      // Calculate score one more time to ensure it's up to date
      calculateScore();
      
      // Get selected counselor name
      const counselorSelect = document.getElementById('counselorName');
      const counselorName = counselorSelect.options[counselorSelect.selectedIndex]?.text || '';
      
      // Get follow-up actions
      const followUpActions = [];
      document.querySelectorAll('input[name="followUpAction[]"]').forEach(function(input) {
        if (input.value.trim()) {
          followUpActions.push(input.value.trim());
        }
      });
      
      // Get quality status
      const qualityStatus = document.querySelector('input[name="qualityStatus"]:checked')?.value || '';
      
      // Create form data object
      const formData = {
        isDraft: isDraft,
        counselorId: document.getElementById('counselorName').value,
        counselorName: counselorName,
        interactionDate: document.getElementById('interactionDate').value,
        interactionId: document.getElementById('interactionId').value,
        channelType: document.getElementById('channelType').value,
        
        // Call Opening
        answerTime: document.querySelector('input[name="answerTime"]:checked')?.value || '',
        answerTimeNotes: document.getElementById('answerTimeNotes').value,
        openingMessage: document.querySelector('input[name="openingMessage"]:checked')?.value || '',
        openingMessageNotes: document.getElementById('openingMessageNotes').value,
        
        // Risk Assessment
        screenerQuestions: document.querySelector('input[name="screenerQuestions"]:checked')?.value || '',
        screenerQuestionsNotes: document.getElementById('screenerQuestionsNotes').value,
        empathyRapport: document.querySelector('input[name="empathyRapport"]:checked')?.value || '',
        empathyRapportNotes: document.getElementById('empathyRapportNotes').value,
        
        // Communication Skills
        activeListening: document.querySelector('input[name="activeListening"]:checked')?.value || '',
        activeListeningNotes: document.getElementById('activeListeningNotes').value,
        inclusiveLanguage: document.querySelector('input[name="inclusiveLanguage"]:checked')?.value || '',
        inclusiveLanguageNotes: document.getElementById('inclusiveLanguageNotes').value,
        emotionalResponse: document.querySelector('input[name="emotionalResponse"]:checked')?.value || '',
        emotionalResponseNotes: document.getElementById('emotionalResponseNotes').value,
        
        // Support Effectiveness
        resources: document.querySelector('input[name="resources"]:checked')?.value || '',
        resourcesNotes: document.getElementById('resourcesNotes').value,
        copingStrategies: document.querySelector('input[name="copingStrategies"]:checked')?.value || '',
        copingStrategiesNotes: document.getElementById('copingStrategiesNotes').value,
        
        // Call Closure
        summarized: document.querySelector('input[name="summarized"]:checked')?.value || '',
        summarizedNotes: document.getElementById('summarizedNotes').value,
        closureProcess: document.querySelector('input[name="closureProcess"]:checked')?.value || '',
        closureProcessNotes: document.getElementById('closureProcessNotes').value,
        
        // Overall Feedback
        overallFeedback: document.getElementById('overallFeedback').value,
        
        // Score Calculation
        totalPoints: parseInt(document.getElementById('totalPoints').textContent) || 0,
        possiblePoints: possiblePoints,
        percentageScore: parseFloat(document.getElementById('percentageScore').textContent) || 0,
        qualityStatus: qualityStatus,
        
        // Follow-Up Actions
        followUpActions: followUpActions,
        
        // Review Info
        reviewerName: document.getElementById('reviewerName').value,
        reviewDate: document.getElementById('reviewDate').value,
        
        // Email Option
        sendEmail: document.getElementById('sendEmail').checked
      };
      
      return formData;
    }
    
    // Validate form before submission
    function validateForm() {
      // Required fields
      const requiredFields = [
        { id: 'counselorName', name: 'Counselor Name' },
                { id: 'interactionDate', name: 'Interaction Date' },
        { id: 'interactionId', name: 'Interaction ID' }
      ];
      
      // Check required fields
      for (const field of requiredFields) {
        const element = document.getElementById(field.id);
        
        if (!element.value.trim()) {
          showToast('Error', `${field.name} is required`, 'error');
          element.focus();
          return false;
        }
      }
      
      // Check if at least one rating is selected per section
      const sections = [
        { name: 'Call Opening', selectors: ['answerTime', 'openingMessage'] },
        { name: 'Risk Assessment', selectors: ['screenerQuestions', 'empathyRapport'] },
        { name: 'Communication Skills', selectors: ['activeListening', 'inclusiveLanguage', 'emotionalResponse'] },
        { name: 'Support Effectiveness', selectors: ['resources', 'copingStrategies'] },
        { name: 'Call Closure', selectors: ['summarized', 'closureProcess'] }
      ];
      
      // Only check for ratings if not a draft
      if (!document.getElementById('saveAsDraftBtn').clicked) {
        for (const section of sections) {
          let hasRating = false;
          
          for (const selector of section.selectors) {
            if (document.querySelector(`input[name="${selector}"]:checked`)) {
              hasRating = true;
              break;
            }
          }
          
          if (!hasRating) {
            showToast('Error', `Please rate at least one criterion in ${section.name}`, 'error');
            return false;
          }
        }
      }
      
      // Check if overall feedback is provided
      if (!document.getElementById('overallFeedback').value.trim()) {
        showToast('Error', 'Overall feedback is required', 'error');
        document.getElementById('overallFeedback').focus();
        return false;
      }
      
      return true;
    }
    
    // Format date for input fields (YYYY-MM-DD)
    function formatDateForInput(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
    
    // Show loading overlay
    function showLoading(message = 'Loading...') {
      const overlay = document.getElementById('loadingOverlay');
      document.querySelector('.loading-text').textContent = message;
      overlay.classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'success') {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      } else if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Hide toast after 5 seconds
      setTimeout(hideToast, 5000);
    }
    
    // Hide toast notification
    function hideToast() {
      document.getElementById('toast').classList.remove('visible');
    }
  </script>
</body>
</html>







<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>QA Reports</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }
    
    .filters-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .filters-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .filters-title {
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--text-primary);
    }
    
    .filters-title i {
      color: var(--primary-color);
    }
    
    .filters-actions {
      display: flex;
      gap: 12px;
    }
    
    .filters-content {
      padding: 24px;
    }
    
    .filters-row {
      display: flex;
      gap: 16px;
      margin-bottom: 16px;
    }
    
    .filters-col {
      flex: 1;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-sm {
      padding: 6px 12px;
      font-size: 13px;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(239, 68, 68, 0.3);
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(239, 68, 68, 0.4);
    }
    
    .reports-list {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 24px;
      margin-top: 32px;
    }
    
    .report-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      overflow: hidden;
      transition: transform var(--transition-normal), box-shadow var(--transition-normal);
      border-top: 3px solid transparent;
    }
    
    .report-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }
    
    .report-card.excellent {
      border-top-color: var(--success-color);
    }
    
    .report-card.good {
      border-top-color: var(--info-color);
    }
    
    .report-card.needs-improvement {
      border-top-color: var(--warning-color);
    }
    
    .report-card.critical {
      border-top-color: var(--danger-color);
    }
    
    .report-card-body {
      padding: 24px;
    }
    
    .report-card-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 16px;
    }
    
    .report-card-title {
      font-size: 16px;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .report-card-score {
      padding: 6px 12px;
      border-radius: 16px;
      font-weight: 600;
      font-size: 13px;
      color: white;
    }
    
    .report-card-score.excellent {
      background-color: var(--success-color);
    }
    
    .report-card-score.good {
      background-color: var(--info-color);
    }
    
    .report-card-score.needs-improvement {
      background-color: var(--warning-color);
    }
    
    .report-card-score.critical {
      background-color: var(--danger-color);
    }
    
    .report-card-details {
      margin-bottom: 16px;
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    .report-card-detail {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 8px;
    }
    
    .report-card-detail i {
      width: 16px;
      color: var(--primary-color);
    }
    
    .report-card-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 20px;
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    .report-card-reviewer {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .report-card-reviewer-avatar {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background-color: var(--primary-light);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 500;
      font-size: 11px;
    }
    
    .report-card-actions {
      display: flex;
      gap: 8px;
      margin-top: 16px;
    }
    
    .empty-state {
      text-align: center;
      padding: 64px 0;
      color: var(--text-tertiary);
    }
    
    .empty-state-icon {
      font-size: 48px;
      margin-bottom: 16px;
      color: var(--primary-light);
    }
    
    .empty-state-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 8px;
      color: var(--text-primary);
    }
    
    .empty-state-text {
      margin-bottom: 24px;
    }
    
    /* Pagination */
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 8px;
      margin-top: 32px;
    }
    
    .pagination-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .pagination-btn:hover {
      background-color: var(--bg-secondary);
    }
    
    .pagination-btn.active {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-dark);
    }
    
    .pagination-btn.disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    /* Modal */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(15, 23, 42, 0.7);
      z-index: 999;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      visibility: hidden;
      transition: opacity var(--transition-normal);
    }
    
    .modal-overlay.visible {
      opacity: 1;
      visibility: visible;
    }
    
    .modal {
      background-color: white;
      border-radius: var(--radius-lg);
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      overflow-y: auto;
      transform: translateY(20px);
      opacity: 0;
      transition: transform var(--transition-normal), opacity var(--transition-normal);
    }
    
    .modal-overlay.visible .modal {
      transform: translateY(0);
      opacity: 1;
    }
    
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
    }
    
    .modal-title {
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .modal-close {
      background: none;
      border: none;
      color: var(--text-tertiary);
      cursor: pointer;
      font-size: 16px;
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all var(--transition-fast);
    }
    
    .modal-close:hover {
      background-color: var(--bg-secondary);
      color: var(--text-primary);
    }
    
    .modal-content {
      padding: 24px;
    }
    
    .review-section {
      margin-bottom: 24px;
      padding-bottom: 24px;
      border-bottom: 1px solid var(--border-light);
    }
    
    .review-section-title {
      font-weight: 600;
      margin-bottom: 12px;
      color: var(--primary-color);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .review-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 16px;
    }
    
    .review-criterion {
      margin-bottom: 16px;
    }
    
    .review-criterion-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
    }
    
    .review-criterion-title {
      font-weight: 500;
    }
    
    .review-criterion-score {
      font-weight: 600;
    }
    
    .review-criterion-score.excellent {
      color: var(--success-color);
    }
    
    .review-criterion-score.good {
      color: var(--info-color);
    }
    
    .review-criterion-score.needs-improvement {
      color: var(--warning-color);
    }
    
    .review-criterion-score.not-met {
      color: var(--danger-color);
    }
    
    .review-criterion-notes {
      background-color: var(--bg-secondary);
      padding: 12px;
      border-radius: var(--radius-sm);
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .review-summary {
      background-color: var(--bg-secondary);
      padding: 16px;
      border-radius: var(--radius-md);
      margin-bottom: 24px;
    }
    
    .review-summary-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 12px;
    }
    
    .review-summary-title {
      font-weight: 600;
    }
    
    .review-summary-score {
      padding: 6px 12px;
      border-radius: 16px;
      font-weight: 600;
      font-size: 13px;
      color: white;
    }
    
    .review-summary-score.excellent {
      background-color: var(--success-color);
    }
    
    .review-summary-score.good {
      background-color: var(--info-color);
    }
    
    .review-summary-score.needs-improvement {
      background-color: var(--warning-color);
    }
    
    .review-summary-score.critical {
      background-color: var(--danger-color);
    }
    
    .review-summary-text {
      margin-top: 16px;
      line-height: 1.6;
    }
    
    .review-follow-up {
      margin-top: 16px;
    }
    
    .review-follow-up-title {
      font-weight: 600;
      margin-bottom: 12px;
    }
    
    .review-follow-up-list {
      list-style-type: none;
    }
    
    .review-follow-up-item {
      padding: 8px 0;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .review-follow-up-item:last-child {
      border-bottom: none;
    }
    
    .review-follow-up-item i {
      color: var(--primary-color);
    }
    
    .modal-footer {
      padding: 16px 24px;
      border-top: 1px solid var(--border-light);
      display: flex;
      justify-content: flex-end;
      gap: 12px;
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(85, 64, 175, 0.3);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 16px;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
      .header {
        padding: 20px;
      }
      
      .content {
        padding: 16px;
      }
      
      .filters-row {
        flex-direction: column;
        gap: 8px;
      }
      
      .modal {
        width: 95%;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-clipboard-list"></i> QA Reports
          </h1>
          <div class="header-subtitle">
            View and manage quality review reports
          </div>
        </div>
        <div class="header-actions">
          <button class="btn btn-secondary" id="dashboardBtn">
            <i class="fas fa-chart-bar"></i> QA Dashboard
          </button>
          <button class="btn btn-primary" id="createReviewBtn">
            <i class="fas fa-plus"></i> New Review
          </button>
        </div>
      </div>
    </header>
    
    <div class="content">
      <!-- Filters -->
      <div class="filters-card">
        <div class="filters-header">
          <div class="filters-title">
            <i class="fas fa-filter"></i> Filters
          </div>
          <div class="filters-actions">
            <button class="btn btn-secondary btn-sm" id="resetFiltersBtn">
              <i class="fas fa-sync-alt"></i> Reset
            </button>
          </div>
        </div>
        
        <div class="filters-content">
          <div class="filters-row">
            <div class="filters-col">
              <label class="form-label" for="counselorFilter">Counselor</label>
              <select class="form-control" id="counselorFilter">
                <option value="">All Counselors</option>
                <!-- Will be populated with team members -->
              </select>
            </div>
            <div class="filters-col">
              <label class="form-label" for="dateRangeFilter">Date Range</label>
              <select class="form-control" id="dateRangeFilter">
                <option value="30">Last 30 Days</option>
                <option value="90">Last 90 Days</option>
                <option value="180">Last 180 Days</option>
                <option value="365">Last 365 Days</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
            <div class="filters-col" id="customDateRangeContainer" style="display: none;">
              <label class="form-label" for="startDateFilter">From</label>
              <input type="date" class="form-control" id="startDateFilter">
            </div>
            <div class="filters-col" id="customDateRangeEndContainer" style="display: none;">
              <label class="form-label" for="endDateFilter">To</label>
              <input type="date" class="form-control" id="endDateFilter">
            </div>
          </div>
          
          <div class="filters-row">
            <div class="filters-col">
              <label class="form-label" for="qualityStatusFilter">Quality Status</label>
              <select class="form-control" id="qualityStatusFilter">
                <option value="">All Statuses</option>
                <option value="excellent">Excellent</option>
                <option value="good">Good</option>
                <option value="needs-improvement">Needs Improvement</option>
              </select>
            </div>
            <div class="filters-col">
              <label class="form-label" for="channelTypeFilter">Channel Type</label>
              <select class="form-control" id="channelTypeFilter">
                <option value="">All Channels</option>
                <option value="chat">Chat</option>
                <option value="phone">Phone</option>
                <option value="email">Email</option>
                <option value="video">Video</option>
              </select>
            </div>
            <div class="filters-col">
              <label class="form-label" for="reviewerFilter">Reviewer</label>
              <select class="form-control" id="reviewerFilter">
                <option value="">All Reviewers</option>
                <!-- Will be populated with reviewers -->
              </select>
            </div>
          </div>
          
          <div style="display: flex; justify-content: flex-end; margin-top: 16px;">
            <button class="btn btn-primary" id="applyFiltersBtn">
              <i class="fas fa-search"></i> Apply Filters
            </button>
          </div>
        </div>
      </div>
      
      <!-- Reports List -->
      <div id="reportsList" class="reports-list">
        <!-- Will be populated with reports -->
      </div>
      
      <!-- Empty State -->
      <div id="emptyState" class="empty-state" style="display: none;">
        <div class="empty-state-icon">
          <i class="fas fa-clipboard-check"></i>
        </div>
        <div class="empty-state-title">No QA reports found</div>
        <div class="empty-state-text">There are no quality reviews that match your current filters.</div>
        <button class="btn btn-primary" id="createEmptyStateReviewBtn">
          <i class="fas fa-plus"></i> Create New Review
        </button>
      </div>
      
      <!-- Pagination -->
      <div class="pagination" id="pagination">
        <!-- Will be populated with pagination buttons -->
      </div>
    </div>
  </div>
  
  <!-- Review Detail Modal -->
  <div class="modal-overlay" id="reviewModal">
    <div class="modal">
      <div class="modal-header">
        <div class="modal-title" id="modalTitle">
          <i class="fas fa-clipboard-check"></i> Quality Review Details
        </div>
        <button class="modal-close" id="modalClose">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="modal-content" id="modalContent">
        <!-- Will be populated with review details -->
      </div>
      
      <div class="modal-footer">
        <button class="btn btn-secondary" id="modalCloseBtn">
          Close
        </button>
        <button class="btn btn-primary" id="printReviewBtn">
          <i class="fas fa-print"></i> Print
        </button>
        <button class="btn btn-secondary" id="emailReviewBtn">
          <i class="fas fa-envelope"></i> Email
        </button>
      </div>
    </div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Operation completed successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading reports...</div>
  </div>
  
  <script>
    // Global variables
    let reports = [];
    let teamMembers = [];
    let reviewers = [];
    let currentPage = 1;
    let itemsPerPage = 9;
    let totalPages = 1;
    let filters = {
      counselor: '',
      dateRange: '30',
      startDate: '',
      endDate: '',
      qualityStatus: '',
      channelType: '',
      reviewer: ''
    };
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set up event listeners
      setupEventListeners();
      
      // Load data
      loadData();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Date range filter change
      document.getElementById('dateRangeFilter').addEventListener('change', function() {
        const customRangeContainers = [
          document.getElementById('customDateRangeContainer'),
          document.getElementById('customDateRangeEndContainer')
        ];
        
        if (this.value === 'custom') {
          customRangeContainers.forEach(container => container.style.display = 'block');
        } else {
          customRangeContainers.forEach(container => container.style.display = 'none');
        }
      });
      
      // Apply filters button
      document.getElementById('applyFiltersBtn').addEventListener('click', function() {
        currentPage = 1;
        updateFilters();
        fetchReports();
      });
      
      // Reset filters button
      document.getElementById('resetFiltersBtn').addEventListener('click', function() {
        resetFilters();
      });
      
      // Create review button
      document.getElementById('createReviewBtn').addEventListener('click', function() {
        createNewReview();
      });
      
      // Create review from empty state button
      document.getElementById('createEmptyStateReviewBtn').addEventListener('click', function() {
        createNewReview();
      });
      
      // Dashboard button
      document.getElementById('dashboardBtn').addEventListener('click', function() {
        openQADashboard();
      });
      
      // Modal close buttons
      document.getElementById('modalClose').addEventListener('click', function() {
        closeModal();
      });
      
      document.getElementById('modalCloseBtn').addEventListener('click', function() {
        closeModal();
      });
      
      // Print review button
      document.getElementById('printReviewBtn').addEventListener('click', function() {
        printReview();
      });
      
      // Email review button
      document.getElementById('emailReviewBtn').addEventListener('click', function() {
        emailReview();
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', function() {
        hideToast();
      });
    }
    
    // Load all necessary data
    function loadData() {
      showLoading('Loading data...');
      
      // Load team members
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            teamMembers = result.teamMembers;
            populateCounselorFilter();
          }
          
          // Load QA reports
          fetchReports();
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading team members:', error);
          showToast('Error', 'Failed to load team members', 'error');
        })
        .getTeamMembers();
    }
    
    // Populate counselor filter dropdown
    function populateCounselorFilter() {
      const dropdown = document.getElementById('counselorFilter');
      
      // Clear existing options (except the first one)
      while (dropdown.options.length > 1) {
        dropdown.remove(1);
      }
      
      // Add team members
      teamMembers.forEach(function(member) {
        const option = document.createElement('option');
        option.value = member.id;
        option.textContent = member.name;
        dropdown.appendChild(option);
      });
    }
    
    // Populate reviewer filter dropdown
    function populateReviewerFilter(reviewers) {
      const dropdown = document.getElementById('reviewerFilter');
      
      // Clear existing options (except the first one)
      while (dropdown.options.length > 1) {
        dropdown.remove(1);
      }
      
      // Add unique reviewers
      reviewers.forEach(function(reviewer) {
        const option = document.createElement('option');
        option.value = reviewer;
        option.textContent = reviewer;
        dropdown.appendChild(option);
      });
    }
    
    // Fetch QA reports based on filters
    function fetchReports() {
      showLoading('Loading reports...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            reports = result.reports;
            reviewers = result.reviewers || [];
            
            // Update the reviewers filter
            populateReviewerFilter(reviewers);
            
            // Display reports
            displayReports(reports);
          } else {
            showToast('Error', result.message || 'Failed to load reports', 'error');
            displayEmptyState();
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading reports:', error);
          showToast('Error', 'Failed to load reports', 'error');
          displayEmptyState();
        })
        .getQAReports(filters);
    }
    
    // Display reports in the list
    function displayReports(allReports) {
      const reportsList = document.getElementById('reportsList');
      const emptyState = document.getElementById('emptyState');
      
      // Calculate pagination
      totalPages = Math.ceil(allReports.length / itemsPerPage);
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, allReports.length);
      const currentReports = allReports.slice(startIndex, endIndex);
      
      if (currentReports.length === 0) {
        // Show empty state
        reportsList.style.display = 'none';
        emptyState.style.display = 'block';
        document.getElementById('pagination').innerHTML = '';
        return;
      }
      
      // Hide empty state, show reports list
      reportsList.style.display = 'grid';
      emptyState.style.display = 'none';
      
      // Clear current reports
      reportsList.innerHTML = '';
      
      // Add each report card
      currentReports.forEach(function(report) {
        const reportCard = createReportCard(report);
        reportsList.appendChild(reportCard);
      });
      
      // Update pagination
      updatePagination();
    }
    
    // Create a report card element
    function createReportCard(report) {
      // Get counselor name
      const counselor = teamMembers.find(member => member.id === report.counselorId);
      const counselorName = counselor ? counselor.name : report.counselorName;
      
      // Format date
      const interactionDate = new Date(report.interactionDate);
      const formattedDate = interactionDate.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
      
      // Create report card element
      const reportCard = document.createElement('div');
      reportCard.className = `report-card ${report.qualityStatus}`;
      reportCard.dataset.reportId = report.id;
      
      reportCard.innerHTML = `
        <div class="report-card-body">
          <div class="report-card-header">
            <div class="report-card-title">${counselorName}</div>
            <div class="report-card-score ${report.qualityStatus}">
              ${report.percentageScore.toFixed(1)}%
            </div>
          </div>
          
          <div class="report-card-details">
            <div class="report-card-detail">
              <i class="fas fa-calendar-alt"></i>
              <span>Interaction: ${formattedDate}</span>
            </div>
            <div class="report-card-detail">
              <i class="${getChannelIcon(report.channelType)}"></i>
              <span>Channel: ${capitalizeFirstLetter(report.channelType || 'Unknown')}</span>
            </div>
            <div class="report-card-detail">
              <i class="fas fa-hashtag"></i>
              <span>ID: ${report.interactionId}</span>
            </div>
          </div>
          
          <div class="report-card-actions">
            <button class="btn btn-secondary btn-sm view-report-btn" data-report-id="${report.id}">
              <i class="fas fa-eye"></i> View
            </button>
            <button class="btn btn-secondary btn-sm email-report-btn" data-report-id="${report.id}">
              <i class="fas fa-envelope"></i> Email
            </button>
          </div>
          
          <div class="report-card-footer">
            <div class="report-card-reviewer">
              <div class="report-card-reviewer-avatar">
                ${getInitials(report.reviewerName)}
              </div>
              <span>Reviewed by: ${formatReviewerName(report.reviewerName)}</span>
            </div>
          </div>
        </div>
      `;
      
      // Add event listener to view button
      reportCard.querySelector('.view-report-btn').addEventListener('click', function() {
        viewReport(report.id);
      });
      
      // Add event listener to email button
      reportCard.querySelector('.email-report-btn').addEventListener('click', function() {
        emailReport(report.id);
      });
      
      return reportCard;
    }
    
    // Display empty state
    function displayEmptyState() {
      document.getElementById('reportsList').style.display = 'none';
      document.getElementById('emptyState').style.display = 'block';
      document.getElementById('pagination').innerHTML = '';
    }
    
    // Update pagination
    function updatePagination() {
      const paginationElement = document.getElementById('pagination');
      paginationElement.innerHTML = '';
      
      if (totalPages <= 1) {
        return;
      }
      
      // Previous button
      const prevButton = document.createElement('button');
      prevButton.className = `pagination-btn ${currentPage === 1 ? 'disabled' : ''}`;
      prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
      
      if (currentPage > 1) {
        prevButton.addEventListener('click', function() {
          goToPage(currentPage - 1);
        });
      }
      
      paginationElement.appendChild(prevButton);
      
      // Page buttons
      const maxVisiblePages = 5;
      let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
      let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
      
      if (endPage - startPage + 1 < maxVisiblePages) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
      }
      
      for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.className = `pagination-btn ${i === currentPage ? 'active' : ''}`;
        pageButton.textContent = i;
        
        pageButton.addEventListener('click', function() {
          goToPage(i);
        });
        
        paginationElement.appendChild(pageButton);
      }
      
      // Next button
      const nextButton = document.createElement('button');
      nextButton.className = `pagination-btn ${currentPage === totalPages ? 'disabled' : ''}`;
      nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
      
      if (currentPage < totalPages) {
        nextButton.addEventListener('click', function() {
          goToPage(currentPage + 1);
        });
      }
      
      paginationElement.appendChild(nextButton);
    }
    
    // Go to specific page
    function goToPage(page) {
      if (page < 1 || page > totalPages) {
        return;
      }
      
      currentPage = page;
      displayReports(reports);
      
      // Scroll to top of reports list
      document.getElementById('reportsList').scrollIntoView({ behavior: 'smooth' });
    }
    
    // Update filters from form
    function updateFilters() {
      filters = {
        counselor: document.getElementById('counselorFilter').value,
        dateRange: document.getElementById('dateRangeFilter').value,
        startDate: document.getElementById('startDateFilter').value,
        endDate: document.getElementById('endDateFilter').value,
        qualityStatus: document.getElementById('qualityStatusFilter').value,
        channelType: document.getElementById('channelTypeFilter').value,
        reviewer: document.getElementById('reviewerFilter').value
      };
    }
    
    // Reset filters
    function resetFilters() {
      document.getElementById('counselorFilter').value = '';
      document.getElementById('dateRangeFilter').value = '30';
      document.getElementById('startDateFilter').value = '';
      document.getElementById('endDateFilter').value = '';
      document.getElementById('qualityStatusFilter').value = '';
      document.getElementById('channelTypeFilter').value = '';
      document.getElementById('reviewerFilter').value = '';
      
      // Hide custom date range containers
      document.getElementById('customDateRangeContainer').style.display = 'none';
      document.getElementById('customDateRangeEndContainer').style.display = 'none';
      
      // Reset filters object
      filters = {
        counselor: '',
        dateRange: '30',
        startDate: '',
        endDate: '',
        qualityStatus: '',
        channelType: '',
        reviewer: ''
      };
      
      // Fetch reports with reset filters
      currentPage = 1;
      fetchReports();
    }
    
    // View report details
    function viewReport(reportId) {
      showLoading('Loading report details...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            displayReportDetails(result.report);
            openModal();
          } else {
            showToast('Error', result.message || 'Failed to load report details', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading report details:', error);
          showToast('Error', 'Failed to load report details', 'error');
        })
        .getQAReportDetails(reportId);
    }
    
    // Display report details in modal
    function displayReportDetails(report) {
      const modalTitle = document.getElementById('modalTitle');
      const modalContent = document.getElementById('modalContent');
      
      // Get counselor name
      const counselor = teamMembers.find(member => member.id === report.counselorId);
      const counselorName = counselor ? counselor.name : report.counselorName;
      
      // Format date
      const interactionDate = new Date(report.interactionDate);
      const formattedDate = interactionDate.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
      
      // Set modal title
      modalTitle.innerHTML = `<i class="fas fa-clipboard-check"></i> QA Review: ${counselorName}`;
      
      // Build modal content
      let contentHtml = `
        <div class="review-section">
          <div class="review-section-title">
            <i class="fas fa-info-circle"></i> Interaction Details
          </div>
          <div class="review-grid">
            <div>
              <strong>Counselor:</strong> ${counselorName}
            </div>
            <div>
              <strong>Interaction Date:</strong> ${formattedDate}
            </div>
            <div>
              <strong>Interaction ID:</strong> ${report.interactionId}
            </div>
            <div>
              <strong>Channel Type:</strong> ${capitalizeFirstLetter(report.channelType || 'Unknown')}
            </div>
          </div>
        </div>
        
        <!-- Call Opening Section -->
        <div class="review-section">
          <div class="review-section-title">
            <i class="fas fa-phone-alt"></i> Call Opening
          </div>
          <div class="review-grid">
            <div class="review-criterion">
              <div class="review-criterion-header">
                <div class="review-criterion-title">Answered interaction in less than 20 seconds of joining</div>
                <div class="review-criterion-score ${getRatingClass(report.answerTime)}">
                  ${getRatingText(report.answerTime)}
                </div>
              </div>
              ${report.answerTimeNotes ? `<div class="review-criterion-notes">${report.answerTimeNotes}</div>` : ''}
            </div>
            <div class="review-criterion">
              <div class="review-criterion-header">
                <div class="review-criterion-title">Opening message completed with tact</div>
                <div class="review-criterion-score ${getRatingClass(report.openingMessage)}">
                  ${getRatingText(report.openingMessage)}
                </div>
              </div>
              ${report.openingMessageNotes ? `<div class="review-criterion-notes">${report.openingMessageNotes}</div>` : ''}
            </div>
          </div>
        </div>
        
        <!-- Risk Assessment Section -->
        <div class="review-section">
          <div class="review-section-title">
            <i class="fas fa-exclamation-triangle"></i> Risk Assessment
          </div>
          <div class="review-grid">
            <div class="review-criterion">
              <div class="review-criterion-header">
                <div class="review-criterion-title">SASS/Screener questions attempted at least twice</div>
                <div class="review-criterion-score ${getRatingClass(report.screenerQuestions)}">
                  ${getRatingText(report.screenerQuestions)}
                </div>
              </div>
              ${report.screenerQuestionsNotes ? `<div class="review-criterion-notes">${report.screenerQuestionsNotes}</div>` : ''}
            </div>
            <div class="review-criterion">
              <div class="review-criterion-header">
                <div class="review-criterion-title">Used creative non-judgmental empathy and built rapport</div>
                <div class="review-criterion-score ${getRatingClass(report.empathyRapport)}">
                  ${getRatingText(report.empathyRapport)}
                </div>
              </div>
              ${report.empathyRapportNotes ? `<div class="review-criterion-notes">${report.empathyRapportNotes}</div>` : ''}
            </div>
          </div>
        </div>
        
        <!-- Communication Skills Section -->
        <div class="review-section">
          <div class="review-section-title">
            <i class="fas fa-comments"></i> Communication Skills
          </div>
          <div class="review-grid">
            <div class="review-criterion">
              <div class="review-criterion-header">
                <div class="review-criterion-title">Demonstrated active listening through reflective responses</div>
                <div class="review-criterion-score ${getRatingClass(report.activeListening)}">
                  ${getRatingText(report.activeListening)}
                </div>
              </div>
              ${report.activeListeningNotes ? `<div class="review-criterion-notes">${report.activeListeningNotes}</div>` : ''}
            </div>
            <div class="review-criterion">
              <div class="review-criterion-header">
                <div class="review-criterion-title">Used appropriate LGBTQ+ inclusive language</div>
                <div class="review-criterion-score ${getRatingClass(report.inclusiveLanguage)}">
                  ${getRatingText(report.inclusiveLanguage)}
                </div>
              </div>
              ${report.inclusiveLanguageNotes ? `<div class="review-criterion-notes">${report.inclusiveLanguageNotes}</div>` : ''}
            </div>
            <div class="review-criterion">
              <div class="review-criterion-header">
                <div class="review-criterion-title">Responded to emotional content with appropriate empathy</div>
                <div class="review-criterion-score ${getRatingClass(report.emotionalResponse)}">
                  ${getRatingText(report.emotionalResponse)}
                </div>
              </div>
              ${report.emotionalResponseNotes ? `<div class="review-criterion-notes">${report.emotionalResponseNotes}</div>` : ''}
            </div>
          </div>
        </div>
        
        <!-- Support Effectiveness Section -->
        <div class="review-section">
          <div class="review-section-title">
            <i class="fas fa-hands-helping"></i> Support Effectiveness
          </div>
          <div class="review-grid">
            <div class="review-criterion">
              <div class="review-criterion-header">
                <div class="review-criterion-title">Provided appropriate resources relevant to the contact's needs</div>
                <div class="review-criterion-score ${getRatingClass(report.resources)}">
                  ${getRatingText(report.resources)}
                </div>
              </div>
              ${report.resourcesNotes ? `<div class="review-criterion-notes">${report.resourcesNotes}</div>` : ''}
            </div>
            <div class="review-criterion">
              <div class="review-criterion-header">
                <div class="review-criterion-title">Helped identify coping strategies or action steps</div>
                <div class="review-criterion-score ${getRatingClass(report.copingStrategies)}">
                  ${getRatingText(report.copingStrategies)}
                </div>
              </div>
              ${report.copingStrategiesNotes ? `<div class="review-criterion-notes">${report.copingStrategiesNotes}</div>` : ''}
            </div>
          </div>
        </div>
        
        <!-- Call Closure Section -->
        <div class="review-section">
          <div class="review-section-title">
            <i class="fas fa-door-closed"></i> Call Closure
          </div>
          <div class="review-grid">
            <div class="review-criterion">
              <div class="review-criterion-header">
                <div class="review-criterion-title">Summarized key points of the interaction</div>
                <div class="review-criterion-score ${getRatingClass(report.summarized)}">
                  ${getRatingText(report.summarized)}
                </div>
              </div>
              ${report.summarizedNotes ? `<div class="review-criterion-notes">${report.summarizedNotes}</div>` : ''}
            </div>
            <div class="review-criterion">
              <div class="review-criterion-header">
                <div class="review-criterion-title">Completed closure process appropriately</div>
                <div class="review-criterion-score ${getRatingClass(report.closureProcess)}">
                  ${getRatingText(report.closureProcess)}
                </div>
              </div>
              ${report.closureProcessNotes ? `<div class="review-criterion-notes">${report.closureProcessNotes}</div>` : ''}
            </div>
          </div>
        </div>
        
        <!-- Overall Feedback -->
        <div class="review-section">
          <div class="review-section-title">
            <i class="fas fa-comment-dots"></i> Overall Feedback
          </div>
          <div class="review-summary">
            <div class="review-summary-header">
              <div class="review-summary-title">
                Score: ${report.totalPoints} out of ${report.possiblePoints} (${report.percentageScore.toFixed(1)}%)
              </div>
              <div class="review-summary-score ${report.qualityStatus}">
                ${capitalizeFirstLetter(report.qualityStatus.replace('-', ' '))}
              </div>
            </div>
            <div class="review-summary-text">
              ${report.overallFeedback || 'No overall feedback provided.'}
            </div>
          </div>
        </div>
      `;
      
      // Follow-up Actions
      if (report.followUpActions && report.followUpActions.length > 0) {
        contentHtml += `
          <div class="review-section">
            <div class="review-section-title">
              <i class="fas fa-tasks"></i> Follow-Up Actions
            </div>
            <ul class="review-follow-up-list">
        `;
        
        report.followUpActions.forEach(function(action) {
          contentHtml += `
            <li class="review-follow-up-item">
              <i class="fas fa-check-circle"></i>
              ${action}
            </li>
          `;
        });
        
        contentHtml += `
            </ul>
          </div>
        `;
      }
      
      // Review Info
      contentHtml += `
        <div class="review-section" style="border-bottom: none;">
          <div class="review-section-title">
            <i class="fas fa-info-circle"></i> Review Information
          </div>
          <div class="review-grid">
            <div>
              <strong>Reviewed By:</strong> ${report.reviewerName || 'Unknown'}
            </div>
            <div>
              <strong>Review Date:</strong> ${formatDate(report.reviewDate)}
            </div>
          </div>
        </div>
      `;
      
      // Set modal content
      modalContent.innerHTML = contentHtml;
      
      // Store report ID on modal for print/email buttons
      document.getElementById('printReviewBtn').dataset.reportId = report.id;
      document.getElementById('emailReviewBtn').dataset.reportId = report.id;
    }
    
    // Open modal
    function openModal() {
      document.getElementById('reviewModal').classList.add('visible');
      document.body.style.overflow = 'hidden'; // Prevent scrolling behind modal
    }
    
    // Close modal
    function closeModal() {
      document.getElementById('reviewModal').classList.remove('visible');
      document.body.style.overflow = ''; // Restore scrolling
    }
    
    // Print review
    function printReview() {
      const reportId = document.getElementById('printReviewBtn').dataset.reportId;
      
            if (!reportId) return;
      
      showLoading('Generating print view...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            const printWindow = window.open('', '_blank');
            printWindow.document.write(result.html);
            printWindow.document.close();
            
            // Trigger print dialog after content loads
            printWindow.onload = function() {
              printWindow.focus();
              printWindow.print();
              // Don't close window to allow manual printing if dialog is canceled
            };
          } else {
            showToast('Error', result.message || 'Failed to generate print view', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error generating print view:', error);
          showToast('Error', 'Failed to generate print view', 'error');
        })
        .generateQAPrintView(reportId);
    }
    
    // Email review
    function emailReport(reportId) {
      const reportCard = document.querySelector(`.report-card[data-report-id="${reportId}"]`);
      const counselorName = reportCard ? reportCard.querySelector('.report-card-title').textContent : 'team member';
      
      if (!reportId) return;
      
      if (confirm(`Send this QA review to ${counselorName}?`)) {
        showLoading('Sending email...');
        
        google.script.run
          .withSuccessHandler(function(result) {
            hideLoading();
            
            if (result.success) {
              showToast('Success', `QA review sent to ${counselorName}`, 'success');
            } else {
              showToast('Error', result.message || 'Failed to send email', 'error');
            }
          })
          .withFailureHandler(function(error) {
            hideLoading();
            console.error('Error sending email:', error);
            showToast('Error', 'Failed to send email', 'error');
          })
          .emailQAReview(reportId);
      }
    }
    
    // Create new review
    function createNewReview() {
      google.script.run.showQAReviewForm();
    }
    
    // Open QA dashboard
    function openQADashboard() {
      google.script.run.showQADashboard();
    }
    
    // Helper functions
    
    // Get channel icon
    function getChannelIcon(channelType) {
      switch(channelType) {
        case 'chat':
          return 'fas fa-comment-dots';
        case 'phone':
          return 'fas fa-phone-alt';
        case 'email':
          return 'fas fa-envelope';
        case 'video':
          return 'fas fa-video';
        default:
          return 'fas fa-comment';
      }
    }
    
    // Get initials from name
    function getInitials(name) {
      if (!name) return '?';
      
      const parts = name.split('@')[0].split('.');
      if (parts.length >= 2) {
        return (parts[0][0] + parts[1][0]).toUpperCase();
      }
      
      return name.substring(0, 2).toUpperCase();
    }
    
    // Format reviewer name (shorten email if needed)
    function formatReviewerName(name) {
      if (!name) return 'Unknown';
      
      if (name.includes('@')) {
        // It's an email, just show the first part
        return name.split('@')[0].replace('.', ' ');
      }
      
      return name;
    }
    
    // Get rating class
    function getRatingClass(rating) {
      if (!rating || rating === 'na') return '';
      
      const value = parseInt(rating);
      
      if (value === 2) return 'excellent';
      if (value === 1) return 'good';
      if (value === 0) return 'not-met';
      
      return '';
    }
    
    // Get rating text
    function getRatingText(rating) {
      if (!rating) return 'Not Rated';
      
      if (rating === 'na') return 'N/A';
      
      const value = parseInt(rating);
      
      if (value === 2) return 'Fully Met (2)';
      if (value === 1) return 'Partially Met (1)';
      if (value === 0) return 'Not Met (0)';
      
      return 'Not Rated';
    }
    
    // Capitalize first letter
    function capitalizeFirstLetter(string) {
      if (!string) return '';
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    // Format date
    function formatDate(dateString) {
      if (!dateString) return 'Unknown';
      
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
    }
    
    // Show loading overlay
    function showLoading(message = 'Loading...') {
      const overlay = document.getElementById('loadingOverlay');
      document.querySelector('.loading-text').textContent = message;
      overlay.classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'success') {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      } else if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Hide toast after 5 seconds
      setTimeout(hideToast, 5000);
    }
    
    // Hide toast notification
    function hideToast() {
      document.getElementById('toast').classList.remove('visible');
    }
  </script>
</body>
</html>








<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>QA Dashboard</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }
    
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 24px;
      margin-bottom: 32px;
    }
    
    .metric-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      overflow: hidden;
      padding: 20px;
      display: flex;
      flex-direction: column;
    }
    
    .metric-card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16px;
    }
    
    .metric-card-title {
      font-weight: 600;
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 14px;
    }
    
    .metric-card-title i {
      color: var(--primary-color);
    }
    
    .metric-card-value {
      font-size: 28px;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: 8px;
      font-family: 'Manrope', sans-serif;
    }
    
    .metric-card-trend {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 13px;
      font-weight: 500;
    }
    
    .metric-card-trend.positive {
      color: var(--success-color);
    }
    
    .metric-card-trend.negative {
      color: var(--danger-color);
    }
    
    .metric-card-trend.neutral {
      color: var(--text-tertiary);
    }
    
    .chart-card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      overflow: hidden;
      padding: 24px;
    }
    
    .chart-card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .chart-card-title {
      font-weight: 600;
      font-size: 16px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .chart-card-title i {
      color: var(--primary-color);
    }
    
    .chart-card-actions {
      display: flex;
      gap: 8px;
    }
    
    .chart-container {
      position: relative;
      height: 300px;
      width: 100%;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-sm {
      padding: 6px 12px;
      font-size: 13px;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .filter-dropdown {
      position: relative;
    }
    
    .dropdown-toggle {
      background-color: white;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      padding: 6px 12px;
      font-size: 13px;
      color: var(--text-secondary);
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    .dropdown-menu {
      position: absolute;
      top: 100%;
      right: 0;
      width: 200px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-md);
      padding: 8px;
      z-index: 100;
      display: none;
    }
    
    .filter-dropdown.active .dropdown-menu {
      display: block;
    }
    
    .dropdown-item {
      padding: 8px 12px;
      border-radius: var(--radius-sm);
      cursor: pointer;
      transition: all var(--transition-fast);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .dropdown-item:hover {
      background-color: var(--bg-secondary);
    }
    
    .dropdown-item.active {
      background-color: var(--primary-light);
      color: white;
    }
    
    .table-container {
      overflow-x: auto;
      margin-top: 24px;
    }
    
    .data-table {
      width: 100%;
      border-collapse: collapse;
      font-size: 13px;
    }
    
    .data-table th,
    .data-table td {
      padding: 12px 16px;
      text-align: left;
      border-bottom: 1px solid var(--border-light);
    }
    
    .data-table th {
      font-weight: 600;
      color: var(--text-tertiary);
      background-color: var(--bg-secondary);
    }
    
    .data-table tbody tr:hover {
      background-color: var(--bg-secondary);
    }
    
    .data-table td.excellent {
      color: var(--success-color);
    }
    
    .data-table td.good {
      color: var(--info-color);
    }
    
    .data-table td.needs-improvement {
      color: var(--warning-color);
    }
    
    .data-table td.critical {
      color: var(--danger-color);
    }
    
    .progress-bar {
      height: 6px;
      background-color: var(--bg-tertiary);
      border-radius: 3px;
      overflow: hidden;
    }
    
    .progress-bar-fill {
      height: 100%;
    }
    
    .progress-bar-fill.excellent {
      background-color: var(--success-color);
    }
    
    .progress-bar-fill.good {
      background-color: var(--info-color);
    }
    
    .progress-bar-fill.needs-improvement {
      background-color: var(--warning-color);
    }
    
    .progress-bar-fill.critical {
      background-color: var(--danger-color);
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(85, 64, 175, 0.3);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 16px;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    .time-period-selector {
      display: flex;
      gap: 8px;
      margin-bottom: 32px;
    }
    
    .time-period-option {
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 13px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      border: 1px solid var(--border-medium);
      color: var(--text-secondary);
    }
    
    .time-period-option:hover {
      background-color: var(--bg-secondary);
    }
    
    .time-period-option.active {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-dark);
    }
    
    .insights-section {
      margin-top: 32px;
    }
    
    .insights-title {
      font-weight: 600;
      font-size: 18px;
      margin-bottom: 16px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .insights-title i {
      color: var(--primary-color);
    }
    
    .insights-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 16px;
    }
    
    .insight-card {
      background-color: white;
      border-radius: var(--radius-md);
      padding: 16px;
      border-left: 4px solid var(--primary-color);
      box-shadow: var(--shadow-sm);
    }
    
    .insight-card.success {
      border-left-color: var(--success-color);
    }
    
    .insight-card.warning {
      border-left-color: var(--warning-color);
    }
    
    .insight-card.danger {
      border-left-color: var(--danger-color);
    }
    
    .insight-card.info {
      border-left-color: var(--info-color);
    }
    
    .insight-card-title {
      font-weight: 600;
      margin-bottom: 8px;
    }
    
    .insight-card-content {
      font-size: 13px;
      color: var(--text-secondary);
      line-height: 1.6;
    }
    
    .chart-legend {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      margin-top: 16px;
    }
    
    .chart-legend-item {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 13px;
    }
    
    .chart-legend-color {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }
    
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
      .header {
        padding: 20px;
      }
      
      .content {
        padding: 16px;
      }
      
      .dashboard-grid {
        grid-template-columns: 1fr;
      }
      
      .time-period-selector {
        overflow-x: auto;
        padding-bottom: 8px;
      }
      
      .time-period-option {
        white-space: nowrap;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-chart-bar"></i> QA Dashboard
          </h1>
          <div class="header-subtitle">
            Quality Assurance analytics and insights
          </div>
        </div>
        <div class="header-actions">
          <button class="btn btn-secondary" id="reportListBtn">
            <i class="fas fa-clipboard-list"></i> QA Reports
          </button>
          <button class="btn btn-primary" id="createReviewBtn">
            <i class="fas fa-plus"></i> New Review
          </button>
        </div>
      </div>
    </header>
    
    <div class="content">
      <!-- Time Period Selector -->
      <div class="time-period-selector">
        <div class="time-period-option active" data-period="30">Last 30 Days</div>
        <div class="time-period-option" data-period="90">Last 90 Days</div>
        <div class="time-period-option" data-period="180">Last 6 Months</div>
        <div class="time-period-option" data-period="365">Last 12 Months</div>
        <div class="time-period-option" data-period="ytd">Year to Date</div>
      </div>
      
      <!-- Key Metrics -->
      <div class="dashboard-grid">
        <!-- QA Score Metric -->
        <div class="metric-card">
          <div class="metric-card-header">
            <div class="metric-card-title">
              <i class="fas fa-star"></i> Average QA Score
            </div>
          </div>
          <div class="metric-card-value" id="avgQAScore">-</div>
          <div class="metric-card-trend" id="avgQATrend">
            <i class="fas fa-arrow-up"></i>
            <span>3.2% vs previous period</span>
          </div>
        </div>
        
        <!-- Reviews Completed -->
        <div class="metric-card">
          <div class="metric-card-header">
            <div class="metric-card-title">
              <i class="fas fa-clipboard-check"></i> Reviews Completed
            </div>
          </div>
          <div class="metric-card-value" id="reviewsCompleted">-</div>
          <div class="metric-card-trend" id="reviewsCompletedTrend">
            <i class="fas fa-arrow-down"></i>
            <span>5.7% vs previous period</span>
          </div>
        </div>
        
        <!-- Quality Status Distribution -->
        <div class="metric-card">
          <div class="metric-card-header">
            <div class="metric-card-title">
              <i class="fas fa-award"></i> Excellent Reviews
            </div>
          </div>
          <div class="metric-card-value" id="excellentPercentage">-</div>
          <div class="metric-card-trend" id="excellentTrend">
            <i class="fas fa-arrow-up"></i>
            <span>2.1% vs previous period</span>
          </div>
        </div>
        
        <!-- Needs Improvement -->
        <div class="metric-card">
          <div class="metric-card-header">
            <div class="metric-card-title">
              <i class="fas fa-exclamation-triangle"></i> Needs Improvement
            </div>
          </div>
          <div class="metric-card-value" id="needsImprovementPercentage">-</div>
          <div class="metric-card-trend" id="needsImprovementTrend">
            <i class="fas fa-arrow-down"></i>
            <span>1.8% vs previous period</span>
          </div>
        </div>
      </div>
      
      <!-- Charts Section -->
      <div style="margin-bottom: 32px;">
        <div class="chart-card">
          <div class="chart-card-header">
            <div class="chart-card-title">
              <i class="fas fa-chart-line"></i> QA Score Trend
            </div>
            <div class="chart-card-actions">
              <div class="filter-dropdown" id="scoreChartFilter">
                <button class="dropdown-toggle">
                  <span>Last 30 Days</span>
                  <i class="fas fa-chevron-down"></i>
                </button>
                <div class="dropdown-menu">
                  <div class="dropdown-item active" data-value="30">Last 30 Days</div>
                  <div class="dropdown-item" data-value="90">Last 90 Days</div>
                  <div class="dropdown-item" data-value="180">Last 6 Months</div>
                  <div class="dropdown-item" data-value="365">Last 12 Months</div>
                </div>
              </div>
            </div>
          </div>
          <div class="chart-container">
            <canvas id="scoreChart"></canvas>
          </div>
        </div>
      </div>
      
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px; margin-bottom: 32px;">
        <!-- Quality Status Distribution Chart -->
        <div class="chart-card">
          <div class="chart-card-header">
            <div class="chart-card-title">
              <i class="fas fa-chart-pie"></i> Quality Status Distribution
            </div>
          </div>
          <div class="chart-container">
            <canvas id="statusDistributionChart"></canvas>
          </div>
        </div>
        
        <!-- Criteria Performance Chart -->
        <div class="chart-card">
          <div class="chart-card-header">
            <div class="chart-card-title">
              <i class="fas fa-chart-bar"></i> Criteria Performance
            </div>
          </div>
          <div class="chart-container">
            <canvas id="criteriaPerformanceChart"></canvas>
          </div>
          <div class="chart-legend" id="criteriaLegend"></div>
        </div>
      </div>
      
      <!-- Top 5 Team Members Table -->
      <div class="chart-card">
        <div class="chart-card-header">
          <div class="chart-card-title">
            <i class="fas fa-users"></i> Team Performance
          </div>
          <div class="chart-card-actions">
            <button class="btn btn-secondary btn-sm" id="viewAllTeamBtn">
              View All
            </button>
          </div>
        </div>
        <div class="table-container">
          <table class="data-table" id="teamPerformanceTable">
            <thead>
              <tr>
                <th>Counselor</th>
                <th>Reviews</th>
                <th>Avg Score</th>
                <th>Excellence Rate</th>
                <th>Needs Improvement Rate</th>
                <th>Score Trend</th>
              </tr>
            </thead>
            <tbody>
              <!-- Will be populated with data -->
            </tbody>
          </table>
        </div>
      </div>
      
      <!-- Insights Section -->
      <div class="insights-section">
        <div class="insights-title">
          <i class="fas fa-lightbulb"></i> Insights
        </div>
        <div class="insights-grid" id="insightsGrid">
          <!-- Will be populated with insights -->
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading dashboard data...</div>
  </div>
  
  <script>
    // Dashboard state
    let dashboardData = null;
    let currentPeriod = '30';
    let charts = {};
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set up event listeners
      setupEventListeners();
      
      // Load dashboard data
      loadDashboardData('30');
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Time period options
      document.querySelectorAll('.time-period-option').forEach(function(option) {
        option.addEventListener('click', function() {
          // Update active state
          document.querySelectorAll('.time-period-option').forEach(o => o.classList.remove('active'));
          this.classList.add('active');
          
          // Update period and reload data
          const period = this.getAttribute('data-period');
          currentPeriod = period;
          loadDashboardData(period);
        });
      });
      
      // Score chart filter dropdown
      const scoreChartFilter = document.getElementById('scoreChartFilter');
      
      // Toggle dropdown
      scoreChartFilter.querySelector('.dropdown-toggle').addEventListener('click', function() {
        scoreChartFilter.classList.toggle('active');
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function(e) {
        if (!scoreChartFilter.contains(e.target)) {
          scoreChartFilter.classList.remove('active');
        }
      });
      
      // Dropdown options
      scoreChartFilter.querySelectorAll('.dropdown-item').forEach(function(item) {
        item.addEventListener('click', function() {
          // Update active state
          scoreChartFilter.querySelectorAll('.dropdown-item').forEach(i => i.classList.remove('active'));
          this.classList.add('active');
          
          // Update dropdown text
          scoreChartFilter.querySelector('.dropdown-toggle span').textContent = this.textContent;
          
          // Close dropdown
          scoreChartFilter.classList.remove('active');
          
          // Update chart
          updateScoreChart(this.getAttribute('data-value'));
        });
      });
      
      // View all team button
      document.getElementById('viewAllTeamBtn').addEventListener('click', function() {
        viewTeamReport();
      });
      
      // Create review button
      document.getElementById('createReviewBtn').addEventListener('click', function() {
        createNewReview();
      });
      
      // Report list button
      document.getElementById('reportListBtn').addEventListener('click', function() {
        viewReportList();
      });
    }
    
    // Load dashboard data
    function loadDashboardData(period) {
      showLoading('Loading dashboard data...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            dashboardData = result.data;
            updateDashboard();
          } else {
            console.error('Error loading dashboard data:', result.message);
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading dashboard data:', error);
        })
        .getQADashboardData(period);
    }
    
    // Update dashboard with loaded data
    function updateDashboard() {
      if (!dashboardData) return;
      
      // Update key metrics
      updateKeyMetrics();
      
      // Initialize or update charts
      initializeCharts();
      
      // Update team performance table
      updateTeamTable();
      
      // Update insights
      updateInsights();
    }
    
    // Update key metrics
    function updateKeyMetrics() {
      // Average QA Score
      document.getElementById('avgQAScore').textContent = dashboardData.metrics.averageScore.toFixed(1) + '%';
      
      const avgQATrendEl = document.getElementById('avgQATrend');
      const avgScoreTrend = dashboardData.metrics.averageScoreTrend;
      
      // Apply trend styles
      setTrendStyle(avgQATrendEl, avgScoreTrend, 'higher');
      
      // Reviews Completed
      document.getElementById('reviewsCompleted').textContent = dashboardData.metrics.reviewsCompleted;
      
      const reviewsTrendEl = document.getElementById('reviewsCompletedTrend');
      const reviewsTrend = dashboardData.metrics.reviewsCompletedTrend;
      
      // Apply trend styles
      setTrendStyle(reviewsTrendEl, reviewsTrend, 'higher');
      
      // Excellent Percentage
      document.getElementById('excellentPercentage').textContent = dashboardData.metrics.excellentPercentage.toFixed(1) + '%';
      
      const excellentTrendEl = document.getElementById('excellentTrend');
      const excellentTrend = dashboardData.metrics.excellentTrend;
      
      // Apply trend styles
      setTrendStyle(excellentTrendEl, excellentTrend, 'higher');
      
      // Needs Improvement Percentage
      document.getElementById('needsImprovementPercentage').textContent = dashboardData.metrics.needsImprovementPercentage.toFixed(1) + '%';
      
      const needsImprovementTrendEl = document.getElementById('needsImprovementTrend');
      const needsImprovementTrend = dashboardData.metrics.needsImprovementTrend;
      
      // Apply trend styles
      setTrendStyle(needsImprovementTrendEl, needsImprovementTrend, 'lower');
    }
    
    // Initialize all charts
    function initializeCharts() {
      // Score Trend Chart
      initScoreChart();
      
      // Status Distribution Chart
      initStatusDistributionChart();
      
      // Criteria Performance Chart
      initCriteriaPerformanceChart();
    }
    
    // Initialize score trend chart
    function initScoreChart() {
      const ctx = document.getElementById('scoreChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (charts.scoreChart) {
        charts.scoreChart.destroy();
      }
      
      charts.scoreChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: dashboardData.charts.scoreTrend.labels,
          datasets: [{
            label: 'Average QA Score',
            data: dashboardData.charts.scoreTrend.scores,
            borderColor: '#5540af',
            backgroundColor: 'rgba(85, 64, 175, 0.05)',
            borderWidth: 2,
            tension: 0.2,
            pointBackgroundColor: '#5540af',
            pointRadius: 3,
            fill: true
          },
          {
            label: 'Target',
            data: Array(dashboardData.charts.scoreTrend.labels.length).fill(90),
            borderColor: 'rgba(16, 185, 129, 0.7)',
            borderWidth: 2,
            borderDash: [5, 5],
            pointRadius: 0,
            fill: false
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                usePointStyle: true,
                boxWidth: 6
              }
            },
            tooltip: {
              mode: 'index',
              intersect: false
            }
          },
          scales: {
            y: {
              beginAtZero: false,
              min: 60,
              max: 100,
              title: {
                display: true,
                text: 'Score (%)'
              }
            }
          }
        }
      });
    }
    
    // Update score chart with new period data
    function updateScoreChart(period) {
      showLoading('Updating chart...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            // Update the chart data
            charts.scoreChart.data.labels = result.data.labels;
            charts.scoreChart.data.datasets[0].data = result.data.scores;
            charts.scoreChart.data.datasets[1].data = Array(result.data.labels.length).fill(90);
            
            // Update the chart
            charts.scoreChart.update();
          } else {
            console.error('Error updating score chart:', result.message);
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error updating score chart:', error);
        })
        .getQAScoreChartData(period);
    }
    
    // Initialize status distribution chart
    function initStatusDistributionChart() {
      const ctx = document.getElementById('statusDistributionChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (charts.statusDistributionChart) {
        charts.statusDistributionChart.destroy();
      }
      
      charts.statusDistributionChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: ['Excellent', 'Good', 'Needs Improvement'],
          datasets: [{
            data: [
              dashboardData.metrics.excellentCount,
              dashboardData.metrics.goodCount,
              dashboardData.metrics.needsImprovementCount
            ],
            backgroundColor: [
              '#10b981', // success
              '#3b82f6', // info
              '#f59e0b'  // warning
            ],
            borderWidth: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                usePointStyle: true,
                boxWidth: 6
              }
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.raw;
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value / total) * 100);
                  return `${label}: ${value} (${percentage}%)`;
                }
              }
            }
          },
          cutout: '70%',
          radius: '90%'
        }
      });
    }
    
    // Initialize criteria performance chart
    function initCriteriaPerformanceChart() {
      const ctx = document.getElementById('criteriaPerformanceChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (charts.criteriaPerformanceChart) {
        charts.criteriaPerformanceChart.destroy();
      }
      
      // Colors
      const colors = {
        callOpening: '#8884d8',
        riskAssessment: '#82ca9d',
        communicationSkills: '#8dd1e1',
        supportEffectiveness: '#a4de6c',
        callClosure: '#d0ed57'
      };
      
      const criteriaData = dashboardData.charts.criteriaPerformance;
      
      charts.criteriaPerformanceChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: ['Fully Met', 'Partially Met', 'Not Met', 'N/A'],
          datasets: [
            {
              label: 'Call Opening',
              data: [
                criteriaData.callOpening.fullyMet,
                criteriaData.callOpening.partiallyMet,
                criteriaData.callOpening.notMet,
                criteriaData.callOpening.na
              ],
              backgroundColor: colors.callOpening
            },
            {
              label: 'Risk Assessment',
              data: [
                criteriaData.riskAssessment.fullyMet,
                criteriaData.riskAssessment.partiallyMet,
                criteriaData.riskAssessment.notMet,
                criteriaData.riskAssessment.na
              ],
              backgroundColor: colors.riskAssessment
            },
            {
              label: 'Communication Skills',
              data: [
                criteriaData.communicationSkills.fullyMet,
                criteriaData.communicationSkills.partiallyMet,
                criteriaData.communicationSkills.notMet,
                criteriaData.communicationSkills.na
              ],
              backgroundColor: colors.communicationSkills
            },
            {
              label: 'Support Effectiveness',
              data: [
                criteriaData.supportEffectiveness.fullyMet,
                criteriaData.supportEffectiveness.partiallyMet,
                criteriaData.supportEffectiveness.notMet,
                criteriaData.supportEffectiveness.na
              ],
              backgroundColor: colors.supportEffectiveness
            },
            {
              label: 'Call Closure',
              data: [
                criteriaData.callClosure.fullyMet,
                criteriaData.callClosure.partiallyMet,
                criteriaData.callClosure.notMet,
                criteriaData.callClosure.na
              ],
              backgroundColor: colors.callClosure
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              stacked: true,
            },
            y: {
              stacked: true,
              beginAtZero: true
            }
          },
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.dataset.label || '';
                  const value = context.raw;
                  const datasetTotal = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value / datasetTotal) * 100);
                  return `${label}: ${value} (${percentage}%)`;
                }
              }
            }
          }
        }
      });
      
      // Create custom legend
      const legendContainer = document.getElementById('criteriaLegend');
      legendContainer.innerHTML = '';
      
      Object.entries(colors).forEach(([key, color]) => {
        const legendItem = document.createElement('div');
        legendItem.className = 'chart-legend-item';
        
        const colorBox = document.createElement('div');
        colorBox.className = 'chart-legend-color';
        colorBox.style.backgroundColor = color;
        
        const label = document.createElement('span');
        label.textContent = formatLegendKey(key);
        
        legendItem.appendChild(colorBox);
        legendItem.appendChild(label);
        legendContainer.appendChild(legendItem);
      });
    }
    
    // Update team performance table
    function updateTeamTable() {
      const tableBody = document.querySelector('#teamPerformanceTable tbody');
      tableBody.innerHTML = '';
      
      // Get top team members
      const teamData = dashboardData.teamPerformance.slice(0, 5);
      
      teamData.forEach(member => {
        const row = document.createElement('tr');
        
        // Determine score class
        let scoreClass = '';
        if (member.averageScore >= 90) scoreClass = 'excellent';
        else if (member.averageScore >= 75) scoreClass = 'good';
        else scoreClass = 'needs-improvement';
        
        // Create row content
        row.innerHTML = `
          <td>${member.name}</td>
          <td>${member.reviewCount}</td>
          <td class="${scoreClass}">${member.averageScore.toFixed(1)}%</td>
          <td>${member.excellentPercentage.toFixed(1)}%</td>
          <td>${member.needsImprovementPercentage.toFixed(1)}%</td>
          <td>
            <div class="progress-bar">
              <div class="progress-bar-fill ${scoreClass}" style="width: ${member.averageScore}%"></div>
            </div>
          </td>
        `;
        
        tableBody.appendChild(row);
      });
    }
    
    // Update insights section
    function updateInsights() {
      const insightsGrid = document.getElementById('insightsGrid');
      insightsGrid.innerHTML = '';
      
      // Add each insight
      dashboardData.insights.forEach(insight => {
        const insightCard = document.createElement('div');
        insightCard.className = `insight-card ${insight.type}`;
        
        insightCard.innerHTML = `
          <div class="insight-card-title">${insight.title}</div>
          <div class="insight-card-content">${insight.description}</div>
        `;
        
        insightsGrid.appendChild(insightCard);
      });
    }
    
    // Helper functions
    
    // Set trend element style based on trend value
    function setTrendStyle(element, trend, betterDirection = 'higher') {
      // Clear existing classes
      element.classList.remove('positive', 'negative', 'neutral');
      
      // Get the trend direction icon
      const iconElement = element.querySelector('i');
      
      // Check if trend is positive or negative
      const isPositive = betterDirection === 'higher' ? trend > 0 : trend < 0;
      const isNegative = betterDirection === 'higher' ? trend < 0 : trend > 0;
      
      if (isPositive) {
        element.classList.add('positive');
        iconElement.className = 'fas fa-arrow-up';
      } else if (isNegative) {
        element.classList.add('negative');
        iconElement.className = 'fas fa-arrow-down';
      } else {
        element.classList.add('neutral');
        iconElement.className = 'fas fa-minus';
      }
      
      // Update the text
      const textElement = element.querySelector('span');
      textElement.textContent = `${Math.abs(trend).toFixed(1)}% vs previous period`;
    }
    
    // Format legend key
    function formatLegendKey(key) {
      return key
        .replace(/([A-Z])/g, ' $1')
        .replace(/^./, str => str.toUpperCase());
    }
    
    // View team report
    function viewTeamReport() {
      google.script.run.showQATeamReport();
    }
    
    // Create new review
    function createNewReview() {
      google.script.run.showQAReviewForm();
    }
    
    // View report list
    function viewReportList() {
      google.script.run.showQAReports();
    }
    
    // Show loading overlay
    function showLoading(message = 'Loading...') {
      const overlay = document.getElementById('loadingOverlay');
      document.querySelector('.loading-text').textContent = message;
      overlay.classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
  </script>
</body>
</html>








<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Export QA Data</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1000px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--text-primary);
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .form-group {
      margin-bottom: 24px;
    }
    
    .form-group:last-child {
      margin-bottom: 0;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .form-row {
      display: flex;
      gap: 16px;
      margin-bottom: 16px;
    }
    
    .form-col {
      flex: 1;
    }
    
    .form-check {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 8px;
    }
    
    .form-check input[type="checkbox"] {
      width: 16px;
      height: 16px;
    }
    
    .checkbox-group {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
    }
    
    .checkbox-column {
      flex: 1;
      min-width: 200px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .form-actions {
      display: flex;
      justify-content: flex-end;
      gap: 12px;
      margin-top: 24px;
    }
    
    .select-all-wrapper {
      display: flex;
      align-items: center;
      margin-bottom: 12px;
    }
    
    .select-all-label {
      font-weight: 500;
      color: var(--primary-color);
      cursor: pointer;
      margin-left: 8px;
    }
    
    .section-title {
      font-weight: 600;
      color: var(--text-secondary);
      margin: 16px 0 12px 0;
      padding-bottom: 8px;
      border-bottom: 1px solid var(--border-light);
    }
    
    .export-preview {
      margin-top: 32px;
    }
    
        .export-success {
      margin-top: 24px;
      padding: 24px;
      background-color: var(--success-light);
      border-radius: var(--radius-md);
      border-left: 4px solid var(--success-color);
    }
    
    .export-success-header {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 16px;
    }
    
    .export-success-icon {
      width: 48px;
      height: 48px;
      background-color: var(--success-color);
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }
    
    .export-success-title {
      font-size: 18px;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .export-success-content {
      color: var(--text-secondary);
      margin-bottom: 16px;
    }
    
    .export-file-link {
      display: inline-block;
      padding: 10px 16px;
      background-color: white;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      color: var(--text-primary);
      text-decoration: none;
      font-weight: 500;
      margin-right: 16px;
      transition: all var(--transition-fast);
    }
    
    .export-file-link:hover {
      background-color: var(--bg-secondary);
      box-shadow: var(--shadow-sm);
    }
    
    .export-file-link i {
      margin-right: 8px;
    }
    
    .export-email-form {
      margin-top: 24px;
      padding-top: 24px;
      border-top: 1px solid var(--border-light);
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(85, 64, 175, 0.3);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 16px;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
      .header {
        padding: 20px;
      }
      
      .content {
        padding: 16px;
      }
      
      .form-row {
        flex-direction: column;
        gap: 8px;
      }
      
      .checkbox-group {
        flex-direction: column;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-file-export"></i> Export QA Data
          </h1>
          <div class="header-subtitle">
            Export quality review data in various formats
          </div>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div id="exportForm">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-sliders-h"></i> Export Options
            </div>
          </div>
          
          <div class="card-content">
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="exportFormat">Export Format</label>
                  <select class="form-control" id="exportFormat">
                    <option value="excel">Excel (.xlsx)</option>
                    <option value="csv">CSV (.csv)</option>
                    <option value="pdf">PDF (.pdf)</option>
                    <option value="googleSheet">Google Sheet</option>
                  </select>
                </div>
              </div>
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="exportType">Report Type</label>
                  <select class="form-control" id="exportType">
                    <option value="detailed">Detailed Reviews</option>
                    <option value="summary">Summary Report</option>
                    <option value="team">Team Performance</option>
                  </select>
                </div>
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="timePeriod">Time Period</label>
                  <select class="form-control" id="timePeriod">
                    <option value="current-month">Current Month</option>
                    <option value="previous-month">Previous Month</option>
                    <option value="current-quarter">Current Quarter</option>
                    <option value="previous-quarter">Previous Quarter</option>
                    <option value="year-to-date">Year to Date</option>
                    <option value="last-30-days">Last 30 Days</option>
                    <option value="last-90-days">Last 90 Days</option>
                    <option value="custom">Custom Range</option>
                  </select>
                </div>
              </div>
            </div>
            
            <div class="form-row" id="customDateContainer" style="display: none;">
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="startDate">Start Date</label>
                  <input type="date" class="form-control" id="startDate">
                </div>
              </div>
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="endDate">End Date</label>
                  <input type="date" class="form-control" id="endDate">
                </div>
              </div>
            </div>
            
            <div id="counselorSelectContainer" class="form-group">
              <label class="form-label" for="memberFilter">Counselors</label>
              
              <div class="select-all-wrapper">
                <input type="checkbox" id="selectAllMembers" checked>
                <label class="select-all-label" for="selectAllMembers">Select All</label>
              </div>
              
              <div class="checkbox-group" id="memberCheckboxes">
                <!-- Will be populated with team members -->
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Data to Include</label>
              
              <div class="select-all-wrapper">
                <input type="checkbox" id="selectAllFields" checked>
                <label class="select-all-label" for="selectAllFields">Select All</label>
              </div>
              
              <div class="section-title">Basic Information</div>
              <div class="checkbox-group">
                <div class="checkbox-column">
                  <div class="form-check">
                    <input type="checkbox" id="field_counselorName" name="fields" value="counselorName" checked>
                    <label for="field_counselorName">Counselor Name</label>
                  </div>
                  <div class="form-check">
                    <input type="checkbox" id="field_interactionDate" name="fields" value="interactionDate" checked>
                    <label for="field_interactionDate">Interaction Date</label>
                  </div>
                  <div class="form-check">
                    <input type="checkbox" id="field_interactionId" name="fields" value="interactionId" checked>
                    <label for="field_interactionId">Interaction ID</label>
                  </div>
                </div>
                <div class="checkbox-column">
                  <div class="form-check">
                    <input type="checkbox" id="field_channelType" name="fields" value="channelType" checked>
                    <label for="field_channelType">Channel Type</label>
                  </div>
                  <div class="form-check">
                    <input type="checkbox" id="field_reviewerName" name="fields" value="reviewerName" checked>
                    <label for="field_reviewerName">Reviewer</label>
                  </div>
                  <div class="form-check">
                    <input type="checkbox" id="field_reviewDate" name="fields" value="reviewDate" checked>
                    <label for="field_reviewDate">Review Date</label>
                  </div>
                </div>
              </div>
              
              <div class="section-title">Evaluation Categories</div>
              <div class="checkbox-group">
                <div class="checkbox-column">
                  <div class="form-check">
                    <input type="checkbox" id="field_callOpening" name="fields" value="callOpening" checked>
                    <label for="field_callOpening">Call Opening</label>
                  </div>
                  <div class="form-check">
                    <input type="checkbox" id="field_riskAssessment" name="fields" value="riskAssessment" checked>
                    <label for="field_riskAssessment">Risk Assessment</label>
                  </div>
                  <div class="form-check">
                    <input type="checkbox" id="field_communicationSkills" name="fields" value="communicationSkills" checked>
                    <label for="field_communicationSkills">Communication Skills</label>
                  </div>
                </div>
                <div class="checkbox-column">
                  <div class="form-check">
                    <input type="checkbox" id="field_supportEffectiveness" name="fields" value="supportEffectiveness" checked>
                    <label for="field_supportEffectiveness">Support Effectiveness</label>
                  </div>
                  <div class="form-check">
                    <input type="checkbox" id="field_callClosure" name="fields" value="callClosure" checked>
                    <label for="field_callClosure">Call Closure</label>
                  </div>
                </div>
              </div>
              
              <div class="section-title">Results</div>
              <div class="checkbox-group">
                <div class="checkbox-column">
                  <div class="form-check">
                    <input type="checkbox" id="field_overallFeedback" name="fields" value="overallFeedback" checked>
                    <label for="field_overallFeedback">Overall Feedback</label>
                  </div>
                  <div class="form-check">
                    <input type="checkbox" id="field_followUpActions" name="fields" value="followUpActions" checked>
                    <label for="field_followUpActions">Follow-Up Actions</label>
                  </div>
                </div>
                <div class="checkbox-column">
                  <div class="form-check">
                    <input type="checkbox" id="field_scoreDetails" name="fields" value="scoreDetails" checked>
                    <label for="field_scoreDetails">Score Details</label>
                  </div>
                  <div class="form-check">
                    <input type="checkbox" id="field_qualityStatus" name="fields" value="qualityStatus" checked>
                    <label for="field_qualityStatus">Quality Status</label>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="form-actions">
              <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
              <button type="button" class="btn btn-primary" id="exportBtn">
                <i class="fas fa-file-export"></i> Generate Export
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Export Success Section (Initially Hidden) -->
      <div id="exportSuccess" style="display: none;">
        <div class="export-success">
          <div class="export-success-header">
            <div class="export-success-icon">
              <i class="fas fa-check"></i>
            </div>
            <div class="export-success-title">Export Generated Successfully</div>
          </div>
          
          <div class="export-success-content">
            <p>Your QA data export has been generated successfully. You can download the file using the link below.</p>
          </div>
          
          <div class="export-file-details">
            <a href="#" class="export-file-link" id="downloadLink" target="_blank">
              <i class="fas fa-download"></i> Download File
            </a>
            <span id="fileDetails">QA_Export.xlsx (Excel Spreadsheet)</span>
          </div>
          
          <div class="export-email-form">
            <div class="form-group">
              <label class="form-label" for="emailRecipients">Email Export</label>
              <div class="form-row">
                <div class="form-col" style="flex: 3;">
                  <input type="email" class="form-control" id="emailRecipients" placeholder="Enter email addresses (separated by commas)">
                </div>
                <div class="form-col" style="flex: 1;">
                  <button class="btn btn-primary" id="sendEmailBtn" style="width: 100%;">
                    <i class="fas fa-envelope"></i> Send
                  </button>
                </div>
              </div>
              <div style="font-size: 12px; color: var(--text-tertiary); margin-top: 8px;">
                The file will be sent as an attachment to the specified email addresses.
              </div>
            </div>
          </div>
        </div>
        
        <div class="form-actions" style="justify-content: space-between;">
          <button class="btn btn-secondary" id="backToFormBtn">
            <i class="fas fa-arrow-left"></i> Back to Export Options
          </button>
          <button class="btn btn-primary" id="startNewExportBtn">
            <i class="fas fa-plus"></i> Create Another Export
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Operation completed successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Generating export...</div>
  </div>
  
  <script>
    // Global variables
    let teamMembers = [];
    let exportData = null;
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set up event listeners
      setupEventListeners();
      
      // Load team members
      loadTeamMembers();
      
      // Set default dates
      setDefaultDates();
    });
    
    // Setup event listeners
    function setupEventListeners() {
      // Time period change
      document.getElementById('timePeriod').addEventListener('change', function() {
        const customDateContainer = document.getElementById('customDateContainer');
        
        if (this.value === 'custom') {
          customDateContainer.style.display = 'flex';
        } else {
          customDateContainer.style.display = 'none';
        }
      });
      
      // Select all members checkbox
      document.getElementById('selectAllMembers').addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('#memberCheckboxes input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
          checkbox.checked = this.checked;
        });
      });
      
      // Select all fields checkbox
      document.getElementById('selectAllFields').addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('input[name="fields"]');
        checkboxes.forEach(checkbox => {
          checkbox.checked = this.checked;
        });
      });
      
      // Export button
      document.getElementById('exportBtn').addEventListener('click', function() {
        if (validateForm()) {
          generateExport();
        }
      });
      
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', function() {
        if (confirm('Are you sure you want to cancel? Any changes will be lost.')) {
          google.script.host.close();
        }
      });
      
      // Back to form button
      document.getElementById('backToFormBtn').addEventListener('click', function() {
        showExportForm();
      });
      
      // Start new export button
      document.getElementById('startNewExportBtn').addEventListener('click', function() {
        resetForm();
        showExportForm();
      });
      
      // Send email button
      document.getElementById('sendEmailBtn').addEventListener('click', function() {
        sendExportByEmail();
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', hideToast);
    }
    
    // Load team members
    function loadTeamMembers() {
      showLoading('Loading team members...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            teamMembers = result.teamMembers;
            populateMemberCheckboxes();
          } else {
            showToast('Error', result.message || 'Failed to load team members', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading team members:', error);
          showToast('Error', 'Failed to load team members', 'error');
        })
        .getTeamMembers();
    }
    
    // Populate member checkboxes
    function populateMemberCheckboxes() {
      const container = document.getElementById('memberCheckboxes');
      container.innerHTML = '';
      
      // Split members into columns (3 columns)
      const columnCount = 2;
      const memberCount = teamMembers.length;
      const itemsPerColumn = Math.ceil(memberCount / columnCount);
      
      // Create columns
      for (let i = 0; i < columnCount; i++) {
        const column = document.createElement('div');
        column.className = 'checkbox-column';
        
        // Add members to this column
        const startIdx = i * itemsPerColumn;
        const endIdx = Math.min(startIdx + itemsPerColumn, memberCount);
        
        for (let j = startIdx; j < endIdx; j++) {
          const member = teamMembers[j];
          
          const checkboxDiv = document.createElement('div');
          checkboxDiv.className = 'form-check';
          
          checkboxDiv.innerHTML = `
            <input type="checkbox" id="member_${member.id}" name="members" value="${member.id}" checked>
            <label for="member_${member.id}">${member.name}</label>
          `;
          
          column.appendChild(checkboxDiv);
        }
        
        container.appendChild(column);
      }
      
      // Add event listeners for individual checkboxes
      document.querySelectorAll('#memberCheckboxes input[type="checkbox"]').forEach(function(checkbox) {
        checkbox.addEventListener('change', function() {
          updateSelectAllMembersState();
        });
      });
    }
    
    // Update "Select All" checkbox state based on individual checkboxes
    function updateSelectAllMembersState() {
      const checkboxes = document.querySelectorAll('#memberCheckboxes input[type="checkbox"]');
      const allChecked = Array.from(checkboxes).every(checkbox => checkbox.checked);
      const selectAllCheckbox = document.getElementById('selectAllMembers');
      
      selectAllCheckbox.checked = allChecked;
      selectAllCheckbox.indeterminate = !allChecked && Array.from(checkboxes).some(checkbox => checkbox.checked);
    }
    
    // Set default dates
    function setDefaultDates() {
      const today = new Date();
      const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
      
      // Set default start date to first day of current month
      document.getElementById('startDate').value = formatDateForInput(firstDayOfMonth);
      
      // Set default end date to today
      document.getElementById('endDate').value = formatDateForInput(today);
    }
    
    // Format date for input fields (YYYY-MM-DD)
    function formatDateForInput(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
    
    // Validate form before export
    function validateForm() {
      // Check if at least one member is selected
      const memberCheckboxes = document.querySelectorAll('input[name="members"]:checked');
      if (memberCheckboxes.length === 0) {
        showToast('Error', 'Please select at least one counselor', 'error');
        return false;
      }
      
      // Check if at least one field is selected
      const fieldCheckboxes = document.querySelectorAll('input[name="fields"]:checked');
      if (fieldCheckboxes.length === 0) {
        showToast('Error', 'Please select at least one field to include', 'error');
        return false;
      }
      
      // Check custom date range if selected
      const timePeriod = document.getElementById('timePeriod').value;
      if (timePeriod === 'custom') {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        
        if (!startDate || !endDate) {
          showToast('Error', 'Please select both start and end dates', 'error');
          return false;
        }
        
        if (new Date(startDate) > new Date(endDate)) {
          showToast('Error', 'Start date cannot be after end date', 'error');
          return false;
        }
      }
      
      return true;
    }
    
    // Generate export
    function generateExport() {
      showLoading('Generating export...');
      
      // Get form data
      const exportOptions = {
        format: document.getElementById('exportFormat').value,
        type: document.getElementById('exportType').value,
        timePeriod: document.getElementById('timePeriod').value,
        startDate: document.getElementById('startDate').value,
        endDate: document.getElementById('endDate').value,
        members: Array.from(document.querySelectorAll('input[name="members"]:checked')).map(cb => cb.value),
        fields: Array.from(document.querySelectorAll('input[name="fields"]:checked')).map(cb => cb.value)
      };
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            exportData = result;
            showExportSuccess(result);
          } else {
            showToast('Error', result.message || 'Failed to generate export', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error generating export:', error);
          showToast('Error', 'Failed to generate export', 'error');
        })
        .exportQAData(exportOptions);
    }
    
    // Show export success
    function showExportSuccess(exportResult) {
      // Update download link
      const downloadLink = document.getElementById('downloadLink');
      downloadLink.href = exportResult.url;
      downloadLink.download = exportResult.fileName;
      
      // Update file details
      document.getElementById('fileDetails').textContent = `${exportResult.fileName} (${exportResult.fileType})`;
      
      // Switch to success view
      document.getElementById('exportForm').style.display = 'none';
      document.getElementById('exportSuccess').style.display = 'block';
    }
    
    // Show export form
    function showExportForm() {
      document.getElementById('exportSuccess').style.display = 'none';
      document.getElementById('exportForm').style.display = 'block';
    }
    
    // Reset form
    function resetForm() {
      document.getElementById('exportFormat').value = 'excel';
      document.getElementById('exportType').value = 'detailed';
      document.getElementById('timePeriod').value = 'current-month';
      document.getElementById('customDateContainer').style.display = 'none';
      setDefaultDates();
      
      // Reset member checkboxes
      document.getElementById('selectAllMembers').checked = true;
      document.querySelectorAll('input[name="members"]').forEach(checkbox => {
        checkbox.checked = true;
      });
      
      // Reset field checkboxes
      document.getElementById('selectAllFields').checked = true;
      document.querySelectorAll('input[name="fields"]').forEach(checkbox => {
        checkbox.checked = true;
      });
      
      // Clear email recipients
      document.getElementById('emailRecipients').value = '';
    }
    
    // Send export by email
    function sendExportByEmail() {
      const recipients = document.getElementById('emailRecipients').value.trim();
      
      if (!recipients) {
        showToast('Error', 'Please enter at least one email address', 'error');
        return;
      }
      
      // Simple email validation
      const emailList = recipients.split(',').map(email => email.trim());
      const invalidEmails = emailList.filter(email => !isValidEmail(email));
      
      if (invalidEmails.length > 0) {
        showToast('Error', `Invalid email address: ${invalidEmails.join(', ')}`, 'error');
        return;
      }
      
      showLoading('Sending email...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Export sent by email successfully', 'success');
            document.getElementById('emailRecipients').value = '';
          } else {
            showToast('Error', result.message || 'Failed to send email', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error sending email:', error);
          showToast('Error', 'Failed to send email', 'error');
        })
        .emailQAExport(exportData.fileName, exportData.fileFormat, emailList);
    }
    
    // Check if email is valid
    function isValidEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    }
    
    // Show loading overlay
    function showLoading(message = 'Loading...') {
      const overlay = document.getElementById('loadingOverlay');
      document.querySelector('.loading-text').textContent = message;
      overlay.classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'success') {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      } else if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Hide toast after 5 seconds
      setTimeout(hideToast, 5000);
    }
    
    // Hide toast notification
    function hideToast() {
      document.getElementById('toast').classList.remove('visible');
    }
  </script>
</body>
</html>





/**
 * QAService.gs - Handles all functionality related to Quality Assurance
 * 
 * 🌟 Provides functions for:
 * - QA sheet initialization
 * - Quality reviews management
 * - QA reporting and analytics
 */

/**
 * 📋 Initialize the Quality Reviews sheet with required headers
 * @return {Boolean} Success flag
 */
function initializeQualityReviewsSheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(CONFIG.SHEETS.QUALITY_REVIEWS);
    
    // Create sheet if it doesn't exist
    if (!sheet) {
      sheet = ss.insertSheet(CONFIG.SHEETS.QUALITY_REVIEWS);
    }
    
    // Set up headers
    const headers = [
      'Review ID',
      'Team Member ID',
      'Team Member Name',
      'Interaction Date',
      'Interaction ID',
      'Interaction Type',
      'Overall Score',
      'Opening Score',
      'Risk Assessment Score',
      'Communication Score',
      'Support Provided Score',
      'Closure Score',
      'Strengths',
      'Areas for Improvement',
      'Reviewer',
      'Review Date',
      'Notes',
      'Created By',
      'Created Date',
      'Modified Date'
    ];
    
    // Check if headers already exist
    const existingHeaders = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Only set headers if they don't match
    if (existingHeaders.length !== headers.length || !headers.every((header, i) => header === existingHeaders[i])) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
      
      // Format the sheet
      sheet.autoResizeColumns(1, headers.length);
    }
    
    return true;
  } catch (error) {
    logError('initializeQualityReviewsSheet', error);
    return false;
  }
}

/**
 * 🧹 Clear QA cache
 * Call this function any time QA data is modified
 * @return {Boolean} Success flag
 */
function clearQACache() {
  try {
    const cache = CacheService.getScriptCache();
    cache.remove('qualityReviewsCache');
    cache.remove('recentQACache');
    return true;
  } catch (error) {
    logError('clearQACache', error);
    return false;
  }
}

/**
 * 📊 Get all QA reviews with proper caching
 * @return {Object} Result with QA reviews data
 */
function getAllQualityReviews() {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cachedData = cache.get('qualityReviewsCache');
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.QUALITY_REVIEWS);
    
    if (!sheet) {
      return { 
        success: false, 
        message: 'Quality Reviews sheet not found. Please run initialization.',
        data: []
      };
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return { success: true, message: 'No quality reviews found.', data: [] };
    }
    
    const data = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    const reviews = data
      .filter(row => row[0]) // Filter out empty rows (check if Review ID exists)
      .map(row => {
        const review = {};
        headers.forEach((header, index) => {
          review[header] = row[index];
        });
        return review;
      });
    
    const result = { success: true, data: reviews };
    
    // Cache the result for 5 minutes
    cache.put('qualityReviewsCache', JSON.stringify(result), 300);
    
    return result;
  } catch (error) {
    logError('getAllQualityReviews', error);
    return { 
      success: false, 
      message: 'Error retrieving quality reviews: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 🔍 Get quality reviews for a specific team member
 * @param {String} teamMemberId - Team member ID
 * @param {Date} startDate - Optional start date filter
 * @param {Date} endDate - Optional end date filter
 * @return {Object} Result with team member's quality reviews
 */
function getTeamMemberQualityReviews(teamMemberId, startDate, endDate) {
  try {
    if (!teamMemberId) {
      return { 
        success: false, 
        message: 'Team member ID is required',
        data: []
      };
    }
    
    // Get team member details first to validate
    const teamMemberResult = getTeamMemberById(teamMemberId);
    if (!teamMemberResult.success) {
      return { 
        success: false, 
        message: 'Team member not found: ' + teamMemberResult.message,
        data: []
      };
    }
    
    // Get all quality reviews
    const reviewsResult = getAllQualityReviews();
    if (!reviewsResult.success) {
      return reviewsResult;
    }
    
    // Filter reviews for this team member
    let teamMemberReviews = reviewsResult.data.filter(review => 
      review['Team Member ID'] === teamMemberId
    );
    
    // Apply date filters if provided
    if (startDate) {
      const start = new Date(startDate);
      teamMemberReviews = teamMemberReviews.filter(review => 
        new Date(review['Interaction Date']) >= start
      );
    }
    
    if (endDate) {
      const end = new Date(endDate);
      teamMemberReviews = teamMemberReviews.filter(review => 
        new Date(review['Interaction Date']) <= end
      );
    }
    
    // Sort by interaction date (newest first)
    teamMemberReviews.sort((a, b) => new Date(b['Interaction Date']) - new Date(a['Interaction Date']));
    
    return { 
      success: true, 
      data: teamMemberReviews,
      teamMember: {
        id: teamMemberResult.data['Team Member ID'],
        name: teamMemberResult.data['Full Name']
      }
    };
  } catch (error) {
    logError('getTeamMemberQualityReviews', error);
    return { 
      success: false, 
      message: 'Error retrieving team member quality reviews: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 🔍 Get a specific quality review by ID
 * @param {String} reviewId - Quality review ID
 * @return {Object} Result with review data
 */
function getQualityReviewById(reviewId) {
  try {
    if (!reviewId) {
      return {
        success: false, 
        message: 'Review ID is required'
      };
    }
    
    // Get all quality reviews
    const reviewsResult = getAllQualityReviews();
    if (!reviewsResult.success) {
      return reviewsResult;
    }
    
    // Find the specific review
    const review = reviewsResult.data.find(r => r['Review ID'] === reviewId);
    
    if (!review) {
      return {
        success: false,
        message: 'Quality review not found',
        data: null
      };
    }
    
    // Get team member details for additional context
    let teamMemberDetails = { name: review['Team Member Name'] };
    const teamMemberResult = getTeamMemberById(review['Team Member ID']);
    
    if (teamMemberResult.success) {
      teamMemberDetails = {
        id: teamMemberResult.data['Team Member ID'],
        name: teamMemberResult.data['Full Name'],
        email: teamMemberResult.data['Email'],
        status: teamMemberResult.data['Status']
      };
    }
    
    return { 
      success: true, 
      data: review,
      teamMember: teamMemberDetails
    };
  } catch (error) {
    logError('getQualityReviewById', error);
    return { 
      success: false, 
      message: 'Error retrieving quality review: ' + error.toString(),
      data: null
    };
  }
}

/**
 * ➕ Add a new quality review
 * @param {Object} reviewData - Quality review data
 * @return {Object} Result with success flag and review ID
 */
function addQualityReview(reviewData) {
  try {
    // Validate required fields
    if (!reviewData.teamMemberId || !reviewData.interactionDate) {
      return { 
        success: false, 
        message: 'Team member ID and interaction date are required'
      };
    }
    
    // Check for required score fields
    const requiredScoreFields = [
      'overallScore',
      'openingScore',
      'riskScore',
      'communicationScore',
      'supportScore',
      'closureScore'
    ];
    
    for (const field of requiredScoreFields) {
      if (reviewData[field] === undefined || reviewData[field] === null || isNaN(reviewData[field])) {
        return { 
          success: false, 
          message: `Field ${field} must be a number`
        };
      }
      
      // Ensure score is between 0 and 100
      const score = Number(reviewData[field]);
      if (score < 0 || score > 100) {
        return { 
          success: false, 
          message: `Field ${field} must be between 0 and 100`
        };
      }
    }
    
    // Get team member details to validate
    const teamMemberResult = getTeamMemberById(reviewData.teamMemberId);
    if (!teamMemberResult.success) {
      return { 
        success: false, 
        message: 'Invalid team member: ' + teamMemberResult.message
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.QUALITY_REVIEWS);
    
    if (!sheet) {
      // Initialize sheet if it doesn't exist
      initializeQualityReviewsSheet();
      sheet = ss.getSheetByName(CONFIG.SHEETS.QUALITY_REVIEWS);
    }
    
    // Generate a unique review ID
    const reviewId = 'QA-' + Utilities.getUuid().substring(0, 8).toUpperCase();
    
    // Current date for timestamps
    const now = new Date();
    
    // Convert date string to Date object if needed
    const interactionDate = typeof reviewData.interactionDate === 'string' ? 
      new Date(reviewData.interactionDate) : reviewData.interactionDate;
    
    // Prepare review data row
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    const reviewRow = headers.map(header => {
      switch (header) {
        case 'Review ID':
          return reviewId;
        case 'Team Member ID':
          return reviewData.teamMemberId;
        case 'Team Member Name':
          return teamMemberResult.data['Full Name'];
        case 'Interaction Date':
          return interactionDate;
        case 'Interaction ID':
          return reviewData.interactionId || '';
        case 'Interaction Type':
          return reviewData.interactionType || 'Call';
        case 'Overall Score':
          return Number(reviewData.overallScore);
        case 'Opening Score':
          return Number(reviewData.openingScore);
        case 'Risk Assessment Score':
          return Number(reviewData.riskScore);
        case 'Communication Score':
          return Number(reviewData.communicationScore);
        case 'Support Provided Score':
          return Number(reviewData.supportScore);
        case 'Closure Score':
          return Number(reviewData.closureScore);
        case 'Strengths':
          return reviewData.strengths || '';
        case 'Areas for Improvement':
          return reviewData.areasForImprovement || '';
        case 'Reviewer':
          return reviewData.reviewer || Session.getEffectiveUser().getEmail();
        case 'Review Date':
          return reviewData.reviewDate ? new Date(reviewData.reviewDate) : now;
        case 'Notes':
          return reviewData.notes || '';
        case 'Created By':
          return Session.getEffectiveUser().getEmail();
        case 'Created Date':
          return now;
        case 'Modified Date':
          return now;
        default:
          return '';
      }
    });
    
    // Add new row to sheet
    sheet.appendRow(reviewRow);
    
    // Clear cache
    clearQACache();
    
    // Send email notification if configured
    if (reviewData.sendEmailNotification) {
      sendQANotificationEmail(reviewId);
    }
    
    return { 
      success: true, 
      message: 'Quality review added successfully',
      reviewId: reviewId
    };
  } catch (error) {
    logError('addQualityReview', error);
    return { 
      success: false, 
      message: 'Error adding quality review: ' + error.toString()
    };
  }
}

/**
 * 🔄 Update an existing quality review
 * @param {Object} reviewData - Updated quality review data
 * @return {Object} Result with success flag
 */
function updateQualityReview(reviewData) {
  try {
    // Validate required fields
    if (!reviewData.reviewId) {
      return { 
        success: false, 
        message: 'Review ID is required'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.QUALITY_REVIEWS);
    
    if (!sheet) {
      return { 
        success: false, 
        message: 'Quality Reviews sheet not found'
      };
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find review row
    const reviewIdCol = headers.indexOf('Review ID');
    if (reviewIdCol === -1) {
      return { 
        success: false, 
        message: 'Invalid sheet structure - Review ID column not found'
      };
    }
    
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][reviewIdCol] === reviewData.reviewId) {
        rowIndex = i + 1; // +1 because arrays are 0-indexed but sheets are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      return { 
        success: false, 
        message: 'Quality review not found'
      };
    }
    
    // Current date for timestamp
    const now = new Date();
    
    // Get team member name if needed
    let teamMemberName = '';
    if (reviewData.teamMemberId) {
      const teamMemberResult = getTeamMemberById(reviewData.teamMemberId);
      if (teamMemberResult.success) {
        teamMemberName = teamMemberResult.data['Full Name'];
      }
    }
    
    // Validate score fields if provided
    const scoreFields = ['overallScore', 'openingScore', 'riskScore', 'communicationScore', 'supportScore', 'closureScore'];
    
    for (const field of scoreFields) {
      if (reviewData[field] !== undefined && reviewData[field] !== null) {
        const score = Number(reviewData[field]);
        if (isNaN(score) || score < 0 || score > 100) {
          return { 
            success: false, 
            message: `Field ${field} must be a number between 0 and 100`
          };
        }
      }
    }
    
    // Update each field if provided
    headers.forEach((header, colIndex) => {
      let value = null;
      
      switch (header) {
        case 'Team Member ID':
          value = reviewData.teamMemberId;
          break;
        case 'Team Member Name':
          if (reviewData.teamMemberId && teamMemberName) {
            value = teamMemberName;
          }
          break;
        case 'Interaction Date':
          if (reviewData.interactionDate) {
            value = typeof reviewData.interactionDate === 'string' ? 
              new Date(reviewData.interactionDate) : reviewData.interactionDate;
          }
          break;
        case 'Interaction ID':
          value = reviewData.interactionId;
          break;
        case 'Interaction Type':
          value = reviewData.interactionType;
          break;
        case 'Overall Score':
          if (reviewData.overallScore !== undefined) {
            value = Number(reviewData.overallScore);
          }
          break;
        case 'Opening Score':
          if (reviewData.openingScore !== undefined) {
            value = Number(reviewData.openingScore);
          }
          break;
        case 'Risk Assessment Score':
          if (reviewData.riskScore !== undefined) {
            value = Number(reviewData.riskScore);
          }
          break;
        case 'Communication Score':
          if (reviewData.communicationScore !== undefined) {
            value = Number(reviewData.communicationScore);
          }
          break;
        case 'Support Provided Score':
          if (reviewData.supportScore !== undefined) {
            value = Number(reviewData.supportScore);
          }
          break;
        case 'Closure Score':
          if (reviewData.closureScore !== undefined) {
            value = Number(reviewData.closureScore);
          }
          break;
        case 'Strengths':
          value = reviewData.strengths;
          break;
        case 'Areas for Improvement':
          value = reviewData.areasForImprovement;
          break;
        case 'Reviewer':
          value = reviewData.reviewer;
          break;
        case 'Review Date':
          if (reviewData.reviewDate) {
            value = typeof reviewData.reviewDate === 'string' ? 
              new Date(reviewData.reviewDate) : reviewData.reviewDate;
          }
          break;
        case 'Notes':
          value = reviewData.notes;
          break;
        case 'Modified Date':
          value = now;
          break;
        default:
          // Skip fields that shouldn't be updated
          return;
      }
      
      // Only update if value is provided
      if (value !== undefined && value !== null) {
        sheet.getRange(rowIndex, colIndex + 1).setValue(value);
      }
    });
    
    // Clear cache
    clearQACache();
    
    return { 
      success: true, 
      message: 'Quality review updated successfully'
    };
  } catch (error) {
    logError('updateQualityReview', error);
    return { 
      success: false, 
      message: 'Error updating quality review: ' + error.toString() 
    };
  }
}

/**
 * 🗑️ Delete a quality review
 * @param {String} reviewId - ID of the quality review to delete
 * @return {Object} Result with success flag
 */
function deleteQualityReview(reviewId) {
  try {
    if (!reviewId) {
      return { 
        success: false, 
        message: 'Review ID is required'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.QUALITY_REVIEWS);
    
    if (!sheet) {
      return { 
        success: false, 
        message: 'Quality Reviews sheet not found'
      };
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find review row
    const reviewIdCol = headers.indexOf('Review ID');
    if (reviewIdCol === -1) {
      return { 
        success: false, 
        message: 'Invalid sheet structure - Review ID column not found'
      };
    }
    
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][reviewIdCol] === reviewId) {
        rowIndex = i + 1; // +1 because arrays are 0-indexed but sheets are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      return { 
        success: false, 
        message: 'Quality review not found'
      };
    }
    
    // Delete the row
    sheet.deleteRow(rowIndex);
    
    // Clear cache
    clearQACache();
    
    return { 
      success: true, 
      message: 'Quality review deleted successfully'
    };
  } catch (error) {
    logError('deleteQualityReview', error);
    return { 
      success: false, 
      message: 'Error deleting quality review: ' + error.toString() 
    };
  }
}

/**
 * 📊 Get QA statistics for a team member
 * @param {String} teamMemberId - Team member ID
 * @param {Date} startDate - Optional start date for filtering data
 * @param {Date} endDate - Optional end date for filtering data
 * @return {Object} Team member QA statistics
 */
function getTeamMemberQAStats(teamMemberId, startDate, endDate) {
  try {
    if (!teamMemberId) {
      return { 
        success: false, 
        message: 'Team member ID is required'
      };
    }
    
    // Set default date range if not provided (last 90 days)
    if (!startDate) {
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 90);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Get team member reviews
    const reviewsResult = getTeamMemberQualityReviews(teamMemberId, startDate, endDate);
    if (!reviewsResult.success) {
      return reviewsResult;
    }
    
    const reviews = reviewsResult.data;
    
    if (reviews.length === 0) {
      return {
        success: true,
        message: 'No quality reviews found for this team member in the specified date range.',
        data: {
          overallScore: null,
          categoryScores: {
            opening: null,
            riskAssessment: null,
            communication: null,
            support: null,
            closure: null
          },
          totalReviews: 0,
          reviewTrend: 'insufficient data',
          latestReview: null,
          strengths: [],
          improvementAreas: []
        }
      };
    }
    
    // Calculate average scores
    let totalOverall = 0;
    let totalOpening = 0;
    let totalRisk = 0;
    let totalCommunication = 0;
    let totalSupport = 0;
    let totalClosure = 0;
    
    // For trend calculation, split the reviews into two periods
    const halfIndex = Math.floor(reviews.length / 2);
    const firstHalf = reviews.slice(halfIndex); // Older reviews
    const secondHalf = reviews.slice(0, halfIndex); // More recent reviews
    
    let firstHalfTotal = 0;
    let secondHalfTotal = 0;
    
    // Collect strengths and improvement areas
    const strengthsMap = {};
    const improvementAreasMap = {};
    
    reviews.forEach((review, index) => {
      // Sum up all scores for averages
      const overallScore = Number(review['Overall Score']) || 0;
      totalOverall += overallScore;
      totalOpening += Number(review['Opening Score']) || 0;
      totalRisk += Number(review['Risk Assessment Score']) || 0;
      totalCommunication += Number(review['Communication Score']) || 0;
      totalSupport += Number(review['Support Provided Score']) || 0;
      totalClosure += Number(review['Closure Score']) || 0;
      
      // For trend calculation
      if (index < halfIndex) {
        secondHalfTotal += overallScore;
      } else {
        firstHalfTotal += overallScore;
      }
      
      // Collect strengths
      if (review['Strengths']) {
        review['Strengths'].split('\n').forEach(strength => {
          const cleanStrength = strength.trim();
          if (cleanStrength) {
            if (!strengthsMap[cleanStrength]) {
              strengthsMap[cleanStrength] = 0;
            }
            strengthsMap[cleanStrength]++;
          }
        });
      }
      
      // Collect improvement areas
      if (review['Areas for Improvement']) {
        review['Areas for Improvement'].split('\n').forEach(area => {
          const cleanArea = area.trim();
          if (cleanArea) {
            if (!improvementAreasMap[cleanArea]) {
              improvementAreasMap[cleanArea] = 0;
            }
            improvementAreasMap[cleanArea]++;
          }
        });
      }
    });
    
    // Calculate averages
    const avgOverall = totalOverall / reviews.length;
    const avgOpening = totalOpening / reviews.length;
    const avgRisk = totalRisk / reviews.length;
    const avgCommunication = totalCommunication / reviews.length;
    const avgSupport = totalSupport / reviews.length;
    const avgClosure = totalClosure / reviews.length;
    
    // Calculate trend
    let trend = 'steady';
    if (firstHalf.length > 0 && secondHalf.length > 0) {
      const firstHalfAvg = firstHalfTotal / firstHalf.length;
      const secondHalfAvg = secondHalfTotal / secondHalf.length;
      
      const difference = secondHalfAvg - firstHalfAvg;
      
      if (difference >= 5) {
        trend = 'improving';
      } else if (difference <= -5) {
        trend = 'declining';
      }
    } else {
      trend = 'insufficient data';
    }
    
    // Get top strengths and improvement areas
    const topStrengths = Object.entries(strengthsMap)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(entry => entry[0]);
    
    const topImprovementAreas = Object.entries(improvementAreasMap)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(entry => entry[0]);
    
    // Get latest review
    const latestReview = reviews[0]; // Already sorted by date, newest first
    
    return {
      success: true,
      data: {
        overallScore: avgOverall,
        categoryScores: {
          opening: avgOpening,
          riskAssessment: avgRisk,
          communication: avgCommunication,
          support: avgSupport,
          closure: avgClosure
        },
        totalReviews: reviews.length,
        reviewTrend: trend,
        latestReview: {
          id: latestReview['Review ID'],
          date: new Date(latestReview['Interaction Date']),
          score: Number(latestReview['Overall Score']),
          reviewer: latestReview['Reviewer']
        },
        strengths: topStrengths,
        improvementAreas: topImprovementAreas,
        reviewDates: reviews.map(r => ({
          date: new Date(r['Interaction Date']),
          score: Number(r['Overall Score'])
        }))
      }
    };
  } catch (error) {
    logError('getTeamMemberQAStats', error);
    return { 
      success: false, 
      message: 'Error calculating QA statistics: ' + error.toString()
    };
  }
}

/**
 * 📊 Get recent quality reviews
 * @param {Number} limit - Maximum number of entries to return
 * @return {Object} Result with recent quality reviews
 */
function getRecentQualityReviews(limit = 10) {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cacheKey = `recentQACache_${limit}`;
    const cachedData = cache.get(cacheKey);
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    // Get all quality reviews
    const reviewsResult = getAllQualityReviews();
    if (!reviewsResult.success) {
      return reviewsResult;
    }
    
    // Sort by review date (newest first) and limit the result
    const recentReviews = reviewsResult.data
      .sort((a, b) => new Date(b['Review Date']) - new Date(a['Review Date']))
      .slice(0, limit);
    
    // Enrich with team member data
    const enrichedReviews = recentReviews.map(review => {
      // Get team member details if possible
      let teamMember = { name: review['Team Member Name'] };
      const teamMemberResult = getTeamMemberById(review['Team Member ID']);
      
      if (teamMemberResult.success) {
        teamMember = {
          id: teamMemberResult.data['Team Member ID'],
          name: teamMemberResult.data['Full Name'],
          email: teamMemberResult.data['Email'],
          status: teamMemberResult.data['Status']
        };
      }
      
      return {
        id: review['Review ID'],
        interactionDate: new Date(review['Interaction Date']),
        formattedDate: Utilities.formatDate(
          new Date(review['Interaction Date']),
          Session.getScriptTimeZone(),
          'MMM d, yyyy'
        ),
        overallScore: Number(review['Overall Score']),
        interactionType: review['Interaction Type'],
        teamMember: teamMember,
        reviewer: review['Reviewer']
      };
    });
    
    const result = { success: true, data: enrichedReviews };
    
    // Cache the result for 5 minutes
    cache.put(cacheKey, JSON.stringify(result), 300);
    
    return result;
  } catch (error) {
    logError('getRecentQualityReviews', error);
    return { 
      success: false, 
      message: 'Error retrieving recent quality reviews: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 📊 Get team QA summary
 * @param {Date} startDate - Optional start date filter
 * @param {Date} endDate - Optional end date filter
 * @return {Object} Result with team QA summary
 */
function getTeamQASummary(startDate, endDate) {
  try {
    // Set default date range if not provided (last 30 days)
    if (!startDate) {
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 30);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Get all quality reviews
    const reviewsResult = getAllQualityReviews();
    if (!reviewsResult.success) {
      return reviewsResult;
    }
    
    // Filter for date range
    const reviews = reviewsResult.data.filter(review => {
      const reviewDate = new Date(review['Interaction Date']);
      return reviewDate >= startDate && reviewDate <= endDate;
    });
    
    if (reviews.length === 0) {
      return {
        success: true,
        message: 'No quality reviews found for the specified date range.',
        data: {
          averageOverallScore: 0,
          totalReviews: 0,
          reviewsPerDay: 0,
          categoryAverages: {
            opening: 0,
            riskAssessment: 0,
            communication: 0,
            support: 0,
            closure: 0
          },
          scoreDistribution: {
            excellent: 0,
            good: 0,
            average: 0,
            needsImprovement: 0,
            poor: 0
          },
          topPerformers: [],
          bottomPerformers: [],
          recentTrend: 'insufficient data'
        }
      };
    }
    
    // Calculate overall stats
    let totalOverall = 0;
    let totalOpening = 0;
    let totalRisk = 0;
    let totalCommunication = 0;
    let totalSupport = 0;
    let totalClosure = 0;
    
    // Score distribution counters
    let excellentCount = 0;
    let goodCount = 0;
    let averageCount = 0;
    let needsImprovementCount = 0;
    let poorCount = 0;
    
    // Track scores by team member
    const memberScores = {};
    
    // For trend calculation, sort reviews by date
    reviews.sort((a, b) => new Date(a['Interaction Date']) - new Date(b['Interaction Date']));
    
    // Split into weekly buckets for trend
    const weeklyData = {};
    
    reviews.forEach(review => {
      // Add to overall totals
      const overallScore = Number(review['Overall Score']) || 0;
      totalOverall += overallScore;
      totalOpening += Number(review['Opening Score']) || 0;
      totalRisk += Number(review['Risk Assessment Score']) || 0;
      totalCommunication += Number(review['Communication Score']) || 0;
      totalSupport += Number(review['Support Provided Score']) || 0;
      totalClosure += Number(review['Closure Score']) || 0;
      
      // Add to score distribution
      if (overallScore >= 90) {
        excellentCount++;
      } else if (overallScore >= 80) {
        goodCount++;
      } else if (overallScore >= 70) {
        averageCount++;
      } else if (overallScore >= 60) {
        needsImprovementCount++;
      } else {
        poorCount++;
      }
      
      // Track by team member
      const memberId = review['Team Member ID'];
      if (!memberScores[memberId]) {
        memberScores[memberId] = {
          id: memberId,
          name: review['Team Member Name'],
          scores: [],
          totalScore: 0,
          reviewCount: 0
        };
      }
      
      memberScores[memberId].scores.push(overallScore);
      memberScores[memberId].totalScore += overallScore;
      memberScores[memberId].reviewCount++;
      
      // Track weekly trends
      const reviewDate = new Date(review['Interaction Date']);
      const weekNumber = getISOWeekNumber(reviewDate);
      const yearWeekKey = `${reviewDate.getFullYear()}-W${weekNumber}`;
      
      if (!weeklyData[yearWeekKey]) {
        weeklyData[yearWeekKey] = {
          week: weekNumber,
          year: reviewDate.getFullYear(),
          date: reviewDate,
          totalScore: 0,
          reviewCount: 0,
          label: `Week ${weekNumber}`
        };
      }
      
      weeklyData[yearWeekKey].totalScore += overallScore;
      weeklyData[yearWeekKey].reviewCount++;
    });
    
    // Calculate averages
    const avgOverall = totalOverall / reviews.length;
    const avgOpening = totalOpening / reviews.length;
    const avgRisk = totalRisk / reviews.length;
    const avgCommunication = totalCommunication / reviews.length;
    const avgSupport = totalSupport / reviews.length;
    const avgClosure = totalClosure / reviews.length;
    
    // Calculate days in the date range
    const daysInRange = Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));
    const reviewsPerDay = daysInRange > 0 ? reviews.length / daysInRange : 0;
    
    // Calculate average score by team member
    Object.values(memberScores).forEach(member => {
      member.averageScore = member.totalScore / member.reviewCount;
    });
    
    // Sort by average score
    const sortedMembers = Object.values(memberScores)
      .filter(m => m.reviewCount >= 3) // Only include members with enough reviews
      .sort((a, b) => b.averageScore - a.averageScore);
    
    // Get top and bottom performers
    const topPerformers = sortedMembers.slice(0, 5).map(m => ({
      id: m.id,
      name: m.name,
      averageScore: m.averageScore,
      reviewCount: m.reviewCount
    }));
    
    const bottomPerformers = sortedMembers.slice(-5).reverse().map(m => ({
      id: m.id,
      name: m.name,
      averageScore: m.averageScore,
      reviewCount: m.reviewCount
    }));
    
    // Process weekly trends
    const weeklyTrends = Object.keys(weeklyData)
      .sort() // Sort chronologically
      .map(key => {
        const week = weeklyData[key];
        return {
          label: week.label,
          date: week.date,
          displayDate: Utilities.formatDate(week.date, Session.getScriptTimeZone(), 'MMM d'),
          averageScore: week.totalScore / week.reviewCount
        };
      });
    
    // Calculate trend
    let trend = 'steady';
    if (weeklyTrends.length >= 2) {
      const firstWeekScore = weeklyTrends[0].averageScore;
      const lastWeekScore = weeklyTrends[weeklyTrends.length - 1].averageScore;
      
      const difference = lastWeekScore - firstWeekScore;
      
      if (difference >= 3) {
        trend = 'improving';
      } else if (difference <= -3) {
        trend = 'declining';
      }
    } else {
      trend = 'insufficient data';
    }
    
    return {
      success: true,
      data: {
        averageOverallScore: avgOverall,
        totalReviews: reviews.length,
        reviewsPerDay: reviewsPerDay,
        categoryAverages: {
          opening: avgOpening,
          riskAssessment: avgRisk,
          communication: avgCommunication,
          support: avgSupport,
          closure: avgClosure
        },
        scoreDistribution: {
          excellent: excellentCount,
          good: goodCount,
          average: averageCount,
          needsImprovement: needsImprovementCount,
          poor: poorCount
        },
        topPerformers: topPerformers,
        bottomPerformers: bottomPerformers,
        weeklyTrends: weeklyTrends,
        recentTrend: trend,
        dateRange: {
          start: startDate,
          end: endDate,
          formattedStart: Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'MMM d, yyyy'),
          formattedEnd: Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'MMM d, yyyy')
        }
      }
    };
  } catch (error) {
    logError('getTeamQASummary', error);
    return { 
      success: false, 
      message: 'Error generating team QA summary: ' + error.toString()
    };
  }
}

/**
 * 📋 Get QA review template
 * @param {String} teamMemberId - Team member ID
 * @return {Object} QA review template
 */
function getQAReviewTemplate(teamMemberId) {
  try {
    if (!teamMemberId) {
      return { 
        success: false, 
        message: 'Team member ID is required'
      };
    }
    
    // Get team member details
    const teamMemberResult = getTeamMemberById(teamMemberId);
    if (!teamMemberResult.success) {
      return { 
        success: false, 
        message: 'Invalid team member: ' + teamMemberResult.message
      };
    }
    
    const teamMember = teamMemberResult.data;
    
    // Get previous reviews for this team member (limit to last 3)
    const previousReviewsResult = getTeamMemberQualityReviews(teamMemberId);
    let previousReviews = [];
    
    if (previousReviewsResult.success) {
      previousReviews = previousReviewsResult.data.slice(0, 3);
    }
    
    // Create template based on previous reviews if available
    let previousStrengths = '';
    let previousImprovements = '';
    
    if (previousReviews.length > 0) {
      // Extract common strengths from previous reviews
      const strengthsSet = new Set();
      previousReviews.forEach(review => {
        if (review['Strengths']) {
          review['Strengths'].split('\n').forEach(strength => {
            const cleanStrength = strength.trim();
            if (cleanStrength) {
              strengthsSet.add(cleanStrength);
            }
          });
        }
      });
      
      // Extract common areas for improvement from previous reviews
      const improvementsSet = new Set();
      previousReviews.forEach(review => {
        if (review['Areas for Improvement']) {
          review['Areas for Improvement'].split('\n').forEach(area => {
            const cleanArea = area.trim();
            if (cleanArea) {
              improvementsSet.add(cleanArea);
            }
          });
        }
      });
      
      // Format previous strengths and improvements
      if (strengthsSet.size > 0) {
        previousStrengths = 'Previous strengths:\n- ' + Array.from(strengthsSet).join('\n- ') + '\n\n';
      }
      
      if (improvementsSet.size > 0) {
        previousImprovements = 'Previous areas for improvement:\n- ' + Array.from(improvementsSet).join('\n- ') + '\n\n';
      }
    }
    
    // Create template with default sections
    const template = {
      teamMemberId: teamMemberId,
      teamMemberName: teamMember['Full Name'],
      interactionDate: new Date(),
      interactionId: '',
      interactionType: 'Call',
      overallScore: 0,
      openingScore: 0,
      riskScore: 0,
      communicationScore: 0,
      supportScore: 0,
      closureScore: 0,
      strengths: previousStrengths + 'New strengths:',
      areasForImprovement: previousImprovements + 'New areas for improvement:',
      reviewer: Session.getEffectiveUser().getEmail(),
      reviewDate: new Date(),
      notes: ''
    };
    
    return { 
      success: true, 
      data: template
    };
  } catch (error) {
    logError('getQAReviewTemplate', error);
    return { 
      success: false, 
      message: 'Error creating QA review template: ' + error.toString()
    };
  }
}

/**
 * 📧 Send QA notification email
 * @param {String} reviewId - ID of the quality review
 * @return {Object} Result with success flag
 */
function sendQANotificationEmail(reviewId) {
  try {
    if (!reviewId) {
      return { 
        success: false, 
        message: 'Review ID is required'
      };
    }
    
    // Get review data
    const reviewResult = getQualityReviewById(reviewId);
    if (!reviewResult.success) {
      return reviewResult;
    }
    
    const review = reviewResult.data;
    const teamMember = reviewResult.teamMember;
    
    // Check if team member has email
    if (!teamMember.email) {
      return { 
        success: false, 
        message: 'Team member email not found'
      };
    }
    
    // Format dates
    const interactionDate = new Date(review['Interaction Date']);
    const formattedDate = Utilities.formatDate(interactionDate, Session.getScriptTimeZone(), 'MMMM d, yyyy');
    
    // Create HTML email with nice formatting
    const htmlBody = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; color: #333;">
        <div style="background-color: #5540af; color: white; padding: 15px; border-radius: 5px 5px 0 0;">
          <h2 style="margin: 0;">New Quality Review</h2>
          <p style="margin: 5px 0 0;">Interaction on ${formattedDate}</p>
        </div>
        
        <div style="border: 1px solid #ddd; border-top: none; padding: 20px; border-radius: 0 0 5px 5px;">
          <p>Hello ${teamMember.name},</p>
          
          <p>A new quality review has been completed for your interaction on ${formattedDate}.</p>
          
          <div style="margin: 20px 0; background-color: #f5f5f5; border-radius: 5px; padding: 15px; text-align: center;">
            <h3 style="margin-top: 0; color: #5540af;">Overall Score: ${review['Overall Score']}%</h3>
            
            <table style="width: 100%; margin-top: 15px; border-collapse: collapse;">
              <tr>
                <td style="padding: 8px; text-align: left; width: 50%;">Opening</td>
                <td style="padding: 8px; text-align: right; width: 50%;">${review['Opening Score']}%</td>
              </tr>
              <tr>
                <td style="padding: 8px; text-align: left;">Risk Assessment</td>
                <td style="padding: 8px; text-align: right;">${review['Risk Assessment Score']}%</td>
              </tr>
              <tr>
                <td style="padding: 8px; text-align: left;">Communication</td>
                <td style="padding: 8px; text-align: right;">${review['Communication Score']}%</td>
              </tr>
              <tr>
                <td style="padding: 8px; text-align: left;">Support Provided</td>
                <td style="padding: 8px; text-align: right;">${review['Support Provided Score']}%</td>
              </tr>
              <tr>
                <td style="padding: 8px; text-align: left;">Closure</td>
                <td style="padding: 8px; text-align: right;">${review['Closure Score']}%</td>
              </tr>
            </table>
          </div>
          
          ${review['Strengths'] ? `
            <div style="margin: 20px 0;">
              <h3 style="color: #5540af; font-size: 16px;">Strengths</h3>
              <p style="white-space: pre-line;">${review['Strengths']}</p>
            </div>
          ` : ''}
          
          ${review['Areas for Improvement'] ? `
            <div style="margin: 20px 0;">
              <h3 style="color: #5540af; font-size: 16px;">Areas for Improvement</h3>
              <p style="white-space: pre-line;">${review['Areas for Improvement']}</p>
            </div>
          ` : ''}
          
          ${review['Notes'] ? `
            <div style="margin: 20px 0;">
              <h3 style="color: #5540af; font-size: 16px;">Additional Notes</h3>
              <p style="white-space: pre-line;">${review['Notes']}</p>
            </div>
          ` : ''}
          
          <div style="margin-top: 25px; text-align: center;">
            <a href="${ScriptApp.getService().getUrl()}?page=qa" style="background-color: #5540af; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; font-weight: bold;">View All Reviews</a>
          </div>
          
          <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 14px; color: #777; text-align: center;">
            <p>This is an automated notification from Team Lead Dashboard.</p>
            <p>Reviewer: ${review['Reviewer'] || 'System'}</p>
            <p>Generated on ${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'MMMM d, yyyy, h:mm a')}</p>
          </div>
        </div>
      </div>
    `;
    
    // Create plain text version
    const plainText = `
New Quality Review for ${teamMember.name}
Interaction on ${formattedDate}

Overall Score: ${review['Overall Score']}%

Category Scores:
- Opening: ${review['Opening Score']}%
- Risk Assessment: ${review['Risk Assessment Score']}%
- Communication: ${review['Communication Score']}%
- Support Provided: ${review['Support Provided Score']}%
- Closure: ${review['Closure Score']}%

${review['Strengths'] ? `Strengths:\n${review['Strengths']}\n\n` : ''}
${review['Areas for Improvement'] ? `Areas for Improvement:\n${review['Areas for Improvement']}\n\n` : ''}
${review['Notes'] ? `Additional Notes:\n${review['Notes']}\n\n` : ''}

Reviewer: ${review['Reviewer'] || 'System'}
Generated on ${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'MMMM d, yyyy, h:mm a')}
`;
    
    // Send the email
    GmailApp.sendEmail(
      teamMember.email,
      `Quality Review for Interaction on ${formattedDate}`,
      plainText,
      {
        htmlBody: htmlBody,
        name: 'Team Lead Dashboard',
        cc: review['Reviewer'] // Copy the reviewer
      }
    );
    
    // Update the review to indicate notification was sent
    updateQualityReview({
      reviewId: reviewId,
      notes: (review['Notes'] ? review['Notes'] + '\n\n' : '') + `Email notification sent to ${teamMember.email} on ${new Date().toLocaleString()}`
    });
    
    return { 
      success: true, 
      message: `QA notification sent to ${teamMember.name} at ${teamMember.email}`
    };
  } catch (error) {
    logError('sendQANotificationEmail', error);
    return { 
      success: false, 
      message: 'Error sending QA notification: ' + error.toString()
    };
  }
}

/**
 * 📋 Get bulk QA import template
 * @return {Object} Template for bulk QA import
 */
function getBulkQAImportTemplate() {
  try {
    // Get all active team members
    const teamMembersResult = getActiveTeamMembers();
    if (!teamMembersResult.success) {
      return { 
        success: false, 
        message: 'Failed to retrieve team members: ' + teamMembersResult.message
      };
    }
    
    const today = new Date();
    const formattedDate = Utilities.formatDate(today, Session.getScriptTimeZone(), 'yyyy-MM-dd');
    
    // Create template rows for each team member
    const templateRows = teamMembersResult.data.map(member => ({
      teamMemberId: member['Team Member ID'],
      teamMemberName: member['Full Name'],
      interactionDate: formattedDate,
      interactionId: '',
      interactionType: 'Call',
      overallScore: '',
      openingScore: '',
      riskScore: '',
      communicationScore: '',
      supportScore: '',
      closureScore: '',
      strengths: '',
      areasForImprovement: '',
      notes: ''
    }));
    
    return { 
      success: true, 
      data: templateRows
    };
  } catch (error) {
    logError('getBulkQAImportTemplate', error);
    return { 
      success: false, 
      message: 'Error creating bulk QA import template: ' + error.toString()
    };
  }
}

/**
 * 📤 Import bulk QA data
 * @param {Array} qaData - Array of QA data objects
 * @return {Object} Result with success flag and counts
 */
function importBulkQA(qaData) {
  try {
    if (!Array.isArray(qaData) || qaData.length === 0) {
      return { 
        success: false, 
        message: 'No QA data provided'
      };
    }
    
    let successCount = 0;
    let errorCount = 0;
    const errors = [];
    
    // Process each QA entry
    qaData.forEach((entry, index) => {
      try {
        // Skip entries without required data
        if (!entry.teamMemberId || !entry.interactionDate || 
            entry.overallScore === '' || entry.openingScore === '' || 
            entry.riskScore === '' || entry.communicationScore === '' ||
            entry.supportScore === '' || entry.closureScore === '') {
          errorCount++;
          errors.push(`Row ${index + 1}: Missing required fields`);
          return;
        }
        
        // Add QA entry
        const result = addQualityReview({
          teamMemberId: entry.teamMemberId,
          interactionDate: entry.interactionDate,
          interactionId: entry.interactionId || '',
          interactionType: entry.interactionType || 'Call',
          overallScore: Number(entry.overallScore),
          openingScore: Number(entry.openingScore),
          riskScore: Number(entry.riskScore),
          communicationScore: Number(entry.communicationScore),
          supportScore: Number(entry.supportScore),
          closureScore: Number(entry.closureScore),
          strengths: entry.strengths || '',
          areasForImprovement: entry.areasForImprovement || '',
          notes: entry.notes || '',
          reviewer: Session.getEffectiveUser().getEmail()
        });
        
        if (result.success) {
          successCount++;
        } else {
          errorCount++;
          errors.push(`Row ${index + 1}: ${result.message}`);
        }
      } catch (entryError) {
        errorCount++;
        errors.push(`Row ${index + 1}: ${entryError.toString()}`);
      }
    });
    
    // Clear cache once after all imports
    clearQACache();
    
    return { 
      success: true, 
      message: `Successfully imported ${successCount} QA reviews with ${errorCount} errors`,
      data: {
        successCount: successCount,
        errorCount: errorCount,
        errors: errors
      }
    };
  } catch (error) {
    logError('importBulkQA', error);
    return { 
      success: false, 
      message: 'Error importing QA data: ' + error.toString()
    };
  }
}

/**
 * 📊 Generate QA report for a team member
 * @param {String} teamMemberId - Team member ID
 * @param {Date} startDate - Optional start date
 * @param {Date} endDate - Optional end date
 * @return {Object} Formatted QA report data
 */
function generateTeamMemberQAReport(teamMemberId, startDate, endDate) {
  try {
    if (!teamMemberId) {
      return { 
        success: false, 
        message: 'Team member ID is required'
      };
    }
    
    // Set default date range if not provided (last 90 days)
    if (!startDate) {
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 90);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Get team member data
    const teamMemberResult = getTeamMemberById(teamMemberId);
    if (!teamMemberResult.success) {
      return teamMemberResult;
    }
    
    const teamMember = teamMemberResult.data;
    
    // Get team member reviews
    const reviewsResult = getTeamMemberQualityReviews(teamMemberId, startDate, endDate);
    if (!reviewsResult.success) {
      return reviewsResult;
    }
    
    const reviews = reviewsResult.data;
    
    if (reviews.length === 0) {
      return {
        success: true,
        message: 'No quality reviews found for this team member in the specified date range.',
        data: {
          teamMember: {
            id: teamMember['Team Member ID'],
            name: teamMember['Full Name'],
            role: teamMember['Role'],
            status: teamMember['Status']
          },
          summary: {
            overallScore: null,
            totalReviews: 0,
            reviewTrend: 'insufficient data'
          },
          reviews: [],
          dateRange: {
            start: startDate,
            end: endDate,
            formattedStart: Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'MMM d, yyyy'),
            formattedEnd: Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'MMM d, yyyy')
          }
        }
      };
    }
    
    // Calculate average scores
    let totalOverall = 0;
    let totalOpening = 0;
    let totalRisk = 0;
    let totalCommunication = 0;
    let totalSupport = 0;
    let totalClosure = 0;
    
    reviews.forEach(review => {
      totalOverall += Number(review['Overall Score']) || 0;
      totalOpening += Number(review['Opening Score']) || 0;
      totalRisk += Number(review['Risk Assessment Score']) || 0;
      totalCommunication += Number(review['Communication Score']) || 0;
      totalSupport += Number(review['Support Provided Score']) || 0;
      totalClosure += Number(review['Closure Score']) || 0;
    });
    
    const avgOverall = totalOverall / reviews.length;
    const avgOpening = totalOpening / reviews.length;
    const avgRisk = totalRisk / reviews.length;
    const avgCommunication = totalCommunication / reviews.length;
    const avgSupport = totalSupport / reviews.length;
    const avgClosure = totalClosure / reviews.length;
    
    // Calculate trend
    let trend = 'stable';
    
    if (reviews.length >= 3) {
      // Sort by date
      const sortedReviews = [...reviews].sort(
        (a, b) => new Date(a['Interaction Date']) - new Date(b['Interaction Date'])
      );
      
      // Split into two halves for comparison
      const midpoint = Math.floor(sortedReviews.length / 2);
      const firstHalf = sortedReviews.slice(0, midpoint);
      const secondHalf = sortedReviews.slice(midpoint);
      
      // Calculate average score for each half
      const firstHalfAvg = firstHalf.reduce(
        (sum, review) => sum + (Number(review['Overall Score']) || 0), 0
      ) / firstHalf.length;
      
      const secondHalfAvg = secondHalf.reduce(
        (sum, review) => sum + (Number(review['Overall Score']) || 0), 0
      ) / secondHalf.length;
      
      const difference = secondHalfAvg - firstHalfAvg;
      
      if (difference >= 5) {
        trend = 'improving';
      } else if (difference <= -5) {
        trend = 'declining';
      }
    } else {
      trend = 'insufficient data';
    }
    
    // Format reviews for display
    const formattedReviews = reviews.map(review => ({
      id: review['Review ID'],
      interactionDate: new Date(review['Interaction Date']),
      formattedDate: Utilities.formatDate(
        new Date(review['Interaction Date']), 
        Session.getScriptTimeZone(), 
        'MMM d, yyyy'
      ),
      interactionType: review['Interaction Type'],
      interactionId: review['Interaction ID'],
      scores: {
        overall: Number(review['Overall Score']),
        opening: Number(review['Opening Score']),
        risk: Number(review['Risk Assessment Score']),
        communication: Number(review['Communication Score']),
        support: Number(review['Support Provided Score']),
        closure: Number(review['Closure Score'])
      },
      strengths: review['Strengths'],
      areasForImprovement: review['Areas for Improvement'],
      reviewer: review['Reviewer'],
            notes: review['Notes']
    }));
    
    // Get team member comprehensive stats
    const qaStats = getTeamMemberQAStats(teamMemberId, startDate, endDate);
    
    return {
      success: true,
      data: {
        teamMember: {
          id: teamMember['Team Member ID'],
          name: teamMember['Full Name'],
          role: teamMember['Role'] || 'Team Member',
          status: teamMember['Status'],
          email: teamMember['Email']
        },
        summary: {
          overallScore: avgOverall,
          categoryScores: {
            opening: avgOpening,
            riskAssessment: avgRisk,
            communication: avgCommunication,
            support: avgSupport,
            closure: avgClosure
          },
          totalReviews: reviews.length,
          reviewTrend: trend,
          strengths: qaStats.success ? qaStats.data.strengths : [],
          improvementAreas: qaStats.success ? qaStats.data.improvementAreas : []
        },
        reviews: formattedReviews,
        dateRange: {
          start: startDate,
          end: endDate,
          formattedStart: Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'MMM d, yyyy'),
          formattedEnd: Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'MMM d, yyyy')
        }
      }
    };
  } catch (error) {
    logError('generateTeamMemberQAReport', error);
    return { 
      success: false, 
      message: 'Error generating QA report: ' + error.toString()
    };
  }
}

/**
 * 📊 Find team members needing QA reviews
 * @param {Number} daysThreshold - Number of days since last review to consider due
 * @return {Object} Team members who need reviews
 */
function findTeamMembersNeedingQAReviews(daysThreshold = 30) {
  try {
    // Get all active team members
    const teamMembersResult = getActiveTeamMembers();
    if (!teamMembersResult.success) {
      return teamMembersResult;
    }
    
    // Get all quality reviews
    const reviewsResult = getAllQualityReviews();
    if (!reviewsResult.success) {
      return reviewsResult;
    }
    
    const now = new Date();
    const threshold = new Date();
    threshold.setDate(threshold.getDate() - daysThreshold);
    
    // Group reviews by team member
    const reviewsByMember = {};
    
    reviewsResult.data.forEach(review => {
      const memberId = review['Team Member ID'];
      if (!reviewsByMember[memberId]) {
        reviewsByMember[memberId] = [];
      }
      reviewsByMember[memberId].push({
        date: new Date(review['Interaction Date']),
        score: Number(review['Overall Score'])
      });
    });
    
    // Find members who haven't had a recent review
    const needingReviews = teamMembersResult.data
      .filter(member => {
        // If inactive, don't include
        if (member['Status'] !== 'Active' && member['Status'] !== 'Training') {
          return false;
        }
        
        const memberReviews = reviewsByMember[member['Team Member ID']] || [];
        
        // Sort by date (newest first)
        memberReviews.sort((a, b) => b.date - a.date);
        
        // Check if member has had a review within threshold
        return memberReviews.length === 0 || memberReviews[0].date < threshold;
      })
      .map(member => {
        const memberReviews = reviewsByMember[member['Team Member ID']] || [];
        memberReviews.sort((a, b) => b.date - a.date);
        
        return {
          id: member['Team Member ID'],
          name: member['Full Name'],
          email: member['Email'],
          status: member['Status'],
          lastReviewDate: memberReviews.length > 0 ? memberReviews[0].date : null,
          daysSinceLastReview: memberReviews.length > 0 ? 
            Math.floor((now - memberReviews[0].date) / (1000 * 60 * 60 * 24)) : null,
          totalReviews: memberReviews.length
        };
      })
      .sort((a, b) => {
        // Sort by: never had a review first, then by days since last review
        if (!a.lastReviewDate && !b.lastReviewDate) return 0;
        if (!a.lastReviewDate) return -1;
        if (!b.lastReviewDate) return 1;
        return b.daysSinceLastReview - a.daysSinceLastReview;
      });
    
    return { 
      success: true, 
      data: needingReviews
    };
  } catch (error) {
    logError('findTeamMembersNeedingQAReviews', error);
    return { 
      success: false, 
      message: 'Error finding team members needing QA reviews: ' + error.toString(),
      data: []
    };
  }
}

/**
 * 📧 Generate and send QA report email
 * @param {String} teamMemberId - Team member ID
 * @param {Date} startDate - Start date for report
 * @param {Date} endDate - End date for report
 * @param {String} recipientEmail - Email recipient (if not provided, uses team member's email)
 * @return {Object} Result with success flag
 */
function sendQAReportEmail(teamMemberId, startDate, endDate, recipientEmail) {
  try {
    if (!teamMemberId) {
      return { 
        success: false, 
        message: 'Team member ID is required'
      };
    }
    
    // Set default date range if not provided (last 90 days)
    if (!startDate) {
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 90);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Get QA report data
    const reportResult = generateTeamMemberQAReport(teamMemberId, startDate, endDate);
    if (!reportResult.success) {
      return reportResult;
    }
    
    const report = reportResult.data;
    
    // If no recipient provided, use team member's email
    if (!recipientEmail && report.teamMember.email) {
      recipientEmail = report.teamMember.email;
    }
    
    // If still no recipient, use current user
    if (!recipientEmail) {
      recipientEmail = Session.getEffectiveUser().getEmail();
    }
    
    // Format dates
    const startDateFormatted = Utilities.formatDate(startDate, Session.getScriptTimeZone(), 'MMMM d, yyyy');
    const endDateFormatted = Utilities.formatDate(endDate, Session.getScriptTimeZone(), 'MMMM d, yyyy');
    
    // Format metrics
    const formattedMetrics = {
      overallScore: report.summary.overallScore.toFixed(1) + '%',
      opening: report.summary.categoryScores.opening.toFixed(1) + '%',
      riskAssessment: report.summary.categoryScores.riskAssessment.toFixed(1) + '%',
      communication: report.summary.categoryScores.communication.toFixed(1) + '%',
      support: report.summary.categoryScores.support.toFixed(1) + '%',
      closure: report.summary.categoryScores.closure.toFixed(1) + '%',
      totalReviews: report.summary.totalReviews
    };
    
    // Create HTML email with nice formatting
    const htmlBody = `
      <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; color: #333;">
        <div style="background: linear-gradient(90deg, #5540af, #5671cc); color: white; padding: 20px; border-radius: 6px 6px 0 0; text-align: center;">
          <h1 style="margin: 0; font-size: 24px;">Quality Assurance Report</h1>
          <p style="margin: 5px 0 0; font-size: 18px;">${report.teamMember.name}</p>
          <p style="margin: 8px 0 0; font-size: 16px;">${startDateFormatted} - ${endDateFormatted}</p>
        </div>
        
        <div style="border: 1px solid #e0e0e0; border-top: none; padding: 20px; border-radius: 0 0 6px 6px;">
          <div style="margin-bottom: 30px;">
            <h2 style="margin-top: 0; color: #5540af; font-size: 20px; border-bottom: 2px solid #e0e0e0; padding-bottom: 10px;">QA Summary</h2>
            
            <table style="width: 100%; border-collapse: collapse; margin-top: 15px;">
              <tr>
                <td style="width: 50%; padding: 12px; vertical-align: top;">
                  <div style="background-color: #f8f9fb; border-radius: 6px; padding: 15px;">
                    <h3 style="margin-top: 0; margin-bottom: 15px; color: #5540af; font-size: 16px;">Overall Performance</h3>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                      <div style="font-weight: 500;">Overall Score:</div>
                      <div>${formattedMetrics.overallScore}</div>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                      <div style="font-weight: 500;">Reviews Analyzed:</div>
                      <div>${formattedMetrics.totalReviews}</div>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                      <div style="font-weight: 500;">Performance Trend:</div>
                      <div>${report.summary.reviewTrend.charAt(0).toUpperCase() + report.summary.reviewTrend.slice(1)}</div>
                    </div>
                  </div>
                </td>
                <td style="width: 50%; padding: 12px; vertical-align: top;">
                  <div style="background-color: #f8f9fb; border-radius: 6px; padding: 15px;">
                    <h3 style="margin-top: 0; margin-bottom: 15px; color: #5540af; font-size: 16px;">Category Scores</h3>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                      <div style="font-weight: 500;">Opening:</div>
                      <div>${formattedMetrics.opening}</div>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                      <div style="font-weight: 500;">Risk Assessment:</div>
                      <div>${formattedMetrics.riskAssessment}</div>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                      <div style="font-weight: 500;">Communication:</div>
                      <div>${formattedMetrics.communication}</div>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                      <div style="font-weight: 500;">Support Provided:</div>
                      <div>${formattedMetrics.support}</div>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                      <div style="font-weight: 500;">Closure:</div>
                      <div>${formattedMetrics.closure}</div>
                    </div>
                  </div>
                </td>
              </tr>
            </table>
          </div>
          
          ${report.summary.strengths && report.summary.strengths.length > 0 ? `
          <div style="margin-bottom: 30px;">
            <h2 style="margin-top: 0; color: #5540af; font-size: 20px; border-bottom: 2px solid #e0e0e0; padding-bottom: 10px;">Key Strengths</h2>
            <ul style="padding-left: 20px;">
              ${report.summary.strengths.map(strength => `<li style="margin-bottom: 10px;">${strength}</li>`).join('')}
            </ul>
          </div>
          ` : ''}
          
          ${report.summary.improvementAreas && report.summary.improvementAreas.length > 0 ? `
          <div style="margin-bottom: 30px;">
            <h2 style="margin-top: 0; color: #5540af; font-size: 20px; border-bottom: 2px solid #e0e0e0; padding-bottom: 10px;">Areas for Improvement</h2>
            <ul style="padding-left: 20px;">
              ${report.summary.improvementAreas.map(area => `<li style="margin-bottom: 10px;">${area}</li>`).join('')}
            </ul>
          </div>
          ` : ''}
          
          <div style="margin-bottom: 30px;">
            <h2 style="margin-top: 0; color: #5540af; font-size: 20px; border-bottom: 2px solid #e0e0e0; padding-bottom: 10px;">Recent Reviews</h2>
            
            ${report.reviews.slice(0, 5).map(review => `
              <div style="margin-bottom: 20px; padding: 15px; border: 1px solid #e0e0e0; border-radius: 5px;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                  <div style="font-weight: bold;">${review.formattedDate}</div>
                  <div style="font-weight: bold;">${review.scores.overall}%</div>
                </div>
                <div style="font-size: 14px; color: #666; margin-bottom: 10px;">
                  ${review.interactionType}${review.interactionId ? ' - ' + review.interactionId : ''}
                </div>
                ${review.strengths ? `
                <div style="margin-top: 10px;">
                  <div style="font-weight: 500; margin-bottom: 5px;">Strengths:</div>
                  <div style="padding-left: 10px; font-size: 14px;">${review.strengths.split('\n').join('<br>')}</div>
                </div>
                ` : ''}
                ${review.areasForImprovement ? `
                <div style="margin-top: 10px;">
                  <div style="font-weight: 500; margin-bottom: 5px;">Areas for Improvement:</div>
                  <div style="padding-left: 10px; font-size: 14px;">${review.areasForImprovement.split('\n').join('<br>')}</div>
                </div>
                ` : ''}
              </div>
            `).join('')}
          </div>
          
          <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
            <p style="font-size: 14px; color: #666;">This is an automated report generated by Team Lead Dashboard.</p>
            <p style="font-size: 14px; color: #666;">Generated on ${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'MMMM d, yyyy, h:mm a')}</p>
          </div>
        </div>
      </div>
    `;
    
    // Create plain text version
    const plainText = `
Quality Assurance Report for ${report.teamMember.name}
${startDateFormatted} - ${endDateFormatted}

QA SUMMARY:
Overall Score: ${formattedMetrics.overallScore}
Total Reviews: ${formattedMetrics.totalReviews}
Performance Trend: ${report.summary.reviewTrend.charAt(0).toUpperCase() + report.summary.reviewTrend.slice(1)}

CATEGORY SCORES:
- Opening: ${formattedMetrics.opening}
- Risk Assessment: ${formattedMetrics.riskAssessment}
- Communication: ${formattedMetrics.communication}
- Support Provided: ${formattedMetrics.support}
- Closure: ${formattedMetrics.closure}

${report.summary.strengths && report.summary.strengths.length > 0 ? `
KEY STRENGTHS:
${report.summary.strengths.map(strength => `- ${strength}`).join('\n')}
` : ''}

${report.summary.improvementAreas && report.summary.improvementAreas.length > 0 ? `
AREAS FOR IMPROVEMENT:
${report.summary.improvementAreas.map(area => `- ${area}`).join('\n')}
` : ''}

This is an automated report generated by Team Lead Dashboard.
Generated on ${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'MMMM d, yyyy, h:mm a')}
`;
    
    // Send the email
    GmailApp.sendEmail(
      recipientEmail,
      `QA Report for ${report.teamMember.name}: ${startDateFormatted} - ${endDateFormatted}`,
      plainText,
      {
        htmlBody: htmlBody,
        name: 'Team Lead Dashboard'
      }
    );
    
    return { 
      success: true, 
      message: `QA report sent to ${recipientEmail}`
    };
  } catch (error) {
    logError('sendQAReportEmail', error);
    return { 
      success: false, 
      message: 'Error sending QA report: ' + error.toString()
    };
  }
}

/**
 * 📅 Get ISO week number for a date
 * Helper function used by other QA functions
 * @param {Date} date - Date to get week number for
 * @return {Number} ISO week number
 */
function getISOWeekNumber(date) {
  const d = new Date(date);
  d.setHours(0, 0, 0, 0);
  // Thursday in current week decides the year
  d.setDate(d.getDate() + 3 - (d.getDay() + 6) % 7);
  // January 4 is always in week 1
  const week1 = new Date(d.getFullYear(), 0, 4);
  // Adjust to Thursday in week 1 and count number of weeks from date to week1
  return 1 + Math.round(((d.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
}
/**
 * 👥 Get all team members
 * @return {Object} Result with team members data
 */
function getAllTeamMembers() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!sheet) {
      return {
        success: false,
        message: 'Team Members sheet not found. Please run initialization.',
        data: []
      };
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return { 
        success: true, 
        message: 'No team members found.', 
        data: [] 
      };
    }
    
    const data = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    const teamMembers = data
      .filter(row => row[0]) // Filter out empty rows
      .map(row => {
        const member = {};
        headers.forEach((header, index) => {
          member[header] = row[index];
        });
        return member;
      });
    
    return { 
      success: true, 
      data: teamMembers 
    };
  } catch (error) {
    logError('getAllTeamMembers', error);
    return { 
      success: false, 
      message: 'Error retrieving team members: ' + error.toString(),
      data: []
    };
  }
}





<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Time Tracking Reports</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Category colors */
      --primary-category: #5540af;
      --team-meeting: #0ea5e9;
      --one-on-one: #10b981;
      --priority-coaching: #f59e0b;
      --manager-meeting: #8b5cf6;
      --qa-review: #ec4899;
      --shadow-session: #14b8a6;
      --other-category: #64748b;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .filters {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 16px;
      margin-bottom: 24px;
    }
    
    .filter-group {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }
    
    .filter-label {
      font-weight: 500;
      color: var(--text-secondary);
    }
    
    .filter-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .filter-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-icon {
      padding: 8px;
      border-radius: 50%;
    }
    
    .chart-container {
      height: 400px;
      position: relative;
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 16px;
      margin-bottom: 24px;
    }
    
    .stat-card {
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-sm);
      padding: 20px;
      text-align: center;
      border-top: 4px solid var(--primary-color);
      transition: transform var(--transition-fast), box-shadow var(--transition-fast);
    }
    
    .stat-card:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .stat-value {
      font-family: 'Manrope', sans-serif;
      font-size: 28px;
      font-weight: 700;
      margin-bottom: 8px;
    }
    
    .stat-label {
      color: var(--text-secondary);
      font-size: 14px;
    }
    
    .stat-card.primary { border-top-color: var(--primary-category); }
    .stat-card.team-meeting { border-top-color: var(--team-meeting); }
    .stat-card.one-on-one { border-top-color: var(--one-on-one); }
    .stat-card.priority-coaching { border-top-color: var(--priority-coaching); }
    .stat-card.manager-meeting { border-top-color: var(--manager-meeting); }
    .stat-card.qa-review { border-top-color: var(--qa-review); }
    .stat-card.shadow-session { border-top-color: var(--shadow-session); }
    .stat-card.other { border-top-color: var(--other-category); }
    
    .sessions-list {
      margin-top: 32px;
    }
    
    .session-item {
      display: flex;
      align-items: center;
      padding: 16px;
      border-bottom: 1px solid var(--border-light);
      transition: background-color var(--transition-fast);
    }
    
    .session-item:hover {
      background-color: var(--bg-secondary);
    }
    
    .session-date {
      width: 120px;
      font-weight: 500;
    }
    
    .session-duration {
      width: 100px;
      color: var(--text-secondary);
    }
    
    .session-metrics {
      flex: 1;
      display: flex;
      gap: 16px;
    }
    
    .session-metric {
      display: flex;
      align-items: center;
      gap: 4px;
      color: var(--text-secondary);
      font-size: 13px;
      padding: 2px 8px;
      border-radius: 12px;
      background-color: var(--bg-secondary);
    }
    
    .session-actions {
      display: flex;
      gap: 8px;
    }
    
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 64px 24px;
      text-align: center;
    }
    
    .empty-state-icon {
      font-size: 64px;
      margin-bottom: 24px;
      color: var(--text-tertiary);
      opacity: 0.5;
    }
    
    .empty-state-title {
      font-family: 'Manrope', sans-serif;
      font-size: 20px;
      font-weight: 600;
      margin-bottom: 8px;
    }
    
    .empty-state-description {
      color: var(--text-secondary);
      margin-bottom: 24px;
      max-width: 500px;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.2);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(15, 23, 42, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .modal-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .modal {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      overflow-y: auto;
      transform: translateY(20px);
      opacity: 0;
      transition: transform var(--transition-normal), opacity var(--transition-normal);
    }
    
    .modal-overlay.visible .modal {
      transform: translateY(0);
      opacity: 1;
    }
    
    .modal-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .modal-title {
      font-weight: 600;
      font-size: 18px;
    }
    
    .modal-close {
      background: none;
      border: none;
      cursor: pointer;
      color: var(--text-tertiary);
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all var(--transition-fast);
    }
    
    .modal-close:hover {
      background-color: var(--bg-secondary);
      color: var(--text-primary);
    }
    
    .modal-content {
      padding: 24px;
    }
    
    .modal-footer {
      padding: 16px 24px;
      border-top: 1px solid var(--border-light);
      display: flex;
      justify-content: flex-end;
      gap: 12px;
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    .time-period-selector {
      display: flex;
      overflow-x: auto;
      gap: 8px;
      margin-bottom: 24px;
      padding-bottom: 8px;
    }
    
    .time-period-option {
      padding: 8px 16px;
      border-radius: 20px;
      background-color: white;
      border: 1px solid var(--border-medium);
      font-size: 13px;
      font-weight: 500;
      color: var(--text-secondary);
      cursor: pointer;
      transition: all var(--transition-fast);
      white-space: nowrap;
    }
    
    .time-period-option:hover {
      border-color: var(--primary-light);
      color: var(--primary-color);
    }
    
    .time-period-option.active {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }
    
    .tabs {
      display: flex;
      border-bottom: 1px solid var(--border-medium);
      margin-bottom: 24px;
      overflow-x: auto;
    }
    
    .tab {
      padding: 12px 20px;
      cursor: pointer;
      font-weight: 500;
      color: var(--text-secondary);
      position: relative;
      transition: color var(--transition-fast);
      white-space: nowrap;
    }
    
    .tab:hover {
      color: var(--primary-color);
    }
    
    .tab.active {
      color: var(--primary-color);
    }
    
    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      right: 0;
      height: 2px;
      background-color: var(--primary-color);
    }
    
    .tab-content {
      display: none;
    }
    
    .tab-content.active {
      display: block;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .filters {
        grid-template-columns: 1fr;
      }
      
      .stats-grid {
        grid-template-columns: 1fr 1fr;
      }
      
      .session-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
      }
      
      .session-metrics {
        flex-wrap: wrap;
      }
      
      .session-actions {
        width: 100%;
        justify-content: flex-end;
        margin-top: 8px;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-chart-line"></i> Time Reports
          </h1>
          <div class="header-subtitle">
            Analyze your productivity and time allocation
          </div>
        </div>
        <div class="header-actions">
          <button class="btn btn-secondary" id="scheduleBtn">
            <i class="fas fa-calendar-alt"></i> Schedule
          </button>
          <button class="btn btn-primary" id="newTrackerBtn">
            <i class="fas fa-plus"></i> New Session
          </button>
        </div>
      </div>
    </header>
    
    <div class="content">
      <!-- Time Period Selector -->
      <div class="time-period-selector">
        <div class="time-period-option active" data-period="7">Last 7 Days</div>
        <div class="time-period-option" data-period="30">Last 30 Days</div>
        <div class="time-period-option" data-period="90">Last Quarter</div>
        <div class="time-period-option" data-period="180">Last 6 Months</div>
        <div class="time-period-option" data-period="365">Last Year</div>
        <div class="time-period-option" data-period="custom">Custom Range</div>
      </div>
      
      <!-- Custom Date Range (Initially Hidden) -->
      <div id="customDateRange" style="display: none;" class="filters">
        <div class="filter-group">
          <label class="filter-label">From</label>
          <input type="date" class="filter-control" id="startDate">
        </div>
        <div class="filter-group">
          <label class="filter-label">To</label>
          <input type="date" class="filter-control" id="endDate">
        </div>
        <div class="filter-group">
          <label class="filter-label">&nbsp;</label>
          <button class="btn btn-primary" id="applyDateRangeBtn">
            <i class="fas fa-check"></i> Apply
          </button>
        </div>
      </div>
      
      <!-- Tabs -->
      <div class="tabs">
        <div class="tab active" data-tab="overview">Overview</div>
        <div class="tab" data-tab="activities">Activities</div>
        <div class="tab" data-tab="sessions">Sessions</div>
        <div class="tab" data-tab="tasks">Tasks</div>
      </div>
      
      <!-- Overview Tab -->
      <div class="tab-content active" id="overview-tab">
        <!-- Summary Stats -->
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value" id="totalSessionsValue">0</div>
            <div class="stat-label">Total Sessions</div>
          </div>
          
          <div class="stat-card">
            <div class="stat-value" id="totalHoursValue">0h</div>
            <div class="stat-label">Total Hours</div>
          </div>
          
          <div class="stat-card">
            <div class="stat-value" id="avgSessionValue">0h</div>
            <div class="stat-label">Avg. Session</div>
          </div>
          
          <div class="stat-card">
            <div class="stat-value" id="taskCompletionValue">0%</div>
            <div class="stat-label">Task Completion</div>
          </div>
        </div>
        
        <!-- Time Distribution Chart -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-pie"></i> Time Distribution
            </div>
          </div>
          <div class="card-content">
            <div class="chart-container">
              <canvas id="timeDistributionChart"></canvas>
            </div>
          </div>
        </div>
        
        <!-- Time Trend Chart -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-line"></i> Time Trend
            </div>
          </div>
          <div class="card-content">
            <div class="chart-container">
              <canvas id="timeTrendChart"></canvas>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Activities Tab -->
      <div class="tab-content" id="activities-tab">
        <!-- Activities Stats -->
        <div class="stats-grid">
          <div class="stat-card primary">
            <div class="stat-value" id="primaryTimeValue">0h</div>
            <div class="stat-label">Primary Work</div>
          </div>
          
          <div class="stat-card team-meeting">
            <div class="stat-value" id="teamMeetingValue">0h</div>
            <div class="stat-label">Team Meetings</div>
          </div>
          
          <div class="stat-card one-on-one">
            <div class="stat-value" id="oneOnOneValue">0h</div>
            <div class="stat-label">1:1 Meetings</div>
          </div>
          
          <div class="stat-card priority-coaching">
            <div class="stat-value" id="coachingValue">0h</div>
            <div class="stat-label">Priority Coaching</div>
          </div>
          
          <div class="stat-card manager-meeting">
            <div class="stat-value" id="managerMeetingValue">0h</div>
            <div class="stat-label">Manager 1:1</div>
          </div>
          
          <div class="stat-card qa-review">
            <div class="stat-value" id="qaReviewValue">0h</div>
            <div class="stat-label">QA Reviews</div>
          </div>
          
          <div class="stat-card shadow-session">
            <div class="stat-value" id="shadowValue">0h</div>
            <div class="stat-label">Shadow Sessions</div>
          </div>
          
          <div class="stat-card other">
            <div class="stat-value" id="otherValue">0h</div>
            <div class="stat-label">Other Activities</div>
          </div>
        </div>
        
        <!-- Activities Chart -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-bar"></i> Activities Breakdown by Day
            </div>
          </div>
          <div class="card-content">
            <div class="chart-container">
              <canvas id="activitiesByDayChart"></canvas>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Sessions Tab -->
      <div class="tab-content" id="sessions-tab">
        <!-- Session Filters -->
        <div class="filters">
          <div class="filter-group">
            <label class="filter-label">Sort By</label>
            <select class="filter-control" id="sessionSortFilter">
              <option value="date-desc">Date (Newest First)</option>
              <option value="date-asc">Date (Oldest First)</option>
              <option value="duration-desc">Duration (Longest First)</option>
              <option value="duration-asc">Duration (Shortest First)</option>
            </select>
          </div>
        </div>
        
        <!-- Sessions List -->
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-history"></i> Session History
            </div>
          </div>
          <div class="card-content">
            <div id="sessionsContainer">
              <!-- Sessions will be loaded here -->
              <div class="empty-state" id="noSessionsMessage" style="display: none;">
                <div class="empty-state-icon">
                  <i class="fas fa-clock"></i>
                </div>
                <h3 class="empty-state-title">No Sessions Found</h3>
                <p class="empty-state-description">
                  No time tracking sessions were found for the selected time period.
                </p>
                <button class="btn btn-primary" id="emptyStateNewSessionBtn">
                  <i class="fas fa-plus"></i> Start New Session
                </button>
              </div>
              
              <div class="sessions-list" id="sessionsList">
                <!-- Sessions will be loaded here -->
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Tasks Tab -->
      <div class="tab-content" id="tasks-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-tasks"></i> Task Completion
            </div>
          </div>
          <div class="card-content">
            <div class="chart-container" style="height: 300px;">
              <canvas id="taskCompletionChart"></canvas>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-clipboard-list"></i> Top Recurring Tasks
            </div>
          </div>
          <div class="card-content">
            <div id="topTasksContainer">
              <!-- Top tasks will be loaded here -->
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-clipboard-check"></i> Tasks for Next Session
            </div>
          </div>
          <div class="card-content">
            <div id="nextSessionTasksContainer">
              <!-- Next session tasks will be loaded here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Session Details Modal -->
  <div class="modal-overlay" id="sessionModal">
    <div class="modal">
      <div class="modal-header">
        <h3 class="modal-title" id="modalTitle">Session Details</h3>
        <button class="modal-close" id="modalClose">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="modal-content" id="modalContent">
        <!-- Session details will be loaded here -->
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" id="closeModalBtn">Close</button>
        <button class="btn btn-primary" id="exportSessionBtn">
          <i class="fas fa-file-export"></i> Export
        </button>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Operation completed successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let timeData = null;
    let sessions = [];
    let charts = {};
    let currentPeriod = '7';
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set current date for date inputs
      const today = new Date();
      const weekAgo = new Date();
      weekAgo.setDate(today.getDate() - 7);
      
      document.getElementById('startDate').valueAsDate = weekAgo;
      document.getElementById('endDate').valueAsDate = today;
      
      // Setup event listeners
      setupEventListeners();
      
      // Load initial data
      loadTimeData('7');
    });
    
    // Setup all event listeners
    function setupEventListeners() {
      // Time period selector
      document.querySelectorAll('.time-period-option').forEach(option => {
        option.addEventListener('click', function() {
          // Update active state
          document.querySelectorAll('.time-period-option').forEach(o => o.classList.remove('active'));
          this.classList.add('active');
          
          // Get selected period
          const period = this.getAttribute('data-period');
          currentPeriod = period;
          
          // Show/hide custom date range
          if (period === 'custom') {
            document.getElementById('customDateRange').style.display = 'grid';
          } else {
            document.getElementById('customDateRange').style.display = 'none';
            loadTimeData(period);
          }
        });
      });
      
      // Apply custom date range
      document.getElementById('applyDateRangeBtn').addEventListener('click', function() {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        
        if (!startDate || !endDate) {
          showToast('Error', 'Please select both start and end dates', 'error');
          return;
        }
        
        if (new Date(startDate) > new Date(endDate)) {
          showToast('Error', 'Start date cannot be after end date', 'error');
          return;
        }
        
        loadTimeData('custom', { startDate, endDate });
      });
      
      // Tab switching
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          
          // Update active states
          document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
          this.classList.add('active');
          
          document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
          });
          document.getElementById(`${tabId}-tab`).classList.add('active');
        });
      });
      
      // Session sorting
      document.getElementById('sessionSortFilter').addEventListener('change', function() {
        sortAndRenderSessions(this.value);
      });
      
      // Nav buttons
      document.getElementById('scheduleBtn').addEventListener('click', function() {
        google.script.run.showScheduleManager();
      });
      
      document.getElementById('newTrackerBtn').addEventListener('click', function() {
        google.script.run.showTimeTracker();
      });
      
      document.getElementById('emptyStateNewSessionBtn').addEventListener('click', function() {
        google.script.run.showTimeTracker();
      });
      
      // Modal close buttons
      document.getElementById('modalClose').addEventListener('click', closeModal);
      document.getElementById('closeModalBtn').addEventListener('click', closeModal);
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', function() {
        document.getElementById('toast').classList.remove('visible');
      });
      
      // Export button
      document.getElementById('exportSessionBtn').addEventListener('click', function() {
        const sessionId = this.getAttribute('data-session-id');
        if (sessionId) {
          exportSession(sessionId);
        }
      });
    }
    
    // Load time tracking data
    function loadTimeData(period, customRange) {
      showLoading();
      
      let params = { period };
      
      if (period === 'custom' && customRange) {
        params.startDate = customRange.startDate;
        params.endDate = customRange.endDate;
      }
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            timeData = result.data;
            sessions = result.data.sessions || [];
            
            renderTimeData();
          } else {
            showToast('Error', result.message || 'Failed to load time data', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading time data:', error);
          showToast('Error', 'Failed to load time data', 'error');
        })
        .getTimeTrackingData(params);
    }
    
    // Render all time tracking data
    function renderTimeData() {
      if (!timeData) return;
      
      // Update summary stats
      updateSummaryStats();
      
      // Initialize charts
      initializeCharts();
      
      // Render sessions list
      renderSessions();
    }
    
    // Update summary statistics
    function updateSummaryStats() {
      const stats = timeData.summary;
      
      // Overview stats
      document.getElementById('totalSessionsValue').textContent = stats.totalSessions;
      document.getElementById('totalHoursValue').textContent = formatHours(stats.totalHours);
      document.getElementById('avgSessionValue').textContent = formatHours(stats.averageSessionHours);
      document.getElementById('taskCompletionValue').textContent = `${Math.round(stats.taskCompletionRate * 100)}%`;
      
      // Activity stats
      document.getElementById('primaryTimeValue').textContent = formatHours(stats.activityHours.primary || 0);
      document.getElementById('teamMeetingValue').textContent = formatHours(stats.activityHours['team-meeting'] || 0);
      document.getElementById('oneOnOneValue').textContent = formatHours(stats.activityHours['one-on-one'] || 0);
      document.getElementById('coachingValue').textContent = formatHours(stats.activityHours['priority-coaching'] || 0);
      document.getElementById('managerMeetingValue').textContent = formatHours(stats.activityHours['manager-meeting'] || 0);
      document.getElementById('qaReviewValue').textContent = formatHours(stats.activityHours['qa-review'] || 0);
      document.getElementById('shadowValue').textContent = formatHours(stats.activityHours['shadow-session'] || 0);
      document.getElementById('otherValue').textContent = formatHours(stats.activityHours.other || 0);
    }
    
    // Initialize all charts
    function initializeCharts() {
      // Time Distribution Chart (Pie Chart)
      initTimeDistributionChart();
      
      // Time Trend Chart (Line Chart)
      initTimeTrendChart();
      
      // Activities by Day Chart (Stacked Bar Chart)
      initActivitiesByDayChart();
      
      // Task Completion Chart
      initTaskCompletionChart();
    }
    
    // Initialize time distribution chart
    function initTimeDistributionChart() {
      const ctx = document.getElementById('timeDistributionChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (charts.timeDistribution) {
        charts.timeDistribution.destroy();
      }
      
      // Prepare data
      const activities = timeData.activities;
      const labels = [];
      const data = [];
      const backgroundColors = [];
      
      // Define colors for each activity type
      const activityColors = {
        'primary': 'rgba(85, 64, 175, 1)',
        'team-meeting': 'rgba(14, 165, 233, 1)',
        'one-on-one': 'rgba(16, 185, 129, 1)',
        'priority-coaching': 'rgba(245, 158, 11, 1)',
        'manager-meeting': 'rgba(139, 92, 246, 1)',
        'qa-review': 'rgba(236, 72, 153, 1)',
        'shadow-session': 'rgba(20, 184, 166, 1)',
        'other': 'rgba(100, 116, 139, 1)'
      };
      
      // Activity labels
      const activityLabels = {
        'primary': 'Primary Work',
        'team-meeting': 'Team Meetings',
        'one-on-one': '1:1 Meetings',
        'priority-coaching': 'Priority Coaching',
        'manager-meeting': 'Manager 1:1',
        'qa-review': 'QA Reviews',
        'shadow-session': 'Shadow Sessions',
        'other': 'Other'
      };
      
      // Add data for each activity
      Object.keys(activities).forEach(activity => {
        const hours = activities[activity];
        
        if (hours > 0) {
          labels.push(activityLabels[activity] || activity);
          data.push(hours);
          backgroundColors.push(activityColors[activity] || 'rgba(100, 116, 139, 1)');
        }
      });
      
      // Create chart
      charts.timeDistribution = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: labels,
          datasets: [{
            data: data,
            backgroundColor: backgroundColors,
            borderWidth: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'right',
              labels: {
                boxWidth: 12,
                padding: 20
              }
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const value = context.parsed;
                  const label = context.label || '';
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value / total) * 100);
                  return `${label}: ${formatHours(value)} (${percentage}%)`;
                }
              }
            }
          },
          cutout: '60%'
        }
      });
    }
    
    // Initialize time trend chart
    function initTimeTrendChart() {
      const ctx = document.getElementById('timeTrendChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (charts.timeTrend) {
        charts.timeTrend.destroy();
      }
      
      // Prepare data
      const trend = timeData.timeTrend || [];
      const labels = trend.map(item => item.date);
      const data = trend.map(item => item.hours);
      
      // Create chart
      charts.timeTrend = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Hours Tracked',
            data: data,
            borderColor: 'rgba(85, 64, 175, 1)',
            backgroundColor: 'rgba(85, 64, 175, 0.1)',
            tension: 0.3,
            fill: true,
            pointBackgroundColor: 'rgba(85, 64, 175, 1)',
            pointRadius: 4,
            pointHoverRadius: 6
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              mode: 'index',
              intersect: false,
              callbacks: {
                label: function(context) {
                  const value = context.parsed.y;
                  return `Hours: ${formatHours(value)}`;
                }
              }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Hours'
              }
            }
          }
        }
      });
    }
    
    // Initialize activities by day chart
    function initActivitiesByDayChart() {
      const ctx = document.getElementById('activitiesByDayChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (charts.activitiesByDay) {
        charts.activitiesByDay.destroy();
      }
      
      // Prepare data
      const byDay = timeData.activitiesByDay || [];
      const labels = byDay.map(item => item.date);
      
      // Define colors for each activity type
      const activityColors = {
        'primary': 'rgba(85, 64, 175, 1)',
        'team-meeting': 'rgba(14, 165, 233, 1)',
        'one-on-one': 'rgba(16, 185, 129, 1)',
        'priority-coaching': 'rgba(245, 158, 11, 1)',
        'manager-meeting': 'rgba(139, 92, 246, 1)',
        'qa-review': 'rgba(236, 72, 153, 1)',
        'shadow-session': 'rgba(20, 184, 166, 1)',
        'other': 'rgba(100, 116, 139, 1)'
      };
      
      // Create datasets for each activity
      const datasets = [];
      const activityTypes = ['primary', 'team-meeting', 'one-on-one', 'priority-coaching', 'manager-meeting', 'qa-review', 'shadow-session', 'other'];
      const activityLabels = {
        'primary': 'Primary Work',
        'team-meeting': 'Team Meetings',
        'one-on-one': '1:1 Meetings',
        'priority-coaching': 'Priority Coaching',
        'manager-meeting': 'Manager 1:1',
        'qa-review': 'QA Reviews',
        'shadow-session': 'Shadow Sessions',
        'other': 'Other'
      };
      
      activityTypes.forEach(activity => {
        const data = byDay.map(day => day.activities[activity] || 0);
        
        // Only add dataset if there's data
        if (data.some(value => value > 0)) {
          datasets.push({
            label: activityLabels[activity],
            data: data,
            backgroundColor: activityColors[activity],
            borderWidth: 0
          });
        }
      });
      
      // Create chart
      charts.activitiesByDay = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: datasets
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  const value = context.parsed.y;
                  const label = context.dataset.label || '';
                  return `${label}: ${formatHours(value)}`;
                }
              }
            }
          },
          scales: {
            x: {
              stacked: true
            },
            y: {
              stacked: true,
              beginAtZero: true,
              title: {
                display: true,
                text: 'Hours'
              }
            }
          }
        }
      });
    }
    
    // Initialize task completion chart
    function initTaskCompletionChart() {
      const ctx = document.getElementById('taskCompletionChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (charts.taskCompletion) {
        charts.taskCompletion.destroy();
      }
      
      // Prepare data
      const taskData = timeData.taskCompletion || [];
      const labels = taskData.map(item => item.date);
      const completed = taskData.map(item => item.completed);
      const incomplete = taskData.map(item => item.incomplete);
      
      // Create chart
      charts.taskCompletion = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Completed Tasks',
              data: completed,
              backgroundColor: 'rgba(16, 185, 129, 1)',
              borderWidth: 0
            },
            {
              label: 'Incomplete Tasks',
              data: incomplete,
              backgroundColor: 'rgba(239, 68, 68, 0.7)',
              borderWidth: 0
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              stacked: true
            },
            y: {
              stacked: true,
              beginAtZero: true,
              title: {
                display: true,
                text: 'Tasks Count'
              },
              ticks: {
                stepSize: 1,
                precision: 0
              }
            }
          }
        }
      });
      
      // Render top recurring tasks
      renderTopTasks();
      
      // Render next session tasks
      renderNextSessionTasks();
    }
    
    // Render top recurring tasks
    function renderTopTasks() {
      const container = document.getElementById('topTasksContainer');
      const topTasks = timeData.topTasks || [];
      
      if (topTasks.length === 0) {
        container.innerHTML = '<div class="empty-state"><p>No recurring tasks found in this time period.</p></div>';
        return;
      }
      
      // Create HTML for tasks
      let html = '<ul style="list-style-type: none; padding-left: 0;">';
      
      topTasks.forEach(task => {
        const completionRate = Math.round((task.completedCount / task.totalCount) * 100);
        const completionClass = completionRate >= 75 ? 'success' : (completionRate >= 50 ? 'warning' : 'danger');
        
        html += `
          <li style="display: flex; justify-content: space-between; align-items: center; padding: 12px 0; border-bottom: 1px solid var(--border-light);">
            <div style="display: flex; align-items: center; gap: 8px;">
              <div style="width: 28px; height: 28px; border-radius: 50%; background-color: var(--${completionClass}-light); color: var(--${completionClass}-color); display: flex; align-items: center; justify-content: center;">
                <i class="fas fa-clipboard-check"></i>
              </div>
              <div>${task.text}</div>
            </div>
            <div style="display: flex; align-items: center; gap: 8px;">
              <div style="color: var(--text-secondary);">${task.completedCount}/${task.totalCount}</div>
              <div style="width: 60px; height: 4px; background-color: var(--bg-tertiary); border-radius: 2px; overflow: hidden;">
                <div style="height: 100%; width: ${completionRate}%; background-color: var(--${completionClass}-color);"></div>
              </div>
            </div>
          </li>
        `;
      });
      
      html += '</ul>';
      container.innerHTML = html;
    }
    
    // Render next session tasks
    function renderNextSessionTasks() {
      const container = document.getElementById('nextSessionTasksContainer');
      const nextTasks = timeData.nextSessionTasks || [];
      
      if (nextTasks.length === 0) {
        container.innerHTML = '<div class="empty-state"><p>No tasks planned for your next session.</p></div>';
        return;
      }
      
      // Create HTML for tasks
      let html = '<ul style="list-style-type: none; padding-left: 0;">';
      
      nextTasks.forEach(task => {
        html += `
          <li style="display: flex; align-items: center; padding: 12px 16px; margin-bottom: 8px; background-color: var(--bg-secondary); border-radius: var(--radius-md);">
            <div style="width: 24px; color: var(--primary-color);"><i class="fas fa-arrow-right"></i></div>
            <div style="flex: 1;">${task}</div>
          </li>
        `;
      });
      
      html += '</ul>';
      container.innerHTML = html;
    }
    
    // Render sessions list
    function renderSessions() {
      const sessionsContainer = document.getElementById('sessionsContainer');
      const sessionsList = document.getElementById('sessionsList');
      const noSessionsMessage = document.getElementById('noSessionsMessage');
      
      // Check if we have sessions
      if (!sessions || sessions.length === 0) {
        sessionsList.style.display = 'none';
        noSessionsMessage.style.display = 'block';
        return;
      }
      
      // We have sessions
      sessionsList.style.display = 'block';
      noSessionsMessage.style.display = 'none';
      
      // Sort sessions by date (newest first)
      sortAndRenderSessions('date-desc');
    }
    
    // Sort and render sessions
    function sortAndRenderSessions(sortType) {
      if (!sessions || sessions.length === 0) return;
      
      // Clone the sessions array to avoid modifying the original
      const sortedSessions = [...sessions];
      
      // Sort based on the selected option
      switch (sortType) {
        case 'date-asc':
          sortedSessions.sort((a, b) => new Date(a.date) - new Date(b.date));
          break;
        case 'date-desc':
          sortedSessions.sort((a, b) => new Date(b.date) - new Date(a.date));
          break;
        case 'duration-asc':
          sortedSessions.sort((a, b) => a.duration - b.duration);
          break;
        case 'duration-desc':
          sortedSessions.sort((a, b) => b.duration - a.duration);
          break;
      }
      
      // Render the sorted sessions
      const sessionsList = document.getElementById('sessionsList');
      sessionsList.innerHTML = '';
      
      sortedSessions.forEach(session => {
        const sessionDate = new Date(session.date);
        const formattedDate = sessionDate.toLocaleDateString('en-US', { 
          year: 'numeric', 
          month: 'short', 
          day: 'numeric' 
        });
        
        const sessionHours = session.duration / (1000 * 60 * 60);
        const sessionItem = document.createElement('div');
        sessionItem.className = 'session-item';
        sessionItem.setAttribute('data-session-id', session.id);
        
        // Create session metrics
        let metricsHTML = '';
        
        if (session.taskStats) {
          metricsHTML += `
            <span class="session-metric">
              <i class="fas fa-tasks"></i> ${session.taskStats.completed}/${session.taskStats.total} Tasks
            </span>
          `;
        }
        
        if (session.primaryActivity) {
          metricsHTML += `
            <span class="session-metric">
              <i class="fas fa-briefcase"></i> ${formatHours(session.primaryActivity)} Primary
            </span>
          `;
        }
        
        if (session.meetingsTime) {
          metricsHTML += `
            <span class="session-metric">
              <i class="fas fa-users"></i> ${formatHours(session.meetingsTime)} Meetings
            </span>
          `;
        }
        
        sessionItem.innerHTML = `
          <div class="session-date">${formattedDate}</div>
          <div class="session-duration">${formatHours(sessionHours)}</div>
          <div class="session-metrics">
            ${metricsHTML}
          </div>
          <div class="session-actions">
            <button class="btn btn-secondary btn-icon view-session-btn" title="View Details">
              <i class="fas fa-eye"></i>
            </button>
          </div>
        `;
        
        // Add event listener to view button
        sessionItem.querySelector('.view-session-btn').addEventListener('click', function() {
          viewSessionDetails(session.id);
        });
        
        sessionsList.appendChild(sessionItem);
      });
    }
    
    // View session details
    function viewSessionDetails(sessionId) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            renderSessionModal(result.session);
            openModal();
          } else {
            showToast('Error', result.message || 'Failed to load session details', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading session details:', error);
          showToast('Error', 'Failed to load session details', 'error');
        })
        .getTimeSessionDetails(sessionId);
    }
    
    // Export session
    function exportSession(sessionId) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Session exported successfully', 'success');
            window.open(result.url, '_blank');
          } else {
            showToast('Error', result.message || 'Failed to export session', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error exporting session:', error);
          showToast('Error', 'Failed to export session', 'error');
        })
        .exportTimeSession(sessionId);
    }
    
    // Render session modal
    function renderSessionModal(session) {
      const modalTitle = document.getElementById('modalTitle');
      const modalContent = document.getElementById('modalContent');
      const exportBtn = document.getElementById('exportSessionBtn');
      
      // Set title and session ID for export
      const sessionDate = new Date(session.date);
      const formattedDate = sessionDate.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
      
      modalTitle.textContent = `Session: ${formattedDate}`;
      exportBtn.setAttribute('data-session-id', session.id);
      
      // Calculate session duration
      const sessionHours = session.duration / (1000 * 60 * 60);
      
      // Create session details HTML
      let detailsHTML = `
        <div style="margin-bottom: 24px;">
          <div style="display: flex; gap: 16px; margin-bottom: 16px;">
            <div style="flex: 1; background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md); text-align: center;">
              <div style="font-size: 24px; font-weight: 600; margin-bottom: 4px;">${formatHours(sessionHours)}</div>
              <div style="color: var(--text-secondary);">Total Time</div>
            </div>
            <div style="flex: 1; background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md); text-align: center;">
              <div style="font-size: 24px; font-weight: 600; margin-bottom: 4px;">${session.taskStats?.completed || 0}/${session.taskStats?.total || 0}</div>
              <div style="color: var(--text-secondary);">Tasks Completed</div>
            </div>
          </div>
      `;
      
      // Session notes
      if (session.notes) {
        detailsHTML += `
          <div style="margin-bottom: 24px;">
            <h3 style="font-size: 16px; margin-bottom: 8px;">Session Notes</h3>
            <div style="background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md);">
              ${session.notes}
            </div>
          </div>
        `;
      }
      
           // Activity log
      if (session.activityLog && session.activityLog.length > 0) {
        detailsHTML += `
          <div style="margin-bottom: 24px;">
            <h3 style="font-size: 16px; margin-bottom: 8px;">Activity Log</h3>
            <div style="border: 1px solid var(--border-light); border-radius: var(--radius-md); overflow: hidden;">
              <table style="width: 100%; border-collapse: collapse;">
                <thead>
                  <tr style="background-color: var(--bg-secondary);">
                    <th style="padding: 12px; text-align: left;">Time</th>
                    <th style="padding: 12px; text-align: left;">Activity</th>
                    <th style="padding: 12px; text-align: left;">Notes</th>
                    <th style="padding: 12px; text-align: right;">Duration</th>
                  </tr>
                </thead>
                <tbody>
        `;
        
        session.activityLog.forEach((activity, index) => {
          // Skip pauses
          if (activity.activity === 'pause') return;
          
          const activityTime = new Date(activity.timestamp);
          const timeStr = activityTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
          
          // Get activity class and name
          const activityClass = getActivityClass(activity.activity);
          const activityName = getActivityName(activity.activity, activity.activityName);
          
          // Calculate duration
          let duration = 0;
          if (index < session.activityLog.length - 1) {
            duration = new Date(session.activityLog[index + 1].timestamp) - activityTime;
          } else {
            duration = new Date(session.date) - activityTime + session.duration;
          }
          
          const durationMinutes = Math.round(duration / 60000);
          
          detailsHTML += `
            <tr style="border-bottom: 1px solid var(--border-light);">
              <td style="padding: 12px;">${timeStr}</td>
              <td style="padding: 12px;">
                <span style="padding: 4px 8px; border-radius: 12px; font-size: 12px; background-color: var(--${activityClass}-light); color: var(--${activityClass});">
                  ${activityName}
                </span>
              </td>
              <td style="padding: 12px;">${activity.notes || ''}</td>
              <td style="padding: 12px; text-align: right;">${durationMinutes} min</td>
            </tr>
          `;
        });
        
        detailsHTML += `
                </tbody>
              </table>
            </div>
          </div>
        `;
      }
      
      // Completed tasks
      if (session.completedTasks && session.completedTasks.length > 0) {
        detailsHTML += `
          <div style="margin-bottom: 24px;">
            <h3 style="font-size: 16px; margin-bottom: 8px;">Completed Tasks</h3>
            <ul style="list-style-type: none; padding: 0;">
        `;
        
        session.completedTasks.forEach(task => {
          detailsHTML += `
            <li style="display: flex; align-items: center; padding: 8px 0;">
              <div style="width: 24px; color: var(--success-color);"><i class="fas fa-check-circle"></i></div>
              <div>${task.text}</div>
            </li>
          `;
        });
        
        detailsHTML += `
            </ul>
          </div>
        `;
      }
      
      // Incomplete tasks
      if (session.incompleteTasks && session.incompleteTasks.length > 0) {
        detailsHTML += `
          <div style="margin-bottom: 24px;">
            <h3 style="font-size: 16px; margin-bottom: 8px;">Incomplete Tasks</h3>
            <ul style="list-style-type: none; padding: 0;">
        `;
        
        session.incompleteTasks.forEach(task => {
          detailsHTML += `
            <li style="display: flex; align-items: center; padding: 8px 0;">
              <div style="width: 24px; color: var(--warning-color);"><i class="fas fa-exclamation-circle"></i></div>
              <div>${task.text}</div>
            </li>
          `;
        });
        
        detailsHTML += `
            </ul>
          </div>
        `;
      }
      
      // Reflection
      if (session.reflection) {
        detailsHTML += `
          <div style="margin-bottom: 24px;">
            <h3 style="font-size: 16px; margin-bottom: 8px;">Session Reflection</h3>
            <div style="background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md);">
              ${session.reflection}
            </div>
          </div>
        `;
      }
      
      // Tasks for next session
      if (session.nextSessionTasks && session.nextSessionTasks.length > 0) {
        detailsHTML += `
          <div style="margin-bottom: 24px;">
            <h3 style="font-size: 16px; margin-bottom: 8px;">Tasks for Next Session</h3>
            <ul style="list-style-type: none; padding: 0;">
        `;
        
        session.nextSessionTasks.forEach(task => {
          detailsHTML += `
            <li style="display: flex; align-items: center; padding: 8px 0;">
              <div style="width: 24px; color: var(--primary-color);"><i class="fas fa-arrow-right"></i></div>
              <div>${task}</div>
            </li>
          `;
        });
        
        detailsHTML += `
            </ul>
          </div>
        `;
      }
      
      detailsHTML += '</div>';
      
      // Update modal content
      modalContent.innerHTML = detailsHTML;
    }
    
    // Get activity class for styling
    function getActivityClass(activity) {
      switch (activity) {
        case 'primary': return 'primary-category';
        case 'team-meeting': return 'team-meeting';
        case 'one-on-one': return 'one-on-one';
        case 'priority-coaching': return 'priority-coaching';
        case 'manager-meeting': return 'manager-meeting';
        case 'qa-review': return 'qa-review';
        case 'shadow-session': return 'shadow-session';
        case 'other': return 'other-category';
        default: return 'other-category';
      }
    }
    
    // Get activity name for display
    function getActivityName(activity, customName) {
      switch (activity) {
        case 'primary': return 'Primary Work';
        case 'team-meeting': return 'Team Meeting';
        case 'one-on-one': return '1:1 Meeting';
        case 'priority-coaching': return 'Priority Coaching';
        case 'manager-meeting': return 'Manager 1:1';
        case 'qa-review': return 'QA Review';
        case 'shadow-session': return 'Shadow Session';
        case 'other': return customName || 'Other Activity';
        default: return activity;
      }
    }
    
    // Format hours for display
    function formatHours(hours) {
      if (hours === 0) return '0h';
      
      if (hours < 1) {
        const minutes = Math.round(hours * 60);
        return `${minutes}m`;
      }
      
      const wholeHours = Math.floor(hours);
      const minutes = Math.round((hours - wholeHours) * 60);
      
      if (minutes === 0) {
        return `${wholeHours}h`;
      }
      
      return `${wholeHours}h ${minutes}m`;
    }
    
    // Open modal
    function openModal() {
      document.getElementById('sessionModal').classList.add('visible');
    }
    
    // Close modal
    function closeModal() {
      document.getElementById('sessionModal').classList.remove('visible');
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      } else {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto hide after 5 seconds
      setTimeout(function() {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>





<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Schedule Manager</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Schedule status colors */
      --available: #10b981;
      --busy: #ef4444;
      --away: #f59e0b;
      --pto: #8b5cf6;
      --training: #3b82f6;
      --meeting: #ec4899;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1400px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(239, 68, 68, 0.3);
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(239, 68, 68, 0.4);
    }
    
    .btn-success {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      box-shadow: 0 2px 5px rgba(16, 185, 129, 0.3);
    }
    
    .btn-success:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(16, 185, 129, 0.4);
    }
    
    .btn-sm {
      padding: 6px 12px;
      font-size: 13px;
    }
    
    .scheduler-controls {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 24px;
    }
    
    .date-navigation {
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .current-week {
      font-weight: 600;
      font-size: 18px;
      font-family: 'Manrope', sans-serif;
    }
    
    .week-navigation {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .nav-btn {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .nav-btn:hover {
      background-color: var(--bg-secondary);
      color: var(--text-primary);
    }
    
    .schedule-grid {
      display: grid;
      grid-template-columns: 100px repeat(7, 1fr);
      grid-template-rows: auto;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      overflow: hidden;
    }
    
    .grid-header {
      background-color: var(--bg-secondary);
      font-weight: 600;
      border-bottom: 1px solid var(--border-medium);
      text-align: center;
      padding: 12px;
    }
    
    .grid-header.time-header {
      grid-column: 1 / 2;
    }
    
    .day-header {
      position: relative;
    }
    
    .day-name {
      font-size: 16px;
      margin-bottom: 4px;
    }
    
    .day-date {
      font-size: 13px;
      color: var(--text-tertiary);
      font-weight: normal;
    }
    
    .current-day {
      position: absolute;
      width: 4px;
      height: 4px;
      border-radius: 50%;
      background-color: var(--primary-color);
      bottom: 6px;
      left: 50%;
      transform: translateX(-50%);
    }
    
    .grid-time {
      grid-column: 1 / 2;
      padding: 8px;
      text-align: center;
      font-size: 13px;
      color: var(--text-tertiary);
      border-right: 1px solid var(--border-light);
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .grid-cell {
      min-height: 60px;
      border-bottom: 1px solid var(--border-light);
      border-right: 1px solid var(--border-light);
      padding: 4px;
      position: relative;
    }
    
    .grid-cell:last-child {
      border-right: none;
    }
    
    .schedule-item {
      background-color: var(--bg-secondary);
      border-radius: var(--radius-sm);
      padding: 6px 8px;
      margin-bottom: 2px;
      font-size: 12px;
      cursor: pointer;
      transition: background-color var(--transition-fast);
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    .schedule-item:hover {
      background-color: var(--bg-tertiary);
    }
    
    .schedule-item.available {
      background-color: rgba(16, 185, 129, 0.15);
      color: var(--available);
    }
    
    .schedule-item.busy {
      background-color: rgba(239, 68, 68, 0.15);
      color: var(--busy);
    }
    
    .schedule-item.away {
      background-color: rgba(245, 158, 11, 0.15);
      color: var(--away);
    }
    
    .schedule-item.pto {
      background-color: rgba(139, 92, 246, 0.15);
      color: var(--pto);
    }
    
    .schedule-item.training {
      background-color: rgba(59, 130, 246, 0.15);
      color: var(--training);
    }
    
    .schedule-item.meeting {
      background-color: rgba(236, 72, 153, 0.15);
      color: var(--meeting);
    }
    
    .add-event-btn {
      background-color: rgba(85, 64, 175, 0.1);
      border: 1px dashed var(--primary-color);
      border-radius: var(--radius-sm);
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 6px;
      width: 100%;
      cursor: pointer;
      color: var(--primary-color);
      transition: all var(--transition-fast);
      font-size: 12px;
    }
    
    .add-event-btn:hover {
      background-color: rgba(85, 64, 175, 0.2);
    }
    
    .team-list {
      display: flex;
      flex-direction: column;
      gap: 8px;
      margin-bottom: 24px;
    }
    
    .team-member {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 12px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-sm);
      transition: transform var(--transition-fast), box-shadow var(--transition-fast);
      cursor: pointer;
    }
    
    .team-member:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .team-member.selected {
      background-color: var(--primary-light);
      color: white;
    }
    
    .team-member-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background-color: var(--bg-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      flex-shrink: 0;
    }
    
    .team-member-details {
      flex: 1;
      min-width: 0;
    }
    
    .team-member-name {
      font-weight: 500;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .team-member-role {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .team-member.selected .team-member-role {
      color: rgba(255, 255, 255, 0.8);
    }
    
    .add-team-member {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 12px;
      background-color: white;
      border: 1px dashed var(--border-medium);
      border-radius: var(--radius-md);
      color: var(--text-secondary);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .add-team-member:hover {
      border-color: var(--primary-color);
      color: var(--primary-color);
      background-color: var(--bg-secondary);
    }
    
    .legend {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      margin-bottom: 24px;
    }
    
    .legend-item {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 13px;
    }
    
    .legend-color {
      width: 16px;
      height: 16px;
      border-radius: 4px;
    }
    
    .legend-color.available { background-color: rgba(16, 185, 129, 0.15); }
    .legend-color.busy { background-color: rgba(239, 68, 68, 0.15); }
    .legend-color.away { background-color: rgba(245, 158, 11, 0.15); }
    .legend-color.pto { background-color: rgba(139, 92, 246, 0.15); }
    .legend-color.training { background-color: rgba(59, 130, 246, 0.15); }
    .legend-color.meeting { background-color: rgba(236, 72, 153, 0.15); }
    
    /* Layout with sidebar */
    .flex-layout {
      display: flex;
      gap: 24px;
    }
    
    .sidebar {
      width: 300px;
      flex-shrink: 0;
    }
    
    .main-content {
      flex: 1;
    }
    
    /* Modal styles */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(15, 23, 42, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 100;
      opacity: 0;
      visibility: hidden;
      transition: opacity var(--transition-normal);
    }
    
    .modal-overlay.visible {
      opacity: 1;
      visibility: visible;
    }
    
    .modal {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      width: 90%;
      max-width: 600px;
      max-height: 90vh;
      overflow-y: auto;
      transform: translateY(20px);
      opacity: 0;
      transition: transform var(--transition-normal), opacity var(--transition-normal);
    }
    
    .modal-overlay.visible .modal {
      transform: translateY(0);
      opacity: 1;
    }
    
    .modal-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .modal-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
    }
    
    .modal-close {
      background: none;
      border: none;
      color: var(--text-tertiary);
      cursor: pointer;
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all var(--transition-fast);
    }
    
    .modal-close:hover {
      background-color: var(--bg-secondary);
      color: var(--text-primary);
    }
    
    .modal-content {
      padding: 24px;
    }
    
    .modal-footer {
      padding: 16px 24px;
      border-top: 1px solid var(--border-light);
      display: flex;
      justify-content: flex-end;
      gap: 12px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .form-row {
      display: flex;
      gap: 16px;
    }
    
    .form-col {
      flex: 1;
    }
    
    .form-check {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 8px;
    }
    
    .form-check input[type="radio"] {
      width: 16px;
      height: 16px;
    }
    
    .status-options {
      display: flex;
      gap: 12px;
      flex-wrap: wrap;
      margin-bottom: 20px;
    }
    
    .status-option {
      position: relative;
    }
    
    .status-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .status-option label {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 12px;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-medium);
      background-color: white;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .status-option input[type="radio"]:checked + label {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 2px rgba(85, 64, 175, 0.2);
    }
    
    .status-badge {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }
    
    .status-badge.available { background-color: var(--available); }
    .status-badge.busy { background-color: var(--busy); }
    .status-badge.away { background-color: var(--away); }
    .status-badge.pto { background-color: var(--pto); }
    .status-badge.training { background-color: var(--training); }
    .status-badge.meeting { background-color: var(--meeting); }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.2);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    @media (max-width: 992px) {
      .flex-layout {
        flex-direction: column;
      }
      
      .sidebar {
        width: 100%;
      }
      
      .schedule-grid {
        min-width: 700px;
        overflow-x: auto;
      }
      
      .schedule-container {
        overflow-x: auto;
      }
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .form-row {
        flex-direction: column;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-calendar-alt"></i> Schedule Manager
          </h1>
          <div class="header-subtitle">
            Manage team schedules and assignments
          </div>
        </div>
        <div class="header-actions">
          <button class="btn btn-secondary" id="reportsBtn">
            <i class="fas fa-chart-bar"></i> Reports
          </button>
          <button class="btn btn-primary" id="initWeekBtn">
            <i class="fas fa-plus"></i> Initialize Week
          </button>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="scheduler-controls">
        <div class="date-navigation">
          <div class="current-week" id="currentWeekDisplay">May 1 - May 7, 2023</div>
          <div class="week-navigation">
            <button class="nav-btn" id="prevWeekBtn">
              <i class="fas fa-chevron-left"></i>
            </button>
            <button class="nav-btn" id="todayBtn">
              <i class="fas fa-calendar-day"></i>
            </button>
            <button class="nav-btn" id="nextWeekBtn">
              <i class="fas fa-chevron-right"></i>
            </button>
          </div>
        </div>
        <div class="view-controls">
          <select class="form-control" id="viewFilter">
            <option value="day">Day View</option>
            <option value="week" selected>Week View</option>
          </select>
        </div>
      </div>
      
      <div class="flex-layout">
        <div class="sidebar">
          <!-- Team Members List -->
          <div class="card">
            <div class="card-header">
              <div class="card-title">
                <i class="fas fa-users"></i> Team Members
              </div>
            </div>
            <div class="card-content">
              <div class="team-list" id="teamMembersList">
                <!-- Team members will be loaded here -->
              </div>
              
              <div class="add-team-member" id="addTeamMemberBtn">
                <i class="fas fa-plus"></i>
                <span>Add Team Member</span>
              </div>
            </div>
          </div>
          
          <!-- Legend -->
          <div class="card">
            <div class="card-header">
              <div class="card-title">
                <i class="fas fa-tags"></i> Status Legend
              </div>
            </div>
            <div class="card-content">
              <div class="legend">
                <div class="legend-item">
                  <div class="legend-color available"></div>
                  <span>Available</span>
                </div>
                <div class="legend-item">
                  <div class="legend-color busy"></div>
                  <span>Busy</span>
                </div>
                <div class="legend-item">
                  <div class="legend-color away"></div>
                  <span>Away</span>
                </div>
                <div class="legend-item">
                  <div class="legend-color pto"></div>
                  <span>PTO</span>
                </div>
                <div class="legend-item">
                  <div class="legend-color training"></div>
                  <span>Training</span>
                </div>
                <div class="legend-item">
                  <div class="legend-color meeting"></div>
                  <span>Meeting</span>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Weekly Summary (team availability at a glance) -->
          <div class="card">
            <div class="card-header">
              <div class="card-title">
                <i class="fas fa-chart-pie"></i> Team Availability
              </div>
            </div>
            <div class="card-content">
              <div id="teamAvailabilityStats">
                <!-- Will be populated with data -->
                <div style="text-align: center; color: var(--text-tertiary);">
                  Select a team member to see availability
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="main-content">
          <!-- Schedule Grid -->
          <div class="card">
            <div class="card-header">
              <div class="card-title">
                <i class="fas fa-calendar-alt"></i> Schedule
              </div>
            </div>
            <div class="card-content">
              <div class="schedule-container">
                <div class="schedule-grid" id="scheduleGrid">
                  <!-- Schedule grid will be generated here -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Add/Edit Event Modal -->
  <div class="modal-overlay" id="eventModal">
    <div class="modal">
      <div class="modal-header">
        <div class="modal-title" id="eventModalTitle">Add Schedule Event</div>
        <button class="modal-close" id="closeEventModalBtn">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="modal-content">
        <form id="eventForm">
          <input type="hidden" id="eventId">
          <input type="hidden" id="memberId">
          <input type="hidden" id="eventDate">
          <input type="hidden" id="eventTime">
          
          <div class="form-group">
            <label class="form-label">Status</label>
            <div class="status-options">
              <div class="status-option">
                <input type="radio" id="status-available" name="status" value="available" checked>
                <label for="status-available">
                  <span class="status-badge available"></span>
                  Available
                </label>
              </div>
              <div class="status-option">
                <input type="radio" id="status-busy" name="status" value="busy">
                <label for="status-busy">
                  <span class="status-badge busy"></span>
                  Busy
                </label>
              </div>
              <div class="status-option">
                <input type="radio" id="status-away" name="status" value="away">
                <label for="status-away">
                  <span class="status-badge away"></span>
                  Away
                </label>
              </div>
              <div class="status-option">
                <input type="radio" id="status-pto" name="status" value="pto">
                <label for="status-pto">
                  <span class="status-badge pto"></span>
                  PTO
                </label>
              </div>
              <div class="status-option">
                <input type="radio" id="status-training" name="status" value="training">
                <label for="status-training">
                  <span class="status-badge training"></span>
                  Training
                </label>
              </div>
              <div class="status-option">
                <input type="radio" id="status-meeting" name="status" value="meeting">
                <label for="status-meeting">
                  <span class="status-badge meeting"></span>
                  Meeting
                </label>
              </div>
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label" for="eventTitle">Title</label>
            <input type="text" class="form-control" id="eventTitle" placeholder="Enter event title">
          </div>
          
          <div class="form-row">
            <div class="form-col">
              <div class="form-group">
                <label class="form-label" for="eventStartTime">Start Time</label>
                <select class="form-control" id="eventStartTime">
                  <option value="00:00">12:00 AM</option>
                  <option value="01:00">1:00 AM</option>
                  <option value="02:00">2:00 AM</option>
                  <option value="03:00">3:00 AM</option>
                  <option value="04:00">4:00 AM</option>
                  <option value="05:00">5:00 AM</option>
                  <option value="06:00">6:00 AM</option>
                  <option value="07:00">7:00 AM</option>
                  <option value="08:00">8:00 AM</option>
                  <option value="09:00">9:00 AM</option>
                  <option value="10:00">10:00 AM</option>
                  <option value="11:00">11:00 AM</option>
                  <option value="12:00">12:00 PM</option>
                  <option value="13:00">1:00 PM</option>
                  <option value="14:00">2:00 PM</option>
                  <option value="15:00">3:00 PM</option>
                  <option value="16:00">4:00 PM</option>
                  <option value="17:00">5:00 PM</option>
                  <option value="18:00">6:00 PM</option>
                  <option value="19:00">7:00 PM</option>
                  <option value="20:00">8:00 PM</option>
                  <option value="21:00">9:00 PM</option>
                  <option value="22:00">10:00 PM</option>
                  <option value="23:00">11:00 PM</option>
                </select>
              </div>
            </div>
            <div class="form-col">
              <div class="form-group">
                <label class="form-label" for="eventEndTime">End Time</label>
                <select class="form-control" id="eventEndTime">
                  <option value="00:00">12:00 AM</option>
                  <option value="01:00">1:00 AM</option>
                  <option value="02:00">2:00 AM</option>
                  <option value="03:00">3:00 AM</option>
                  <option value="04:00">4:00 AM</option>
                  <option value="05:00">5:00 AM</option>
                  <option value="06:00">6:00 AM</option>
                  <option value="07:00">7:00 AM</option>
                  <option value="08:00">8:00 AM</option>
                  <option value="09:00">9:00 AM</option>
                  <option value="10:00">10:00 AM</option>
                  <option value="11:00">11:00 AM</option>
                  <option value="12:00">12:00 PM</option>
                  <option value="13:00">1:00 PM</option>
                  <option value="14:00">2:00 PM</option>
                  <option value="15:00">3:00 PM</option>
                  <option value="16:00">4:00 PM</option>
                  <option value="17:00">5:00 PM</option>
                  <option value="18:00">6:00 PM</option>
                  <option value="19:00">7:00 PM</option>
                  <option value="20:00">8:00 PM</option>
                  <option value="21:00">9:00 PM</option>
                  <option value="22:00">10:00 PM</option>
                  <option value="23:00">11:00 PM</option>
                </select>
              </div>
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label" for="eventNotes">Notes</label>
            <textarea class="form-control" id="eventNotes" rows="3" placeholder="Enter additional notes (optional)"></textarea>
          </div>
          
          <div class="form-check">
            <input type="checkbox" id="repeatEvent">
            <label for="repeatEvent">Repeat this event</label>
          </div>
          
          <div id="repeatOptions" style="display: none; margin-top: 12px; padding-left: 24px;">
            <div class="form-group">
              <label class="form-label">Repeat</label>
              <div class="form-check">
                <input type="radio" id="repeatDaily" name="repeatFrequency" value="daily" checked>
                <label for="repeatDaily">Daily</label>
              </div>
              <div class="form-check">
                <input type="radio" id="repeatWeekly" name="repeatFrequency" value="weekly">
                <label for="repeatWeekly">Weekly</label>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="repeatUntil">Until</label>
              <input type="date" class="form-control" id="repeatUntil">
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn btn-danger" id="deleteEventBtn" style="display: none; margin-right: auto;">
          <i class="fas fa-trash-alt"></i> Delete
        </button>
        <button class="btn btn-secondary" id="cancelEventBtn">Cancel</button>
        <button class="btn btn-primary" id="saveEventBtn">Save</button>
      </div>
    </div>
  </div>
  
  <!-- Add Team Member Modal -->
  <div class="modal-overlay" id="teamMemberModal">
    <div class="modal">
      <div class="modal-header">
        <div class="modal-title">Add Team Member</div>
        <button class="modal-close" id="closeTeamModalBtn">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="modal-content">
        <div class="form-group">
          <label class="form-label" for="teamMemberSelect">Select Team Member</label>
          <select class="form-control" id="teamMemberSelect">
            <!-- Will be populated with available team members -->
          </select>
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" id="cancelTeamBtn">Cancel</button>
        <button class="btn btn-primary" id="addTeamBtn">Add</button>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Operation completed successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let currentWeekStart = new Date();
    let selectedTeamMember = null;
    let teamMembers = [];
    let scheduleData = {};
    let selectedEvent = null;
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Start with the current week
      setWeekToToday();
      
      // Setup event listeners
      setupEventListeners();
      
      // Load team members
      loadTeamMembers();
    });
    
    // Set week to the current week
    function setWeekToToday() {
      const today = new Date();
      currentWeekStart = new Date(today);
      
      // Set to the first day of the current week (Sunday)
      const dayOfWeek = today.getDay();
      currentWeekStart.setDate(today.getDate() - dayOfWeek);
      
      // Reset time to midnight
      currentWeekStart.setHours(0, 0, 0, 0);
      
      // Update week display
      updateWeekDisplay();
    }
    
    // Update the week display
    function updateWeekDisplay() {
      // Format: May 1 - May 7, 2023
      const weekEnd = new Date(currentWeekStart);
      weekEnd.setDate(currentWeekStart.getDate() + 6);
      
      const startMonth = currentWeekStart.toLocaleString('default', { month: 'short' });
      const startDate = currentWeekStart.getDate();
      const endMonth = weekEnd.toLocaleString('default', { month: 'short' });
      const endDate = weekEnd.getDate();
      const year = weekEnd.getFullYear();
      
      const weekDisplay = `${startMonth} ${startDate} - ${endMonth} ${endDate}, ${year}`;
      document.getElementById('currentWeekDisplay').textContent = weekDisplay;
      
      // If a team member is selected, reload their schedule
      if (selectedTeamMember) {
        loadSchedule(selectedTeamMember);
      } else {
        // Just create the empty grid
        createScheduleGrid();
      }
    }
    
    // Setup all event listeners
    function setupEventListeners() {
      // Week navigation
      document.getElementById('prevWeekBtn').addEventListener('click', function() {
        currentWeekStart.setDate(currentWeekStart.getDate() - 7);
        updateWeekDisplay();
      });
      
      document.getElementById('nextWeekBtn').addEventListener('click', function() {
        currentWeekStart.setDate(currentWeekStart.getDate() + 7);
        updateWeekDisplay();
      });
      
      document.getElementById('todayBtn').addEventListener('click', function() {
        setWeekToToday();
      });
      
      // View filter
      document.getElementById('viewFilter').addEventListener('change', function() {
        updateWeekDisplay();
      });
      
      // Add team member button
      document.getElementById('addTeamMemberBtn').addEventListener('click', function() {
        showAddTeamMemberModal();
      });
      
      // Add team member modal
      document.getElementById('closeTeamModalBtn').addEventListener('click', function() {
        hideModal('teamMemberModal');
      });
      
      document.getElementById('cancelTeamBtn').addEventListener('click', function() {
        hideModal('teamMemberModal');
      });
      
      document.getElementById('addTeamBtn').addEventListener('click', function() {
        addSelectedTeamMember();
      });
      
      // Event modal
      document.getElementById('closeEventModalBtn').addEventListener('click', function() {
        hideModal('eventModal');
      });
      
      document.getElementById('cancelEventBtn').addEventListener('click', function() {
        hideModal('eventModal');
      });
      
      document.getElementById('saveEventBtn').addEventListener('click', function() {
        saveEvent();
      });
      
      document.getElementById('deleteEventBtn').addEventListener('click', function() {
        deleteEvent();
      });
      
      // Repeat event checkbox
      document.getElementById('repeatEvent').addEventListener('change', function() {
        document.getElementById('repeatOptions').style.display = this.checked ? 'block' : 'none';
        
        // If checked, set a default repeat until date (2 weeks by default)
        if (this.checked) {
          const repeatUntil = document.getElementById('repeatUntil');
          if (!repeatUntil.value) {
            const twoWeeksFromEvent = new Date(document.getElementById('eventDate').value);
            twoWeeksFromEvent.setDate(twoWeeksFromEvent.getDate() + 14);
            repeatUntil.valueAsDate = twoWeeksFromEvent;
          }
        }
      });
      
      // Navigation buttons
      document.getElementById('reportsBtn').addEventListener('click', function() {
        google.script.run.showScheduleReports();
      });
      
      document.getElementById('initWeekBtn').addEventListener('click', function() {
        google.script.run.showInitializeWeekForm();
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', function() {
        document.getElementById('toast').classList.remove('visible');
      });
    }
    
    // Load team members
    function loadTeamMembers() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            teamMembers = result.teamMembers;
            renderTeamMembers();
          } else {
            showToast('Error', result.message || 'Failed to load team members', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading team members:', error);
          showToast('Error', 'Failed to load team members', 'error');
        })
        .getTeamMembers();
    }
    
    // Render team members list
    function renderTeamMembers() {
      const teamMembersList = document.getElementById('teamMembersList');
      teamMembersList.innerHTML = '';
      
      teamMembers.forEach(member => {
        const isSelected = selectedTeamMember === member.id;
        
        const memberElement = document.createElement('div');
        memberElement.className = `team-member ${isSelected ? 'selected' : ''}`;
        memberElement.dataset.id = member.id;
        
        // Get initials for avatar
        const initials = getInitials(member.name);
        
        memberElement.innerHTML = `
          <div class="team-member-avatar">${initials}</div>
          <div class="team-member-details">
            <div class="team-member-name">${member.name}</div>
            <div class="team-member-role">${member.role || 'Team Member'}</div>
          </div>
        `;
        
        // Add click event to select member
        memberElement.addEventListener('click', function() {
          selectTeamMember(member.id);
        });
        
        teamMembersList.appendChild(memberElement);
      });
    }
    
    // Get initials from name
    function getInitials(name) {
      if (!name) return '';
      
      const parts = name.split(' ');
      if (parts.length >= 2) {
        return (parts[0][0] + parts[1][0]).toUpperCase();
      }
      
      return name.substring(0, 2).toUpperCase();
    }
    
    // Select a team member
    function selectTeamMember(memberId) {
      selectedTeamMember = memberId;
      
      // Update UI
      document.querySelectorAll('.team-member').forEach(el => {
        el.classList.toggle('selected', el.dataset.id === memberId);
      });
      
      // Load their schedule
      loadSchedule(memberId);
    }
    
    // Load schedule for a team member
    function loadSchedule(memberId) {
      showLoading();
      
      const startDate = formatDateString(currentWeekStart);
      const endDate = formatDateString(getWeekEnd());
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            scheduleData = result.scheduleData;
            createScheduleGrid();
            updateTeamAvailabilityStats();
          } else {
            showToast('Error', result.message || 'Failed to load schedule', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading schedule:', error);
          showToast('Error', 'Failed to load schedule', 'error');
        })
        .getTeamMemberSchedule(memberId, startDate, endDate);
    }
    
    // Get the end date of the current week
    function getWeekEnd() {
      const weekEnd = new Date(currentWeekStart);
      weekEnd.setDate(currentWeekStart.getDate() + 6);
      return weekEnd;
    }
    
    // Format date as YYYY-MM-DD
    function formatDateString(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
    
    // Create the schedule grid
    function createScheduleGrid() {
           const grid = document.getElementById('scheduleGrid');
      grid.innerHTML = '';
      
      // Get view type
      const viewType = document.getElementById('viewFilter').value;
      
      if (viewType === 'week') {
        createWeekView(grid);
      } else {
        createDayView(grid);
      }
    }
    
    // Create week view
    function createWeekView(grid) {
      // Create header row
      const headerRow = document.createElement('div');
      headerRow.className = 'grid-header time-header';
      headerRow.textContent = 'Time';
      grid.appendChild(headerRow);
      
      // Create day headers
      const today = new Date();
      for (let i = 0; i < 7; i++) {
        const dayDate = new Date(currentWeekStart);
        dayDate.setDate(currentWeekStart.getDate() + i);
        
        const dayHeader = document.createElement('div');
        dayHeader.className = 'grid-header';
        
        const dayName = dayDate.toLocaleDateString('en-US', { weekday: 'short' });
        const dateStr = dayDate.getDate();
        
        const isToday = dayDate.toDateString() === today.toDateString();
        
        dayHeader.innerHTML = `
          <div class="day-header">
            <div class="day-name">${dayName}</div>
            <div class="day-date">${dateStr}</div>
            ${isToday ? '<div class="current-day"></div>' : ''}
          </div>
        `;
        
        grid.appendChild(dayHeader);
      }
      
      // Create time slots
      for (let hour = 0; hour < 24; hour++) {
        // Time label
        const timeCell = document.createElement('div');
        timeCell.className = 'grid-time';
        timeCell.textContent = formatHour(hour);
        grid.appendChild(timeCell);
        
        // Day cells for this hour
        for (let day = 0; day < 7; day++) {
          const dayDate = new Date(currentWeekStart);
          dayDate.setDate(currentWeekStart.getDate() + day);
          
          const dateStr = formatDateString(dayDate);
          const hourStr = hour.toString().padStart(2, '0') + ':00';
          
          const cell = document.createElement('div');
          cell.className = 'grid-cell';
          cell.dataset.date = dateStr;
          cell.dataset.time = hourStr;
          
          // Add events for this cell if they exist
          const eventsForCell = getEventsForDateAndTime(dateStr, hourStr);
          
          eventsForCell.forEach(event => {
            const eventElement = createEventElement(event);
            cell.appendChild(eventElement);
          });
          
          // Add button to add new event if a team member is selected
          if (selectedTeamMember) {
            const addButton = document.createElement('div');
            addButton.className = 'add-event-btn';
            addButton.innerHTML = '<i class="fas fa-plus"></i>';
            
            addButton.addEventListener('click', function() {
              showAddEventModal(dateStr, hourStr);
            });
            
            cell.appendChild(addButton);
          }
          
          grid.appendChild(cell);
        }
      }
    }
    
    // Create day view
    function createDayView(grid) {
      // Create header row
      const headerRow = document.createElement('div');
      headerRow.className = 'grid-header time-header';
      headerRow.textContent = 'Time';
      grid.appendChild(headerRow);
      
      // Create day header (use the middle day of the current week)
      const today = new Date();
      const dayDate = new Date(today);
      
      const dayHeader = document.createElement('div');
      dayHeader.className = 'grid-header';
      dayHeader.style.gridColumn = '2 / span 7';
      
      const dayName = dayDate.toLocaleDateString('en-US', { weekday: 'long' });
      const dateStr = dayDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
      
      dayHeader.innerHTML = `
        <div class="day-header">
          <div class="day-name">${dayName}</div>
          <div class="day-date">${dateStr}</div>
        </div>
      `;
      
      grid.appendChild(dayHeader);
      
      // Create time slots
      for (let hour = 0; hour < 24; hour++) {
        // Time label
        const timeCell = document.createElement('div');
        timeCell.className = 'grid-time';
        timeCell.textContent = formatHour(hour);
        grid.appendChild(timeCell);
        
        // Day cell for this hour
        const cell = document.createElement('div');
        cell.className = 'grid-cell';
        cell.style.gridColumn = '2 / span 7';
        
        const formattedDate = formatDateString(dayDate);
        const hourStr = hour.toString().padStart(2, '0') + ':00';
        
        cell.dataset.date = formattedDate;
        cell.dataset.time = hourStr;
        
        // Add events for this cell if they exist
        const eventsForCell = getEventsForDateAndTime(formattedDate, hourStr);
        
        eventsForCell.forEach(event => {
          const eventElement = createEventElement(event);
          cell.appendChild(eventElement);
        });
        
        // Add button to add new event if a team member is selected
        if (selectedTeamMember) {
          const addButton = document.createElement('div');
          addButton.className = 'add-event-btn';
          addButton.innerHTML = '<i class="fas fa-plus"></i>';
          
          addButton.addEventListener('click', function() {
            showAddEventModal(formattedDate, hourStr);
          });
          
          cell.appendChild(addButton);
        }
        
        grid.appendChild(cell);
      }
    }
    
    // Get events for a specific date and time
    function getEventsForDateAndTime(date, time) {
      if (!scheduleData || !scheduleData.events) return [];
      
      return scheduleData.events.filter(event => {
        return event.date === date && 
               event.startTime <= time && 
               event.endTime > time;
      });
    }
    
    // Create an event element for the grid
    function createEventElement(event) {
      const eventElement = document.createElement('div');
      eventElement.className = `schedule-item ${event.status}`;
      eventElement.textContent = event.title || getDefaultTitleForStatus(event.status);
      eventElement.dataset.eventId = event.id;
      
      // Add click event to edit
      eventElement.addEventListener('click', function(e) {
        e.stopPropagation();
        showEditEventModal(event);
      });
      
      return eventElement;
    }
    
    // Get default title based on status
    function getDefaultTitleForStatus(status) {
      switch(status) {
        case 'available': return 'Available';
        case 'busy': return 'Busy';
        case 'away': return 'Away';
        case 'pto': return 'PTO';
        case 'training': return 'Training';
        case 'meeting': return 'Meeting';
        default: return status.charAt(0).toUpperCase() + status.slice(1);
      }
    }
    
    // Format hour to 12-hour format
    function formatHour(hour) {
      if (hour === 0) return '12 AM';
      if (hour === 12) return '12 PM';
      if (hour < 12) return `${hour} AM`;
      return `${hour - 12} PM`;
    }
    
    // Update team availability stats
    function updateTeamAvailabilityStats() {
      if (!scheduleData || !scheduleData.stats) {
        document.getElementById('teamAvailabilityStats').innerHTML = 'No data available';
        return;
      }
      
      const stats = scheduleData.stats;
      
      // Find the selected team member
      const member = teamMembers.find(m => m.id === selectedTeamMember);
      const memberName = member ? member.name : 'Selected team member';
      
      let html = `
        <h4 style="margin-bottom: 16px;">${memberName}'s Weekly Stats</h4>
        <div style="margin-bottom: 16px;">
          <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
            <span>Available:</span>
            <strong>${stats.availableHours} hours</strong>
          </div>
          <div style="height: 8px; background-color: var(--bg-tertiary); border-radius: 4px; overflow: hidden;">
            <div style="height: 100%; width: ${stats.availablePercentage}%; background-color: var(--available);"></div>
          </div>
        </div>
      `;
      
      // Add stats for each status
      const statuses = ['busy', 'away', 'pto', 'training', 'meeting'];
      
      statuses.forEach(status => {
        const hours = stats[`${status}Hours`] || 0;
        const percentage = stats[`${status}Percentage`] || 0;
        
        if (hours > 0) {
          html += `
            <div style="margin-bottom: 8px;">
              <div style="display: flex; justify-content: space-between; margin-bottom: 4px;">
                <span>${status.charAt(0).toUpperCase() + status.slice(1)}:</span>
                <strong>${hours} hours</strong>
              </div>
              <div style="height: 6px; background-color: var(--bg-tertiary); border-radius: 3px; overflow: hidden;">
                <div style="height: 100%; width: ${percentage}%; background-color: var(--${status});"></div>
              </div>
            </div>
          `;
        }
      });
      
      document.getElementById('teamAvailabilityStats').innerHTML = html;
    }
    
    // Show modal to add a new event
    function showAddEventModal(date, time) {
      // Reset form
      document.getElementById('eventForm').reset();
      
      // Set values
      document.getElementById('eventId').value = '';
      document.getElementById('memberId').value = selectedTeamMember;
      document.getElementById('eventDate').value = date;
      document.getElementById('eventTime').value = time;
      document.getElementById('eventStartTime').value = time;
      
      // Calculate end time (1 hour after start time)
      const startHour = parseInt(time.split(':')[0]);
      const endHour = (startHour + 1) % 24;
      document.getElementById('eventEndTime').value = `${endHour.toString().padStart(2, '0')}:00`;
      
      // Show modal with title for new event
      document.getElementById('eventModalTitle').textContent = 'Add Schedule Event';
      
      // Hide delete button
      document.getElementById('deleteEventBtn').style.display = 'none';
      
      // Show modal
      showModal('eventModal');
    }
    
    // Show modal to edit an existing event
    function showEditEventModal(event) {
      // Reset form
      document.getElementById('eventForm').reset();
      
      // Set event ID
      document.getElementById('eventId').value = event.id;
      document.getElementById('memberId').value = selectedTeamMember;
      document.getElementById('eventDate').value = event.date;
      document.getElementById('eventTime').value = event.startTime;
      
      // Set status
      document.getElementById(`status-${event.status}`).checked = true;
      
      // Set title and notes
      document.getElementById('eventTitle').value = event.title || '';
      document.getElementById('eventNotes').value = event.notes || '';
      
      // Set times
      document.getElementById('eventStartTime').value = event.startTime;
      document.getElementById('eventEndTime').value = event.endTime;
      
      // Set repeat info if available
      if (event.repeat) {
        document.getElementById('repeatEvent').checked = true;
        document.getElementById('repeatOptions').style.display = 'block';
        document.getElementById(`repeat${capitalizeFirstLetter(event.repeatFrequency)}`).checked = true;
        document.getElementById('repeatUntil').value = event.repeatUntil;
      } else {
        document.getElementById('repeatEvent').checked = false;
        document.getElementById('repeatOptions').style.display = 'none';
      }
      
      // Show modal with title for edit
      document.getElementById('eventModalTitle').textContent = 'Edit Schedule Event';
      
      // Show delete button
      document.getElementById('deleteEventBtn').style.display = 'block';
      
      // Show modal
      showModal('eventModal');
    }
    
    // Show modal - generic function
    function showModal(modalId) {
      document.getElementById(modalId).classList.add('visible');
    }
    
    // Hide modal - generic function
    function hideModal(modalId) {
      document.getElementById(modalId).classList.remove('visible');
    }
    
    // Save event
    function saveEvent() {
      // Get values from form
      const eventId = document.getElementById('eventId').value;
      const memberId = document.getElementById('memberId').value;
      const date = document.getElementById('eventDate').value;
      const startTime = document.getElementById('eventStartTime').value;
      const endTime = document.getElementById('eventEndTime').value;
      const title = document.getElementById('eventTitle').value;
      const notes = document.getElementById('eventNotes').value;
      const status = document.querySelector('input[name="status"]:checked').value;
      
      // Check for repeat
      const isRepeating = document.getElementById('repeatEvent').checked;
      let repeatData = null;
      
      if (isRepeating) {
        repeatData = {
          frequency: document.querySelector('input[name="repeatFrequency"]:checked').value,
          until: document.getElementById('repeatUntil').value
        };
      }
      
      // Validate
      if (!memberId || !date || !startTime || !endTime) {
        showToast('Error', 'Missing required fields', 'error');
        return;
      }
      
      // Validate time range
      if (startTime >= endTime && endTime !== '00:00') {
        showToast('Error', 'End time must be after start time', 'error');
        return;
      }
      
      // Prepare event data
      const eventData = {
        id: eventId || null,
        memberId: memberId,
        date: date,
        startTime: startTime,
        endTime: endTime,
        title: title,
        notes: notes,
        status: status,
        repeat: isRepeating ? repeatData : null
      };
      
      // Show loading
      showLoading();
      
      // Call backend to save
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            hideModal('eventModal');
            showToast('Success', 'Schedule event saved successfully', 'success');
            
            // Reload schedule
            loadSchedule(selectedTeamMember);
          } else {
            showToast('Error', result.message || 'Failed to save event', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error saving event:', error);
          showToast('Error', 'Failed to save event: ' + error, 'error');
        })
        .saveScheduleEvent(eventData);
    }
    
    // Delete event
    function deleteEvent() {
      const eventId = document.getElementById('eventId').value;
      
      if (!eventId) {
        showToast('Error', 'No event selected for deletion', 'error');
        return;
      }
      
      if (!confirm('Are you sure you want to delete this event?')) {
        return;
      }
      
      // Show loading
      showLoading();
      
      // Call backend to delete
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            hideModal('eventModal');
            showToast('Success', 'Schedule event deleted successfully', 'success');
            
            // Reload schedule
            loadSchedule(selectedTeamMember);
          } else {
            showToast('Error', result.message || 'Failed to delete event', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error deleting event:', error);
          showToast('Error', 'Failed to delete event: ' + error, 'error');
        })
        .deleteScheduleEvent(eventId);
    }
    
    // Show add team member modal
    function showAddTeamMemberModal() {
      // Clear previous options
      const selectElement = document.getElementById('teamMemberSelect');
      selectElement.innerHTML = '';
      
      // Show loading
      showLoading();
      
      // Get available team members (not already in the schedule view)
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            const availableMembers = result.availableMembers;
            
            if (availableMembers.length === 0) {
              showToast('Info', 'No more team members available to add', 'info');
              return;
            }
            
            // Add options to select
            availableMembers.forEach(member => {
              const option = document.createElement('option');
              option.value = member.id;
              option.textContent = member.name;
              selectElement.appendChild(option);
            });
            
            // Show modal
            showModal('teamMemberModal');
          } else {
            showToast('Error', result.message || 'Failed to load available team members', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading available team members:', error);
          showToast('Error', 'Failed to load available team members', 'error');
        })
        .getAvailableTeamMembers();
    }
    
    // Add selected team member to view
    function addSelectedTeamMember() {
      const selectElement = document.getElementById('teamMemberSelect');
      const memberId = selectElement.value;
      
      if (!memberId) {
        showToast('Error', 'No team member selected', 'error');
        return;
      }
      
      // Add team member to tracked list
      google.script.run
        .withSuccessHandler(function(result) {
          hideModal('teamMemberModal');
          
          if (result.success) {
            showToast('Success', 'Team member added to schedule view', 'success');
            
            // Reload team members list
            loadTeamMembers();
          } else {
            showToast('Error', result.message || 'Failed to add team member', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error adding team member:', error);
          showToast('Error', 'Failed to add team member', 'error');
        })
        .addTeamMemberToSchedule(memberId);
    }
    
    // Helper: Capitalize first letter
    function capitalizeFirstLetter(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      } else if (type === 'info') {
        toastIcon.className = 'toast-icon info';
        iconElement.className = 'fas fa-info-circle';
      } else {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto hide after 5 seconds
      setTimeout(function() {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Initialize Week</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Schedule status colors */
      --available: #10b981;
      --busy: #ef4444;
      --away: #f59e0b;
      --pto: #8b5cf6;
      --training: #3b82f6;
      --meeting: #ec4899;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 800px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .form-hint {
      margin-top: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .form-row {
      display: flex;
      gap: 16px;
    }
    
    .form-col {
      flex: 1;
    }
    
    .form-check {
      display: flex;
      align-items: flex-start;
      gap: 8px;
      margin-bottom: 8px;
    }
    
    .form-check input[type="checkbox"] {
      margin-top: 4px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .form-actions {
      display: flex;
      justify-content: flex-end;
      gap: 12px;
      margin-top: 24px;
    }
    
    .schedule-preview {
      margin-top: 24px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      overflow: hidden;
    }
    
    .schedule-days {
      display: flex;
      flex-wrap: wrap;
      border-bottom: 1px solid var(--border-light);
    }
    
    .schedule-day {
      flex: 1;
      min-width: 100px;
      padding: 12px;
      text-align: center;
      font-weight: 500;
      border-right: 1px solid var(--border-light);
      background-color: var(--bg-secondary);
    }
    
    .schedule-day:last-child {
      border-right: none;
    }
    
    .schedule-hours {
      display: flex;
      flex-wrap: wrap;
    }
    
    .schedule-time {
      flex: 1;
      min-width: 100px;
      padding: 12px;
      text-align: center;
      border-right: 1px solid var(--border-light);
      border-bottom: 1px solid var(--border-light);
    }
    
    .schedule-time:last-child {
      border-right: none;
    }
    
    .schedule-status {
      padding: 4px 8px;
      border-radius: var(--radius-sm);
      font-size: 12px;
      font-weight: 500;
      display: inline-block;
      margin-top: 4px;
    }
    
    .schedule-status.available { 
      background-color: rgba(16, 185, 129, 0.15);
      color: var(--available);
    }
    
    .schedule-status.busy { 
      background-color: rgba(239, 68, 68, 0.15);
      color: var(--busy);
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.2);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .radio-card-group {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
      gap: 16px;
      margin-top: 8px;
    }
    
    .radio-card {
      position: relative;
    }
    
    .radio-card input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .radio-card label {
      display: block;
      padding: 16px;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-medium);
      background-color: white;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .radio-card input[type="radio"]:checked + label {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 2px rgba(85, 64, 175, 0.2);
    }
    
    .pattern-title {
      font-weight: 600;
      margin-bottom: 8px;
    }
    
    .pattern-description {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    .multi-select {
      margin-top: 8px;
    }
    
    .multi-select-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
    }
    
    .select-all {
      font-size: 13px;
      color: var(--primary-color);
      cursor: pointer;
      font-weight: 500;
    }
    
    .member-checkbox-group {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
      gap: 8px;
      max-height: 200px;
      overflow-y: auto;
      padding: 4px;
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
    }
    
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .form-row {
        flex-direction: column;
        gap: 12px;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-calendar-plus"></i> Initialize Week
          </h1>
          <div class="header-subtitle">
            Set up team schedule for the upcoming week
          </div>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="card">
        <div class="card-header">
          <div class="card-title">
            <i class="fas fa-calendar-alt"></i> Week Configuration
          </div>
        </div>
        <div class="card-content">
          <form id="initWeekForm">
            <div class="form-group">
              <label class="form-label" for="weekStartDate">Week Start Date</label>
              <input type="date" id="weekStartDate" class="form-control">
              <div class="form-hint">Select any day of the week you want to initialize. The system will create a full 7-day schedule.</div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Schedule Pattern</label>
              <div class="radio-card-group">
                <div class="radio-card">
                  <input type="radio" id="pattern-default" name="pattern" value="default" checked>
                  <label for="pattern-default">
                    <div class="pattern-title">Default</div>
                    <div class="pattern-description">Standard 24/7 coverage with regular shifts</div>
                  </label>
                </div>
                
                <div class="radio-card">
                  <input type="radio" id="pattern-weekend" name="pattern" value="weekend">
                  <label for="pattern-weekend">
                    <div class="pattern-title">Weekend Coverage</div>
                    <div class="pattern-description">Increased staffing for weekend hours</div>
                  </label>
                </div>
                
                <div class="radio-card">
                  <input type="radio" id="pattern-holiday" name="pattern" value="holiday">
                  <label for="pattern-holiday">
                    <div class="pattern-title">Holiday Week</div>
                    <div class="pattern-description">Adjusted coverage for holiday periods</div>
                  </label>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Team Members</label>
              <div class="form-hint">Select team members to include in this week's schedule</div>
              
              <div class="multi-select">
                <div class="multi-select-header">
                  <div class="select-all" id="selectAllMembers">Select All</div>
                </div>
                
                <div class="member-checkbox-group" id="membersList">
                  <!-- Will be populated with team members -->
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <div class="form-check">
                <input type="checkbox" id="copyPreviousWeek">
                <label for="copyPreviousWeek">Copy settings from previous week (if available)</label>
              </div>
              
              <div class="form-check">
                <input type="checkbox" id="includeStandingEvents">
                <label for="includeStandingEvents">Include standing events (recurring meetings, trainings, etc.)</label>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="schedulingNotes">Scheduling Notes</label>
              <textarea class="form-control" id="schedulingNotes" rows="3" placeholder="Add any notes or special instructions for this week's schedule"></textarea>
            </div>
            
            <div class="form-actions">
              <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
              <button type="submit" class="btn btn-primary" id="submitBtn">
                <i class="fas fa-calendar-check"></i> Initialize Week
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Operation completed successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let teamMembers = [];
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set default date to next Monday
      setDefaultDate();
      
      // Setup event listeners
      setupEventListeners();
      
      // Load team members
      loadTeamMembers();
    });
    
    // Set default date to next Monday
    function setDefaultDate() {
      const today = new Date();
      const nextMonday = new Date(today);
      const daysUntilNextMonday = (1 + 7 - today.getDay()) % 7 || 7; // 1 = Monday
      
      nextMonday.setDate(today.getDate() + daysUntilNextMonday);
      
      // Format date for input (YYYY-MM-DD)
      const formattedDate = nextMonday.toISOString().split('T')[0];
      document.getElementById('weekStartDate').value = formattedDate;
    }
    
    // Setup all event listeners
    function setupEventListeners() {
      // Form submission
      document.getElementById('initWeekForm').addEventListener('submit', function(e) {
        e.preventDefault();
        initializeWeek();
      });
      
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', function() {
        if (confirm('Are you sure you want to cancel? Any changes will be lost.')) {
          google.script.host.close();
        }
      });
      
      // Select all members
      document.getElementById('selectAllMembers').addEventListener('click', function() {
        const checkboxes = document.querySelectorAll('#membersList input[type="checkbox"]');
        const allChecked = Array.from(checkboxes).every(cb => cb.checked);
        
        checkboxes.forEach(cb => {
          cb.checked = !allChecked;
        });
        
        this.textContent = allChecked ? 'Select All' : 'Deselect All';
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', function() {
        document.getElementById('toast').classList.remove('visible');
      });
    }
    
    // Load team members
    function loadTeamMembers() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            teamMembers = result.teamMembers;
            renderTeamMembersList();
          } else {
            showToast('Error', result.message || 'Failed to load team members', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading team members:', error);
          showToast('Error', 'Failed to load team members', 'error');
        })
        .getTeamMembers();
    }
    
    // Render team members list with checkboxes
    function renderTeamMembersList() {
      const container = document.getElementById('membersList');
      container.innerHTML = '';
      
      if (teamMembers.length === 0) {
        container.innerHTML = '<div style="padding: 10px; color: var(--text-tertiary);">No team members found</div>';
        return;
      }
      
      teamMembers.forEach(member => {
        const checkboxDiv = document.createElement('div');
        checkboxDiv.className = 'form-check';
        
        checkboxDiv.innerHTML = `
          <input type="checkbox" id="member-${member.id}" name="members[]" value="${member.id}" checked>
          <label for="member-${member.id}">${member.name}</label>
        `;
        
        container.appendChild(checkboxDiv);
      });
    }
    
    // Initialize week
    function initializeWeek() {
      // Get form values
      const weekStartDate = document.getElementById('weekStartDate').value;
      const pattern = document.querySelector('input[name="pattern"]:checked').value;
      const copyPrevious = document.getElementById('copyPreviousWeek').checked;
      const includeStanding = document.getElementById('includeStandingEvents').checked;
      const notes = document.getElementById('schedulingNotes').value;
      
      // Get selected team members
      const selectedMembers = Array.from(
        document.querySelectorAll('#membersList input[type="checkbox"]:checked')
      ).map(cb => cb.value);
      
      // Validate
      if (!weekStartDate) {
        showToast('Error', 'Please select a week start date', 'error');
        return;
      }
      
      if (selectedMembers.length === 0) {
        showToast('Error', 'Please select at least one team member', 'error');
        return;
      }
      
      // Create week data
      const weekData = {
        startDate: weekStartDate,
        pattern: pattern,
        copyPreviousWeek: copyPrevious,
        includeStandingEvents: includeStanding,
        notes: notes,
        teamMembers: selectedMembers
      };
      
      // Show loading
      showLoading();
      
      // Submit data
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Week initialized successfully', 'success');
            
            // Close modal after a delay
            setTimeout(function() {
              google.script.run.showScheduleManager();
            }, 2000);
          } else {
            showToast('Error', result.message || 'Failed to initialize week', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error initializing week:', error);
          showToast('Error', 'Failed to initialize week: ' + error, 'error');
        })
        .initializeScheduleWeek(weekData);
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      } else {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto hide after 5 seconds
      setTimeout(function() {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>





<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Schedule Reports</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Schedule status colors */
      --available: #10b981;
      --busy: #ef4444;
      --away: #f59e0b;
      --pto: #8b5cf6;
      --training: #3b82f6;
      --meeting: #ec4899;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .filters {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      margin-bottom: 24px;
    }
    
    .filter-group {
      flex: 1;
      min-width: 200px;
    }
    
    .filter-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .filter-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .filter-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .chart-container {
      position: relative;
      height: 400px;
      width: 100%;
    }
    
    .tabs {
      display: flex;
      border-bottom: 1px solid var(--border-medium);
      margin-bottom: 24px;
      overflow-x: auto;
    }
    
    .tab {
      padding: 12px 20px;
      cursor: pointer;
      font-weight: 500;
      color: var(--text-secondary);
      position: relative;
      transition: color var(--transition-fast);
      white-space: nowrap;
    }
    
    .tab:hover {
      color: var(--primary-color);
    }
    
    .tab.active {
      color: var(--primary-color);
    }
    
    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      right: 0;
      height: 2px;
      background-color: var(--primary-color);
    }
    
    .tab-content {
      display: none;
    }
    
    .tab-content.active {
      display: block;
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 16px;
      margin-bottom: 24px;
    }
    
    .stat-card {
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-sm);
      padding: 20px;
      text-align: center;
      border-top: 4px solid var(--primary-color);
      transition: transform var(--transition-fast), box-shadow var(--transition-fast);
    }
    
    .stat-card:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .stat-value {
      font-family: 'Manrope', sans-serif;
      font-size: 28px;
      font-weight: 700;
      margin-bottom: 8px;
    }
    
    .stat-label {
      color: var(--text-secondary);
      font-size: 14px;
    }
    
    .stat-trend {
            display: flex;
      align-items: center;
      justify-content: center;
      gap: 4px;
      margin-top: 8px;
      font-size: 12px;
    }
    
    .trend-up {
      color: var(--success-color);
    }
    
    .trend-down {
      color: var(--danger-color);
    }
    
    .team-schedule-grid {
      overflow-x: auto;
      margin-top: 24px;
    }
    
    .schedule-table {
      width: 100%;
      min-width: 800px;
      border-collapse: collapse;
    }
    
    .schedule-table th,
    .schedule-table td {
      padding: 12px;
      text-align: center;
      border: 1px solid var(--border-light);
    }
    
    .schedule-table th {
      background-color: var(--bg-secondary);
      font-weight: 600;
    }
    
    .schedule-table tbody tr:nth-child(odd) {
      background-color: var(--bg-primary);
    }
    
    .schedule-table tbody tr:hover {
      background-color: var(--bg-secondary);
    }
    
    .status-badge {
      padding: 4px 8px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 500;
    }
    
    .status-badge.available {
      background-color: rgba(16, 185, 129, 0.15);
      color: var(--available);
    }
    
    .status-badge.busy {
      background-color: rgba(239, 68, 68, 0.15);
      color: var(--busy);
    }
    
    .status-badge.away {
      background-color: rgba(245, 158, 11, 0.15);
      color: var(--away);
    }
    
    .status-badge.pto {
      background-color: rgba(139, 92, 246, 0.15);
      color: var(--pto);
    }
    
    .status-badge.training {
      background-color: rgba(59, 130, 246, 0.15);
      color: var(--training);
    }
    
    .status-badge.meeting {
      background-color: rgba(236, 72, 153, 0.15);
      color: var(--meeting);
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.2);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    .coverage-timeline {
      height: 80px;
      width: 100%;
      display: flex;
      margin: 20px 0;
    }
    
    .time-block {
      flex: 1;
      height: 100%;
      background-color: var(--bg-tertiary);
      border: 1px solid white;
      position: relative;
      transition: all var(--transition-fast);
    }
    
    .time-block:hover {
      transform: scaleY(1.1);
      z-index: 1;
    }
    
    .time-block-label {
      position: absolute;
      bottom: -24px;
      left: 50%;
      transform: translateX(-50%);
      font-size: 10px;
      color: var(--text-tertiary);
      white-space: nowrap;
    }
    
    .time-block-coverage {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      font-size: 12px;
      font-weight: 600;
      padding: 4px 0;
      text-align: center;
      color: white;
    }
    
    .time-legend {
      display: flex;
      justify-content: center;
      gap: 12px;
      flex-wrap: wrap;
      margin-top: 32px;
    }
    
    .legend-item {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 12px;
    }
    
    .legend-color {
      width: 16px;
      height: 16px;
    }
    
    .export-actions {
      display: flex;
      justify-content: flex-end;
      gap: 12px;
      margin-top: 24px;
    }
    
    .insights-list {
      margin-top: 24px;
    }
    
    .insight-card {
      padding: 16px;
      border-radius: var(--radius-md);
      margin-bottom: 16px;
      display: flex;
      align-items: flex-start;
      gap: 16px;
    }
    
    .insight-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      font-size: 18px;
    }
    
    .insight-content {
      flex: 1;
    }
    
    .insight-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .insight-description {
      color: var(--text-secondary);
    }
    
    .insight-card.info {
      background-color: var(--info-light);
    }
    
    .insight-card.info .insight-icon {
      background-color: var(--info-color);
      color: white;
    }
    
    .insight-card.success {
      background-color: var(--success-light);
    }
    
    .insight-card.success .insight-icon {
      background-color: var(--success-color);
      color: white;
    }
    
    .insight-card.warning {
      background-color: var(--warning-light);
    }
    
    .insight-card.warning .insight-icon {
      background-color: var(--warning-color);
      color: white;
    }
    
    .date-range-selector {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 24px;
    }
    
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .stats-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-chart-bar"></i> Schedule Reports
          </h1>
          <div class="header-subtitle">
            Analyze team schedules and coverage
          </div>
        </div>
        <div class="header-actions">
          <button class="btn btn-secondary" id="manageScheduleBtn">
            <i class="fas fa-calendar-alt"></i> Manage Schedule
          </button>
          <button class="btn btn-primary" id="exportBtn">
            <i class="fas fa-file-export"></i> Export
          </button>
        </div>
      </div>
    </header>
    
    <div class="content">
      <!-- Filter Controls -->
      <div class="filters">
        <div class="filter-group">
          <label class="filter-label" for="dateRangeFilter">Date Range</label>
          <select class="filter-control" id="dateRangeFilter">
            <option value="current-week">Current Week</option>
            <option value="next-week">Next Week</option>
            <option value="last-week">Previous Week</option>
            <option value="current-month">Current Month</option>
            <option value="custom">Custom Range</option>
          </select>
        </div>
        
        <div class="filter-group" id="customDateContainer" style="display: none;">
          <label class="filter-label">Custom Range</label>
          <div style="display: flex; gap: 8px;">
            <input type="date" class="filter-control" id="startDateFilter">
            <input type="date" class="filter-control" id="endDateFilter">
          </div>
        </div>
        
        <div class="filter-group">
          <label class="filter-label" for="teamFilter">Team</label>
          <select class="filter-control" id="teamFilter">
            <option value="all">All Teams</option>
            <!-- Team options will be populated dynamically -->
          </select>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">&nbsp;</label>
          <button class="btn btn-primary" id="applyFiltersBtn" style="width: 100%;">
            <i class="fas fa-search"></i> Apply Filters
          </button>
        </div>
      </div>
      
      <!-- Tabs -->
      <div class="tabs">
        <div class="tab active" data-tab="overview">Overview</div>
        <div class="tab" data-tab="coverage">Coverage Analysis</div>
        <div class="tab" data-tab="team">Team Schedule</div>
        <div class="tab" data-tab="insights">Insights</div>
      </div>
      
      <!-- Overview Tab -->
      <div class="tab-content active" id="overview-tab">
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value" id="coverageRateValue">0%</div>
            <div class="stat-label">Coverage Rate</div>
            <div class="stat-trend trend-up" id="coverageTrend">
              <i class="fas fa-arrow-up"></i> 0%
            </div>
          </div>
          
          <div class="stat-card">
            <div class="stat-value" id="scheduledHoursValue">0</div>
            <div class="stat-label">Total Scheduled Hours</div>
          </div>
          
          <div class="stat-card">
            <div class="stat-value" id="avgDailyStaffValue">0</div>
            <div class="stat-label">Avg. Daily Staff</div>
          </div>
          
          <div class="stat-card">
            <div class="stat-value" id="ptoHoursValue">0</div>
            <div class="stat-label">PTO Hours</div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-line"></i> Daily Coverage
            </div>
          </div>
          <div class="card-content">
            <div class="chart-container">
              <canvas id="coverageChart"></canvas>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-pie"></i> Schedule Distribution
            </div>
          </div>
          <div class="card-content">
            <div class="chart-container">
              <canvas id="scheduleDistributionChart"></canvas>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Coverage Analysis Tab -->
      <div class="tab-content" id="coverage-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-users"></i> Hourly Coverage
            </div>
          </div>
          <div class="card-content">
            <div class="chart-container">
              <canvas id="hourlyCoverageChart"></canvas>
            </div>
            
            <h3 style="margin-top: 32px; margin-bottom: 16px;">24-Hour Coverage Timeline</h3>
            
            <div class="coverage-timeline" id="coverageTimeline">
              <!-- Will be populated dynamically -->
            </div>
            
            <div class="time-legend">
              <div class="legend-item">
                <div class="legend-color" style="background-color: #10b981;"></div>
                <span>Optimal Coverage (3+ staff)</span>
              </div>
              <div class="legend-item">
                <div class="legend-color" style="background-color: #f59e0b;"></div>
                <span>Minimal Coverage (1-2 staff)</span>
              </div>
              <div class="legend-item">
                <div class="legend-color" style="background-color: #ef4444;"></div>
                <span>No Coverage (0 staff)</span>
              </div>
            </div>
            
            <div style="margin-top: 32px;">
              <h3 style="margin-bottom: 16px;">Coverage Analysis</h3>
              <div id="coverageAnalysisContent">
                <!-- Will be populated with coverage analysis -->
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Team Schedule Tab -->
      <div class="tab-content" id="team-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-calendar-alt"></i> Team Schedule
            </div>
          </div>
          <div class="card-content">
            <div class="team-schedule-grid">
              <table class="schedule-table" id="teamScheduleTable">
                <thead>
                  <tr>
                    <th>Team Member</th>
                    <th>Sunday</th>
                    <th>Monday</th>
                    <th>Tuesday</th>
                    <th>Wednesday</th>
                    <th>Thursday</th>
                    <th>Friday</th>
                    <th>Saturday</th>
                  </tr>
                </thead>
                <tbody id="teamScheduleBody">
                  <!-- Will be populated with team schedule data -->
                </tbody>
              </table>
            </div>
            
            <div style="margin-top: 24px;">
              <h3 style="margin-bottom: 16px;">Schedule Statistics</h3>
              <div id="scheduleStatsContent">
                <!-- Will be populated with schedule statistics -->
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Insights Tab -->
      <div class="tab-content" id="insights-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-lightbulb"></i> Schedule Insights
            </div>
          </div>
          <div class="card-content">
            <div id="noInsights" style="display: none; text-align: center; padding: 40px 0; color: var(--text-tertiary);">
              <i class="fas fa-search" style="font-size: 48px; margin-bottom: 16px; opacity: 0.5;"></i>
              <h3>No insights available</h3>
              <p>Not enough schedule data to generate insights.</p>
            </div>
            
            <div class="insights-list" id="insightsList">
              <!-- Will be populated with insights -->
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-area"></i> Trend Analysis
            </div>
          </div>
          <div class="card-content">
            <div class="chart-container">
              <canvas id="trendAnalysisChart"></canvas>
            </div>
          </div>
        </div>
      </div>
      
      <div class="export-actions">
        <button class="btn btn-secondary" id="printReportBtn">
          <i class="fas fa-print"></i> Print Report
        </button>
        <button class="btn btn-primary" id="exportDataBtn">
          <i class="fas fa-file-export"></i> Export Data
        </button>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Operation completed successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let scheduleData = null;
    let charts = {};
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Setup event listeners
      setupEventListeners();
      
      // Set default dates
      setDefaultDates();
      
      // Load teams for filter
      loadTeams();
      
      // Load initial data for current week
      loadScheduleData('current-week');
    });
    
    // Setup all event listeners
    function setupEventListeners() {
      // Tab switching
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          
          // Update active states
          document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
          this.classList.add('active');
          
          document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
          });
          document.getElementById(`${tabId}-tab`).classList.add('active');
        });
      });
      
      // Date range filter change
      document.getElementById('dateRangeFilter').addEventListener('change', function() {
        const customDateContainer = document.getElementById('customDateContainer');
        
        if (this.value === 'custom') {
          customDateContainer.style.display = 'block';
        } else {
          customDateContainer.style.display = 'none';
        }
      });
      
      // Apply filters button
      document.getElementById('applyFiltersBtn').addEventListener('click', function() {
        const dateRange = document.getElementById('dateRangeFilter').value;
        const teamId = document.getElementById('teamFilter').value;
        
        // If custom date range, validate dates
        if (dateRange === 'custom') {
          const startDate = document.getElementById('startDateFilter').value;
          const endDate = document.getElementById('endDateFilter').value;
          
          if (!startDate || !endDate) {
            showToast('Error', 'Please select both start and end dates', 'error');
            return;
          }
          
          if (new Date(startDate) > new Date(endDate)) {
            showToast('Error', 'Start date cannot be after end date', 'error');
            return;
          }
          
          loadScheduleData(dateRange, { startDate, endDate, teamId });
        } else {
          loadScheduleData(dateRange, { teamId });
        }
      });
      
      // Buttons for navigating to other sections
      document.getElementById('manageScheduleBtn').addEventListener('click', function() {
        google.script.run.showScheduleManager();
      });
      
      // Export button
      document.getElementById('exportBtn').addEventListener('click', function() {
        exportScheduleReport();
      });
      
      // Print report button
      document.getElementById('printReportBtn').addEventListener('click', function() {
        printScheduleReport();
      });
      
      // Export data button
      document.getElementById('exportDataBtn').addEventListener('click', function() {
        exportScheduleData();
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', function() {
        document.getElementById('toast').classList.remove('visible');
      });
    }
    
    // Set default dates for custom date range
    function setDefaultDates() {
      const today = new Date();
      
      // Start date: Monday of current week
      const startDate = new Date(today);
      const day = startDate.getDay();
      const diff = startDate.getDate() - day + (day === 0 ? -6 : 1);
      startDate.setDate(diff);
      
      // End date: Sunday of current week
      const endDate = new Date(startDate);
      endDate.setDate(startDate.getDate() + 6);
      
      // Set dates
      document.getElementById('startDateFilter').valueAsDate = startDate;
      document.getElementById('endDateFilter').valueAsDate = endDate;
    }
    
    // Load teams for filter
    function loadTeams() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            populateTeamsFilter(result.teams);
          } else {
            showToast('Error', result.message || 'Failed to load teams', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading teams:', error);
          showToast('Error', 'Failed to load teams', 'error');
        })
        .getTeams();
    }
    
    // Populate teams dropdown
    function populateTeamsFilter(teams) {
      const teamFilter = document.getElementById('teamFilter');
      
      // Keep the "All Teams" option
      const allTeamsOption = teamFilter.options[0];
      teamFilter.innerHTML = '';
      teamFilter.appendChild(allTeamsOption);
      
      // Add team options
      teams.forEach(team => {
        const option = document.createElement('option');
        option.value = team.id;
        option.textContent = team.name;
        teamFilter.appendChild(option);
      });
    }
    
    // Load schedule data
    function loadScheduleData(dateRange, options = {}) {
      showLoading();
      
      const params = {
        dateRange: dateRange,
        ...options
      };
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            scheduleData = result.data;
            renderScheduleData();
          } else {
            showToast('Error', result.message || 'Failed to load schedule data', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error loading schedule data:', error);
          showToast('Error', 'Failed to load schedule data', 'error');
        })
        .getScheduleReportData(params);
    }
    
    // Render all schedule data
    function renderScheduleData() {
      if (!scheduleData) {
        showToast('Error', 'No schedule data available', 'error');
        return;
      }
      
      // Update stats
      updateOverviewStats();
      
      // Initialize charts
      initCharts();
      
      // Render team schedule
      renderTeamSchedule();
      
      // Render coverage analysis
      renderCoverageAnalysis();
      
      // Render insights
      renderInsights();
    }
    
    // Update overview stats
    function updateOverviewStats() {
      const stats = scheduleData.stats || {};
      
      // Update stats values
      document.getElementById('coverageRateValue').textContent = `${(stats.coverageRate || 0).toFixed(0)}%`;
      document.getElementById('scheduledHoursValue').textContent = stats.scheduledHours || 0;
      document.getElementById('avgDailyStaffValue').textContent = stats.avgDailyStaff || 0;
      document.getElementById('ptoHoursValue').textContent = stats.ptoHours || 0;
      
      // Update trend
      const trendElement = document.getElementById('coverageTrend');
      const trendValue = stats.coverageTrend || 0;
      
      if (trendValue > 0) {
        trendElement.className = 'stat-trend trend-up';
        trendElement.innerHTML = `<i class="fas fa-arrow-up"></i> ${trendValue.toFixed(1)}%`;
      } else if (trendValue < 0) {
        trendElement.className = 'stat-trend trend-down';
        trendElement.innerHTML = `<i class="fas fa-arrow-down"></i> ${Math.abs(trendValue).toFixed(1)}%`;
      } else {
        trendElement.className = 'stat-trend';
        trendElement.innerHTML = `<i class="fas fa-minus"></i> 0.0%`;
      }
    }
    
    // Initialize all charts
    function initCharts() {
      // Coverage Chart (Line chart)
      initCoverageChart();
      
      // Schedule Distribution Chart (Pie chart)
      initScheduleDistributionChart();
      
      // Hourly Coverage Chart (Bar chart)
      initHourlyCoverageChart();
      
      // Trend Analysis Chart (Line chart)
      initTrendAnalysisChart();
      
      // Coverage Timeline
      renderCoverageTimeline();
    }
    
    // Initialize coverage chart
    function initCoverageChart() {
      const ctx = document.getElementById('coverageChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (charts.coverage) {
        charts.coverage.destroy();
      }
      
      // Get coverage data
      const coverageData = scheduleData.coverageByDay || [];
      const labels = coverageData.map(item => item.date);
      const data = coverageData.map(item => item.coverage);
      const targetData = coverageData.map(item => item.target || 100);
      
      // Create chart
      charts.coverage = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Coverage Rate',
              data: data,
              borderColor: 'rgba(85, 64, 175, 1)',
              backgroundColor: 'rgba(85, 64, 175, 0.1)',
              tension: 0.3,
              fill: true,
              pointBackgroundColor: 'rgba(85, 64, 175, 1)',
              pointRadius: 4,
              pointHoverRadius: 6
            },
            {
              label: 'Target',
              data: targetData,
              borderColor: 'rgba(239, 68, 68, 0.6)',
              borderDash: [5, 5],
              borderWidth: 2,
              pointRadius: 0,
              fill: false
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            tooltip: {
              mode: 'index',
              intersect: false,
              callbacks: {
                label: function(context) {
                  if (context.dataset.label === 'Coverage Rate') {
                    return `Coverage: ${context.parsed.y}%`;
                  }
                  return `Target: ${context.parsed.y}%`;
                }
              }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              max: 100,
              title: {
                display: true,
                text: 'Coverage (%)'
              }
            }
          }
        }
      });
    }
    
    // Initialize schedule distribution chart
    function initScheduleDistributionChart() {
      const ctx = document.getElementById('scheduleDistributionChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (charts.scheduleDistribution) {
        charts.scheduleDistribution.destroy();
      }
      
      // Get distribution data
      const distribution = scheduleData.statusDistribution || {};
      
      // Define status colors
      const statusColors = {
        'available': 'rgba(16, 185, 129, 0.8)',
        'busy': 'rgba(239, 68, 68, 0.8)',
        'away': 'rgba(245, 158, 11, 0.8)',
        'pto': 'rgba(139, 92, 246, 0.8)',
        'training': 'rgba(59, 130, 246, 0.8)',
        'meeting': 'rgba(236, 72, 153, 0.8)'
      };
      
      // Status labels
      const statusLabels = {
        'available': 'Available',
        'busy': 'Busy',
        'away': 'Away',
        'pto': 'PTO',
        'training': 'Training',
        'meeting': 'Meeting'
      };
      
      // Prepare chart data
      const labels = [];
      const data = [];
      const backgroundColor = [];
      
      Object.keys(distribution).forEach(status => {
        const hours = distribution[status];
        
        if (hours > 0) {
          labels.push(statusLabels[status] || status);
          data.push(hours);
          backgroundColor.push(statusColors[status] || 'rgba(100, 116, 139, 0.8)');
        }
      });
      
      // Create chart
      charts.scheduleDistribution = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: labels,
          datasets: [{
            data: data,
            backgroundColor: backgroundColor,
            borderWidth: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'right',
              labels: {
                boxWidth: 12,
                padding: 20
              }
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const value = context.parsed;
                  const label = context.label || '';
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value / total) * 100);
                  return `${label}: ${value} hours (${percentage}%)`;
                }
              }
            }
          },
          cutout: '60%'
        }
      });
    }
    
    // Initialize hourly coverage chart
    function initHourlyCoverageChart() {
      const ctx = document.getElementById('hourlyCoverageChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (charts.hourlyCoverage) {
        charts.hourlyCoverage.destroy();
      }
      
      // Get hourly coverage data
      const hourlyCoverage = scheduleData.hourlyCoverage || [];
      const hourLabels = hourlyCoverage.map(item => item.hour);
      const coverageData = hourlyCoverage.map(item => item.staffCount);
      
      // Create chart
      charts.hourlyCoverage = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: hourLabels.map(hour => formatHourLabel(hour)),
          datasets: [{
            label: 'Staff on Duty',
            data: coverageData,
            backgroundColor: function(context) {
              const value = context.dataset.data[context.dataIndex];
              if (value === 0) return 'rgba(239, 68, 68, 0.7)';
              if (value <= 2) return 'rgba(245, 158, 11, 0.7)';
              return 'rgba(16, 185, 129, 0.7)';
            }
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Number of Staff'
              },
              ticks: {
                stepSize: 1
              }
            }
          },
          plugins: {
            legend: {
              display: false
            }
          }
        }
      });
    }
    
    // Initialize trend analysis chart
    function initTrendAnalysisChart() {
      const ctx = document.getElementById('trendAnalysisChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (charts.trendAnalysis) {
        charts.trendAnalysis.destroy();
      }
      
      // Get trend data
      const trendData = scheduleData.trends || {};
      const weeks = trendData.weeks || [];
      const coverageTrend = trendData.coverage || [];
      const ptoTrend = trendData.pto || [];
      const staffingTrend = trendData.staffing || [];
      
      // Create chart
      charts.trendAnalysis = new Chart(ctx, {
        type: 'line',
        data: {
          labels: weeks,
          datasets: [
            {
              label: 'Coverage Rate',
              data: coverageTrend,
              borderColor: 'rgba(16, 185, 129, 1)',
              backgroundColor: 'rgba(16, 185, 129, 0)',
              tension: 0.3,
              yAxisID: 'y'
            },
            {
              label: 'Avg. Daily Staff',
              data: staffingTrend,
              borderColor: 'rgba(85, 64, 175, 1)',
              backgroundColor: 'rgba(85, 64, 175, 0)',
              tension: 0.3,
              yAxisID: 'y1'
            },
            {
              label: 'PTO Hours',
              data: ptoTrend,
              borderColor: 'rgba(139, 92, 246, 1)',
              backgroundColor: 'rgba(139, 92, 246, 0)',
              borderDash: [5, 5],
              tension: 0.3,
              yAxisID: 'y2'
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            mode: 'index',
            intersect: false
          },
          scales: {
            y: {
              type: 'linear',
              display: true,
              position: 'left',
              title: {
                display: true,
                text: 'Coverage Rate (%)'
              },
              max: 100,
              min: 0
            },
            y1: {
              type: 'linear',
              display: true,
              position: 'right',
              title: {
                display: true,
                text: 'Avg. Daily Staff'
              },
              min: 0,
              grid: {
                drawOnChartArea: false
              }
            },
            y2: {
              type: 'linear',
              display: true,
              position: 'right',
              title: {
                display: true,
                text: 'PTO Hours'
              },
              min: 0,
              grid: {
                drawOnChartArea: false
              }
            }
          }
        }
      });
    }
    
    // Render coverage timeline
    function renderCoverageTimeline() {
      const container = document.getElementById('coverageTimeline');
      container.innerHTML = '';
      
      // Get hourly coverage data
      const hourlyCoverage = scheduleData.hourlyCoverage || [];
      
      // Create a block for each hour
      hourlyCoverage.forEach(hourData => {
        const timeBlock = document.createElement('div');
        timeBlock.className = 'time-block';
        
        // Set block color based on coverage
        if (hourData.staffCount === 0) {
          timeBlock.style.backgroundColor = '#ef4444';
        } else if (hourData.staffCount <= 2) {
          timeBlock.style.backgroundColor = '#f59e0b';
        } else {
          timeBlock.style.backgroundColor = '#10b981';
        }
        
        // Add label
        const label = document.createElement('div');
        label.className = 'time-block-label';
        label.textContent = formatHourLabel(hourData.hour);
        timeBlock.appendChild(label);
        
        // Add coverage count
        const coverage = document.createElement('div');
        coverage.className = 'time-block-coverage';
        coverage.textContent = hourData.staffCount;
        timeBlock.appendChild(coverage);
        
        // Add tooltip
        timeBlock.title = `${hourData.staffCount} staff on duty at ${formatHourLabel(hourData.hour)}`;
        
        container.appendChild(timeBlock);
      });
    }
    
    // Render team schedule
    function renderTeamSchedule() {
      const tableBody = document.getElementById('teamScheduleBody');
      tableBody.innerHTML = '';
      
      // Get team schedule data
      const scheduleByMember = scheduleData.scheduleByMember || [];
      
      if (scheduleByMember.length === 0) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="8" style="text-align: center; padding: 32px; color: var(--text-tertiary);">
              No schedule data available for the selected period
            </td>
          </tr>
        `;
        return;
      }
      
      // Create row for each team member
      scheduleByMember.forEach(member => {
        const row = document.createElement('tr');
        
        // Add name cell
        const nameCell = document.createElement('td');
        nameCell.textContent = member.name;
        row.appendChild(nameCell);
        
        // Add cells for each day
        member.schedule.forEach(day => {
          const cell = document.createElement('td');
          
          if (day.status) {
            const statusBadge = document.createElement('div');
            statusBadge.className = `status-badge ${day.status}`;
            statusBadge.textContent = day.title || capitalizeFirstLetter(day.status);
            cell.appendChild(statusBadge);
            
            if (day.hours) {
              const hoursText = document.createElement('div');
              hoursText.style.fontSize = '12px';
              hoursText.style.marginTop = '4px';
              hoursText.style.color = 'var(--text-tertiary)';
              hoursText.textContent = `${day.hours} hrs`;
              cell.appendChild(hoursText);
            }
          }
          
          row.appendChild(cell);
        });
        
        tableBody.appendChild(row);
      });
      
      // Render schedule statistics
      renderScheduleStats();
    }
    
    // Render schedule statistics
    function renderScheduleStats() {
      const container = document.getElementById('scheduleStatsContent');
      const stats = scheduleData.scheduleStats || {};
      
      let html = `
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px; margin-bottom: 16px;">
          <div style="background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md);">
            <div style="font-size: 24px; font-weight: 600; color: var(--primary-color);">${stats.totalMembers || 0}</div>
            <div style="color: var(--text-secondary); font-size: 14px;">Team Members Scheduled</div>
          </div>
          <div style="background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md);">
            <div style="font-size: 24px; font-weight: 600; color: var(--available);">${stats.availabilityRate || 0}%</div>
            <div style="color: var(--text-secondary); font-size: 14px;">Overall Availability Rate</div>
          </div>
          <div style="background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md);">
            <div style="font-size: 24px; font-weight: 600; color: var(--pto);">${stats.ptoPercentage || 0}%</div>
            <div style="color: var(--text-secondary); font-size: 14px;">Time on PTO</div>
          </div>
        </div>
      `;
      
      container.innerHTML = html;
    }
    
    // Render coverage analysis
    function renderCoverageAnalysis() {
      const container = document.getElementById('coverageAnalysisContent');
      const analysis = scheduleData.coverageAnalysis || {};
      
      let html = `
        <div style="margin-bottom: 24px;">
          <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 16px;">
            <div style="background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md);">
              <div style="font-size: 20px; font-weight: 600; color: var(--available);">${analysis.optimalHours || 0}</div>
              <div style="color: var(--text-secondary); font-size: 14px;">Hours with Optimal Coverage</div>
            </div>
            <div style="background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md);">
              <div style="font-size: 20px; font-weight: 600; color: var(--warning-color);">${analysis.minimalHours || 0}</div>
              <div style="color: var(--text-secondary); font-size: 14px;">Hours with Minimal Coverage</div>
            </div>
            <div style="background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md);">
              <div style="font-size: 20px; font-weight: 600; color: var(--danger-color);">${analysis.noCoverageHours || 0}</div>
              <div style="color: var(--text-secondary); font-size: 14px;">Hours with No Coverage</div>
            </div>
          </div>
        </div>
      `;
      
      // Add critical hours
      if (analysis.criticalHours && analysis.criticalHours.length > 0) {
        html += `
          <div style="margin-bottom: 16px;">
            <h4 style="margin-bottom: 8px;">Critical Hours (No Coverage)</h4>
            <div style="background-color: var(--danger-light); border-radius: var(--radius-md); padding: 16px;">
              <ul style="margin: 0; padding-left: 20px;">
        `;
        
        analysis.criticalHours.forEach(hour => {
          html += `<li>${hour}</li>`;
        });
        
        html += `
              </ul>
            </div>
          </div>
        `;
      }
      
      // Add recommendations
      if (analysis.recommendations && analysis.recommendations.length > 0) {
        html += `
          <div>
            <h4 style="margin-bottom: 8px;">Recommendations</h4>
            <ul style="margin: 0; padding-left: 20px;">
        `;
        
        analysis.recommendations.forEach(recommendation => {
          html += `<li style="margin-bottom: 8px;">${recommendation}</li>`;
        });
        
        html += `
            </ul>
          </div>
        `;
      }
      
      container.innerHTML = html;
    }
    
    // Render insights
    function renderInsights() {
      const container = document.getElementById('insightsList');
      const noInsightsElement = document.getElementById('noInsights');
      container.innerHTML = '';
      
      // Get insights
      const insights = scheduleData.insights || [];
      
      if (insights.length === 0) {
        container.style.display = 'none';
        noInsightsElement.style.display = 'block';
        return;
      }
      
      container.style.display = 'block';
      noInsightsElement.style.display = 'none';
      
      // Create insight cards
      insights.forEach(insight => {
        const insightCard = document.createElement('div');
        insightCard.className = `insight-card ${insight.type || 'info'}`;
        
        // Get icon
        let icon = 'info-circle';
        if (insight.type === 'success') icon = 'check-circle';
        if (insight.type === 'warning') icon = 'exclamation-triangle';
        
        insightCard.innerHTML = `
          <div class="insight-icon">
            <i class="fas fa-${icon}"></i>
          </div>
          <div class="insight-content">
            <div class="insight-title">${insight.title}</div>
            <div class="insight-description">${insight.description}</div>
          </div>
        `;
        
        container.appendChild(insightCard);
      });
    }
    
    // Format hour for display
    function formatHourLabel(hour) {
      hour = parseInt(hour);
      if (isNaN(hour)) return '';
      
      if (hour === 0 || hour === 24) return '12 AM';
      if (hour === 12) return '12 PM';
      
      if (hour < 12) return `${hour} AM`;
      return `${hour - 12} PM`;
    }
    
    // Capitalize first letter
    function capitalizeFirstLetter(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    // Export schedule report
    function exportScheduleReport() {
      showLoading();
      
      const dateRange = document.getElementById('dateRangeFilter').value;
      const teamId = document.getElementById('teamFilter').value;
      
      const params = {
        dateRange: dateRange,
        teamId: teamId
      };
      
      // If custom date range, add dates
      if (dateRange === 'custom') {
        params.startDate = document.getElementById('startDateFilter').value;
        params.endDate = document.getElementById('endDateFilter').value;
      }
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Report exported successfully', 'success');
            window.open(result.url, '_blank');
          } else {
            showToast('Error', result.message || 'Failed to export report', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error exporting report:', error);
          showToast('Error', 'Failed to export report', 'error');
        })
        .exportScheduleReport(params);
    }
    
    // Print schedule report
    function printScheduleReport() {
      window.print();
    }
    
    // Export schedule data as CSV/Excel
    function exportScheduleData() {
      showLoading();
      
      const dateRange = document.getElementById('dateRangeFilter').value;
      const teamId = document.getElementById('teamFilter').value;
      
      const params = {
        dateRange: dateRange,
        teamId: teamId,
        format: 'excel'
      };
      
      // If custom date range, add dates
      if (dateRange === 'custom') {
        params.startDate = document.getElementById('startDateFilter').value;
        params.endDate = document.getElementById('endDateFilter').value;
      }
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Data exported successfully', 'success');
            window.open(result.url, '_blank');
          } else {
            showToast('Error', result.message || 'Failed to export data', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error exporting data:', error);
          showToast('Error', 'Failed to export data', 'error');
        })
        .exportScheduleData(params);
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      const iconElement = toastIcon.querySelector('i');
      
      // Set icon and color based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        iconElement.className = 'fas fa-exclamation-circle';
      } else {
        toastIcon.className = 'toast-icon success';
        iconElement.className = 'fas fa-check-circle';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto hide after 5 seconds
      setTimeout(function() {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Team Lead Time Tracker</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Category colors */
      --primary-category: #5540af;
      --team-meeting: #0ea5e9;
      --one-on-one: #10b981;
      --priority-coaching: #f59e0b;
      --manager-meeting: #8b5cf6;
      --qa-review: #ec4899;
      --shadow-session: #14b8a6;
      --other-category: #64748b;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      --radius-full: 9999px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(239, 68, 68, 0.3);
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(239, 68, 68, 0.4);
    }
    
    .btn-success {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      box-shadow: 0 2px 5px rgba(16, 185, 129, 0.3);
    }
    
    .btn-success:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(16, 185, 129, 0.4);
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    textarea.form-control {
      resize: vertical;
      min-height: 100px;
    }
    
    .form-row {
      display: flex;
      gap: 16px;
      margin-bottom: 20px;
    }
    
    .form-col {
      flex: 1;
    }
    
    .tabs {
      display: flex;
      border-bottom: 1px solid var(--border-medium);
      margin-bottom: 24px;
    }
    
    .tab {
      padding: 12px 20px;
      cursor: pointer;
      font-weight: 500;
      color: var(--text-secondary);
      position: relative;
      transition: color var(--transition-fast);
    }
    
    .tab:hover {
      color: var(--primary-color);
    }
    
    .tab.active {
      color: var(--primary-color);
    }
    
    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      right: 0;
      height: 2px;
      background-color: var(--primary-color);
    }
    
    .tab-content {
      display: none;
    }
    
    .tab-content.active {
      display: block;
    }
    
    .timer-display {
      text-align: center;
      padding: 32px 0;
      margin-bottom: 24px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-lg);
    }
    
    .timer-time {
      font-size: 48px;
      font-weight: 700;
      font-family: 'Manrope', sans-serif;
      color: var(--text-primary);
    }
    
    .timer-label {
      font-size: 16px;
      color: var(--text-secondary);
      margin-top: 8px;
    }
    
    .timer-actions {
      display: flex;
      justify-content: center;
      gap: 16px;
      margin-top: 24px;
    }
    
    .activity-selector {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 16px;
      margin-bottom: 24px;
    }
    
    .activity-option {
      position: relative;
    }
    
    .activity-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .activity-option label {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 16px;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-medium);
      background-color: white;
      cursor: pointer;
      transition: all var(--transition-fast);
      height: 100%;
    }
    
    .activity-option label .icon {
      font-size: 24px;
      margin-bottom: 8px;
      transition: all var(--transition-fast);
    }
    
    .activity-option label .text {
      font-weight: 500;
      font-size: 12px;
      text-align: center;
    }
    
    /* Color customizations for activities */
    .activity-option.primary label .icon { color: var(--primary-category); }
    .activity-option.team-meeting label .icon { color: var(--team-meeting); }
    .activity-option.one-on-one label .icon { color: var(--one-on-one); }
    .activity-option.priority-coaching label .icon { color: var(--priority-coaching); }
    .activity-option.manager-meeting label .icon { color: var(--manager-meeting); }
    .activity-option.qa-review label .icon { color: var(--qa-review); }
    .activity-option.shadow-session label .icon { color: var(--shadow-session); }
    .activity-option.other label .icon { color: var(--other-category); }
    
    /* Hover & Active states */
    .activity-option input[type="radio"]:checked + label {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 2px var(--primary-light);
    }
    
    .activity-option.primary input[type="radio"]:checked + label {
      background-color: rgba(85, 64, 175, 0.05);
    }
    .activity-option.team-meeting input[type="radio"]:checked + label {
      background-color: rgba(14, 165, 233, 0.05);
    }
    .activity-option.one-on-one input[type="radio"]:checked + label {
      background-color: rgba(16, 185, 129, 0.05);
    }
    .activity-option.priority-coaching input[type="radio"]:checked + label {
      background-color: rgba(245, 158, 11, 0.05);
    }
    .activity-option.manager-meeting input[type="radio"]:checked + label {
      background-color: rgba(139, 92, 246, 0.05);
    }
    .activity-option.qa-review input[type="radio"]:checked + label {
      background-color: rgba(236, 72, 153, 0.05);
    }
    .activity-option.shadow-session input[type="radio"]:checked + label {
      background-color: rgba(20, 184, 166, 0.05);
    }
    .activity-option.other input[type="radio"]:checked + label {
      background-color: rgba(100, 116, 139, 0.05);
    }
    
    .activity-option label:hover {
      border-color: var(--primary-light);
    }
    
    .task-list {
      list-style-type: none;
      margin-bottom: 24px;
    }
    
    .task-item {
      display: flex;
      align-items: center;
      padding: 12px 16px;
      border-radius: var(--radius-md);
      margin-bottom: 8px;
      background-color: white;
      border: 1px solid var(--border-light);
      transition: all var(--transition-fast);
    }
    
    .task-item:hover {
      box-shadow: var(--shadow-sm);
      border-color: var(--border-medium);
    }
    
    .task-checkbox {
      margin-right: 12px;
      width: 18px;
      height: 18px;
    }
    
    .task-text {
      flex: 1;
    }
    
    .task-text.completed {
      text-decoration: line-through;
      color: var(--text-tertiary);
    }
    
    .task-delete {
      color: var(--text-tertiary);
      cursor: pointer;
      padding: 4px;
      border-radius: var(--radius-full);
      transition: all var(--transition-fast);
    }
    
    .task-delete:hover {
      color: var(--danger-color);
      background-color: var(--danger-light);
    }
    
    .add-task-form {
      display: flex;
      gap: 8px;
      margin-top: 16px;
    }
    
    .add-task-form input {
      flex: 1;
    }
    
    .summary-section {
      border-top: 1px solid var(--border-light);
      padding-top: 24px;
      margin-top: 24px;
    }
    
    .summary-title {
      font-weight: 600;
      margin-bottom: 16px;
      color: var(--text-primary);
    }
    
    .summary-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 16px;
      margin-bottom: 24px;
    }
    
    .stat-card {
      background-color: white;
      border-radius: var(--radius-md);
      padding: 16px;
      box-shadow: var(--shadow-sm);
      border: 1px solid var(--border-light);
    }
    
    .stat-value {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .stat-label {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .activity-log {
      margin-top: 24px;
    }
    
    .log-row {
      display: flex;
      padding: 12px 0;
      border-bottom: 1px solid var(--border-light);
    }
    
    .log-time {
      width: 100px;
      color: var(--text-tertiary);
      font-size: 13px;
    }
    
    .log-activity {
      flex: 1;
      display: flex;
      align-items: center;
    }
    
    .log-badge {
      display: inline-flex;
      align-items: center;
      padding: 4px 8px;
      border-radius: var(--radius-full);
      font-size: 12px;
      font-weight: 500;
      margin-right: 8px;
    }
    
    .log-badge.primary { background-color: rgba(85, 64, 175, 0.1); color: var(--primary-category); }
    .log-badge.team-meeting { background-color: rgba(14, 165, 233, 0.1); color: var(--team-meeting); }
    .log-badge.one-on-one { background-color: rgba(16, 185, 129, 0.1); color: var(--one-on-one); }
    .log-badge.priority-coaching { background-color: rgba(245, 158, 11, 0.1); color: var(--priority-coaching); }
    .log-badge.manager-meeting { background-color: rgba(139, 92, 246, 0.1); color: var(--manager-meeting); }
    .log-badge.qa-review { background-color: rgba(236, 72, 153, 0.1); color: var(--qa-review); }
    .log-badge.shadow-session { background-color: rgba(20, 184, 166, 0.1); color: var(--shadow-session); }
    .log-badge.other { background-color: rgba(100, 116, 139, 0.1); color: var(--other-category); }
    
    .log-duration {
      width: 80px;
      text-align: right;
      font-weight: 500;
    }
    
    .session-summary {
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      padding: 16px;
      margin-top: 24px;
    }
    
    .next-session-tasks {
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      padding: 16px;
      margin-top: 16px;
    }
    
    .next-tasks-list {
      margin-top: 12px;
    }
    
    .next-task-item {
      background-color: white;
      padding: 8px 12px;
      border-radius: var(--radius-sm);
      margin-bottom: 8px;
      display: flex;
      align-items: center;
    }
    
    .next-task-drag {
      color: var(--text-tertiary);
      margin-right: 8px;
      cursor: grab;
    }
    
    .next-task-content {
      flex: 1;
    }
    
    .next-task-remove {
      color: var(--text-tertiary);
      cursor: pointer;
    }
    
    .next-task-remove:hover {
      color: var(--danger-color);
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.2);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .form-row {
        flex-direction: column;
        gap: 12px;
      }
      
      .activity-selector {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .timer-time {
        font-size: 36px;
      }
      
      .timer-actions {
        flex-direction: column;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-stopwatch"></i> Time Tracker
          </h1>
          <div class="header-subtitle">
            Track your daily activities and focus on what matters
          </div>
        </div>
        <div class="header-actions">
          <button class="btn btn-secondary" id="viewReportsBtn">
            <i class="fas fa-chart-line"></i> View Reports
          </button>
        </div>
      </div>
    </header>
    
    <div class="content">
      <!-- Tabs -->
      <div class="tabs">
        <div class="tab active" data-tab="plan">Planning</div>
        <div class="tab" data-tab="track">Time Tracking</div>
        <div class="tab" data-tab="summary">Session Summary</div>
      </div>
      
      <!-- Plan Tab -->
      <div class="tab-content active" id="plan-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-clipboard-list"></i> Session Planning
            </div>
          </div>
          <div class="card-content">
            <div class="form-group">
              <label class="form-label" for="sessionDate">Session Date</label>
              <input type="date" id="sessionDate" class="form-control" value="">
            </div>
            
            <div class="form-group">
              <label class="form-label" for="sessionNotes">Session Notes</label>
              <textarea id="sessionNotes" class="form-control" placeholder="What's your focus for today?"></textarea>
            </div>
            
            <div class="form-group">
              <label class="form-label">Tasks to Complete</label>
              <ul class="task-list" id="plannedTaskList">
                <!-- Tasks will be added here -->
              </ul>
              
              <div class="add-task-form">
                <input type="text" id="newPlannedTask" class="form-control" placeholder="Add a new task">
                <button class="btn btn-primary" id="addPlannedTaskBtn">
                  <i class="fas fa-plus"></i> Add
                </button>
              </div>
            </div>
            
            <div class="form-actions" style="display: flex; justify-content: flex-end; margin-top: 24px;">
              <button class="btn btn-secondary" id="cancelPlanBtn">Cancel</button>
              <button class="btn btn-primary" id="startSessionBtn" style="margin-left: 12px;">
                <i class="fas fa-play"></i> Start Session
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Track Tab -->
      <div class="tab-content" id="track-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-stopwatch"></i> Time Tracking
            </div>
          </div>
          <div class="card-content">
            <div class="timer-display">
              <div class="timer-time" id="timerDisplay">00:00:00</div>
              <div class="timer-label">Time Elapsed</div>
              <div class="timer-actions">
                <button class="btn btn-secondary" id="pauseTimerBtn">
                  <i class="fas fa-pause"></i> Pause
                </button>
                <button class="btn btn-danger" id="stopTimerBtn">
                  <i class="fas fa-stop"></i> End Session
                </button>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">What are you working on?</label>
              <div class="activity-selector">
                <div class="activity-option primary">
                  <input type="radio" id="activity-primary" name="activity" value="primary" checked>
                  <label for="activity-primary">
                    <span class="icon"><i class="fas fa-briefcase"></i></span>
                    <span class="text">Primary</span>
                  </label>
                </div>
                
                <div class="activity-option team-meeting">
                  <input type="radio" id="activity-team-meeting" name="activity" value="team-meeting">
                  <label for="activity-team-meeting">
                    <span class="icon"><i class="fas fa-users"></i></span>
                    <span class="text">Team Meeting</span>
                  </label>
                </div>
                
                <div class="activity-option one-on-one">
                  <input type="radio" id="activity-one-on-one" name="activity" value="one-on-one">
                  <label for="activity-one-on-one">
                    <span class="icon"><i class="fas fa-user-friends"></i></span>
                    <span class="text">1:1</span>
                  </label>
                </div>
                
                <div class="activity-option priority-coaching">
                  <input type="radio" id="activity-priority-coaching" name="activity" value="priority-coaching">
                  <label for="activity-priority-coaching">
                    <span class="icon"><i class="fas fa-star"></i></span>
                    <span class="text">Priority Coaching</span>
                  </label>
                </div>
                
                <div class="activity-option manager-meeting">
                  <input type="radio" id="activity-manager-meeting" name="activity" value="manager-meeting">
                  <label for="activity-manager-meeting">
                    <span class="icon"><i class="fas fa-sitemap"></i></span>
                    <span class="text">Manager 1:1</span>
                  </label>
                </div>
                
                <div class="activity-option qa-review">
                  <input type="radio" id="activity-qa-review" name="activity" value="qa-review">
                  <label for="activity-qa-review">
                    <span class="icon"><i class="fas fa-clipboard-check"></i></span>
                    <span class="text">QA Review</span>
                  </label>
                </div>
                
                <div class="activity-option shadow-session">
                  <input type="radio" id="activity-shadow-session" name="activity" value="shadow-session">
                  <label for="activity-shadow-session">
                    <span class="icon"><i class="fas fa-user-secret"></i></span>
                    <span class="text">Shadow Session</span>
                  </label>
                </div>
                
                <div class="activity-option other">
                  <input type="radio" id="activity-other" name="activity" value="other">
                  <label for="activity-other">
                    <span class="icon"><i class="fas fa-ellipsis-h"></i></span>
                    <span class="text">Other</span>
                  </label>
                </div>
              </div>
            </div>
            
            <div class="form-group" id="otherActivityContainer" style="display: none;">
              <label class="form-label" for="otherActivityInput">Please specify:</label>
              <input type="text" id="otherActivityInput" class="form-control" placeholder="Enter activity name">
            </div>
            
            <div class="form-group">
              <label class="form-label" for="activityNotes">Activity Notes</label>
              <textarea id="activityNotes" class="form-control" placeholder="Add notes about what you're working on..."></textarea>
            </div>
            
            <div class="form-group">
              <label class="form-label">Task List</label>
              <ul class="task-list" id="trackingTaskList">
                <!-- Tasks from planning will be shown here -->
              </ul>
              
              <div class="add-task-form">
                <input type="text" id="newTrackingTask" class="form-control" placeholder="Add a new task">
                <button class="btn btn-primary" id="addTrackingTaskBtn">
                  <i class="fas fa-plus"></i> Add
                </button>
              </div>
            </div>
            
            <div class="activity-log">
              <h3 class="summary-title">Activity Log</h3>
              <div id="activityLogContainer">
                <!-- Activity log will be populated here -->
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Summary Tab -->
      <div class="tab-content" id="summary-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-chart-pie"></i> Session Summary
            </div>
          </div>
          <div class="card-content">
            <div class="summary-stats">
              <div class="stat-card">
                <div class="stat-value" id="totalTimeValue">0h 0m</div>
                <div class="stat-label">Total Time</div>
              </div>
              
              <div class="stat-card">
                <div class="stat-value" id="primaryTimeValue">0h 0m</div>
                <div class="stat-label">Primary Work</div>
              </div>
              
              <div class="stat-card">
                <div class="stat-value" id="meetingsTimeValue">0h 0m</div>
                <div class="stat-label">Meetings</div>
              </div>
              
              <div class="stat-card">
                <div class="stat-value" id="tasksCompletedValue">0/0</div>
                <div class="stat-label">Tasks Completed</div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Session Achievements</label>
              <div class="session-summary" id="sessionAchievements">
                <ul class="task-list" id="completedTasksList">
                  <!-- Completed tasks will be shown here -->
                </ul>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="sessionReflection">Session Reflection</label>
              <textarea id="sessionReflection" class="form-control" placeholder="What went well? What could have been better?"></textarea>
            </div>
            
            <div class="form-group">
              <label class="form-label">Tasks for Next Time</label>
              <div class="next-session-tasks">
                <div class="add-task-form">
                  <input type="text" id="nextSessionTask" class="form-control" placeholder="Add a task for next time">
                  <button class="btn btn-primary" id="addNextSessionTaskBtn">
                    <i class="fas fa-plus"></i> Add
                  </button>
                </div>
                
                <div class="next-tasks-list" id="nextSessionTasksList">
                  <!-- Next session tasks will be added here -->
                </div>
              </div>
            </div>
            
            <div class="form-actions" style="display: flex; justify-content: flex-end; margin-top: 24px;">
              <button class="btn btn-secondary" id="cancelSummaryBtn">Cancel</button>
              <button class="btn btn-success" id="saveSessionBtn" style="margin-left: 12px;">
                <i class="fas fa-save"></i> Save Session
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Operation completed successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let timerInterval;
    let startTime;
    let elapsedTime = 0;
    let isPaused = false;
    let pauseStartTime;
    let activityLog = [];
    let currentActivity = "primary";
    let plannedTasks = [];
    let trackingTasks = [];
    let completedTasks = [];
    let nextSessionTasks = [];
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set today's date as default
      document.getElementById('sessionDate').valueAsDate = new Date();
      
      // Setup tab switching
      setupTabs();
      
      // Setup event listeners
      setupEventListeners();
      
      // Initialize the timer display
      updateTimerDisplay(0);
    });
    
    // Setup tabs functionality
    function setupTabs() {
      const tabs = document.querySelectorAll('.tab');
      
      tabs.forEach(tab => {
        tab.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          
          // Check if we can switch to this tab
          if (tabId === 'summary' && !elapsedTime) {
            showToast('Error', 'Please start and end a session first', 'error');
            return;
          }
          
          if (tabId === 'track' && !startTime && !elapsedTime) {
            showToast('Error', 'Please plan your session first', 'error');
            return;
          }
          
          // Remove active class from all tabs
          tabs.forEach(t => t.classList.remove('active'));
          
          // Add active class to clicked tab
          this.classList.add('active');
          
          // Hide all tab contents
          document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
          });
          
          // Show the selected tab content
          document.getElementById(`${tabId}-tab`).classList.add('active');
        });
      });
    }
    
    // Setup all event listeners
    function setupEventListeners() {
      // Planning tab
      document.getElementById('addPlannedTaskBtn').addEventListener('click', addPlannedTask);
      document.getElementById('newPlannedTask').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') addPlannedTask();
      });
      document.getElementById('startSessionBtn').addEventListener('click', startSession);
      document.getElementById('cancelPlanBtn').addEventListener('click', function() {
        if (confirm('Are you sure you want to cancel? All your planning will be lost.')) {
          google.script.host.close();
        }
      });
      
      // Tracking tab
      document.getElementById('pauseTimerBtn').addEventListener('click', togglePauseTimer);
      document.getElementById('stopTimerBtn').addEventListener('click', stopTimer);
      document.getElementById('addTrackingTaskBtn').addEventListener('click', addTrackingTask);
      document.getElementById('newTrackingTask').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') addTrackingTask();
      });
      
      // Activity selection
      document.querySelectorAll('input[name="activity"]').forEach(radio => {
        radio.addEventListener('change', function() {
          const value = this.value;
          
          // Show/hide the "other" input field
          const otherContainer = document.getElementById('otherActivityContainer');
          if (value === 'other') {
            otherContainer.style.display = 'block';
            document.getElementById('otherActivityInput').focus();
          } else {
            otherContainer.style.display = 'none';
          }
          
          // If the timer is running, log the activity change
          if (startTime && !isPaused) {
            logActivityChange(value);
          }
          
          // Update current activity
          currentActivity = value;
        });
      });
      
      // Summary tab
      document.getElementById('addNextSessionTaskBtn').addEventListener('click', addNextSessionTask);
      document.getElementById('nextSessionTask').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') addNextSessionTask();
      });
      document.getElementById('saveSessionBtn').addEventListener('click', saveSession);
      document.getElementById('cancelSummaryBtn').addEventListener('click', function() {
        if (confirm('Are you sure you want to cancel? Your session data will be lost.')) {
          google.script.host.close();
        }
      });
      
      // View reports button
      document.getElementById('viewReportsBtn').addEventListener('click', function() {
        google.script.run.showTimeReports();
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', function() {
        document.getElementById('toast').classList.remove('visible');
      });
    }
    
    // Add a planned task
    function addPlannedTask() {
      const inputField = document.getElementById('newPlannedTask');
      const taskText = inputField.value.trim();
      
      if (!taskText) return;
      
      // Create a new task object
      const task = {
        id: Date.now().toString(),
        text: taskText,
        completed: false
      };
      
      // Add to planned tasks array
      plannedTasks.push(task);
      
      // Add to UI
      renderPlannedTasks();
      
      // Clear input field
      inputField.value = '';
      inputField.focus();
    }
    
    // Render planned tasks list
    function renderPlannedTasks() {
      const taskList = document.getElementById('plannedTaskList');
      taskList.innerHTML = '';
      
      plannedTasks.forEach(task => {
        const li = document.createElement('li');
        li.className = 'task-item';
        li.dataset.id = task.id;
        
        li.innerHTML = `
          <input type="checkbox" class="task-checkbox" ${task.completed ? 'checked' : ''}>
          <div class="task-text ${task.completed ? 'completed' : ''}">${task.text}</div>
          <div class="task-delete"><i class="fas fa-times"></i></div>
        `;
        
        // Add event listeners for task actions
        li.querySelector('.task-checkbox').addEventListener('change', function(e) {
          task.completed = e.target.checked;
          li.querySelector('.task-text').classList.toggle('completed', task.completed);
        });
        
        li.querySelector('.task-delete').addEventListener('click', function() {
          plannedTasks = plannedTasks.filter(t => t.id !== task.id);
          renderPlannedTasks();
        });
        
        taskList.appendChild(li);
      });
    }
    
    // Start the tracking session
    function startSession() {
      // Validate fields
      const sessionDate = document.getElementById('sessionDate').value;
      
      if (!sessionDate) {
        showToast('Error', 'Please select a session date', 'error');
        return;
      }
      
      // Copy planned tasks to tracking tasks
      trackingTasks = JSON.parse(JSON.stringify(plannedTasks));
      
      // Render the tracking tasks
      renderTrackingTasks();
      
      // Switch to tracking tab
      document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
      document.querySelector('.tab[data-tab="track"]').classList.add('active');
      
      document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
      });
      document.getElementById('track-tab').classList.add('active');
      
      // Start the timer
      startTimer();
      
      // Log the initial activity
      logActivityChange(currentActivity);
    }
    
    // Start the timer
    function startTimer() {
      if (timerInterval) clearInterval(timerInterval);
      
      startTime = new Date();
      
      timerInterval = setInterval(updateTimer, 1000);
      
      // Update UI
      document.getElementById('pauseTimerBtn').innerHTML = '<i class="fas fa-pause"></i> Pause';
      isPaused = false;
    }
    
    // Update the timer display
    function updateTimer() {
      const now = new Date();
      const timeDifference = now - startTime + elapsedTime;
      
      updateTimerDisplay(timeDifference);
    }
    
    // Format and display the timer
    function updateTimerDisplay(timeInMilliseconds) {
      const totalSeconds = Math.floor(timeInMilliseconds / 1000);
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const seconds = totalSeconds % 60;
      
      const formattedTime = [
        hours.toString().padStart(2, '0'),
        minutes.toString().padStart(2, '0'),
        seconds.toString().padStart(2, '0')
      ].join(':');
      
      document.getElementById('timerDisplay').textContent = formattedTime;
    }
    
    // Toggle pause/resume timer
    function togglePauseTimer() {
      const pauseButton = document.getElementById('pauseTimerBtn');
      
      if (isPaused) {
        // Resume timer
        const pauseDuration = new Date() - pauseStartTime;
        startTime = new Date(startTime.getTime() + pauseDuration);
        
        pauseButton.innerHTML = '<i class="fas fa-pause"></i> Pause';
        isPaused = false;
        
        // Log activity resumption
        logActivityChange(currentActivity);
      } else {
        // Pause timer
        clearInterval(timerInterval);
        elapsedTime += new Date() - startTime;
        pauseStartTime = new Date();
        
        pauseButton.innerHTML = '<i class="fas fa-play"></i> Resume';
        isPaused = true;
        
        // Log activity pause
        logActivityChange('pause');
      }
    }
    
    // Stop the timer and finish tracking
    function stopTimer() {
      if (!confirm('Are you sure you want to end this tracking session?')) {
        return;
      }
      
      // Stop the timer
      clearInterval(timerInterval);
      
      // Calculate final elapsed time
      if (isPaused) {
        // Already have the elapsed time stored
      } else {
        elapsedTime += new Date() - startTime;
      }
      
      // Prepare summary data
      prepareSessionSummary();
      
      // Switch to summary tab
      document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
      document.querySelector('.tab[data-tab="summary"]').classList.add('active');
      
      document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
      });
      document.getElementById('summary-tab').classList.add('active');
    }
    
    // Log activity change
    function logActivityChange(activity) {
      // Don't log empty activities or repeated pauses
      if (!activity || (activity === 'pause' && activityLog.length > 0 && activityLog[activityLog.length - 1].activity === 'pause')) {
        return;
      }
      
      // When changing from "other", use the text input value
      let activityName = activity;
      if (activity === 'other') {
        const otherText = document.getElementById('otherActivityInput').value.trim();
        activityName = otherText || 'Other';
      }
      
      // Add to activity log
      const timestamp = new Date();
      activityLog.push({
        activity: activity,
        activityName: activityName,
        timestamp: timestamp,
        notes: document.getElementById('activityNotes').value
      });
      
      // Update UI
      renderActivityLog();
      
      // Clear notes when changing activities
      if (activity !== 'pause') {
        document.getElementById('activityNotes').value = '';
      }
    }
    
    // Render the activity log
    function renderActivityLog() {
      const logContainer = document.getElementById('activityLogContainer');
      logContainer.innerHTML = '';
      
      if (activityLog.length === 0) {
        logContainer.innerHTML = '<p>No activities logged yet.</p>';
        return;
      }
      
      // Calculate durations
      for (let i = 0; i < activityLog.length; i++) {
        const current = activityLog[i];
        const next = i < activityLog.length - 1 ? activityLog[i + 1] : null;
        
        // Calculate duration
        let duration = 0;
        if (next) {
          duration = next.timestamp - current.timestamp;
        } else {
          // For the last activity, use current time
          duration = isPaused ? 0 : (new Date() - current.timestamp);
        }
        
        // Skip pauses for display
        if (current.activity === 'pause') continue;
        
        // Create log entry
        const logEntry = document.createElement('div');
        logEntry.className = 'log-row';
        
        const timeString = current.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        // Get activity class and label
        const activityClass = getActivityClass(current.activity);
        const activityLabel = getActivityLabel(current.activity, current.activityName);
        
        // Format duration
        const durationMinutes = Math.floor(duration / 60000);
        const durationText = durationMinutes > 0 ? `${durationMinutes}m` : '—';
        
        logEntry.innerHTML = `
          <div class="log-time">${timeString}</div>
          <div class="log-activity">
            <span class="log-badge ${activityClass}">${activityLabel}</span>
            ${current.notes ? `<span>${current.notes}</span>` : ''}
          </div>
          <div class="log-duration">${durationText}</div>
        `;
        
        logContainer.appendChild(logEntry);
      }
    }
    
    // Get activity CSS class
    function getActivityClass(activity) {
      switch (activity) {
        case 'primary': return 'primary';
        case 'team-meeting': return 'team-meeting';
        case 'one-on-one': return 'one-on-one';
        case 'priority-coaching': return 'priority-coaching';
        case 'manager-meeting': return 'manager-meeting';
        case 'qa-review': return 'qa-review';
        case 'shadow-session': return 'shadow-session';
        case 'other': return 'other';
        default: return '';
      }
    }
    
    // Get activity label
    function getActivityLabel(activity, name) {
      switch (activity) {
        case 'primary': return 'Primary';
        case 'team-meeting': return 'Team Meeting';
        case 'one-on-one': return '1:1';
        case 'priority-coaching': return 'Coaching';
        case 'manager-meeting': return 'Manager 1:1';
        case 'qa-review': return 'QA Review';
        case 'shadow-session': return 'Shadow';
        case 'other': return name || 'Other';
        default: return activity;
      }
    }
    
    // Add a task during tracking
    function addTrackingTask() {
      const inputField = document.getElementById('newTrackingTask');
      const taskText = inputField.value.trim();
      
      if (!taskText) return;
      
      // Create a new task object
      const task = {
        id: Date.now().toString(),
        text: taskText,
        completed: false
      };
      
      // Add to tracking tasks array
      trackingTasks.push(task);
      
      // Add to UI
      renderTrackingTasks();
      
      // Clear input field
      inputField.value = '';
      inputField.focus();
    }
    
    // Render tracking tasks list
    function renderTrackingTasks() {
      const taskList = document.getElementById('trackingTaskList');
      taskList.innerHTML = '';
      
      trackingTasks.forEach(task => {
        const li = document.createElement('li');
        li.className = 'task-item';
        li.dataset.id = task.id;
        
        li.innerHTML = `
          <input type="checkbox" class="task-checkbox" ${task.completed ? 'checked' : ''}>
          <div class="task-text ${task.completed ? 'completed' : ''}">${task.text}</div>
          <div class="task-delete"><i class="fas fa-times"></i></div>
        `;
        
        // Add event listeners for task actions
        li.querySelector('.task-checkbox').addEventListener('change', function(e) {
          task.completed = e.target.checked;
          li.querySelector('.task-text').classList.toggle('completed', task.completed);
        });
        
        li.querySelector('.task-delete').addEventListener('click', function() {
          trackingTasks = trackingTasks.filter(t => t.id !== task.id);
          renderTrackingTasks();
        });
        
        taskList.appendChild(li);
      });
    }
    
    // Prepare session summary data
    function prepareSessionSummary() {
      // Calculate time stats
      const totalTimeHours = elapsedTime / (1000 * 60 * 60);
      const totalTimeMinutes = (elapsedTime / (1000 * 60)) % 60;
      document.getElementById('totalTimeValue').textContent = `${Math.floor(totalTimeHours)}h ${Math.round(totalTimeMinutes)}m`;
      
      // Calculate time per activity type
      let primaryTime = 0;
      let meetingsTime = 0;
      
      for (let i = 0; i < activityLog.length; i++) {
        const current = activityLog[i];
        const next = i < activityLog.length - 1 ? activityLog[i + 1] : null;
        
        // Skip pauses
        if (current.activity === 'pause') continue;
        
        // Calculate duration
        let duration = 0;
        if (next) {
          duration = next.timestamp - current.timestamp;
        } else {
          duration = new Date() - current.timestamp;
        }
        
        // Categorize
        if (current.activity === 'primary') {
          primaryTime += duration;
        } else if (['team-meeting', 'one-on-one', 'manager-meeting'].includes(current.activity)) {
          meetingsTime += duration;
        }
      }
      
      // Format activity times
      const primaryTimeHours = primaryTime / (1000 * 60 * 60);
      const primaryTimeMinutes = (primaryTime / (1000 * 60)) % 60;
      document.getElementById('primaryTimeValue').textContent = `${Math.floor(primaryTimeHours)}h ${Math.round(primaryTimeMinutes)}m`;
      
      const meetingsTimeHours = meetingsTime / (1000 * 60 * 60);
      const meetingsTimeMinutes = (meetingsTime / (1000 * 60)) % 60;
      document.getElementById('meetingsTimeValue').textContent = `${Math.floor(meetingsTimeHours)}h ${Math.round(meetingsTimeMinutes)}m`;
      
      // Calculate task completion
      completedTasks = trackingTasks.filter(task => task.completed);
      document.getElementById('tasksCompletedValue').textContent = `${completedTasks.length}/${trackingTasks.length}`;
      
      // Render completed tasks
      renderCompletedTasks();
    }
    
    // Render completed tasks
    function renderCompletedTasks() {
      const tasksList = document.getElementById('completedTasksList');
      tasksList.innerHTML = '';
      
      if (completedTasks.length === 0) {
        tasksList.innerHTML = '<p>No tasks completed during this session.</p>';
        return;
      }
      
      completedTasks.forEach(task => {
        const li = document.createElement('li');
        li.className = 'task-item';
        li.innerHTML = `<div class="task-text">${task.text}</div>`;
        tasksList.appendChild(li);
      });
    }
    
    // Add next session task
    function addNextSessionTask() {
      const inputField = document.getElementById('nextSessionTask');
      const taskText = inputField.value.trim();
      
      if (!taskText) return;
      
      // Create task and add to array
      nextSessionTasks.push(taskText);
      
      // Render tasks
      renderNextSessionTasks();
      
      // Clear input
      inputField.value = '';
      inputField.focus();
    }
    
    // Render next session tasks
    function renderNextSessionTasks() {
      const tasksList = document.getElementById('nextSessionTasksList');
      tasksList.innerHTML = '';
      
      nextSessionTasks.forEach((task, index) => {
        const taskElement = document.createElement('div');
        taskElement.className = 'next-task-item';
        
        taskElement.innerHTML = `
          <div class="next-task-drag"><i class="fas fa-grip-lines"></i></div>
          <div class="next-task-content">${task}</div>
          <div class="next-task-remove" data-index="${index}"><i class="fas fa-times"></i></div>
        `;
        
        // Add event listener for remove button
        taskElement.querySelector('.next-task-remove').addEventListener('click', function() {
          const idx = parseInt(this.getAttribute('data-index'));
          nextSessionTasks.splice(idx, 1);
          renderNextSessionTasks();
        });
        
        tasksList.appendChild(taskElement);
      });
    }
    
    // Save session data
    function saveSession() {
      // Show loading
      showLoading();
      
      // Create session data object
      const sessionData = {
        date: document.getElementById('sessionDate').value,
        notes: document.getElementById('sessionNotes').value,
        reflection: document.getElementById('sessionReflection').value,
        elapsedTime: elapsedTime,
        activityLog: activityLog,
        plannedTasks: plannedTasks,
        completedTasks: trackingTasks.filter(t => t.completed),
        incompleteTasks: trackingTasks.filter(t => !t.completed),
        nextSessionTasks: nextSessionTasks
      };
      
      // Save to Google Sheets
      google.script.run
        .withSuccessHandler(function(result) {
          // Hide loading
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Session has been saved successfully', 'success');
            
            // Close the form after a delay
            setTimeout(function() {
              google.script.host.close();
            }, 2000);
          } else {
            showToast('Error', result.message || 'Failed to save session', 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Error saving session:', error);
          showToast('Error', 'Failed to save session: ' + error.message, 'error');
        })
        .saveTimeTrackerSession(sessionData);
    }
    
    // Show toast notification
    function showToast(title, message, type) {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      
      // Set icon and class based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        toastIcon.innerHTML = '<i class="fas fa-exclamation-circle"></i>';
      } else {
        toastIcon.className = 'toast-icon success';
        toastIcon.innerHTML = '<i class="fas fa-check-circle"></i>';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
            // Auto hide
      setTimeout(function() {
        toast.classList.remove('visible');
      }, 5000);
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
  </script>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Task Management</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Task priority colors */
      --priority-high: #ef4444;
      --priority-medium: #f59e0b;
      --priority-low: #10b981;
      
      /* Task status colors */
      --status-new: #3b82f6;
      --status-in-progress: #f59e0b;
      --status-completed: #10b981;
      --status-blocked: #ef4444;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 800px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    textarea.form-control {
      resize: vertical;
      min-height: 100px;
    }
    
    .form-hint {
      margin-top: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .form-error {
      margin-top: 6px;
      font-size: 12px;
      color: var(--danger-color);
    }
    
    .form-row {
      display: flex;
      gap: 16px;
    }
    
    .form-col {
      flex: 1;
    }
    
    .priority-options {
      display: flex;
      gap: 12px;
      margin-top: 8px;
    }
    
    .priority-option {
      position: relative;
    }
    
    .priority-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .priority-option label {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      background-color: white;
      cursor: pointer;
      transition: all var(--transition-fast);
      min-width: 100px;
    }
    
    .priority-option input[type="radio"]:checked + label {
      border-color: var(--primary-color);
      background-color: var(--primary-light);
      color: white;
    }
    
    .priority-option.high label {
      border-color: var(--priority-high);
    }
    
    .priority-option.high input[type="radio"]:checked + label {
      background-color: var(--priority-high);
      border-color: var(--priority-high);
    }
    
    .priority-option.medium label {
      border-color: var(--priority-medium);
    }
    
    .priority-option.medium input[type="radio"]:checked + label {
      background-color: var(--priority-medium);
      border-color: var(--priority-medium);
    }
    
    .priority-option.low label {
      border-color: var(--priority-low);
    }
    
    .priority-option.low input[type="radio"]:checked + label {
      background-color: var(--priority-low);
      border-color: var(--priority-low);
    }
    
    .priority-icon {
      margin-bottom: 8px;
      font-size: 20px;
    }
    
    .status-options {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      margin-top: 8px;
    }
    
    .status-option {
      position: relative;
    }
    
    .status-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .status-option label {
      display: flex;
      align-items: center;
      gap: 6px;
      padding: 8px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      background-color: white;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .status-option input[type="radio"]:checked + label {
      border-color: var(--primary-color);
      background-color: var(--bg-secondary);
    }
    
    .status-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
    }
    
    .status-dot.new {
      background-color: var(--status-new);
    }
    
    .status-dot.in-progress {
      background-color: var(--status-in-progress);
    }
    
    .status-dot.completed {
      background-color: var(--status-completed);
    }
    
    .status-dot.blocked {
      background-color: var(--status-blocked);
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(239, 68, 68, 0.3);
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(239, 68, 68, 0.4);
    }
    
    .form-actions {
      display: flex;
      justify-content: flex-end;
      gap: 12px;
      margin-top: 24px;
    }
    
    .checklist-container {
      margin-top: 12px;
    }
    
    .checklist-item {
      display: flex;
      align-items: center;
      margin-bottom: 8px;
      padding: 8px 12px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      gap: 8px;
    }
    
    .checklist-input {
      flex: 1;
      padding: 8px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
    }
    
    .checklist-remove {
      color: var(--danger-color);
      cursor: pointer;
      padding: 4px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .checklist-remove:hover {
      background-color: var(--danger-light);
    }
    
    .add-checklist-item {
      margin-top: 8px;
      padding: 8px 0;
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--primary-color);
      cursor: pointer;
      border: none;
      background: none;
      font-size: 14px;
    }
    
    .add-checklist-item:hover {
      color: var(--primary-light);
    }
    
    /* Custom select styling */
    .custom-select {
      position: relative;
    }
    
    .custom-select select {
      appearance: none;
      -webkit-appearance: none;
      cursor: pointer;
    }
    
    .custom-select::after {
      content: '\f107';
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      pointer-events: none;
      color: var(--text-tertiary);
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.2);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    .task-details-container {
      margin-top: 16px;
      border-top: 1px solid var(--border-light);
      padding-top: 16px;
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .form-row {
        flex-direction: column;
        gap: 12px;
      }
      
      .priority-options, .status-options {
        justify-content: space-between;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-tasks"></i> Task Management
          </h1>
          <div class="header-subtitle">
            Create and manage tasks efficiently
          </div>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="card">
        <div class="card-header">
          <div class="card-title">
            <i class="fas fa-edit"></i> <span id="formTitle">Create Task</span>
          </div>
        </div>
        <div class="card-content">
          <form id="taskForm">
            <input type="hidden" id="taskId" name="taskId">
            
            <div class="form-group">
              <label class="form-label" for="taskTitle">Task Title</label>
              <input type="text" class="form-control" id="taskTitle" name="title" placeholder="Enter task title" required>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="taskDescription">Description</label>
              <textarea class="form-control" id="taskDescription" name="description" placeholder="Enter task description"></textarea>
            </div>
            
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="taskDueDate">Due Date</label>
                  <input type="date" class="form-control" id="taskDueDate" name="dueDate">
                  <div class="form-hint">Optional: Set a deadline for the task</div>
                </div>
              </div>
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="estimatedTime">Estimated Time (minutes)</label>
                  <input type="number" class="form-control" id="estimatedTime" name="estimatedTime" min="0" step="5">
                  <div class="form-hint">Approximate time needed to complete</div>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Priority</label>
              <div class="priority-options">
                <div class="priority-option high">
                  <input type="radio" id="priorityHigh" name="priority" value="high">
                  <label for="priorityHigh">
                    <span class="priority-icon"><i class="fas fa-arrow-up"></i></span>
                    <span>High</span>
                  </label>
                </div>
                
                <div class="priority-option medium">
                  <input type="radio" id="priorityMedium" name="priority" value="medium" checked>
                  <label for="priorityMedium">
                    <span class="priority-icon"><i class="fas fa-equals"></i></span>
                    <span>Medium</span>
                  </label>
                </div>
                
                <div class="priority-option low">
                  <input type="radio" id="priorityLow" name="priority" value="low">
                  <label for="priorityLow">
                    <span class="priority-icon"><i class="fas fa-arrow-down"></i></span>
                    <span>Low</span>
                  </label>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Status</label>
              <div class="status-options">
                <div class="status-option">
                  <input type="radio" id="statusNew" name="status" value="new" checked>
                  <label for="statusNew">
                    <span class="status-dot new"></span>
                    <span>New</span>
                  </label>
                </div>
                
                <div class="status-option">
                  <input type="radio" id="statusInProgress" name="status" value="in-progress">
                  <label for="statusInProgress">
                    <span class="status-dot in-progress"></span>
                    <span>In Progress</span>
                  </label>
                </div>
                
                <div class="status-option">
                  <input type="radio" id="statusCompleted" name="status" value="completed">
                  <label for="statusCompleted">
                    <span class="status-dot completed"></span>
                    <span>Completed</span>
                  </label>
                </div>
                
                <div class="status-option">
                  <input type="radio" id="statusBlocked" name="status" value="blocked">
                  <label for="statusBlocked">
                    <span class="status-dot blocked"></span>
                    <span>Blocked</span>
                  </label>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="assignee">Assignee</label>
              <div class="custom-select">
                <select class="form-control" id="assignee" name="assignee">
                  <option value="">Select assignee...</option>
                  <!-- Will be populated dynamically -->
                </select>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="category">Category</label>
              <div class="custom-select">
                <select class="form-control" id="category" name="category">
                  <option value="">Select category...</option>
                  <option value="administrative">Administrative</option>
                  <option value="coaching">Coaching</option>
                  <option value="development">Development</option>
                  <option value="meeting">Meeting</option>
                  <option value="personal">Personal</option>
                  <option value="project">Project</option>
                  <option value="review">Review</option>
                  <option value="other">Other</option>
                </select>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Task Checklist</label>
              <div class="form-hint">Break down the task into smaller steps</div>
              
              <div class="checklist-container" id="checklistContainer">
                <!-- Checklist items will be added here -->
              </div>
              
              <button type="button" class="add-checklist-item" id="addChecklistItem">
                <i class="fas fa-plus-circle"></i> Add checklist item
              </button>
            </div>
            
            <div class="form-actions">
              <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
              <button type="submit" class="btn btn-primary" id="saveBtn">
                <i class="fas fa-save"></i> Save Task
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Task saved successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let teamMembers = [];
    let checklistItems = [];
    let editMode = false;
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', () => {
      // Load team members for assignee dropdown
      loadTeamMembers();
      
      // Setup event listeners
      setupEventListeners();
      
      // Check if editing existing task
      checkForExistingTask();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Form submission
      document.getElementById('taskForm').addEventListener('submit', handleFormSubmit);
      
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', handleCancel);
      
      // Add checklist item
      document.getElementById('addChecklistItem').addEventListener('click', addChecklistItem);
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', () => {
        document.getElementById('toast').classList.remove('visible');
      });
      
      // Add default checklist item if none exists
      if (checklistItems.length === 0) {
        addChecklistItem();
      }
    }
    
    // Load team members for assignee dropdown
    function loadTeamMembers() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            teamMembers = result.teamMembers;
            populateAssigneeDropdown();
          } else {
            showToast('Error', result.message || 'Failed to load team members', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading team members:', error);
          showToast('Error', 'Failed to load team members', 'error');
        })
        .getTeamMembers();
    }
    
    // Populate assignee dropdown with team members
    function populateAssigneeDropdown() {
      const assigneeSelect = document.getElementById('assignee');
      const currentValue = assigneeSelect.value;
      
      // Clear existing options except the first one
      while (assigneeSelect.options.length > 1) {
        assigneeSelect.remove(1);
      }
      
      // Add self option first (current user)
      const userOption = document.createElement('option');
      userOption.value = 'self';
      userOption.textContent = 'Me (Self)';
      assigneeSelect.appendChild(userOption);
      
      // Add team members
      teamMembers.forEach(member => {
        const option = document.createElement('option');
        option.value = member.id;
        option.textContent = member.name;
        assigneeSelect.appendChild(option);
      });
      
      // Restore selected value if it exists
      if (currentValue && Array.from(assigneeSelect.options).some(opt => opt.value === currentValue)) {
        assigneeSelect.value = currentValue;
      }
    }
    
    // Check if we're editing an existing task
    function checkForExistingTask() {
      const taskId = document.getElementById('taskId').value;
      
      if (taskId) {
        editMode = true;
        document.getElementById('formTitle').textContent = 'Edit Task';
        
        // Load task data
        showLoading();
        
        google.script.run
          .withSuccessHandler(result => {
            hideLoading();
            
            if (result.success) {
              populateTaskForm(result.task);
            } else {
              showToast('Error', result.message || 'Failed to load task', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            console.error('Error loading task:', error);
            showToast('Error', 'Failed to load task', 'error');
          })
          .getTask(taskId);
      }
    }
    
    // Populate form with task data
    function populateTaskForm(task) {
      document.getElementById('taskTitle').value = task.title || '';
      document.getElementById('taskDescription').value = task.description || '';
      document.getElementById('taskDueDate').value = task.dueDate || '';
      document.getElementById('estimatedTime').value = task.estimatedTime || '';
      document.getElementById('assignee').value = task.assignee || '';
      document.getElementById('category').value = task.category || '';
      
      // Set priority
      const priorityRadio = document.querySelector(`input[name="priority"][value="${task.priority || 'medium'}"]`);
      if (priorityRadio) priorityRadio.checked = true;
      
      // Set status
      const statusRadio = document.querySelector(`input[name="status"][value="${task.status || 'new'}"]`);
      if (statusRadio) statusRadio.checked = true;
      
      // Set checklist items
      checklistItems = task.checklist || [];
      renderChecklistItems();
    }
    
    // Handle form submission
    function handleFormSubmit(e) {
      e.preventDefault();
      
      // Validate form
      const form = document.getElementById('taskForm');
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }
      
      // Get form data
      const taskData = {
        id: document.getElementById('taskId').value || null,
        title: document.getElementById('taskTitle').value,
        description: document.getElementById('taskDescription').value,
        dueDate: document.getElementById('taskDueDate').value,
        estimatedTime: document.getElementById('estimatedTime').value,
        priority: document.querySelector('input[name="priority"]:checked').value,
        status: document.querySelector('input[name="status"]:checked').value,
        assignee: document.getElementById('assignee').value,
        category: document.getElementById('category').value,
        checklist: getChecklistItems()
      };
      
      // Save task
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Task saved successfully', 'success');
            
            // Redirect after a brief delay
            setTimeout(() => {
              google.script.run.showTasksList();
            }, 1000);
          } else {
            showToast('Error', result.message || 'Failed to save task', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error saving task:', error);
          showToast('Error', 'Failed to save task', 'error');
        })
        .saveTask(taskData);
    }
    
    // Handle cancel button click
    function handleCancel() {
      if (confirm('Are you sure you want to cancel? All changes will be lost.')) {
        google.script.run.showTasksList();
      }
    }
    
    // Add a new checklist item
    function addChecklistItem() {
      checklistItems.push('');
      renderChecklistItems();
    }
    
    // Render checklist items
    function renderChecklistItems() {
      const container = document.getElementById('checklistContainer');
      container.innerHTML = '';
      
      checklistItems.forEach((item, index) => {
        const itemElement = document.createElement('div');
        itemElement.className = 'checklist-item';
        
        itemElement.innerHTML = `
          <input type="text" class="checklist-input" value="${item}" placeholder="Enter checklist item">
          <div class="checklist-remove" data-index="${index}">
            <i class="fas fa-times"></i>
          </div>
        `;
        
        // Add event listener to remove button
        itemElement.querySelector('.checklist-remove').addEventListener('click', e => {
          const index = parseInt(e.currentTarget.getAttribute('data-index'));
          removeChecklistItem(index);
        });
        
        // Add event listener to update checklistItems array when input changes
        itemElement.querySelector('.checklist-input').addEventListener('input', e => {
          checklistItems[index] = e.target.value;
        });
        
        container.appendChild(itemElement);
      });
    }
    
    // Remove a checklist item
    function removeChecklistItem(index) {
      checklistItems.splice(index, 1);
      
      // Ensure at least one checklist item
      if (checklistItems.length === 0) {
        checklistItems.push('');
      }
      
      renderChecklistItems();
    }
    
    // Get all checklist items
    function getChecklistItems() {
      // Filter out empty items
      return checklistItems.filter(item => item.trim() !== '');
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      
      // Set icon and class based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        toastIcon.innerHTML = '<i class="fas fa-exclamation-circle"></i>';
      } else {
        toastIcon.className = 'toast-icon success';
        toastIcon.innerHTML = '<i class="fas fa-check-circle"></i>';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto hide after 5 seconds
      setTimeout(() => {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>



<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Asana Task</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Asana colors */
      --asana-color: #F06A6A;
      --asana-gradient: linear-gradient(135deg, #F06A6A, #FC7D7D);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--asana-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 800px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--asana-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--asana-color);
      box-shadow: 0 0 0 3px rgba(240, 106, 106, 0.15);
    }
    
    textarea.form-control {
      resize: vertical;
      min-height: 100px;
    }
    
    .form-hint {
      margin-top: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .form-error {
      margin-top: 6px;
      font-size: 12px;
      color: var(--danger-color);
    }
    
    .form-row {
      display: flex;
      gap: 16px;
    }
    
    .form-col {
      flex: 1;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--asana-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(240, 106, 106, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(240, 106, 106, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .form-actions {
      display: flex;
      justify-content: flex-end;
      gap: 12px;
      margin-top: 24px;
    }
    
    /* Custom select styling */
    .custom-select {
      position: relative;
    }
    
    .custom-select select {
      appearance: none;
      -webkit-appearance: none;
      cursor: pointer;
    }
    
    .custom-select::after {
      content: '\f107';
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      pointer-events: none;
      color: var(--text-tertiary);
    }
    
    .subtasks-container {
      margin-top: 12px;
    }
    
    .subtask-item {
      display: flex;
      align-items: center;
      margin-bottom: 8px;
      padding: 8px 12px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      gap: 8px;
    }
    
    .subtask-input {
      flex: 1;
      padding: 8px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
    }
    
    .subtask-remove {
      color: var(--danger-color);
      cursor: pointer;
      padding: 4px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .subtask-remove:hover {
      background-color: var(--danger-light);
    }
    
    .add-subtask {
      margin-top: 8px;
      padding: 8px 0;
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--asana-color);
      cursor: pointer;
      border: none;
      background: none;
      font-size: 14px;
    }
    
    .add-subtask:hover {
      color: #E05555;
    }
    
    /* Tags input */
    .tags-input-container {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      padding: 6px 8px;
      background-color: white;
      min-height: 42px;
    }
    
    .tags-input-container:focus-within {
      outline: none;
      border-color: var(--asana-color);
      box-shadow: 0 0 0 3px rgba(240, 106, 106, 0.15);
    }
    
    .tag {
      display: flex;
      align-items: center;
      padding: 4px 8px;
      background-color: var(--bg-tertiary);
      border-radius: 16px;
      font-size: 12px;
      gap: 4px;
    }
    
    .tag-remove {
      color: var(--text-tertiary);
      cursor: pointer;
      width: 16px;
      height: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .tag-remove:hover {
      color: var(--danger-color);
    }
    
    .tags-input {
      flex: 1;
      min-width: 100px;
      border: none;
      outline: none;
      padding: 4px;
      font-size: 14px;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(240, 106, 106, 0.2);
      border-left-color: var(--asana-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    .asana-connection-status {
      padding: 12px 16px;
      border-radius: var(--radius-md);
      margin-bottom: 24px;
    }
    
    .asana-connection-status.connected {
      background-color: var(--success-light);
      border: 1px solid var(--success-color);
    }
    
    .asana-connection-status.not-connected {
      background-color: var(--warning-light);
      border: 1px solid var(--warning-color);
    }
    
    .asana-projects-selector {
      margin-bottom: 24px;
      animation: fadeIn 0.3s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .workspace-option {
      margin-bottom: 16px;
    }
    
    .workspace-header {
      font-weight: 600;
      margin-bottom: 8px;
      padding-bottom: 4px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .projects-list {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      padding-left: 8px;
    }
    
    .project-option input[type="radio"] {
      position: absolute;
      opacity: 0;
    }
    
    .project-option label {
      display: block;
      padding: 8px 12px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .project-option input[type="radio"]:checked + label {
      background-color: var(--asana-color);
      color: white;
    }
    
    .project-option label:hover {
      background-color: var(--bg-tertiary);
    }
    
    .project-option input[type="radio"]:checked + label:hover {
      background-color: #E05555;
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .form-row {
        flex-direction: column;
        gap: 12px;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-tasks"></i> Create Asana Task
          </h1>
          <div class="header-subtitle">
            Add tasks directly to your Asana workspace
          </div>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="asana-connection-status" id="connectionStatus">
        <!-- Connection status will be displayed here -->
      </div>
      
      <div class="card">
        <div class="card-header">
          <div class="card-title">
            <i class="fas fa-plus-circle"></i> New Asana Task
          </div>
        </div>
        <div class="card-content">
          <!-- Asana Projects Selector -->
          <div id="asanaProjectsContainer" style="display: none;">
            <div class="form-group">
              <label class="form-label">Select Project</label>
              <div class="asana-projects-selector" id="projectsSelector">
                <!-- Projects will be loaded here -->
              </div>
            </div>
          </div>
          
          <!-- Task Form -->
          <form id="asanaTaskForm">
            <div class="form-group">
              <label class="form-label" for="taskName">Task Name</label>
              <input type="text" class="form-control" id="taskName" name="name" placeholder="What needs to be done?" required>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="taskDescription">Description</label>
              <textarea class="form-control" id="taskDescription" name="description" placeholder="Add more details about this task"></textarea>
            </div>
            
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="taskDueDate">Due Date</label>
                  <input type="date" class="form-control" id="taskDueDate" name="dueDate">
                </div>
              </div>
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="assignee">Assignee</label>
                  <div class="custom-select">
                    <select class="form-control" id="assignee" name="assignee">
                      <option value="">Select assignee...</option>
                      <option value="me">Myself</option>
                      <!-- Other assignees will be loaded here -->
                    </select>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Tags</label>
              <div class="tags-input-container" id="tagsContainer">
                <input type="text" class="tags-input" id="tagsInput" placeholder="Type and press Enter to add tags">
              </div>
              <div class="form-hint">Press Enter to add each tag</div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Subtasks</label>
              <div class="form-hint">Break down your task into smaller steps</div>
              
              <div class="subtasks-container" id="subtasksContainer">
                <!-- Subtasks will be added here -->
              </div>
              
              <button type="button" class="add-subtask" id="addSubtaskBtn">
                <i class="fas fa-plus-circle"></i> Add subtask
              </button>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="notes">Additional Notes</label>
              <textarea class="form-control" id="notes" name="notes" placeholder="Any other information or context"></textarea>
            </div>
            
            <div class="form-actions">
              <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
              <button type="submit" class="btn btn-primary" id="createTaskBtn">
                <i class="fas fa-plus"></i> Create in Asana
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Task created successfully in Asana.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let subtasks = [];
    let tags = [];
    let asanaProjects = [];
    let asanaWorkspaces = [];
    let asanaUsers = [];
    let isConnected = false;
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', () => {
            // Setup event listeners
      setupEventListeners();
      
      // Check Asana connection status
      checkAsanaConnection();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Form submission
      document.getElementById('asanaTaskForm').addEventListener('submit', handleFormSubmit);
      
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', () => {
        if (confirm('Are you sure you want to cancel? Any unsaved changes will be lost.')) {
          google.script.run.showTasksList();
        }
      });
      
      // Add subtask button
      document.getElementById('addSubtaskBtn').addEventListener('click', addSubtask);
      
      // Tags input
      const tagsInput = document.getElementById('tagsInput');
      tagsInput.addEventListener('keydown', e => {
        if (e.key === 'Enter' && tagsInput.value.trim()) {
          e.preventDefault();
          addTag(tagsInput.value.trim());
          tagsInput.value = '';
        }
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', () => {
        document.getElementById('toast').classList.remove('visible');
      });
      
      // Add default subtask
      addSubtask();
    }
    
    // Check Asana connection status
    function checkAsanaConnection() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success && result.connected) {
            showConnectedStatus();
            isConnected = true;
            
            // Load Asana data
            loadAsanaData();
          } else {
            showNotConnectedStatus();
            isConnected = false;
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error checking Asana connection:', error);
          showNotConnectedStatus();
          isConnected = false;
        })
        .checkAsanaConnection();
    }
    
    // Show connected status
    function showConnectedStatus() {
      const connectionStatus = document.getElementById('connectionStatus');
      connectionStatus.className = 'asana-connection-status connected';
      connectionStatus.innerHTML = `
        <div style="display: flex; align-items: center; gap: 8px;">
          <i class="fas fa-check-circle" style="color: var(--success-color);"></i>
          <div>
            <div style="font-weight: 600;">Connected to Asana</div>
            <div style="font-size: 12px;">You can create tasks directly in your Asana workspace</div>
          </div>
        </div>
      `;
    }
    
    // Show not connected status
    function showNotConnectedStatus() {
      const connectionStatus = document.getElementById('connectionStatus');
      connectionStatus.className = 'asana-connection-status not-connected';
      connectionStatus.innerHTML = `
        <div style="display: flex; align-items: center; gap: 8px;">
          <i class="fas fa-exclamation-triangle" style="color: var(--warning-color);"></i>
          <div>
            <div style="font-weight: 600;">Not Connected to Asana</div>
            <div style="font-size: 12px;">
              Please connect your Asana account first. 
              <a href="#" id="connectAsanaBtn" style="color: var(--asana-color); font-weight: 500;">Connect Now</a>
            </div>
          </div>
        </div>
      `;
      
      // Add event listener for connect button
      document.getElementById('connectAsanaBtn').addEventListener('click', connectToAsana);
    }
    
    // Connect to Asana
    function connectToAsana() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            // Open the authorization URL in a new window
            window.open(result.authUrl, '_blank');
            
            // Show instructions
            showToast('Action Required', 'Please complete the authorization in the opened window, then come back here and refresh the page.', 'info');
          } else {
            showToast('Error', result.message || 'Failed to initialize Asana connection', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error connecting to Asana:', error);
          showToast('Error', 'Failed to connect to Asana', 'error');
        })
        .initializeAsanaConnection();
    }
    
    // Load Asana data (workspaces, projects, users)
    function loadAsanaData() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            // Store data
            asanaWorkspaces = result.workspaces || [];
            asanaProjects = result.projects || [];
            asanaUsers = result.users || [];
            
            // Render project selector
            renderProjectSelector();
            
            // Populate assignees dropdown
            populateAssigneesDropdown();
            
            // Show project selector
            document.getElementById('asanaProjectsContainer').style.display = 'block';
          } else {
            showToast('Error', result.message || 'Failed to load Asana data', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading Asana data:', error);
          showToast('Error', 'Failed to load Asana data', 'error');
        })
        .getAsanaData();
    }
    
    // Render project selector
    function renderProjectSelector() {
      const projectsContainer = document.getElementById('projectsSelector');
      projectsContainer.innerHTML = '';
      
      // Group projects by workspace
      const workspaceProjects = {};
      
      asanaWorkspaces.forEach(workspace => {
        workspaceProjects[workspace.id] = {
          name: workspace.name,
          projects: []
        };
      });
      
      // Add projects to their workspace groups
      asanaProjects.forEach(project => {
        if (workspaceProjects[project.workspaceId]) {
          workspaceProjects[project.workspaceId].projects.push(project);
        }
      });
      
      // Render workspaces and their projects
      Object.keys(workspaceProjects).forEach(workspaceId => {
        const workspace = workspaceProjects[workspaceId];
        
        // Skip if no projects
        if (workspace.projects.length === 0) return;
        
        const workspaceElement = document.createElement('div');
        workspaceElement.className = 'workspace-option';
        
        workspaceElement.innerHTML = `
          <div class="workspace-header">
            <span>${workspace.name}</span>
            <span style="font-size: 12px; color: var(--text-tertiary);">${workspace.projects.length} projects</span>
          </div>
          <div class="projects-list"></div>
        `;
        
        const projectsList = workspaceElement.querySelector('.projects-list');
        
        // Add projects
        workspace.projects.forEach(project => {
          const projectElement = document.createElement('div');
          projectElement.className = 'project-option';
          
          projectElement.innerHTML = `
            <input type="radio" id="project-${project.id}" name="project" value="${project.id}">
            <label for="project-${project.id}">${project.name}</label>
          `;
          
          projectsList.appendChild(projectElement);
        });
        
        projectsContainer.appendChild(workspaceElement);
      });
    }
    
    // Populate assignees dropdown
    function populateAssigneesDropdown() {
      const assigneeSelect = document.getElementById('assignee');
      
      // Keep the first two options (empty and 'me')
      while (assigneeSelect.options.length > 2) {
        assigneeSelect.remove(2);
      }
      
      // Add users
      asanaUsers.forEach(user => {
        const option = document.createElement('option');
        option.value = user.id;
        option.textContent = user.name;
        assigneeSelect.appendChild(option);
      });
    }
    
    // Handle form submission
    function handleFormSubmit(e) {
      e.preventDefault();
      
      // Check if connected to Asana
      if (!isConnected) {
        showToast('Error', 'You need to connect to Asana first', 'error');
        return;
      }
      
      // Get selected project
      const selectedProject = document.querySelector('input[name="project"]:checked');
      
      if (!selectedProject) {
        showToast('Error', 'Please select a project', 'error');
        return;
      }
      
      // Get form data
      const taskData = {
        name: document.getElementById('taskName').value,
        description: document.getElementById('taskDescription').value,
        dueDate: document.getElementById('taskDueDate').value,
        assignee: document.getElementById('assignee').value,
        notes: document.getElementById('notes').value,
        projectId: selectedProject.value,
        subtasks: getSubtasks(),
        tags: tags
      };
      
      // Create task in Asana
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Task created successfully in Asana', 'success');
            
            // Redirect after a brief delay
            setTimeout(() => {
              google.script.run.showTasksList();
            }, 2000);
          } else {
            showToast('Error', result.message || 'Failed to create Asana task', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error creating Asana task:', error);
          showToast('Error', 'Failed to create Asana task', 'error');
        })
        .createAsanaTask(taskData);
    }
    
    // Add a new subtask
    function addSubtask() {
      subtasks.push('');
      renderSubtasks();
    }
    
    // Render subtasks
    function renderSubtasks() {
      const container = document.getElementById('subtasksContainer');
      container.innerHTML = '';
      
      subtasks.forEach((subtask, index) => {
        const subtaskElement = document.createElement('div');
        subtaskElement.className = 'subtask-item';
        
        subtaskElement.innerHTML = `
          <input type="text" class="subtask-input" value="${subtask}" placeholder="Enter subtask name">
          <div class="subtask-remove" data-index="${index}">
            <i class="fas fa-times"></i>
          </div>
        `;
        
        // Add event listener to remove button
        subtaskElement.querySelector('.subtask-remove').addEventListener('click', () => {
          removeSubtask(index);
        });
        
        // Add event listener to update subtasks array when input changes
        subtaskElement.querySelector('.subtask-input').addEventListener('input', e => {
          subtasks[index] = e.target.value;
        });
        
        container.appendChild(subtaskElement);
      });
    }
    
    // Remove a subtask
    function removeSubtask(index) {
      subtasks.splice(index, 1);
      
      // Ensure at least one subtask
      if (subtasks.length === 0) {
        subtasks.push('');
      }
      
      renderSubtasks();
    }
    
    // Get all subtasks
    function getSubtasks() {
      // Filter out empty subtasks
      return subtasks.filter(subtask => subtask.trim() !== '');
    }
    
    // Add a tag
    function addTag(tagText) {
      if (!tagText) return;
      
      // Check if tag already exists
      if (tags.includes(tagText)) return;
      
      tags.push(tagText);
      renderTags();
    }
    
    // Render tags
    function renderTags() {
      const container = document.getElementById('tagsContainer');
      const input = document.getElementById('tagsInput');
      
      // Remove all tags but keep the input
      Array.from(container.children).forEach(child => {
        if (child !== input) {
          container.removeChild(child);
        }
      });
      
      // Add tags before the input
      tags.forEach((tag, index) => {
        const tagElement = document.createElement('div');
        tagElement.className = 'tag';
        
        tagElement.innerHTML = `
          <span>${tag}</span>
          <span class="tag-remove" data-index="${index}">×</span>
        `;
        
        // Add event listener to remove button
        tagElement.querySelector('.tag-remove').addEventListener('click', () => {
          removeTag(index);
        });
        
        container.insertBefore(tagElement, input);
      });
    }
    
    // Remove a tag
    function removeTag(index) {
      tags.splice(index, 1);
      renderTags();
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      
      // Set icon and class based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        toastIcon.innerHTML = '<i class="fas fa-exclamation-circle"></i>';
      } else if (type === 'info') {
        toastIcon.className = 'toast-icon info';
        toastIcon.innerHTML = '<i class="fas fa-info-circle"></i>';
      } else {
        toastIcon.className = 'toast-icon success';
        toastIcon.innerHTML = '<i class="fas fa-check-circle"></i>';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto hide after 5 seconds
      setTimeout(() => {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>




<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Task Management</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Task priority colors */
      --priority-high: #ef4444;
      --priority-medium: #f59e0b;
      --priority-low: #10b981;
      
      /* Task status colors */
      --status-new: #3b82f6;
      --status-in-progress: #f59e0b;
      --status-completed: #10b981;
      --status-blocked: #ef4444;
      
      /* Asana color */
      --asana-color: #F06A6A;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      justify-content: space-between;
      gap: 12px;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-asana {
      background: linear-gradient(135deg, #F06A6A, #FC7D7D);
      color: white;
      box-shadow: 0 2px 5px rgba(240, 106, 106, 0.3);
    }
    
    .btn-asana:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(240, 106, 106, 0.4);
    }
    
    .btn-sm {
      padding: 6px 12px;
      font-size: 13px;
    }
    
    .filters-bar {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      margin-bottom: 24px;
    }
    
    .filter-group {
      min-width: 160px;
    }
    
    .filter-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    .filter-control {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .filter-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    /* Custom select styling */
    .custom-select {
      position: relative;
    }
    
    .custom-select select {
      appearance: none;
      -webkit-appearance: none;
      cursor: pointer;
    }
    
    .custom-select::after {
      content: '\f107';
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      pointer-events: none;
      color: var(--text-tertiary);
    }
    
    .tasks-container {
      position: relative;
      min-height: 200px;
    }
    
    .task-list {
      list-style-type: none;
      margin: 0;
      padding: 0;
    }
    
    .task-item {
      padding: 16px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: flex-start;
      gap: 16px;
      transition: background-color var(--transition-fast);
    }
    
    .task-item:hover {
      background-color: var(--bg-secondary);
    }
    
    .task-checkbox {
      flex-shrink: 0;
      margin-top: 3px;
    }
    
    .task-checkbox input[type="checkbox"] {
      display: none;
    }
    
    .task-checkbox label {
      display: block;
      width: 20px;
      height: 20px;
      border: 2px solid var(--border-medium);
      border-radius: 50%;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .task-checkbox input[type="checkbox"]:checked + label {
      background-color: var(--success-color);
      border-color: var(--success-color);
      position: relative;
    }
    
    .task-checkbox input[type="checkbox"]:checked + label::after {
      content: '\f00c';
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      font-size: 10px;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
    }
    
    .task-content {
      flex: 1;
    }
    
    .task-header {
      display: flex;
      align-items: flex-start;
      justify-content: space-between;
      gap: 16px;
      margin-bottom: 6px;
    }
    
    .task-title {
      font-weight: 600;
      color: var(--text-primary);
      font-size: 15px;
      word-break: break-word;
    }
    
    .task-title.completed {
      text-decoration: line-through;
      color: var(--text-tertiary);
    }
    
    .task-metadata {
      display: flex;
      align-items: center;
      gap: 12px;
      flex-wrap: wrap;
    }
    
    .task-tag {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: 500;
      white-space: nowrap;
    }
    
    .task-tag.high {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--priority-high);
    }
    
    .task-tag.medium {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--priority-medium);
    }
    
    .task-tag.low {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--priority-low);
    }
    
    .task-tag.status {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--status-new);
    }
    
    .task-tag.status.new {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--status-new);
    }
    
    .task-tag.status.in-progress {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--status-in-progress);
    }
    
    .task-tag.status.completed {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--status-completed);
    }
    
    .task-tag.status.blocked {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--status-blocked);
    }
    
    .task-tag.category {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    .task-tag.asana {
      background-color: rgba(240, 106, 106, 0.1);
      color: var(--asana-color);
    }
    
    .task-assignee {
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--text-secondary);
      font-size: 12px;
    }
    
    .assignee-avatar {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background-color: var(--primary-light);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
      font-weight: 600;
    }
    
    .task-description {
      color: var(--text-secondary);
      font-size: 13px;
      margin-bottom: 12px;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      word-break: break-word;
    }
    
    .task-footer {
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-wrap: wrap;
      gap: 8px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .task-due-date {
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .task-due-date.overdue {
      color: var(--danger-color);
    }
    
    .task-due-date.today {
      color: var(--warning-color);
    }
    
    .task-actions {
      display: flex;
      gap: 8px;
    }
    
    .task-action-btn {
      padding: 4px;
      color: var(--text-tertiary);
      background: none;
      border: none;
      cursor: pointer;
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all var(--transition-fast);
    }
    
    .task-action-btn:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-primary);
    }
    
    /* Progress bar */
    .task-progress {
      height: 6px;
      background-color: var(--bg-tertiary);
      border-radius: 3px;
      overflow: hidden;
      margin-top: 6px;
    }
    
    .task-progress-bar {
      height: 100%;
      background-color: var(--primary-color);
      transition: width var(--transition-normal);
    }
    
    /* Empty state */
    .empty-state {
      text-align: center;
      padding: 32px 16px;
      color: var(--text-tertiary);
    }
    
    .empty-state-icon {
      font-size: 48px;
      margin-bottom: 16px;
      opacity: 0.5;
    }
    
    .empty-state-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 8px;
    }
    
    .empty-state-subtitle {
      margin-bottom: 24px;
    }
    
    /* View switcher */
    .view-switcher {
      display: flex;
      gap: 8px;
    }
    
    .view-option {
      padding: 6px 12px;
      border-radius: var(--radius-md);
      font-size: 13px;
      font-weight: 500;
      cursor: pointer;
      transition: all var(--transition-fast);
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .view-option:hover {
      background-color: var(--bg-secondary);
    }
    
    .view-option.active {
      background-color: var(--primary-color);
      color: white;
    }
    
    /* Kanban view */
    .kanban-container {
      display: flex;
      gap: 16px;
      overflow-x: auto;
      padding-bottom: 16px;
    }
    
    .kanban-column {
      min-width: 280px;
      width: 280px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      display: flex;
      flex-direction: column;
    }
    
    .kanban-column-header {
      padding: 12px 16px;
      font-weight: 600;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .column-title {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .column-count {
      background-color: rgba(0, 0, 0, 0.1);
      width: 24px;
      height: 24px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
    }
    
    .column-status-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
    }
    
    .column-status-dot.new { background-color: var(--status-new); }
    .column-status-dot.in-progress { background-color: var(--status-in-progress); }
    .column-status-dot.completed { background-color: var(--status-completed); }
    .column-status-dot.blocked { background-color: var(--status-blocked); }
    
    .kanban-column.new .kanban-column-header { color: var(--status-new); }
    .kanban-column.in-progress .kanban-column-header { color: var(--status-in-progress); }
    .kanban-column.completed .kanban-column-header { color: var(--status-completed); }
    .kanban-column.blocked .kanban-column-header { color: var(--status-blocked); }
    
    .kanban-tasks {
      flex: 1;
      padding: 16px;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 12px;
    }
    
    .kanban-task {
      background-color: white;
      border-radius: var(--radius-md);
      padding: 12px;
      box-shadow: var(--shadow-sm);
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .kanban-task:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .kanban-task-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 8px;
    }
    
    .kanban-task-title {
      font-weight: 500;
      word-break: break-word;
    }
    
    .kanban-task-priority {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      flex-shrink: 0;
    }
    
    .kanban-task-priority.high { background-color: var(--priority-high); }
    .kanban-task-priority.medium { background-color: var(--priority-medium); }
    .kanban-task-priority.low { background-color: var(--priority-low); }
    
    .kanban-task-content {
      font-size: 12px;
      color: var(--text-secondary);
      margin-bottom: 12px;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    .kanban-task-footer {
      display: flex;
      align-items: center;
      justify-content: space-between;
      font-size: 11px;
      color: var(--text-tertiary);
    }
    
    /* Tabs */
    .tabs {
      display: flex;
      border-bottom: 1px solid var(--border-light);
      margin-bottom: 16px;
      overflow-x: auto;
    }
    
    .tab {
      padding: 12px 16px;
      font-weight: 500;
      white-space: nowrap;
      cursor: pointer;
      transition: color var(--transition-fast);
      position: relative;
      color: var(--text-secondary);
    }
    
    .tab:hover {
      color: var(--primary-color);
    }
    
    .tab.active {
      color: var(--primary-color);
    }
    
    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      right: 0;
      height: 2px;
      background-color: var(--primary-color);
    }
    
    .tab-content {
      display: none;
    }
    
    .tab-content.active {
      display: block;
    }
    
    /* Search bar */
    .search-container {
      position: relative;
      min-width: 200px;
      flex-grow: 1;
      max-width: 400px;
    }
    
    .search-input {
      width: 100%;
      padding: 10px 12px 10px 36px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .search-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .search-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
      pointer-events: none;
    }
    
    /* Task detail modal */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(15, 23, 42, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 100;
      opacity: 0;
      visibility: hidden;
      transition: opacity var(--transition-normal);
    }
    
    .modal-overlay.visible {
      opacity: 1;
      visibility: visible;
    }
    
    .modal {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      width: 90%;
      max-width: 700px;
      max-height: 90vh;
      overflow-y: auto;
      transform: translateY(20px);
      opacity: 0;
      transition: transform var(--transition-normal), opacity var(--transition-normal);
    }
    
    .modal-overlay.visible .modal {
      transform: translateY(0);
      opacity: 1;
    }
    
    .modal-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .modal-title {
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .modal-title .modal-status {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }
    
    .modal-title .modal-status.new { background-color: var(--status-new); }
    .modal-title .modal-status.in-progress { background-color: var(--status-in-progress); }
    .modal-title .modal-status.completed { background-color: var(--status-completed); }
    .modal-title .modal-status.blocked { background-color: var(--status-blocked); }
    
    .modal-close {
      background: none;
      border: none;
      cursor: pointer;
      color: var(--text-tertiary);
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all var(--transition-fast);
    }
    
    .modal-close:hover {
      background-color: var(--bg-secondary);
      color: var(--text-primary);
    }
    
    .modal-content {
      padding: 24px;
    }
    
    .modal-section {
      margin-bottom: 24px;
    }
    
    .modal-section-title {
      font-weight: 600;
      margin-bottom: 12px;
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 16px;
    }
    
    .modal-section-title i {
      color: var(--primary-color);
    }
    
    .task-detail-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 16px;
    }
    
    .task-detail-item {
      padding: 12px 16px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
    }
    
    .task-detail-label {
      font-size: 12px;
      color: var(--text-tertiary);
      margin-bottom: 4px;
    }
    
    .task-detail-value {
      font-weight: 500;
    }
    
    .checklist-item {
      display: flex;
      align-items: flex-start;
      gap: 12px;
      padding: 8px 0;
    }
    
    .checklist-checkbox {
      width: 18px;
      height: 18px;
      border: 2px solid var(--border-medium);
      border-radius: 4px;
      cursor: pointer;
      position: relative;
      flex-shrink: 0;
      margin-top: 2px;
    }
    
    .checklist-checkbox.checked {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    .checklist-checkbox.checked::after {
      content: '\f00c';
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      font-size: 10px;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
    }
    
    .checklist-text {
      flex: 1;
    }
    
    .checklist-text.checked {
      text-decoration: line-through;
      color: var(--text-tertiary);
    }
    
    .modal-footer {
      padding: 16px 24px;
      border-top: 1px solid var(--border-light);
      display: flex;
      justify-content: space-between;
    }
    
    .modal-footer-actions {
      display: flex;
      gap: 8px;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.2);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .card-header {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .view-switcher {
        width: 100%;
        margin-top: 12px;
        justify-content: space-between;
      }
      
      .filters-bar {
        flex-direction: column;
        align-items: stretch;
      }
      
      .filter-group {
        width: 100%;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-tasks"></i> Task Management
          </h1>
          <div class="header-subtitle">
            Organize and track your team's tasks
          </div>
        </div>
        
        <div class="header-actions">
          <button class="btn btn-asana" id="createAsanaTaskBtn">
            <i class="fas fa-plus"></i> Asana Task
          </button>
          <button class="btn btn-primary" id="createTaskBtn">
            <i class="fas fa-plus"></i> New Task
          </button>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="filters-bar">
        <div class="search-container">
          <i class="fas fa-search search-icon"></i>
          <input type="text" class="search-input" id="searchInput" placeholder="Search tasks...">
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Status</label>
          <div class="custom-select">
            <select class="filter-control" id="statusFilter">
              <option value="all">All Statuses</option>
              <option value="new">New</option>
              <option value="in-progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="blocked">Blocked</option>
            </select>
          </div>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Priority</label>
          <div class="custom-select">
            <select class="filter-control" id="priorityFilter">
              <option value="all">All Priorities</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
          </div>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Assignee</label>
          <div class="custom-select">
            <select class="filter-control" id="assigneeFilter">
              <option value="all">All Assignees</option>
              <option value="me">Assigned to Me</option>
              <!-- Will be populated with team members -->
            </select>
          </div>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <div class="card-title">
            <i class="fas fa-list-check"></i> Your Tasks
          </div>
          
          <div class="view-switcher">
            <div class="view-option active" data-view="list">
              <i class="fas fa-list"></i> List
            </div>
            <div class="view-option" data-view="kanban">
              <i class="fas fa-columns"></i> Kanban
            </div>
          </div>
        </div>
        
        <div class="card-content">
          <div class="tabs">
            <div class="tab active" data-tab="all">
              All Tasks
            </div>
            <div class="tab" data-tab="my-tasks">
              My Tasks
            </div>
            <div class="tab" data-tab="pending">
              Pending
            </div>
            <div class="tab" data-tab="completed">
              Completed
            </div>
            <div class="tab" data-tab="asana">
              Asana Tasks
            </div>
          </div>
          
          <div class="tab-content active" id="all-tasks">
            <!-- List View -->
            <div class="tasks-container" id="listView">
              <ul class="task-list" id="tasksList">
                <!-- Tasks will be loaded here -->
              </ul>
              
              <div class="empty-state" id="emptyState" style="display: none;">
                <div class="empty-state-icon">
                  <i class="fas fa-clipboard-list"></i>
                </div>
                <h3 class="empty-state-title">No tasks found</h3>
                <p class="empty-state-subtitle">Try changing your filters or create a new task</p>
                <button class="btn btn-primary" id="emptyStateCreateBtn">
                  <i class="fas fa-plus"></i> Create Task
                </button>
              </div>
            </div>
            
            <!-- Kanban View -->
            <div class="tasks-container" id="kanbanView" style="display: none;">
              <div class="kanban-container">
                <!-- Kanban columns will be rendered here -->
                <div class="kanban-column new">
                  <div class="kanban-column-header">
                    <div class="column-title">
                      <span class="column-status-dot new"></span>
                      <span>New</span>
                    </div>
                    <div class="column-count" id="newCount">0</div>
                  </div>
                  <div class="kanban-tasks" id="newTasks"></div>
                </div>
                
                <div class="kanban-column in-progress">
                  <div class="kanban-column-header">
                    <div class="column-title">
                      <span class="column-status-dot in-progress"></span>
                      <span>In Progress</span>
                    </div>
                    <div class="column-count" id="inProgressCount">0</div>
                  </div>
                  <div class="kanban-tasks" id="inProgressTasks"></div>
                </div>
                
                <div class="kanban-column completed">
                  <div class="kanban-column-header">
                    <div class="column-title">
                      <span class="column-status-dot completed"></span>
                      <span>Completed</span>
                    </div>
                    <div class="column-count" id="completedCount">0</div>
                  </div>
                  <div class="kanban-tasks" id="completedTasks"></div>
                </div>
                
                <div class="kanban-column blocked">
                  <div class="kanban-column-header">
                    <div class="column-title">
                      <span class="column-status-dot blocked"></span>
                      <span>Blocked</span>
                    </div>
                    <div class="column-count" id="blockedCount">0</div>
                  </div>
                  <div class="kanban-tasks" id="blockedTasks"></div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="tab-content" id="my-tasks">
            <!-- Will have similar structure as all-tasks -->
            <div class="tasks-container">
              <ul class="task-list" id="myTasksList"></ul>
            </div>
          </div>
          
          <div class="tab-content" id="pending">
            <!-- Will have similar structure as all-tasks -->
            <div class="tasks-container">
              <ul class="task-list" id="pendingTasksList"></ul>
            </div>
          </div>
          
          <div class="tab-content" id="completed">
            <!-- Will have similar structure as all-tasks -->
            <div class="tasks-container">
              <ul class="task-list" id="completedTasksList"></ul>
            </div>
          </div>
          
          <div class="tab-content" id="asana">
            <!-- Will have similar structure as all-tasks -->
            <div class="tasks-container">
              <ul class="task-list" id="asanaTasksList"></ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Task Detail Modal -->
  <div class="modal-overlay" id="taskDetailModal">
    <div class="modal">
      <div class="modal-header">
        <div class="modal-title">
          <span class="modal-status"></span>
          <span id="modalTaskTitle">Task Title</span>
        </div>
        <button class="modal-close" id="closeModalBtn">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="modal-content" id="taskDetailContent">
        <!-- Task details will be loaded here -->
      </div>
      
      <div class="modal-footer">
        <div>
          <button class="btn btn-danger" id="deleteTaskBtn">
            <i class="fas fa-trash"></i> Delete
          </button>
        </div>
        <div class="modal-footer-actions">
          <button class="btn btn-secondary" id="closeTaskBtn">Close</button>
          <button class="btn btn-primary" id="editTaskBtn">
            <i class="fas fa-edit"></i> Edit
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Task updated successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let tasks = [];
    let teamMembers = [];
    let asanaConnection = false;
    let currentView = 'list';
    let currentTab = 'all';
    let filters = {
      search: '',
      status: 'all',
      priority: 'all',
      assignee: 'all'
    };
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', () => {
      // Setup event listeners
      setupEventListeners();
      
      // Load team members for assignee filter
      loadTeamMembers();
      
      // Load tasks
      loadTasks();
      
      // Check Asana connection
      checkAsanaConnection();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Create buttons
      document.getElementById('createTaskBtn').addEventListener('click', () => {
        google.script.run.showTaskForm();
      });
      
      document.getElementById('createAsanaTaskBtn').addEventListener('click', () => {
        google.script.run.showAsanaTaskForm();
      });
      
      document.getElementById('emptyStateCreateBtn').addEventListener('click', () => {
        google.script.run.showTaskForm();
      });
      
      // View switcher
      document.querySelectorAll('.view-option').forEach(option => {
        option.addEventListener('click', function() {
          const view = this.getAttribute('data-view');
          switchView(view);
        });
      });
      
      // Tabs
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          switchTab(tabId);
        });
      });
      
      // Filters
      document.getElementById('searchInput').addEventListener('input', function() {
        filters.search = this.value.trim().toLowerCase();
        applyFilters();
      });
      
      document.getElementById('statusFilter').addEventListener('change', function() {
        filters.status = this.value;
        applyFilters();
      });
      
      document.getElementById('priorityFilter').addEventListener('change', function() {
        filters.priority = this.value;
        applyFilters();
      });
      
      document.getElementById('assigneeFilter').addEventListener('change', function() {
        filters.assignee = this.value;
        applyFilters();
      });
      
      // Task detail modal
      document.getElementById('closeModalBtn').addEventListener('click', closeTaskDetailModal);
      document.getElementById('closeTaskBtn').addEventListener('click', closeTaskDetailModal);
      
      document.getElementById('editTaskBtn').addEventListener('click', editCurrentTask);
      
      document.getElementById('deleteTaskBtn').addEventListener('click', deleteCurrentTask);
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', () => {
        document.getElementById('toast').classList.remove('visible');
      });
    }
    
    // Load team members
    function loadTeamMembers() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            teamMembers = result.teamMembers;
            populateAssigneeFilter();
                      } else {
              showToast('Error', result.message || 'Failed to load team members', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            console.error('Error loading team members:', error);
            showToast('Error', 'Failed to load team members', 'error');
          })
          .getTeamMembers();
    }
    
    // Populate assignee filter with team members
    function populateAssigneeFilter() {
      const assigneeFilter = document.getElementById('assigneeFilter');
      
      // Keep the first two options (all and me)
      while (assigneeFilter.options.length > 2) {
        assigneeFilter.remove(2);
      }
      
      // Add team members
      teamMembers.forEach(member => {
        const option = document.createElement('option');
        option.value = member.id;
        option.textContent = member.name;
        assigneeFilter.appendChild(option);
      });
    }
    
    // Check Asana connection
    function checkAsanaConnection() {
      google.script.run
        .withSuccessHandler(result => {
          asanaConnection = result.success && result.connected;
          
          // Update UI elements if needed based on connection status
          document.querySelectorAll('.tab[data-tab="asana"]').forEach(tab => {
            tab.style.display = asanaConnection ? 'block' : 'none';
          });
        })
        .withFailureHandler(error => {
          console.error('Error checking Asana connection:', error);
          asanaConnection = false;
        })
        .checkAsanaConnection();
    }
    
    // Load tasks
    function loadTasks() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            tasks = result.tasks || [];
            renderTasks();
          } else {
            showToast('Error', result.message || 'Failed to load tasks', 'error');
            tasks = [];
            renderTasks();
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading tasks:', error);
          showToast('Error', 'Failed to load tasks', 'error');
          tasks = [];
          renderTasks();
        })
        .getTasks();
    }
    
    // Render tasks based on current view and filters
    function renderTasks() {
      if (currentView === 'list') {
        renderListView();
      } else {
        renderKanbanView();
      }
    }
    
    // Filter tasks based on current filters and tab
    function getFilteredTasks() {
      let filteredTasks = [...tasks];
      
      // Apply tab filtering
      switch (currentTab) {
        case 'my-tasks':
          filteredTasks = filteredTasks.filter(task => task.assignee === 'self');
          break;
        case 'pending':
          filteredTasks = filteredTasks.filter(task => task.status !== 'completed');
          break;
        case 'completed':
          filteredTasks = filteredTasks.filter(task => task.status === 'completed');
          break;
        case 'asana':
          filteredTasks = filteredTasks.filter(task => task.source === 'asana');
          break;
      }
      
      // Apply search filter
      if (filters.search) {
        filteredTasks = filteredTasks.filter(task => 
          (task.title && task.title.toLowerCase().includes(filters.search)) || 
          (task.description && task.description.toLowerCase().includes(filters.search))
        );
      }
      
      // Apply status filter
      if (filters.status !== 'all') {
        filteredTasks = filteredTasks.filter(task => task.status === filters.status);
      }
      
      // Apply priority filter
      if (filters.priority !== 'all') {
        filteredTasks = filteredTasks.filter(task => task.priority === filters.priority);
      }
      
      // Apply assignee filter
      if (filters.assignee !== 'all') {
        if (filters.assignee === 'me') {
          filteredTasks = filteredTasks.filter(task => task.assignee === 'self');
        } else {
          filteredTasks = filteredTasks.filter(task => task.assignee === filters.assignee);
        }
      }
      
      return filteredTasks;
    }
    
    // Render tasks in list view
    function renderListView() {
      const filteredTasks = getFilteredTasks();
      const tasksList = document.getElementById('tasksList');
      const emptyState = document.getElementById('emptyState');
      
      // Clear existing tasks
      tasksList.innerHTML = '';
      
      // Show empty state if no tasks
      if (filteredTasks.length === 0) {
        tasksList.style.display = 'none';
        emptyState.style.display = 'block';
        return;
      }
      
      // Hide empty state and show tasks
      tasksList.style.display = 'block';
      emptyState.style.display = 'none';
      
      // Render each task
      filteredTasks.forEach(task => {
        const taskElement = createTaskListItem(task);
        tasksList.appendChild(taskElement);
      });
      
      // Also update other tab content if needed
      if (currentTab === 'my-tasks') {
        document.getElementById('myTasksList').innerHTML = tasksList.innerHTML;
      } else if (currentTab === 'pending') {
        document.getElementById('pendingTasksList').innerHTML = tasksList.innerHTML;
      } else if (currentTab === 'completed') {
        document.getElementById('completedTasksList').innerHTML = tasksList.innerHTML;
      } else if (currentTab === 'asana') {
        document.getElementById('asanaTasksList').innerHTML = tasksList.innerHTML;
      }
    }
    
    // Create a task list item element
    function createTaskListItem(task) {
      const li = document.createElement('li');
      li.className = 'task-item';
      li.setAttribute('data-id', task.id);
      
      // Calculate task completion percentage for progress bar
      let completionPercentage = 0;
      if (task.checklist && task.checklist.length > 0) {
        const completedItems = task.checklist.filter(item => item.completed).length;
        completionPercentage = (completedItems / task.checklist.length) * 100;
      }
      
      // Check if task is overdue
      const isOverdue = task.dueDate && new Date(task.dueDate) < new Date() && task.status !== 'completed';
      const isToday = task.dueDate && isDateToday(new Date(task.dueDate));
      
      // Format due date
      const dueDateFormatted = task.dueDate ? formatDate(new Date(task.dueDate)) : 'No due date';
      
      // Get assignee name
      let assigneeName = 'Unassigned';
      let assigneeInitials = '--';
      
      if (task.assignee === 'self') {
        assigneeName = 'Me';
        assigneeInitials = 'ME';
      } else if (task.assignee) {
        const assignee = teamMembers.find(m => m.id === task.assignee);
        if (assignee) {
          assigneeName = assignee.name;
          assigneeInitials = getInitials(assignee.name);
        }
      }
      
      // Create task HTML
      li.innerHTML = `
        <div class="task-checkbox">
          <input type="checkbox" id="task-${task.id}" ${task.status === 'completed' ? 'checked' : ''}>
          <label for="task-${task.id}"></label>
        </div>
        <div class="task-content">
          <div class="task-header">
            <h3 class="task-title ${task.status === 'completed' ? 'completed' : ''}">${task.title}</h3>
            <div class="task-metadata">
              <div class="task-tag ${task.priority || 'medium'}">${capitalizeFirstLetter(task.priority || 'medium')}</div>
              <div class="task-tag status ${task.status || 'new'}">${formatStatus(task.status || 'new')}</div>
              ${task.category ? `<div class="task-tag category">${capitalizeFirstLetter(task.category)}</div>` : ''}
              ${task.source === 'asana' ? `<div class="task-tag asana">Asana</div>` : ''}
            </div>
          </div>
          
          ${task.description ? `<div class="task-description">${task.description}</div>` : ''}
          
          ${task.checklist && task.checklist.length > 0 ? 
            `<div class="task-progress">
              <div class="task-progress-bar" style="width: ${completionPercentage}%"></div>
            </div>` : ''
          }
          
          <div class="task-footer">
            <div class="task-meta">
              <div class="task-assignee">
                <div class="assignee-avatar">${assigneeInitials}</div>
                <span>${assigneeName}</span>
              </div>
              
              ${task.dueDate ? 
                `<div class="task-due-date ${isOverdue ? 'overdue' : isToday ? 'today' : ''}">
                  <i class="far fa-calendar-alt"></i>
                  <span>${dueDateFormatted}${isOverdue ? ' (Overdue)' : isToday ? ' (Today)' : ''}</span>
                </div>` : ''
              }
            </div>
            
            <div class="task-actions">
              <button class="task-action-btn view-task" title="View Details">
                <i class="fas fa-eye"></i>
              </button>
              <button class="task-action-btn edit-task" title="Edit">
                <i class="fas fa-edit"></i>
              </button>
              <button class="task-action-btn delete-task" title="Delete">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      li.querySelector('.task-checkbox').addEventListener('click', (e) => {
        e.stopPropagation();
        toggleTaskCompletion(task.id, task.status !== 'completed');
      });
      
      li.querySelector('.view-task').addEventListener('click', (e) => {
        e.stopPropagation();
        showTaskDetails(task);
      });
      
      li.querySelector('.edit-task').addEventListener('click', (e) => {
        e.stopPropagation();
        editTask(task.id);
      });
      
      li.querySelector('.delete-task').addEventListener('click', (e) => {
        e.stopPropagation();
        deleteTask(task.id);
      });
      
      // Make entire task clickable to view details
      li.addEventListener('click', () => {
        showTaskDetails(task);
      });
      
      return li;
    }
    
    // Render tasks in kanban view
    function renderKanbanView() {
      const filteredTasks = getFilteredTasks();
      
      // Group tasks by status
      const tasksByStatus = {
        'new': [],
        'in-progress': [],
        'completed': [],
        'blocked': []
      };
      
      filteredTasks.forEach(task => {
        const status = task.status || 'new';
        if (tasksByStatus[status] !== undefined) {
          tasksByStatus[status].push(task);
        } else {
          tasksByStatus.new.push(task);
        }
      });
      
      // Clear existing tasks in each column
      document.getElementById('newTasks').innerHTML = '';
      document.getElementById('inProgressTasks').innerHTML = '';
      document.getElementById('completedTasks').innerHTML = '';
      document.getElementById('blockedTasks').innerHTML = '';
      
      // Update counts
      document.getElementById('newCount').textContent = tasksByStatus.new.length;
      document.getElementById('inProgressCount').textContent = tasksByStatus['in-progress'].length;
      document.getElementById('completedCount').textContent = tasksByStatus.completed.length;
      document.getElementById('blockedCount').textContent = tasksByStatus.blocked.length;
      
      // Render tasks in each column
      tasksByStatus.new.forEach(task => {
        const taskElement = createKanbanTask(task);
        document.getElementById('newTasks').appendChild(taskElement);
      });
      
      tasksByStatus['in-progress'].forEach(task => {
        const taskElement = createKanbanTask(task);
        document.getElementById('inProgressTasks').appendChild(taskElement);
      });
      
      tasksByStatus.completed.forEach(task => {
        const taskElement = createKanbanTask(task);
        document.getElementById('completedTasks').appendChild(taskElement);
      });
      
      tasksByStatus.blocked.forEach(task => {
        const taskElement = createKanbanTask(task);
        document.getElementById('blockedTasks').appendChild(taskElement);
      });
    }
    
    // Create a kanban task card
    function createKanbanTask(task) {
      const taskElement = document.createElement('div');
      taskElement.className = 'kanban-task';
      taskElement.setAttribute('data-id', task.id);
      
      // Get assignee initials
      let assigneeInitials = '--';
      if (task.assignee === 'self') {
        assigneeInitials = 'ME';
      } else if (task.assignee) {
        const assignee = teamMembers.find(m => m.id === task.assignee);
        if (assignee) {
          assigneeInitials = getInitials(assignee.name);
        }
      }
      
      // Format due date
      const dueDateFormatted = task.dueDate ? formatDate(new Date(task.dueDate)) : '';
      const isOverdue = task.dueDate && new Date(task.dueDate) < new Date() && task.status !== 'completed';
      
      taskElement.innerHTML = `
        <div class="kanban-task-header">
          <div class="kanban-task-title">${task.title}</div>
          <div class="kanban-task-priority ${task.priority || 'medium'}"></div>
        </div>
        
        ${task.description ? `<div class="kanban-task-content">${task.description}</div>` : ''}
        
        <div class="kanban-task-footer">
          <div class="assignee-avatar" title="${assigneeInitials === 'ME' ? 'Me (Self)' : ''}">${assigneeInitials}</div>
          
          ${dueDateFormatted ? 
            `<div class="task-due-date ${isOverdue ? 'overdue' : ''}">
              <i class="far fa-calendar-alt"></i> ${dueDateFormatted}
            </div>` : ''
          }
        </div>
      `;
      
      // Add click event to show task details
      taskElement.addEventListener('click', () => {
        showTaskDetails(task);
      });
      
      return taskElement;
    }
    
    // Switch view between list and kanban
    function switchView(view) {
      // Update active class
      document.querySelectorAll('.view-option').forEach(option => {
        option.classList.toggle('active', option.getAttribute('data-view') === view);
      });
      
      // Show/hide appropriate view
      if (view === 'list') {
        document.getElementById('listView').style.display = 'block';
        document.getElementById('kanbanView').style.display = 'none';
        currentView = 'list';
      } else {
        document.getElementById('listView').style.display = 'none';
        document.getElementById('kanbanView').style.display = 'block';
        currentView = 'kanban';
      }
      
      // Re-render tasks for the new view
      renderTasks();
    }
    
    // Switch between tabs
    function switchTab(tabId) {
      // Update active tab
      document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.toggle('active', tab.getAttribute('data-tab') === tabId);
      });
      
      // Show active tab content
      document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.toggle('active', content.id === `${tabId}-tasks`);
      });
      
      // Update current tab
      currentTab = tabId;
      
      // Re-render tasks for the new tab
      renderTasks();
    }
    
    // Apply filters to tasks
    function applyFilters() {
      renderTasks();
    }
    
    // Toggle task completion status
    function toggleTaskCompletion(taskId, completed) {
      showLoading();
      
      const newStatus = completed ? 'completed' : 'new';
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            // Update task in the local array
            const taskIndex = tasks.findIndex(t => t.id === taskId);
            if (taskIndex !== -1) {
              tasks[taskIndex].status = newStatus;
              
              // If there was a previous status, restore it instead of setting to 'new'
              if (!completed && tasks[taskIndex].previousStatus) {
                tasks[taskIndex].status = tasks[taskIndex].previousStatus;
              } else if (completed) {
                // Store previous status when marking as completed
                tasks[taskIndex].previousStatus = tasks[taskIndex].status === 'completed' ? 'new' : tasks[taskIndex].status;
              }
            }
            
            renderTasks();
            showToast('Success', 'Task status updated', 'success');
          } else {
            showToast('Error', result.message || 'Failed to update task status', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error updating task status:', error);
          showToast('Error', 'Failed to update task status', 'error');
        })
        .updateTaskStatus(taskId, newStatus);
    }
    
    // Show task details in modal
    function showTaskDetails(task) {
      // Set modal title with status
      const modalTitle = document.querySelector('.modal-title');
      modalTitle.innerHTML = `
        <span class="modal-status ${task.status || 'new'}"></span>
        <span id="modalTaskTitle">${task.title}</span>
      `;
      
      // Get assignee name
      let assigneeName = 'Unassigned';
      if (task.assignee === 'self') {
        assigneeName = 'Me (Self)';
      } else if (task.assignee) {
        const assignee = teamMembers.find(m => m.id === task.assignee);
        if (assignee) {
          assigneeName = assignee.name;
        }
      }
      
      // Format dates
      const dueDateFormatted = task.dueDate ? formatDate(new Date(task.dueDate)) : 'No due date';
      const createdDateFormatted = task.createdAt ? formatDate(new Date(task.createdAt)) : 'Unknown';
      
      // Set modal content
      const modalContent = document.getElementById('taskDetailContent');
      modalContent.innerHTML = `
        <div class="modal-section">
          <div class="modal-section-title">
            <i class="fas fa-info-circle"></i> Details
          </div>
          <div class="task-detail-grid">
            <div class="task-detail-item">
              <div class="task-detail-label">Status</div>
              <div class="task-detail-value">
                <span class="task-tag status ${task.status || 'new'}" style="display: inline-flex;">
                  ${formatStatus(task.status || 'new')}
                </span>
              </div>
            </div>
            <div class="task-detail-item">
              <div class="task-detail-label">Priority</div>
              <div class="task-detail-value">
                <span class="task-tag ${task.priority || 'medium'}" style="display: inline-flex;">
                  ${capitalizeFirstLetter(task.priority || 'medium')}
                </span>
              </div>
            </div>
            <div class="task-detail-item">
              <div class="task-detail-label">Assignee</div>
              <div class="task-detail-value">${assigneeName}</div>
            </div>
            <div class="task-detail-item">
              <div class="task-detail-label">Due Date</div>
              <div class="task-detail-value">${dueDateFormatted}</div>
            </div>
            ${task.estimatedTime ? `
              <div class="task-detail-item">
                <div class="task-detail-label">Estimated Time</div>
                <div class="task-detail-value">${task.estimatedTime} minutes</div>
              </div>
            ` : ''}
            ${task.category ? `
              <div class="task-detail-item">
                <div class="task-detail-label">Category</div>
                <div class="task-detail-value">${capitalizeFirstLetter(task.category)}</div>
              </div>
            ` : ''}
            <div class="task-detail-item">
              <div class="task-detail-label">Created</div>
              <div class="task-detail-value">${createdDateFormatted}</div>
            </div>
          </div>
        </div>
        
        ${task.description ? `
          <div class="modal-section">
            <div class="modal-section-title">
              <i class="fas fa-align-left"></i> Description
            </div>
            <div style="background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md);">
              ${task.description}
            </div>
          </div>
        ` : ''}
        
        ${task.checklist && task.checklist.length > 0 ? `
          <div class="modal-section">
            <div class="modal-section-title">
              <i class="fas fa-check-square"></i> Checklist
            </div>
            <div>
              ${task.checklist.map((item, index) => `
                <div class="checklist-item">
                  <div class="checklist-checkbox ${item.completed ? 'checked' : ''}" data-index="${index}" data-task-id="${task.id}"></div>
                  <div class="checklist-text ${item.completed ? 'checked' : ''}">${item.text || item}</div>
                </div>
              `).join('')}
            </div>
          </div>
        ` : ''}
        
        ${task.source === 'asana' ? `
          <div class="modal-section">
            <div class="modal-section-title">
              <i class="fas fa-external-link-alt"></i> Asana
            </div>
            <div style="padding: 12px; background-color: rgba(240, 106, 106, 0.1); border-radius: var(--radius-md);">
              <div style="display: flex; align-items: center; gap: 8px;">
                <i class="fas fa-link" style="color: var(--asana-color);"></i>
                <a href="${task.asanaUrl || '#'}" target="_blank" style="color: var(--asana-color); font-weight: 500;">
                  View in Asana
                </a>
              </div>
            </div>
          </div>
        ` : ''}
      `;
      
      // Attach checklist item click events
      modalContent.querySelectorAll('.checklist-checkbox').forEach(checkbox => {
        checkbox.addEventListener('click', function() {
          const taskId = this.getAttribute('data-task-id');
          const itemIndex = parseInt(this.getAttribute('data-index'));
          toggleChecklistItem(taskId, itemIndex);
        });
      });
      
      // Store current task ID for modal actions
      document.getElementById('editTaskBtn').setAttribute('data-task-id', task.id);
      document.getElementById('deleteTaskBtn').setAttribute('data-task-id', task.id);
      
      // Show modal
      document.getElementById('taskDetailModal').classList.add('visible');
    }
    
    // Close task detail modal
    function closeTaskDetailModal() {
      document.getElementById('taskDetailModal').classList.remove('visible');
    }
    
    // Edit current task (from modal)
    function editCurrentTask() {
      const taskId = document.getElementById('editTaskBtn').getAttribute('data-task-id');
      editTask(taskId);
    }
    
    // Delete current task (from modal)
    function deleteCurrentTask() {
      const taskId = document.getElementById('deleteTaskBtn').getAttribute('data-task-id');
      
      if (confirm('Are you sure you want to delete this task? This cannot be undone.')) {
        closeTaskDetailModal();
        deleteTask(taskId);
      }
    }
    
    // Edit task
    function editTask(taskId) {
      closeTaskDetailModal();
      
      google.script.run.showTaskForm(taskId);
    }
    
    // Delete task
    function deleteTask(taskId) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            // Remove task from local array
            tasks = tasks.filter(task => task.id !== taskId);
            
            renderTasks();
            showToast('Success', 'Task deleted successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to delete task', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error deleting task:', error);
          showToast('Error', 'Failed to delete task', 'error');
        })
        .deleteTask(taskId);
    }
    
    // Toggle checklist item completion
    function toggleChecklistItem(taskId, itemIndex) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            // Update task in local array
            const taskIndex = tasks.findIndex(t => t.id === taskId);
            if (taskIndex !== -1 && tasks[taskIndex].checklist && tasks[taskIndex].checklist[itemIndex]) {
              // Toggle completion status
              const item = tasks[taskIndex].checklist[itemIndex];
              if (typeof item === 'string') {
                tasks[taskIndex].checklist[itemIndex] = { text: item, completed: true };
              } else {
                item.completed = !item.completed;
              }
              
              renderTasks();
              showTaskDetails(tasks[taskIndex]); // Refresh modal
            }
          } else {
            showToast('Error', result.message || 'Failed to update checklist item', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error toggling checklist item:', error);
          showToast('Error', 'Failed to update checklist item', 'error');
        })
        .toggleChecklistItem(taskId, itemIndex);
    }
    
    // Format date to readable string
    function formatDate(date) {
      if (!date) return '';
      
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return date.toLocaleDateString(undefined, options);
    }
    
    // Check if date is today
    function isDateToday(date) {
      const today = new Date();
      return date.getDate() === today.getDate() && 
             date.getMonth() === today.getMonth() && 
             date.getFullYear() === today.getFullYear();
    }
    
    // Format status string for display
    function formatStatus(status) {
      switch (status) {
        case 'in-progress': return 'In Progress';
        default: return capitalizeFirstLetter(status);
      }
    }
    
    // Capitalize first letter of a string
    function capitalizeFirstLetter(string) {
      if (!string) return '';
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    // Get initials from name
    function getInitials(name) {
      if (!name) return '--';
      
      const parts = name.split(' ');
      if (parts.length >= 2) {
        return (parts[0][0] + parts[1][0]).toUpperCase();
      }
      
      return name.substring(0, 2).toUpperCase();
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      
      // Set icon and class based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        toastIcon.innerHTML = '<i class="fas fa-exclamation-circle"></i>';
      } else {
        toastIcon.className = 'toast-icon success';
        toastIcon.innerHTML = '<i class="fas fa-check-circle"></i>';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto hide after 5 seconds
      setTimeout(() => {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>




/**
 * 📋 TaskService.gs - Task Management System 📋
 * Handles task creation, editing, tracking, and Asana integration
 */

// Task Service Configuration
const TASK_CONFIG = {
  SHEETS: {
    TASKS: 'Tasks',
    TASK_ITEMS: 'Task Items',
    ASANA_TASKS: 'Asana Tasks',
    ASANA_CONFIG: 'Asana Config'
  },
  DEFAULT_PRIORITIES: ['high', 'medium', 'low'],
  DEFAULT_STATUSES: ['new', 'in-progress', 'completed', 'blocked']
};

/**
 * 🏗️ Initialize task management sheets
 * @return {Boolean} Success status
 */
function initializeTaskSheets() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let created = false;
    
    // Create Tasks sheet if it doesn't exist
    if (!ss.getSheetByName(TASK_CONFIG.SHEETS.TASKS)) {
      const tasksSheet = ss.insertSheet(TASK_CONFIG.SHEETS.TASKS);
      
      // Set up header row
      const headers = [
        'Task ID', 'Title', 'Description', 'Status', 'Priority', 
        'Due Date', 'Assignee', 'Category', 'Estimated Time',
        'Created By', 'Created At', 'Modified At', 'Source'
      ];
      tasksSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      tasksSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      tasksSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Task Items sheet if it doesn't exist
    if (!ss.getSheetByName(TASK_CONFIG.SHEETS.TASK_ITEMS)) {
      const itemsSheet = ss.insertSheet(TASK_CONFIG.SHEETS.TASK_ITEMS);
      
      // Set up header row
      const headers = [
        'Item ID', 'Task ID', 'Text', 'Completed', 'Created At'
      ];
      itemsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      itemsSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      itemsSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Asana Tasks sheet if it doesn't exist
    if (!ss.getSheetByName(TASK_CONFIG.SHEETS.ASANA_TASKS)) {
      const asanaSheet = ss.insertSheet(TASK_CONFIG.SHEETS.ASANA_TASKS);
      
      // Set up header row
      const headers = [
        'Task ID', 'Asana Task ID', 'Workspace ID', 'Project ID', 
        'URL', 'Synced At', 'Last Updated'
      ];
      asanaSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      asanaSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      asanaSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Asana Config sheet if it doesn't exist
    if (!ss.getSheetByName(TASK_CONFIG.SHEETS.ASANA_CONFIG)) {
      const configSheet = ss.insertSheet(TASK_CONFIG.SHEETS.ASANA_CONFIG);
      
      // Set up header row
      const headers = [
        'Email', 'Access Token', 'Refresh Token', 'Expires At', 'Connected'
      ];
      configSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      configSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      configSheet.setFrozenRows(1);
      created = true;
    }
    
    return created;
  } catch (error) {
    logError('initializeTaskSheets', error);
    return false;
  }
}

/**
 * 🧹 Clear task cache
 * Call this function any time task data is modified
 * @return {Boolean} Success flag
 */
function clearTaskCache() {
  try {
    const cache = CacheService.getScriptCache();
    cache.remove('tasksCache');
    cache.remove('recentTasksCache');
    return true;
  } catch (error) {
    logError('clearTaskCache', error);
    return false;
  }
}

/**
 * 💾 Save task
 * @param {Object} taskData - Task data
 * @return {Object} Success status and task ID
 */
function saveTask(taskData) {
  try {
    // Initialize sheets if needed
    initializeTaskSheets();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASKS);
    
    if (!tasksSheet) {
      return {
        success: false,
        message: 'Tasks sheet not found'
      };
    }
    
    // Get current user and time
    const userEmail = Session.getEffectiveUser().getEmail();
    const now = new Date();
    
    // Check if this is a new task or update
    if (taskData.id) {
      // Update existing task
      const tasksData = tasksSheet.getDataRange().getValues();
      const headers = tasksData[0];
      
      // Find column indices
      const idIndex = headers.indexOf('Task ID');
      const titleIndex = headers.indexOf('Title');
      const descIndex = headers.indexOf('Description');
      const statusIndex = headers.indexOf('Status');
      const priorityIndex = headers.indexOf('Priority');
      const dueDateIndex = headers.indexOf('Due Date');
      const assigneeIndex = headers.indexOf('Assignee');
      const categoryIndex = headers.indexOf('Category');
      const estTimeIndex = headers.indexOf('Estimated Time');
      const modifiedAtIndex = headers.indexOf('Modified At');
      
      // Find the task
      let taskRow = -1;
      for (let i = 1; i < tasksData.length; i++) {
        if (tasksData[i][idIndex] === taskData.id) {
          taskRow = i + 1; // +1 because rows are 1-based
          break;
        }
      }
      
      if (taskRow === -1) {
        return {
          success: false,
          message: 'Task not found'
        };
      }
      
      // Update task
      tasksSheet.getRange(taskRow, titleIndex + 1).setValue(taskData.title);
      tasksSheet.getRange(taskRow, descIndex + 1).setValue(taskData.description || '');
      tasksSheet.getRange(taskRow, statusIndex + 1).setValue(taskData.status || 'new');
      tasksSheet.getRange(taskRow, priorityIndex + 1).setValue(taskData.priority || 'medium');
      tasksSheet.getRange(taskRow, dueDateIndex + 1).setValue(taskData.dueDate ? new Date(taskData.dueDate) : '');
      tasksSheet.getRange(taskRow, assigneeIndex + 1).setValue(taskData.assignee || '');
      tasksSheet.getRange(taskRow, categoryIndex + 1).setValue(taskData.category || '');
      tasksSheet.getRange(taskRow, estTimeIndex + 1).setValue(taskData.estimatedTime || '');
      tasksSheet.getRange(taskRow, modifiedAtIndex + 1).setValue(now);
      
      // Update checklist items
      updateTaskChecklist(taskData.id, taskData.checklist || []);
      
      // Clear cache
      clearTaskCache();
      
      return {
        success: true,
        taskId: taskData.id
      };
      
    } else {
      // Create new task
      const taskId = Utilities.getUuid();
      
      // Add task to Tasks sheet
      tasksSheet.appendRow([
        taskId,
        taskData.title,
        taskData.description || '',
        taskData.status || 'new',
        taskData.priority || 'medium',
        taskData.dueDate ? new Date(taskData.dueDate) : '',
        taskData.assignee || '',
        taskData.category || '',
        taskData.estimatedTime || '',
        userEmail,
        now,
        now,
        'internal' // Source is 'internal' for tasks created in the app
      ]);
      
      // Save checklist items if any
      if (taskData.checklist && taskData.checklist.length > 0) {
        saveTaskChecklist(taskId, taskData.checklist);
      }
      
      // Clear cache
      clearTaskCache();
      
      return {
        success: true,
        taskId: taskId
      };
    }
  } catch (error) {
    logError('saveTask', error);
    return {
      success: false,
      message: 'Error saving task: ' + error.toString()
    };
  }
}

/**
 * 📝 Save task checklist items
 * @param {String} taskId - Task ID
 * @param {Array} checklist - Array of checklist items
 */
function saveTaskChecklist(taskId, checklist) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const itemsSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASK_ITEMS);
    
    if (!itemsSheet) return;
    
    const now = new Date();
    
    // Process each checklist item
    checklist.forEach(item => {
      // Skip empty items
      if ((typeof item === 'string' && !item.trim()) || 
          (typeof item === 'object' && !item.text.trim())) {
        return;
      }
      
      const itemId = Utilities.getUuid();
      const itemText = typeof item === 'string' ? item : item.text;
      const completed = typeof item === 'object' && item.completed === true;
      
      itemsSheet.appendRow([
        itemId,
        taskId,
        itemText,
        completed,
        now
      ]);
    });
  } catch (error) {
    logError('saveTaskChecklist', error);
  }
}

/**
 * 📝 Update task checklist items
 * @param {String} taskId - Task ID
 * @param {Array} checklist - Array of checklist items
 */
function updateTaskChecklist(taskId, checklist) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const itemsSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASK_ITEMS);
    
    if (!itemsSheet) return;
    
    // Get existing checklist items
    const itemsData = itemsSheet.getDataRange().getValues();
    const headers = itemsData[0];
    
    const itemIdIndex = headers.indexOf('Item ID');
    const taskIdIndex = headers.indexOf('Task ID');
    const textIndex = headers.indexOf('Text');
    const completedIndex = headers.indexOf('Completed');
    
    // Find rows with this task ID
    const existingItems = [];
    const existingRows = [];
    
    for (let i = 1; i < itemsData.length; i++) {
      if (itemsData[i][taskIdIndex] === taskId) {
        existingItems.push({
          id: itemsData[i][itemIdIndex],
          text: itemsData[i][textIndex],
          completed: itemsData[i][completedIndex]
        });
        existingRows.push(i + 1); // +1 because rows are 1-based
      }
    }
    
    // Delete all existing items
    if (existingRows.length > 0) {
      // Sort in descending order to avoid shifting issues when deleting
      existingRows.sort((a, b) => b - a);
      
      existingRows.forEach(row => {
        itemsSheet.deleteRow(row);
      });
    }
    
    // Add new items
    saveTaskChecklist(taskId, checklist);
    
  } catch (error) {
    logError('updateTaskChecklist', error);
  }
}

/**
 * 🔄 Update task status
 * @param {String} taskId - Task ID
 * @param {String} status - New status
 * @return {Object} Success status
 */
function updateTaskStatus(taskId, status) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASKS);
    
    if (!tasksSheet) {
      return {
        success: false,
        message: 'Tasks sheet not found'
      };
    }
    
    // Find the task
    const tasksData = tasksSheet.getDataRange().getValues();
    const headers = tasksData[0];
    
    const idIndex = headers.indexOf('Task ID');
    const statusIndex = headers.indexOf('Status');
    const modifiedAtIndex = headers.indexOf('Modified At');
    
    // Find task row
    let taskRow = -1;
    for (let i = 1; i < tasksData.length; i++) {
      if (tasksData[i][idIndex] === taskId) {
        taskRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    if (taskRow === -1) {
      return {
        success: false,
        message: 'Task not found'
      };
    }
    
    // Update task status
    tasksSheet.getRange(taskRow, statusIndex + 1).setValue(status);
    tasksSheet.getRange(taskRow, modifiedAtIndex + 1).setValue(new Date());
    
    // Clear cache
    clearTaskCache();
    
    return {
      success: true
    };
  } catch (error) {
    logError('updateTaskStatus', error);
    return {
      success: false,
      message: 'Error updating task status: ' + error.toString()
    };
  }
}

/**
 * 🔄 Toggle checklist item completion
 * @param {String} taskId - Task ID
 * @param {Number} itemIndex - Index of the checklist item
 * @return {Object} Success status
 */
function toggleChecklistItem(taskId, itemIndex) {
  try {
    // Get task checklist items
    const task = getTask(taskId);
    
    if (!task.success || !task.task) {
      return {
        success: false,
        message: 'Task not found'
      };
    }
    
    // Update the checklist item
    const checklist = getTaskChecklist(taskId);
    
    if (!checklist || itemIndex < 0 || itemIndex >= checklist.length) {
      return {
        success: false,
        message: 'Checklist item not found'
      };
    }
    
    // Toggle the completion status
    const item = checklist[itemIndex];
    
    if (typeof item === 'string') {
      // Convert string format to object format
      checklist[itemIndex] = {
        text: item,
        completed: true
      };
    } else {
      // Toggle existing completion status
      item.completed = !item.completed;
    }
    
    // Update the checklist
    updateTaskChecklist(taskId, checklist);
    
    // Clear cache
    clearTaskCache();
    
    return {
      success: true
    };
  } catch (error) {
    logError('toggleChecklistItem', error);
    return {
      success: false,
      message: 'Error updating checklist item: ' + error.toString()
    };
  }
}

/**
 * 📋 Get task details
 * @param {String} taskId - Task ID
 * @return {Object} Task data
 */
function getTask(taskId) {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cacheKey = `task_${taskId}`;
    const cachedData = cache.get(cacheKey);
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASKS);
    
    if (!tasksSheet) {
      return {
        success: false,
        message: 'Tasks sheet not found'
      };
    }
    
    // Find the task
    const tasksData = tasksSheet.getDataRange().getValues();
    const headers = tasksData[0];
    
    // Get column indices
    const idIndex = headers.indexOf('Task ID');
    const titleIndex = headers.indexOf('Title');
    const descIndex = headers.indexOf('Description');
    const statusIndex = headers.indexOf('Status');
    const priorityIndex = headers.indexOf('Priority');
    const dueDateIndex = headers.indexOf('Due Date');
    const assigneeIndex = headers.indexOf('Assignee');
    const categoryIndex = headers.indexOf('Category');
    const estTimeIndex = headers.indexOf('Estimated Time');
    const createdByIndex = headers.indexOf('Created By');
    const createdAtIndex = headers.indexOf('Created At');
    const modifiedAtIndex = headers.indexOf('Modified At');
    const sourceIndex = headers.indexOf('Source');
    
    // Find task row
    let taskRow = -1;
    let taskData = null;
    
    for (let i = 1; i < tasksData.length; i++) {
      if (tasksData[i][idIndex] === taskId) {
        taskRow = i;
        taskData = tasksData[i];
        break;
      }
    }
    
    if (taskRow === -1 || !taskData) {
      return {
        success: false,
        message: 'Task not found'
      };
    }
    
    // Build task object
    const task = {
      id: taskData[idIndex],
      title: taskData[titleIndex],
      description: taskData[descIndex],
      status: taskData[statusIndex],
      priority: taskData[priorityIndex],
      dueDate: taskData[dueDateIndex] ? taskData[dueDateIndex].toISOString().split('T')[0] : null,
      assignee: taskData[assigneeIndex],
      category: taskData[categoryIndex],
      estimatedTime: taskData[estTimeIndex],
      createdBy: taskData[createdByIndex],
      createdAt: taskData[createdAtIndex],
      modifiedAt: taskData[modifiedAtIndex],
      source: taskData[sourceIndex]
    };
    
    // Get checklist items
    task.checklist = getTaskChecklist(taskId);
    
    // Get Asana details if from Asana
    if (task.source === 'asana') {
      const asanaDetails = getAsanaTaskDetails(taskId);
      if (asanaDetails) {
        task.asanaTaskId = asanaDetails.asanaTaskId;
        task.asanaUrl = asanaDetails.url;
      }
    }
    
    const result = {
      success: true,
      task: task
    };
    
    // Cache the result for 5 minutes
    cache.put(cacheKey, JSON.stringify(result), 300);
    
    return result;
  } catch (error) {
    logError('getTask', error);
    return {
      success: false,
      message: 'Error retrieving task: ' + error.toString()
    };
  }
}

/**
 * 📝 Get task checklist items
 * @param {String} taskId - Task ID
 * @return {Array} Checklist items
 */
function getTaskChecklist(taskId) {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cacheKey = `checklist_${taskId}`;
    const cachedData = cache.get(cacheKey);
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const itemsSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASK_ITEMS);
    
    if (!itemsSheet) {
      return [];
    }
    
    // Get all checklist items
    const itemsData = itemsSheet.getDataRange().getValues();
    const headers = itemsData[0];
    
    const taskIdIndex = headers.indexOf('Task ID');
    const textIndex = headers.indexOf('Text');
    const completedIndex = headers.indexOf('Completed');
    
    // Filter items for this task
    const checklist = [];
    
    for (let i = 1; i < itemsData.length; i++) {
      if (itemsData[i][taskIdIndex] === taskId) {
        checklist.push({
          text: itemsData[i][textIndex],
          completed: itemsData[i][completedIndex] === true
        });
      }
    }
    
    // Cache the result for 5 minutes
    cache.put(cacheKey, JSON.stringify(checklist), 300);
    
    return checklist;
  } catch (error) {
    logError('getTaskChecklist', error);
    return [];
  }
}

/**
 * 🔍 Get Asana task details
 * @param {String} taskId - Task ID
 * @return {Object|null} Asana task details
 */
function getAsanaTaskDetails(taskId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const asanaSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.ASANA_TASKS);
    
    if (!asanaSheet) {
      return null;
    }
    
    // Get all Asana task mappings
    const asanaData = asanaSheet.getDataRange().getValues();
    const headers = asanaData[0];
    
    const taskIdIndex = headers.indexOf('Task ID');
    const asanaTaskIdIndex = headers.indexOf('Asana Task ID');
    const urlIndex = headers.indexOf('URL');
    
    // Find matching task
    for (let i = 1; i < asanaData.length; i++) {
      if (asanaData[i][taskIdIndex] === taskId) {
        return {
          asanaTaskId: asanaData[i][asanaTaskIdIndex],
          url: asanaData[i][urlIndex]
        };
      }
    }
    
    return null;
  } catch (error) {
    logError('getAsanaTaskDetails', error);
    return null;
  }
}

/**
 * 📋 Get all tasks
 * @return {Object} Tasks data
 */
function getTasks() {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cachedData = cache.get('tasksCache');
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASKS);
    
    if (!tasksSheet) {
      return {
        success: false,
        message: 'Tasks sheet not found'
      };
    }
    
    // Get all tasks
    const tasksData = tasksSheet.getDataRange().getValues();
    const headers = tasksData[0];
    
    // Get column indices
    const idIndex = headers.indexOf('Task ID');
    const titleIndex = headers.indexOf('Title');
    const descIndex = headers.indexOf('Description');
    const statusIndex = headers.indexOf('Status');
    const priorityIndex = headers.indexOf('Priority');
    const dueDateIndex = headers.indexOf('Due Date');
    const assigneeIndex = headers.indexOf('Assignee');
    const categoryIndex = headers.indexOf('Category');
    const estTimeIndex = headers.indexOf('Estimated Time');
    const createdByIndex = headers.indexOf('Created By');
    const createdAtIndex = headers.indexOf('Created At');
    const modifiedAtIndex = headers.indexOf('Modified At');
    const sourceIndex = headers.indexOf('Source');
    
    // Build tasks array
    const tasks = [];
    
    // Skip header row
    for (let i = 1; i < tasksData.length; i++) {
      const taskId = tasksData[i][idIndex];
      
      tasks.push({
        id: taskId,
        title: tasksData[i][titleIndex],
        description: tasksData[i][descIndex],
        status: tasksData[i][statusIndex],
        priority: tasksData[i][priorityIndex],
        dueDate: tasksData[i][dueDateIndex] ? tasksData[i][dueDateIndex].toISOString().split('T')[0] : null,
        assignee: tasksData[i][assigneeIndex],
        category: tasksData[i][categoryIndex],
        estimatedTime: tasksData[i][estTimeIndex],
        createdBy: tasksData[i][createdByIndex],
        createdAt: tasksData[i][createdAtIndex],
        modifiedAt: tasksData[i][modifiedAtIndex],
        source: tasksData[i][sourceIndex],
        checklist: getTaskChecklist(taskId)
      });
    }
    
    const result = {
      success: true,
      tasks: tasks
    };
    
    // Cache the result for 5 minutes
    cache.put('tasksCache', JSON.stringify(result), 300);
    
    return result;
  } catch (error) {
    logError('getTasks', error);
    return {
      success: false,
      message: 'Error retrieving tasks: ' + error.toString()
    };
  }
}

/**
 * 🗑️ Delete task
 * @param {String} taskId - Task ID
 * @return {Object} Success status
 */
function deleteTask(taskId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASKS);
    const itemsSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASK_ITEMS);
    const asanaSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.ASANA_TASKS);
    
    if (!tasksSheet) {
      return {
        success: false,
        message: 'Tasks sheet not found'
      };
    }
    
    // Find the task
    const tasksData = tasksSheet.getDataRange().getValues();
    const headers = tasksData[0];
    const idIndex = headers.indexOf('Task ID');
    
    // Find task row
    let taskRow = -1;
    for (let i = 1; i < tasksData.length; i++) {
      if (tasksData[i][idIndex] === taskId) {
        taskRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    if (taskRow === -1) {
      return {
        success: false,
        message: 'Task not found'
      };
    }
    
    // Delete checklist items
    if (itemsSheet) {
      const itemsData = itemsSheet.getDataRange().getValues();
      const itemHeaders = itemsData[0];
      const itemTaskIdIndex = itemHeaders.indexOf('Task ID');
      
      // Find rows to delete (in reverse order to avoid shifting issues)
      const itemRowsToDelete = [];
      for (let i = 1; i < itemsData.length; i++) {
        if (itemsData[i][itemTaskIdIndex] === taskId) {
          itemRowsToDelete.push(i + 1); // +1 because rows are 1-based
        }
      }
      
      // Delete item rows in reverse order
      itemRowsToDelete.sort((a, b) => b - a).forEach(row => {
        itemsSheet.deleteRow(row);
      });
    }
    
    // Delete Asana mapping if exists
    if (asanaSheet) {
      const asanaData = asanaSheet.getDataRange().getValues();
      const asanaHeaders = asanaData[0];
      const asanaTaskIdIndex = asanaHeaders.indexOf('Task ID');
      
      // Find rows to delete
      let asanaRow = -1;
      for (let i = 1; i < asanaData.length; i++) {
        if (asanaData[i][asanaTaskIdIndex] === taskId) {
          asanaRow = i + 1; // +1 because rows are 1-based
          break;
        }
      }
      
      if (asanaRow !== -1) {
        asanaSheet.deleteRow(asanaRow);
      }
    }
    
    // Delete task
    tasksSheet.deleteRow(taskRow);
    
    // Clear cache
    clearTaskCache();
    
    return {
      success: true
    };
  } catch (error) {
    logError('deleteTask', error);
    return {
      success: false,
      message: 'Error deleting task: ' + error.toString()
    };
  }
}

/**
 * 🔍 Check Asana connection status
 * @return {Object} Connection status
 */
function checkAsanaConnection() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.ASANA_CONFIG);
    
    if (!configSheet) {
      return {
        success: true,
        connected: false
      };
    }
    
    // Get user email
    const userEmail = Session.getEffectiveUser().getEmail();
    
    // Check if user has connected to Asana
    const configData = configSheet.getDataRange().getValues();
    const headers = configData[0];
    
    const emailIndex = headers.indexOf('Email');
    const connectedIndex = headers.indexOf('Connected');
    const accessTokenIndex = headers.indexOf('Access Token');
    const expiresAtIndex = headers.indexOf('Expires At');
    
    // Find user's config
    for (let i = 1; i < configData.length; i++) {
      if (configData[i][emailIndex] === userEmail) {
        // Check if token is valid
        if (configData[i][connectedIndex] === true && configData[i][accessTokenIndex]) {
          // Check if token is expired
          const expiresAt = configData[i][expiresAtIndex];
          const now = new Date();
          
          if (!expiresAt || expiresAt > now) {
            return {
              success: true,
              connected: true
            };
          }
        }
        
        break;
      }
    }
    
    return {
      success: true,
      connected: false
    };
  } catch (error) {
    logError('checkAsanaConnection', error);
    return {
      success: false,
      connected: false,
      message: 'Error checking Asana connection: ' + error.toString()
    };
  }
}

/**
 * 🔗 Initialize Asana connection
 * @return {Object} Status with auth URL
 */
function initializeAsanaConnection() {
  try {
    // This would typically generate an OAuth URL based on your Asana API client
    // For demonstration, we'll return a placeholder
    const authUrl = "https://app.asana.com/-/oauth_authorize?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&response_type=code&state=STATE";
    
    return {
      success: true,
      authUrl: authUrl,
      message: "Please complete authorization in the opened window"
    };
  } catch (error) {
    logError('initializeAsanaConnection', error);
    return {
      success: false,
      message: 'Error connecting to Asana: ' + error.toString()
    };
  }
}

/**
 * 📊 Get Asana data (workspaces, projects, users)
 * @return {Object} Asana data
 */
function getAsanaData() {
  try {
    // Check if connected to Asana
    const connectionStatus = checkAsanaConnection();
    if (!connectionStatus.success || !connectionStatus.connected) {
      return {
        success: false,
        message: 'Not connected to Asana'
      };
    }
    
    // In a real implementation, this would call the Asana API
    // For demonstration, we'll return sample data
    
    return {
      success: true,
      workspaces: [
        { id: 'ws1', name: 'Marketing Team' },
        { id: 'ws2', name: 'Product Development' }
      ],
      projects: [
        { id: 'p1', name: 'Website Redesign', workspaceId: 'ws1' },
        { id: 'p2', name: 'Q2 Campaigns', workspaceId: 'ws1' },
        { id: 'p3', name: 'Feature Roadmap', workspaceId: 'ws2' },
        { id: 'p4', name: 'Bug Tracking', workspaceId: 'ws2' }
      ],
      users: [
        { id: 'u1', name: 'Jane Smith', email: 'jane@example.com' },
        { id: 'u2', name: 'John Doe', email: 'john@example.com' }
      ]
    };
  } catch (error) {
    logError('getAsanaData', error);
    return {
      success: false,
      message: 'Error retrieving Asana data: ' + error.toString()
    };
  }
}

/**
 * 📝 Create task in Asana
 * @param {Object} taskData - Task data for Asana
 * @return {Object} Success status
 */
function createAsanaTask(taskData) {
  try {
    // Check if connected to Asana
    const connectionStatus = checkAsanaConnection();
    if (!connectionStatus.success || !connectionStatus.connected) {
      return {
        success: false,
        message: 'Not connected to Asana'
      };
    }
    
    // In a real implementation, this would call the Asana API to create a task
    // Then save the created task to our Tasks sheet
    
    // Generate IDs
    const taskId = Utilities.getUuid();
    const asanaTaskId = 'asana_' + Math.random().toString(36).substring(2, 15);
    
    // Get spreadsheet and sheets
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASKS);
    const asanaSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.ASANA_TASKS);
    
    // Get current user and time
    const userEmail = Session.getEffectiveUser().getEmail();
    const now = new Date();
    
    // Create task in Tasks sheet
    tasksSheet.appendRow([
      taskId,
      taskData.name,
      taskData.description || '',
      'new', // Default status
      'medium', // Default priority
      taskData.dueDate ? new Date(taskData.dueDate) : '',
      taskData.assignee || '',
      '', // Category
      '', // Estimated time
      userEmail,
      now,
      now,
      'asana' // Source is 'asana'
    ]);
    
    // Save Asana mapping
    asanaSheet.appendRow([
      taskId,
      asanaTaskId,
      taskData.projectId.split('_')[0] || '', // Extract workspace ID
      taskData.projectId,
      'https://app.asana.com/0/' + taskData.projectId + '/' + asanaTaskId,
      now,
      now
    ]);
    
    // Save subtasks if any
    if (taskData.subtasks && taskData.subtasks.length > 0) {
      saveTaskChecklist(taskId, taskData.subtasks);
    }
    
    // Clear cache
    clearTaskCache();
    
    return {
      success: true,
      taskId: taskId,
      asanaTaskId: asanaTaskId
    };
  } catch (error) {
    logError('createAsanaTask', error);
    return {
      success: false,
      message: 'Error creating Asana task: ' + error.toString()
    };
  }
}

/**
 * 🔄 Sync tasks from Asana
 * @return {Object} Success status
 */
function syncTasksFromAsana() {
  try {
    // Check if connected to Asana
    const connectionStatus = checkAsanaConnection();
    if (!connectionStatus.success || !connectionStatus.connected) {
      return {
        success: false,
        message: 'Not connected to Asana'
      };
    }
    
    // In a real implementation, this would call the Asana API to get tasks
    // Then save/update them to our Tasks sheet
    
    // For demonstration, let's simulate syncing a few tasks
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASKS);
    const asanaSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.ASANA_TASKS);
    
    const userEmail = Session.getEffectiveUser().getEmail();
    const now = new Date();
    
    // Sample tasks from "Asana API"
    const asanaTasks = [
      {
        asana_id: 'asana_task_123',
        name: 'Review Q2 Marketing Plan',
        description: 'Review and provide feedback on the Q2 marketing strategy document',
        status: 'in-progress',
        due_date: new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000), // 5 days in the future
        assignee: userEmail,
        workspace_id: 'ws1',
        project_id: 'p2'
      },
      {
        asana_id: 'asana_task_456',
        name: 'Fix Homepage Mobile Layout',
        description: 'The homepage has layout issues on small mobile devices. Fix the responsive design.',
        status: 'new',
        due_date: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000), // 2 days in the future
        assignee: userEmail,
        workspace_id: 'ws2',
        project_id: 'p3'
      }
    ];
    
    // Process each task
    for (const asanaTask of asanaTasks) {
      // Check if task already exists
      const asanaData = asanaSheet.getDataRange().getValues();
      const headers = asanaData[0];
      
      const asanaTaskIdIndex = headers.indexOf('Asana Task ID');
      let existingTaskId = null;
      
      for (let i = 1; i < asanaData.length; i++) {
        if (asanaData[i][asanaTaskIdIndex] === asanaTask.asana_id) {
          existingTaskId = asanaData[i][0]; // Task ID is in the first column
          break;
        }
      }
      
      if (existingTaskId) {
        // Update existing task
        updateTaskFromAsana(existingTaskId, asanaTask);
      } else {
        // Create new task
        createTaskFromAsana(asanaTask);
      }
    }
    
    // Clear cache
    clearTaskCache();
    
    return {
      success: true,
      tasksProcessed: asanaTasks.length
    };
  } catch (error) {
    logError('syncTasksFromAsana', error);
    return {
      success: false,
      message: 'Error syncing Asana tasks: ' + error.toString()
    };
  }
}

/**
 * 🔄 Update task from Asana data
 * @param {String} taskId - Task ID
 * @param {Object} asanaTask - Asana task data
 */
function updateTaskFromAsana(taskId, asanaTask) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASKS);
    const asanaSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.ASANA_TASKS);
    
    // Find task in tasks sheet
    const tasksData = tasksSheet.getDataRange().getValues();
    const headers = tasksData[0];
    
    const idIndex = headers.indexOf('Task ID');
    const titleIndex = headers.indexOf('Title');
    const descIndex = headers.indexOf('Description');
    const statusIndex = headers.indexOf('Status');
    const dueDateIndex = headers.indexOf('Due Date');
    const assigneeIndex = headers.indexOf('Assignee');
    const modifiedAtIndex = headers.indexOf('Modified At');
    
    let taskRow = -1;
    for (let i = 1; i < tasksData.length; i++) {
      if (tasksData[i][idIndex] === taskId) {
        taskRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    if (taskRow === -1) {
      logError('updateTaskFromAsana', new Error('Task not found for update: ' + taskId));
      return;
    }
    
    const now = new Date();
    
    // Update the task
    tasksSheet.getRange(taskRow, titleIndex + 1).setValue(asanaTask.name);
    tasksSheet.getRange(taskRow, descIndex + 1).setValue(asanaTask.description || '');
    tasksSheet.getRange(taskRow, statusIndex + 1).setValue(asanaTask.status || 'new');
    tasksSheet.getRange(taskRow, dueDateIndex + 1).setValue(asanaTask.due_date || '');
    tasksSheet.getRange(taskRow, assigneeIndex + 1).setValue(asanaTask.assignee || '');
    tasksSheet.getRange(taskRow, modifiedAtIndex + 1).setValue(now);
    
    // Update Asana mapping
    const asanaData = asanaSheet.getDataRange().getValues();
    const asanaHeaders = asanaData[0];
    
    const asanaTaskIdIndex = asanaHeaders.indexOf('Asana Task ID');
    const lastUpdatedIndex = asanaHeaders.indexOf('Last Updated');
    
    let asanaRow = -1;
    for (let i = 1; i < asanaData.length; i++) {
      if (asanaData[i][0] === taskId) { // Task ID is in the first column
        asanaRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    if (asanaRow !== -1) {
      // Update last updated timestamp
      asanaSheet.getRange(asanaRow, lastUpdatedIndex + 1).setValue(now);
    }
  } catch (error) {
    logError('updateTaskFromAsana', error);
  }
}

/**
 * 📝 Create task from Asana data
 * @param {Object} asanaTask - Asana task data
 * @return {String|null} Created task ID
 */
function createTaskFromAsana(asanaTask) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.TASKS);
    const asanaSheet = ss.getSheetByName(TASK_CONFIG.SHEETS.ASANA_TASKS);
    
    const taskId = Utilities.getUuid();
    const userEmail = Session.getEffectiveUser().getEmail();
    const now = new Date();
    
    // Add task to Tasks sheet
    tasksSheet.appendRow([
      taskId,
      asanaTask.name,
      asanaTask.description || '',
      asanaTask.status || 'new',
      'medium', // Default priority
      asanaTask.due_date || '',
      asanaTask.assignee || '',
      '', // Category
      '', // Estimated time
      userEmail,
      now,
      now,
      'asana' // Source is 'asana'
    ]);
    
    // Add Asana mapping
    asanaSheet.appendRow([
      taskId,
      asanaTask.asana_id,
      asanaTask.workspace_id || '',
      asanaTask.project_id || '',
      'https://app.asana.com/0/' + asanaTask.project_id + '/' + asanaTask.asana_id,
      now,
      now
    ]);
    
    return taskId;
  } catch (error) {
    logError('createTaskFromAsana', error);
    return null;
  }
}

/**
 * 📊 Get task statistics
 * @return {Object} Task statistics
 */
function getTaskStatistics() {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cachedData = cache.get('taskStatsCache');
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    // Get all tasks
    const tasksResult = getTasks();
    
    if (!tasksResult.success) {
      return {
        success: false,
        message: tasksResult.message
      };
    }
    
    const tasks = tasksResult.tasks;
    
    // Calculate statistics
    const stats = {
      total: tasks.length,
      byStatus: {},
      byPriority: {},
      byAssignee: {},
      overdue: 0,
      dueThisWeek: 0,
      completedThisWeek: 0
    };
    
    // Initialize status counts
    TASK_CONFIG.DEFAULT_STATUSES.forEach(status => {
      stats.byStatus[status] = 0;
    });
    
    // Initialize priority counts
    TASK_CONFIG.DEFAULT_PRIORITIES.forEach(priority => {
      stats.byPriority[priority] = 0;
    });
    
    // Get current date and week boundaries
    const now = new Date();
    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const weekEnd = new Date(todayStart);
    weekEnd.setDate(todayStart.getDate() + 6); // End of week (6 days from today)
    
    // Process tasks
    const userEmail = Session.getEffectiveUser().getEmail();
    
    tasks.forEach(task => {
      // Count by status
      if (stats.byStatus.hasOwnProperty(task.status)) {
        stats.byStatus[task.status]++;
      } else {
        // If status is not in our default list
        if (!stats.byStatus.other) stats.byStatus.other = 0;
        stats.byStatus.other++;
      }
      
      // Count by priority
      if (stats.byPriority.hasOwnProperty(task.priority)) {
        stats.byPriority[task.priority]++;
      } else {
        // If priority is not in our default list
        if (!stats.byPriority.other) stats.byPriority.other = 0;
        stats.byPriority.other++;
      }
      
      // Count by assignee
      const assigneeKey = task.assignee === 'self' ? 'me' : (task.assignee || 'unassigned');
      if (!stats.byAssignee[assigneeKey]) stats.byAssignee[assigneeKey] = 0;
      stats.byAssignee[assigneeKey]++;
      
      // Check due date for overdue or due this week
      if (task.dueDate && task.status !== 'completed') {
        const dueDate = new Date(task.dueDate);
        if (dueDate < todayStart) {
          stats.overdue++;
        } else if (dueDate <= weekEnd) {
          stats.dueThisWeek++;
        }
      }
      
      // Check if completed this week
      if (task.status === 'completed' && task.modifiedAt) {
        const modifiedDate = new Date(task.modifiedAt);
        if (modifiedDate >= todayStart && modifiedDate <= weekEnd) {
          stats.completedThisWeek++;
        }
      }
    });
    
    const result = {
      success: true,
      statistics: stats
    };
    
    // Cache the result for 15 minutes
    cache.put('taskStatsCache', JSON.stringify(result), 900);
    
    return result;
  } catch (error) {
    logError('getTaskStatistics', error);
    return {
      success: false,
      message: 'Error getting task statistics: ' + error.toString()
    };
  }
}

/**
 * 📄 Export tasks to a spreadsheet
 * @param {Object} options - Export options
 * @return {Object} Success status and URL
 */
function exportTasks(options) {
  try {
    // Get tasks
    const tasksResult = getTasks();
    
    if (!tasksResult.success) {
      return {
        success: false,
        message: tasksResult.message
      };
    }
    
    // Apply filters if provided
    let tasks = tasksResult.tasks;
    
    if (options) {
      if (options.status && options.status !== 'all') {
        tasks = tasks.filter(task => task.status === options.status);
      }
      
      if (options.assignee && options.assignee !== 'all') {
        if (options.assignee === 'me') {
          tasks = tasks.filter(task => task.assignee === 'self');
        } else {
          tasks = tasks.filter(task => task.assignee === options.assignee);
        }
      }
      
      if (options.priority && options.priority !== 'all') {
        tasks = tasks.filter(task => task.priority === options.priority);
      }
      
      if (options.search) {
        const searchTerm = options.search.toLowerCase();
        tasks = tasks.filter(task => 
          (task.title && task.title.toLowerCase().includes(searchTerm)) ||
          (task.description && task.description.toLowerCase().includes(searchTerm))
        );
      }
    }
    
    // Create new spreadsheet
    const today = new Date();
    const fileName = `Tasks Export - ${today.toISOString().split('T')[0]}`;
    const ss = SpreadsheetApp.create(fileName);
    const sheet = ss.getActiveSheet();
    sheet.setName('Tasks');
    
    // Set headers
    const headers = [
      'Task ID', 'Title', 'Description', 'Status', 'Priority',
      'Due Date', 'Assignee', 'Category', 'Created At', 'Source'
    ];
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]).setFontWeight('bold');
    
    // Add tasks to the sheet
    if (tasks.length > 0) {
      const data = tasks.map(task => [
        task.id,
        task.title,
        task.description,
        task.status,
        task.priority,
        task.dueDate ? new Date(task.dueDate) : '',
        task.assignee === 'self' ? 'Me (Self)' : task.assignee,
        task.category,
        task.createdAt,
        task.source
      ]);
      
      sheet.getRange(2, 1, data.length, headers.length).setValues(data);
      
      // Auto-size columns
      sheet.autoResizeColumns(1, headers.length);
    }
    
    return {
      success: true,
      url: ss.getUrl(),
      fileName: fileName
    };
  } catch (error) {
    logError('exportTasks', error);
    return {
      success: false,
      message: 'Error exporting tasks: ' + error.toString()
    };
  }
}

/**
 * 📝 Get recent tasks
 * @param {Number} limit - Maximum number of tasks to return
 * @return {Object} Result with recent tasks
 */
function getRecentTasks(limit = 10) {
  try {
    // Try to get from cache first
    const cache = CacheService.getScriptCache();
    const cacheKey = `recentTasksCache_${limit}`;
    const cachedData = cache.get(cacheKey);
    
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    
    // Get all tasks
    const tasksResult = getTasks();
    if (!tasksResult.success) {
      return tasksResult;
    }
    
    // Sort by created date (newest first) and limit the result
    const recentTasks = tasksResult.tasks
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
      .slice(0, limit)
      .map(task => ({
        id: task.id,
        title: task.title,
        status: task.status,
        priority: task.priority,
        dueDate: task.dueDate,
        assignee: task.assignee,
        createdAt: task.createdAt,
        source: task.source
      }));
    
    const result = { 
      success: true, 
      data: recentTasks 
    };
    
    // Cache the result for 5 minutes
    cache.put(cacheKey, JSON.stringify(result), 300);
    
    return result;
  } catch (error) {
    logError('getRecentTasks', error);
    return { 
      success: false, 
      message: 'Error retrieving recent tasks: ' + error.toString(),
      data: []
    };
  }
}





<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Action Items</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Action item priority colors */
      --priority-high: #ef4444;
      --priority-medium: #f59e0b;
      --priority-low: #10b981;
      
      /* Action item status colors */
      --status-pending: #3b82f6;
      --status-in-progress: #f59e0b;
      --status-completed: #10b981;
      --status-blocked: #ef4444;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 800px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    textarea.form-control {
      resize: vertical;
      min-height: 100px;
    }
    
    .form-hint {
      margin-top: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .form-error {
      margin-top: 6px;
      font-size: 12px;
      color: var(--danger-color);
    }
    
    .form-row {
      display: flex;
      gap: 16px;
    }
    
    .form-col {
      flex: 1;
    }
    
    .priority-options {
      display: flex;
      gap: 12px;
      margin-top: 8px;
    }
    
    .priority-option {
      position: relative;
    }
    
    .priority-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .priority-option label {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      background-color: white;
      cursor: pointer;
      transition: all var(--transition-fast);
      min-width: 100px;
    }
    
    .priority-option input[type="radio"]:checked + label {
      border-color: var(--primary-color);
      background-color: var(--primary-light);
      color: white;
    }
    
    .priority-option.high label {
      border-color: var(--priority-high);
    }
    
    .priority-option.high input[type="radio"]:checked + label {
      background-color: var(--priority-high);
      border-color: var(--priority-high);
    }
    
    .priority-option.medium label {
      border-color: var(--priority-medium);
    }
    
    .priority-option.medium input[type="radio"]:checked + label {
      background-color: var(--priority-medium);
      border-color: var(--priority-medium);
    }
    
    .priority-option.low label {
      border-color: var(--priority-low);
    }
    
    .priority-option.low input[type="radio"]:checked + label {
      background-color: var(--priority-low);
      border-color: var(--priority-low);
    }
    
    .priority-icon {
      margin-bottom: 8px;
      font-size: 20px;
    }
    
    .status-options {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      margin-top: 8px;
    }
    
    .status-option {
      position: relative;
    }
    
    .status-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .status-option label {
      display: flex;
      align-items: center;
      gap: 6px;
      padding: 8px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      background-color: white;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .status-option input[type="radio"]:checked + label {
      border-color: var(--primary-color);
      background-color: var(--bg-secondary);
    }
    
    .status-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
    }
    
    .status-dot.pending {
      background-color: var(--status-pending);
    }
    
    .status-dot.in-progress {
      background-color: var(--status-in-progress);
    }
    
    .status-dot.completed {
      background-color: var(--status-completed);
    }
    
    .status-dot.blocked {
      background-color: var(--status-blocked);
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(239, 68, 68, 0.3);
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(239, 68, 68, 0.4);
    }
    
    .form-actions {
      display: flex;
      justify-content: flex-end;
      gap: 12px;
      margin-top: 24px;
    }
    
    /* Custom select styling */
    .custom-select {
      position: relative;
    }
    
    .custom-select select {
      appearance: none;
      -webkit-appearance: none;
      cursor: pointer;
    }
    
    .custom-select::after {
      content: '\f107';
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      pointer-events: none;
      color: var(--text-tertiary);
    }
    
    /* Tags input */
    .tags-input-container {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      padding: 6px 8px;
      background-color: white;
      min-height: 42px;
    }
    
    .tags-input-container:focus-within {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .tag {
      display: flex;
      align-items: center;
      padding: 4px 8px;
      background-color: var(--bg-tertiary);
      border-radius: 16px;
      font-size: 12px;
      gap: 4px;
    }
    
    .tag-remove {
      color: var(--text-tertiary);
      cursor: pointer;
      width: 16px;
      height: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .tag-remove:hover {
      color: var(--danger-color);
    }
    
    .tags-input {
      flex: 1;
      min-width: 100px;
      border: none;
      outline: none;
      padding: 4px;
      font-size: 14px;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.2);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    /* Reminder section */
    .reminder-section {
      margin-top: 24px;
      padding-top: 24px;
      border-top: 1px solid var(--border-light);
    }
    
    .reminder-options {
      margin-top: 16px;
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
    }
    
    .reminder-option {
      position: relative;
    }
    
    .reminder-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .reminder-option label {
      display: flex;
      align-items: center;
      gap: 6px;
      padding: 8px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      background-color: white;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .reminder-option input[type="radio"]:checked + label {
      border-color: var(--primary-color);
      background-color: var(--primary-light);
      color: white;
    }
    
    .reminder-option input[type="radio"]:checked + label i {
      color: white;
    }
    
    .reminder-option label i {
      color: var(--primary-color);
    }
    
    .custom-date-container {
      margin-top: 12px;
      display: none;
    }
    
    .custom-date-container.visible {
      display: block;
      animation: fadeIn 0.3s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    /* Assignments section */
    .member-checkbox {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 0;
    }
    
    .member-checkbox input[type="checkbox"] {
      width: 18px;
      height: 18px;
      border-radius: var(--radius-sm);
      border: 1px solid var(--border-medium);
      cursor: pointer;
      appearance: none;
      -webkit-appearance: none;
      display: grid;
      place-content: center;
    }
    
    .member-checkbox input[type="checkbox"]::before {
      content: "";
      width: 10px;
      height: 10px;
      transform: scale(0);
      transition: transform var(--transition-fast);
      box-shadow: inset 1em 1em var(--primary-color);
      transform-origin: center;
      clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
    }
    
    .member-checkbox input[type="checkbox"]:checked::before {
      transform: scale(1);
    }
    
    .member-checkbox input[type="checkbox"]:focus {
      outline: none;
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    /* Attachments section */
    .attachments-container {
      border: 2px dashed var(--border-medium);
      border-radius: var(--radius-md);
      padding: 24px;
      text-align: center;
      margin-bottom: 16px;
      transition: all var(--transition-fast);
      cursor: pointer;
    }
    
    .attachments-container:hover {
      border-color: var(--primary-color);
      background-color: var(--bg-secondary);
    }
    
    .attachments-icon {
      font-size: 32px;
      color: var(--text-tertiary);
      margin-bottom: 8px;
    }
    
    .attachments-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .attachments-hint {
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    .attachments-list {
      margin-top: 16px;
    }
    
    .attachment-item {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 12px;
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      margin-bottom: 8px;
    }
    
    .attachment-icon {
      width: 40px;
      height: 40px;
      border-radius: var(--radius-sm);
      background-color: var(--bg-tertiary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--text-tertiary);
      font-size: 20px;
    }
    
    .attachment-details {
      flex: 1;
    }
    
    .attachment-name {
      font-weight: 500;
      margin-bottom: 2px;
    }
    
    .attachment-size {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .attachment-remove {
      color: var(--danger-color);
      cursor: pointer;
      padding: 4px;
      border-radius: 50%;
      font-size: 16px;
      transition: all var(--transition-fast);
    }
    
    .attachment-remove:hover {
      background-color: var(--danger-light);
    }
    
    #fileInput {
      display: none;
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .form-row {
        flex-direction: column;
        gap: 12px;
      }
      
      .priority-options {
        justify-content: space-between;
      }
      
      .priority-option label {
        min-width: 80px;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-clipboard-check"></i> Action Items
          </h1>
          <div class="header-subtitle">
            Create and manage your team's action items
          </div>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="card">
        <div class="card-header">
          <div class="card-title">
            <i class="fas fa-edit"></i> <span id="formTitle">Create Action Item</span>
          </div>
        </div>
        <div class="card-content">
          <form id="actionItemForm">
            <input type="hidden" id="actionItemId" name="actionItemId">
            
            <div class="form-group">
              <label class="form-label" for="actionItemTitle">Title</label>
              <input type="text" class="form-control" id="actionItemTitle" name="title" placeholder="Enter action item title" required>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="actionItemDescription">Description</label>
              <textarea class="form-control" id="actionItemDescription" name="description" placeholder="Enter detailed description"></textarea>
            </div>
            
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="actionItemDueDate">Due Date</label>
                  <input type="date" class="form-control" id="actionItemDueDate" name="dueDate" required>
                </div>
              </div>
              <div class="form-col">
                <div class="form-group">
                  <label class="form-label" for="actionItemCategory">Category</label>
                  <div class="custom-select">
                    <select class="form-control" id="actionItemCategory" name="category">
                      <option value="">Select category...</option>
                      <option value="communication">Communication</option>
                      <option value="documentation">Documentation</option>
                      <option value="followup">Follow-up</option>
                      <option value="meeting">Meeting</option>
                      <option value="onboarding">Onboarding</option>
                      <option value="process">Process Improvement</option>
                      <option value="qa">Quality Assurance</option>
                      <option value="training">Training</option>
                      <option value="other">Other</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Priority</label>
              <div class="priority-options">
                <div class="priority-option high">
                  <input type="radio" id="priorityHigh" name="priority" value="high">
                  <label for="priorityHigh">
                    <span class="priority-icon"><i class="fas fa-arrow-up"></i></span>
                    <span>High</span>
                  </label>
                </div>
                
                <div class="priority-option medium">
                  <input type="radio" id="priorityMedium" name="priority" value="medium" checked>
                  <label for="priorityMedium">
                    <span class="priority-icon"><i class="fas fa-equals"></i></span>
                    <span>Medium</span>
                  </label>
                </div>
                
                <div class="priority-option low">
                  <input type="radio" id="priorityLow" name="priority" value="low">
                  <label for="priorityLow">
                    <span class="priority-icon"><i class="fas fa-arrow-down"></i></span>
                    <span>Low</span>
                  </label>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Status</label>
              <div class="status-options">
                <div class="status-option">
                  <input type="radio" id="statusPending" name="status" value="pending" checked>
                  <label for="statusPending">
                    <span class="status-dot pending"></span>
                    <span>Pending</span>
                  </label>
                </div>
                
                <div class="status-option">
                  <input type="radio" id="statusInProgress" name="status" value="in-progress">
                  <label for="statusInProgress">
                    <span class="status-dot in-progress"></span>
                    <span>In Progress</span>
                  </label>
                </div>
                
                <div class="status-option">
                  <input type="radio" id="statusCompleted" name="status" value="completed">
                  <label for="statusCompleted">
                    <span class="status-dot completed"></span>
                    <span>Completed</span>
                  </label>
                </div>
                
                <div class="status-option">
                  <input type="radio" id="statusBlocked" name="status" value="blocked">
                  <label for="statusBlocked">
                    <span class="status-dot blocked"></span>
                    <span>Blocked</span>
                  </label>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="actionItemSource">Source</label>
              <input type="text" class="form-control" id="actionItemSource" name="source" placeholder="e.g. Team Meeting, Email from Manager, 1:1 Discussion">
              <div class="form-hint">Where did this action item originate from?</div>
            </div>
            
            <div class="form-group">
              <label class="form-label">Tags</label>
              <div class="tags-input-container" id="tagsContainer">
                <input type="text" class="tags-input" id="tagsInput" placeholder="Type and press Enter to add tags">
              </div>
              <div class="form-hint">Press Enter to add each tag</div>
            </div>
            
            <!-- Assignments Section -->
            <div class="form-group">
              <label class="form-label">Assignees</label>
              <div class="form-hint">Who is responsible for this action item?</div>
              
              <div class="member-assignments" id="memberAssignments">
                <!-- Team members will be loaded here -->
                <div class="loading-message">Loading team members...</div>
              </div>
            </div>
            
            <!-- Reminder Section -->
            <div class="reminder-section">
              <h3 style="font-size: 16px; margin-bottom: 8px;">Set Reminder</h3>
              <div class="form-hint" style="margin-bottom: 12px;">Get notified before the action item is due</div>
              
              <div class="reminder-options">
                <div class="reminder-option">
                  <input type="radio" id="reminderNone" name="reminderType" value="none" checked>
                  <label for="reminderNone">
                    <i class="fas fa-bell-slash"></i>
                    No Reminder
                  </label>
                </div>
                
                <div class="reminder-option">
                  <input type="radio" id="reminderSameDay" name="reminderType" value="same-day">
                  <label for="reminderSameDay">
                    <i class="fas fa-bell"></i>
                    Same Day
                  </label>
                </div>
                
                <div class="reminder-option">
                  <input type="radio" id="reminder1Day" name="reminderType" value="1-day">
                  <label for="reminder1Day">
                    <i class="fas fa-bell"></i>
                    1 Day Before
                  </label>
                </div>
                
                <div class="reminder-option">
                  <input type="radio" id="reminder3Days" name="reminderType" value="3-days">
                  <label for="reminder3Days">
                    <i class="fas fa-bell"></i>
                    3 Days Before
                  </label>
                </div>
                
                <div class="reminder-option">
                  <input type="radio" id="reminder1Week" name="reminderType" value="1-week">
                  <label for="reminder1Week">
                    <i class="fas fa-bell"></i>
                    1 Week Before
                  </label>
                </div>
                
                <div class="reminder-option">
                  <input type="radio" id="reminderCustom" name="reminderType" value="custom">
                  <label for="reminderCustom">
                    <i class="fas fa-calendar-alt"></i>
                    Custom Date
                  </label>
                </div>
              </div>
              
              <div class="custom-date-container" id="customDateContainer">
                <div class="form-group">
                  <label class="form-label" for="reminderCustomDate">Custom Reminder Date</label>
                  <input type="date" class="form-control" id="reminderCustomDate" name="reminderCustomDate">
                </div>
              </div>
              
              <div class="form-group" style="margin-top: 16px;">
                <label class="form-label" for="reminderMethod">Reminder Method</label>
                <div class="custom-select">
                  <select class="form-control" id="reminderMethod" name="reminderMethod">
                    <option value="email">Email</option>
                    <option value="notification">Notification</option>
                    <option value="both">Both Email & Notification</option>
                  </select>
                </div>
              </div>
            </div>
            
            <!-- Attachments Section -->
            <div class="form-group">
              <label class="form-label">Attachments</label>
              <div class="form-hint" style="margin-bottom: 8px;">Add files related to this action item</div>
              
              <div class="attachments-container" id="attachmentsDropzone">
                <div class="attachments-icon">
                  <i class="fas fa-cloud-upload-alt"></i>
                </div>
                <div class="attachments-title">
                  Click to upload or drop files here
                </div>
                <div class="attachments-hint">
                  Supports documents, images, and spreadsheets (max 10MB)
                </div>
              </div>
              
              <input type="file" id="fileInput" multiple>
              
              <div class="attachments-list" id="attachmentsList">
                <!-- Attachments will be listed here -->
              </div>
            </div>
            
            <div class="form-actions">
              <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
              <button type="submit" class="btn btn-primary" id="saveBtn">
                <i class="fas fa-save"></i> Save Action Item
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Action item saved successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let teamMembers = [];
    let tags = [];
    let attachments = [];
    let editMode = false;
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', () => {
      // Setup event listeners
      setupEventListeners();
      
      // Load team members for assignment options
      loadTeamMembers();
      
      // Check if editing existing action item
      checkForExistingActionItem();
      
      // Set today's date as default due date if creating new item
      if (!editMode) {
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('actionItemDueDate').value = today;
      }
    });
    
    // Setup event listeners
    function setupEventListeners() {
      // Form submission
      document.getElementById('actionItemForm').addEventListener('submit', handleFormSubmit);
      
      // Cancel button
      document.getElementById('cancelBtn').addEventListener('click', handleCancel);
      
      // Tags input
      const tagsInput = document.getElementById('tagsInput');
      tagsInput.addEventListener('keydown', e => {
        if (e.key === 'Enter' && tagsInput.value.trim()) {
          e.preventDefault();
          addTag(tagsInput.value.trim());
          tagsInput.value = '';
        }
      });
      
      // Reminder type selection
      document.querySelectorAll('input[name="reminderType"]').forEach(radio => {
        radio.addEventListener('change', () => {
          const customDateContainer = document.getElementById('customDateContainer');
          customDateContainer.classList.toggle('visible', radio.value === 'custom');
        });
      });
      
      // Attachments upload
      document.getElementById('attachmentsDropzone').addEventListener('click', () => {
        document.getElementById('fileInput').click();
      });
      
      document.getElementById('fileInput').addEventListener('change', handleFileUpload);
      
      // Setup drag and drop for attachments
      const dropzone = document.getElementById('attachmentsDropzone');
      
      dropzone.addEventListener('dragover', e => {
        e.preventDefault();
        dropzone.style.borderColor = 'var(--primary-color)';
        dropzone.style.backgroundColor = 'var(--bg-secondary)';
      });
      
      dropzone.addEventListener('dragleave', e => {
        e.preventDefault();
        dropzone.style.borderColor = 'var(--border-medium)';
        dropzone.style.backgroundColor = '';
      });
      
      dropzone.addEventListener('drop', e => {
        e.preventDefault();
        dropzone.style.borderColor = 'var(--border-medium)';
        dropzone.style.backgroundColor = '';
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          handleFiles(files);
        }
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', () => {
        document.getElementById('toast').classList.remove('visible');
      });
    }
    
    // Load team members for assignments
    function loadTeamMembers() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            teamMembers = result.teamMembers;
            renderTeamMemberAssignments();
          } else {
            showToast('Error', result.message || 'Failed to load team members', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading team members:', error);
          showToast('Error', 'Failed to load team members', 'error');
        })
        .getTeamMembers();
    }
    
    // Render team member assignments checkboxes
    function renderTeamMemberAssignments() {
      const container = document.getElementById('memberAssignments');
      container.innerHTML = '';
      
      // Self assignment option first
      const selfDiv = document.createElement('div');
      selfDiv.className = 'member-checkbox';
      selfDiv.innerHTML = `
        <input type="checkbox" id="assignSelf" name="assignees" value="self">
        <label for="assignSelf">Me (Self)</label>
      `;
      container.appendChild(selfDiv);
      
      // Add other team members
      teamMembers.forEach(member => {
        const memberDiv = document.createElement('div');
        memberDiv.className = 'member-checkbox';
        memberDiv.innerHTML = `
          <input type="checkbox" id="assign-${member.id}" name="assignees" value="${member.id}">
          <label for="assign-${member.id}">${member.name}</label>
        `;
        container.appendChild(memberDiv);
      });
    }
    
    // Check if we're editing an existing action item
    function checkForExistingActionItem() {
      // Get the action item ID from URL parameter or hidden input
      const actionItemId = document.getElementById('actionItemId').value;
      
      if (actionItemId) {
        editMode = true;
        document.getElementById('formTitle').textContent = 'Edit Action Item';
        
        // Load action item data
        showLoading();
        
        google.script.run
          .withSuccessHandler(result => {
            hideLoading();
            
            if (result.success) {
              populateActionItemForm(result.actionItem);
            } else {
              showToast('Error', result.message || 'Failed to load action item', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            console.error('Error loading action item:', error);
            showToast('Error', 'Failed to load action item', 'error');
          })
          .getActionItem(actionItemId);
      }
    }
    
    // Populate form with action item data for editing
    function populateActionItemForm(actionItem) {
      document.getElementById('actionItemTitle').value = actionItem.title || '';
      document.getElementById('actionItemDescription').value = actionItem.description || '';
      document.getElementById('actionItemDueDate').value = actionItem.dueDate || '';
      document.getElementById('actionItemCategory').value = actionItem.category || '';
      document.getElementById('actionItemSource').value = actionItem.source || '';
      
      // Set priority
      const priorityRadio = document.querySelector(`input[name="priority"][value="${actionItem.priority || 'medium'}"]`);
      if (priorityRadio) priorityRadio.checked = true;
      
      // Set status
      const statusRadio = document.querySelector(`input[name="status"][value="${actionItem.status || 'pending'}"]`);
      if (statusRadio) statusRadio.checked = true;
      
      // Set tags
      tags = actionItem.tags || [];
      renderTags();
      
      // Set assignees
      if (actionItem.assignees && actionItem.assignees.length > 0) {
        actionItem.assignees.forEach(assigneeId => {
          const checkbox = document.querySelector(`input[name="assignees"][value="${assigneeId}"]`);
          if (checkbox) checkbox.checked = true;
        });
      }
      
      // Set reminder
      if (actionItem.reminder) {
        const reminderTypeRadio = document.querySelector(`input[name="reminderType"][value="${actionItem.reminder.type || 'none'}"]`);
        if (reminderTypeRadio) {
          reminderTypeRadio.checked = true;
          
          if (actionItem.reminder.type === 'custom' && actionItem.reminder.date) {
            document.getElementById('customDateContainer').classList.add('visible');
            document.getElementById('reminderCustomDate').value = actionItem.reminder.date;
          }
        }
        
        if (actionItem.reminder.method) {
          document.getElementById('reminderMethod').value = actionItem.reminder.method;
        }
      }
      
      // Set attachments
      if (actionItem.attachments && actionItem.attachments.length > 0) {
        attachments = actionItem.attachments;
        renderAttachments();
      }
    }
    
    // Handle form submission
    function handleFormSubmit(e) {
      e.preventDefault();
      
      // Validate form
      const form = document.getElementById('actionItemForm');
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }
      
      // Collect form data
      const formData = {
        id: document.getElementById('actionItemId').value || null,
        title: document.getElementById('actionItemTitle').value,
        description: document.getElementById('actionItemDescription').value,
        dueDate: document.getElementById('actionItemDueDate').value,
        category: document.getElementById('actionItemCategory').value,
        source: document.getElementById('actionItemSource').value,
        priority: document.querySelector('input[name="priority"]:checked').value,
        status: document.querySelector('input[name="status"]:checked').value,
        tags: tags,
        assignees: getSelectedAssignees(),
        reminder: getSelectedReminder(),
        attachments: attachments
      };
      
      // Save action item
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Action item saved successfully', 'success');
            
            // Navigate back to action items view after a brief delay
            setTimeout(() => {
              window.location.href = 'javascript:void(0);'; // This will be replaced with actual navigation
              google.script.run.showActionItemsView();
            }, 1500);
          } else {
            showToast('Error', result.message || 'Failed to save action item', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error saving action item:', error);
          showToast('Error', 'Failed to save action item', 'error');
        })
        .saveActionItem(formData);
    }
    
    // Handle cancel button click
    function handleCancel() {
      if (confirm('Are you sure you want to cancel? Any unsaved changes will be lost.')) {
        google.script.run.showActionItemsView();
      }
    }
    
    // Get selected assignees
    function getSelectedAssignees() {
      const checkboxes = document.querySelectorAll('input[name="assignees"]:checked');
      return Array.from(checkboxes).map(cb => cb.value);
    }
    
    // Get selected reminder settings
    function getSelectedReminder() {
      const reminderType = document.querySelector('input[name="reminderType"]:checked').value;
      
      if (reminderType === 'none') {
        return null;
      }
      
      const reminderData = {
        type: reminderType,
        method: document.getElementById('reminderMethod').value
      };
      
      if (reminderType === 'custom') {
        reminderData.date = document.getElementById('reminderCustomDate').value;
      }
      
      return reminderData;
    }
    
    // Add a tag
    function addTag(tagText) {
      if (!tagText) return;
      
      // Check if tag already exists
      if (tags.includes(tagText)) return;
      
      tags.push(tagText);
      renderTags();
    }
    
    // Render tags
    function renderTags() {
      const container = document.getElementById('tagsContainer');
      const input = document.getElementById('tagsInput');
      
      // Remove all tags but keep the input
      Array.from(container.children).forEach(child => {
        if (child !== input) {
          container.removeChild(child);
        }
      });
      
      // Add tags before the input
      tags.forEach((tag, index) => {
        const tagElement = document.createElement('div');
        tagElement.className = 'tag';
        
        tagElement.innerHTML = `
          <span>${tag}</span>
          <span class="tag-remove" data-index="${index}">×</span>
        `;
        
        // Add event listener to remove button
        tagElement.querySelector('.tag-remove').addEventListener('click', () => {
          removeTag(index);
        });
        
        container.insertBefore(tagElement, input);
      });
    }
    
    // Remove a tag
    function removeTag(index) {
      tags.splice(index, 1);
      renderTags();
    }
    
    // Handle file upload from input
    function handleFileUpload(e) {
      handleFiles(e.target.files);
      // Clear the input to allow uploading the same file again
      e.target.value = '';
    }
    
    // Process files from drop or input
    function handleFiles(files) {
      // Validate file size and type
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        
        // Check file size (max 10MB)
        if (file.size > 10 * 1024 * 1024) {
          showToast('Error', `File ${file.name} is too large. Maximum size is 10MB.`, 'error');
          continue;
        }
        
        // For this implementation, just store the file metadata
        // In a real app, you would upload the file to a server or Google Drive
        attachments.push({
          name: file.name,
          size: file.size,
          type: file.type,
          dateAdded: new Date()
        });
      }
      
      renderAttachments();
    }
    
    // Render attachments list
    function renderAttachments() {
      const container = document.getElementById('attachmentsList');
      container.innerHTML = '';
      
      if (attachments.length === 0) return;
      
      attachments.forEach((attachment, index) => {
        const item = document.createElement('div');
        item.className = 'attachment-item';
        
        // Get icon based on file type
        let iconClass = 'fa-file';
        if (attachment.type.includes('image')) {
          iconClass = 'fa-file-image';
        } else if (attachment.type.includes('pdf')) {
          iconClass = 'fa-file-pdf';
        } else if (attachment.type.includes('word') || attachment.type.includes('document')) {
          iconClass = 'fa-file-word';
        } else if (attachment.type.includes('excel') || attachment.type.includes('sheet')) {
          iconClass = 'fa-file-excel';
        } else if (attachment.type.includes('presentation')) {
          iconClass = 'fa-file-powerpoint';
        }
        
        // Format file size
        const sizeInKB = Math.round(attachment.size / 1024);
        const formattedSize = sizeInKB < 1024 ? 
          `${sizeInKB} KB` : 
          `${(sizeInKB / 1024).toFixed(2)} MB`;
        
        item.innerHTML = `
          <div class="attachment-icon">
            <i class="fas ${iconClass}"></i>
          </div>
          <div class="attachment-details">
            <div class="attachment-name">${attachment.name}</div>
            <div class="attachment-size">${formattedSize}</div>
          </div>
          <div class="attachment-remove" data-index="${index}">
            <i class="fas fa-trash"></i>
          </div>
        `;
        
        // Add event listener to remove button
        item.querySelector('.attachment-remove').addEventListener('click', () => {
          removeAttachment(index);
        });
        
        container.appendChild(item);
      });
    }
    
    // Remove an attachment
    function removeAttachment(index) {
      attachments.splice(index, 1);
      renderAttachments();
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      
      // Set icon and class based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        toastIcon.innerHTML = '<i class="fas fa-exclamation-circle"></i>';
      } else {
        toastIcon.className = 'toast-icon success';
        toastIcon.innerHTML = '<i class="fas fa-check-circle"></i>';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto hide after 5 seconds
      setTimeout(() => {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>



<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Action Items</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Action item priority colors */
      --priority-high: #ef4444;
      --priority-medium: #f59e0b;
      --priority-low: #10b981;
      
      /* Action item status colors */
      --status-pending: #3b82f6;
      --status-in-progress: #f59e0b;
      --status-completed: #10b981;
      --status-blocked: #ef4444;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      justify-content: space-between;
      gap: 12px;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
            background-color: var(--bg-secondary);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(239, 68, 68, 0.3);
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(239, 68, 68, 0.4);
    }
    
    .btn-sm {
      padding: 6px 12px;
      font-size: 13px;
    }
    
    .filters-bar {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      margin-bottom: 24px;
    }
    
    .filter-group {
      min-width: 160px;
    }
    
    .filter-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    .filter-control {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .filter-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    /* Custom select styling */
    .custom-select {
      position: relative;
    }
    
    .custom-select select {
      appearance: none;
      -webkit-appearance: none;
      cursor: pointer;
    }
    
    .custom-select::after {
      content: '\f107';
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      pointer-events: none;
      color: var(--text-tertiary);
    }
    
    .action-items-container {
      position: relative;
      min-height: 200px;
    }
    
    .action-item-list {
      list-style-type: none;
      margin: 0;
      padding: 0;
    }
    
    .action-item {
      padding: 16px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: flex-start;
      gap: 16px;
      transition: background-color var(--transition-fast);
    }
    
    .action-item:hover {
      background-color: var(--bg-secondary);
    }
    
    .action-checkbox {
      flex-shrink: 0;
      margin-top: 3px;
    }
    
    .action-checkbox input[type="checkbox"] {
      display: none;
    }
    
    .action-checkbox label {
      display: block;
      width: 20px;
      height: 20px;
      border: 2px solid var(--border-medium);
      border-radius: 50%;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    
    .action-checkbox input[type="checkbox"]:checked + label {
      background-color: var(--success-color);
      border-color: var(--success-color);
      position: relative;
    }
    
    .action-checkbox input[type="checkbox"]:checked + label::after {
      content: '\f00c';
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      font-size: 10px;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
    }
    
    .action-content {
      flex: 1;
    }
    
    .action-header {
      display: flex;
      align-items: flex-start;
      justify-content: space-between;
      gap: 16px;
      margin-bottom: 6px;
    }
    
    .action-title {
      font-weight: 600;
      color: var(--text-primary);
      font-size: 15px;
      word-break: break-word;
    }
    
    .action-title.completed {
      text-decoration: line-through;
      color: var(--text-tertiary);
    }
    
    .action-metadata {
      display: flex;
      align-items: center;
      gap: 12px;
      flex-wrap: wrap;
    }
    
    .action-tag {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: 500;
      white-space: nowrap;
    }
    
    .action-tag.high {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--priority-high);
    }
    
    .action-tag.medium {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--priority-medium);
    }
    
    .action-tag.low {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--priority-low);
    }
    
    .action-tag.status {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--status-pending);
    }
    
    .action-tag.status.pending {
      background-color: rgba(59, 130, 246, 0.1);
      color: var(--status-pending);
    }
    
    .action-tag.status.in-progress {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--status-in-progress);
    }
    
    .action-tag.status.completed {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--status-completed);
    }
    
    .action-tag.status.blocked {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--status-blocked);
    }
    
    .action-tag.category {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    .action-assignee {
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--text-secondary);
      font-size: 12px;
    }
    
    .assignee-avatar {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background-color: var(--primary-light);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
      font-weight: 600;
    }
    
    .action-description {
      color: var(--text-secondary);
      font-size: 13px;
      margin-bottom: 12px;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      word-break: break-word;
    }
    
    .action-footer {
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-wrap: wrap;
      gap: 8px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .action-due-date {
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .action-due-date.overdue {
      color: var(--danger-color);
    }
    
    .action-due-date.today {
      color: var(--warning-color);
    }
    
    .action-actions {
      display: flex;
      gap: 8px;
    }
    
    .action-action-btn {
      padding: 4px;
      color: var(--text-tertiary);
      background: none;
      border: none;
      cursor: pointer;
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all var(--transition-fast);
    }
    
    .action-action-btn:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-primary);
    }
    
    /* Empty state */
    .empty-state {
      text-align: center;
      padding: 32px 16px;
      color: var(--text-tertiary);
    }
    
    .empty-state-icon {
      font-size: 48px;
      margin-bottom: 16px;
      opacity: 0.5;
    }
    
    .empty-state-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 8px;
    }
    
    .empty-state-subtitle {
      margin-bottom: 24px;
    }
    
    /* Tabs */
    .tabs {
      display: flex;
      border-bottom: 1px solid var(--border-light);
      margin-bottom: 16px;
      overflow-x: auto;
    }
    
    .tab {
      padding: 12px 16px;
      font-weight: 500;
      white-space: nowrap;
      cursor: pointer;
      transition: color var(--transition-fast);
      position: relative;
      color: var(--text-secondary);
    }
    
    .tab:hover {
      color: var(--primary-color);
    }
    
    .tab.active {
      color: var(--primary-color);
    }
    
    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      right: 0;
      height: 2px;
      background-color: var(--primary-color);
    }
    
    .tab-content {
      display: none;
    }
    
    .tab-content.active {
      display: block;
    }
    
    /* Search bar */
    .search-container {
      position: relative;
      min-width: 200px;
      flex-grow: 1;
      max-width: 400px;
    }
    
    .search-input {
      width: 100%;
      padding: 10px 12px 10px 36px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .search-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .search-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
      pointer-events: none;
    }
    
    /* Action item detail modal */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(15, 23, 42, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 100;
      opacity: 0;
      visibility: hidden;
      transition: opacity var(--transition-normal);
    }
    
    .modal-overlay.visible {
      opacity: 1;
      visibility: visible;
    }
    
    .modal {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      width: 90%;
      max-width: 700px;
      max-height: 90vh;
      overflow-y: auto;
      transform: translateY(20px);
      opacity: 0;
      transition: transform var(--transition-normal), opacity var(--transition-normal);
    }
    
    .modal-overlay.visible .modal {
      transform: translateY(0);
      opacity: 1;
    }
    
    .modal-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .modal-title {
      font-weight: 600;
      font-size: 18px;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .modal-title .modal-status {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }
    
    .modal-title .modal-status.pending { background-color: var(--status-pending); }
    .modal-title .modal-status.in-progress { background-color: var(--status-in-progress); }
    .modal-title .modal-status.completed { background-color: var(--status-completed); }
    .modal-title .modal-status.blocked { background-color: var(--status-blocked); }
    
    .modal-close {
      background: none;
      border: none;
      cursor: pointer;
      color: var(--text-tertiary);
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all var(--transition-fast);
    }
    
    .modal-close:hover {
      background-color: var(--bg-secondary);
      color: var(--text-primary);
    }
    
    .modal-content {
      padding: 24px;
    }
    
    .modal-section {
      margin-bottom: 24px;
    }
    
    .modal-section-title {
      font-weight: 600;
      margin-bottom: 12px;
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 16px;
    }
    
    .modal-section-title i {
      color: var(--primary-color);
    }
    
    .detail-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 16px;
    }
    
    .detail-item {
      padding: 12px 16px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
    }
    
    .detail-label {
      font-size: 12px;
      color: var(--text-tertiary);
      margin-bottom: 4px;
    }
    
    .detail-value {
      font-weight: 500;
    }
    
    .tags-list {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
    }
    
    .tag-item {
      background-color: var(--bg-tertiary);
      padding: 4px 10px;
      border-radius: 12px;
      font-size: 12px;
      color: var(--text-secondary);
    }
    
    .assignees-list {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      margin-top: 8px;
    }
    
    .assignee-item {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 6px 12px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      font-size: 13px;
    }
    
    .assignee-avatar.large {
      width: 28px;
      height: 28px;
      font-size: 12px;
    }
    
    .attachments-list-modal {
      display: flex;
      flex-direction: column;
      gap: 12px;
      margin-top: 8px;
    }
    
    .attachment-item-modal {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 12px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
    }
    
    .attachment-icon-modal {
      width: 40px;
      height: 40px;
      border-radius: var(--radius-sm);
      background-color: var(--bg-tertiary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--text-tertiary);
      font-size: 20px;
    }
    
    .attachment-details-modal {
      flex: 1;
    }
    
    .attachment-name-modal {
      font-weight: 500;
      margin-bottom: 2px;
    }
    
    .attachment-size-modal {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .attachment-download {
      color: var(--primary-color);
      cursor: pointer;
      padding: 6px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all var(--transition-fast);
    }
    
    .attachment-download:hover {
      background-color: var(--primary-light);
      color: white;
    }
    
    .modal-footer {
      padding: 16px 24px;
      border-top: 1px solid var(--border-light);
      display: flex;
      justify-content: space-between;
    }
    
    .modal-footer-actions {
      display: flex;
      gap: 8px;
    }
    
    /* Reminder badge */
    .reminder-badge {
      display: flex;
      align-items: center;
      gap: 6px;
      color: var(--warning-color);
      background-color: var(--warning-light);
      padding: 4px 8px;
      border-radius: var(--radius-md);
      font-size: 12px;
    }
    
    /* Loading states */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.2);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    /* Calendar view styles */
    .calendar-container {
      overflow-x: auto;
    }
    
    .calendar {
      width: 100%;
      min-width: 800px;
      border-collapse: collapse;
    }
    
    .calendar th {
      padding: 12px;
      font-weight: 600;
      text-align: center;
      background-color: var(--bg-secondary);
      border: 1px solid var(--border-light);
    }
    
    .calendar td {
      height: 120px;
      width: 14.28%;
      border: 1px solid var(--border-light);
      vertical-align: top;
      padding: 0;
    }
    
    .day-header {
      padding: 6px;
      font-weight: 500;
      background-color: var(--bg-secondary);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .day-header-date {
      font-size: 14px;
    }
    
    .day-content {
      padding: 6px;
      overflow-y: auto;
      max-height: 100px;
    }
    
    .calendar-action-item {
      padding: 5px 8px;
      margin-bottom: 4px;
      border-radius: var(--radius-sm);
      font-size: 12px;
      cursor: pointer;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: all var(--transition-fast);
    }
    
    .calendar-action-item:hover {
      background-color: var(--bg-tertiary);
    }
    
    .calendar-action-item.high {
      border-left: 3px solid var(--priority-high);
    }
    
    .calendar-action-item.medium {
      border-left: 3px solid var(--priority-medium);
    }
    
    .calendar-action-item.low {
      border-left: 3px solid var(--priority-low);
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .card-header {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .filters-bar {
        flex-direction: column;
        align-items: stretch;
      }
      
      .filter-group {
        width: 100%;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-clipboard-check"></i> Action Items
          </h1>
          <div class="header-subtitle">
            Track and manage your team's action items
          </div>
        </div>
        
        <div class="header-actions">
          <button class="btn btn-primary" id="createActionItemBtn">
            <i class="fas fa-plus"></i> New Action Item
          </button>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="filters-bar">
        <div class="search-container">
          <i class="fas fa-search search-icon"></i>
          <input type="text" class="search-input" id="searchInput" placeholder="Search action items...">
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Status</label>
          <div class="custom-select">
            <select class="filter-control" id="statusFilter">
              <option value="all">All Statuses</option>
              <option value="pending">Pending</option>
              <option value="in-progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="blocked">Blocked</option>
            </select>
          </div>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Priority</label>
          <div class="custom-select">
            <select class="filter-control" id="priorityFilter">
              <option value="all">All Priorities</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
          </div>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Assignee</label>
          <div class="custom-select">
            <select class="filter-control" id="assigneeFilter">
              <option value="all">All Assignees</option>
              <option value="me">Assigned to Me</option>
              <!-- Will be populated with team members -->
            </select>
          </div>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Due Date</label>
          <div class="custom-select">
            <select class="filter-control" id="dueDateFilter">
              <option value="all">All Dates</option>
              <option value="overdue">Overdue</option>
              <option value="today">Due Today</option>
              <option value="this-week">Due This Week</option>
              <option value="next-week">Due Next Week</option>
            </select>
          </div>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <div class="card-title">
            <i class="fas fa-clipboard-list"></i> Action Items
          </div>
          
          <div class="view-switcher">
            <button class="btn btn-secondary btn-sm view-btn active" data-view="list">
              <i class="fas fa-list"></i> List
            </button>
            <button class="btn btn-secondary btn-sm view-btn" data-view="calendar">
              <i class="fas fa-calendar-alt"></i> Calendar
            </button>
            <button class="btn btn-secondary btn-sm" id="remindersBtn">
              <i class="fas fa-bell"></i> Reminders
            </button>
          </div>
        </div>
        
        <div class="card-content">
          <div class="tabs">
            <div class="tab active" data-tab="all">
              All Action Items
            </div>
            <div class="tab" data-tab="my-items">
              My Items
            </div>
            <div class="tab" data-tab="pending">
              Pending
            </div>
            <div class="tab" data-tab="completed">
              Completed
            </div>
          </div>
          
          <!-- List View -->
          <div class="action-items-container" id="listView">
            <ul class="action-item-list" id="actionItemsList">
              <!-- Action items will be loaded here -->
            </ul>
            
            <div class="empty-state" id="emptyState" style="display: none;">
              <div class="empty-state-icon">
                <i class="fas fa-clipboard-list"></i>
              </div>
              <h3 class="empty-state-title">No action items found</h3>
              <p class="empty-state-subtitle">Try changing your filters or create a new action item</p>
              <button class="btn btn-primary" id="emptyStateCreateBtn">
                <i class="fas fa-plus"></i> Create Action Item
              </button>
            </div>
          </div>
          
          <!-- Calendar View -->
          <div class="action-items-container" id="calendarView" style="display: none;">
            <div class="calendar-container">
              <table class="calendar" id="actionItemsCalendar">
                <!-- Calendar will be rendered here -->
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Action Item Detail Modal -->
  <div class="modal-overlay" id="actionItemDetailModal">
    <div class="modal">
      <div class="modal-header">
        <div class="modal-title">
          <span class="modal-status"></span>
          <span id="modalActionTitle">Action Item Title</span>
        </div>
        <button class="modal-close" id="closeModalBtn">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="modal-content" id="actionItemDetailContent">
        <!-- Action item details will be loaded here -->
      </div>
      
      <div class="modal-footer">
        <div>
          <button class="btn btn-danger" id="deleteActionBtn">
            <i class="fas fa-trash"></i> Delete
          </button>
        </div>
        <div class="modal-footer-actions">
          <button class="btn btn-secondary" id="closeActionBtn">Close</button>
          <button class="btn btn-primary" id="editActionBtn">
            <i class="fas fa-edit"></i> Edit
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Action item updated successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let actionItems = [];
    let teamMembers = [];
    let currentView = 'list';
    let currentTab = 'all';
    let filters = {
      search: '',
      status: 'all',
      priority: 'all',
      assignee: 'all',
      dueDate: 'all'
    };
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', () => {
      // Setup event listeners
      setupEventListeners();
      
      // Load team members for assignee filter
      loadTeamMembers();
      
      // Load action items
      loadActionItems();
      
      // Initialize calendar
      setupCalendar();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Create action item button
      document.getElementById('createActionItemBtn').addEventListener('click', () => {
        google.script.run.showActionItemsForm();
      });
      
      document.getElementById('emptyStateCreateBtn').addEventListener('click', () => {
        google.script.run.showActionItemsForm();
      });
      
      // View switcher
      document.querySelectorAll('.view-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
          this.classList.add('active');
          
          const view = this.getAttribute('data-view');
          switchView(view);
        });
      });
      
      // Reminders button
      document.getElementById('remindersBtn').addEventListener('click', () => {
        google.script.run.showActionItemsReminders();
      });
      
      // Tabs
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
          this.classList.add('active');
          
          const tabId = this.getAttribute('data-tab');
          currentTab = tabId;
          applyFilters();
        });
      });
      
      // Filters
      document.getElementById('searchInput').addEventListener('input', function() {
        filters.search = this.value.trim().toLowerCase();
        applyFilters();
      });
      
      document.getElementById('statusFilter').addEventListener('change', function() {
        filters.status = this.value;
        applyFilters();
      });
      
      document.getElementById('priorityFilter').addEventListener('change', function() {
        filters.priority = this.value;
        applyFilters();
      });
      
      document.getElementById('assigneeFilter').addEventListener('change', function() {
        filters.assignee = this.value;
        applyFilters();
      });
      
      document.getElementById('dueDateFilter').addEventListener('change', function() {
        filters.dueDate = this.value;
        applyFilters();
      });
      
      // Modal close buttons
      document.getElementById('closeModalBtn').addEventListener('click', closeActionItemModal);
      document.getElementById('closeActionBtn').addEventListener('click', closeActionItemModal);
      
      // Edit action item button
      document.getElementById('editActionBtn').addEventListener('click', editCurrentActionItem);
      
      // Delete action item button
      document.getElementById('deleteActionBtn').addEventListener('click', deleteCurrentActionItem);
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', () => {
        document.getElementById('toast').classList.remove('visible');
      });
    }
    
    // Load team members
    function loadTeamMembers() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            teamMembers = result.teamMembers;
            populateAssigneeFilter();
          } else {
            showToast('Error', result.message || 'Failed to load team members', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading team members:', error);
          showToast('Error', 'Failed to load team members', 'error');
        })
        .getTeamMembers();
    }
    
    // Populate assignee filter with team members
    function populateAssigneeFilter() {
      const assigneeFilter = document.getElementById('assigneeFilter');
      
      // Keep the first two options (all and me)
      while (assigneeFilter.options.length > 2) {
        assigneeFilter.remove(2);
      }
      
      // Add team members
      teamMembers.forEach(member => {
        const option = document.createElement('option');
        option.value = member.id;
        option.textContent = member.name;
        assigneeFilter.appendChild(option);
      });
    }
    
    // Load action items
    function loadActionItems() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            actionItems = result.actionItems || [];
            renderActionItems();
          } else {
            showToast('Error', result.message || 'Failed to load action items', 'error');
            actionItems = [];
            renderActionItems();
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading action items:', error);
          showToast('Error', 'Failed to load action items', 'error');
          actionItems = [];
          renderActionItems();
        })
        .getActionItems();
    }
    
    // Render action items based on current view and filters
    function renderActionItems() {
      if (currentView === 'list') {
        renderListView();
      } else {
        renderCalendarView();
      }
    }
    
    // Filter action items based on current filters and tab
    function getFilteredActionItems() {
      let filteredItems = [...actionItems];
      
      // Apply tab filtering
      switch (currentTab) {
        case 'my-items':
          filteredItems = filteredItems.filter(item => 
            item.assignees && item.assignees.includes('self')
          );
          break;
        case 'pending':
          filteredItems = filteredItems.filter(item => 
            item.status === 'pending' || item.status === 'in-progress' || item.status === 'blocked'
          );
          break;
        case 'completed':
          filteredItems = filteredItems.filter(item => item.status === 'completed');
          break;
      }
      
      // Apply search filter
      if (filters.search) {
        filteredItems = filteredItems.filter(item => 
          (item.title && item.title.toLowerCase().includes(filters.search)) || 
          (item.description && item.description.toLowerCase().includes(filters.search))
        );
      }
      
      // Apply status filter
      if (filters.status !== 'all') {
        filteredItems = filteredItems.filter(item => item.status === filters.status);
      }
      
      // Apply priority filter
      if (filters.priority !== 'all') {
        filteredItems = filteredItems.filter(item => item.priority === filters.priority);
      }
      
      // Apply assignee filter
      if (filters.assignee !== 'all') {
        if (filters.assignee === 'me') {
          filteredItems = filteredItems.filter(item => 
            item.assignees && item.assignees.includes('self')
          );
        } else {
          filteredItems = filteredItems.filter(item => 
            item.assignees && item.assignees.includes(filters.assignee)
          );
        }
      }
      
      // Apply due date filter
      if (filters.dueDate !== 'all') {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        
        const weekStart = new Date(today);
        const dayOfWeek = today.getDay(); // 0 = Sunday, 1 = Monday, etc.
        weekStart.setDate(today.getDate() - dayOfWeek);
        
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6);
        
        const nextWeekStart = new Date(weekEnd);
        nextWeekStart.setDate(weekEnd.getDate() + 1);
        
        const nextWeekEnd = new Date(nextWeekStart);
        nextWeekEnd.setDate(nextWeekStart.getDate() + 6);
        
        switch(filters.dueDate) {
          case 'overdue':
            filteredItems = filteredItems.filter(item => {
              if (!item.dueDate || item.status === 'completed') return false;
              const dueDate = new Date(item.dueDate);
              return dueDate < today;
            });
            break;
          case 'today':
            filteredItems = filteredItems.filter(item => {
              if (!item.dueDate) return false;
              const dueDate = new Date(item.dueDate);
              return dueDate >= today && dueDate < tomorrow;
            });
            break;
          case 'this-week':
            filteredItems = filteredItems.filter(item => {
              if (!item.dueDate) return false;
              const dueDate = new Date(item.dueDate);
              return dueDate >= today && dueDate <= weekEnd;
            });
            break;
          case 'next-week':
            filteredItems = filteredItems.filter(item => {
              if (!item.dueDate) return false;
              const dueDate = new Date(item.dueDate);
              return dueDate >= nextWeekStart && dueDate <= nextWeekEnd;
            });
            break;
        }
      }
      
      return filteredItems;
    }
    
    // Render action items in list view
    function renderListView() {
      const filteredItems = getFilteredActionItems();
      const actionItemsList = document.getElementById('actionItemsList');
      const emptyState = document.getElementById('emptyState');
      
      // Clear existing items
      actionItemsList.innerHTML = '';
      
      // Show empty state if no items
      if (filteredItems.length === 0) {
        actionItemsList.style.display = 'none';
        emptyState.style.display = 'block';
        return;
      }
      
      // Hide empty state and show items
      actionItemsList.style.display = 'block';
      emptyState.style.display = 'none';
      
      // Render each action item
      filteredItems.forEach(item => {
        const actionItemElement = createActionItemListItem(item);
        actionItemsList.appendChild(actionItemElement);
      });
    }
    
    // Create an action item list item element
    function createActionItemListItem(item) {
      const li = document.createElement('li');
      li.className = 'action-item';
      li.setAttribute('data-id', item.id);
      
      // Check if action item is overdue
      const isOverdue = item.dueDate && new Date(item.dueDate) < new Date() && item.status !== 'completed';
      const isToday = item.dueDate && isDateToday(new Date(item.dueDate));
      
      // Format due date
      const dueDateFormatted = item.dueDate ? formatDate(new Date(item.dueDate)) : 'No due date';
      
      // Get assignee information for display
      let assigneeHTML = '';
      if (item.assignees && item.assignees.length > 0) {
        // Show the first assignee in the list view
        const firstAssigneeId = item.assignees[0];
        let assigneeName = 'Unassigned';
        let assigneeInitials = '--';
        
        if (firstAssigneeId === 'self') {
          assigneeName = 'Me';
          assigneeInitials = 'ME';
        } else {
          const assignee = teamMembers.find(m => m.id === firstAssigneeId);
          if (assignee) {
            assigneeName = assignee.name;
            assigneeInitials = getInitials(assignee.name);
          }
        }
        
        const othersCount = item.assignees.length - 1;
        const othersText = othersCount > 0 ? ` +${othersCount} others` : '';
        
        assigneeHTML = `
          <div class="action-assignee">
            <div class="assignee-avatar">${assigneeInitials}</div>
            <span>${assigneeName}${othersText}</span>
          </div>
        `;
      }
      
      // Create reminder badge if there's an active reminder
      let reminderBadgeHTML = '';
      if (item.reminder && item.reminder.type !== 'none' && item.status !== 'completed') {
        reminderBadgeHTML = `
          <div class="reminder-badge">
            <i class="fas fa-bell"></i>
            <span>Reminder Set</span>
          </div>
        `;
      }
      
      // Create HTML for the action item
      li.innerHTML = `
        <div class="action-checkbox">
          <input type="checkbox" id="action-${item.id}" ${item.status === 'completed' ? 'checked' : ''}>
          <label for="action-${item.id}"></label>
        </div>
        <div class="action-content">
          <div class="action-header">
            <h3 class="action-title ${item.status === 'completed' ? 'completed' : ''}">${item.title}</h3>
            <div class="action-metadata">
              <div class="action-tag ${item.priority || 'medium'}">${capitalizeFirstLetter(item.priority || 'medium')}</div>
              <div class="action-tag status ${item.status || 'pending'}">${formatStatus(item.status || 'pending')}</div>
              ${item.category ? `<div class="action-tag category">${capitalizeFirstLetter(item.category)}</div>` : ''}
            </div>
          </div>
          
          ${item.description ? `<div class="action-description">${item.description}</div>` : ''}
          
          <div class="action-footer">
            <div class="action-meta">
              ${assigneeHTML}
              
              ${item.dueDate ? 
                `<div class="action-due-date ${isOverdue ? 'overdue' : isToday ? 'today' : ''}">
                  <i class="far fa-calendar-alt"></i>
                  <span>Due: ${dueDateFormatted}${isOverdue ? ' (Overdue)' : isToday ? ' (Today)' : ''}</span>
                </div>` : ''
              }
              
              ${reminderBadgeHTML}
            </div>
            
            <div class="action-actions">
              <button class="action-action-btn view-action" title="View Details">
                <i class="fas fa-eye"></i>
              </button>
              <button class="action-action-btn edit-action" title="Edit">
                <i class="fas fa-edit"></i>
              </button>
              <button class="action-action-btn delete-action" title="Delete">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      li.querySelector('.action-checkbox').addEventListener('click', (e) => {
        e.stopPropagation();
        toggleActionItemCompletion(item.id, item.status !== 'completed');
      });
      
      li.querySelector('.view-action').addEventListener('click', (e) => {
        e.stopPropagation();
        showActionItemDetails(item);
      });
      
      li.querySelector('.edit-action').addEventListener('click', (e) => {
        e.stopPropagation();
        editActionItem(item.id);
      });
      
      li.querySelector('.delete-action').addEventListener('click', (e) => {
        e.stopPropagation();
        deleteActionItem(item.id);
      });
      
      // Make entire item clickable to view details
      li.addEventListener('click', () => {
        showActionItemDetails(item);
      });
      
      return li;
    }
    
    // Initialize calendar
    function setupCalendar() {
      renderCalendarView();
    }
    
    // Render action items in calendar view
    function renderCalendarView() {
      const calendarEl = document.getElementById('actionItemsCalendar');
      calendarEl.innerHTML = '';
      
      // Get the current month and year
      const today = new Date();
      const currentMonth = today.getMonth();
      const currentYear = today.getFullYear();
      
      // Create header row with days of week
      const headerRow = document.createElement('tr');
      ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].forEach(day => {
        const th = document.createElement('th');
        th.textContent = day;
        headerRow.appendChild(th);
      });
      calendarEl.appendChild(headerRow);
      
      // Get first day of month and total days
      const firstDay = new Date(currentYear, currentMonth, 1);
      const lastDay = new Date(currentYear, currentMonth + 1, 0);
      
      // Calculate first calendar day (might be in previous month)
      const firstCalendarDay = new Date(firstDay);
      firstCalendarDay.setDate(firstCalendarDay.getDate() - firstDay.getDay());
      
      // Generate calendar rows
      let currentDate = new Date(firstCalendarDay);
      
      for (let week = 0; week < 6; week++) {
        // Stop if we've gone past the current month
        if (currentDate.getMonth() > currentMonth && currentDate.getDay() === 0) break;
        
        const row = document.createElement('tr');
        
        // Create 7 days for the week
        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {
          const cell = document.createElement('td');
          
          // Check if date is in current month
          const isCurrentMonth = currentDate.getMonth() === currentMonth;
          const isToday = currentDate.toDateString() === today.toDateString();
          
          // Create day header
          const dayHeader = document.createElement('div');
          dayHeader.className = 'day-header';
          dayHeader.style.backgroundColor = isToday ? 'var(--primary-light)' : (isCurrentMonth ? 'var(--bg-secondary)' : 'var(--bg-tertiary)');
          dayHeader.style.color = isToday ? 'white' : (isCurrentMonth ? 'var(--text-primary)' : 'var(--text-tertiary)');
          
          // Add date number
          const dateSpan = document.createElement('span');
          dateSpan.className = 'day-header-date';
          dateSpan.textContent = currentDate.getDate();
          dayHeader.appendChild(dateSpan);
          
          // Add to cell
          cell.appendChild(dayHeader);
          
          // Create day content container
          const dayContent = document.createElement('div');
          dayContent.className = 'day-content';
          
          if (isCurrentMonth) {
            // Add action items for this day
            const dateString = formatDateString(currentDate);
            const dayItems = actionItems.filter(item => {
              return item.dueDate === dateString;
            });
            
            dayItems.forEach(item => {
              const actionElement = document.createElement('div');
              actionElement.className = `calendar-action-item ${item.priority || 'medium'}`;
              actionElement.setAttribute('data-id', item.id);
              
              if (item.status === 'completed') {
                actionElement.style.textDecoration = 'line-through';
                actionElement.style.opacity = '0.7';
              }
              
              actionElement.textContent = item.title;
              actionElement.addEventListener('click', () => {
                showActionItemDetails(item);
              });
              
              dayContent.appendChild(actionElement);
            });
          }
          
          cell.appendChild(dayContent);
          row.appendChild(cell);
          
          // Move to next day
          currentDate.setDate(currentDate.getDate() + 1);
        }
        
        calendarEl.appendChild(row);
      }
    }
    
    // Switch view between list and calendar
    function switchView(view) {
      // Show/hide appropriate view
      if (view === 'list') {
        document.getElementById('listView').style.display = 'block';
        document.getElementById('calendarView').style.display = 'none';
        currentView = 'list';
      } else {
        document.getElementById('listView').style.display = 'none';
        document.getElementById('calendarView').style.display = 'block';
        currentView = 'calendar';
      }
      
      // Re-render action items for the new view
      renderActionItems();
    }
    
    // Apply filters to action items
    function applyFilters() {
      renderActionItems();
    }
    
    // Toggle action item completion status
    function toggleActionItemCompletion(actionItemId, completed) {
      showLoading();
      
      const newStatus = completed ? 'completed' : 'pending';
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            // Update action item in the local array
            const actionItemIndex = actionItems.findIndex(i => i.id === actionItemId);
            if (actionItemIndex !== -1) {
              actionItems[actionItemIndex].status = newStatus;
              
              // If there was a previous status, restore it instead of setting to 'pending'
              if (!completed && actionItems[actionItemIndex].previousStatus) {
                actionItems[actionItemIndex].status = actionItems[actionItemIndex].previousStatus;
              } else if (completed) {
                // Store previous status when marking as completed
                actionItems[actionItemIndex].previousStatus = 
                  actionItems[actionItemIndex].status === 'completed' ? 'pending' : actionItems[actionItemIndex].status;
              }
            }
            
            renderActionItems();
            showToast('Success', 'Action item status updated', 'success');
          } else {
            showToast('Error', result.message || 'Failed to update action item status', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error updating action item status:', error);
          showToast('Error', 'Failed to update action item status', 'error');
        })
        .updateActionItemStatus(actionItemId, newStatus);
    }
    
    // Show action item details in modal
    function showActionItemDetails(actionItem) {
      // Set modal title with status
      const modalTitle = document.querySelector('.modal-title');
      modalTitle.innerHTML = `
        <span class="modal-status ${actionItem.status || 'pending'}"></span>
        <span id="modalActionTitle">${actionItem.title}</span>
      `;
      
      // Format dates
      const dueDateFormatted = actionItem.dueDate ? formatDate(new Date(actionItem.dueDate)) : 'No due date';
      const createdDateFormatted = actionItem.createdAt ? formatDate(new Date(actionItem.createdAt)) : 'Unknown';
      
      // Generate assignees HTML
      let assigneesHTML = '<div class="assignees-list">';
      if (actionItem.assignees && actionItem.assignees.length > 0) {
        actionItem.assignees.forEach(assigneeId => {
          let assigneeName = 'Unassigned';
          let assigneeInitials = '--';
          
          if (assigneeId === 'self') {
            assigneeName = 'Me (Self)';
            assigneeInitials = 'ME';
          } else {
            const assignee = teamMembers.find(m => m.id === assigneeId);
            if (assignee) {
              assigneeName = assignee.name;
              assigneeInitials = getInitials(assignee.name);
            }
          }
          
          assigneesHTML += `
            <div class="assignee-item">
              <div class="assignee-avatar large">${assigneeInitials}</div>
              <span>${assigneeName}</span>
            </div>
          `;
        });
      } else {
        assigneesHTML += '<div class="assignee-item">No assignees</div>';
      }
      assigneesHTML += '</div>';
      
      // Generate tags HTML
      let tagsHTML = '<div class="tags-list">';
      if (actionItem.tags && actionItem.tags.length > 0) {
        actionItem.tags.forEach(tag => {
          tagsHTML += `<div class="tag-item">${tag}</div>`;
        });
      } else {
        tagsHTML += '<div>No tags</div>';
      }
      tagsHTML += '</div>';
      
      // Generate attachments HTML
      let attachmentsHTML = '';
      if (actionItem.attachments && actionItem.attachments.length > 0) {
        attachmentsHTML = `
          <div class="modal-section">
            <div class="modal-section-title">
              <i class="fas fa-paperclip"></i> Attachments
            </div>
            <div class="attachments-list-modal">
        `;
        
        actionItem.attachments.forEach(attachment => {
          // Get icon based on file type
          let iconClass = 'fa-file';
          if (attachment.type.includes('image')) {
            iconClass = 'fa-file-image';
          } else if (attachment.type.includes('pdf')) {
            iconClass = 'fa-file-pdf';
          } else if (attachment.type.includes('word') || attachment.type.includes('document')) {
            iconClass = 'fa-file-word';
          } else if (attachment.type.includes('excel') || attachment.type.includes('sheet')) {
            iconClass = 'fa-file-excel';
          } else if (attachment.type.includes('presentation')) {
            iconClass = 'fa-file-powerpoint';
          }
          
          // Format file size
          const sizeInKB = Math.round(attachment.size / 1024);
          const formattedSize = sizeInKB < 1024 ? 
            `${sizeInKB} KB` : 
            `${(sizeInKB / 1024).toFixed(2)} MB`;
          
          attachmentsHTML += `
            <div class="attachment-item-modal">
              <div class="attachment-icon-modal">
                <i class="fas ${iconClass}"></i>
              </div>
              <div class="attachment-details-modal">
                <div class="attachment-name-modal">${attachment.name}</div>
                <div class="attachment-size-modal">${formattedSize}</div>
              </div>
              <div class="attachment-download">
                <i class="fas fa-download"></i>
              </div>
            </div>
          `;
        });
        
        attachmentsHTML += `
            </div>
          </div>
        `;
      }
      
      // Generate reminder HTML
      let reminderHTML = '';
      if (actionItem.reminder && actionItem.reminder.type !== 'none') {
        let reminderText = '';
        switch (actionItem.reminder.type) {
          case 'same-day':
            reminderText = 'Same day as due date';
            break;
          case '1-day':
            reminderText = '1 day before due date';
            break;
          case '3-days':
            reminderText = '3 days before due date';
            break;
          case '1-week':
            reminderText = '1 week before due date';
            break;
          case 'custom':
            reminderText = `Custom date: ${formatDate(new Date(actionItem.reminder.date))}`;
            break;
          default:
            reminderText = 'Reminder set';
        }
        
        // Get reminder method
        let methodText = 'Email';
        if (actionItem.reminder.method === 'notification') {
          methodText = 'Notification';
        } else if (actionItem.reminder.method === 'both') {
          methodText = 'Email & Notification';
        }
        
        reminderHTML = `
          <div class="modal-section">
            <div class="modal-section-title">
              <i class="fas fa-bell"></i> Reminder
            </div>
            <div class="detail-item">
              <div class="detail-label">Reminder Type</div>
              <div class="detail-value">${reminderText}</div>
            </div>
            <div class="detail-item" style="margin-top: 12px;">
              <div class="detail-label">Reminder Method</div>
              <div class="detail-value">${methodText}</div>
            </div>
          </div>
        `;
      }
      
      // Set modal content
      const modalContent = document.getElementById('actionItemDetailContent');
      modalContent.innerHTML = `
        <div class="modal-section">
          <div class="modal-section-title">
            <i class="fas fa-info-circle"></i> Details
          </div>
          <div class="detail-grid">
            <div class="detail-item">
              <div class="detail-label">Status</div>
              <div class="detail-value">
                <span class="action-tag status ${actionItem.status || 'pending'}" style="display: inline-flex;">
                  ${formatStatus(actionItem.status || 'pending')}
                </span>
              </div>
            </div>
            <div class="detail-item">
              <div class="detail-label">Priority</div>
              <div class="detail-value">
                <span class="action-tag ${actionItem.priority || 'medium'}" style="display: inline-flex;">
                  ${capitalizeFirstLetter(actionItem.priority || 'medium')}
                </span>
              </div>
            </div>
            <div class="detail-item">
              <div class="detail-label">Due Date</div>
              <div class="detail-value">${dueDateFormatted}</div>
            </div>
            <div class="detail-item">
              <div class="detail-label">Category</div>
              <div class="detail-value">${actionItem.category ? capitalizeFirstLetter(actionItem.category) : 'None'}</div>
            </div>
            <div class="detail-item">
              <div class="detail-label">Source</div>
              <div class="detail-value">${actionItem.source || 'Not specified'}</div>
            </div>
            <div class="detail-item">
                            <div class="detail-label">Created</div>
              <div class="detail-value">${createdDateFormatted}</div>
            </div>
          </div>
        </div>
        
        ${actionItem.description ? `
          <div class="modal-section">
            <div class="modal-section-title">
              <i class="fas fa-align-left"></i> Description
            </div>
            <div style="background-color: var(--bg-secondary); padding: 16px; border-radius: var(--radius-md);">
              ${actionItem.description}
            </div>
          </div>
        ` : ''}
        
        <div class="modal-section">
          <div class="modal-section-title">
            <i class="fas fa-user-check"></i> Assignees
          </div>
          ${assigneesHTML}
        </div>
        
        ${actionItem.tags && actionItem.tags.length > 0 ? `
          <div class="modal-section">
            <div class="modal-section-title">
              <i class="fas fa-tags"></i> Tags
            </div>
            ${tagsHTML}
          </div>
        ` : ''}
        
        ${reminderHTML}
        
        ${attachmentsHTML}
      `;
      
      // Store current action item ID for modal actions
      document.getElementById('editActionBtn').setAttribute('data-id', actionItem.id);
      document.getElementById('deleteActionBtn').setAttribute('data-id', actionItem.id);
      
      // Show modal
      document.getElementById('actionItemDetailModal').classList.add('visible');
    }
    
    // Close action item modal
    function closeActionItemModal() {
      document.getElementById('actionItemDetailModal').classList.remove('visible');
    }
    
    // Edit current action item (from modal)
    function editCurrentActionItem() {
      const actionItemId = document.getElementById('editActionBtn').getAttribute('data-id');
      editActionItem(actionItemId);
    }
    
    // Delete current action item (from modal)
    function deleteCurrentActionItem() {
      const actionItemId = document.getElementById('deleteActionBtn').getAttribute('data-id');
      
      if (confirm('Are you sure you want to delete this action item? This cannot be undone.')) {
        closeActionItemModal();
        deleteActionItem(actionItemId);
      }
    }
    
    // Edit action item
    function editActionItem(actionItemId) {
      closeActionItemModal();
      
      google.script.run.showActionItemsForm(actionItemId);
    }
    
    // Delete action item
    function deleteActionItem(actionItemId) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            // Remove action item from local array
            actionItems = actionItems.filter(item => item.id !== actionItemId);
            
            renderActionItems();
            showToast('Success', 'Action item deleted successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to delete action item', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error deleting action item:', error);
          showToast('Error', 'Failed to delete action item', 'error');
        })
        .deleteActionItem(actionItemId);
    }
    
    // Format date to readable string
    function formatDate(date) {
      if (!date) return '';
      
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return date.toLocaleDateString(undefined, options);
    }
    
    // Format date to YYYY-MM-DD string
    function formatDateString(date) {
      if (!date) return '';
      
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      
      return `${year}-${month}-${day}`;
    }
    
    // Check if date is today
    function isDateToday(date) {
      const today = new Date();
      return date.getDate() === today.getDate() && 
             date.getMonth() === today.getMonth() && 
             date.getFullYear() === today.getFullYear();
    }
    
    // Format status string for display
    function formatStatus(status) {
      switch (status) {
        case 'in-progress': return 'In Progress';
        default: return capitalizeFirstLetter(status);
      }
    }
    
    // Capitalize first letter of a string
    function capitalizeFirstLetter(string) {
      if (!string) return '';
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    // Get initials from name
    function getInitials(name) {
      if (!name) return '--';
      
      const parts = name.split(' ');
      if (parts.length >= 2) {
        return (parts[0][0] + parts[1][0]).toUpperCase();
      }
      
      return name.substring(0, 2).toUpperCase();
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      
      // Set icon and class based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        toastIcon.innerHTML = '<i class="fas fa-exclamation-circle"></i>';
      } else {
        toastIcon.className = 'toast-icon success';
        toastIcon.innerHTML = '<i class="fas fa-check-circle"></i>';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto hide after 5 seconds
      setTimeout(() => {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>




<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Action Item Reminders</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Action item priority colors */
      --priority-high: #ef4444;
      --priority-medium: #f59e0b;
      --priority-low: #10b981;
      
      /* Action item status colors */
      --status-pending: #3b82f6;
      --status-in-progress: #f59e0b;
      --status-completed: #10b981;
      --status-blocked: #ef4444;
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 800px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(239, 68, 68, 0.3);
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(239, 68, 68, 0.4);
    }
    
    .btn-sm {
      padding: 6px 12px;
      font-size: 13px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .form-hint {
      margin-top: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    /* Custom select styling */
    .custom-select {
      position: relative;
    }
    
    .custom-select select {
      appearance: none;
      -webkit-appearance: none;
      cursor: pointer;
    }
    
    .custom-select::after {
      content: '\f107';
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      pointer-events: none;
      color: var(--text-tertiary);
    }
    
    .custom-checkbox {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .custom-checkbox input[type="checkbox"] {
      width: 18px;
      height: 18px;
      border-radius: var(--radius-sm);
      border: 1px solid var(--border-medium);
      cursor: pointer;
      appearance: none;
      -webkit-appearance: none;
      display: grid;
      place-content: center;
    }
    
    .custom-checkbox input[type="checkbox"]::before {
      content: "";
      width: 10px;
      height: 10px;
      transform: scale(0);
      transition: transform var(--transition-fast);
      box-shadow: inset 1em 1em var(--primary-color);
      transform-origin: center;
      clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
    }
    
    .custom-checkbox input[type="checkbox"]:checked::before {
      transform: scale(1);
    }
    
    .reminder-list {
      list-style-type: none;
      margin: 0;
      padding: 0;
    }
    
    .reminder-item {
      padding: 16px;
      border: 1px solid var(--border-light);
      border-radius: var(--radius-md);
      margin-bottom: 16px;
      transition: all var(--transition-fast);
    }
    
    .reminder-item:hover {
      border-color: var(--border-medium);
      box-shadow: var(--shadow-sm);
    }
    
    .reminder-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 12px;
    }
    
    .reminder-title {
      font-weight: 600;
      font-size: 16px;
    }
    
    .reminder-due {
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    .reminder-due.soon {
      color: var(--warning-color);
    }
    
    .reminder-due.overdue {
      color: var(--danger-color);
    }
    
    .reminder-content {
      color: var(--text-secondary);
      margin-bottom: 12px;
    }
    
    .reminder-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 13px;
    }
    
    .reminder-tags {
      display: flex;
      gap: 8px;
    }
    
    .reminder-tag {
      padding: 4px 10px;
      border-radius: 12px;
      background-color: var(--bg-secondary);
      font-size: 12px;
    }
    
    .reminder-tag.priority-high {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--priority-high);
    }
    
    .reminder-tag.priority-medium {
      background-color: rgba(245, 158, 11, 0.1);
      color: var(--priority-medium);
    }
    
    .reminder-tag.priority-low {
      background-color: rgba(16, 185, 129, 0.1);
      color: var(--priority-low);
    }
    
    .reminder-actions {
      display: flex;
      gap: 8px;
    }
    
    .reminder-btn {
      padding: 4px 8px;
      border-radius: var(--radius-sm);
      font-size: 12px;
      cursor: pointer;
      border: 1px solid var(--border-medium);
      background-color: white;
      transition: all var(--transition-fast);
    }
    
    .reminder-btn:hover {
      background-color: var(--bg-secondary);
    }
    
    .reminder-settings {
      margin-bottom: 20px;
      padding: 16px;
      border-radius: var(--radius-md);
      background-color: var(--bg-secondary);
    }
    
    .settings-title {
      font-weight: 600;
      margin-bottom: 12px;
      font-size: 16px;
    }
    
    .settings-row {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      margin-bottom: 16px;
    }
    
    .settings-col {
      flex: 1;
      min-width: 200px;
    }
    
    .email-preferences {
      margin-top: 16px;
      padding-top: 16px;
      border-top: 1px solid var(--border-light);
    }
    
    .email-title {
      font-weight: 600;
      margin-bottom: 12px;
    }
    
    .email-options {
      display: flex;
      flex-direction: column;
      gap: 12px;
    }
    
    .email-option {
      display: flex;
      align-items: flex-start;
      gap: 8px;
    }
    
    .email-option-input {
      margin-top: 2px;
    }
    
    /* Notification box */
    .notification {
      padding: 16px;
      border-radius: var(--radius-md);
      margin-bottom: 20px;
      display: flex;
      align-items: flex-start;
      gap: 12px;
    }
    
    .notification.info {
      background-color: var(--info-light);
      border-left: 4px solid var(--info-color);
    }
    
    .notification-icon {
      color: var(--info-color);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .notification-message {
      color: var(--text-secondary);
      font-size: 13px;
    }
    
    /* Reminder types legend */
    .reminder-types {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      margin-bottom: 20px;
    }
    
    .reminder-type {
      display: flex;
      align-items: center;
      gap: 6px;
      padding: 8px 12px;
      border-radius: var(--radius-md);
      background-color: var(--bg-secondary);
      font-size: 13px;
    }
    
    .reminder-type-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
    }
    
    .reminder-type-dot.today {
      background-color: var(--danger-color);
    }
    
    .reminder-type-dot.tomorrow {
      background-color: var(--warning-color);
    }
    
    .reminder-type-dot.upcoming {
      background-color: var(--info-color);
    }
    
    /* Empty state */
    .empty-state {
      text-align: center;
      padding: 32px 16px;
      color: var(--text-tertiary);
    }
    
    .empty-state-icon {
      font-size: 48px;
      margin-bottom: 16px;
      opacity: 0.5;
    }
    
    .empty-state-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 8px;
    }
    
    .empty-state-subtitle {
      margin-bottom: 24px;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--transition-normal);
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(85, 64, 175, 0.2);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 999;
      transform: translateY(100%);
      transition: transform var(--transition-normal);
    }
    
    .toast.visible {
      transform: translateY(0);
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--bg-secondary);
      color: var(--text-tertiary);
      cursor: pointer;
      transition: all var(--transition-fast);
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      background-color: var(--bg-tertiary);
      color: var(--text-secondary);
    }
    
    @media (max-width: 768px) {
      .header {
        padding: 16px;
      }
      
      .content {
        padding: 16px;
      }
      
      .settings-row {
        flex-direction: column;
        gap: 12px;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-bell"></i> Action Item Reminders
          </h1>
          <div class="header-subtitle">
            Manage reminders for your team's action items
          </div>
        </div>
        
        <div class="header-actions">
          <button class="btn btn-primary" id="backToActionItemsBtn">
            <i class="fas fa-arrow-left"></i> Back to Action Items
          </button>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="notification info">
        <div class="notification-icon">
          <i class="fas fa-info-circle fa-lg"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">About Action Item Reminders</div>
          <div class="notification-message">
            Reminders help ensure your team completes their action items on time. Configure reminder settings below and manage upcoming reminders for action items that you've assigned or are responsible for.
          </div>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <div class="card-title">
            <i class="fas fa-cog"></i> Reminder Settings
          </div>
        </div>
        
        <div class="card-content">
          <div class="reminder-settings">
            <div class="settings-title">Notification Preferences</div>
            
            <div class="settings-row">
              <div class="settings-col">
                <div class="form-group">
                  <label class="form-label" for="defaultReminderType">Default Reminder Type</label>
                  <div class="custom-select">
                    <select class="form-control" id="defaultReminderType">
                      <option value="none">No Reminder</option>
                      <option value="same-day">Same Day</option>
                      <option value="1-day" selected>1 Day Before</option>
                      <option value="3-days">3 Days Before</option>
                      <option value="1-week">1 Week Before</option>
                    </select>
                  </div>
                  <div class="form-hint">This will be applied to new action items by default</div>
                </div>
              </div>
              
              <div class="settings-col">
                <div class="form-group">
                  <label class="form-label" for="defaultReminderMethod">Default Reminder Method</label>
                  <div class="custom-select">
                    <select class="form-control" id="defaultReminderMethod">
                      <option value="email">Email</option>
                      <option value="notification" selected>Notification</option>
                      <option value="both">Both Email & Notification</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="email-preferences">
              <div class="email-title">Email Notification Settings</div>
              <div class="email-options">
                <div class="email-option">
                  <input type="checkbox" id="emailDaily" class="email-option-input" checked>
                  <div>
                    <label for="emailDaily" style="font-weight: 500; display: block; margin-bottom: 4px;">Daily Summary</label>
                    <div style="font-size: 13px; color: var(--text-secondary);">Receive a daily email with all upcoming action items for the day</div>
                  </div>
                </div>
                
                <div class="email-option">
                  <input type="checkbox" id="emailWeekly" class="email-option-input" checked>
                  <div>
                    <label for="emailWeekly" style="font-weight: 500; display: block; margin-bottom: 4px;">Weekly Summary</label>
                    <div style="font-size: 13px; color: var(--text-secondary);">Receive a weekly email with all upcoming action items for the week</div>
                  </div>
                </div>
                
                <div class="email-option">
                  <input type="checkbox" id="emailOverdue" class="email-option-input" checked>
                  <div>
                    <label for="emailOverdue" style="font-weight: 500; display: block; margin-bottom: 4px;">Overdue Notifications</label>
                    <div style="font-size: 13px; color: var(--text-secondary);">Receive notifications for overdue action items</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div style="text-align: right;">
            <button class="btn btn-primary" id="saveSettingsBtn">
              <i class="fas fa-save"></i> Save Settings
            </button>
          </div>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <div class="card-title">
            <i class="fas fa-bell"></i> Upcoming Reminders
          </div>
          
          <div>
            <div class="custom-select">
              <select class="form-control" id="reminderFilter">
                <option value="all">All Reminders</option>
                <option value="mine">My Action Items</option>
                <option value="assigned">Assigned By Me</option>
              </select>
            </div>
          </div>
        </div>
        
        <div class="card-content">
          <div class="reminder-types">
            <div class="reminder-type">
              <span class="reminder-type-dot today"></span>
              <span>Today</span>
            </div>
            <div class="reminder-type">
              <span class="reminder-type-dot tomorrow"></span>
              <span>Tomorrow</span>
            </div>
            <div class="reminder-type">
              <span class="reminder-type-dot upcoming"></span>
              <span>Upcoming</span>
            </div>
          </div>
          
          <ul class="reminder-list" id="reminderList">
            <!-- Reminders will be populated here -->
          </ul>
          
          <div class="empty-state" id="emptyState" style="display: none;">
            <div class="empty-state-icon">
              <i class="fas fa-bell-slash"></i>
            </div>
            <h3 class="empty-state-title">No reminders found</h3>
            <p class="empty-state-subtitle">You don't have any upcoming reminders</p>
            <button class="btn btn-primary" id="createActionItemBtn">
              <i class="fas fa-plus"></i> Create Action Item
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Reminder settings saved successfully.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let reminderSettings = {};
    let reminders = [];
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', () => {
      // Setup event listeners
      setupEventListeners();
      
      // Load reminder settings
      loadReminderSettings();
      
      // Load reminders
      loadReminders();
    });
    
    // Set up event listeners
    function setupEventListeners() {
      // Back button
      document.getElementById('backToActionItemsBtn').addEventListener('click', () => {
        google.script.run.showActionItemsView();
      });
      
      // Create action item button
      document.getElementById('createActionItemBtn').addEventListener('click', () => {
        google.script.run.showActionItemsForm();
      });
      
      // Save settings button
      document.getElementById('saveSettingsBtn').addEventListener('click', saveReminderSettings);
      
      // Filter change
      document.getElementById('reminderFilter').addEventListener('change', () => {
        renderReminders();
      });
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', () => {
        document.getElementById('toast').classList.remove('visible');
      });
    }
    
    // Load reminder settings
    function loadReminderSettings() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            reminderSettings = result.settings;
            populateReminderSettings();
          } else {
            showToast('Error', result.message || 'Failed to load reminder settings', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading reminder settings:', error);
          showToast('Error', 'Failed to load reminder settings', 'error');
        })
        .getReminderSettings();
    }
    
    // Populate reminder settings form
    function populateReminderSettings() {
      if (!reminderSettings) return;
      
      // Set default reminder type
      const defaultReminderType = document.getElementById('defaultReminderType');
      if (reminderSettings.defaultType) {
        defaultReminderType.value = reminderSettings.defaultType;
      }
      
      // Set default reminder method
      const defaultReminderMethod = document.getElementById('defaultReminderMethod');
      if (reminderSettings.defaultMethod) {
        defaultReminderMethod.value = reminderSettings.defaultMethod;
      }
      
      // Set email preferences
      document.getElementById('emailDaily').checked = reminderSettings.emailDaily !== false;
      document.getElementById('emailWeekly').checked = reminderSettings.emailWeekly !== false;
      document.getElementById('emailOverdue').checked = reminderSettings.emailOverdue !== false;
    }
    
    // Save reminder settings
    function saveReminderSettings() {
      const settings = {
        defaultType: document.getElementById('defaultReminderType').value,
        defaultMethod: document.getElementById('defaultReminderMethod').value,
        emailDaily: document.getElementById('emailDaily').checked,
        emailWeekly: document.getElementById('emailWeekly').checked,
        emailOverdue: document.getElementById('emailOverdue').checked
      };
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            reminderSettings = result.settings;
            showToast('Success', 'Reminder settings saved successfully');
          } else {
            showToast('Error', result.message || 'Failed to save reminder settings', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error saving reminder settings:', error);
          showToast('Error', 'Failed to save reminder settings', 'error');
        })
        .saveReminderSettings(settings);
    }
    
    // Load reminders
    function loadReminders() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            reminders = result.reminders || [];
            renderReminders();
          } else {
            showToast('Error', result.message || 'Failed to load reminders', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading reminders:', error);
          showToast('Error', 'Failed to load reminders', 'error');
        })
        .getUpcomingReminders();
    }
    
    // Render reminders based on selected filter
    function renderReminders() {
      const reminderList = document.getElementById('reminderList');
      const emptyState = document.getElementById('emptyState');
      const filter = document.getElementById('reminderFilter').value;
      
      // Filter reminders
      let filteredReminders = [...reminders];
      
      if (filter === 'mine') {
        filteredReminders = filteredReminders.filter(reminder => 
          reminder.isAssignedToMe === true
        );
      } else if (filter === 'assigned') {
        filteredReminders = filteredReminders.filter(reminder => 
          reminder.isAssignedByMe === true
        );
      }
      
      // Sort reminders by date
      filteredReminders.sort((a, b) => {
        return new Date(a.reminderDate) - new Date(b.reminderDate);
      });
      
      // Clear existing reminders
      reminderList.innerHTML = '';
      
      // Show empty state if no reminders
      if (filteredReminders.length === 0) {
        reminderList.style.display = 'none';
        emptyState.style.display = 'block';
        return;
      }
      
      // Hide empty state and show reminders
      reminderList.style.display = 'block';
      emptyState.style.display = 'none';
      
      // Group reminders by date type (today, tomorrow, upcoming)
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      const reminderGroups = {
        today: [],
        tomorrow: [],
        upcoming: []
      };
      
      filteredReminders.forEach(reminder => {
        const reminderDate = new Date(reminder.reminderDate);
        reminderDate.setHours(0, 0, 0, 0);
        
        if (reminderDate.getTime() === today.getTime()) {
          reminderGroups.today.push(reminder);
        } else if (reminderDate.getTime() === tomorrow.getTime()) {
          reminderGroups.tomorrow.push(reminder);
        } else {
          reminderGroups.upcoming.push(reminder);
        }
      });
      
      // Create group headers and add reminders
      if (reminderGroups.today.length > 0) {
        addReminderGroup('Today', reminderGroups.today, 'today');
      }
      
      if (reminderGroups.tomorrow.length > 0) {
        addReminderGroup('Tomorrow', reminderGroups.tomorrow, 'tomorrow');
      }
      
      if (reminderGroups.upcoming.length > 0) {
        addReminderGroup('Upcoming', reminderGroups.upcoming, 'upcoming');
      }
    }
    
    // Add a reminder group with header
    function addReminderGroup(title, reminders, type) {
      const reminderList = document.getElementById('reminderList');
      
      // Create group header
      const groupHeader = document.createElement('li');
      groupHeader.style.marginBottom = '16px';
      groupHeader.innerHTML = `
        <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
          <span class="reminder-type-dot ${type}"></span>
          <h3 style="font-size: 16px; font-weight: 600;">${title}</h3>
        </div>
      `;
      reminderList.appendChild(groupHeader);
      
      // Add reminders
      reminders.forEach(reminder => {
        const reminderElement = createReminderElement(reminder, type);
        reminderList.appendChild(reminderElement);
      });
      
      // Add spacer
      const spacer = document.createElement('li');
      spacer.style.height = '16px';
      reminderList.appendChild(spacer);
    }
    
    // Create a reminder element
    function createReminderElement(reminder, type) {
      const li = document.createElement('li');
      li.className = 'reminder-item';
      li.setAttribute('data-id', reminder.id);
      
      // Format due date
      const dueDate = reminder.dueDate ? formatDate(new Date(reminder.dueDate)) : 'No due date';
      const reminderDate = formatDate(new Date(reminder.reminderDate));
      
      // Check if overdue
      const isOverdue = reminder.dueDate && new Date(reminder.dueDate) < new Date() && reminder.status !== 'completed';
      
      // Create HTML
      li.innerHTML = `
        <div class="reminder-header">
          <div class="reminder-title">${reminder.title}</div>
          <div class="reminder-due ${isOverdue ? 'overdue' : type === 'today' ? 'soon' : ''}">
            <i class="far fa-calendar-alt"></i>
            <span>Due: ${dueDate}${isOverdue ? ' (Overdue)' : ''}</span>
          </div>
        </div>
        
        <div class="reminder-content">
          Reminder set for: ${reminderDate}
          ${reminder.description ? `<div style="margin-top: 8px;">${reminder.description}</div>` : ''}
        </div>
        
        <div class="reminder-meta">
          <div class="reminder-tags">
            <div class="reminder-tag priority-${reminder.priority || 'medium'}">
              ${capitalizeFirstLetter(reminder.priority || 'medium')}
            </div>
            ${reminder.category ? `<div class="reminder-tag">${capitalizeFirstLetter(reminder.category)}</div>` : ''}
          </div>
          
          <div class="reminder-actions">
            <button class="reminder-btn view-btn" data-id="${reminder.actionItemId}">
              <i class="fas fa-eye"></i> View
            </button>
            <button class="reminder-btn snooze-btn" data-id="${reminder.id}">
              <i class="fas fa-clock"></i> Snooze
            </button>
            <button class="reminder-btn dismiss-btn" data-id="${reminder.id}">
              <i class="fas fa-check"></i> Dismiss
            </button>
          </div>
        </div>
      `;
      
      // Add event listeners
      li.querySelector('.view-btn').addEventListener('click', () => {
        viewActionItem(reminder.actionItemId);
      });
      
      li.querySelector('.snooze-btn').addEventListener('click', () => {
        snoozeReminder(reminder.id);
      });
      
      li.querySelector('.dismiss-btn').addEventListener('click', () => {
        dismissReminder(reminder.id);
      });
      
      return li;
    }
    
    // View action item details
    function viewActionItem(actionItemId) {
      google.script.run.showActionItemsView(actionItemId);
    }
    
    // Snooze reminder
    function snoozeReminder(reminderId) {
      // Show snooze options in a simple prompt
      const snoozeOptions = [
        'Later today (+3 hours)',
        'Tomorrow',
        'Next week'
      ];
      
      const snoozeChoice = prompt(
        'Snooze this reminder until:\n\n' +
        '1 - Later today (+3 hours)\n' +
        '2 - Tomorrow\n' +
        '3 - Next week\n\n' +
        'Enter option number:',
        '1'
      );
      
      if (!snoozeChoice) return;
      
      let snoozeType;
      switch (snoozeChoice) {
        case '1':
          snoozeType = 'later-today';
          break;
        case '2':
          snoozeType = 'tomorrow';
          break;
        case '3':
          snoozeType = 'next-week';
          break;
        default:
          alert('Invalid option. Please try again.');
          return;
      }
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            // Replace the snoozed reminder with the updated one
            const reminderIndex = reminders.findIndex(r => r.id === reminderId);
            if (reminderIndex !== -1) {
              reminders[reminderIndex] = result.reminder;
            }
            
            renderReminders();
            showToast('Success', 'Reminder snoozed successfully');
          } else {
            showToast('Error', result.message || 'Failed to snooze reminder', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error snoozing reminder:', error);
          showToast('Error', 'Failed to snooze reminder', 'error');
        })
        .snoozeReminder(reminderId, snoozeType);
    }
    
    // Dismiss reminder
    function dismissReminder(reminderId) {
      if (!confirm('Are you sure you want to dismiss this reminder? It will not appear again.')) {
        return;
      }
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            // Remove the dismissed reminder
            reminders = reminders.filter(r => r.id !== reminderId);
            
            renderReminders();
            showToast('Success', 'Reminder dismissed successfully');
          } else {
            showToast('Error', result.message || 'Failed to dismiss reminder', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error dismissing reminder:', error);
          showToast('Error', 'Failed to dismiss reminder', 'error');
        })
        .dismissReminder(reminderId);
    }
    
    // Format date to readable string
    function formatDate(date) {
      if (!date) return '';
      
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return date.toLocaleDateString(undefined, options);
    }
    
    // Capitalize first letter of a string
    function capitalizeFirstLetter(string) {
      if (!string) return '';
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      
      // Set icon and class based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        toastIcon.innerHTML = '<i class="fas fa-exclamation-circle"></i>';
      } else {
        toastIcon.className = 'toast-icon success';
        toastIcon.innerHTML = '<i class="fas fa-check-circle"></i>';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto hide after 5 seconds
      setTimeout(() => {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>




/**
 * 📋 Action Items Service - Team Action Item Management 📋
 * Handles action item creation, tracking, reminders, and analytics
 */

// Action Items Service Configuration
const ACTION_ITEMS_CONFIG = {
  SHEETS: {
    ACTION_ITEMS: 'Action Items',
    ACTION_ITEM_TAGS: 'Action Item Tags',
    ACTION_ITEM_ATTACHMENTS: 'Action Item Attachments',
    ACTION_ITEM_REMINDERS: 'Action Item Reminders',
    REMINDER_SETTINGS: 'Reminder Settings'
  },
  DEFAULT_PRIORITIES: ['high', 'medium', 'low'],
  DEFAULT_STATUSES: ['pending', 'in-progress', 'completed', 'blocked']
};

/**
 * 🏗️ Initialize action items sheets
 * @return {Boolean} Success status
 */
function initializeActionItemsSheets() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let created = false;
    
    // Create Action Items sheet if it doesn't exist
    if (!ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEMS)) {
      const actionItemsSheet = ss.insertSheet(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEMS);
      
      // Set up header row
      const headers = [
        'Action Item ID', 'Title', 'Description', 'Status', 'Priority', 
        'Due Date', 'Category', 'Source', 'Assignees', 
        'Created By', 'Created At', 'Modified At'
      ];
      actionItemsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      actionItemsSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      actionItemsSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Action Item Tags sheet if it doesn't exist
    if (!ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_TAGS)) {
      const tagsSheet = ss.insertSheet(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_TAGS);
      
      // Set up header row
      const headers = ['Action Item ID', 'Tag', 'Created At'];
      tagsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      tagsSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      tagsSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Action Item Attachments sheet if it doesn't exist
    if (!ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_ATTACHMENTS)) {
      const attachmentsSheet = ss.insertSheet(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_ATTACHMENTS);
      
      // Set up header row
      const headers = [
        'Attachment ID', 'Action Item ID', 'Name', 'Type', 
        'Size', 'File ID', 'Created At'
      ];
      attachmentsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      attachmentsSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      attachmentsSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Action Item Reminders sheet if it doesn't exist
    if (!ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_REMINDERS)) {
      const remindersSheet = ss.insertSheet(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
      
      // Set up header row
      const headers = [
        'Reminder ID', 'Action Item ID', 'Type', 'Date', 
        'Method', 'Status', 'Created At'
      ];
      remindersSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      remindersSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      remindersSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Reminder Settings sheet if it doesn't exist
    if (!ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.REMINDER_SETTINGS)) {
      const settingsSheet = ss.insertSheet(ACTION_ITEMS_CONFIG.SHEETS.REMINDER_SETTINGS);
      
      // Set up header row
      const headers = [
        'User Email', 'Default Type', 'Default Method', 
        'Email Daily', 'Email Weekly', 'Email Overdue', 
        'Modified At'
      ];
      settingsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      settingsSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      settingsSheet.setFrozenRows(1);
      created = true;
    }
    
    return created;
  } catch (error) {
    console.error('Error initializing action items sheets:', error);
    logError('initializeActionItemsSheets', error);
    return false;
  }
}

/**
 * 💾 Save action item
 * @param {Object} actionItemData - Action item data
 * @return {Object} Success status and action item ID
 */
function saveActionItem(actionItemData) {
  try {
    // Initialize sheets if needed
    initializeActionItemsSheets();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const actionItemsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEMS);
    
    if (!actionItemsSheet) {
      return {
        success: false,
        message: 'Action items sheet not found'
      };
    }
    
    // Get current user and time
    const userEmail = Session.getActiveUser().getEmail();
    const now = new Date();
    
    // Check if this is a new action item or update
    if (actionItemData.id) {
      // Update existing action item
      const actionItemsData = actionItemsSheet.getDataRange().getValues();
      const headers = actionItemsData[0];
      
      // Find column indices
      const idIndex = headers.indexOf('Action Item ID');
      const titleIndex = headers.indexOf('Title');
      const descIndex = headers.indexOf('Description');
      const statusIndex = headers.indexOf('Status');
      const priorityIndex = headers.indexOf('Priority');
      const dueDateIndex = headers.indexOf('Due Date');
      const categoryIndex = headers.indexOf('Category');
      const sourceIndex = headers.indexOf('Source');
      const assigneesIndex = headers.indexOf('Assignees');
      const modifiedAtIndex = headers.indexOf('Modified At');
      
      // Find the action item
      let actionItemRow = -1;
      for (let i = 1; i < actionItemsData.length; i++) {
        if (actionItemsData[i][idIndex] === actionItemData.id) {
          actionItemRow = i + 1; // +1 because rows are 1-based
          break;
        }
      }
      
      if (actionItemRow === -1) {
        return {
          success: false,
          message: 'Action item not found'
        };
      }
      
      // Prepare assignees as comma-separated string
      const assigneesStr = actionItemData.assignees ? actionItemData.assignees.join(',') : '';
      
      // Update action item
      actionItemsSheet.getRange(actionItemRow, titleIndex + 1).setValue(actionItemData.title);
      actionItemsSheet.getRange(actionItemRow, descIndex + 1).setValue(actionItemData.description || '');
      actionItemsSheet.getRange(actionItemRow, statusIndex + 1).setValue(actionItemData.status || 'pending');
      actionItemsSheet.getRange(actionItemRow, priorityIndex + 1).setValue(actionItemData.priority || 'medium');
      actionItemsSheet.getRange(actionItemRow, dueDateIndex + 1).setValue(actionItemData.dueDate ? new Date(actionItemData.dueDate) : '');
      actionItemsSheet.getRange(actionItemRow, categoryIndex + 1).setValue(actionItemData.category || '');
      actionItemsSheet.getRange(actionItemRow, sourceIndex + 1).setValue(actionItemData.source || '');
      actionItemsSheet.getRange(actionItemRow, assigneesIndex + 1).setValue(assigneesStr);
      actionItemsSheet.getRange(actionItemRow, modifiedAtIndex + 1).setValue(now);
      
      // Update tags
      updateActionItemTags(actionItemData.id, actionItemData.tags || []);
      
      // Update attachments
      updateActionItemAttachments(actionItemData.id, actionItemData.attachments || []);
      
      // Update or create reminder
      updateActionItemReminder(actionItemData.id, actionItemData.reminder);
      
      return {
        success: true,
        actionItemId: actionItemData.id
      };
      
    } else {
      // Create new action item
      const actionItemId = Utilities.getUuid();
      
      // Prepare assignees as comma-separated string
      const assigneesStr = actionItemData.assignees ? actionItemData.assignees.join(',') : '';
      
      // Add action item to sheet
      actionItemsSheet.appendRow([
        actionItemId,
        actionItemData.title,
        actionItemData.description || '',
        actionItemData.status || 'pending',
        actionItemData.priority || 'medium',
        actionItemData.dueDate ? new Date(actionItemData.dueDate) : '',
        actionItemData.category || '',
        actionItemData.source || '',
        assigneesStr,
        userEmail,
        now,
        now
      ]);
      
      // Save tags if any
      if (actionItemData.tags && actionItemData.tags.length > 0) {
        saveActionItemTags(actionItemId, actionItemData.tags);
      }
      
           // Save attachments if any
      if (actionItemData.attachments && actionItemData.attachments.length > 0) {
        saveActionItemAttachments(actionItemId, actionItemData.attachments);
      }
      
      // Create reminder if specified
      if (actionItemData.reminder) {
        createActionItemReminder(actionItemId, actionItemData.reminder);
      }
      
      return {
        success: true,
        actionItemId: actionItemId
      };
    }
  } catch (error) {
    console.error('Error saving action item:', error);
    logError('saveActionItem', error);
    return {
      success: false,
      message: 'Error saving action item: ' + error.toString()
    };
  }
}

/**
 * 🏷️ Save action item tags
 * @param {String} actionItemId - Action item ID
 * @param {Array} tags - Array of tags
 */
function saveActionItemTags(actionItemId, tags) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tagsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_TAGS);
    
    if (!tagsSheet) return;
    
    const now = new Date();
    
    // Process each tag
    tags.forEach(tag => {
      if (tag.trim()) {
        tagsSheet.appendRow([
          actionItemId,
          tag.trim(),
          now
        ]);
      }
    });
  } catch (error) {
    console.error('Error saving action item tags:', error);
    logError('saveActionItemTags', error);
  }
}

/**
 * 🏷️ Update action item tags
 * @param {String} actionItemId - Action item ID
 * @param {Array} tags - Array of tags
 */
function updateActionItemTags(actionItemId, tags) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tagsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_TAGS);
    
    if (!tagsSheet) return;
    
    // Get existing tags
    const tagsData = tagsSheet.getDataRange().getValues();
    const headers = tagsData[0];
    
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    
    // Find rows with this action item ID
    const existingRows = [];
    
    for (let i = 1; i < tagsData.length; i++) {
      if (tagsData[i][actionItemIdIndex] === actionItemId) {
        existingRows.push(i + 1); // +1 because rows are 1-based
      }
    }
    
    // Delete all existing tags
    if (existingRows.length > 0) {
      // Sort in descending order to avoid shifting issues when deleting
      existingRows.sort((a, b) => b - a);
      
      existingRows.forEach(row => {
        tagsSheet.deleteRow(row);
      });
    }
    
    // Add new tags
    saveActionItemTags(actionItemId, tags);
  } catch (error) {
    console.error('Error updating action item tags:', error);
    logError('updateActionItemTags', error);
  }
}

/**
 * 📎 Save action item attachments
 * @param {String} actionItemId - Action item ID
 * @param {Array} attachments - Array of attachment objects
 */
function saveActionItemAttachments(actionItemId, attachments) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const attachmentsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_ATTACHMENTS);
    
    if (!attachmentsSheet) return;
    
    const now = new Date();
    
    // Process each attachment
    attachments.forEach(attachment => {
      const attachmentId = Utilities.getUuid();
      
      attachmentsSheet.appendRow([
        attachmentId,
        actionItemId,
        attachment.name,
        attachment.type || '',
        attachment.size || 0,
        attachment.fileId || '',  // In a real app, this would be a Drive file ID
        now
      ]);
    });
  } catch (error) {
    console.error('Error saving action item attachments:', error);
    logError('saveActionItemAttachments', error);
  }
}

/**
 * 📎 Update action item attachments
 * @param {String} actionItemId - Action item ID
 * @param {Array} attachments - Array of attachment objects
 */
function updateActionItemAttachments(actionItemId, attachments) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const attachmentsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_ATTACHMENTS);
    
    if (!attachmentsSheet) return;
    
    // Get existing attachments
    const attachmentsData = attachmentsSheet.getDataRange().getValues();
    const headers = attachmentsData[0];
    
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    
    // Find rows with this action item ID
    const existingRows = [];
    
    for (let i = 1; i < attachmentsData.length; i++) {
      if (attachmentsData[i][actionItemIdIndex] === actionItemId) {
        existingRows.push(i + 1); // +1 because rows are 1-based
      }
    }
    
    // Delete all existing attachments
    if (existingRows.length > 0) {
      // Sort in descending order to avoid shifting issues when deleting
      existingRows.sort((a, b) => b - a);
      
      existingRows.forEach(row => {
        attachmentsSheet.deleteRow(row);
      });
    }
    
    // Add new attachments
    saveActionItemAttachments(actionItemId, attachments);
  } catch (error) {
    console.error('Error updating action item attachments:', error);
    logError('updateActionItemAttachments', error);
  }
}

/**
 * 🔔 Create action item reminder
 * @param {String} actionItemId - Action item ID
 * @param {Object} reminder - Reminder data
 */
function createActionItemReminder(actionItemId, reminder) {
  try {
    if (!reminder || reminder.type === 'none') return;
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const remindersSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
    
    if (!remindersSheet) return;
    
    const now = new Date();
    const reminderId = Utilities.getUuid();
    
    // Calculate reminder date based on type and due date
    let reminderDate = null;
    
    if (reminder.type === 'custom' && reminder.date) {
      reminderDate = new Date(reminder.date);
    } else {
      // Get action item due date
      const actionItem = getActionItem(actionItemId);
      if (actionItem.success && actionItem.actionItem && actionItem.actionItem.dueDate) {
        const dueDate = new Date(actionItem.actionItem.dueDate);
        
        switch (reminder.type) {
          case 'same-day':
            reminderDate = new Date(dueDate);
            break;
          case '1-day':
            reminderDate = new Date(dueDate);
            reminderDate.setDate(reminderDate.getDate() - 1);
            break;
          case '3-days':
            reminderDate = new Date(dueDate);
            reminderDate.setDate(reminderDate.getDate() - 3);
            break;
          case '1-week':
            reminderDate = new Date(dueDate);
            reminderDate.setDate(reminderDate.getDate() - 7);
            break;
        }
      }
    }
    
    if (reminderDate) {
      remindersSheet.appendRow([
        reminderId,
        actionItemId,
        reminder.type,
        reminderDate,
        reminder.method || 'notification',
        'pending',
        now
      ]);
    }
  } catch (error) {
    console.error('Error creating action item reminder:', error);
    logError('createActionItemReminder', error);
  }
}

/**
 * 🔔 Update action item reminder
 * @param {String} actionItemId - Action item ID
 * @param {Object} reminder - Reminder data
 */
function updateActionItemReminder(actionItemId, reminder) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const remindersSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
    
    if (!remindersSheet) return;
    
    // Get existing reminders
    const remindersData = remindersSheet.getDataRange().getValues();
    const headers = remindersData[0];
    
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    const statusIndex = headers.indexOf('Status');
    
    // Find rows with this action item ID
    const existingRows = [];
    
    for (let i = 1; i < remindersData.length; i++) {
      if (remindersData[i][actionItemIdIndex] === actionItemId && 
          remindersData[i][statusIndex] !== 'dismissed') {
        existingRows.push(i + 1); // +1 because rows are 1-based
      }
    }
    
    // Delete active reminders
    if (existingRows.length > 0) {
      // Sort in descending order to avoid shifting issues when deleting
      existingRows.sort((a, b) => b - a);
      
      existingRows.forEach(row => {
        remindersSheet.deleteRow(row);
      });
    }
    
    // Create new reminder if needed
    if (reminder && reminder.type !== 'none') {
      createActionItemReminder(actionItemId, reminder);
    }
  } catch (error) {
    console.error('Error updating action item reminder:', error);
    logError('updateActionItemReminder', error);
  }
}

/**
 * 🔄 Update action item status
 * @param {String} actionItemId - Action item ID
 * @param {String} status - New status
 * @return {Object} Success status
 */
function updateActionItemStatus(actionItemId, status) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const actionItemsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEMS);
    
    if (!actionItemsSheet) {
      return {
        success: false,
        message: 'Action items sheet not found'
      };
    }
    
    // Find the action item
    const actionItemsData = actionItemsSheet.getDataRange().getValues();
    const headers = actionItemsData[0];
    
    const idIndex = headers.indexOf('Action Item ID');
    const statusIndex = headers.indexOf('Status');
    const modifiedAtIndex = headers.indexOf('Modified At');
    
    // Find action item row
    let actionItemRow = -1;
    for (let i = 1; i < actionItemsData.length; i++) {
      if (actionItemsData[i][idIndex] === actionItemId) {
        actionItemRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    if (actionItemRow === -1) {
      return {
        success: false,
        message: 'Action item not found'
      };
    }
    
    // Update action item status
    actionItemsSheet.getRange(actionItemRow, statusIndex + 1).setValue(status);
    actionItemsSheet.getRange(actionItemRow, modifiedAtIndex + 1).setValue(new Date());
    
    // If status is completed, mark related reminders as completed
    if (status === 'completed') {
      markRemindersAsCompleted(actionItemId);
    }
    
    return {
      success: true
    };
  } catch (error) {
    console.error('Error updating action item status:', error);
    logError('updateActionItemStatus', error);
    return {
      success: false,
      message: 'Error updating action item status: ' + error.toString()
    };
  }
}

/**
 * 🔔 Mark reminders as completed
 * @param {String} actionItemId - Action item ID
 */
function markRemindersAsCompleted(actionItemId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const remindersSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
    
    if (!remindersSheet) return;
    
    // Get reminders
    const remindersData = remindersSheet.getDataRange().getValues();
    const headers = remindersData[0];
    
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    const statusIndex = headers.indexOf('Status');
    
    // Find and update pending reminders
    for (let i = 1; i < remindersData.length; i++) {
      if (remindersData[i][actionItemIdIndex] === actionItemId && 
          remindersData[i][statusIndex] === 'pending') {
        // Update to completed
        remindersSheet.getRange(i + 1, statusIndex + 1).setValue('completed');
      }
    }
  } catch (error) {
    console.error('Error marking reminders as completed:', error);
    logError('markRemindersAsCompleted', error);
  }
}

/**
 * 📋 Get action item details
 * @param {String} actionItemId - Action item ID
 * @return {Object} Action item data
 */
function getActionItem(actionItemId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const actionItemsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEMS);
    
    if (!actionItemsSheet) {
      return {
        success: false,
        message: 'Action items sheet not found'
      };
    }
    
    // Find the action item
    const actionItemsData = actionItemsSheet.getDataRange().getValues();
    const headers = actionItemsData[0];
    
    // Get column indices
    const idIndex = headers.indexOf('Action Item ID');
    const titleIndex = headers.indexOf('Title');
    const descIndex = headers.indexOf('Description');
    const statusIndex = headers.indexOf('Status');
    const priorityIndex = headers.indexOf('Priority');
    const dueDateIndex = headers.indexOf('Due Date');
    const categoryIndex = headers.indexOf('Category');
    const sourceIndex = headers.indexOf('Source');
    const assigneesIndex = headers.indexOf('Assignees');
    const createdByIndex = headers.indexOf('Created By');
    const createdAtIndex = headers.indexOf('Created At');
    const modifiedAtIndex = headers.indexOf('Modified At');
    
    // Find action item row
    let actionItemRow = -1;
    let actionItemData = null;
    
    for (let i = 1; i < actionItemsData.length; i++) {
      if (actionItemsData[i][idIndex] === actionItemId) {
        actionItemRow = i;
        actionItemData = actionItemsData[i];
        break;
      }
    }
    
    if (actionItemRow === -1 || !actionItemData) {
      return {
        success: false,
        message: 'Action item not found'
      };
    }
    
    // Get assignees as array
    let assignees = [];
    if (actionItemData[assigneesIndex]) {
      assignees = actionItemData[assigneesIndex].split(',');
    }
    
    // Build action item object
    const actionItem = {
      id: actionItemData[idIndex],
      title: actionItemData[titleIndex],
      description: actionItemData[descIndex],
      status: actionItemData[statusIndex],
      priority: actionItemData[priorityIndex],
      dueDate: actionItemData[dueDateIndex] ? actionItemData[dueDateIndex].toISOString().split('T')[0] : null,
      category: actionItemData[categoryIndex],
      source: actionItemData[sourceIndex],
      assignees: assignees,
      createdBy: actionItemData[createdByIndex],
      createdAt: actionItemData[createdAtIndex],
      modifiedAt: actionItemData[modifiedAtIndex]
    };
    
    // Get tags
    actionItem.tags = getActionItemTags(actionItemId);
    
    // Get attachments
    actionItem.attachments = getActionItemAttachments(actionItemId);
    
    // Get reminder
    actionItem.reminder = getActionItemReminder(actionItemId);
    
    return {
      success: true,
      actionItem: actionItem
    };
  } catch (error) {
    console.error('Error getting action item:', error);
    logError('getActionItem', error);
    return {
      success: false,
      message: 'Error retrieving action item: ' + error.toString()
    };
  }
}

/**
 * 🏷️ Get action item tags
 * @param {String} actionItemId - Action item ID
 * @return {Array} Tags array
 */
function getActionItemTags(actionItemId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tagsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_TAGS);
    
    if (!tagsSheet) {
      return [];
    }
    
    // Get all tags
    const tagsData = tagsSheet.getDataRange().getValues();
    const headers = tagsData[0];
    
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    const tagIndex = headers.indexOf('Tag');
    
    // Filter tags for this action item
    const tags = [];
    
    for (let i = 1; i < tagsData.length; i++) {
      if (tagsData[i][actionItemIdIndex] === actionItemId) {
        tags.push(tagsData[i][tagIndex]);
      }
    }
    
    return tags;
  } catch (error) {
    console.error('Error getting action item tags:', error);
    logError('getActionItemTags', error);
    return [];
  }
}

/**
 * 📎 Get action item attachments
 * @param {String} actionItemId - Action item ID
 * @return {Array} Attachments array
 */
function getActionItemAttachments(actionItemId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const attachmentsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_ATTACHMENTS);
    
    if (!attachmentsSheet) {
      return [];
    }
    
    // Get all attachments
    const attachmentsData = attachmentsSheet.getDataRange().getValues();
    const headers = attachmentsData[0];
    
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    const idIndex = headers.indexOf('Attachment ID');
    const nameIndex = headers.indexOf('Name');
    const typeIndex = headers.indexOf('Type');
    const sizeIndex = headers.indexOf('Size');
    const fileIdIndex = headers.indexOf('File ID');
    const createdAtIndex = headers.indexOf('Created At');
    
    // Filter attachments for this action item
    const attachments = [];
    
    for (let i = 1; i < attachmentsData.length; i++) {
      if (attachmentsData[i][actionItemIdIndex] === actionItemId) {
        attachments.push({
          id: attachmentsData[i][idIndex],
          name: attachmentsData[i][nameIndex],
          type: attachmentsData[i][typeIndex],
          size: attachmentsData[i][sizeIndex],
          fileId: attachmentsData[i][fileIdIndex],
          createdAt: attachmentsData[i][createdAtIndex]
        });
      }
    }
    
    return attachments;
  } catch (error) {
    console.error('Error getting action item attachments:', error);
    logError('getActionItemAttachments', error);
    return [];
  }
}

/**
 * 🔔 Get action item reminder
 * @param {String} actionItemId - Action item ID
 * @return {Object|null} Reminder data
 */
function getActionItemReminder(actionItemId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const remindersSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
    
    if (!remindersSheet) {
      return null;
    }
    
    // Get all reminders
    const remindersData = remindersSheet.getDataRange().getValues();
    const headers = remindersData[0];
    
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    const typeIndex = headers.indexOf('Type');
    const dateIndex = headers.indexOf('Date');
    const methodIndex = headers.indexOf('Method');
    const statusIndex = headers.indexOf('Status');
    
    // Find active reminder for this action item
    for (let i = 1; i < remindersData.length; i++) {
      if (remindersData[i][actionItemIdIndex] === actionItemId && 
          remindersData[i][statusIndex] === 'pending') {
        
        return {
          type: remindersData[i][typeIndex],
          date: remindersData[i][dateIndex] ? remindersData[i][dateIndex].toISOString().split('T')[0] : null,
          method: remindersData[i][methodIndex]
        };
      }
    }
    
    return null;
  } catch (error) {
    console.error('Error getting action item reminder:', error);
    logError('getActionItemReminder', error);
    return null;
  }
}

/**
 * 📋 Get all action items
 * @return {Object} Action items data
 */
function getActionItems() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const actionItemsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEMS);
    
    if (!actionItemsSheet) {
      return {
        success: false,
        message: 'Action items sheet not found'
      };
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all action items
    const actionItemsData = actionItemsSheet.getDataRange().getValues();
    const headers = actionItemsData[0];
    
    // Get column indices
    const idIndex = headers.indexOf('Action Item ID');
    const titleIndex = headers.indexOf('Title');
    const descIndex = headers.indexOf('Description');
    const statusIndex = headers.indexOf('Status');
    const priorityIndex = headers.indexOf('Priority');
    const dueDateIndex = headers.indexOf('Due Date');
    const categoryIndex = headers.indexOf('Category');
    const sourceIndex = headers.indexOf('Source');
    const assigneesIndex = headers.indexOf('Assignees');
    const createdByIndex = headers.indexOf('Created By');
    const createdAtIndex = headers.indexOf('Created At');
    const modifiedAtIndex = headers.indexOf('Modified At');
    
    // Build action items array
    const actionItems = [];
    
    // Skip header row
    for (let i = 1; i < actionItemsData.length; i++) {
      const actionItemId = actionItemsData[i][idIndex];
      
      // Get assignees as array
      let assignees = [];
      if (actionItemsData[i][assigneesIndex]) {
        assignees = actionItemsData[i][assigneesIndex].split(',');
      }
      
      // Check if current user is assigned or created this item
      const isAssignedToMe = assignees.includes('self') || assignees.some(a => a === userEmail);
      const isCreatedByMe = actionItemsData[i][createdByIndex] === userEmail;
      
      actionItems.push({
        id: actionItemId,
        title: actionItemsData[i][titleIndex],
        description: actionItemsData[i][descIndex],
        status: actionItemsData[i][statusIndex],
        priority: actionItemsData[i][priorityIndex],
        dueDate: actionItemsData[i][dueDateIndex] ? actionItemsData[i][dueDateIndex].toISOString().split('T')[0] : null,
        category: actionItemsData[i][categoryIndex],
        source: actionItemsData[i][sourceIndex],
        assignees: assignees,
        createdBy: actionItemsData[i][createdByIndex],
        createdAt: actionItemsData[i][createdAtIndex],
        modifiedAt: actionItemsData[i][modifiedAtIndex],
        isAssignedToMe: isAssignedToMe,
        isCreatedByMe: isCreatedByMe,
        tags: getActionItemTags(actionItemId)
      });
    }
    
    return {
      success: true,
      actionItems: actionItems
    };
  } catch (error) {
    console.error('Error getting action items:', error);
    logError('getActionItems', error);
    return {
      success: false,
      message: 'Error retrieving action items: ' + error.toString()
    };
  }
}

/**
 * 🗑️ Delete action item
 * @param {String} actionItemId - Action item ID
 * @return {Object} Success status
 */
function deleteActionItem(actionItemId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const actionItemsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEMS);
    const tagsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_TAGS);
    const attachmentsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_ATTACHMENTS);
    const remindersSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
    
    if (!actionItemsSheet) {
      return {
        success: false,
        message: 'Action items sheet not found'
      };
    }
    
    // Find the action item
    const actionItemsData = actionItemsSheet.getDataRange().getValues();
    const headers = actionItemsData[0];
    const idIndex = headers.indexOf('Action Item ID');
    
    // Find action item row
    let actionItemRow = -1;
    for (let i = 1; i < actionItemsData.length; i++) {
      if (actionItemsData[i][idIndex] === actionItemId) {
        actionItemRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    if (actionItemRow === -1) {
      return {
        success: false,
        message: 'Action item not found'
      };
    }
    
    // Delete related data
    deleteActionItemTags(actionItemId, tagsSheet);
    deleteActionItemAttachments(actionItemId, attachmentsSheet);
    deleteActionItemReminders(actionItemId, remindersSheet);
    
    // Delete action item
    actionItemsSheet.deleteRow(actionItemRow);
    
    return {
      success: true
    };
  } catch (error) {
    console.error('Error deleting action item:', error);
    logError('deleteActionItem', error);
    return {
      success: false,
      message: 'Error deleting action item: ' + error.toString()
    };
  }
}

/**
 * 🏷️ Delete action item tags
 * @param {String} actionItemId - Action item ID
 * @param {Object} tagsSheet - Tags sheet object
 */
function deleteActionItemTags(actionItemId, tagsSheet) {
  try {
    if (!tagsSheet) return;
    
    // Get all tags
    const tagsData = tagsSheet.getDataRange().getValues();
    const headers = tagsData[0];
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    
    // Find rows to delete (in reverse order to avoid shifting issues)
    const rowsToDelete = [];
    
    for (let i = 1; i < tagsData.length; i++) {
      if (tagsData[i][actionItemIdIndex] === actionItemId) {
        rowsToDelete.push(i + 1); // +1 because rows are 1-based
      }
    }
    
    // Delete rows in reverse order
    rowsToDelete.sort((a, b) => b - a).forEach(row => {
      tagsSheet.deleteRow(row);
    });
  } catch (error) {
    console.error('Error deleting action item tags:', error);
    logError('deleteActionItemTags', error);
  }
}

/**
 * 📎 Delete action item attachments
 * @param {String} actionItemId - Action item ID
 * @param {Object} attachmentsSheet - Attachments sheet object
 */
function deleteActionItemAttachments(actionItemId, attachmentsSheet) {
  try {
    if (!attachmentsSheet) return;
    
    // Get all attachments
    const attachmentsData = attachmentsSheet.getDataRange().getValues();
    const headers = attachmentsData[0];
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    
    // Find rows to delete (in reverse order to avoid shifting issues)
    const rowsToDelete = [];
    
    for (let i = 1; i < attachmentsData.length; i++) {
      if (attachmentsData[i][actionItemIdIndex] === actionItemId) {
        rowsToDelete.push(i + 1); // +1 because rows are 1-based
      }
    }
    
    // Delete rows in reverse order
    rowsToDelete.sort((a, b) => b - a).forEach(row => {
      attachmentsSheet.deleteRow(row);
    });
  } catch (error) {
    console.error('Error deleting action item attachments:', error);
    logError('deleteActionItemAttachments', error);
  }
}

/**
 * 🔔 Delete action item reminders
 * @param {String} actionItemId - Action item ID
 * @param {Object} remindersSheet - Reminders sheet object
 */
function deleteActionItemReminders(actionItemId, remindersSheet) {
  try {
    if (!remindersSheet) return;
    
    // Get all reminders
    const remindersData = remindersSheet.getDataRange().getValues();
    const headers = remindersData[0];
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    
    // Find rows to delete (in reverse order to avoid shifting issues)
    const rowsToDelete = [];
    
    for (let i = 1; i < remindersData.length; i++) {
      if (remindersData[i][actionItemIdIndex] === actionItemId) {
        rowsToDelete.push(i + 1); // +1 because rows are 1-based
      }
    }
    
    // Delete rows in reverse order
    rowsToDelete.sort((a, b) => b - a).forEach(row => {
      remindersSheet.deleteRow(row);
    });
  } catch (error) {
    console.error('Error deleting action item reminders:', error);
    logError('deleteActionItemReminders', error);
  }
}

/**
 * 🔔 Get upcoming reminders
 * @return {Object} Reminders data
 */
function getUpcomingReminders() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const remindersSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
    
    if (!remindersSheet) {
      return {
        success: false,
        message: 'Reminders sheet not found'
      };
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all action items with reminders
    const actionItems = getActionItems();
    if (!actionItems.success) {
      return {
        success: false,
        message: actionItems.message
      };
    }
    
    // Get all pending reminders
    const remindersData = remindersSheet.getDataRange().getValues();
    const headers = remindersData[0];
    
    const reminderIdIndex = headers.indexOf('Reminder ID');
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    const typeIndex = headers.indexOf('Type');
    const dateIndex = headers.indexOf('Date');
    const methodIndex = headers.indexOf('Method');
    const statusIndex = headers.indexOf('Status');
    
    // Get today's date
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // Date two weeks from now
    const twoWeeksLater = new Date(today);
    twoWeeksLater.setDate(twoWeeksLater.getDate() + 14);
    
    // Build reminders array
    const reminders = [];
    
    // Process all reminders
    for (let i = 1; i < remindersData.length; i++) {
      if (remindersData[i][statusIndex] === 'pending') {
        const reminderDate = remindersData[i][dateIndex];
        const actionItemId = remindersData[i][actionItemIdIndex];
        
        // Only include reminders that are within the next two weeks
        if (reminderDate && reminderDate >= today && reminderDate <= twoWeeksLater) {
          // Find corresponding action item
          const actionItem = actionItems.actionItems.find(item => item.id === actionItemId);
          
          if (actionItem) {
            // Skip completed items
            if (actionItem.status === 'completed') continue;
            
            reminders.push({
              id: remindersData[i][reminderIdIndex],
              actionItemId: actionItemId,
              title: actionItem.title,
              description: actionItem.description,
              dueDate: actionItem.dueDate,
              category: actionItem.category,
              priority: actionItem.priority,
              status: actionItem.status,
              reminderDate: remindersData[i][dateIndex].toISOString().split('T')[0],
              reminderType: remindersData[i][typeIndex],
              reminderMethod: remindersData[i][methodIndex],
              isAssignedToMe: actionItem.isAssignedToMe,
              isAssignedByMe: actionItem.isCreatedByMe && !actionItem.isAssignedToMe
            });
          }
        }
      }
    }
    
    return {
      success: true,
      reminders: reminders
    };
  } catch (error) {
    console.error('Error getting upcoming reminders:', error);
    logError('getUpcomingReminders', error);
    return {
      success: false,
      message: 'Error retrieving reminders: ' + error.toString()
    };
  }
}

/**
 * ⏰ Snooze reminder
 * @param {String} reminderId - Reminder ID
 * @param {String} snoozeType - Snooze type
 * @return {Object} Success status
 */
function snoozeReminder(reminderId, snoozeType) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const remindersSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
    
    if (!remindersSheet) {
      return {
        success: false,
        message: 'Reminders sheet not found'
      };
    }
    
    // Find the reminder
    const remindersData = remindersSheet.getDataRange().getValues();
    const headers = remindersData[0];
    
    const idIndex = headers.indexOf('Reminder ID');
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    const dateIndex = headers.indexOf('Date');
    const methodIndex = headers.indexOf('Method');
    
    // Find reminder row
    let reminderRow = -1;
    let actionItemId = null;
    let reminderMethod = null;
    
    for (let i = 1; i < remindersData.length; i++) {
      if (remindersData[i][idIndex] === reminderId) {
        reminderRow = i + 1; // +1 because rows are 1-based
        actionItemId = remindersData[i][actionItemIdIndex];
        reminderMethod = remindersData[i][methodIndex];
        break;
      }
    }
    
    if (reminderRow === -1 || !actionItemId) {
      return {
        success: false,
        message: 'Reminder not found'
      };
    }
    
    // Calculate new reminder date
    const now = new Date();
    let newDate = new Date(now);
    
    switch (snoozeType) {
      case 'later-today':
        newDate.setHours(now.getHours() + 3);
        break;
      case 'tomorrow':
        newDate.setDate(now.getDate() + 1);
        break;
      case 'next-week':
        newDate.setDate(now.getDate() + 7);
        break;
      default:
        return {
          success: false,
          message: 'Invalid snooze type'
        };
    }
    
    // Delete the old reminder
    remindersSheet.deleteRow(reminderRow);
    
    // Create a new reminder
    const newReminderId = Utilities.getUuid();
    
    remindersSheet.appendRow([
      newReminderId,
      actionItemId,
      'snoozed',
      newDate,
      reminderMethod,
      'pending',
      now
    ]);
    
    // Get updated reminder for return
    const updatedReminder = {
      id: newReminderId,
      actionItemId: actionItemId,
      reminderDate: newDate.toISOString().split('T')[0],
      reminderType: 'snoozed',
      reminderMethod: reminderMethod
    };
    
    // Get action item details to include in the response
    const actionItem = getActionItem(actionItemId);
    if (actionItem.success && actionItem.actionItem) {
      updatedReminder.title = actionItem.actionItem.title;
      updatedReminder.description = actionItem.actionItem.description;
      updatedReminder.dueDate = actionItem.actionItem.dueDate;
      updatedReminder.category = actionItem.actionItem.category;
      updatedReminder.priority = actionItem.actionItem.priority;
      updatedReminder.status = actionItem.actionItem.status;
    }
    
    return {
      success: true,
      reminder: updatedReminder
    };
  } catch (error) {
    console.error('Error snoozing reminder:', error);
    logError('snoozeReminder', error);
    return {
      success: false,
      message: 'Error snoozing reminder: ' + error.toString()
    };
  }
}

/**
 * 🔕 Dismiss reminder
 * @param {String} reminderId - Reminder ID
 * @return {Object} Success status
 */
function dismissReminder(reminderId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const remindersSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
    
    if (!remindersSheet) {
      return {
        success: false,
        message: 'Reminders sheet not found'
      };
    }
    
    // Find the reminder
    const remindersData = remindersSheet.getDataRange().getValues();
    const headers = remindersData[0];
    
    const idIndex = headers.indexOf('Reminder ID');
    const statusIndex = headers.indexOf('Status');
    
    // Find reminder row
    let reminderRow = -1;
    for (let i = 1; i < remindersData.length; i++) {
      if (remindersData[i][idIndex] === reminderId) {
        reminderRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    if (reminderRow === -1) {
      return {
        success: false,
        message: 'Reminder not found'
      };
    }
    
    // Update reminder status to dismissed
    remindersSheet.getRange(reminderRow, statusIndex + 1).setValue('dismissed');
    
    return {
      success: true
    };
  } catch (error) {
    console.error('Error dismissing reminder:', error);
    logError('dismissReminder', error);
    return {
      success: false,
      message: 'Error dismissing reminder: ' + error.toString()
    };
  }
}

/**
 * ⚙️ Get reminder settings for current user
 * @return {Object} Settings data
 */
function getReminderSettings() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const settingsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.REMINDER_SETTINGS);
    
    if (!settingsSheet) {
      return {
        success: false,
        message: 'Settings sheet not found'
      };
    }
    
    // Get user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all settings
    const settingsData = settingsSheet.getDataRange().getValues();
    const headers = settingsData[0];
    
    const emailIndex = headers.indexOf('User Email');
    const defaultTypeIndex = headers.indexOf('Default Type');
    const defaultMethodIndex = headers.indexOf('Default Method');
    const emailDailyIndex = headers.indexOf('Email Daily');
    const emailWeeklyIndex = headers.indexOf('Email Weekly');
    const emailOverdueIndex = headers.indexOf('Email Overdue');
    
    // Look for user's settings
    let settings = null;
    
    for (let i = 1; i < settingsData.length; i++) {
      if (settingsData[i][emailIndex] === userEmail) {
        settings = {
          defaultType: settingsData[i][defaultTypeIndex] || '1-day',
          defaultMethod: settingsData[i][defaultMethodIndex] || 'notification',
          emailDaily: settingsData[i][emailDailyIndex] !== false,
          emailWeekly: settingsData[i][emailWeeklyIndex] !== false,
          emailOverdue: settingsData[i][emailOverdueIndex] !== false
        };
        break;
      }
    }
    
    // If no settings found, create default settings
    if (!settings) {
      settings = {
        defaultType: '1-day',
        defaultMethod: 'notification',
        emailDaily: true,
        emailWeekly: true,
        emailOverdue: true
      };
      
      // Save default settings
      settingsSheet.appendRow([
        userEmail,
        settings.defaultType,
        settings.defaultMethod,
        settings.emailDaily,
        settings.emailWeekly,
        settings.emailOverdue,
        new Date()
      ]);
    }
    
    return {
      success: true,
      settings: settings
    };
  } catch (error) {
    console.error('Error getting reminder settings:', error);
    logError('getReminderSettings', error);
    return {
      success: false,
      message: 'Error retrieving reminder settings: ' + error.toString()
    };
  }
}

/**
 * ⚙️ Save reminder settings
 * @param {Object} settings - Settings data
 * @return {Object} Success status
 */
function saveReminderSettings(settings) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const settingsSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.REMINDER_SETTINGS);
    
    if (!settingsSheet) {
      return {
        success: false,
        message: 'Settings sheet not found'
      };
    }
    
    // Get user email
    const userEmail = Session.getActiveUser().getEmail();
    const now = new Date();
    
    // Get all settings
    const settingsData = settingsSheet.getDataRange().getValues();
    const headers = settingsData[0];
    
    const emailIndex = headers.indexOf('User Email');
    const defaultTypeIndex = headers.indexOf('Default Type');
    const defaultMethodIndex = headers.indexOf('Default Method');
    const emailDailyIndex = headers.indexOf('Email Daily');
    const emailWeeklyIndex = headers.indexOf('Email Weekly');
    const emailOverdueIndex = headers.indexOf('Email Overdue');
    const modifiedAtIndex = headers.indexOf('Modified At');
    
    // Look for user's settings
    let settingsRow = -1;
    
    for (let i = 1; i < settingsData.length; i++) {
      if (settingsData[i][emailIndex] === userEmail) {
        settingsRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    // Update or create settings
    if (settingsRow !== -1) {
      // Update existing settings
      settingsSheet.getRange(settingsRow, defaultTypeIndex + 1).setValue(settings.defaultType);
      settingsSheet.getRange(settingsRow, defaultMethodIndex + 1).setValue(settings.defaultMethod);
      settingsSheet.getRange(settingsRow, emailDailyIndex + 1).setValue(settings.emailDaily);
      settingsSheet.getRange(settingsRow, emailWeeklyIndex + 1).setValue(settings.emailWeekly);
      settingsSheet.getRange(settingsRow, emailOverdueIndex + 1).setValue(settings.emailOverdue);
      settingsSheet.getRange(settingsRow, modifiedAtIndex + 1).setValue(now);
    } else {
      // Create new settings
      settingsSheet.appendRow([
        userEmail,
        settings.defaultType,
        settings.defaultMethod,
        settings.emailDaily,
        settings.emailWeekly,
        settings.emailOverdue,
        now
      ]);
    }
    
    return {
      success: true,
      settings: settings
    };
  } catch (error) {
    console.error('Error saving reminder settings:', error);
    logError('saveReminderSettings', error);
    return {
      success: false,
      message: 'Error saving reminder settings: ' + error.toString()
    };
  }
}

/**
 * 📊 Process reminders
 * This function would typically be called by a time-based trigger
 * to send reminder notifications and emails
 * @return {Object} Processing results
 */
function processReminders() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const remindersSheet = ss.getSheetByName(ACTION_ITEMS_CONFIG.SHEETS.ACTION_ITEM_REMINDERS);
    
    if (!remindersSheet) {
      return {
        success: false,
        message: 'Reminders sheet not found'
      };
    }
    
    // Get all reminders
    const remindersData = remindersSheet.getDataRange().getValues();
    const headers = remindersData[0];
    
    const reminderIdIndex = headers.indexOf('Reminder ID');
    const actionItemIdIndex = headers.indexOf('Action Item ID');
    const dateIndex = headers.indexOf('Date');
    const methodIndex = headers.indexOf('Method');
    const statusIndex = headers.indexOf('Status');
    
    // Get current date
    const now = new Date();
    now.setHours(0, 0, 0, 0);
    
    const processedReminders = [];
    const reminderRows = [];
    
    // Find reminders to process
    for (let i = 1; i < remindersData.length; i++) {
      if (remindersData[i][statusIndex] === 'pending') {
        const reminderDate = remindersData[i][dateIndex];
        
        // Check if reminder is due today or past due
        if (reminderDate && reminderDate <= now) {
          processedReminders.push({
            id: remindersData[i][reminderIdIndex],
            actionItemId: remindersData[i][actionItemIdIndex],
            method: remindersData[i][methodIndex]
          });
          
          reminderRows.push(i + 1); // +1 because rows are 1-based
        }
      }
    }
    
    // Process each reminder
    processedReminders.forEach((reminder, index) => {
      // Get action item details
      const actionItem = getActionItem(reminder.actionItemId);
      
      // Skip processing if action item is not found or already completed
      if (!actionItem.success || !actionItem.actionItem || actionItem.actionItem.status === 'completed') {
        return;
      }
      
      // Send notifications or emails based on reminder method
      // In a real app, this would call a notification or email service
      
      // Mark reminder as processed
      remindersSheet.getRange(reminderRows[index], statusIndex + 1).setValue('processed');
    });
    
    return {
      success: true,
      processedCount: processedReminders.length
    };
  } catch (error) {
    console.error('Error processing reminders:', error);
    logError('processReminders', error);
    return {
      success: false,
      message: 'Error processing reminders: ' + error.toString()
    };
  }
}




<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Help & Documentation</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .header-actions {
      display: flex;
      gap: 12px;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1200px;
      margin: 0 auto;
      width: 100%;
      display: flex;
      gap: 32px;
    }
    
    .sidebar {
      width: 260px;
      flex-shrink: 0;
    }
    
    .main-content {
      flex: 1;
    }
    
    .sidebar-menu {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      overflow: hidden;
    }
    
    .sidebar-section {
      margin-bottom: 8px;
    }
    
    .sidebar-section-title {
      padding: 12px 16px;
      font-weight: 600;
      font-size: 14px;
      color: var(--text-secondary);
      background-color: var(--bg-secondary);
    }
    
    .sidebar-link {
      display: flex;
      align-items: center;
      padding: 10px 16px;
      gap: 8px;
      color: var(--text-primary);
      text-decoration: none;
      cursor: pointer;
      transition: background-color var(--transition-fast);
    }
    
    .sidebar-link:hover {
      background-color: var(--bg-secondary);
    }
    
    .sidebar-link.active {
      background-color: var(--primary-light);
      color: white;
    }
    
    .sidebar-link.active i {
      color: white;
    }
    
    .sidebar-link i {
      width: 20px;
      text-align: center;
      color: var(--text-tertiary);
    }
    
    .sidebar-divider {
      height: 1px;
      background-color: var(--border-light);
      margin: 8px 0;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
      text-decoration: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    /* Help content styles */
    .help-section {
      margin-bottom: 40px;
    }
    
    .help-section:last-child {
      margin-bottom: 0;
    }
    
    .help-title {
      font-family: 'Manrope', sans-serif;
      font-size: 20px;
      font-weight: 700;
      margin-bottom: 16px;
      color: var(--text-primary);
    }
    
    .help-subtitle {
      font-family: 'Manrope', sans-serif;
      font-size: 16px;
      font-weight: 600;
      margin: 24px 0 12px;
      color: var(--text-primary);
    }
    
    .help-text {
      color: var(--text-secondary);
      margin-bottom: 16px;
    }
    
    .help-text a {
      color: var(--primary-color);
      text-decoration: none;
      font-weight: 500;
    }
    
    .help-text a:hover {
      text-decoration: underline;
    }
    
    .help-list {
      margin: 16px 0;
      padding-left: 20px;
    }
    
    .help-list li {
      margin-bottom: 8px;
    }
    
    .help-list li:last-child {
      margin-bottom: 0;
    }
    
    .help-code {
      background-color: var(--bg-secondary);
      padding: 12px 16px;
      border-radius: var(--radius-md);
      font-family: monospace;
      overflow-x: auto;
      margin: 16px 0;
    }
    
    .help-note {
      background-color: var(--info-light);
      border-left: 4px solid var(--info-color);
      padding: 12px 16px;
      border-radius: var(--radius-md);
      margin: 16px 0;
    }
    
    .help-warning {
      background-color: var(--warning-light);
      border-left: 4px solid var(--warning-color);
      padding: 12px 16px;
      border-radius: var(--radius-md);
      margin: 16px 0;
    }
    
    .help-tip {
      background-color: var(--success-light);
      border-left: 4px solid var(--success-color);
      padding: 12px 16px;
      border-radius: var(--radius-md);
      margin: 16px 0;
    }
    
    .help-img {
      max-width: 100%;
      height: auto;
      border-radius: var(--radius-md);
      border: 1px solid var(--border-light);
      margin: 16px 0;
    }
    
    .help-steps {
      counter-reset: step;
      margin: 16px 0;
    }
    
    .help-step {
      position: relative;
      padding-left: 40px;
      margin-bottom: 16px;
    }
    
    .help-step::before {
      content: counter(step);
      counter-increment: step;
      position: absolute;
      left: 0;
      top: 0;
      width: 24px;
      height: 24px;
      background-color: var(--primary-light);
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      font-weight: 600;
    }
    
    .help-step-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    /* Accordion */
    .accordion {
      margin: 16px 0;
    }
    
    .accordion-item {
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      margin-bottom: 8px;
      overflow: hidden;
    }
    
    .accordion-header {
      padding: 16px;
      background-color: var(--bg-secondary);
      cursor: pointer;
      user-select: none;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .accordion-title {
      font-weight: 600;
    }
    
    .accordion-icon {
      transition: transform var(--transition-normal);
    }
    
    .accordion-content {
      padding: 0 16px;
      max-height: 0;
      overflow: hidden;
      transition: max-height var(--transition-normal), padding var(--transition-normal);
    }
    
    .accordion-item.open .accordion-content {
      max-height: 500px;
      padding: 16px;
    }
    
    .accordion-item.open .accordion-icon {
      transform: rotate(-180deg);
    }
    
    /* Search */
    .search-container {
      position: relative;
      margin-bottom: 20px;
    }
    
    .search-input {
      width: 100%;
      padding: 10px 12px 10px 36px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .search-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    .search-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-tertiary);
    }
    
    /* Card grid */
    .card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 20px;
      margin: 16px 0;
    }
    
    .feature-card {
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-sm);
      padding: 20px;
      transition: transform var(--transition-fast), box-shadow var(--transition-fast);
      height: 100%;
      display: flex;
      flex-direction: column;
    }
    
    .feature-card:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .feature-icon {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      background: var(--primary-gradient);
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 16px;
      color: white;
      font-size: 20px;
    }
    
    .feature-title {
      font-family: 'Manrope', sans-serif;
      font-size: 16px;
      font-weight: 600;
      margin-bottom: 8px;
    }
    
    .feature-description {
      color: var(--text-secondary);
      font-size: 14px;
      flex: 1;
    }
    
    .feature-link {
      margin-top: 12px;
      color: var(--primary-color);
      text-decoration: none;
      font-weight: 500;
      display: inline-flex;
      align-items: center;
      gap: 4px;
    }
    
    .feature-link:hover {
      text-decoration: underline;
    }
    
    /* Video tutorial */
    .tutorial-card {
      position: relative;
      margin: 20px 0;
      border-radius: var(--radius-md);
      overflow: hidden;
    }
    
    .tutorial-img {
      width: 100%;
      display: block;
      aspect-ratio: 16/9;
      object-fit: cover;
    }
    
    .tutorial-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(15, 23, 42, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .tutorial-play {
      width: 64px;
      height: 64px;
      background-color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: var(--shadow-lg);
      cursor: pointer;
      transition: transform var(--transition-normal);
    }
    
    .tutorial-play:hover {
      transform: scale(1.1);
    }
    
    .tutorial-play i {
      color: var(--primary-color);
      font-size: 24px;
      margin-left: 4px;
    }
    
    .tutorial-caption {
      background-color: var(--bg-secondary);
      padding: 12px 16px;
      font-weight: 500;
    }
    
    /* Documentation navigation */
    .doc-navigation {
      display: flex;
      justify-content: space-between;
      margin-top: 40px;
      border-top: 1px solid var(--border-light);
      padding-top: 20px;
    }
    
    .doc-nav-link {
      display: flex;
      align-items: center;
      text-decoration: none;
      color: var(--primary-color);
      gap: 8px;
      padding: 8px;
      border-radius: var(--radius-md);
      transition: background-color var(--transition-fast);
    }
    
    .doc-nav-link:hover {
      background-color: var(--bg-secondary);
    }
    
    .doc-nav-text {
      display: flex;
      flex-direction: column;
    }
    
    .doc-nav-direction {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .doc-nav-title {
      font-weight: 500;
    }
    
    /* Loading indicator */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      position: relative;
      animation: rotate 1s linear infinite;
    }
    
    .loading-spinner::before,
    .loading-spinner::after {
      content: "";
      position: absolute;
      border-radius: 50%;
    }
    
    .loading-spinner::before {
      width: 48px;
      height: 48px;
      border: 5px solid rgba(85, 64, 175, 0.2);
    }
    
    .loading-spinner::after {
      width: 48px;
      height: 48px;
      border: 5px solid transparent;
      border-top-color: var(--primary-color);
      animation: rotate 0.5s linear infinite;
    }
    
    @keyframes rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
      .content {
        flex-direction: column;
        padding: 16px;
      }
      
      .sidebar {
        width: 100%;
        margin-bottom: 24px;
      }
      
      .header {
        padding: 16px;
      }
      
      .header-title {
        font-size: 20px;
      }
      
      .card-grid {
        grid-template-columns: 1fr;
      }
      
      .help-title {
        font-size: 18px;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-question-circle"></i> Help & Documentation
          </h1>
          <div class="header-subtitle">
            Learn how to use the Team Metrics Dashboard effectively
          </div>
        </div>
        
        <div class="header-actions">
          <button class="btn btn-secondary" id="contactSupportBtn">
            <i class="fas fa-headset"></i> Contact Support
          </button>
        </div>
      </div>
    </header>
    
    <div class="content">
      <!-- Sidebar -->
      <aside class="sidebar">
        <div class="search-container">
          <i class="fas fa-search search-icon"></i>
          <input type="text" class="search-input" id="helpSearch" placeholder="Search help topics...">
        </div>
        
        <div class="sidebar-menu">
          <div class="sidebar-section">
            <div class="sidebar-section-title">Getting Started</div>
            <div class="sidebar-link active" data-section="overview">
              <i class="fas fa-home"></i>
              Overview
            </div>
            <div class="sidebar-link" data-section="quick-start">
              <i class="fas fa-rocket"></i>
              Quick Start Guide
            </div>
            <div class="sidebar-link" data-section="setup">
              <i class="fas fa-tools"></i>
              Setup & Configuration
            </div>
          </div>
          
          <div class="sidebar-divider"></div>
          
          <div class="sidebar-section">
            <div class="sidebar-section-title">Features</div>
            <div class="sidebar-link" data-section="team-metrics">
              <i class="fas fa-chart-line"></i>
              Team Metrics
            </div>
            <div class="sidebar-link" data-section="tasks">
              <i class="fas fa-tasks"></i>
              Task Management
            </div>
            <div class="sidebar-link" data-section="action-items">
              <i class="fas fa-clipboard-check"></i>
              Action Items
            </div>
            <div class="sidebar-link" data-section="quality-assurance">
              <i class="fas fa-shield-alt"></i>
              Quality Assurance
            </div>
            <div class="sidebar-link" data-section="time-management">
              <i class="fas fa-clock"></i>
              Time Management
            </div>
          </div>
          
          <div class="sidebar-divider"></div>
          
          <div class="sidebar-section">
            <div class="sidebar-section-title">Advanced Topics</div>
            <div class="sidebar-link" data-section="integrations">
              <i class="fas fa-plug"></i>
              Integrations
            </div>
            <div class="sidebar-link" data-section="customization">
              <i class="fas fa-paint-brush"></i>
              Customization
            </div>
            <div class="sidebar-link" data-section="troubleshooting">
              <i class="fas fa-wrench"></i>
              Troubleshooting
            </div>
          </div>
          
          <div class="sidebar-divider"></div>
          
          <div class="sidebar-section">
            <div class="sidebar-section-title">Resources</div>
            <div class="sidebar-link" data-section="faq">
              <i class="fas fa-question"></i>
              FAQ
            </div>
            <div class="sidebar-link" data-section="video-tutorials">
              <i class="fas fa-video"></i>
              Video Tutorials
            </div>
            <div class="sidebar-link" data-section="changelog">
              <i class="fas fa-history"></i>
              Changelog
            </div>
          </div>
        </div>
      </aside>
      
      <!-- Main Content -->
      <main class="main-content">
        <!-- Overview Section -->
        <section class="help-section" id="overview-section">
          <h2 class="help-title">Team Metrics Dashboard Overview</h2>
          
          <p class="help-text">
            The Team Metrics Dashboard is a comprehensive tool designed to help team leads track, 
            analyze, and optimize team performance. With an intuitive interface and powerful features,
            it provides actionable insights to improve productivity and quality.
          </p>
          
          <div class="card-grid">
            <div class="feature-card">
              <div class="feature-icon">
                <i class="fas fa-chart-line"></i>
              </div>
              <h3 class="feature-title">Performance Analytics</h3>
              <p class="feature-description">
                Track individual and team metrics with customizable dashboards and reports.
              </p>
              <a href="#" class="feature-link" data-section="team-metrics">
                Learn more <i class="fas fa-arrow-right"></i>
              </a>
            </div>
            
            <div class="feature-card">
              <div class="feature-icon">
                <i class="fas fa-tasks"></i>
              </div>
              <h3 class="feature-title">Task Management</h3>
              <p class="feature-description">
                Create, assign and track tasks with due dates, priorities, and statuses.
              </p>
              <a href="#" class="feature-link" data-section="tasks">
                Learn more <i class="fas fa-arrow-right"></i>
              </a>
            </div>
            
            <div class="feature-card">
              <div class="feature-icon">
                <i class="fas fa-clipboard-check"></i>
              </div>
              <h3 class="feature-title">Action Items</h3>
              <p class="feature-description">
                Track action items from meetings and ensure follow-through with automated reminders.
              </p>
              <a href="#" class="feature-link" data-section="action-items">
                Learn more <i class="fas fa-arrow-right"></i>
              </a>
            </div>
            
            <div class="feature-card">
              <div class="feature-icon">
                <i class="fas fa-shield-alt"></i>
              </div>
              <h3 class="feature-title">Quality Assurance</h3>
              <p class="feature-description">
                Conduct QA reviews and track quality metrics over time.
              </p>
              <a href="#" class="feature-link" data-section="quality-assurance">
                Learn more <i class="fas fa-arrow-right"></i>
              </a>
            </div>
          </div>
          
          <h3 class="help-subtitle">Key Benefits</h3>
          <ul class="help-list">
            <li>Centralized tracking of team performance and activities</li>
            <li>Data-driven insights to improve team productivity</li>
            <li>Streamlined workflow with integrated task management</li>
            <li>Better accountability with action items and reminders</li>
            <li>Quality improvement through QA tracking</li>
            <li>Effective time management with scheduling features</li>
          </ul>
          
          <div class="help-note">
            <strong>Note:</strong> This dashboard is designed to be customized for your team's specific needs.
            Check out the <a href="#" data-section="customization">Customization</a> section to learn how to tailor it to your requirements.
          </div>
          
          <div class="tutorial-card">
            <img src="https://via.placeholder.com/800x450" alt="Dashboard Overview" class="tutorial-img">
            <div class="tutorial-overlay">
              <div class="tutorial-play" id="overviewVideo">
                <i class="fas fa-play"></i>
              </div>
            </div>
            <div class="tutorial-caption">Watch the overview video to get started</div>
          </div>
          
          <div class="doc-navigation">
            <a href="#" class="doc-nav-link" style="visibility: hidden">
              <i class="fas fa-chevron-left"></i>
              <div class="doc-nav-text">
                <span class="doc-nav-direction">Previous</span>
                <span class="doc-nav-title">Previous Topic</span>
              </div>
            </a>
            
            <a href="#" class="doc-nav-link" data-section="quick-start">
              <div class="doc-nav-text">
                <span class="doc-nav-direction">Next</span>
                <span class="doc-nav-title">Quick Start Guide</span>
              </div>
              <i class="fas fa-chevron-right"></i>
            </a>
          </div>
        </section>
        
        <!-- Quick Start Guide Section -->
        <section class="help-section" id="quick-start-section" style="display: none;">
          <h2 class="help-title">Quick Start Guide</h2>
          
          <p class="help-text">
            Get up and running with the Team Metrics Dashboard in just a few minutes.
            This guide will walk you through the essential steps to start using the tool effectively.
          </p>
          
          <div class="help-steps">
            <div class="help-step">
              <div class="help-step-title">Setup your Team</div>
              <p>
                Start by adding your team members to the dashboard. Click on the "Team Management" 
                option in the menu and use the "Add Team Member" button to enter their details.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Configure Metrics</div>
              <p>
                Define the key metrics you want to track for your team. Navigate to 
                "Metrics Configuration" and select the metrics relevant to your team's work.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Create Your First Task</div>
              <p>
                Add a task by clicking on "Task Management" in the menu, then "Create Task". 
                Fill in the task details and assign it to a team member.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Schedule a QA Review</div>
              <p>
                Set up a quality assurance review by going to "Quality Assurance" and 
                clicking "Create QA Review". Select a team member and work item to review.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">View Your Dashboard</div>
              <p>
                Return to the main dashboard to see an overview of your team's performance. 
                You can customize the widgets displayed to focus on your priority metrics.
              </p>
            </div>
          </div>
          
          <div class="help-tip">
            <strong>Pro Tip:</strong> Use keyboard shortcuts to navigate quickly. Press '?' at any time to see available shortcuts.
          </div>
          
          <h3 class="help-subtitle">Essential Features to Explore</h3>
          
          <div class="accordion">
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">Team Metrics Dashboard</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                The dashboard provides a visual overview of your team's performance metrics.
                You can customize which widgets appear and how they're arranged. Access it from
                the main menu by clicking "View Dashboard".
              </div>
            </div>
            
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">Task Management System</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                Create and assign tasks to team members, set due dates, and track progress.
                You can view tasks in list or kanban board format. The system integrates with
                Asana for extended functionality.
              </div>
            </div>
            
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">Action Items Tracking</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                Capture and track action items from meetings and discussions. Set reminders
                to ensure nothing falls through the cracks. You can view upcoming reminders
                and track completion status.
              </div>
            </div>
          </div>
          
          <div class="help-warning">
            <strong>Important:</strong> Make sure to regularly back up your data. Use the backup feature in Settings to create snapshots of your data.
          </div>
          
          <div class="doc-navigation">
            <a href="#" class="doc-nav-link" data-section="overview">
              <i class="fas fa-chevron-left"></i>
              <div class="doc-nav-text">
                <span class="doc-nav-direction">Previous</span>
                <span class="doc-nav-title">Overview</span>
              </div>
            </a>
            
            <a href="#" class="doc-nav-link" data-section="setup">
              <div class="doc-nav-text">
                <span class="doc-nav-direction">Next</span>
                <span class="doc-nav-title">Setup & Configuration</span>
              </div>
              <i class="fas fa-chevron-right"></i>
            </a>
          </div>
        </section>
        
        <!-- Setup Section -->
        <section class="help-section" id="setup-section" style="display: none;">
          <h2 class="help-title">Setup & Configuration</h2>
          
          <p class="help-text">
            Getting your Team Metrics Dashboard properly configured is essential for optimal use.
            This guide will walk you through the initial setup process and important configuration options.
          </p>
          
          <h3 class="help-subtitle">Initial Setup</h3>
          
          <p class="help-text">
            When you first install the Dashboard, you'll be guided through a setup wizard that helps
            you configure the essential components of the system. If you need to run this wizard again,
            you can access it through Settings > System > Reset Setup Wizard.
          </p>
          
          <div class="help-steps">
            <div class="help-step">
              <div class="help-step-title">System Requirements</div>
              <p>
                Before starting, ensure you have:
              </p>
              <ul class="help-list">
                <li>Google Sheets access with edit permissions</li>
                <li>Admin privileges if you're setting up for an organization</li>
                <li>Team member information ready (names, emails, roles)</li>
              </ul>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Account Information</div>
              <p>
                Enter your name, email address, and organization details. This information is 
                used to personalize your dashboard and for notification purposes.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Team Structure</div>
              <p>
                Define your team structure including departments, roles, and reporting hierarchy.
                This helps organize team members and set up appropriate access permissions.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Performance Metrics</div>
              <p>
                Select which key performance indicators (KPIs) you want to track. Choose from
                predefined metrics or create custom ones specific to your team's needs.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Notification Preferences</div>
              <p>
                Configure how and when you receive notifications about important events,
                such as upcoming reviews, overdue tasks, or significant metric changes.
              </p>
            </div>
          </div>
          
          <div class="help-note">
            <strong>Note:</strong> You can always modify these settings later through the Settings menu.
          </div>
          
          <h3 class="help-subtitle">Advanced Configuration</h3>
          
          <div class="accordion">
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">Data Storage & Backup</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                <p>Configure how your data is stored and backed up:</p>
                <ul>
                  <li>Set automatic backup frequency (daily, weekly, monthly)</li>
                  <li>Choose backup retention period (1 month to 1 year)</li>
                  <li>Configure cloud storage options for backups</li>
                </ul>
                <p>We recommend setting up automatic weekly backups with at least 3 months retention.</p>
              </div>
            </div>
            
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">User Permissions</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                <p>Configure who can access what in your dashboard:</p>
                <ul>
                  <li>Admin: Full access to all features and settings</li>
                  <li>Manager: Access to team data and limited settings</li>
                  <li>Team Member: Access to personal metrics and assigned tasks</li>
                  <li>Viewer: Read-only access to dashboards</li>
                </ul>
                <p>Adjust these permissions in Settings > User Management.</p>
              </div>
            </div>
            
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">System Validation</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                <p>Ensure your system is properly configured:</p>
                <ul>
                  <li>Run sheet validation to check all required sheets are present</li>
                  <li>Verify all required data fields are correctly configured</li>
                  <li>Test notification delivery to ensure emails are working</li>
                  <li>Check integrations with other systems</li>
                </ul>
                <p>Access validation tools in Settings > System > Validation.</p>
              </div>
            </div>
          </div>
          
          <h3 class="help-subtitle">Recommended Settings</h3>
          
          <div class="help-text">
            For most team leads managing teams of 5-15 members, we recommend these settings:
          </div>
          
          <ul class="help-list">
            <li><strong>Auto-refresh:</strong> Every 30 minutes</li>
            <li><strong>Email notifications:</strong> Daily digest + important alerts</li>
            <li><strong>Data retention:</strong> 12 months rolling</li>
            <li><strong>Backup frequency:</strong> Weekly</li>
            <li><strong>Default date range for reports:</strong> Last 4 weeks</li>
          </ul>
          
          <div class="help-warning">
            <strong>Important:</strong> If you change critical system settings, always create a backup first to ensure you can restore your data if needed.
          </div>
          
          <div class="tutorial-card">
            <img src="https://via.placeholder.com/800x450" alt="Setup Configuration" class="tutorial-img">
            <div class="tutorial-overlay">
              <div class="tutorial-play" id="setupVideo">
                <i class="fas fa-play"></i>
              </div>
            </div>
            <div class="tutorial-caption">Watch the configuration video tutorial</div>
          </div>
          
          <div class="doc-navigation">
            <a href="#" class="doc-nav-link" data-section="quick-start">
              <i class="fas fa-chevron-left"></i>
              <div class="doc-nav-text">
                <span class="doc-nav-direction">Previous</span>
                <span class="doc-nav-title">Quick Start Guide</span>
              </div>
            </a>
            
            <a href="#" class="doc-nav-link" data-section="team-metrics">
              <div class="doc-nav-text">
                <span class="doc-nav-direction">Next</span>
                <span class="doc-nav-title">Team Metrics</span>
              </div>
              <i class="fas fa-chevron-right"></i>
            </a>
          </div>
        </section>
        
        <!-- Team Metrics Section -->
        <section class="help-section" id="team-metrics-section" style="display: none;">
          <h2 class="help-title">Team Metrics</h2>
          
          <p class="help-text">
            The Team Metrics module allows you to track, analyze, and visualize key performance indicators 
            for your team. Understanding these metrics helps you identify trends, recognize achievements, 
            and address areas that need improvement.
          </p>
          
          <h3 class="help-subtitle">Available Metrics</h3>
          
          <div class="accordion">
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">Call/Response Metrics</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                <ul>
                  <li><strong>Calls Offered:</strong> Total number of calls directed to the agent</li>
                  <li><strong>Calls Accepted:</strong> Number of calls answered by the agent</li>
                  <li><strong>Answer Rate:</strong> Percentage of offered calls that were answered (Target: 95%)</li>
                  <li><strong>Average Talk Time:</strong> Average duration of calls (Target: 15-20 minutes)</li>
                  <li><strong>After Call Work (ACW) Time:</strong> Time spent on administrative tasks after calls (Target: 5 minutes)</li>
                </ul>
              </div>
            </div>
            
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">Time Utilization Metrics</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                <ul>
                  <li><strong>On Queue Time:</strong> Percentage of shift spent available to take calls (Target: 65%+)</li>
                  <li><strong>Off Queue Time:</strong> Time spent unavailable (breaks, meetings, training)</li>
                  <li><strong>Interacting Time:</strong> Percentage of shift spent actively assisting clients (Target: 50%+)</li>
                  <li><strong>Adherence to Schedule:</strong> How closely actual work time matches scheduled time</li>
                </ul>
              </div>
            </div>
            
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">Quality Metrics</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                <ul>
                  <li><strong>Overall QA Score:</strong> Average score from quality reviews (1-5 scale)</li>
                  <li><strong>Risk Assessment Score:</strong> Rating of risk identification and management</li>
                  <li><strong>Communication Score:</strong> Rating of communication effectiveness</li>
                  <li><strong>Support Provided Score:</strong> Rating of assistance effectiveness</li>
                  <li><strong>Client Satisfaction:</strong> Feedback ratings from clients (if available)</li>
                </ul>
              </div>
            </div>
          </div>
          
          <h3 class="help-subtitle">Adding Daily Metrics</h3>
          
          <div class="help-steps">
            <div class="help-step">
              <div class="help-step-title">Access the Metrics Form</div>
              <p>
                Click on "Daily Metrics" in the Metrics submenu to open the input form.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Select Team Member and Date</div>
              <p>
                Choose the team member from the dropdown and select the date for which
                you're entering metrics.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Enter Metrics Data</div>
              <p>
                Input all relevant metrics for the selected day. Required fields are marked with an asterisk (*).
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Add Notes (Optional)</div>
              <p>
                Include any relevant notes about unusual patterns or circumstances that might
                have affected the metrics for that day.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Save the Data</div>
              <p>
                Click "Save Metrics" to store the information. The dashboard will automatically
                update to reflect the new data.
              </p>
            </div>
          </div>
          
          <div class="help-tip">
            <strong>Pro Tip:</strong> You can import metrics data from CSV files by clicking "Import Metrics" on the Metrics Reports page. This is useful for bulk uploads from other systems.
          </div>
          
          <h3 class="help-subtitle">Viewing Metrics Reports</h3>
          
          <p class="help-text">
            The Metrics Reports section provides various views of your team's performance data:
          </p>
          
          <ul class="help-list">
            <li><strong>Individual Reports:</strong> Detailed metrics for a single team member over time</li>
            <li><strong>Team Summary:</strong> Aggregated metrics across the entire team</li>
            <li><strong>Comparison View:</strong> Side-by-side comparison of team members</li>
            <li><strong>Trend Analysis:</strong> Charts showing metric changes over time</li>
            <li><strong>Target Achievement:</strong> Progress toward established performance goals</li>
          </ul>
          
          <p class="help-text">
            You can filter these reports by date range, team member, metric type, and more. Reports
            can also be exported to PDF or spreadsheet formats for sharing or offline analysis.
          </p>
          
          <h3 class="help-subtitle">Setting Metric Targets</h3>
          
          <p class="help-text">
            Define performance targets to give context to your metrics:
          </p>
          
          <ol class="help-list">
            <li>Go to Settings > Metrics Configuration</li>
            <li>Select the metric you want to set a target for</li>
            <li>Enter the target value or range</li>
            <li>Choose whether to apply the target to all team members or customize per individual</li>
            <li>Save your changes</li>
          </ol>
          
          <p class="help-text">
            Once targets are set, reports will show color-coded indicators for metrics that are above
            target (green), near target (yellow), or below target (red).
          </p>
          
          <div class="help-warning">
            <strong>Important:</strong> While metrics are valuable tools, they should be used as part of a holistic performance management approach. Always consider the context and qualitative factors alongside numerical data.
          </div>
          
          <div class="doc-navigation">
            <a href="#" class="doc-nav-link" data-section="setup">
              <i class="fas fa-chevron-left"></i>
              <div class="doc-nav-text">
                <span class="doc-nav-direction">Previous</span>
                <span class="doc-nav-title">Setup & Configuration</span>
              </div>
            </a>
            
            <a href="#" class="doc-nav-link" data-section="tasks">
              <div class="doc-nav-text">
                <span class="doc-nav-direction">Next</span>
                <span class="doc-nav-title">Task Management</span>
              </div>
              <i class="fas fa-chevron-right"></i>
            </a>
          </div>
        </section>
        
        <!-- Tasks Section -->
        <section class="help-section" id="tasks-section" style="display: none;">
          <h2 class="help-title">Task Management</h2>
          
          <p class="help-text">
            The Task Management module helps you create, assign, and track tasks for your team. 
            It ensures that everyone knows what they're responsible for and deadlines are met.
          </p>
          
          <h3 class="help-subtitle">Creating Tasks</h3>
          
          <div class="help-steps">
            <div class="help-step">
              <div class="help-step-title">Access Task Creation</div>
              <p>
                Click on "Add Task" in the Tasks submenu to open the task creation form.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Enter Task Details</div>
              <p>
                Fill in the basic task information:
              </p>
              <ul>
                <li><strong>Title:</strong> A clear, concise name for the task</li>
                <li><strong>Description:</strong> Detailed explanation of what needs to be done</li>
                <li><strong>Due Date:</strong> When the task should be completed</li>
              </ul>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Set Priority and Category</div>
              <p>
                Assign a priority level (Low, Medium, High, Urgent) and select a category 
                that best describes the task type (Administrative, Client-related, Development, etc.).
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Assign the Task</div>
              <p>
                Select one or more team members to be responsible for completing the task.
                You can also leave it unassigned if you'll determine the assignee later.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Add Additional Details</div>
              <p>
                Optionally, you can:
              </p>
              <ul>
                <li>Set reminders for the task</li>
                <li>Add links to relevant resources</li>
                <li>Connect the task to other system items like action items or QA reviews</li>
                <li>Configure recurring task settings if applicable</li>
              </ul>
            </div>
          </div>
          
          <div class="help-note">
            <strong>Note:</strong> Tasks can also be created from other parts of the system. For example, you can convert action items from one-on-one meetings into tasks, or create tasks directly from QA reviews.
          </div>
          
          <h3 class="help-subtitle">Managing Tasks</h3>
          
          <p class="help-text">
            Access the Tasks List view to manage existing tasks:
          </p>
          
          <ul class="help-list">
            <li><strong>Filter Tasks:</strong> By assignee, status, priority, or due date</li>
            <li><strong>Sort Tasks:</strong> By any column to organize your view</li>
            <li><strong>Edit Tasks:</strong> Click on any task to view or modify its details</li>
            <li><strong>Change Status:</strong> Update task progress (Not Started, In Progress, Completed, etc.)</li>
            <li><strong>Reassign Tasks:</strong> Transfer responsibility to different team members</li>
            <li><strong>Add Comments:</strong> Provide updates or ask questions about specific tasks</li>
          </ul>
          
          <div class="help-tip">
            <strong>Pro Tip:</strong> Use the "Bulk Actions" option to update multiple tasks at once. This is especially useful for reassigning tasks when team members are absent or changing priorities across a project.
          </div>
          
          <h3 class="help-subtitle">Task Views</h3>
          
          <p class="help-text">
            The Task Management module offers several views to help you visualize and manage tasks effectively:
          </p>
          
          <div class="accordion">
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">List View</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                <p>The default view showing tasks in a sortable, filterable table format. Ideal for getting a comprehensive overview of all tasks and performing bulk actions.</p>
              </div>
            </div>
            
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">Kanban Board</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                <p>A visual board with columns representing task statuses (e.g., To Do, In Progress, Done). Tasks appear as cards that can be dragged between columns, making it easy to update status and see workflow at a glance.</p>
              </div>
            </div>
            
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">Calendar View</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                <p>Shows tasks plotted on a calendar based on due dates, helping visualize deadlines and workload distribution over time.</p>
              </div>
            </div>
            
            <div class="accordion-item">
              <div class="accordion-header">
                <span class="accordion-title">Team Member View</span>
                <i class="fas fa-chevron-down accordion-icon"></i>
              </div>
              <div class="accordion-content">
                <p>Groups tasks by assignee, showing what each team member is responsible for. Useful for workload balancing and individual check-ins.</p>
              </div>
            </div>
          </div>
          
          <h3 class="help-subtitle">Asana Integration</h3>
          
          <p class="help-text">
            If your team uses Asana, you can integrate it with the Task Management module:
          </p>
          
          <ol class="help-list">
            <li>Go to User Preferences > Integrations</li>
            <li>Configure your Asana API connection</li>
            <li>Select which projects to sync</li>
            <li>Choose sync options (two-way or one-way)</li>
          </ol>
          
          <p class="help-text">
            Once configured, you can:
          </p>
          
          <ul class="help-list">
            <li>Create Asana tasks directly from the dashboard</li>
            <li>See Asana tasks within your task list</li>
            <li>Update task status in either system</li>
            <li>Link dashboard items (like metrics or QA reviews) to Asana tasks</li>
          </ul>
          
          <div class="help-warning">
            <strong>Important:</strong> Task management is most effective when everyone adopts it consistently. Encourage all team members to update their task statuses regularly and check for new assignments daily.
          </div>
          
          <div class="doc-navigation">
            <a href="#" class="doc-nav-link" data-section="team-metrics">
              <i class="fas fa-chevron-left"></i>
              <div class="doc-nav-text">
                <span class="doc-nav-direction">Previous</span>
                <span class="doc-nav-title">Team Metrics</span>
              </div>
            </a>
            
            <a href="#" class="doc-nav-link" data-section="action-items">
              <div class="doc-nav-text">
                <span class="doc-nav-direction">Next</span>
                <span class="doc-nav-title">Action Items</span>
              </div>
              <i class="fas fa-chevron-right"></i>
            </a>
          </div>
        </section>
        
        <!-- Action Items Section -->
        <section class="help-section" id="action-items-section" style="display: none;">
          <h2 class="help-title">Action Items</h2>
          
          <p class="help-text">
            Action Items are specific, trackable commitments that emerge from meetings, one-on-ones, 
            or other discussions. Unlike general tasks, action items are typically tied to a specific 
            source (like a meeting) and have clear ownership and follow-up mechanisms.
          </p>
          
          <h3 class="help-subtitle">Creating Action Items</h3>
          
          <p class="help-text">
            You can create action items directly or generate them from other activities in the system:
          </p>
          
          <div class="help-steps">
            <div class="help-step">
              <div class="help-step-title">Direct Creation</div>
              <p>
                Click "Create Action Item" in the Action Items menu. Fill in:
              </p>
              <ul>
                <li><strong>Title:</strong> Brief description of what needs to be done</li>
                <li><strong>Description:</strong> Detailed explanation with context</li>
                <li><strong>Assignees:</strong> Who is responsible for completion</li>
                <li><strong>Due Date:</strong> When it should be completed</li>
                <li><strong>Priority:</strong> Importance level</li>
                <li><strong>Category:</strong> Type of action (e.g., Research, Decision, Follow-up)</li>
              </ul>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">From One-on-One Sessions</div>
              <p>
                During or after a one-on-one session, use the "Convert to Action Item" button next to notes.
                The system will pre-fill the source and context information.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">From QA Reviews</div>
              <p>
                When completing a quality review, the "Create Action Item" button in the improvement section
                allows you to turn feedback into trackable actions.
              </p>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Add Tags and Attachments</div>
              <p>
                Enhance your action items with:
              </p>
              <ul>
                <li>Tags for easy filtering and categorization</li>
                <li>File attachments for reference documents</li>
                <li>Links to related system items or external resources</li>
              </ul>
            </div>
            
            <div class="help-step">
              <div class="help-step-title">Set Up Reminders</div>
              <p>
                Configure when and how reminders should be sent:
              </p>
              <ul>
                <li>Reminder timing (e.g., 1 day before due date)</li>
                <li>Notification method (email, in-app, both)</li>
                <li>Recipients (assignee, creator, other stakeholders)</li>
              </ul>
            </div>
          </div>
          
          <h3 class="help-subtitle">Managing Action Items</h3>
          
          <p class="help-text">
            The Action Items View provides a comprehensive interface for tracking and managing all action items:
          </p>
          
          <ul class="help-list">
            <li><strong>Filtering:</strong> By status, assignee, due date, category, or tags</li>
            <li><strong>Sorting:</strong> Prioritize by due date, creation date, or priority</li>
            <li><strong>Grouping:</strong> Organize by assignee, status, or source</li>
            <li><strong>Bulk Actions:</strong> Update multiple items at once (status, due date, assignee)</li>
            <li><strong>Export:</strong> Generate reports or share action item lists</li>
          </ul>
          
          <div class="help-tip">
  <strong>Pro Tip:</strong> Use the "Action Items Dashboard" to get a visual overview of action item status across your team. This helps identify bottlenecks and ensure nothing falls through the cracks.
</div>

<h3 class="help-subtitle">Reminder System</h3>

<p class="help-text">
  Action Items include a powerful reminder system to ensure follow-through:
</p>

<div class="accordion">
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Reminder Types</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <ul>
        <li><strong>Due Date Reminders:</strong> Sent before an item is due (1 day, 3 days, 1 week)</li>
        <li><strong>Overdue Notifications:</strong> Sent when items pass their due date</li>
        <li><strong>Status Update Requests:</strong> Periodic reminders to update progress</li>
        <li><strong>Follow-up Reminders:</strong> After completion, reminder to verify outcome</li>
      </ul>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Notification Methods</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <ul>
        <li><strong>In-App:</strong> Notifications appear in the dashboard's notification center</li>
        <li><strong>Email:</strong> Sent to the user's registered email address</li>
        <li><strong>Daily Digest:</strong> Summary of pending and upcoming action items</li>
        <li><strong>Weekly Roundup:</strong> Overview of all action items and their status</li>
      </ul>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Managing Reminders</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Configure your reminder preferences in the Action Items Reminders section:</p>
      <ul>
        <li>Set default reminder timing for all new action items</li>
        <li>Enable/disable specific notification types</li>
        <li>Choose preferred notification methods</li>
        <li>Configure team-wide reminder settings (admin only)</li>
      </ul>
    </div>
  </div>
</div>

<h3 class="help-subtitle">Converting Action Items to Tasks</h3>

<p class="help-text">
  For more complex action items that require multi-step execution, you can convert them to full tasks:
</p>

<ol class="help-list">
  <li>Open the action item details</li>
  <li>Click the "Convert to Task" button</li>
  <li>Add any additional task-specific details</li>
  <li>Choose whether to keep the original action item linked to the task</li>
  <li>Save to create the new task while maintaining traceability</li>
</ol>

<div class="help-warning">
  <strong>Important:</strong> Regular monitoring of action items is essential for accountability. We recommend reviewing all open action items at least once a week, and including action item progress in team meetings.
</div>

<div class="doc-navigation">
  <a href="#" class="doc-nav-link" data-section="tasks">
    <i class="fas fa-chevron-left"></i>
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Previous</span>
      <span class="doc-nav-title">Task Management</span>
    </div>
  </a>
  
  <a href="#" class="doc-nav-link" data-section="quality-assurance">
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Next</span>
      <span class="doc-nav-title">Quality Assurance</span>
    </div>
    <i class="fas fa-chevron-right"></i>
  </a>
</div>
</section>

<!-- Quality Assurance Section -->
<section class="help-section" id="quality-assurance-section" style="display: none;">
<h2 class="help-title">Quality Assurance</h2>

<p class="help-text">
  The Quality Assurance module helps you maintain and improve service standards 
  through systematic reviews, scoring, and feedback. Regular QA reviews ensure 
  consistent quality and identify opportunities for coaching and development.
</p>

<h3 class="help-subtitle">Creating QA Reviews</h3>

<div class="help-steps">
  <div class="help-step">
    <div class="help-step-title">Start a New Review</div>
    <p>
      Click on "New Quality Review" in the QA Reviews submenu to open the review form.
    </p>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Select Team Member and Interaction</div>
    <p>
      Choose the team member being reviewed and identify the specific interaction 
      (call, email, chat) to evaluate. Include the interaction date and ID for reference.
    </p>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Score Each Category</div>
    <p>
      Rate performance across these key areas:
    </p>
    <ul>
      <li><strong>Opening:</strong> Greeting, identification, professionalism</li>
      <li><strong>Risk Assessment:</strong> Safety evaluation and protocol adherence</li>
      <li><strong>Communication:</strong> Clarity, empathy, active listening</li>
      <li><strong>Support Provided:</strong> Appropriateness and effectiveness of help</li>
      <li><strong>Closure:</strong> Summary, next steps, proper conclusion</li>
    </ul>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Document Strengths and Improvements</div>
    <p>
      Add detailed notes about what went well (strengths) and 
      areas where improvement is needed. Be specific with examples.
    </p>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Create Action Items</div>
    <p>
      Convert improvement areas into actionable steps. Use the "Add Action Item" 
      button to create linked follow-up items.
    </p>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Schedule Follow-up</div>
    <p>
      Set a date for follow-up to verify that improvements have been implemented.
    </p>
  </div>
</div>

<div class="help-note">
  <strong>Note:</strong> For best results, aim to complete QA reviews as soon as possible after the interaction while details are still fresh.
</div>

<h3 class="help-subtitle">QA Scoring Guidelines</h3>

<p class="help-text">
  Use these guidelines to ensure consistent scoring across reviews:
</p>

<div class="accordion">
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">5 - Exceptional</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Team member went above and beyond expectations. Their approach should be considered a benchmark for others. They demonstrated exceptional skill, empathy, and effectiveness. No improvements needed.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">4 - Strong</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Team member performed well beyond the basic requirements. They demonstrated skill and confidence throughout most of the interaction. Only minor improvements would enhance performance.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">3 - Satisfactory</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Team member met the basic requirements. They followed protocols and provided adequate support. Some noticeable areas could be improved with coaching and practice.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">2 - Needs Improvement</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Team member fell short of expectations in significant ways. They missed important elements or showed considerable skill gaps. Focused coaching and follow-up required.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">1 - Unsatisfactory</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Team member failed to meet basic requirements. Critical elements were missing, or approach was inappropriate. Immediate intervention and comprehensive coaching required.</p>
    </div>
  </div>
</div>

<h3 class="help-subtitle">QA Reports and Analytics</h3>

<p class="help-text">
  The QA Dashboard and Reports provide insights into quality trends and performance:
</p>

<ul class="help-list">
  <li><strong>Individual Performance:</strong> Track scores over time for each team member</li>
  <li><strong>Team Averages:</strong> Compare overall team performance against targets</li>
  <li><strong>Category Analysis:</strong> Identify common strengths and improvement areas</li>
  <li><strong>Trend Reports:</strong> View quality score changes over time</li>
  <li><strong>Heat Maps:</strong> Visualize score distribution across the team</li>
</ul>

<div class="help-tip">
  <strong>Pro Tip:</strong> Use the comparison view to identify team members who excel in specific areas. They can serve as peer coaches to help others improve in those areas.
</div>

<h3 class="help-subtitle">Best Practices for QA Reviews</h3>

<ol class="help-list">
  <li><strong>Be consistent:</strong> Aim to review a similar number of interactions for each team member</li>
  <li><strong>Use random sampling:</strong> Select interactions randomly to get a representative view</li>
  <li><strong>Review regularly:</strong> Conduct QA assessments on an ongoing basis, not just during formal evaluations</li>
  <li><strong>Focus on development:</strong> Frame feedback as opportunities for growth rather than criticism</li>
  <li><strong>Close the loop:</strong> Always follow up on action items created from reviews</li>
</ol>

<div class="help-warning">
  <strong>Important:</strong> Quality reviews should be conducted in a supportive environment. Always discuss results privately with team members and focus on specific behaviors rather than general criticisms.
</div>

<div class="doc-navigation">
  <a href="#" class="doc-nav-link" data-section="action-items">
    <i class="fas fa-chevron-left"></i>
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Previous</span>
      <span class="doc-nav-title">Action Items</span>
    </div>
  </a>
  
  <a href="#" class="doc-nav-link" data-section="time-management">
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Next</span>
      <span class="doc-nav-title">Time Management</span>
    </div>
    <i class="fas fa-chevron-right"></i>
  </a>
</div>
</section>

<!-- Time Management Section -->
<section class="help-section" id="time-management-section" style="display: none;">
<h2 class="help-title">Time Management</h2>

<p class="help-text">
  The Time Management module helps team leads track how they spend their time, manage team scheduling,
  and optimize resource allocation. Effective time management is crucial for balancing administrative tasks,
  team development, and operational responsibilities.
</p>

<h3 class="help-subtitle">Team Lead Time Tracker</h3>

<p class="help-text">
  The Time Tracker allows you to log and analyze your daily activities:
</p>

<div class="help-steps">
  <div class="help-step">
    <div class="help-step-title">Track Your Activities</div>
    <p>
      Log time spent on different activities throughout your day:
    </p>
    <ul>
      <li><strong>Activity Type:</strong> Select from predefined categories (Meetings, Administrative, Coaching, etc.)</li>
      <li><strong>Description:</strong> Brief note about the specific activity</li>
      <li><strong>Start/End Time:</strong> When the activity began and finished</li>
      <li><strong>Team Members:</strong> Who was involved (if applicable)</li>
      <li><strong>Notes:</strong> Additional context or outcomes</li>
    </ul>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Use Quick Entry</div>
    <p>
      For faster logging, use the Quick Entry feature:
    </p>
    <ul>
      <li>Click the "Start" button beside common activities</li>
      <li>The system will automatically track time until you click "Stop"</li>
      <li>Add details after stopping the timer</li>
    </ul>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Review Time Reports</div>
    <p>
      Analyze how your time is distributed:
    </p>
    <ul>
      <li>View daily, weekly, or monthly breakdowns</li>
      <li>See percentage of time spent on each category</li>
      <li>Identify patterns and opportunities for optimization</li>
    </ul>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Set Time Goals</div>
    <p>
      Establish targets for how much time you want to spend on various activities.
      The dashboard will show progress toward these goals.
    </p>
  </div>
</div>

<div class="help-tip">
  <strong>Pro Tip:</strong> Set aside dedicated "focus blocks" in your schedule for specific activities like coaching or development work. Use the Time Tracker to ensure you're actually protecting this time.
</div>

<h3 class="help-subtitle">Team Schedule Management</h3>

<p class="help-text">
  The Schedule Manager helps you organize your team's work schedule:
</p>

<div class="accordion">
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Weekly Schedule Setup</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Create and manage weekly schedules for your team:</p>
      <ol>
        <li>Click "Initialize Week" to set up a new week</li>
        <li>Select the date range for the schedule</li>
        <li>Choose to start from scratch or copy a previous week</li>
        <li>Assign shifts to team members using the schedule grid</li>
        <li>Apply templates for common schedule patterns</li>
      </ol>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Managing Time Off</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Track and manage time off requests:</p>
      <ul>
        <li>View pending time off requests in the dashboard</li>
        <li>Approve or deny requests with comments</li>
        <li>See availability visualized on the schedule</li>
        <li>Configure coverage requirements to identify scheduling conflicts</li>
      </ul>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Schedule Views</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Different ways to visualize the schedule:</p>
      <ul>
        <li><strong>Team View:</strong> See everyone's schedule at once</li>
        <li><strong>Individual View:</strong> Focus on one team member</li>
        <li><strong>Coverage View:</strong> Analyze staffing levels by hour</li>
        <li><strong>Calendar View:</strong> Traditional calendar format</li>
      </ul>
    </div>
  </div>
</div>

<h3 class="help-subtitle">Schedule Analytics</h3>

<p class="help-text">
  The Schedule Reports provide insights into team scheduling patterns:
</p>

<ul class="help-list">
  <li><strong>Coverage Analysis:</strong> Identify times when you're under or overstaffed</li>
  <li><strong>Distribution Reports:</strong> Ensure shifts are distributed fairly</li>
  <li><strong>Time Off Patterns:</strong> Track vacation and sick time usage</li>
  <li><strong>Adherence:</strong> Compare actual work time to scheduled time</li>
  <li><strong>Historical Comparison:</strong> Compare current schedules to past periods</li>
</ul>

<p class="help-text">
  These reports help optimize scheduling decisions and resource planning.
</p>

<h3 class="help-subtitle">Best Practices</h3>

<div class="help-note">
  <strong>Recommended Time Distribution:</strong> Based on industry standards, team leads typically achieve the best results with this approximate time allocation:
</div>

<ul class="help-list">
  <li><strong>30-40%:</strong> Direct team support (coaching, one-on-ones, development)</li>
  <li><strong>20-25%:</strong> Quality assurance and performance management</li>
  <li><strong>15-20%:</strong> Administrative tasks and reporting</li>
  <li><strong>10-15%:</strong> Planning and strategy</li>
  <li><strong>5-10%:</strong> Meetings with leadership and stakeholders</li>
</ul>

<div class="help-warning">
  <strong>Important:</strong> Time tracking is most valuable when used as a tool for personal improvement and resource optimization, not for micromanagement. Focus on trends and patterns rather than occasional variations.
</div>

<div class="doc-navigation">
  <a href="#" class="doc-nav-link" data-section="quality-assurance">
    <i class="fas fa-chevron-left"></i>
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Previous</span>
      <span class="doc-nav-title">Quality Assurance</span>
    </div>
  </a>
  
  <a href="#" class="doc-nav-link" data-section="integrations">
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Next</span>
      <span class="doc-nav-title">Integrations</span>
    </div>
    <i class="fas fa-chevron-right"></i>
  </a>
</div>
</section>

<!-- Integrations Section -->
<section class="help-section" id="integrations-section" style="display: none;">
<h2 class="help-title">Integrations</h2>

<p class="help-text">
  The Team Metrics Dashboard can integrate with external tools and systems to enhance functionality 
  and streamline workflows. These integrations help reduce duplicate data entry and create a more 
  comprehensive view of team performance.
</p>

<h3 class="help-subtitle">Available Integrations</h3>

<div class="card-grid">
  <div class="feature-card">
    <div class="feature-icon">
      <i class="fas fa-tasks"></i>
    </div>
    <h3 class="feature-title">Asana</h3>
    <p class="feature-description">
      Connect with Asana for two-way task synchronization. Create, update, and track tasks in either system.
    </p>
    <a href="#asana-integration" class="feature-link">
      Setup guide <i class="fas fa-arrow-right"></i>
    </a>
  </div>
  
  <div class="feature-card">
    <div class="feature-icon">
      <i class="fas fa-calendar-alt"></i>
    </div>
    <h3 class="feature-title">Google Calendar</h3>
    <p class="feature-description">
      Sync schedules, one-on-ones, and important dates with Google Calendar for better time management.
    </p>
    <a href="#google-calendar-integration" class="feature-link">
      Setup guide <i class="fas fa-arrow-right"></i>
    </a>
  </div>
  
  <div class="feature-card">
    <div class="feature-icon">
      <i class="fas fa-envelope"></i>
    </div>
    <h3 class="feature-title">Email Notifications</h3>
    <p class="feature-description">
      Send automated email notifications for reminders, reports, and important updates.
    </p>
    <a href="#email-integration" class="feature-link">
      Setup guide <i class="fas fa-arrow-right"></i>
    </a>
  </div>
  
  <div class="feature-card">
    <div class="feature-icon">
      <i class="fas fa-file-export"></i>
    </div>
    <h3 class="feature-title">Data Export</h3>
    <p class="feature-description">
      Export dashboard data to various formats (CSV, PDF, Excel) for reporting and analysis.
    </p>
    <a href="#data-export" class="feature-link">
      Setup guide <i class="fas fa-arrow-right"></i>
    </a>
  </div>
</div>

<h3 class="help-subtitle" id="asana-integration">Asana Integration</h3>

<p class="help-text">
  The Asana integration allows for seamless task management between systems:
</p>

<div class="help-steps">
  <div class="help-step">
    <div class="help-step-title">Configure Connection</div>
    <p>
      Set up the connection in User Preferences > Integrations:
    </p>
    <ol>
      <li>Click "Connect to Asana"</li>
      <li>Enter your Asana API key (Personal Access Token)</li>
      <li>Test the connection</li>
      <li>Select workspaces and projects to sync</li>
    </ol>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Set Sync Options</div>
    <p>
      Configure how tasks synchronize between systems:
    </p>
    <ul>
      <li>Choose one-way or two-way sync</li>
      <li>Set sync frequency (hourly, daily, manual)</li>
      <li>Select which task fields to sync</li>
      <li>Configure conflict resolution preferences</li>
    </ul>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Using the Integration</div>
    <p>
      Once configured, you can:
    </p>
    <ul>
      <li>Create Asana tasks from the dashboard</li>
      <li>View and update Asana tasks within the Tasks module</li>
      <li>Link dashboard items to existing Asana tasks</li>
      <li>Include Asana data in dashboard reports</li>
    </ul>
  </div>
</div>

<div class="help-note">
  <strong>Note:</strong> You'll need an Asana Premium or Business account to access the API features required for full integration.
</div>

<h3 class="help-subtitle" id="google-calendar-integration">Google Calendar Integration</h3>

<p class="help-text">
  Connect your team's schedules and important dates with Google Calendar:
</p>

<div class="accordion">
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Setup Process</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <ol>
        <li>Go to User Preferences > Integrations > Google Calendar</li>
        <li>Click "Connect Calendar"</li>
        <li>Grant the required permissions</li>
        <li>Select which calendars to sync with</li>
        <li>Choose which types of events to sync</li>
      </ol>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">What Gets Synced</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>You can choose to sync any of these items:</p>
      <ul>
        <li>One-on-one meetings</li>
        <li>Team member schedules</li>
        <li>QA review sessions</li>
        <li>Action item due dates</li>
        <li>Important task deadlines</li>
      </ul>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Calendar Features</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>The integration enables these features:</p>
      <ul>
        <li>Automatic meeting scheduling based on availability</li>
        <li>Calendar notifications for important deadlines</li>
        <li>Schedule conflicts detection</li>
        <li>Meeting agenda sharing</li>
      </ul>
    </div>
  </div>
</div>

<h3 class="help-subtitle" id="email-integration">Email Notifications</h3>

<p class="help-text">
  Configure how and when email notifications are sent from the system:
</p>

<div class="help-steps">
  <div class="help-step">
    <div class="help-step-title">Setup Email Integration</div>
    <p>
      Configure email settings in System Settings > Notifications:
    </p>
    <ol>
      <li>Enter SMTP settings (or use default Google integration)</li>
      <li>Set up sender name and email address</li>
      <li>Test the email configuration</li>
    </ol>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Configure Notification Types</div>
    <p>
      Choose which events trigger email notifications:
    </p>
    <ul>
      <li>Task assignments and updates</li>
      <li>Action item reminders</li>
      <li>QA review completions</li>
      <li>Report generation and sharing</li>
      <li>System alerts and warnings</li>
    </ul>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Customize Email Templates</div>
    <p>
      Modify the default email templates for each notification type:
    </p>
    <ul>
      <li>Adjust subject lines and content</li>
      <li>Add custom branding elements</li>
      <li>Configure dynamic content fields</li>
      <li>Set up personalized signatures</li>
    </ul>
  </div>
</div>

<h3 class="help-subtitle" id="data-export">Data Export</h3>

<p class="help-text">
  Export dashboard data for external reporting and analysis:
</p>

<ul class="help-list">
  <li><strong>CSV Export:</strong> Raw data export for spreadsheet analysis</li>
  <li><strong>Excel Export:</strong> Formatted reports with charts and tables</li>
  <li><strong>PDF Reports:</strong> Professionally formatted documents for sharing</li>
  <li><strong>Google Sheets Sync:</strong> Direct export to Google Sheets</li>
  <li><strong>API Access:</strong> Programmatic access to dashboard data (advanced)</li>
</ul>

<p class="help-text">
  Access export options from the "Export" button in each module's report view.
</p>

<div class="help-warning">
  <strong>Important:</strong> When sharing exported data, ensure you comply with your organization's data privacy policies and don't include sensitive personal information without appropriate authorization.
</div>

<div class="doc-navigation">
  <a href="#" class="doc-nav-link" data-section="time-management">
    <i class="fas fa-chevron-left"></i>
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Previous</span>
      <span class="doc-nav-title">Time Management</span>
    </div>
  </a>
  
  <a href="#" class="doc-nav-link" data-section="customization">
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Next</span>
      <span class="doc-nav-title">Customization</span>
    </div>
    <i class="fas fa-chevron-right"></i>
  </a>
</div>
</section>

<!-- Customization Section -->
<section class="help-section" id="customization-section" style="display: none;">
<h2 class="help-title">Customization</h2>

<p class="help-text">
  The Team Metrics Dashboard can be tailored to suit your specific team needs and workflows.
  Customizing the system helps ensure it aligns perfectly with your management style and team requirements.
</p>

<h3 class="help-subtitle">User Interface Customization</h3>

<div class="help-steps">
  <div class="help-step">
    <div class="help-step-title">Dashboard Layout</div>
    <p>
      Customize the main dashboard view:
    </p>
    <ul>
      <li>Click "Customize Dashboard" in the top-right corner</li>
      <li>Drag and drop widgets to rearrange them</li>
      <li>Resize widgets as needed</li>
      <li>Add or remove widgets from the available selection</li>
      <li>Save your layout as the default view</li>
    </ul>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Theme Settings</div>
    <p>
      Adjust the visual appearance:
    </p>
    <ul>
      <li>Select light or dark mode</li>
      <li>Choose from predefined color schemes</li>
      <li>Set custom accent colors</li>
      <li>Adjust density settings (compact, comfortable, spacious)</li>
    </ul>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Navigation Customization</div>
    <p>
      Modify menu structure for easier access to frequently used features:
    </p>
    <ul>
      <li>Reorder menu items</li>
      <li>Create custom shortcuts for your most-used functions</li>
      <li>Hide rarely used menu items</li>
    </ul>
  </div>
</div>

<div class="help-tip">
  <strong>Pro Tip:</strong> Create different dashboard layouts for different purposes (daily management, weekly reviews, reporting to leadership) and save them as templates for quick access.
</div>

<h3 class="help-subtitle">Field Customization</h3>

<p class="help-text">
  Tailor data fields to match your team's specific needs:
</p>

<div class="accordion">
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Custom Metrics</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Create your own metrics to track team performance:</p>
      <ol>
        <li>Go to Settings > Metrics Configuration > Custom Metrics</li>
        <li>Click "Add Custom Metric"</li>
        <li>Define the metric name, description, and measurement unit</li>
        <li>Set calculation method (if applicable)</li>
        <li>Establish target values and thresholds</li>
      </ol>
      <p>Example custom metrics include customer satisfaction scores, knowledge base contributions, or training completion rates.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Custom Fields</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Add custom fields to any module:</p>
      <ol>
        <li>Navigate to Settings > Module Configuration</li>
        <li>Select the module to customize</li>
        <li>Click "Add Custom Field"</li>
        <li>Choose the field type (text, number, date, dropdown, etc.)</li>
        <li>Configure field properties and validation rules</li>
      </ol>
      <p>Custom fields can be used in filters, reports, and dashboards just like standard fields.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Custom Statuses</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Create custom status options for tasks and action items:</p>
      <ol>
        <li>Go to Settings > Module Configuration > [Task or Action Items]</li>
        <li>Select "Status Values"</li>
        <li>Add, edit, or reorder status options</li>
        <li>Assign colors and categories to each status</li>
      </ol>
      <p>You might add statuses like "Waiting for Response," "Under Review," or "Ready for Deployment" to better match your workflow.</p>
    </div>
  </div>
</div>

<h3 class="help-subtitle">Report Customization</h3>

<p class="help-text">
  Create custom reports to focus on the metrics that matter most to you:
</p>

<div class="help-steps">
  <div class="help-step">
    <div class="help-step-title">Build Custom Reports</div>
    <p>
      Create tailored reports for specific needs:
    </p>
    <ol>
      <li>Go to Reports > Custom Reports > Create New</li>
      <li>Select data sources from available modules</li>
      <li>Choose fields to include in the report</li>
      <li>Add filters to focus on relevant data</li>
      <li>Configure grouping and sorting options</li>
      <li>Add calculated fields and formulas if needed</li>
    </ol>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Design Data Visualizations</div>
    <p>
      Add charts and graphs to your reports:
    </p>
    <ul>
      <li>Select from various chart types (bar, line, pie, scatter, etc.)</li>
      <li>Configure data series and axes</li>
      <li>Apply formatting and color schemes</li>
      <li>Add interactive elements (tooltips, drill-down options)</li>
    </ul>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Schedule Report Distribution</div>
    <p>
      Automate report generation and sharing:
    </p>
    <ul>
      <li>Set recurring schedule (daily, weekly, monthly)</li>
      <li>Configure recipient list</li>
      <li>Choose delivery format (PDF, email, dashboard)</li>
      <li>Add custom message or instructions</li>
    </ul>
  </div>
</div>

<h3 class="help-subtitle">Advanced Customization</h3>

<div class="help-warning">
  <strong>Note:</strong> Advanced customization options require technical knowledge and may affect system performance if not configured properly.
</div>

<ul class="help-list">
  <li><strong>Custom Formulas:</strong> Create complex calculations using the formula builder</li>
  <li><strong>Custom Scripts:</strong> Add JavaScript functions for specialized functionality</li>
  <li><strong>Custom Triggers:</strong> Set up automated actions based on specific events</li>
  <li><strong>API Integration:</strong> Connect with additional external systems</li>
  <li><strong>Advanced Styling:</strong> Apply custom CSS for unique visual appearance</li>
</ul>

<p class="help-text">
  Access these options in Settings > Advanced Configuration. Consider consulting with technical support before implementing advanced customizations.
</p>

<div class="doc-navigation">
  <a href="#" class="doc-nav-link" data-section="integrations">
    <i class="fas fa-chevron-left"></i>
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Previous</span>
      <span class="doc-nav-title">Integrations</span>
    </div>
  </a>
  
  <a href="#" class="doc-nav-link" data-section="troubleshooting">
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Next</span>
      <span class="doc-nav-title">Troubleshooting</span>
    </div>
    <i class="fas fa-chevron-right"></i>
  </a>
</div>
</section>

<!-- Troubleshooting Section -->
<section class="help-section" id="troubleshooting-section" style="display: none;">
<h2 class="help-title">Troubleshooting</h2>

<p class="help-text">
  If you encounter issues with the Team Metrics Dashboard, this guide will help you identify
  and resolve common problems. For more complex issues, please contact support.
</p>

<h3 class="help-subtitle">Common Issues and Solutions</h3>

<div class="accordion">
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Dashboard Not Loading Properly</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p><strong>Symptoms:</strong> Blank screen, spinning loader that never completes, or partial loading of components.</p>
      
      <p><strong>Solutions:</strong></p>
      <ol>
        <li>Refresh the page (F5 or browser refresh button)</li>
        <li>Clear your browser cache and cookies</li>
        <li>Try a different browser (Chrome, Firefox, Edge)</li>
        <li>Check your internet connection</li>
        <li>Disable browser extensions that might interfere</li>
      </ol>
      
      <p>If these steps don't work, try accessing the system in incognito/private browsing mode.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Data Not Showing or Updating</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p><strong>Symptoms:</strong> Empty reports, missing data points, or outdated information.</p>
      
      <p><strong>Solutions:</strong></p>
      <ol>
        <li>Check if filters are applied that might be excluding data</li>
        <li>Verify the date range settings</li>
        <li>Click the "Refresh Data" button in the report header</li>
        <li>Clear the system cache in Settings > System > Maintenance</li>
        <li>Check if you have appropriate permissions to view the data</li>
      </ol>
      
      <p>For data that should be imported from integrations, check the integration status in Settings > Integrations.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Error Messages</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Common error messages and their resolutions:</p>
      
      <ul>
        <li>
          <strong>"Unauthorized Access":</strong> You don't have permission to access this feature.
          Contact your system administrator to request access.
        </li>
        <li>
          <strong>"Failed to Save":</strong> Check that all required fields are filled correctly
          and try again. If it persists, there might be a data validation issue.
        </li>
        <li>
          <strong>"Integration Error":</strong> The connection to an external system failed.
          Check your API keys and integration settings.
        </li>
        <li>
          <strong>"Session Expired":</strong> Your login session has timed out. Log in again to continue.
        </li>
      </ul>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Performance Issues</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p><strong>Symptoms:</strong> Slow loading, delayed responses, timeouts.</p>
      
      <p><strong>Solutions:</strong></p>
      <ol>
        <li>Narrow date ranges in reports to reduce data volume</li>
        <li>Apply filters to limit the records being processed</li>
        <li>Close unused browser tabs and applications</li>
        <li>Use the "Light Mode" option in Settings > Appearance</li>
        <li>Optimize custom reports by removing unnecessary fields</li>
      </ol>
      
      <p>For dashboard performance, consider reducing the number of widgets displayed simultaneously.</p>
    </div>
  </div>
</div>

<h3 class="help-subtitle">System Diagnostics</h3>

<p class="help-text">
  Use the built-in diagnostic tools to identify and fix issues:
</p>

<div class="help-steps">
  <div class="help-step">
    <div class="help-step-title">Run System Check</div>
    <p>
      Perform a comprehensive system check:
    </p>
    <ol>
      <li>Go to Settings > System > Diagnostics</li>
      <li>Click "Run System Check"</li>
      <li>Review the results for any flagged items</li>
      <li>Follow the recommended actions for each issue</li>
    </ol>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Validate Data Integrity</div>
    <p>
      Check for data inconsistencies:
    </p>
    <ol>
      <li>Go to Settings > System > Data Validation</li>
      <li>Select the modules to check</li>
      <li>Click "Validate Data"</li>
      <li>Review and fix any reported issues</li>
    </ol>
  </div>
  
  <div class="help-step">
    <div class="help-step-title">Check Error Logs</div>
    <p>
      Review system error logs for technical details:
    </p>
    <ol>
      <li>Go to Settings > System > Error Logs</li>
      <li>Filter by date, severity, or module</li>
      <li>Click on log entries to see detailed information</li>
      <li>Use error codes when contacting support</li>
    </ol>
  </div>
</div>

<h3 class="help-subtitle">Recovery Options</h3>

<p class="help-text">
  If you encounter severe issues or data corruption, you can use these recovery options:
</p>

<ul class="help-list">
  <li><strong>Restore from Backup:</strong> Go to Settings > System > Backups to restore from a previous backup</li>
  <li><strong>Reset Module Settings:</strong> Reset individual module configurations without affecting data</li>
  <li><strong>Rebuild Indexes:</strong> Recreate system indexes to fix search or performance problems</li>
  <li><strong>Clear Cache:</strong> Remove cached data that might be causing conflicts</li>
</ul>

<div class="help-warning">
  <strong>Warning:</strong> Some recovery options like restoring from backups or resetting modules can result in data loss. Always create a new backup before performing these actions.
</div>

<h3 class="help-subtitle">Contacting Support</h3>

<p class="help-text">
  If you can't resolve an issue using the troubleshooting steps above, contact support:
</p>

<ol class="help-list">
  <li>Click the "Contact Support" button in the header</li>
  <li>Fill in the support request form with detailed information</li>
  <li>Include any error messages, screenshots, and steps to reproduce the issue</li>
  <li>Mention troubleshooting steps you've already tried</li>
</ol>

<p class="help-text">
  For urgent issues, you can also email support directly at support@teammetrics.example.com
  or call the support hotline at (555) 123-4567 during business hours.
</p>

<div class="doc-navigation">
  <a href="#" class="doc-nav-link" data-section="customization">
    <i class="fas fa-chevron-left"></i>
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Previous</span>
      <span class="doc-nav-title">Customization</span>
    </div>
  </a>
  
  <a href="#" class="doc-nav-link" data-section="faq">
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Next</span>
      <span class="doc-nav-title">FAQ</span>
    </div>
    <i class="fas fa-chevron-right"></i>
  </a>
</div>
</section>

<!-- FAQ Section -->
<section class="help-section" id="faq-section" style="display: none;">
<h2 class="help-title">Frequently Asked Questions</h2>

<p class="help-text">
  Find answers to common questions about using the Team Metrics Dashboard.
</p>

<div class="search-container">
  <i class="fas fa-search search-icon"></i>
  <input type="text" class="search-input" id="faqSearch" placeholder="Search FAQs...">
</div>

<div class="accordion" id="faqAccordion">
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">How often should I update team metrics?</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>For most metrics, daily updates provide the best balance of timeliness and administrative effort. Critical metrics like call volume and answer rates should be updated daily, while more complex metrics like quality scores might be updated weekly. The dashboard is designed to accommodate different update frequencies for different metrics.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Can team members see each other's performance data?</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>By default, team members can only see their own individual performance data. Team leads can see data for all team members. You can adjust these permissions in Settings > User Permissions if you want to enable peer visibility for certain metrics. Some teams find that transparency improves accountability and collaboration, while others prefer to keep individual metrics private.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">How do I set appropriate targets for my metrics?</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>When setting performance targets, consider:</p>
      <ul>
        <li>Historical performance (what has the team achieved in the past)</li>
        <li>Industry standards and benchmarks</li>
        <li>Organizational goals and requirements</li>
        <li>Team member experience and skill levels</li>
      </ul>
      <p>Start with achievable targets based on historical averages, then gradually increase them as the team improves. You can set different targets for different team members based on experience levels through the Settings > Metrics Configuration menu.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">How can I track progress on action items?</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>There are several ways to track action item progress:</p>
      <ol>
        <li>Use the Action Items View with the status filter set to "In Progress"</li>
        <li>Enable status update reminders in the Action Items Reminders settings</li>
        <li>Add the "Action Items Progress" widget to your dashboard</li>
        <li>Run the "Action Items Status Report" from the Reports section</li>
        <li>Use the "My Action Items" shortcut to see only items assigned to you</li>
      </ol>
      <p>You can also enable periodic email digests that summarize action item status and upcoming due dates.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">What's the difference between Tasks and Action Items?</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>While both track work to be done, they serve different purposes:</p>
      
      <p><strong>Tasks</strong> are typically:</p>
      <ul>
        <li>Standalone work units that may be part of regular workflows</li>
        <li>Often recurring or templated</li>
        <li>May be organized into projects</li>
        <li>Can be tracked in external systems (like Asana)</li>
        <li>More detailed with subtasks, time estimates, etc.</li>
      </ul>
      
      <p><strong>Action Items</strong> are typically:</p>
      <ul>
        <li>Commitments made during meetings or discussions</li>
        <li>Connected to a specific source (one-on-one, QA review, etc.)</li>
        <li>Usually shorter-term and more specific</li>
        <li>Focused on accountability and follow-through</li>
        <li>Simpler with emphasis on quick completion</li>
      </ul>
      
      <p>You can convert action items to tasks for more complex items that require detailed tracking.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">How do I backup my dashboard data?</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>You can backup your data in several ways:</p>
      <ol>
        <li><strong>Automatic Backups:</strong> Configure scheduled backups in Settings > System > Backup Configuration</li>
        <li><strong>Manual Backups:</strong> Create an immediate backup by going to Settings > System > Backups > Create New Backup</li>
        <li><strong>Export Data:</strong> Use the export functions in each module to save data in external formats</li>
        <li><strong>Google Sheets Integration:</strong> Set up automatic syncing with Google Sheets</li>
      </ol>
      <p>We recommend setting up weekly automatic backups with at least 3 months of retention, plus creating manual backups before major system changes.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">How many QA reviews should I conduct per team member?</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Best practices for QA review frequency:</p>
      <ul>
        <li><strong>New team members:</strong> 2-3 reviews per week for the first month</li>
        <li><strong>Developing team members:</strong> 1-2 reviews per week</li>
        <li><strong>Established team members:</strong> 2-4 reviews per month</li>
        <li><strong>Senior team members:</strong> 1-2 reviews per month</li>
      </ul>
      <p>Increase frequency when introducing new processes or after identifying performance issues. Focus on quality over quantity - a thorough review with good feedback is more valuable than multiple cursory reviews.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Can I access the dashboard on mobile devices?</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Yes, the Team Metrics Dashboard is responsive and works on mobile devices. For the best mobile experience:</p>
      <ul>
        <li>Use the "Mobile View" option in the user menu when on smaller screens</li>
        <li>Install the dashboard as a home screen app on iOS or Android</li>
        <li>Use landscape orientation for better visibility of charts and tables</li>
        <li>Consider enabling the "Simplified Mobile Reports" option in user preferences</li>
      </ul>
      <p>Note that some advanced features, like complex custom reports, work best on desktop devices.</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">How do I reset my password?</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>To reset your password:</p>
      <ol>
        <li>Click on the "Forgot Password" link on the login screen</li>
        <li>Enter your email address</li>
        <li>Check your email for a password reset link</li>
        <li>Click the link and enter a new password</li>
      </ol>
      <p>If you're already logged in and want to change your password, go to the user menu in the top-right corner and select "Account Settings" > "Security" > "Change Password".</p>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Is my data secure in the dashboard?</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Yes, we take data security seriously:</p>
      <ul>
        <li>All data is stored in Google's secure infrastructure</li>
        <li>Communication between your browser and our servers is encrypted with HTTPS</li>
        <li>User authentication follows industry best practices</li>
        <li>Regular security audits and updates are performed</li>
        <li>Role-based access controls ensure users only see appropriate data</li>
      </ul>
      <p>For additional security, enable two-factor authentication in your account settings and ensure your organization follows proper password policies.</p>
    </div>
  </div>
</div>

<div class="help-note" style="margin-top: 24px;">
  <strong>Can't find what you're looking for?</strong> Use the <a href="#" id="contactSupportLink">Contact Support</a> form to ask your specific question.
</div>

<div class="doc-navigation">
  <a href="#" class="doc-nav-link" data-section="troubleshooting">
    <i class="fas fa-chevron-left"></i>
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Previous</span>
      <span class="doc-nav-title">Troubleshooting</span>
    </div>
  </a>
  
  <a href="#" class="doc-nav-link" data-section="video-tutorials">
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Next</span>
      <span class="doc-nav-title">Video Tutorials</span>
    </div>
    <i class="fas fa-chevron-right"></i>
  </a>
</div>
</section>

<!-- Video Tutorials Section -->
<section class="help-section" id="video-tutorials-section" style="display: none;">
<h2 class="help-title">Video Tutorials</h2>

<p class="help-text">
  Learn how to use the Team Metrics Dashboard through our comprehensive video tutorials.
  These step-by-step guides will help you master the system's features and functionality.
</p>

<h3 class="help-subtitle">Getting Started</h3>

<div class="card-grid">
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Dashboard Overview Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="dashboard-overview">
        <i class="fas fa-play"></i>
      </div>
    </div>
    <div class="tutorial-caption">Dashboard Overview (4:32)</div>
  </div>
  
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Initial Setup Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="initial-setup">
        <i class="fas fa-play"></i>
      </div>
    </div>
    <div class="tutorial-caption">Initial Setup Guide (7:15)</div>
  </div>
  
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Team Management Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="team-management">
        <i class="fas fa-play"></i>
      </div>
    </div>
    <div class="tutorial-caption">Team Management Basics (5:48)</div>
  </div>
  
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Navigation and UI Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="navigation-ui">
        <i class="fas fa-play"></i>
      </div>
    </div>
    <div class="tutorial-caption">Navigation and UI Guide (3:24)</div>
  </div>
</div>

<h3 class="help-subtitle">Core Modules</h3>

<div class="card-grid">
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Team Metrics Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="team-metrics">
        <i class="fas fa-play"></i>
      </div>
    </div>
    <div class="tutorial-caption">Working with Team Metrics (8:12)</div>
  </div>
  
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Task Management Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="task-management">
        <i class="fas fa-play"></i>
      </div>
    </div>
    <div class="tutorial-caption">Task Management System (6:45)</div>
  </div>
  
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Action Items Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="action-items">
        <i class="fas fa-play"></i>
      </div>
    </div>
    <div class="tutorial-caption">Action Items and Follow-ups (5:20)</div>
  </div>
  
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Quality Reviews Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="quality-reviews">
        <i class="fas fa-play"></i>
      </div>
    </div>
    <div class="tutorial-caption">Conducting Quality Reviews (9:37)</div>
  </div>
</div>

<h3 class="help-subtitle">Advanced Features</h3>

<div class="card-grid">
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Custom Reports Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="custom-reports">
        <i class="fas fa-play"></i>
           </div>
    </div>
    <div class="tutorial-caption">Creating Custom Reports (7:52)</div>
  </div>
  
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Dashboard Customization Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="dashboard-customization">
        <i class="fas fa-play"></i>
      </div>
    </div>
    <div class="tutorial-caption">Customizing Your Dashboard (6:18)</div>
  </div>
  
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Integrations Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="integrations">
        <i class="fas fa-play"></i>
      </div>
    </div>
    <div class="tutorial-caption">Setting Up Integrations (10:05)</div>
  </div>
  
  <div class="tutorial-card">
    <img src="https://via.placeholder.com/400x225" alt="Advanced Analytics Tutorial" class="tutorial-img">
    <div class="tutorial-overlay">
      <div class="tutorial-play video-tutorial" data-video-id="advanced-analytics">
        <i class="fas fa-play"></i>
      </div>
    </div>
    <div class="tutorial-caption">Advanced Analytics Techniques (12:33)</div>
  </div>
</div>

<h3 class="help-subtitle">Tutorial Playlists</h3>

<div class="accordion">
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">New Team Lead Onboarding</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>A sequence of tutorials designed for new team leads:</p>
      <ol>
        <li>Dashboard Overview (4:32)</li>
        <li>Initial Setup Guide (7:15)</li>
        <li>Team Management Basics (5:48)</li>
        <li>Working with Team Metrics (8:12)</li>
        <li>Conducting One-on-One Meetings (8:47)</li>
        <li>Quality Assurance Fundamentals (6:22)</li>
      </ol>
      <button class="btn btn-primary" id="playNewLeadPlaylist">
        <i class="fas fa-play-circle"></i> Play Playlist
      </button>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Daily Operations</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Essential tutorials for day-to-day team management:</p>
      <ol>
        <li>Morning Dashboard Review (3:15)</li>
        <li>Daily Metrics Entry (4:10)</li>
        <li>Task Management Workflow (6:45)</li>
        <li>Action Items Tracking (5:20)</li>
        <li>Team Lead Time Management (7:38)</li>
      </ol>
      <button class="btn btn-primary" id="playDailyOpsPlaylist">
        <i class="fas fa-play-circle"></i> Play Playlist
      </button>
    </div>
  </div>
  
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">Advanced Features</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <p>Tutorials covering advanced functionality:</p>
      <ol>
        <li>Creating Custom Reports (7:52)</li>
        <li>Advanced Analytics Techniques (12:33)</li>
        <li>Building Custom Dashboards (9:14)</li>
        <li>Integration with External Systems (10:05)</li>
        <li>Data Visualization Mastery (11:27)</li>
      </ol>
      <button class="btn btn-primary" id="playAdvancedPlaylist">
        <i class="fas fa-play-circle"></i> Play Playlist
      </button>
    </div>
  </div>
</div>

<div class="help-tip">
  <strong>Pro Tip:</strong> You can download videos for offline viewing by clicking the download icon in the video player's toolbar. This is useful when preparing for team training sessions or when you'll be in areas with limited internet connectivity.
</div>

<div class="help-note">
  <strong>Note:</strong> New tutorials are added regularly. Check back often or subscribe to the notification list to be alerted when new content is available.
</div>

<div class="doc-navigation">
  <a href="#" class="doc-nav-link" data-section="faq">
    <i class="fas fa-chevron-left"></i>
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Previous</span>
      <span class="doc-nav-title">FAQ</span>
    </div>
  </a>
  
  <a href="#" class="doc-nav-link" data-section="changelog">
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Next</span>
      <span class="doc-nav-title">Changelog</span>
    </div>
    <i class="fas fa-chevron-right"></i>
  </a>
</div>
</section>

<!-- Changelog Section -->
<section class="help-section" id="changelog-section" style="display: none;">
<h2 class="help-title">Changelog</h2>

<p class="help-text">
  Stay up-to-date with the latest features, improvements, and bug fixes in the Team Metrics Dashboard.
  This changelog documents all significant changes to the system.
</p>

<div class="help-note">
  <strong>Current Version:</strong> 1.0.0 (Released: April 5, 2025)
</div>

<h3 class="help-subtitle">Version 1.0.0 (April 5, 2025)</h3>

<div class="accordion">
  <div class="accordion-item">
    <div class="accordion-header">
      <span class="accordion-title">🚀 New Features</span>
      <i class="fas fa-chevron-down accordion-icon"></i>
    </div>
    <div class="accordion-content">
      <ul>
        <li><strong>Initial Release:</strong> First public release of the Team Metrics Dashboard</li>
        <li><strong>Core Modules:</strong> Team Management, Metrics, Tasks, Action Items, QA Reviews</li>
        <li><strong>Time Management:</strong> Team lead time tracking and team scheduling</li>
        <li><strong>Asana Integration:</strong> Two-way sync with Asana task management</li>
        <li><strong>Custom Dashboards:</strong> Configurable dashboard with drag-and-drop widgets</li>
        <li><strong>Reports:</strong> Pre-built reports for common use cases</li>
        <li><strong>User Preferences:</strong> Personalized settings and notification options</li>
      </ul>
    </div>
  </div>
</div>

<h3 class="help-subtitle">Upcoming Features</h3>

<p class="help-text">
  Here's a preview of features and improvements we're working on for future releases:
</p>

<ul class="help-list">
  <li><strong>Team Member Portal:</strong> Direct access for team members to view their metrics and tasks</li>
  <li><strong>Mobile App:</strong> Native mobile applications for iOS and Android</li>
  <li><strong>Advanced Analytics:</strong> Predictive analytics and trend forecasting</li>
  <li><strong>Additional Integrations:</strong> Slack, Microsoft Teams, and Trello connectors</li>
  <li><strong>Automated Coaching:</strong> AI-driven suggestions for coaching opportunities</li>
  <li><strong>Learning Management:</strong> Track training completion and skill development</li>
</ul>

<div class="help-tip">
  <strong>Feature Requests:</strong> Have an idea for a new feature? Use the <a href="#" id="featureRequestLink">Feature Request Form</a> to let us know what you'd like to see in future versions.
</div>

<h3 class="help-subtitle">Previous Versions</h3>

<p class="help-text">
  This is the initial release of the Team Metrics Dashboard. Previous versions were internal beta releases not available to the general public.
</p>

<div class="help-note">
  <strong>Version History Access:</strong> System administrators can access logs of previous installations and updates in the Settings > System > Version History menu.
</div>

<div class="doc-navigation">
  <a href="#" class="doc-nav-link" data-section="video-tutorials">
    <i class="fas fa-chevron-left"></i>
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Previous</span>
      <span class="doc-nav-title">Video Tutorials</span>
    </div>
  </a>
  
  <a href="#" class="doc-nav-link" style="visibility: hidden">
    <div class="doc-nav-text">
      <span class="doc-nav-direction">Next</span>
      <span class="doc-nav-title">Next Topic</span>
    </div>
    <i class="fas fa-chevron-right"></i>
  </a>
</div>
</section>
      </main>
    </div>
  </div>
  
  <!-- Contact Support Modal -->
  <div id="contactSupportModal" style="display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(15, 23, 42, 0.5); z-index: 1000; align-items: center; justify-content: center;">
    <div style="background: white; border-radius: var(--radius-lg); box-shadow: var(--shadow-lg); width: 90%; max-width: 500px; padding: 24px; position: relative;">
      <button id="closeModalBtn" style="position: absolute; top: 16px; right: 16px; background: none; border: none; cursor: pointer; font-size: 18px; color: var(--text-tertiary);">
        <i class="fas fa-times"></i>
      </button>
      
      <h3 style="font-weight: 600; font-size: 18px; margin-bottom: 16px;">Contact Support</h3>
      
      <form id="supportForm">
        <div style="margin-bottom: 16px;">
          <label style="display: block; font-weight: 500; margin-bottom: 8px; color: var(--text-secondary);">Subject</label>
          <input type="text" style="width: 100%; padding: 10px 12px; border: 1px solid var(--border-medium); border-radius: var(--radius-md); font-size: 14px;" placeholder="Enter subject" required>
        </div>
        
        <div style="margin-bottom: 16px;">
          <label style="display: block; font-weight: 500; margin-bottom: 8px; color: var(--text-secondary);">Message</label>
          <textarea style="width: 100%; padding: 10px 12px; border: 1px solid var(--border-medium); border-radius: var(--radius-md); font-size: 14px; min-height: 120px; resize: vertical;" placeholder="Describe your issue or question" required></textarea>
        </div>
        
        <div style="display: flex; justify-content: flex-end; gap: 12px;">
          <button type="button" id="cancelSupportBtn" class="btn btn-secondary">Cancel</button>
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-paper-plane"></i> Send Message
          </button>
        </div>
      </form>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <script>
    // Current section tracking
    let currentSection = 'overview';
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set up sidebar navigation
      setupNavigation();
      
      // Set up accordion functionality
      setupAccordion();
      
      // Set up contact support modal
      setupContactModal();
      
      // Set up help search functionality
      setupSearch();
      
      // Set up video tutorial clicks
      setupVideoTutorials();
    });
    
    // Set up sidebar navigation
    function setupNavigation() {
      const sidebarLinks = document.querySelectorAll('.sidebar-link');
      
      sidebarLinks.forEach(link => {
        link.addEventListener('click', function() {
          const section = this.getAttribute('data-section');
          changeSection(section);
        });
      });
      
      // Set up in-content navigation links
      const contentLinks = document.querySelectorAll('.doc-nav-link[data-section], .feature-link[data-section]');
      
      contentLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const section = this.getAttribute('data-section');
          if (section) {
            changeSection(section);
          }
        });
      });
      
      // Set up contact support link in FAQ
      document.getElementById('contactSupportLink')?.addEventListener('click', function(e) {
        e.preventDefault();
        document.getElementById('contactSupportBtn').click();
      });
      
      // Set up feature request link
      document.getElementById('featureRequestLink')?.addEventListener('click', function(e) {
        e.preventDefault();
        alert('Feature request form would open here in the actual implementation.');
      });
    }
    
    // Change active section
    function changeSection(section) {
      // Hide all sections
      document.querySelectorAll('.help-section').forEach(s => {
        s.style.display = 'none';
      });
      
      // Show the selected section
      const sectionEl = document.getElementById(section + '-section');
      if (sectionEl) {
        sectionEl.style.display = 'block';
        
        // Scroll to top
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      }
      
      // Update sidebar active link
      document.querySelectorAll('.sidebar-link').forEach(link => {
        link.classList.remove('active');
        
        if (link.getAttribute('data-section') === section) {
          link.classList.add('active');
        }
      });
      
      // Update current section
      currentSection = section;
    }
    
    // Set up accordion functionality
    function setupAccordion() {
      const accordionHeaders = document.querySelectorAll('.accordion-header');
      
      accordionHeaders.forEach(header => {
        header.addEventListener('click', function() {
          const accordionItem = this.parentElement;
          accordionItem.classList.toggle('open');
        });
      });
    }
    
    // Set up contact support modal
    function setupContactModal() {
      const contactSupportBtn = document.getElementById('contactSupportBtn');
      const contactSupportModal = document.getElementById('contactSupportModal');
      const closeModalBtn = document.getElementById('closeModalBtn');
      const cancelSupportBtn = document.getElementById('cancelSupportBtn');
      const supportForm = document.getElementById('supportForm');
      
      contactSupportBtn.addEventListener('click', function() {
        contactSupportModal.style.display = 'flex';
      });
      
      function closeModal() {
        contactSupportModal.style.display = 'none';
      }
      
      closeModalBtn.addEventListener('click', closeModal);
      cancelSupportBtn.addEventListener('click', closeModal);
      
      supportForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Show loading
        document.getElementById('loadingOverlay').classList.add('visible');
        
        // Simulate form submission
        setTimeout(() => {
          // Hide loading
          document.getElementById('loadingOverlay').classList.remove('visible');
          
          // Close modal
          closeModal();
          
          // Show success message
          alert('Your support request has been submitted. We will get back to you soon.');
        }, 1000);
      });
      
      // Close modal when clicking outside
      contactSupportModal.addEventListener('click', function(e) {
        if (e.target === contactSupportModal) {
          closeModal();
        }
      });
    }
    
    // Set up help search functionality
    function setupSearch() {
      const searchInput = document.getElementById('helpSearch');
      const faqSearchInput = document.getElementById('faqSearch');
      
      searchInput?.addEventListener('input', function() {
        const query = this.value.trim().toLowerCase();
        if (query.length < 3) return;
        
        // In a real implementation, this would search through help content
        // For now, we'll just simulate a search
        
        console.log('Searching for:', query);
        
        // You would typically call a server-side function here
        // google.script.run
        //   .withSuccessHandler(handleSearchResults)
        //   .searchHelpContent(query);
      });
      
      faqSearchInput?.addEventListener('input', function() {
        const query = this.value.trim().toLowerCase();
        if (query.length < 2) {
          // Show all FAQs when search is cleared
          document.querySelectorAll('#faqAccordion .accordion-item').forEach(item => {
            item.style.display = 'block';
          });
          return;
        }
        
        // Filter FAQ items
        document.querySelectorAll('#faqAccordion .accordion-item').forEach(item => {
          const title = item.querySelector('.accordion-title').textContent.toLowerCase();
          const content = item.querySelector('.accordion-content').textContent.toLowerCase();
          
          if (title.includes(query) || content.includes(query)) {
            item.style.display = 'block';
          } else {
            item.style.display = 'none';
          }
        });
      });
    }
    
    // Set up video tutorials
    function setupVideoTutorials() {
      const videoTutorials = document.querySelectorAll('.video-tutorial');
      const playlistButtons = document.querySelectorAll('[id^="play"][id$="Playlist"]');
      
      videoTutorials.forEach(tutorial => {
        tutorial.addEventListener('click', function() {
          const videoId = this.getAttribute('data-video-id');
          alert(`In a real implementation, this would play the video tutorial: ${videoId}`);
        });
      });
      
      playlistButtons.forEach(button => {
        button.addEventListener('click', function() {
          const playlistId = this.id.replace('play', '').replace('Playlist', '');
          alert(`In a real implementation, this would start the ${playlistId} playlist`);
        });
      });
    }
    
    // Handle search results
    function handleSearchResults(results) {
      // In a real implementation, this would update the UI with search results
      console.log('Search results:', results);
    }
    
    // Show video on click
    document.getElementById('overviewVideo')?.addEventListener('click', function() {
      alert('In a real implementation, this would play the overview video.');
    });
    
    // Setup video click for setup video
    document.getElementById('setupVideo')?.addEventListener('click', function() {
      alert('In a real implementation, this would play the setup configuration video.');
    });
  </script>
</body>
</html>




<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Preferences</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 800px;
      margin: 0 auto;
      width: 100%;
    }
    
    .tabs {
      display: flex;
      border-bottom: 1px solid var(--border-light);
      margin-bottom: 24px;
      overflow-x: auto;
    }
    
    .tab {
      padding: 12px 20px;
      font-weight: 500;
      white-space: nowrap;
      cursor: pointer;
      color: var(--text-secondary);
      position: relative;
    }
    
    .tab:hover {
      color: var(--primary-color);
    }
    
    .tab.active {
      color: var(--primary-color);
    }
    
    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      right: 0;
      height: 2px;
      background-color: var(--primary-color);
    }
    
    .tab-content {
      display: none;
      animation: fadeIn 0.3s ease;
    }
    
    .tab-content.active {
      display: block;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    textarea.form-control {
      resize: vertical;
      min-height: 100px;
    }
    
    .form-hint {
      margin-top: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .form-error {
      margin-top: 6px;
      font-size: 12px;
      color: var(--danger-color);
    }
    
    .form-row {
      display: flex;
      gap: 16px;
    }
    
    .form-col {
      flex: 1;
    }
    
    .input-group {
      display: flex;
      align-items: center;
    }
    
    .input-group .form-control {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
    
    .input-group-append {
      display: flex;
      align-items: center;
    }
    
    .input-group-text {
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-left: none;
      background-color: var(--bg-secondary);
      border-top-right-radius: var(--radius-md);
      border-bottom-right-radius: var(--radius-md);
      color: var(--text-secondary);
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(239, 68, 68, 0.3);
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(239, 68, 68, 0.4);
    }
    
    .btn-info {
      background: var(--secondary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(56, 189, 248, 0.3);
    }
    
    .btn-info:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(56, 189, 248, 0.4);
    }
    
    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 44px;
      height: 24px;
      margin-left: 8px;
    }
    
    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--border-medium);
      transition: var(--transition-fast);
      border-radius: 24px;
    }
    
    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: var(--transition-fast);
      border-radius: 50%;
    }
    
    input:checked + .toggle-slider {
      background-color: var(--primary-color);
    }
    
    input:focus + .toggle-slider {
      box-shadow: 0 0 1px var(--primary-color);
    }
    
    input:checked + .toggle-slider:before {
      transform: translateX(20px);
    }
    
    .notification {
      padding: 16px;
      border-radius: var(--radius-md);
      margin-bottom: 16px;
      display: flex;
      align-items: flex-start;
      gap: 16px;
    }
    
    .notification.info {
      background-color: var(--info-light);
      border-left: 4px solid var(--info-color);
    }
    
    .notification.warning {
      background-color: var(--warning-light);
      border-left: 4px solid var(--warning-color);
    }
    
    .notification.success {
      background-color: var(--success-light);
      border-left: 4px solid var(--success-color);
    }
    
    .notification.error {
      background-color: var(--danger-light);
      border-left: 4px solid var(--danger-color);
    }
    
    .notification-icon {
      font-size: 20px;
      color: inherit;
    }
    
    .notification.info .notification-icon {
      color: var(--info-color);
    }
    
    .notification.warning .notification-icon {
      color: var(--warning-color);
    }
    
    .notification.success .notification-icon {
      color: var(--success-color);
    }
    
    .notification.error .notification-icon {
      color: var(--danger-color);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .notification-message {
      font-size: 14px;
    }
    
    .setting-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 12px 0;
      border-bottom: 1px solid var(--border-light);
    }
    
    .setting-row:last-child {
      border-bottom: none;
    }
    
    .setting-label {
      font-weight: 500;
    }
    
    .setting-description {
      font-size: 13px;
      color: var(--text-tertiary);
      margin-top: 2px;
    }
    
    .setting-controls {
      display: flex;
      gap: 8px;
      align-items: center;
    }
    
    .avatar-container {
      position: relative;
      width: 80px;
      height: 80px;
      margin: 0 auto 20px;
    }
    
    .avatar-preview {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      background-color: var(--primary-light);
      color: white;
      font-size: 24px;
      font-weight: 600;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
    }
    
    .avatar-preview img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .avatar-upload {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 28px;
      height: 28px;
      border-radius: 50%;
      background-color: var(--primary-color);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      box-shadow: var(--shadow-sm);
    }
    
    .user-info {
      text-align: center;
      margin-bottom: 20px;
    }
    
    .user-name {
      font-weight: 600;
      font-size: 16px;
    }
    
    .user-email {
      color: var(--text-secondary);
      font-size: 14px;
    }
    
    .actions-footer {
      display: flex;
      justify-content: flex-end;
      gap: 12px;
      margin-top: 24px;
    }
    
    .connection-status {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      font-size: 13px;
      font-weight: 500;
      padding: 4px 10px;
      border-radius: 12px;
    }
    
    .connection-status.connected {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .connection-status.disconnected {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .api-key-toggle {
      cursor: pointer;
      color: var(--primary-color);
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      position: relative;
      animation: rotate 1s linear infinite;
    }
    
    .loading-spinner::before,
    .loading-spinner::after {
      content: "";
      position: absolute;
      border-radius: 50%;
    }
    
    .loading-spinner::before {
      width: 48px;
      height: 48px;
      border: 5px solid rgba(85, 64, 175, 0.2);
    }
    
    .loading-spinner::after {
      width: 48px;
      height: 48px;
      border: 5px solid transparent;
      border-top-color: var(--primary-color);
      animation: rotate 0.5s linear infinite;
    }
    
    @keyframes rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 16px;
      background-color: white;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-lg);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 1000;
      transform: translateY(100%);
      opacity: 0;
      transition: transform 0.3s ease, opacity 0.3s ease;
      min-width: 300px;
    }
    
    .toast.visible {
      transform: translateY(0);
      opacity: 1;
    }
    
    .toast-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      cursor: pointer;
      color: var(--text-tertiary);
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
    }
    
    .toast-close:hover {
      background-color: var(--bg-secondary);
      color: var(--text-primary);
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .form-row {
        flex-direction: column;
        gap: 12px;
      }
      
      .setting-row {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
      }
      
      .setting-controls {
        align-self: flex-end;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-user-cog"></i> User Preferences
          </h1>
          <div class="header-subtitle">
            Manage your personal settings and external integrations
          </div>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="tabs">
        <div class="tab active" data-tab="profile">Profile</div>
        <div class="tab" data-tab="notifications">Notifications</div>
        <div class="tab" data-tab="integrations">Integrations</div>
        <div class="tab" data-tab="team-lead">Team Lead Info</div>
      </div>
      
      <!-- Profile Tab -->
      <div class="tab-content active" id="profile-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-user"></i> Profile Information
            </div>
          </div>
          
          <div class="card-content">
            <div class="avatar-container">
              <div class="avatar-preview" id="avatarPreview">
                <img src="" alt="Profile" id="avatarImage" style="display: none;">
                <span id="avatarInitials">JD</span>
              </div>
              <label class="avatar-upload" for="avatarUpload">
                <i class="fas fa-camera"></i>
                <input type="file" id="avatarUpload" style="display: none;" accept="image/*">
              </label>
            </div>
            
            <div class="user-info">
              <div class="user-name" id="profileName">Loading...</div>
              <div class="user-email" id="profileEmail">Loading...</div>
            </div>
            
            <form id="profileForm">
              <div class="form-row">
                <div class="form-col">
                  <div class="form-group">
                    <label class="form-label" for="displayName">Display Name</label>
                    <input type="text" class="form-control" id="displayName" name="displayName" placeholder="Enter your display name">
                  </div>
                </div>
                
                <div class="form-col">
                  <div class="form-group">
                    <label class="form-label" for="jobTitle">Job Title</label>
                    <input type="text" class="form-control" id="jobTitle" name="jobTitle" placeholder="Enter your job title">
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="department">Department</label>
                <select class="form-control" id="department" name="department">
                  <option value="">Select department...</option>
                  <option value="engineering">Engineering</option>
                  <option value="product">Product</option>
                  <option value="design">Design</option>
                  <option value="marketing">Marketing</option>
                  <option value="sales">Sales</option>
                  <option value="support">Support</option>
                  <option value="hr">Human Resources</option>
                  <option value="finance">Finance</option>
                  <option value="other">Other</option>
                </select>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="timezone">Timezone</label>
                <select class="form-control" id="timezone" name="timezone">
                  <option value="UTC">UTC</option>
                  <option value="America/New_York">Eastern Time (ET)</option>
                  <option value="America/Chicago">Central Time (CT)</option>
                  <option value="America/Denver">Mountain Time (MT)</option>
                  <option value="America/Los_Angeles">Pacific Time (PT)</option>
                  <option value="Europe/London">London (GMT)</option>
                  <option value="Europe/Paris">Central European Time (CET)</option>
                  <option value="Asia/Tokyo">Japan Standard Time (JST)</option>
                </select>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="bio">Bio</label>
                <textarea class="form-control" id="bio" name="bio" placeholder="Tell us about yourself (optional)"></textarea>
              </div>
              
              <div class="actions-footer">
                <button type="submit" class="btn btn-primary">
                  <i class="fas fa-save"></i> Save Profile
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Notifications Tab -->
      <div class="tab-content" id="notifications-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-bell"></i> Notification Preferences
            </div>
          </div>
          
          <div class="card-content">
            <div class="notification info">
              <div class="notification-icon">
                <i class="fas fa-info-circle"></i>
              </div>
              <div class="notification-content">
                <div class="notification-title">About Notifications</div>
                <div class="notification-message">
                  Customize how and when you receive notifications from the Team Metrics Dashboard.
                </div>
              </div>
            </div>
            
            <form id="notificationsForm">
              <h3 style="font-size: 16px; font-weight: 600; margin: 8px 0 16px;">Email Notifications</h3>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">Task Assignments</div>
                  <div class="setting-description">Receive an email when a new task is assigned to you</div>
                </div>
                <div class="setting-controls">
                  <label class="toggle-switch">
                    <input type="checkbox" id="taskAssignmentEmail" name="taskAssignmentEmail" checked>
                    <span class="toggle-slider"></span>
                  </label>
                </div>
              </div>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">Task Updates</div>
                  <div class="setting-description">Receive an email when a task you're assigned to is updated</div>
                </div>
                <div class="setting-controls">
                  <label class="toggle-switch">
                    <input type="checkbox" id="taskUpdateEmail" name="taskUpdateEmail" checked>
                    <span class="toggle-slider"></span>
                  </label>
                </div>
              </div>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">Action Item Reminders</div>
                  <div class="setting-description">Receive an email when action items are due</div>
                </div>
                <div class="setting-controls">
                  <label class="toggle-switch">
                    <input type="checkbox" id="actionItemEmail" name="actionItemEmail" checked>
                    <span class="toggle-slider"></span>
                  </label>
                </div>
              </div>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">QA Reviews</div>
                  <div class="setting-description">Receive an email when you have a QA review to complete</div>
                </div>
                <div class="setting-controls">
                  <label class="toggle-switch">
                    <input type="checkbox" id="qaReviewEmail" name="qaReviewEmail" checked>
                    <span class="toggle-slider"></span>
                  </label>
                </div>
              </div>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">Weekly Digest</div>
                  <div class="setting-description">Receive a weekly summary of team metrics and activities</div>
                </div>
                <div class="setting-controls">
                  <label class="toggle-switch">
                    <input type="checkbox" id="weeklyDigestEmail" name="weeklyDigestEmail" checked>
                    <span class="toggle-slider"></span>
                  </label>
                </div>
              </div>
              
              <h3 style="font-size: 16px; font-weight: 600; margin: 24px 0 16px;">In-App Notifications</h3>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">Task Assignments</div>
                  <div class="setting-description">Show notification when a new task is assigned to you</div>
                </div>
                <div class="setting-controls">
                  <label class="toggle-switch">
                    <input type="checkbox" id="taskAssignmentInApp" name="taskAssignmentInApp" checked>
                    <span class="toggle-slider"></span>
                  </label>
                </div>
              </div>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">Task Updates</div>
                  <div class="setting-description">Show notification when a task you're assigned to is updated</div>
                </div>
                <div class="setting-controls">
                  <label class="toggle-switch">
                    <input type="checkbox" id="taskUpdateInApp" name="taskUpdateInApp" checked>
                    <span class="toggle-slider"></span>
                  </label>
                </div>
              </div>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">Action Item Reminders</div>
                  <div class="setting-description">Show notification when action items are due</div>
                </div>
                <div class="setting-controls">
                  <label class="toggle-switch">
                    <input type="checkbox" id="actionItemInApp" name="actionItemInApp" checked>
                    <span class="toggle-slider"></span>
                  </label>
                </div>
              </div>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">QA Reviews</div>
                  <div class="setting-description">Show notification when you have a QA review to complete</div>
                </div>
                <div class="setting-controls">
                  <label class="toggle-switch">
                    <input type="checkbox" id="qaReviewInApp" name="qaReviewInApp" checked>
                    <span class="toggle-slider"></span>
                  </label>
                </div>
              </div>
              
              <div class="actions-footer">
                <button type="submit" class="btn btn-primary">
                  <i class="fas fa-save"></i> Save Notification Preferences
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Integrations Tab -->
      <div class="tab-content" id="integrations-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-puzzle-piece"></i> Asana Integration
            </div>
          </div>
          
          <div class="card-content">
            <div id="asanaConnectionStatus">
              <div class="setting-row">
                <div>
                  <div class="setting-label">Connection Status</div>
                  <div class="setting-description">Current status of your Asana integration</div>
                </div>
                <div class="setting-controls">
                  <span class="connection-status disconnected" id="connectionBadge">
                    <i class="fas fa-times-circle"></i>
                    Not Connected
                  </span>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="asanaApiKey">Personal Access Token</label>
              <div class="input-group">
                <input type="password" class="form-control" id="asanaApiKey" name="asanaApiKey" placeholder="Asana Personal Access Token">
                <div class="input-group-append">
                  <span class="input-group-text api-key-toggle" id="toggleAsanaKey"><i class="fas fa-eye"></i></span>
                </div>
              </div>
              <div class="form-hint">
                <a href="https://developers.asana.com/docs/personal-access-token" target="_blank">
                  How to get your Asana Personal Access Token <i class="fas fa-external-link-alt"></i>
                </a>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="asanaWorkspace">Default Workspace</label>
              <select class="form-control" id="asanaWorkspace" name="asanaWorkspace" disabled>
                <option value="">Select workspace...</option>
              </select>
              <div class="form-hint">The default workspace for task creation and syncing</div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="asanaDefaultProject">Default Project</label>
              <select class="form-control" id="asanaDefaultProject" name="asanaDefaultProject" disabled>
                <option value="">Select project...</option>
              </select>
              <div class="form-hint">The default project for task creation</div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Auto-sync Tasks</div>
                <div class="setting-description">Automatically sync tasks between Asana and the dashboard</div>
              </div>
              <div class="setting-controls">
                <label class="toggle-switch">
                  <input type="checkbox" id="asanaAutoSync" name="asanaAutoSync">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" for="syncFrequency">Sync Frequency</label>
              <select class="form-control" id="syncFrequency" name="syncFrequency" disabled>
                <option value="hourly">Hourly</option>
                <option value="daily">Daily</option>
                <option value="manual">Manual only</option>
              </select>
            </div>
            
            <div class="actions-footer">
              <button type="button" class="btn btn-secondary" id="disconnectAsanaBtn">
                <i class="fas fa-unlink"></i> Disconnect
              </button>
              <button type="button" class="btn btn-info" id="testAsanaConnectionBtn">
                <i class="fas fa-vial"></i> Test Connection
              </button>
              <button type="button" class="btn btn-primary" id="saveAsanaSettingsBtn">
                <i class="fas fa-save"></i> Save & Connect
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Team Lead Info Tab -->
      <div class="tab-content" id="team-lead-tab">
        <div class="card">
          <div class="card-header">
            <div class="card-title">
              <i class="fas fa-user-tie"></i> Team Lead Information
            </div>
          </div>
          
          <div class="card-content">
            <div class="notification info">
              <div class="notification-icon">
                <i class="fas fa-info-circle"></i>
              </div>
              <div class="notification-content">
                <div class="notification-title">Team Lead Configuration</div>
                <div class="notification-message">
                  Configure your team leader information if you're a team lead. This information
                  will be used for team management and reporting.
                </div>
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Team Lead Status</div>
                <div class="setting-description">Identify yourself as a team lead</div>
              </div>
              <div class="setting-controls">
                <label class="toggle-switch">
                  <input type="checkbox" id="isTeamLead" name="isTeamLead">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div id="teamLeadInfoSection" style="display: none;">
              <div class="form-group">
                <label class="form-label" for="teamName">Team Name</label>
                <input type="text" class="form-control" id="teamName" name="teamName" placeholder="Enter your team name">
              </div>
              
              <div class="form-row">
                <div class="form-col">
                  <div class="form-group">
                    <label class="form-label" for="teamSize">Team Size</label>
                    <input type="number" class="form-control" id="teamSize" name="teamSize" min="1" placeholder="Number of team members">
                  </div>
                </div>
                
                <div class="form-col">
                  <div class="form-group">
                    <label class="form-label" for="teamDepartment">Team Department</label>
                    <select class="form-control" id="teamDepartment" name="teamDepartment">
                      <option value="">Select department...</option>
                      <option value="engineering">Engineering</option>
                      <option value="product">Product</option>
                      <option value="design">Design</option>
                      <option value="marketing">Marketing</option>
                      <option value="sales">Sales</option>
                      <option value="support">Support</option>
                      <option value="hr">Human Resources</option>
                      <option value="finance">Finance</option>
                      <option value="other">Other</option>
                    </select>
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="managementLevel">Management Level</label>
                <select class="form-control" id="managementLevel" name="managementLevel">
                  <option value="team_lead">Team Lead</option>
                  <option value="manager">Manager</option>
                  <option value="senior_manager">Senior Manager</option>
                  <option value="director">Director</option>
                  <option value="senior_director">Senior Director</option>
                  <option value="vp">VP</option>
                  <option value="cxo">C-Level</option>
                </select>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="managerEmail">Manager's Email</label>
                <input type="email" class="form-control" id="managerEmail" name="managerEmail" placeholder="Enter your manager's email">
                <div class="form-hint">Reports will be shared with your manager</div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="teamDescription">Team Description</label>
                <textarea class="form-control" id="teamDescription" name="teamDescription" placeholder="Describe your team's function and responsibilities"></textarea>
              </div>
              
              <div class="form-group">
                <label class="form-label">Team Metrics to Track</label>
                <div style="margin-top: 8px;">
                  <div class="setting-row" style="padding: 8px 0;">
                    <span>Productivity</span>
                    <label class="toggle-switch">
                      <input type="checkbox" id="trackProductivity" name="trackProductivity" checked>
                      <span class="toggle-slider"></span>
                    </label>
                  </div>
                  
                  <div class="setting-row" style="padding: 8px 0;">
                    <span>Quality</span>
                    <label class="toggle-switch">
                      <input type="checkbox" id="trackQuality" name="trackQuality" checked>
                      <span class="toggle-slider"></span>
                    </label>
                  </div>
                  
                  <div class="setting-row" style="padding: 8px 0;">
                    <span>Task Completion Rate</span>
                    <label class="toggle-switch">
                      <input type="checkbox" id="trackTaskCompletion" name="trackTaskCompletion" checked>
                      <span class="toggle-slider"></span>
                    </label>
                  </div>
                  
                  <div class="setting-row" style="padding: 8px 0;">
                    <span>Time Tracking</span>
                    <label class="toggle-switch">
                      <input type="checkbox" id="trackTime" name="trackTime" checked>
                      <span class="toggle-slider"></span>
                    </label>
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="reportingFrequency">Reporting Frequency</label>
                <select class="form-control" id="reportingFrequency" name="reportingFrequency">
                  <option value="weekly">Weekly</option>
                  <option value="biweekly">Bi-weekly</option>
                  <option value="monthly">Monthly</option>
                  <option value="quarterly">Quarterly</option>
                </select>
                <div class="form-hint">How often you want to generate team metrics reports</div>
              </div>
            </div>
            
            <div class="actions-footer">
              <button type="button" class="btn btn-primary" id="saveTeamLeadInfoBtn">
                <i class="fas fa-save"></i> Save Team Lead Information
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <div class="toast-icon success">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="toast-content">
      <div class="toast-title">Success</div>
      <div class="toast-message">Your settings have been saved.</div>
    </div>
    <div class="toast-close" id="toastClose">
      <i class="fas fa-times"></i>
    </div>
  </div>
  
  <script>
    // Global variables
    let userProfile = {};
    let asanaWorkspaces = [];
    let asanaProjects = {};
    let isConnectedToAsana = false;
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Setup tabs
      setupTabs();
      
      // Setup event listeners
      setupEventListeners();
      
      // Load user profile data
      loadUserProfile();
      
      // Load notification preferences
      loadNotificationPreferences();
      
      // Load Asana integration
      loadAsanaIntegration();
      
      // Load team lead information
      loadTeamLeadInfo();
    });
    
    // Setup tabs
    function setupTabs() {
      const tabs = document.querySelectorAll('.tab');
      
      tabs.forEach(tab => {
        tab.addEventListener('click', function() {
          // Remove active class from all tabs
          tabs.forEach(t => t.classList.remove('active'));
          
          // Add active class to clicked tab
          tab.classList.add('active');
          
          // Hide all tab contents
          document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
          });
          
          // Show selected tab content
          const tabId = tab.getAttribute('data-tab') + '-tab';
          document.getElementById(tabId).classList.add('active');
        });
      });
    }
    
    // Setup event listeners
    function setupEventListeners() {
      // Profile form
      document.getElementById('profileForm').addEventListener('submit', saveProfile);
      
      // Notifications form
      document.getElementById('notificationsForm').addEventListener('submit', saveNotifications);
      
      // Avatar upload
      document.getElementById('avatarUpload').addEventListener('change', handleAvatarUpload);
      
      // Asana API key toggle
      document.getElementById('toggleAsanaKey').addEventListener('click', toggleAsanaKey);
      
      // Save Asana settings
      document.getElementById('saveAsanaSettingsBtn').addEventListener('click', saveAsanaSettings);
      
      // Test Asana connection
      document.getElementById('testAsanaConnectionBtn').addEventListener('click', testAsanaConnection);
      
      // Disconnect Asana
      document.getElementById('disconnectAsanaBtn').addEventListener('click', disconnectAsana);
      
      // Team lead toggle
      document.getElementById('isTeamLead').addEventListener('change', function() {
        document.getElementById('teamLeadInfoSection').style.display = this.checked ? 'block' : 'none';
      });
      
      // Save team lead info
      document.getElementById('saveTeamLeadInfoBtn').addEventListener('click', saveTeamLeadInfo);
      
      // Toast close button
      document.getElementById('toastClose').addEventListener('click', function() {
        document.getElementById('toast').classList.remove('visible');
      });
    }
    
    // Load user profile data
    function loadUserProfile() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            userProfile = result.profile;
            
            // Populate profile fields
            document.getElementById('profileName').textContent = userProfile.name || '';
            document.getElementById('profileEmail').textContent = userProfile.email || '';
            
            document.getElementById('displayName').value = userProfile.displayName || '';
            document.getElementById('jobTitle').value = userProfile.jobTitle || '';
            document.getElementById('department').value = userProfile.department || '';
            document.getElementById('timezone').value = userProfile.timezone || 'UTC';
            document.getElementById('bio').value = userProfile.bio || '';
            
            // Set avatar
            if (userProfile.avatarUrl) {
              const avatarImg = document.getElementById('avatarImage');
              avatarImg.src = userProfile.avatarUrl;
              avatarImg.style.display = 'block';
              document.getElementById('avatarInitials').style.display = 'none';
            } else {
              // Set initials
              const name = userProfile.name || '';
              const nameParts = name.split(' ');
              let initials = '';
              
              if (nameParts.length >= 2) {
                initials = nameParts[0][0] + nameParts[1][0];
              } else if (name.length > 0) {
                initials = name[0];
              } else {
                initials = 'U';
              }
              
              document.getElementById('avatarInitials').textContent = initials.toUpperCase();
            }
          } else {
            showToast('Error', result.message || 'Failed to load user profile', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading user profile:', error);
          showToast('Error', 'Failed to load user profile', 'error');
        })
        .getUserProfile();
    }
    
    // Save profile
    function saveProfile(e) {
      e.preventDefault();
      
      const profileData = {
        displayName: document.getElementById('displayName').value,
        jobTitle: document.getElementById('jobTitle').value,
        department: document.getElementById('department').value,
        timezone: document.getElementById('timezone').value,
        bio: document.getElementById('bio').value
      };
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            userProfile = result.profile;
            showToast('Success', 'Profile saved successfully');
          } else {
            showToast('Error', result.message || 'Failed to save profile', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error saving profile:', error);
          showToast('Error', 'Failed to save profile', 'error');
        })
        .saveUserProfile(profileData);
    }
    
    // Handle avatar upload
    function handleAvatarUpload(e) {
      const file = e.target.files[0];
      if (file) {
        // Preview the image
        const reader = new FileReader();
        
        reader.onload = function(e) {
          const avatarImg = document.getElementById('avatarImage');
          avatarImg.src = e.target.result;
          avatarImg.style.display = 'block';
          document.getElementById('avatarInitials').style.display = 'none';
          
          // In a real app, you would upload the image to a server
          // For now, we'll just simulate it
          showLoading();
          
          setTimeout(() => {
            hideLoading();
            showToast('Success', 'Avatar updated successfully');
          }, 1000);
        };
        
        reader.readAsDataURL(file);
      }
    }
    
    // Load notification preferences
    function loadNotificationPreferences() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            const prefs = result.preferences;
            
            // Set email notification toggles
            document.getElementById('taskAssignmentEmail').checked = prefs.taskAssignmentEmail !== false;
            document.getElementById('taskUpdateEmail').checked = prefs.taskUpdateEmail !== false;
                        document.getElementById('actionItemEmail').checked = prefs.actionItemEmail !== false;
            document.getElementById('qaReviewEmail').checked = prefs.qaReviewEmail !== false;
            document.getElementById('weeklyDigestEmail').checked = prefs.weeklyDigestEmail !== false;
            
            // Set in-app notification toggles
            document.getElementById('taskAssignmentInApp').checked = prefs.taskAssignmentInApp !== false;
            document.getElementById('taskUpdateInApp').checked = prefs.taskUpdateInApp !== false;
            document.getElementById('actionItemInApp').checked = prefs.actionItemInApp !== false;
            document.getElementById('qaReviewInApp').checked = prefs.qaReviewInApp !== false;
          } else {
            showToast('Error', result.message || 'Failed to load notification preferences', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading notification preferences:', error);
          showToast('Error', 'Failed to load notification preferences', 'error');
        })
        .getNotificationPreferences();
    }
    
    // Save notification preferences
    function saveNotifications(e) {
      e.preventDefault();
      
      const notificationPrefs = {
        // Email notifications
        taskAssignmentEmail: document.getElementById('taskAssignmentEmail').checked,
        taskUpdateEmail: document.getElementById('taskUpdateEmail').checked,
        actionItemEmail: document.getElementById('actionItemEmail').checked,
        qaReviewEmail: document.getElementById('qaReviewEmail').checked,
        weeklyDigestEmail: document.getElementById('weeklyDigestEmail').checked,
        
        // In-app notifications
        taskAssignmentInApp: document.getElementById('taskAssignmentInApp').checked,
        taskUpdateInApp: document.getElementById('taskUpdateInApp').checked,
        actionItemInApp: document.getElementById('actionItemInApp').checked,
        qaReviewInApp: document.getElementById('qaReviewInApp').checked
      };
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Notification preferences saved successfully');
          } else {
            showToast('Error', result.message || 'Failed to save notification preferences', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error saving notification preferences:', error);
          showToast('Error', 'Failed to save notification preferences', 'error');
        })
        .saveNotificationPreferences(notificationPrefs);
    }
    
    // Load Asana integration
    function loadAsanaIntegration() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            const asanaConfig = result.asanaConfig;
            isConnectedToAsana = asanaConfig.connected || false;
            
            // Update connection status
            updateAsanaConnectionStatus(isConnectedToAsana);
            
            // Populate Asana settings
            if (asanaConfig.apiKey) {
              document.getElementById('asanaApiKey').value = asanaConfig.apiKey;
            }
            
            document.getElementById('asanaAutoSync').checked = asanaConfig.autoSync === true;
            document.getElementById('syncFrequency').value = asanaConfig.syncFrequency || 'hourly';
            document.getElementById('syncFrequency').disabled = !asanaConfig.autoSync;
            
            // If connected, load workspaces
            if (isConnectedToAsana) {
              loadAsanaWorkspaces(asanaConfig.workspaceId);
            }
          } else {
            updateAsanaConnectionStatus(false);
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading Asana integration:', error);
          updateAsanaConnectionStatus(false);
        })
        .getAsanaIntegration();
    }
    
    // Update Asana connection status
    function updateAsanaConnectionStatus(connected) {
      const connectionBadge = document.getElementById('connectionBadge');
      
      if (connected) {
        connectionBadge.innerHTML = '<i class="fas fa-check-circle"></i> Connected';
        connectionBadge.className = 'connection-status connected';
        
        document.getElementById('asanaWorkspace').disabled = false;
        document.getElementById('asanaDefaultProject').disabled = false;
        document.getElementById('syncFrequency').disabled = !document.getElementById('asanaAutoSync').checked;
      } else {
        connectionBadge.innerHTML = '<i class="fas fa-times-circle"></i> Not Connected';
        connectionBadge.className = 'connection-status disconnected';
        
        document.getElementById('asanaWorkspace').disabled = true;
        document.getElementById('asanaDefaultProject').disabled = true;
        document.getElementById('syncFrequency').disabled = true;
      }
    }
    
    // Load Asana workspaces
    function loadAsanaWorkspaces(selectedWorkspaceId) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            asanaWorkspaces = result.workspaces || [];
            
            // Populate workspace dropdown
            const workspaceSelect = document.getElementById('asanaWorkspace');
            workspaceSelect.innerHTML = '<option value="">Select workspace...</option>';
            
            asanaWorkspaces.forEach(workspace => {
              const option = document.createElement('option');
              option.value = workspace.id;
              option.textContent = workspace.name;
              workspaceSelect.appendChild(option);
            });
            
            // Set selected workspace
            if (selectedWorkspaceId) {
              workspaceSelect.value = selectedWorkspaceId;
              loadAsanaProjects(selectedWorkspaceId);
            }
          } else {
            showToast('Error', result.message || 'Failed to load Asana workspaces', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading Asana workspaces:', error);
          showToast('Error', 'Failed to load Asana workspaces', 'error');
        })
        .getAsanaWorkspaces();
    }
    
    // Load Asana projects
    function loadAsanaProjects(workspaceId, selectedProjectId) {
      if (!workspaceId) return;
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            asanaProjects[workspaceId] = result.projects || [];
            
            // Populate projects dropdown
            const projectSelect = document.getElementById('asanaDefaultProject');
            projectSelect.innerHTML = '<option value="">Select project...</option>';
            
            asanaProjects[workspaceId].forEach(project => {
              const option = document.createElement('option');
              option.value = project.id;
              option.textContent = project.name;
              projectSelect.appendChild(option);
            });
            
            // Set selected project
            if (selectedProjectId) {
              projectSelect.value = selectedProjectId;
            }
          } else {
            showToast('Error', result.message || 'Failed to load Asana projects', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading Asana projects:', error);
          showToast('Error', 'Failed to load Asana projects', 'error');
        })
        .getAsanaProjects(workspaceId);
    }
    
    // Toggle Asana API key visibility
    function toggleAsanaKey() {
      const apiKeyInput = document.getElementById('asanaApiKey');
      const toggleIcon = document.getElementById('toggleAsanaKey').querySelector('i');
      
      if (apiKeyInput.type === 'password') {
        apiKeyInput.type = 'text';
        toggleIcon.className = 'fas fa-eye-slash';
      } else {
        apiKeyInput.type = 'password';
        toggleIcon.className = 'fas fa-eye';
      }
    }
    
    // Save Asana settings
    function saveAsanaSettings() {
      const asanaSettings = {
        apiKey: document.getElementById('asanaApiKey').value,
        workspaceId: document.getElementById('asanaWorkspace').value,
        projectId: document.getElementById('asanaDefaultProject').value,
        autoSync: document.getElementById('asanaAutoSync').checked,
        syncFrequency: document.getElementById('syncFrequency').value
      };
      
      if (!asanaSettings.apiKey) {
        showToast('Error', 'Please enter your Asana Personal Access Token', 'error');
        return;
      }
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            isConnectedToAsana = true;
            updateAsanaConnectionStatus(true);
            
            // Load workspaces if connection was successful
            loadAsanaWorkspaces(asanaSettings.workspaceId);
            
            showToast('Success', 'Asana integration configured successfully');
          } else {
            showToast('Error', result.message || 'Failed to save Asana settings', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error saving Asana settings:', error);
          showToast('Error', 'Failed to save Asana settings', 'error');
        })
        .saveAsanaIntegration(asanaSettings);
    }
    
    // Test Asana connection
    function testAsanaConnection() {
      const apiKey = document.getElementById('asanaApiKey').value;
      
      if (!apiKey) {
        showToast('Error', 'Please enter your Asana Personal Access Token', 'error');
        return;
      }
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Asana connection successful');
          } else {
            showToast('Error', result.message || 'Failed to connect to Asana', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error testing Asana connection:', error);
          showToast('Error', 'Failed to connect to Asana', 'error');
        })
        .testAsanaConnection(apiKey);
    }
    
    // Disconnect Asana
    function disconnectAsana() {
      if (confirm('Are you sure you want to disconnect from Asana? Your settings will be saved but sync will stop.')) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(result => {
            hideLoading();
            
            if (result.success) {
              isConnectedToAsana = false;
              updateAsanaConnectionStatus(false);
              
              document.getElementById('asanaWorkspace').innerHTML = '<option value="">Select workspace...</option>';
              document.getElementById('asanaDefaultProject').innerHTML = '<option value="">Select project...</option>';
              
              showToast('Success', 'Asana integration disconnected');
            } else {
              showToast('Error', result.message || 'Failed to disconnect Asana integration', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            console.error('Error disconnecting Asana:', error);
            showToast('Error', 'Failed to disconnect Asana integration', 'error');
          })
          .disconnectAsana();
      }
    }
    
    // Load team lead info
    function loadTeamLeadInfo() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            const teamLeadInfo = result.teamLeadInfo;
            
            document.getElementById('isTeamLead').checked = teamLeadInfo.isTeamLead === true;
            
            if (teamLeadInfo.isTeamLead) {
              document.getElementById('teamLeadInfoSection').style.display = 'block';
              
              document.getElementById('teamName').value = teamLeadInfo.teamName || '';
              document.getElementById('teamSize').value = teamLeadInfo.teamSize || '';
              document.getElementById('teamDepartment').value = teamLeadInfo.teamDepartment || '';
              document.getElementById('managementLevel').value = teamLeadInfo.managementLevel || 'team_lead';
              document.getElementById('managerEmail').value = teamLeadInfo.managerEmail || '';
              document.getElementById('teamDescription').value = teamLeadInfo.teamDescription || '';
              
              document.getElementById('trackProductivity').checked = teamLeadInfo.trackProductivity !== false;
              document.getElementById('trackQuality').checked = teamLeadInfo.trackQuality !== false;
              document.getElementById('trackTaskCompletion').checked = teamLeadInfo.trackTaskCompletion !== false;
              document.getElementById('trackTime').checked = teamLeadInfo.trackTime !== false;
              
              document.getElementById('reportingFrequency').value = teamLeadInfo.reportingFrequency || 'weekly';
            }
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading team lead information:', error);
        })
        .getTeamLeadInfo();
    }
    
    // Save team lead info
    function saveTeamLeadInfo() {
      const isTeamLead = document.getElementById('isTeamLead').checked;
      let teamLeadData = { isTeamLead };
      
      if (isTeamLead) {
        teamLeadData = {
          ...teamLeadData,
          teamName: document.getElementById('teamName').value,
          teamSize: document.getElementById('teamSize').value,
          teamDepartment: document.getElementById('teamDepartment').value,
          managementLevel: document.getElementById('managementLevel').value,
          managerEmail: document.getElementById('managerEmail').value,
          teamDescription: document.getElementById('teamDescription').value,
          trackProductivity: document.getElementById('trackProductivity').checked,
          trackQuality: document.getElementById('trackQuality').checked,
          trackTaskCompletion: document.getElementById('trackTaskCompletion').checked,
          trackTime: document.getElementById('trackTime').checked,
          reportingFrequency: document.getElementById('reportingFrequency').value
        };
      }
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Team lead information saved successfully');
          } else {
            showToast('Error', result.message || 'Failed to save team lead information', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error saving team lead information:', error);
          showToast('Error', 'Failed to save team lead information', 'error');
        })
        .saveTeamLeadInfo(teamLeadData);
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastIcon = toast.querySelector('.toast-icon');
      const toastTitle = toast.querySelector('.toast-title');
      const toastMessage = toast.querySelector('.toast-message');
      
      // Set icon and class based on type
      if (type === 'error') {
        toastIcon.className = 'toast-icon error';
        toastIcon.innerHTML = '<i class="fas fa-exclamation-circle"></i>';
      } else {
        toastIcon.className = 'toast-icon success';
        toastIcon.innerHTML = '<i class="fas fa-check-circle"></i>';
      }
      
      // Set content
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto hide after 5 seconds
      setTimeout(() => {
        toast.classList.remove('visible');
      }, 5000);
    }
  </script>
</body>
</html>






/**
 * 👤 User Preferences Service - Manage user settings and integrations 👤
 * Handles user profiles, notification settings, Asana integration, and team lead info
 */

// User Preferences Service Configuration
const USER_PREFS_CONFIG = {
  SHEETS: {
    USER_PROFILES: 'User Profiles',
    NOTIFICATION_PREFS: 'Notification Preferences',
    ASANA_INTEGRATION: 'Asana Integration',
    TEAM_LEAD_INFO: 'Team Lead Info'
  }
};

/**
 * 🏗️ Initialize user preferences sheets
 * @return {Boolean} Success status
 */
function initializeUserPreferencesSheets() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let created = false;
    
    // Create User Profiles sheet if it doesn't exist
    if (!ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.USER_PROFILES)) {
      const userProfilesSheet = ss.insertSheet(USER_PREFS_CONFIG.SHEETS.USER_PROFILES);
      
      // Set up header row
      const headers = [
        'User Email', 'Name', 'Display Name', 'Job Title', 
        'Department', 'Timezone', 'Bio', 'Avatar URL',
        'Created At', 'Modified At'
      ];
      userProfilesSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      userProfilesSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      userProfilesSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Notification Preferences sheet if it doesn't exist
    if (!ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.NOTIFICATION_PREFS)) {
      const notificationSheet = ss.insertSheet(USER_PREFS_CONFIG.SHEETS.NOTIFICATION_PREFS);
      
      // Set up header row
      const headers = [
        'User Email',
        'Task Assignment Email', 'Task Update Email', 'Action Item Email',
        'QA Review Email', 'Weekly Digest Email',
        'Task Assignment In-App', 'Task Update In-App', 'Action Item In-App',
        'QA Review In-App',
        'Modified At'
      ];
      notificationSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      notificationSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      notificationSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Asana Integration sheet if it doesn't exist
    if (!ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.ASANA_INTEGRATION)) {
      const asanaSheet = ss.insertSheet(USER_PREFS_CONFIG.SHEETS.ASANA_INTEGRATION);
      
      // Set up header row
      const headers = [
        'User Email', 'API Key', 'Connected', 'Workspace ID',
        'Project ID', 'Auto Sync', 'Sync Frequency',
        'Last Synced At', 'Modified At'
      ];
      asanaSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      asanaSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      asanaSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Team Lead Info sheet if it doesn't exist
    if (!ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.TEAM_LEAD_INFO)) {
      const teamLeadSheet = ss.insertSheet(USER_PREFS_CONFIG.SHEETS.TEAM_LEAD_INFO);
      
      // Set up header row
      const headers = [
        'User Email', 'Is Team Lead', 'Team Name', 'Team Size',
        'Team Department', 'Management Level', 'Manager Email',
        'Team Description', 'Track Productivity', 'Track Quality',
        'Track Task Completion', 'Track Time', 'Reporting Frequency',
        'Modified At'
      ];
      teamLeadSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      teamLeadSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      teamLeadSheet.setFrozenRows(1);
      created = true;
    }
    
    return created;
  } catch (error) {
    console.error('Error initializing user preferences sheets:', error);
    logError('initializeUserPreferencesSheets', error);
    return false;
  }
}

/**
 * 👤 Get user profile
 * @return {Object} User profile data
 */
function getUserProfile() {
  try {
    // Initialize sheets if needed
    initializeUserPreferencesSheets();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const userProfilesSheet = ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.USER_PROFILES);
    
    if (!userProfilesSheet) {
      return {
        success: false,
        message: 'User profiles sheet not found'
      };
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all profiles
    const profilesData = userProfilesSheet.getDataRange().getValues();
    const headers = profilesData[0];
    
    const emailIndex = headers.indexOf('User Email');
    const nameIndex = headers.indexOf('Name');
    const displayNameIndex = headers.indexOf('Display Name');
    const jobTitleIndex = headers.indexOf('Job Title');
    const departmentIndex = headers.indexOf('Department');
    const timezoneIndex = headers.indexOf('Timezone');
    const bioIndex = headers.indexOf('Bio');
    const avatarUrlIndex = headers.indexOf('Avatar URL');
    
    // Look for user's profile
    let profile = null;
    
    for (let i = 1; i < profilesData.length; i++) {
      if (profilesData[i][emailIndex] === userEmail) {
        profile = {
          email: userEmail,
          name: profilesData[i][nameIndex],
          displayName: profilesData[i][displayNameIndex],
          jobTitle: profilesData[i][jobTitleIndex],
          department: profilesData[i][departmentIndex],
          timezone: profilesData[i][timezoneIndex],
          bio: profilesData[i][bioIndex],
          avatarUrl: profilesData[i][avatarUrlIndex]
        };
        break;
      }
    }
    
    // If no profile found, create a basic one
    if (!profile) {
      profile = {
        email: userEmail,
        name: getUserNameFromEmail(userEmail),
        displayName: '',
        jobTitle: '',
        department: '',
        timezone: 'UTC',
        bio: '',
        avatarUrl: ''
      };
      
      // Add new user profile row
      const now = new Date();
      userProfilesSheet.appendRow([
        userEmail,
        profile.name,
        profile.displayName,
        profile.jobTitle,
        profile.department,
        profile.timezone,
        profile.bio,
        profile.avatarUrl,
        now,
        now
      ]);
    }
    
    return {
      success: true,
      profile: profile
    };
  } catch (error) {
    console.error('Error getting user profile:', error);
    logError('getUserProfile', error);
    return {
      success: false,
      message: 'Error retrieving user profile: ' + error.toString()
    };
  }
}

/**
 * 👤 Save user profile
 * @param {Object} profileData - Profile data
 * @return {Object} Success status and updated profile
 */
function saveUserProfile(profileData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const userProfilesSheet = ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.USER_PROFILES);
    
    if (!userProfilesSheet) {
      return {
        success: false,
        message: 'User profiles sheet not found'
      };
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all profiles
    const profilesData = userProfilesSheet.getDataRange().getValues();
    const headers = profilesData[0];
    
    const emailIndex = headers.indexOf('User Email');
    const nameIndex = headers.indexOf('Name');
    const displayNameIndex = headers.indexOf('Display Name');
    const jobTitleIndex = headers.indexOf('Job Title');
    const departmentIndex = headers.indexOf('Department');
    const timezoneIndex = headers.indexOf('Timezone');
    const bioIndex = headers.indexOf('Bio');
    const avatarUrlIndex = headers.indexOf('Avatar URL');
    const modifiedAtIndex = headers.indexOf('Modified At');
    
    // Look for user's profile
    let userRow = -1;
    
    for (let i = 1; i < profilesData.length; i++) {
      if (profilesData[i][emailIndex] === userEmail) {
        userRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    const now = new Date();
    
    // If user found, update profile
    if (userRow !== -1) {
      userProfilesSheet.getRange(userRow, displayNameIndex + 1).setValue(profileData.displayName || '');
      userProfilesSheet.getRange(userRow, jobTitleIndex + 1).setValue(profileData.jobTitle || '');
      userProfilesSheet.getRange(userRow, departmentIndex + 1).setValue(profileData.department || '');
      userProfilesSheet.getRange(userRow, timezoneIndex + 1).setValue(profileData.timezone || 'UTC');
      userProfilesSheet.getRange(userRow, bioIndex + 1).setValue(profileData.bio || '');
      userProfilesSheet.getRange(userRow, modifiedAtIndex + 1).setValue(now);
      
      // If avatar URL provided
      if (profileData.avatarUrl) {
        userProfilesSheet.getRange(userRow, avatarUrlIndex + 1).setValue(profileData.avatarUrl);
      }
      
      // Get the name from the sheet (in case it hasn't been set yet)
      const name = userProfilesSheet.getRange(userRow, nameIndex + 1).getValue() || getUserNameFromEmail(userEmail);
      
      // Return updated profile
      return {
        success: true,
        profile: {
          email: userEmail,
          name: name,
          displayName: profileData.displayName || '',
          jobTitle: profileData.jobTitle || '',
          department: profileData.department || '',
          timezone: profileData.timezone || 'UTC',
          bio: profileData.bio || '',
          avatarUrl: profileData.avatarUrl || userProfilesSheet.getRange(userRow, avatarUrlIndex + 1).getValue()
        }
      };
    } else {
      // User not found, create new profile
      const name = getUserNameFromEmail(userEmail);
      
      userProfilesSheet.appendRow([
        userEmail,
        name,
        profileData.displayName || '',
        profileData.jobTitle || '',
        profileData.department || '',
        profileData.timezone || 'UTC',
        profileData.bio || '',
        profileData.avatarUrl || '',
        now,
        now
      ]);
      
      // Return new profile
      return {
        success: true,
        profile: {
          email: userEmail,
          name: name,
          displayName: profileData.displayName || '',
          jobTitle: profileData.jobTitle || '',
          department: profileData.department || '',
          timezone: profileData.timezone || 'UTC',
          bio: profileData.bio || '',
          avatarUrl: profileData.avatarUrl || ''
        }
      };
    }
  } catch (error) {
    console.error('Error saving user profile:', error);
    logError('saveUserProfile', error);
    return {
      success: false,
      message: 'Error saving user profile: ' + error.toString()
    };
  }
}

/**
 * 🔔 Get notification preferences
 * @return {Object} Notification preferences
 */
function getNotificationPreferences() {
  try {
    // Initialize sheets if needed
    initializeUserPreferencesSheets();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const notificationSheet = ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.NOTIFICATION_PREFS);
    
    if (!notificationSheet) {
      return {
        success: false,
        message: 'Notification preferences sheet not found'
      };
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all notification preferences
    const prefsData = notificationSheet.getDataRange().getValues();
    const headers = prefsData[0];
    
    const emailIndex = headers.indexOf('User Email');
    const taskAssignmentEmailIndex = headers.indexOf('Task Assignment Email');
    const taskUpdateEmailIndex = headers.indexOf('Task Update Email');
    const actionItemEmailIndex = headers.indexOf('Action Item Email');
    const qaReviewEmailIndex = headers.indexOf('QA Review Email');
    const weeklyDigestEmailIndex = headers.indexOf('Weekly Digest Email');
    const taskAssignmentInAppIndex = headers.indexOf('Task Assignment In-App');
    const taskUpdateInAppIndex = headers.indexOf('Task Update In-App');
    const actionItemInAppIndex = headers.indexOf('Action Item In-App');
    const qaReviewInAppIndex = headers.indexOf('QA Review In-App');
    
    // Look for user's preferences
    let preferences = null;
    
    for (let i = 1; i < prefsData.length; i++) {
      if (prefsData[i][emailIndex] === userEmail) {
        preferences = {
          taskAssignmentEmail: prefsData[i][taskAssignmentEmailIndex] === true,
          taskUpdateEmail: prefsData[i][taskUpdateEmailIndex] === true,
          actionItemEmail: prefsData[i][actionItemEmailIndex] === true,
          qaReviewEmail: prefsData[i][qaReviewEmailIndex] === true,
          weeklyDigestEmail: prefsData[i][weeklyDigestEmailIndex] === true,
          taskAssignmentInApp: prefsData[i][taskAssignmentInAppIndex] === true,
          taskUpdateInApp: prefsData[i][taskUpdateInAppIndex] === true,
          actionItemInApp: prefsData[i][actionItemInAppIndex] === true,
          qaReviewInApp: prefsData[i][qaReviewInAppIndex] === true
        };
        break;
      }
    }
    
    // If no preferences found, create default ones
    if (!preferences) {
      preferences = {
        taskAssignmentEmail: true,
        taskUpdateEmail: true,
        actionItemEmail: true,
        qaReviewEmail: true,
        weeklyDigestEmail: true,
        taskAssignmentInApp: true,
        taskUpdateInApp: true,
        actionItemInApp: true,
        qaReviewInApp: true
      };
      
      // Add new preferences row
      notificationSheet.appendRow([
        userEmail,
        preferences.taskAssignmentEmail,
        preferences.taskUpdateEmail,
        preferences.actionItemEmail,
        preferences.qaReviewEmail,
        preferences.weeklyDigestEmail,
        preferences.taskAssignmentInApp,
        preferences.taskUpdateInApp,
        preferences.actionItemInApp,
        preferences.qaReviewInApp,
        new Date()
      ]);
    }
    
    return {
      success: true,
      preferences: preferences
    };
  } catch (error) {
    console.error('Error getting notification preferences:', error);
    logError('getNotificationPreferences', error);
    return {
      success: false,
      message: 'Error retrieving notification preferences: ' + error.toString()
    };
  }
}

/**
 * 🔔 Save notification preferences
 * @param {Object} preferences - Notification preferences
 * @return {Object} Success status
 */
function saveNotificationPreferences(preferences) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const notificationSheet = ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.NOTIFICATION_PREFS);
    
    if (!notificationSheet) {
      return {
        success: false,
        message: 'Notification preferences sheet not found'
      };
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all notification preferences
    const prefsData = notificationSheet.getDataRange().getValues();
    const headers = prefsData[0];
    
    const emailIndex = headers.indexOf('User Email');
    const taskAssignmentEmailIndex = headers.indexOf('Task Assignment Email');
    const taskUpdateEmailIndex = headers.indexOf('Task Update Email');
    const actionItemEmailIndex = headers.indexOf('Action Item Email');
    const qaReviewEmailIndex = headers.indexOf('QA Review Email');
    const weeklyDigestEmailIndex = headers.indexOf('Weekly Digest Email');
    const taskAssignmentInAppIndex = headers.indexOf('Task Assignment In-App');
    const taskUpdateInAppIndex = headers.indexOf('Task Update In-App');
    const actionItemInAppIndex = headers.indexOf('Action Item In-App');
    const qaReviewInAppIndex = headers.indexOf('QA Review In-App');
    const modifiedAtIndex = headers.indexOf('Modified At');
    
    // Look for user's preferences
    let userRow = -1;
    
    for (let i = 1; i < prefsData.length; i++) {
      if (prefsData[i][emailIndex] === userEmail) {
        userRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    const now = new Date();
    
    // If user found, update preferences
    if (userRow !== -1) {
      notificationSheet.getRange(userRow, taskAssignmentEmailIndex + 1).setValue(preferences.taskAssignmentEmail === true);
      notificationSheet.getRange(userRow, taskUpdateEmailIndex + 1).setValue(preferences.taskUpdateEmail === true);
      notificationSheet.getRange(userRow, actionItemEmailIndex + 1).setValue(preferences.actionItemEmail === true);
      notificationSheet.getRange(userRow, qaReviewEmailIndex + 1).setValue(preferences.qaReviewEmail === true);
      notificationSheet.getRange(userRow, weeklyDigestEmailIndex + 1).setValue(preferences.weeklyDigestEmail === true);
      notificationSheet.getRange(userRow, taskAssignmentInAppIndex + 1).setValue(preferences.taskAssignmentInApp === true);
      notificationSheet.getRange(userRow, taskUpdateInAppIndex + 1).setValue(preferences.taskUpdateInApp === true);
      notificationSheet.getRange(userRow, actionItemInAppIndex + 1).setValue(preferences.actionItemInApp === true);
      notificationSheet.getRange(userRow, qaReviewInAppIndex + 1).setValue(preferences.qaReviewInApp === true);
      notificationSheet.getRange(userRow, modifiedAtIndex + 1).setValue(now);
    } else {
      // User not found, create new preferences
      notificationSheet.appendRow([
        userEmail,
        preferences.taskAssignmentEmail === true,
        preferences.taskUpdateEmail === true,
        preferences.actionItemEmail === true,
        preferences.qaReviewEmail === true,
        preferences.weeklyDigestEmail === true,
        preferences.taskAssignmentInApp === true,
        preferences.taskUpdateInApp === true,
        preferences.actionItemInApp === true,
        preferences.qaReviewInApp === true,
        now
      ]);
    }
    
    return {
      success: true
    };
  } catch (error) {
    console.error('Error saving notification preferences:', error);
    logError('saveNotificationPreferences', error);
    return {
      success: false,
      message: 'Error saving notification preferences: ' + error.toString()
    };
  }
}

/**
 * 🔌 Get Asana integration
 * @return {Object} Asana integration config
 */
function getAsanaIntegration() {
  try {
    // Initialize sheets if needed
    initializeUserPreferencesSheets();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const asanaSheet = ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.ASANA_INTEGRATION);
    
    if (!asanaSheet) {
      return {
        success: false,
        message: 'Asana integration sheet not found'
      };
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all integration configs
    const asanaData = asanaSheet.getDataRange().getValues();
    const headers = asanaData[0];
    
    const emailIndex = headers.indexOf('User Email');
    const apiKeyIndex = headers.indexOf('API Key');
    const connectedIndex = headers.indexOf('Connected');
    const workspaceIdIndex = headers.indexOf('Workspace ID');
    const projectIdIndex = headers.indexOf('Project ID');
    const autoSyncIndex = headers.indexOf('Auto Sync');
    const syncFrequencyIndex = headers.indexOf('Sync Frequency');
    const lastSyncedAtIndex = headers.indexOf('Last Synced At');
    
    // Look for user's config
    let asanaConfig = null;
    
    for (let i = 1; i < asanaData.length; i++) {
      if (asanaData[i][emailIndex] === userEmail) {
        asanaConfig = {
          apiKey: asanaData[i][apiKeyIndex],
          connected: asanaData[i][connectedIndex] === true,
          workspaceId: asanaData[i][workspaceIdIndex],
          projectId: asanaData[i][projectIdIndex],
          autoSync: asanaData[i][autoSyncIndex] === true,
          syncFrequency: asanaData[i][syncFrequencyIndex],
          lastSyncedAt: asanaData[i][lastSyncedAtIndex]
        };
        break;
      }
    }
    
    // If no config found, return empty config
    if (!asanaConfig) {
      asanaConfig = {
        apiKey: '',
        connected: false,
        workspaceId: '',
        projectId: '',
        autoSync: false,
        syncFrequency: 'hourly',
        lastSyncedAt: null
      };
    }
    
    return {
      success: true,
      asanaConfig: asanaConfig
    };
  } catch (error) {
    console.error('Error getting Asana integration:', error);
    logError('getAsanaIntegration', error);
    return {
      success: false,
      message: 'Error retrieving Asana integration: ' + error.toString()
    };
  }
}

/**
 * 🔌 Save Asana integration
 * @param {Object} asanaSettings - Asana integration settings
 * @return {Object} Success status
 */
function saveAsanaIntegration(asanaSettings) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const asanaSheet = ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.ASANA_INTEGRATION);
    
    if (!asanaSheet) {
      return {
        success: false,
        message: 'Asana integration sheet not found'
      };
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all integration configs
    const asanaData = asanaSheet.getDataRange().getValues();
    const headers = asanaData[0];
    
    const emailIndex = headers.indexOf('User Email');
    const apiKeyIndex = headers.indexOf('API Key');
    const connectedIndex = headers.indexOf('Connected');
    const workspaceIdIndex = headers.indexOf('Workspace ID');
    const projectIdIndex = headers.indexOf('Project ID');
    const autoSyncIndex = headers.indexOf('Auto Sync');
    const syncFrequencyIndex = headers.indexOf('Sync Frequency');
    const lastSyncedAtIndex = headers.indexOf('Last Synced At');
    const modifiedAtIndex = headers.indexOf('Modified At');
    
    // Look for user's config
    let userRow = -1;
    
    for (let i = 1; i < asanaData.length; i++) {
      if (asanaData[i][emailIndex] === userEmail) {
        userRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    const now = new Date();
    
    // Test the API key if provided
    let connected = false;
    if (asanaSettings.apiKey) {
      const testResult = testAsanaConnection(asanaSettings.apiKey);
      connected = testResult.success;
    }
    
    // If user found, update config
    if (userRow !== -1) {
      asanaSheet.getRange(userRow, apiKeyIndex + 1).setValue(asanaSettings.apiKey || '');
      asanaSheet.getRange(userRow, connectedIndex + 1).setValue(connected);
      asanaSheet.getRange(userRow, workspaceIdIndex + 1).setValue(asanaSettings.workspaceId || '');
      asanaSheet.getRange(userRow, projectIdIndex + 1).setValue(asanaSettings.projectId || '');
      asanaSheet.getRange(userRow, autoSyncIndex + 1).setValue(asanaSettings.autoSync === true);
      asanaSheet.getRange(userRow, syncFrequencyIndex + 1).setValue(asanaSettings.syncFrequency || 'hourly');
      asanaSheet.getRange(userRow, modifiedAtIndex + 1).setValue(now);
    } else {
      // User not found, create new config
      asanaSheet.appendRow([
        userEmail,
        asanaSettings.apiKey || '',
        connected,
        asanaSettings.workspaceId || '',
        asanaSettings.projectId || '',
        asanaSettings.autoSync === true,
        asanaSettings.syncFrequency || 'hourly',
        null,
        now
      ]);
    }
    
    return {
      success: true
    };
  } catch (error) {
    console.error('Error saving Asana integration:', error);
    logError('saveAsanaIntegration', error);
    return {
      success: false,
      message: 'Error saving Asana integration: ' + error.toString()
    };
  }
}

/**
 * 🔌 Test Asana connection
 * @param {String} apiKey - Asana API key
 * @return {Object} Success status
 */
function testAsanaConnection(apiKey) {
  try {
    if (!apiKey) {
      return {
        success: false,
        message: 'API key is required'
      };
    }
    
    // Set up HTTP request to Asana API
    const options = {
      'method': 'get',
      'headers': {
        'Authorization': 'Bearer ' + apiKey
      },
      'muteHttpExceptions': true
    };
    
    // Test with a simple API call to get user information
    const response = UrlFetchApp.fetch('https://app.asana.com/api/1.0/users/me', options);
    const responseCode = response.getResponseCode();
    const responseBody = JSON.parse(response.getContentText());
    
    if (responseCode === 200 && responseBody.data) {
      return {
        success: true,
        userData: responseBody.data
      };
    } else {
      return {
        success: false,
        message: responseBody.errors ? responseBody.errors[0].message : 'Failed to connect to Asana'
      };
    }
  } catch (error) {
    console.error('Error testing Asana connection:', error);
    logError('testAsanaConnection', error);
    return {
      success: false,
      message: 'Error testing Asana connection: ' + error.toString()
    };
  }
}

/**
 * 🔌 Get Asana workspaces
 * @return {Object} Workspaces list
 */
function getAsanaWorkspaces() {
  try {
    // Get current Asana integration settings
    const integration = getAsanaIntegration();
    
    if (!integration.success || !integration.asanaConfig.apiKey) {
      return {
        success: false,
        message: 'Asana API key not found'
      };
    }
    
    // Set up HTTP request to Asana API
    const options = {
      'method': 'get',
      'headers': {
        'Authorization': 'Bearer ' + integration.asanaConfig.apiKey
      },
      'muteHttpExceptions': true
    };
    
    // Call Asana API to get workspaces
    const response = UrlFetchApp.fetch('https://app.asana.com/api/1.0/workspaces', options);
    const responseCode = response.getResponseCode();
    const responseBody = JSON.parse(response.getContentText());
    
    if (responseCode === 200 && responseBody.data) {
      return {
        success: true,
        workspaces: responseBody.data.map(workspace => ({
          id: workspace.gid,
          name: workspace.name
        }))
      };
    } else {
      return {
        success: false,
        message: responseBody.errors ? responseBody.errors[0].message : 'Failed to get Asana workspaces'
      };
    }
  } catch (error) {
    console.error('Error getting Asana workspaces:', error);
    logError('getAsanaWorkspaces', error);
    return {
      success: false,
      message: 'Error getting Asana workspaces: ' + error.toString()
    };
  }
}

/**
 * 🔌 Get Asana projects
 * @param {String} workspaceId - Asana workspace ID
 * @return {Object} Projects list
 */
function getAsanaProjects(workspaceId) {
  try {
    if (!workspaceId) {
      return {
        success: false,
        message: 'Workspace ID is required'
      };
    }
    
    // Get current Asana integration settings
    const integration = getAsanaIntegration();
    
    if (!integration.success || !integration.asanaConfig.apiKey) {
      return {
        success: false,
        message: 'Asana API key not found'
      };
    }
    
    // Set up HTTP request to Asana API
    const options = {
      'method': 'get',
      'headers': {
        'Authorization': 'Bearer ' + integration.asanaConfig.apiKey
      },
      'muteHttpExceptions': true
    };
    
    // Call Asana API to get projects in the workspace
    const response = UrlFetchApp.fetch(`https://app.asana.com/api/1.0/workspaces/${workspaceId}/projects`, options);
    const responseCode = response.getResponseCode();
    const responseBody = JSON.parse(response.getContentText());
    
    if (responseCode === 200 && responseBody.data) {
      return {
        success: true,
        projects: responseBody.data.map(project => ({
          id: project.gid,
          name: project.name
        }))
      };
    } else {
      return {
        success: false,
        message: responseBody.errors ? responseBody.errors[0].message : 'Failed to get Asana projects'
      };
    }
  } catch (error) {
    console.error('Error getting Asana projects:', error);
    logError('getAsanaProjects', error);
    return {
      success: false,
      message: 'Error getting Asana projects: ' + error.toString()
    };
  }
}

/**
 * 🔌 Disconnect Asana
 * @return {Object} Success status
 */
function disconnectAsana() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const asanaSheet = ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.ASANA_INTEGRATION);
    
    if (!asanaSheet) {
      return {
        success: false,
        message: 'Asana integration sheet not found'
      };
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all integration configs
    const asanaData = asanaSheet.getDataRange().getValues();
    const headers = asanaData[0];
    
    const emailIndex = headers.indexOf('User Email');
    const connectedIndex = headers.indexOf('Connected');
    const modifiedAtIndex = headers.indexOf('Modified At');
    
    // Look for user's config
    let userRow = -1;
    
    for (let i = 1; i < asanaData.length; i++) {
      if (asanaData[i][emailIndex] === userEmail) {
        userRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    // If user found, disconnect
    if (userRow !== -1) {
      asanaSheet.getRange(userRow, connectedIndex + 1).setValue(false);
      asanaSheet.getRange(userRow, modifiedAtIndex + 1).setValue(new Date());
      
      return {
        success: true
      };
    } else {
      return {
        success: false,
        message: 'Asana integration not found for user'
      };
    }
  } catch (error) {
    console.error('Error disconnecting Asana:', error);
    logError('disconnectAsana', error);
    return {
      success: false,
      message: 'Error disconnecting Asana: ' + error.toString()
    };
  }
}

/**
 * 👨‍💼 Get team lead info
 * @return {Object} Team lead information
 */
function getTeamLeadInfo() {
  try {
    // Initialize sheets if needed
    initializeUserPreferencesSheets();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const teamLeadSheet = ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.TEAM_LEAD_INFO);
    
    if (!teamLeadSheet) {
      return {
        success: false,
        message: 'Team lead info sheet not found'
      };
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all team lead info
    const teamLeadData = teamLeadSheet.getDataRange().getValues();
    const headers = teamLeadData[0];
    
    const emailIndex = headers.indexOf('User Email');
    const isTeamLeadIndex = headers.indexOf('Is Team Lead');
    const teamNameIndex = headers.indexOf('Team Name');
    const teamSizeIndex = headers.indexOf('Team Size');
    const teamDepartmentIndex = headers.indexOf('Team Department');
    const managementLevelIndex = headers.indexOf('Management Level');
    const managerEmailIndex = headers.indexOf('Manager Email');
    const teamDescriptionIndex = headers.indexOf('Team Description');
    const trackProductivityIndex = headers.indexOf('Track Productivity');
    const trackQualityIndex = headers.indexOf('Track Quality');
    const trackTaskCompletionIndex = headers.indexOf('Track Task Completion');
    const trackTimeIndex = headers.indexOf('Track Time');
    const reportingFrequencyIndex = headers.indexOf('Reporting Frequency');
    
    // Look for user's team lead info
    let teamLeadInfo = null;
    
    for (let i = 1; i < teamLeadData.length; i++) {
      if (teamLeadData[i][emailIndex] === userEmail) {
        teamLeadInfo = {
          isTeamLead: teamLeadData[i][isTeamLeadIndex] === true,
          teamName: teamLeadData[i][teamNameIndex],
          teamSize: teamLeadData[i][teamSizeIndex],
          teamDepartment: teamLeadData[i][teamDepartmentIndex],
          managementLevel: teamLeadData[i][managementLevelIndex],
          managerEmail: teamLeadData[i][managerEmailIndex],
          teamDescription: teamLeadData[i][teamDescriptionIndex],
          trackProductivity: teamLeadData[i][trackProductivityIndex] === true,
          trackQuality: teamLeadData[i][trackQualityIndex] === true,
          trackTaskCompletion: teamLeadData[i][trackTaskCompletionIndex] === true,
          trackTime: teamLeadData[i][trackTimeIndex] === true,
          reportingFrequency: teamLeadData[i][reportingFrequencyIndex]
        };
        break;
      }
    }
    
    // If no team lead info found, return default
    if (!teamLeadInfo) {
      teamLeadInfo = {
        isTeamLead: false,
        teamName: '',
        teamSize: '',
        teamDepartment: '',
        managementLevel: 'team_lead',
        managerEmail: '',
        teamDescription: '',
        trackProductivity: true,
        trackQuality: true,
        trackTaskCompletion: true,
        trackTime: true,
        reportingFrequency: 'weekly'
      };
    }
    
    return {
      success: true,
      teamLeadInfo: teamLeadInfo
    };
  } catch (error) {
    console.error('Error getting team lead info:', error);
    logError('getTeamLeadInfo', error);
    return {
      success: false,
      message: 'Error retrieving team lead info: ' + error.toString()
    };
  }
}

/**
 * 👨‍💼 Save team lead info
 * @param {Object} teamLeadData - Team lead data
 * @return {Object} Success status
 */
function saveTeamLeadInfo(teamLeadData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const teamLeadSheet = ss.getSheetByName(USER_PREFS_CONFIG.SHEETS.TEAM_LEAD_INFO);
    
    if (!teamLeadSheet) {
      return {
        success: false,
        message: 'Team lead info sheet not found'
      };
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all team lead info
    const teamLeadSheetData = teamLeadSheet.getDataRange().getValues();
    const headers = teamLeadSheetData[0];
    
    const emailIndex = headers.indexOf('User Email');
    const isTeamLeadIndex = headers.indexOf('Is Team Lead');
    const teamNameIndex = headers.indexOf('Team Name');
    const teamSizeIndex = headers.indexOf('Team Size');
    const teamDepartmentIndex = headers.indexOf('Team Department');
    const managementLevelIndex = headers.indexOf('Management Level');
    const managerEmailIndex = headers.indexOf('Manager Email');
    const teamDescriptionIndex = headers.indexOf('Team Description');
    const trackProductivityIndex = headers.indexOf('Track Productivity');
    const trackQualityIndex = headers.indexOf('Track Quality');
    const trackTaskCompletionIndex = headers.indexOf('Track Task Completion');
    const trackTimeIndex = headers.indexOf('Track Time');
    const reportingFrequencyIndex = headers.indexOf('Reporting Frequency');
    const modifiedAtIndex = headers.indexOf('Modified At');
    
    // Look for user's team lead info
    let userRow = -1;
    
    for (let i = 1; i < teamLeadSheetData.length; i++) {
      if (teamLeadSheetData[i][emailIndex] === userEmail) {
        userRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    const now = new Date();
    
    // If user found, update team lead info
    if (userRow !== -1) {
      teamLeadSheet.getRange(userRow, isTeamLeadIndex + 1).setValue(teamLeadData.isTeamLead === true);
      
      if (teamLeadData.isTeamLead) {
        teamLeadSheet.getRange(userRow, teamNameIndex + 1).setValue(teamLeadData.teamName || '');
        teamLeadSheet.getRange(userRow, teamSizeIndex + 1).setValue(teamLeadData.teamSize || '');
        teamLeadSheet.getRange(userRow, teamDepartmentIndex + 1).setValue(teamLeadData.teamDepartment || '');
        teamLeadSheet.getRange(userRow, managementLevelIndex + 1).setValue(teamLeadData.managementLevel || 'team_lead');
        teamLeadSheet.getRange(userRow, managerEmailIndex + 1).setValue(teamLeadData.managerEmail || '');
        teamLeadSheet.getRange(userRow, teamDescriptionIndex + 1).setValue(teamLeadData.teamDescription || '');
        teamLeadSheet.getRange(userRow, trackProductivityIndex + 1).setValue(teamLeadData.trackProductivity === true);
        teamLeadSheet.getRange(userRow, trackQualityIndex + 1).setValue(teamLeadData.trackQuality === true);
        teamLeadSheet.getRange(userRow, trackTaskCompletionIndex + 1).setValue(teamLeadData.trackTaskCompletion === true);
        teamLeadSheet.getRange(userRow, trackTimeIndex + 1).setValue(teamLeadData.trackTime === true);
        teamLeadSheet.getRange(userRow, reportingFrequencyIndex + 1).setValue(teamLeadData.reportingFrequency || 'weekly');
      }
      
      teamLeadSheet.getRange(userRow, modifiedAtIndex + 1).setValue(now);
    } else {
      // User not found, create new team lead info
      const rowData = [userEmail, teamLeadData.isTeamLead === true];
      
      if (teamLeadData.isTeamLead) {
        rowData.push(
          teamLeadData.teamName || '',
          teamLeadData.teamSize || '',
          teamLeadData.teamDepartment || '',
          teamLeadData.managementLevel || 'team_lead',
          teamLeadData.managerEmail || '',
          teamLeadData.teamDescription || '',
          teamLeadData.trackProductivity === true,
          teamLeadData.trackQuality === true,
          teamLeadData.trackTaskCompletion === true,
          teamLeadData.trackTime === true,
          teamLeadData.reportingFrequency || 'weekly'
        );
      } else {
        rowData.push(
          '', '', '', 'team_lead', '', '',
          true, true, true, true, 'weekly'
        );
      }
      
      rowData.push(now);
      teamLeadSheet.appendRow(rowData);
    }
    
    return {
      success: true
    };
  } catch (error) {
    console.error('Error saving team lead info:', error);
    logError('saveTeamLeadInfo', error);
    return {
      success: false,
      message: 'Error saving team lead info: ' + error.toString()
    };
  }
}

/**
 * 🧩 Helper function to extract user name from email
 * @param {String} email - User email address
 * @return {String} User name
 */
function getUserNameFromEmail(email) {
  if (!email) return '';
  
  // Extract name part before @ symbol
  const namePart = email.split('@')[0];
  
  // Replace dots and underscores with spaces
  let name = namePart.replace(/[._]/g, ' ');
  
  // Capitalize each word
  name = name.replace(/\b\w/g, l => l.toUpperCase());
  
  return name;
}








<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>System Settings</title>
  
  <!-- Inter Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  
  <!-- Manrope Font for Headings -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@600;700;800&display=swap">
  
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    :root {
      /* Base colors palette */
      --primary-color: #5540af;
      --primary-light: #6e5cb9;
      --primary-dark: #3c2e85;
      --primary-gradient: linear-gradient(135deg, #5540af, #4d61d8);
      --secondary-color: #38bdf8;
      --secondary-gradient: linear-gradient(135deg, #38bdf8, #0ea5e9);
      --accent-color: #fb7185;
      --accent-gradient: linear-gradient(135deg, #fb7185, #e11d48);
      
      /* Semantic colors */
      --success-color: #10b981;
      --success-light: rgba(16, 185, 129, 0.1);
      --warning-color: #f59e0b;
      --warning-light: rgba(245, 158, 11, 0.1);
      --danger-color: #ef4444;
      --danger-light: rgba(239, 68, 68, 0.1);
      --info-color: #3b82f6;
      --info-light: rgba(59, 130, 246, 0.1);
      
      /* Neutrals */
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --text-tertiary: #64748b;
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-tertiary: #e2e8f0;
      --border-light: #e2e8f0;
      --border-medium: #cbd5e1;
      
      /* Shadows */
      --shadow-sm: 0 1px 3px rgba(15, 23, 42, 0.1), 0 1px 2px rgba(15, 23, 42, 0.06);
      --shadow-md: 0 4px 6px -1px rgba(15, 23, 42, 0.1), 0 2px 4px -1px rgba(15, 23, 42, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(15, 23, 42, 0.1), 0 4px 6px -2px rgba(15, 23, 42, 0.05);
      
      /* Border radius */
      --radius-sm: 6px;
      --radius-md: 10px;
      --radius-lg: 16px;
      
      /* Transitions */
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
      --transition-slow: 0.35s cubic-bezier(0.65, 0, 0.35, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    html, body {
      height: 100%;
      color: var(--text-primary);
      background-color: var(--bg-primary);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      font-size: 14px;
    }
    
    .container {
      max-width: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      background: var(--primary-gradient);
      color: white;
      padding: 24px 32px;
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(35deg);
      pointer-events: none;
    }
    
    .header-content {
      position: relative;
      z-index: 2;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-title {
      font-family: 'Manrope', sans-serif;
      font-size: 24px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .header-subtitle {
      margin-top: 4px;
      opacity: 0.9;
    }
    
    .content {
      flex: 1;
      padding: 32px;
      max-width: 1000px;
      margin: 0 auto;
      width: 100%;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      margin-bottom: 24px;
      overflow: hidden;
    }
    
    .card-header {
      padding: 20px 24px;
      border-bottom: 1px solid var(--border-light);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-weight: 600;
      font-size: 18px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .card-title i {
      color: var(--primary-color);
    }
    
    .card-content {
      padding: 24px;
    }
    
    .tabs {
      display: flex;
      border-bottom: 1px solid var(--border-light);
      overflow-x: auto;
      padding-bottom: 1px;
    }
    
    .tab {
      padding: 12px 20px;
      font-weight: 500;
      white-space: nowrap;
      cursor: pointer;
      color: var(--text-secondary);
      position: relative;
    }
    
    .tab:hover {
      color: var(--primary-color);
    }
    
    .tab.active {
      color: var(--primary-color);
    }
    
    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      right: 0;
      height: 2px;
      background-color: var(--primary-color);
    }
    
    .tab-content {
      display: none;
      padding: 24px 0;
    }
    
    .tab-content.active {
      display: block;
      animation: fadeIn 0.3s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 16px;
      border-radius: var(--radius-md);
      font-weight: 500;
      transition: all var(--transition-fast);
      cursor: pointer;
      gap: 8px;
      border: none;
    }
    
    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(85, 64, 175, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(85, 64, 175, 0.4);
    }
    
    .btn-secondary {
      background-color: white;
      color: var(--text-secondary);
      border: 1px solid var(--border-medium);
    }
    
    .btn-secondary:hover {
      background-color: var(--bg-secondary);
    }
    
    .btn-danger {
      background: var(--accent-gradient);
      color: white;
      box-shadow: 0 2px 5px rgba(239, 68, 68, 0.3);
    }
    
    .btn-danger:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(239, 68, 68, 0.4);
    }
    
    .btn-success {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      box-shadow: 0 2px 5px rgba(16, 185, 129, 0.3);
    }
    
    .btn-success:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(16, 185, 129, 0.4);
    }
    
    .btn-info {
      background: linear-gradient(135deg, #3b82f6, #2563eb);
      color: white;
      box-shadow: 0 2px 5px rgba(59, 130, 246, 0.3);
    }
    
    .btn-info:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(59, 130, 246, 0.4);
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: var(--text-secondary);
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border-medium);
      border-radius: var(--radius-md);
      font-size: 14px;
      background-color: white;
      color: var(--text-primary);
      transition: border-color var(--transition-fast);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(85, 64, 175, 0.1);
    }
    
    textarea.form-control {
      resize: vertical;
      min-height: 100px;
    }
    
    .form-hint {
      margin-top: 6px;
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .form-group.inline {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .form-group.inline .form-label {
      margin-bottom: 0;
      min-width: 120px;
    }
    
    .setting-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 12px 0;
      border-bottom: 1px solid var(--border-light);
    }
    
    .setting-row:last-child {
      border-bottom: none;
    }
    
    .setting-label {
      font-weight: 500;
    }
    
    .setting-value {
      color: var(--text-secondary);
    }
    
    .setting-description {
      font-size: 13px;
      color: var(--text-tertiary);
      margin-top: 2px;
    }
    
    .setting-controls {
      display: flex;
      gap: 8px;
      align-items: center;
    }
    
    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 44px;
      height: 24px;
      margin-left: 8px;
    }
    
    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--border-medium);
      transition: var(--transition-fast);
      border-radius: 24px;
    }
    
    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: var(--transition-fast);
      border-radius: 50%;
    }
    
    input:checked + .toggle-slider {
      background-color: var(--primary-color);
    }
    
    input:focus + .toggle-slider {
      box-shadow: 0 0 1px var(--primary-color);
    }
    
    input:checked + .toggle-slider:before {
      transform: translateX(20px);
    }
    
    /* Status indicators */
    .status-indicator {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      font-size: 13px;
      font-weight: 500;
      padding: 4px 10px;
      border-radius: 12px;
    }
    
    .status-indicator.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .status-indicator.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .status-indicator.warning {
      background-color: var(--warning-light);
      color: var(--warning-color);
    }
    
    .status-indicator.info {
      background-color: var(--info-light);
      color: var(--info-color);
    }
    
    /* Sheet validation table */
    .validation-table {
      width: 100%;
      border-collapse: collapse;
    }
    
    .validation-table th,
    .validation-table td {
      padding: 12px 16px;
      text-align: left;
      border-bottom: 1px solid var(--border-light);
    }
    
    .validation-table th {
      font-weight: 600;
      background-color: var(--bg-secondary);
    }
    
    .validation-table tr:last-child td {
      border-bottom: none;
    }
    
    .validation-table tr:hover td {
      background-color: var(--bg-secondary);
    }
    
    /* HTML validation */
    .html-validation-item {
      padding: 12px 16px;
      border-radius: var(--radius-md);
      margin-bottom: 12px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: var(--bg-secondary);
    }
    
    .html-validation-item:last-child {
      margin-bottom: 0;
    }
    
    .html-validation-item .html-name {
      font-weight: 500;
    }
    
    /* Progress indicator */
    .progress-bar {
      height: 6px;
      background-color: var(--bg-tertiary);
      border-radius: 3px;
      overflow: hidden;
      margin-top: 8px;
    }
    
    .progress-value {
      height: 100%;
      background-color: var(--primary-color);
      border-radius: 3px;
      transition: width 0.6s ease;
    }
    
    .state-progress {
      display: flex;
      align-items: center;
      gap: 12px;
      margin: 32px 0;
    }
    
    .state-step {
      flex: 1;
      position: relative;
    }
    
    .state-dot {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background-color: var(--bg-tertiary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--text-tertiary);
      font-size: 14px;
      font-weight: 600;
      position: relative;
      z-index: 2;
    }
    
    .state-step.active .state-dot {
      background-color: var(--primary-color);
      color: white;
    }
    
    .state-step.completed .state-dot {
      background-color: var(--success-color);
      color: white;
    }
    
    .state-step.completed .state-dot i {
      font-size: 12px;
    }
    
    .state-line {
      position: absolute;
      top: 12px;
      left: 24px;
      right: 0;
      height: 2px;
      background-color: var(--bg-tertiary);
    }
    
    .state-step:last-child .state-line {
      display: none;
    }
    
    .state-step.completed .state-line {
      background-color: var(--success-color);
    }
    
    .state-label {
      font-size: 12px;
      font-weight: 500;
      color: var(--text-tertiary);
      margin-top: 8px;
      text-align: center;
    }
    
    .state-step.active .state-label {
      color: var(--primary-color);
    }
    
    .state-step.completed .state-label {
      color: var(--success-color);
    }
    
    /* Notification */
    .notification {
      padding: 16px;
      border-radius: var(--radius-md);
      margin-bottom: 16px;
      display: flex;
      align-items: flex-start;
      gap: 16px;
    }
    
    .notification.info {
      background-color: var(--info-light);
      border-left: 4px solid var(--info-color);
    }
    
    .notification.warning {
      background-color: var(--warning-light);
      border-left: 4px solid var(--warning-color);
    }
    
    .notification.success {
      background-color: var(--success-light);
      border-left: 4px solid var(--success-color);
    }
    
    .notification.error {
      background-color: var(--danger-light);
      border-left: 4px solid var(--danger-color);
    }
    
    .notification-icon {
      font-size: 20px;
      color: inherit;
    }
    
    .notification-info .notification-icon {
      color: var(--info-color);
    }
    
    .notification-warning .notification-icon {
      color: var(--warning-color);
    }
    
    .notification-success .notification-icon {
      color: var(--success-color);
    }
    
    .notification-error .notification-icon {
      color: var(--danger-color);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .notification-message {
      font-size: 14px;
    }
    
    /* System info styling */
    .system-info-item {
      margin-bottom: 12px;
    }
    
    .system-info-label {
      font-weight: 500;
      margin-bottom: 4px;
    }
    
    .system-info-value {
      padding: 8px 12px;
      background-color: var(--bg-secondary);
      border-radius: var(--radius-md);
      font-family: monospace;
      font-size: 13px;
      word-break: break-all;
    }
    
    /* Backup and Restore */
    .backup-row {
      display: flex;
      align-items: center;
      gap: 16px;
      padding: 12px 0;
      border-bottom: 1px solid var(--border-light);
    }
    
    .backup-row:last-child {
      border-bottom: none;
    }
    
    .backup-info {
      flex: 1;
    }
    
    .backup-title {
      font-weight: 500;
      margin-bottom: 4px;
    }
    
    .backup-timestamp {
      font-size: 13px;
      color: var(--text-tertiary);
    }
    
    /* Log entries */
    .log-entry {
      padding: 12px;
      border-radius: var(--radius-md);
      margin-bottom: 8px;
      background-color: var(--bg-secondary);
    }
    
    .log-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
    }
    
    .log-timestamp {
      font-size: 12px;
      color: var(--text-tertiary);
    }
    
    .log-level {
      font-size: 12px;
      font-weight: 500;
    }
    
    .log-level.info {
      color: var(--info-color);
    }
    
    .log-level.warning {
      color: var(--warning-color);
    }
    
    .log-level.error {
      color: var(--danger-color);
    }
    
    .log-message {
      font-family: monospace;
      font-size: 13px;
      white-space: pre-wrap;
      word-break: break-word;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }
    
    .loading-overlay.visible {
      opacity: 1;
      pointer-events: auto;
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      position: relative;
      animation: rotate 1s linear infinite;
    }
    
    .loading-spinner::before,
    .loading-spinner::after {
      content: "";
      position: absolute;
      border-radius: 50%;
    }
    
    .loading-spinner::before {
      width: 48px;
      height: 48px;
      border: 5px solid rgba(85, 64, 175, 0.2);
    }
    
    .loading-spinner::after {
      width: 48px;
      height: 48px;
      border: 5px solid transparent;
      border-top-color: var(--primary-color);
      animation: rotate 0.5s linear infinite;
    }
    
    @keyframes rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Toast notifications */
    .toast-container {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 1000;
    }
    
    .toast {
      display: flex;
      align-items: center;
      background: white;
      box-shadow: var(--shadow-lg);
      border-radius: var(--radius-md);
      padding: 16px;
      margin-top: 12px;
      transition: transform 0.3s ease, opacity 0.3s ease;
      transform: translateX(120%);
      opacity: 0;
      min-width: 300px;
      max-width: 400px;
    }
    
    .toast.visible {
      transform: translateX(0);
      opacity: 1;
    }
    
    .toast-icon {
      margin-right: 12px;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .toast-icon.success {
      background-color: var(--success-light);
      color: var(--success-color);
    }
    
    .toast-icon.error {
      background-color: var(--danger-light);
      color: var(--danger-color);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 2px;
    }
    
    .toast-message {
      font-size: 13px;
      color: var(--text-secondary);
    }
    
    .toast-close {
      color: var(--text-tertiary);
      cursor: pointer;
      padding: 4px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.2s;
    }
    
    .toast-close:hover {
      background-color: var(--bg-secondary);
    }
    
    @media (max-width: 768px) {
      .header, .content {
        padding: 16px;
      }
      
      .card-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
      }
      
      .setting-row {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
      }
      
      .setting-controls {
        align-self: flex-end;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <div>
          <h1 class="header-title">
            <i class="fas fa-cogs"></i> System Settings
          </h1>
          <div class="header-subtitle">
            Configure and manage system settings for Team Metrics Dashboard
          </div>
        </div>
      </div>
    </header>
    
    <div class="content">
      <div class="card">
        <div class="card-header">
          <div class="card-title">
            <i class="fas fa-sliders-h"></i> Settings Configuration
          </div>
        </div>
        
        <div class="tabs">
          <div class="tab active" data-tab="general">General</div>
          <div class="tab" data-tab="sheets">Sheet Validation</div>
          <div class="tab" data-tab="html">HTML Validation</div>
          <div class="tab" data-tab="backup">Backup & Restore</div>
          <div class="tab" data-tab="advanced">Advanced</div>
          <div class="tab" data-tab="system">System Info</div>
        </div>
        
        <div class="card-content">
          <!-- General Settings Tab -->
          <div class="tab-content active" id="general-tab">
            <div class="notification info">
              <div class="notification-icon">
                <i class="fas fa-info-circle"></i>
              </div>
              <div class="notification-content">
                <div class="notification-title">General Settings</div>
                <div class="notification-message">
                  These settings control the behavior of the Team Metrics Dashboard. 
                  Changes are saved automatically.
                </div>
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Auto-refresh Dashboard</div>
                <div class="setting-description">Automatically refresh dashboard data every 5 minutes</div>
              </div>
              <div class="setting-controls">
                <label class="toggle-switch">
                  <input type="checkbox" id="autoRefreshToggle" checked>
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Email Notifications</div>
                <div class="setting-description">Send email notifications for system events</div>
              </div>
              <div class="setting-controls">
                <label class="toggle-switch">
                  <input type="checkbox" id="emailNotificationsToggle" checked>
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Error Logging</div>
                <div class="setting-description">Log errors and warnings to the Error Log sheet</div>
              </div>
              <div class="setting-controls">
                <label class="toggle-switch">
                  <input type="checkbox" id="errorLoggingToggle" checked>
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Data Privacy Mode</div>
                <div class="setting-description">Hide sensitive user data in reports and logs</div>
              </div>
              <div class="setting-controls">
                <label class="toggle-switch">
                  <input type="checkbox" id="dataPrivacyToggle">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Default Date Range</div>
                <div class="setting-description">Set the default date range for reports and dashboards</div>
              </div>
              <div class="setting-controls">
                <select class="form-control" id="defaultDateRange" style="width: 150px;">
                  <option value="today">Today</option>
                  <option value="yesterday">Yesterday</option>
                  <option value="last7" selected>Last 7 Days</option>
                  <option value="last30">Last 30 Days</option>
                  <option value="thisMonth">This Month</option>
                  <option value="lastMonth">Last Month</option>
                </select>
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Timezone</div>
                <div class="setting-description">Set the timezone for date calculations</div>
              </div>
              <div class="setting-controls">
                <select class="form-control" id="timezone" style="width: 200px;">
                  <option value="UTC">UTC</option>
                  <option value="America/New_York" selected>Eastern Time (ET)</option>
                  <option value="America/Chicago">Central Time (CT)</option>
                  <option value="America/Denver">Mountain Time (MT)</option>
                  <option value="America/Los_Angeles">Pacific Time (PT)</option>
                  <option value="Europe/London">London (GMT)</option>
                  <option value="Europe/Paris">Central European Time (CET)</option>
                  <option value="Asia/Tokyo">Japan Standard Time (JST)</option>
                </select>
              </div>
            </div>
            
            <div style="margin-top: 24px;">
              <button class="btn btn-primary" id="saveGeneralSettings">
                <i class="fas fa-save"></i> Save Settings
              </button>
              <button class="btn btn-secondary" id="resetGeneralSettings" style="margin-left: 8px;">
                <i class="fas fa-redo"></i> Reset to Default
              </button>
            </div>
          </div>
          
          <!-- Sheet Validation Tab -->
          <div class="tab-content" id="sheets-tab">
            <div class="notification info">
              <div class="notification-icon">
                <i class="fas fa-info-circle"></i>
              </div>
              <div class="notification-content">
                <div class="notification-title">Sheet Validation</div>
                <div class="notification-message">
                  Validate the existence and structure of required sheets in the spreadsheet.
                </div>
              </div>
            </div>
            
            <div style="margin-bottom: 24px;">
              <button class="btn btn-primary" id="validateSheetsBtn">
                <i class="fas fa-check-circle"></i> Validate Sheets
              </button>
              <button class="btn btn-secondary" id="createMissingSheetsBtn" style="margin-left: 8px;">
                <i class="fas fa-plus-circle"></i> Create Missing Sheets
              </button>
            </div>
            
            <table class="validation-table" id="sheetsValidationTable">
              <thead>
                <tr>
                  <th>Sheet Name</th>
                  <th>Status</th>
                  <th>Headers</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Team Members</td>
                  <td>
                    <span class="status-indicator success">
                      <i class="fas fa-check-circle"></i> Available
                    </span>
                  </td>
                  <td>8/8 Headers</td>
                  <td>
                    <button class="btn btn-secondary btn-sm">View</button>
                  </td>
                </tr>
                <tr>
                  <td>QA Reviews</td>
                  <td>
                    <span class="status-indicator error">
                      <i class="fas fa-exclamation-circle"></i> Missing
                    </span>
                  </td>
                  <td>0/10 Headers</td>
                  <td>
                    <button class="btn btn-info btn-sm">Create</button>
                  </td>
                </tr>
                <tr>
                  <td>Tasks</td>
                  <td>
                    <span class="status-indicator warning">
                      <i class="fas fa-exclamation-triangle"></i> Missing Headers
                    </span>
                  </td>
                  <td>10/13 Headers</td>
                  <td>
                    <button class="btn btn-info btn-sm">Fix</button>
                  </td>
                </tr>
              </tbody>
            </table>
            
            <div id="sheetsLoadingIndicator" style="text-align: center; margin-top: 16px; display: none;">
              <div class="loading-spinner" style="width: 24px; height: 24px; margin: 0 auto;"></div>
              <div style="margin-top: 8px;">Validating sheets...</div>
            </div>
            
            <div id="sheetsValidationSummary" style="margin-top: 24px;">
              <h3 style="font-size: 16px; margin-bottom: 8px;">Validation Summary</h3>
              <div class="progress-bar">
                <div class="progress-value" style="width: 65%;"></div>
              </div>
              <div style="display: flex; justify-content: space-between; margin-top: 4px; font-size: 13px;">
                <span>65% Complete</span>
                <span>7/12 Sheets Validated</span>
              </div>
            </div>
          </div>
          
          <!-- HTML Validation Tab -->
          <div class="tab-content" id="html-tab">
            <div class="notification info">
              <div class="notification-icon">
                <i class="fas fa-info-circle"></i>
              </div>
              <div class="notification-content">
                <div class="notification-title">HTML Validation</div>
                <div class="notification-message">
                  Validate the existence and functionality of required HTML files.
                </div>
              </div>
            </div>
            
            <div style="margin-bottom: 24px;">
              <button class="btn btn-primary" id="validateHtmlBtn">
                <i class="fas fa-check-circle"></i> Validate HTML Files
              </button>
            </div>
            
            <div id="htmlValidationContainer">
              <div class="html-validation-item">
                <div>
                  <div class="html-name">metrics-dashboard.html</div>
                  <div class="setting-description">Main dashboard interface</div>
                </div>
                <span class="status-indicator success">
                  <i class="fas fa-check-circle"></i> Available
                </span>
              </div>
              
              <div class="html-validation-item">
                <div>
                  <div class="html-name">task-form.html</div>
                  <div class="setting-description">Task creation form</div>
                </div>
                <span class="status-indicator success">
                  <i class="fas fa-check-circle"></i> Available
                </span>
              </div>
              
              <div class="html-validation-item">
                <div>
                  <div class="html-name">qa-review-form.html</div>
                  <div class="setting-description">QA review form</div>
                </div>
                <span class="status-indicator error">
                  <i class="fas fa-exclamation-circle"></i> Missing
                </span>
              </div>
              
              <div class="html-validation-item">
                <div>
                  <div class="html-name">metrics-export.html</div>
                  <div class="setting-description">Metrics export interface</div>
                </div>
                <span class="status-indicator warning">
                  <i class="fas fa-exclamation-triangle"></i> Issues Detected
                </span>
              </div>
            </div>
            
            <div id="htmlLoadingIndicator" style="text-align: center; margin-top: 16px; display: none;">
              <div class="loading-spinner" style="width: 24px; height: 24px; margin: 0 auto;"></div>
              <div style="margin-top: 8px;">Validating HTML files...</div>
            </div>
            
            <div id="htmlValidationSummary" style="margin-top: 24px;">
              <h3 style="font-size: 16px; margin-bottom: 8px;">Validation Summary</h3>
              <div class="progress-bar">
                <div class="progress-value" style="width: 75%;"></div>
              </div>
              <div style="display: flex; justify-content: space-between; margin-top: 4px; font-size: 13px;">
                <span>75% Complete</span>
                <span>9/12 HTML Files Validated</span>
              </div>
            </div>
          </div>
          
          <!-- Backup & Restore Tab -->
          <div class="tab-content" id="backup-tab">
            <div class="notification info">
              <div class="notification-icon">
                <i class="fas fa-info-circle"></i>
              </div>
              <div class="notification-content">
                <div class="notification-title">Backup & Restore</div>
                <div class="notification-message">
                  Create and manage backups of your data. Restore your system to a previous state if needed.
                </div>
              </div>
            </div>
            
            <div style="margin-bottom: 24px;">
              <button class="btn btn-primary" id="createBackupBtn">
                <i class="fas fa-download"></i> Create Backup
              </button>
            </div>
            
            <h3 style="font-size: 16px; margin-bottom: 16px;">Recent Backups</h3>
            
            <div id="backupsList">
              <div class="backup-row">
                <div class="backup-info">
                  <div class="backup-title">Backup #001</div>
                  <div class="backup-timestamp">2025-04-05 14:30:22 UTC</div>
                </div>
                <div>
                  <button class="btn btn-secondary btn-sm">Restore</button>
                  <button class="btn btn-secondary btn-sm">Download</button>
                </div>
              </div>
              
              <div class="backup-row">
                <div class="backup-info">
                  <div class="backup-title">Backup #002</div>
                  <div class="backup-timestamp">2025-04-04 09:15:10 UTC</div>
                </div>
                <div>
                  <button class="btn btn-secondary btn-sm">Restore</button>
                  <button class="btn btn-secondary btn-sm">Download</button>
                </div>
              </div>
              
              <div class="backup-row">
                <div class="backup-info">
                  <div class="backup-title">Backup #003</div>
                  <div class="backup-timestamp">2025-04-03 17:45:33 UTC</div>
                </div>
                <div>
                  <button class="btn btn-secondary btn-sm">Restore</button>
                  <button class="btn btn-secondary btn-sm">Download</button>
                </div>
              </div>
            </div>
            
            <div style="margin-top: 24px;">
              <h3 style="font-size: 16px; margin-bottom: 16px;">Restore from File</h3>
              
              <div style="display: flex; gap: 16px; align-items: flex-end;">
                <div style="flex: 1;">
                  <div class="form-group">
                    <label class="form-label">Select Backup File</label>
                    <input type="file" class="form-control" id="backupFileInput">
                  </div>
                </div>
                <div>
                  <button class="btn btn-secondary" id="restoreFromFileBtn" disabled>
                    <i class="fas fa-upload"></i> Restore
                  </button>
                </div>
              </div>
              
              <div class="notification warning" style="margin-top: 16px;">
                <div class="notification-icon">
                  <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div class="notification-content">
                  <div class="notification-title">Warning</div>
                  <div class="notification-message">
                    Restoring from a backup will overwrite your current data. This action cannot be undone.
                  </div>
                </div>
              </div>
            </div>
            
            <div style="margin-top: 24px;">
              <h3 style="font-size: 16px; margin-bottom: 16px;">Automatic Backups</h3>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">Enable Automatic Backups</div>
                  <div class="setting-description">System will create backups automatically based on the schedule</div>
                </div>
                <div class="setting-controls">
                  <label class="toggle-switch">
                    <input type="checkbox" id="autoBackupToggle" checked>
                    <span class="toggle-slider"></span>
                  </label>
                </div>
              </div>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">Backup Frequency</div>
                  <div class="setting-description">How often should automatic backups be created</div>
                </div>
                <div class="setting-controls">
                  <select class="form-control" id="backupFrequency" style="width: 150px;">
                    <option value="daily">Daily</option>
                    <option value="weekly" selected>Weekly</option>
                    <option value="monthly">Monthly</option>
                  </select>
                </div>
              </div>
              
              <div class="setting-row">
                <div>
                  <div class="setting-label">Retention Period</div>
                  <div class="setting-description">How long to keep automatic backups</div>
                </div>
                <div class="setting-controls">
                  <select class="form-control" id="retentionPeriod" style="width: 150px;">
                    <option value="1_month">1 Month</option>
                    <option value="3_months" selected>3 Months</option>
                    <option value="6_months">6 Months</option>
                    <option value="1_year">1 Year</option>
                  </select>
                </div>
              </div>
              
              <div style="margin-top: 16px;">
                <button class="btn btn-primary" id="saveBackupSettings">
                  <i class="fas fa-save"></i> Save Backup Settings
                </button>
              </div>
            </div>
          </div>
          
          <!-- Advanced Settings Tab -->
          <div class="tab-content" id="advanced-tab">
            <div class="notification warning">
              <div class="notification-icon">
                <i class="fas fa-exclamation-triangle"></i>
              </div>
              <div class="notification-content">
                <div class="notification-title">Advanced Settings</div>
                <div class="notification-message">
                  These settings are for advanced users only. Incorrect configuration may affect system performance.
                </div>
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Debug Mode</div>
                <div class="setting-description">Enable detailed logging for troubleshooting</div>
              </div>
              <div class="setting-controls">
                <label class="toggle-switch">
                  <input type="checkbox" id="debugModeToggle">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Cache Timeout</div>
                <div class="setting-description">Maximum time to cache results (in minutes)</div>
              </div>
              <div class="setting-controls">
                <input type="number" class="form-control" id="cacheTimeout" value="30" min="1" max="180" style="width: 80px;">
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Maximum Items Per Page</div>
                <div class="setting-description">Number of items to display per page in lists</div>
              </div>
              <div class="setting-controls">
                <input type="number" class="form-control" id="itemsPerPage" value="50" min="10" max="500" style="width: 80px;">
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">API Request Timeout</div>
                <div class="setting-description">Maximum time to wait for API responses (in seconds)</div>
              </div>
              <div class="setting-controls">
                <input type="number" class="form-control" id="apiTimeout" value="30" min="5" max="120" style="width: 80px;">
              </div>
            </div>
            
            <div class="setting-row">
              <div>
                <div class="setting-label">Data Purge Threshold</div>
                <div class="setting-description">Automatically purge data older than this threshold</div>
              </div>
              <div class="setting-controls">
                <select class="form-control" id="dataPurgeThreshold">
                  <option value="none">Never Purge</option>
                  <option value="6_months">6 Months</option>
                  <option value="1_year" selected>1 Year</option>
                  <option value="2_years">2 Years</option>
                </select>
              </div>
            </div>
            
            <div style="margin-top: 24px;">
              <button class="btn btn-primary" id="saveAdvancedSettings">
                <i class="fas fa-save"></i> Save Advanced Settings
              </button>
              <button class="btn btn-secondary" id="resetAdvancedSettings" style="margin-left: 8px;">
                <i class="fas fa-redo"></i> Reset to Default
              </button>
            </div>
            
            <div style="margin-top: 32px;">
              <h3 style="font-size: 16px; margin-bottom: 12px;">System Actions</h3>
              
              <div style="display: flex; gap: 16px; flex-wrap: wrap;">
                <button class="btn btn-secondary" id="clearCacheBtn">
                  <i class="fas fa-broom"></i> Clear Cache
                </button>
                <button class="btn btn-secondary" id="rebuildIndexBtn">
                  <i class="fas fa-sync"></i> Rebuild Indexes
                </button>
                <button class="btn btn-danger" id="resetSystemBtn">
                  <i class="fas fa-exclamation-triangle"></i> Reset System
                </button>
              </div>
              
              <div class="notification error" style="margin-top: 16px;">
                <div class="notification-icon">
                  <i class="fas fa-exclamation-circle"></i>
                </div>
                <div class="notification-content">
                  <div class="notification-title">Danger Zone</div>
                  <div class="notification-message">
                    Resetting the system will delete all data and return to factory settings. 
                    This action cannot be undone.
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- System Info Tab -->
          <div class="tab-content" id="system-tab">
            <div class="notification info">
              <div class="notification-icon">
                <i class="fas fa-info-circle"></i>
              </div>
              <div class="notification-content">
                <div class="notification-title">System Information</div>
                <div class="notification-message">
                  Technical information about your system and environment.
                </div>
              </div>
            </div>
            
            <div class="state-progress">
              <div class="state-step completed">
                <div class="state-dot">
                  <i class="fas fa-check"></i>
                </div>
                <div class="state-line"></div>
                <div class="state-label">Setup</div>
              </div>
              <div class="state-step completed">
                <div class="state-dot">
                  <i class="fas fa-check"></i>
                </div>
                <div class="state-line"></div>
                <div class="state-label">Configuration</div>
              </div>
              <div class="state-step active">
                <div class="state-dot">3</div>
                <div class="state-line"></div>
                <div class="state-label">Data Import</div>
              </div>
              <div class="state-step">
                <div class="state-dot">4</div>
                <div class="state-line"></div>
                <div class="state-label">Validation</div>
              </div>
              <div class="state-step">
                <div class="state-dot">5</div>
                <div class="state-label">Complete</div>
              </div>
            </div>
            
            <div style="margin-bottom: 24px;">
              <button class="btn btn-primary" id="refreshSystemInfoBtn">
                <i class="fas fa-sync"></i> Refresh System Info
              </button>
            </div>
            
            <h3 style="font-size: 16px; margin-bottom: 16px;">Version Information</h3>
            
            <div class="system-info-item">
              <div class="system-info-label">Version</div>
              <div class="system-info-value">Team Metrics Dashboard v1.8.2</div>
            </div>
            
            <div class="system-info-item">
              <div class="system-info-label">Last Updated</div>
              <div class="system-info-value">2025-04-06 07:51:41 UTC</div>
            </div>
            
            <div class="system-info-item">
              <div class="system-info-label">Script ID</div>
              <div class="system-info-value">1XYZ-abc123def456_7890ghi</div>
            </div>
            
            <h3 style="font-size: 16px; margin: 24px 0 16px;">Environment</h3>
            
            <div class="system-info-item">
              <div class="system-info-label">User</div>
              <div class="system-info-value" id="currentUserInfo">Loading...</div>
            </div>
            
            <div class="system-info-item">
              <div class="system-info-label">Timezone</div>
              <div class="system-info-value" id="timezoneInfo">Loading...</div>
            </div>
            
            <div class="system-info-item">
              <div class="system-info-label">Spreadsheet</div>
              <div class="system-info-value" id="spreadsheetInfo">Loading...</div>
            </div>
            
            <h3 style="font-size: 16px; margin: 24px 0 16px;">Recent Activity</h3>
            
            <div id="logEntriesList">
              <div class="log-entry">
                <div class="log-header">
                  <span class="log-level info">INFO</span>
                  <span class="log-timestamp">2025-04-06 07:35:12</span>
                </div>
                <div class="log-message">System initialized successfully</div>
              </div>
              
              <div class="log-entry">
                <div class="log-header">
                  <span class="log-level info">INFO</span>
                  <span class="log-timestamp">2025-04-06 07:36:45</span>
                </div>
                <div class="log-message">User preferences loaded for current user</div>
              </div>
              
              <div class="log-entry">
                <div class="log-header">
                  <span class="log-level warning">WARNING</span>
                  <span class="log-timestamp">2025-04-06 07:40:22</span>
                </div>
                <div class="log-message">Cache miss for metrics data, fetching from source</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container" id="toastContainer">
    <!-- Toasts will be added here -->
  </div>
  
  <script>
    // Global variables
    let systemSettings = {};
    let sheetsValidation = [];
    let htmlValidation = [];
    let backups = [];
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Setup tabs
      setupTabs();
      
      // Setup event listeners
      setupEventListeners();
      
      // Load system settings
      loadSystemSettings();
      
      // Load system info
      loadSystemInfo();
    });
    
    // Setup tabs functionality
    function setupTabs() {
      const tabs = document.querySelectorAll('.tab');
      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          // Remove active class from all tabs
          tabs.forEach(t => t.classList.remove('active'));
          
          // Add active class to clicked tab
          tab.classList.add('active');
          
          // Hide all tab content
          const tabContents = document.querySelectorAll('.tab-content');
          tabContents.forEach(content => content.classList.remove('active'));
          
          // Show the selected tab content
          const tabId = tab.getAttribute('data-tab');
          document.getElementById(tabId + '-tab').classList.add('active');
        });
      });
    }
    
    // Setup event listeners
    function setupEventListeners() {
      // General settings
      document.getElementById('saveGeneralSettings').addEventListener('click', saveGeneralSettings);
      document.getElementById('resetGeneralSettings').addEventListener('click', resetGeneralSettings);
      
      // Sheet validation
      document.getElementById('validateSheetsBtn').addEventListener('click', validateSheets);
      document.getElementById('createMissingSheetsBtn').addEventListener('click', createMissingSheets);
      
      // HTML validation
      document.getElementById('validateHtmlBtn').addEventListener('click', validateHtml);
      
      // Backup & Restore
      document.getElementById('createBackupBtn').addEventListener('click', createBackup);
      document.getElementById('saveBackupSettings').addEventListener('click', saveBackupSettings);
      document.getElementById('backupFileInput').addEventListener('change', handleBackupFileSelected);
      document.getElementById('restoreFromFileBtn').addEventListener('click', restoreFromFile);
      
      // Advanced settings
      document.getElementById('saveAdvancedSettings').addEventListener('click', saveAdvancedSettings);
      document.getElementById('resetAdvancedSettings').addEventListener('click', resetAdvancedSettings);
      document.getElementById('clearCacheBtn').addEventListener('click', clearCache);
      document.getElementById('rebuildIndexBtn').addEventListener('click', rebuildIndex);
      document.getElementById('resetSystemBtn').addEventListener('click', confirmResetSystem);
      
      // System info
      document.getElementById('refreshSystemInfoBtn').addEventListener('click', refreshSystemInfo);
    }
    
    // Load system settings
    function loadSystemSettings() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            systemSettings = result.settings;
            populateSystemSettings();
          } else {
            showToast('Error', result.message || 'Failed to load system settings', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error loading system settings:', error);
          showToast('Error', 'Failed to load system settings', 'error');
        })
        .getSystemSettings();
    }
    
    // Populate system settings in UI
    function populateSystemSettings() {
      // General settings
      if (systemSettings.general) {
        document.getElementById('autoRefreshToggle').checked = systemSettings.general.autoRefresh !== false;
        document.getElementById('emailNotificationsToggle').checked = systemSettings.general.emailNotifications !== false;
        document.getElementById('errorLoggingToggle').checked = systemSettings.general.errorLogging !== false;
        document.getElementById('dataPrivacyToggle').checked = systemSettings.general.dataPrivacy === true;
        
        if (systemSettings.general.defaultDateRange) {
          document.getElementById('defaultDateRange').value = systemSettings.general.defaultDateRange;
        }
        
        if (systemSettings.general.timezone) {
          document.getElementById('timezone').value = systemSettings.general.timezone;
        }
      }
      
      // Backup settings
      if (systemSettings.backup) {
        document.getElementById('autoBackupToggle').checked = systemSettings.backup.autoBackup !== false;
        
        if (systemSettings.backup.frequency) {
          document.getElementById('backupFrequency').value = systemSettings.backup.frequency;
        }
        
        if (systemSettings.backup.retentionPeriod) {
          document.getElementById('retentionPeriod').value = systemSettings.backup.retentionPeriod;
        }
      }
      
      // Advanced settings
      if (systemSettings.advanced) {
        document.getElementById('debugModeToggle').checked = systemSettings.advanced.debugMode === true;
        
        if (systemSettings.advanced.cacheTimeout) {
          document.getElementById('cacheTimeout').value = systemSettings.advanced.cacheTimeout;
        }
        
        if (systemSettings.advanced.itemsPerPage) {
          document.getElementById('itemsPerPage').value = systemSettings.advanced.itemsPerPage;
        }
        
        if (systemSettings.advanced.apiTimeout) {
          document.getElementById('apiTimeout').value = systemSettings.advanced.apiTimeout;
        }
        
        if (systemSettings.advanced.dataPurgeThreshold) {
          document.getElementById('dataPurgeThreshold').value = systemSettings.advanced.dataPurgeThreshold;
        }
      }
    }
    
    // Save general settings
    function saveGeneralSettings() {
            const settings = {
        autoRefresh: document.getElementById('autoRefreshToggle').checked,
        emailNotifications: document.getElementById('emailNotificationsToggle').checked,
        errorLogging: document.getElementById('errorLoggingToggle').checked,
        dataPrivacy: document.getElementById('dataPrivacyToggle').checked,
        defaultDateRange: document.getElementById('defaultDateRange').value,
        timezone: document.getElementById('timezone').value
      };
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'General settings saved successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to save general settings', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error saving general settings:', error);
          showToast('Error', 'Failed to save general settings', 'error');
        })
        .saveSystemGeneralSettings(settings);
    }
    
    // Reset general settings to default
    function resetGeneralSettings() {
      if (confirm('Are you sure you want to reset general settings to default values?')) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(result => {
            hideLoading();
            
            if (result.success) {
              systemSettings.general = result.settings.general;
              populateSystemSettings();
              showToast('Success', 'General settings reset to default', 'success');
            } else {
              showToast('Error', result.message || 'Failed to reset general settings', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            console.error('Error resetting general settings:', error);
            showToast('Error', 'Failed to reset general settings', 'error');
          })
          .resetSystemGeneralSettings();
      }
    }
    
    // Validate sheets
    function validateSheets() {
      document.getElementById('sheetsLoadingIndicator').style.display = 'block';
      
      google.script.run
        .withSuccessHandler(result => {
          document.getElementById('sheetsLoadingIndicator').style.display = 'none';
          
          if (result.success) {
            sheetsValidation = result.validation;
            renderSheetsValidation();
            showToast('Success', 'Sheet validation complete', 'success');
          } else {
            showToast('Error', result.message || 'Failed to validate sheets', 'error');
          }
        })
        .withFailureHandler(error => {
          document.getElementById('sheetsLoadingIndicator').style.display = 'none';
          console.error('Error validating sheets:', error);
          showToast('Error', 'Failed to validate sheets', 'error');
        })
        .validateSheets();
    }
    
    // Render sheets validation results
    function renderSheetsValidation() {
      const table = document.getElementById('sheetsValidationTable');
      const tableBody = table.querySelector('tbody');
      tableBody.innerHTML = '';
      
      // Calculate validation stats
      let validSheets = 0;
      let totalSheets = sheetsValidation.length;
      
      sheetsValidation.forEach(sheet => {
        const row = document.createElement('tr');
        
        // Sheet name cell
        const nameCell = document.createElement('td');
        nameCell.textContent = sheet.name;
        row.appendChild(nameCell);
        
        // Status cell
        const statusCell = document.createElement('td');
        let statusHtml = '';
        
        if (sheet.exists) {
          statusHtml = `
            <span class="status-indicator success">
              <i class="fas fa-check-circle"></i> Available
            </span>
          `;
          validSheets++;
        } else {
          statusHtml = `
            <span class="status-indicator error">
              <i class="fas fa-exclamation-circle"></i> Missing
            </span>
          `;
        }
        
        statusCell.innerHTML = statusHtml;
        row.appendChild(statusCell);
        
        // Headers cell
        const headersCell = document.createElement('td');
        if (sheet.exists) {
          const validHeaders = sheet.validHeaders || 0;
          const totalHeaders = sheet.requiredHeaders ? sheet.requiredHeaders.length : 0;
          
          if (validHeaders < totalHeaders) {
            headersCell.innerHTML = `
              <span class="status-indicator warning">
                ${validHeaders}/${totalHeaders} Headers
              </span>
            `;
          } else {
            headersCell.textContent = `${validHeaders}/${totalHeaders} Headers`;
          }
        } else {
          const totalHeaders = sheet.requiredHeaders ? sheet.requiredHeaders.length : 0;
          headersCell.textContent = `0/${totalHeaders} Headers`;
        }
        row.appendChild(headersCell);
        
        // Actions cell
        const actionsCell = document.createElement('td');
        if (sheet.exists) {
          if (sheet.validHeaders < sheet.requiredHeaders.length) {
            actionsCell.innerHTML = `
              <button class="btn btn-info btn-sm" onclick="fixSheetHeaders('${sheet.name}')">Fix</button>
            `;
          } else {
            actionsCell.innerHTML = `
              <button class="btn btn-secondary btn-sm" onclick="viewSheet('${sheet.name}')">View</button>
            `;
          }
        } else {
          actionsCell.innerHTML = `
            <button class="btn btn-info btn-sm" onclick="createSheet('${sheet.name}')">Create</button>
          `;
        }
        row.appendChild(actionsCell);
        
        tableBody.appendChild(row);
      });
      
      // Update summary
      const progressValue = document.querySelector('#sheetsValidationSummary .progress-value');
      const percentComplete = totalSheets > 0 ? Math.round((validSheets / totalSheets) * 100) : 0;
      progressValue.style.width = `${percentComplete}%`;
      
      const summaryText = document.querySelector('#sheetsValidationSummary div');
      summaryText.innerHTML = `
        <span>${percentComplete}% Complete</span>
        <span>${validSheets}/${totalSheets} Sheets Validated</span>
      `;
    }
    
    // Create missing sheets
    function createMissingSheets() {
      if (confirm('Create all missing sheets with required headers?')) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(result => {
            hideLoading();
            
            if (result.success) {
              showToast('Success', 'Missing sheets created successfully', 'success');
              // Refresh validation after creating sheets
              validateSheets();
            } else {
              showToast('Error', result.message || 'Failed to create missing sheets', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            console.error('Error creating missing sheets:', error);
            showToast('Error', 'Failed to create missing sheets', 'error');
          })
          .createMissingSheets();
      }
    }
    
    // Fix sheet headers
    function fixSheetHeaders(sheetName) {
      if (confirm(`Fix headers for sheet "${sheetName}"? This will add missing columns.`)) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(result => {
            hideLoading();
            
            if (result.success) {
              showToast('Success', `Headers fixed for sheet "${sheetName}"`, 'success');
              // Refresh validation after fixing headers
              validateSheets();
            } else {
              showToast('Error', result.message || 'Failed to fix sheet headers', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            console.error('Error fixing sheet headers:', error);
            showToast('Error', 'Failed to fix sheet headers', 'error');
          })
          .fixSheetHeaders(sheetName);
      }
    }
    
    // View sheet
    function viewSheet(sheetName) {
      google.script.run
        .withSuccessHandler(() => {
          showToast('Success', `Navigated to sheet "${sheetName}"`, 'success');
        })
        .navigateToSheet(sheetName);
    }
    
    // Create sheet
    function createSheet(sheetName) {
      if (confirm(`Create sheet "${sheetName}" with required headers?`)) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(result => {
            hideLoading();
            
            if (result.success) {
              showToast('Success', `Sheet "${sheetName}" created successfully`, 'success');
              // Refresh validation after creating sheet
              validateSheets();
            } else {
              showToast('Error', result.message || 'Failed to create sheet', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            console.error('Error creating sheet:', error);
            showToast('Error', 'Failed to create sheet', 'error');
          })
          .createSheet(sheetName);
      }
    }
    
    // Validate HTML files
    function validateHtml() {
      document.getElementById('htmlLoadingIndicator').style.display = 'block';
      
      google.script.run
        .withSuccessHandler(result => {
          document.getElementById('htmlLoadingIndicator').style.display = 'none';
          
          if (result.success) {
            htmlValidation = result.validation;
            renderHtmlValidation();
            showToast('Success', 'HTML validation complete', 'success');
          } else {
            showToast('Error', result.message || 'Failed to validate HTML files', 'error');
          }
        })
        .withFailureHandler(error => {
          document.getElementById('htmlLoadingIndicator').style.display = 'none';
          console.error('Error validating HTML files:', error);
          showToast('Error', 'Failed to validate HTML files', 'error');
        })
        .validateHtmlFiles();
    }
    
    // Render HTML validation results
    function renderHtmlValidation() {
      const container = document.getElementById('htmlValidationContainer');
      container.innerHTML = '';
      
      // Calculate validation stats
      let validFiles = 0;
      let totalFiles = htmlValidation.length;
      
      htmlValidation.forEach(file => {
        const itemDiv = document.createElement('div');
        itemDiv.className = 'html-validation-item';
        
        let statusHtml = '';
        if (file.exists && file.valid) {
          statusHtml = `
            <span class="status-indicator success">
              <i class="fas fa-check-circle"></i> Available
            </span>
          `;
          validFiles++;
        } else if (file.exists && !file.valid) {
          statusHtml = `
            <span class="status-indicator warning">
              <i class="fas fa-exclamation-triangle"></i> Issues Detected
            </span>
          `;
        } else {
          statusHtml = `
            <span class="status-indicator error">
              <i class="fas fa-exclamation-circle"></i> Missing
            </span>
          `;
        }
        
        itemDiv.innerHTML = `
          <div>
            <div class="html-name">${file.name}</div>
            <div class="setting-description">${file.description || ''}</div>
          </div>
          ${statusHtml}
        `;
        
        container.appendChild(itemDiv);
      });
      
      // Update summary
      const progressValue = document.querySelector('#htmlValidationSummary .progress-value');
      const percentComplete = totalFiles > 0 ? Math.round((validFiles / totalFiles) * 100) : 0;
      progressValue.style.width = `${percentComplete}%`;
      
      const summaryText = document.querySelector('#htmlValidationSummary div');
      summaryText.innerHTML = `
        <span>${percentComplete}% Complete</span>
        <span>${validFiles}/${totalFiles} HTML Files Validated</span>
      `;
    }
    
    // Create backup
    function createBackup() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Backup created successfully', 'success');
            // Refresh backups list
            loadBackups();
          } else {
            showToast('Error', result.message || 'Failed to create backup', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error creating backup:', error);
          showToast('Error', 'Failed to create backup', 'error');
        })
        .createBackup();
    }
    
    // Load backups
    function loadBackups() {
      google.script.run
        .withSuccessHandler(result => {
          if (result.success) {
            backups = result.backups;
            renderBackups();
          } else {
            showToast('Error', result.message || 'Failed to load backups', 'error');
          }
        })
        .withFailureHandler(error => {
          console.error('Error loading backups:', error);
          showToast('Error', 'Failed to load backups', 'error');
        })
        .getBackups();
    }
    
    // Render backups list
    function renderBackups() {
      const container = document.getElementById('backupsList');
      container.innerHTML = '';
      
      if (backups.length === 0) {
        container.innerHTML = '<div style="text-align: center; padding: 16px; color: var(--text-tertiary);">No backups found</div>';
        return;
      }
      
      backups.forEach((backup, index) => {
        const backupDiv = document.createElement('div');
        backupDiv.className = 'backup-row';
        
        backupDiv.innerHTML = `
          <div class="backup-info">
            <div class="backup-title">Backup #${String(backup.id).padStart(3, '0')}</div>
            <div class="backup-timestamp">${new Date(backup.timestamp).toLocaleString()} UTC</div>
          </div>
          <div>
            <button class="btn btn-secondary btn-sm" onclick="restoreBackup('${backup.id}')">Restore</button>
            <button class="btn btn-secondary btn-sm" onclick="downloadBackup('${backup.id}')">Download</button>
          </div>
        `;
        
        container.appendChild(backupDiv);
      });
    }
    
    // Save backup settings
    function saveBackupSettings() {
      const settings = {
        autoBackup: document.getElementById('autoBackupToggle').checked,
        frequency: document.getElementById('backupFrequency').value,
        retentionPeriod: document.getElementById('retentionPeriod').value
      };
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Backup settings saved successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to save backup settings', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error saving backup settings:', error);
          showToast('Error', 'Failed to save backup settings', 'error');
        })
        .saveBackupSettings(settings);
    }
    
    // Restore backup
    function restoreBackup(backupId) {
      if (confirm('Are you sure you want to restore this backup? This will overwrite your current data.')) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(result => {
            hideLoading();
            
            if (result.success) {
              showToast('Success', 'Backup restored successfully', 'success');
            } else {
              showToast('Error', result.message || 'Failed to restore backup', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            console.error('Error restoring backup:', error);
            showToast('Error', 'Failed to restore backup', 'error');
          })
          .restoreBackup(backupId);
      }
    }
    
    // Download backup
    function downloadBackup(backupId) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success && result.url) {
            // Open download URL in new tab
            window.open(result.url, '_blank');
            showToast('Success', 'Backup download initiated', 'success');
          } else {
            showToast('Error', result.message || 'Failed to download backup', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error downloading backup:', error);
          showToast('Error', 'Failed to download backup', 'error');
        })
        .downloadBackup(backupId);
    }
    
    // Handle backup file selection
    function handleBackupFileSelected() {
      const fileInput = document.getElementById('backupFileInput');
      const restoreBtn = document.getElementById('restoreFromFileBtn');
      
      if (fileInput.files.length > 0) {
        restoreBtn.disabled = false;
      } else {
        restoreBtn.disabled = true;
      }
    }
    
    // Restore from file
    function restoreFromFile() {
      const fileInput = document.getElementById('backupFileInput');
      if (!fileInput.files.length) return;
      
      if (confirm('Are you sure you want to restore from this file? This will overwrite your current data.')) {
        const file = fileInput.files[0];
        
        // In a real app, you'd upload the file to Google Drive using the Google Drive API
        // For this demo, we'll simulate it
        showLoading();
        
        setTimeout(() => {
          hideLoading();
          showToast('Error', 'File upload not implemented in this prototype', 'error');
        }, 1000);
      }
    }
    
    // Save advanced settings
    function saveAdvancedSettings() {
      const settings = {
        debugMode: document.getElementById('debugModeToggle').checked,
        cacheTimeout: parseInt(document.getElementById('cacheTimeout').value),
        itemsPerPage: parseInt(document.getElementById('itemsPerPage').value),
        apiTimeout: parseInt(document.getElementById('apiTimeout').value),
        dataPurgeThreshold: document.getElementById('dataPurgeThreshold').value
      };
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Advanced settings saved successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to save advanced settings', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error saving advanced settings:', error);
          showToast('Error', 'Failed to save advanced settings', 'error');
        })
        .saveSystemAdvancedSettings(settings);
    }
    
    // Reset advanced settings
    function resetAdvancedSettings() {
      if (confirm('Are you sure you want to reset advanced settings to default values?')) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(result => {
            hideLoading();
            
            if (result.success) {
              systemSettings.advanced = result.settings.advanced;
              populateSystemSettings();
              showToast('Success', 'Advanced settings reset to default', 'success');
            } else {
              showToast('Error', result.message || 'Failed to reset advanced settings', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            console.error('Error resetting advanced settings:', error);
            showToast('Error', 'Failed to reset advanced settings', 'error');
          })
          .resetSystemAdvancedSettings();
      }
    }
    
    // Clear cache
    function clearCache() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Cache cleared successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to clear cache', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error clearing cache:', error);
          showToast('Error', 'Failed to clear cache', 'error');
        })
        .clearCache();
    }
    
    // Rebuild index
    function rebuildIndex() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            showToast('Success', 'Indexes rebuilt successfully', 'success');
          } else {
            showToast('Error', result.message || 'Failed to rebuild indexes', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error rebuilding indexes:', error);
          showToast('Error', 'Failed to rebuild indexes', 'error');
        })
        .rebuildIndexes();
    }
    
    // Confirm system reset
    function confirmResetSystem() {
      const confirmation = prompt('This will delete all data and reset the system to factory settings. Type "RESET" to confirm:');
      
      if (confirmation === 'RESET') {
        showLoading();
        
        google.script.run
          .withSuccessHandler(result => {
            hideLoading();
            
            if (result.success) {
              showToast('Success', 'System reset successfully. Reloading...', 'success');
              
              // Reload the page after a short delay
              setTimeout(() => {
                window.location.reload();
              }, 2000);
            } else {
              showToast('Error', result.message || 'Failed to reset system', 'error');
            }
          })
          .withFailureHandler(error => {
            hideLoading();
            console.error('Error resetting system:', error);
            showToast('Error', 'Failed to reset system', 'error');
          })
          .resetSystem();
      } else if (confirmation !== null) {
        showToast('Error', 'Incorrect confirmation. System was not reset.', 'error');
      }
    }
    
    // Load system info
    function loadSystemInfo() {
      google.script.run
        .withSuccessHandler(result => {
          if (result.success) {
            const info = result.info;
            
            // Update system info elements
            document.getElementById('currentUserInfo').textContent = info.user || 'Unknown';
            document.getElementById('timezoneInfo').textContent = info.timezone || 'Unknown';
            document.getElementById('spreadsheetInfo').textContent = info.spreadsheet || 'Unknown';
          }
        })
        .withFailureHandler(error => {
          console.error('Error loading system info:', error);
        })
        .getSystemInfo();
    }
    
    // Refresh system info
    function refreshSystemInfo() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(result => {
          hideLoading();
          
          if (result.success) {
            const info = result.info;
            
            // Update system info elements
            document.getElementById('currentUserInfo').textContent = info.user || 'Unknown';
            document.getElementById('timezoneInfo').textContent = info.timezone || 'Unknown';
            document.getElementById('spreadsheetInfo').textContent = info.spreadsheet || 'Unknown';
            
            showToast('Success', 'System information refreshed', 'success');
          } else {
            showToast('Error', result.message || 'Failed to refresh system information', 'error');
          }
        })
        .withFailureHandler(error => {
          hideLoading();
          console.error('Error refreshing system info:', error);
          showToast('Error', 'Failed to refresh system information', 'error');
        })
        .getSystemInfo();
    }
    
    // Show loading overlay
    function showLoading() {
      document.getElementById('loadingOverlay').classList.add('visible');
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.remove('visible');
    }
    
    // Show toast notification
    function showToast(title, message, type = 'success') {
      const toastContainer = document.getElementById('toastContainer');
      
      // Create toast element
      const toast = document.createElement('div');
      toast.className = 'toast';
      
      // Create toast content
      toast.innerHTML = `
        <div class="toast-icon ${type}">
          <i class="fas fa-${type === 'success' ? 'check' : 'exclamation'}-circle"></i>
        </div>
        <div class="toast-content">
          <div class="toast-title">${title}</div>
          <div class="toast-message">${message}</div>
        </div>
        <div class="toast-close">
          <i class="fas fa-times"></i>
        </div>
      `;
      
      // Add click listener to close button
      toast.querySelector('.toast-close').addEventListener('click', () => {
        toast.classList.remove('visible');
        setTimeout(() => {
          toastContainer.removeChild(toast);
        }, 300);
      });
      
      // Add toast to container
      toastContainer.appendChild(toast);
      
      // Trigger reflow to enable transition
      void toast.offsetWidth;
      
      // Show toast
      toast.classList.add('visible');
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        if (toastContainer.contains(toast)) {
          toast.classList.remove('visible');
          setTimeout(() => {
            if (toastContainer.contains(toast)) {
              toastContainer.removeChild(toast);
            }
          }, 300);
        }
      }, 5000);
    }
  </script>
</body>
</html>





/**
 * 🕒 Time Service - Time Tracking and Schedule Management 🕒
 * Handles time tracking, schedule management, and reporting
 */

// Time Service Configuration
const TIME_CONFIG = {
  SHEETS: {
    TIME_SESSIONS: 'Time Sessions',
    TIME_ACTIVITIES: 'Time Activities',
    SCHEDULE_EVENTS: 'Schedule Events',
    SCHEDULE_PATTERNS: 'Schedule Patterns',
    TEAM_SCHEDULE: 'Team Schedule'
  },
  DEFAULT_ACTIVITIES: [
    'primary',
    'team-meeting',
    'one-on-one',
    'priority-coaching',
    'manager-meeting',
    'qa-review',
    'shadow-session',
    'other'
  ],
  SCHEDULE_STATUSES: [
    'available',
    'busy',
    'away',
    'pto',
    'training',
    'meeting'
  ]
};

/**
 * 🏗️ Initialize time tracking and schedule sheets
 * @return {Boolean} Success status
 */
function initializeTimeSheets() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let created = false;
    
    // Create Time Sessions sheet if it doesn't exist
    if (!ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_SESSIONS)) {
      const sessionsSheet = ss.insertSheet(TIME_CONFIG.SHEETS.TIME_SESSIONS);
      
      // Set up header row
      const headers = [
        'Session ID', 'User ID', 'User Email', 'Date', 'Start Time', 'End Time', 
        'Duration (ms)', 'Notes', 'Reflection', 'Created At'
      ];
      sessionsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sessionsSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sessionsSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Time Activities sheet if it doesn't exist
    if (!ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_ACTIVITIES)) {
      const activitiesSheet = ss.insertSheet(TIME_CONFIG.SHEETS.TIME_ACTIVITIES);
      
      // Set up header row
      const headers = [
        'Activity ID', 'Session ID', 'Activity Type', 'Activity Name', 
        'Start Time', 'End Time', 'Duration (ms)', 'Notes'
      ];
      activitiesSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      activitiesSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      activitiesSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Schedule Events sheet if it doesn't exist
    if (!ss.getSheetByName(TIME_CONFIG.SHEETS.SCHEDULE_EVENTS)) {
      const eventsSheet = ss.insertSheet(TIME_CONFIG.SHEETS.SCHEDULE_EVENTS);
      
      // Set up header row
      const headers = [
        'Event ID', 'Member ID', 'Date', 'Start Time', 'End Time', 
        'Status', 'Title', 'Notes', 'Created By', 'Created At'
      ];
      eventsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      eventsSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      eventsSheet.setFrozenRows(1);
      created = true;
    }
    
    // Create Schedule Patterns sheet if it doesn't exist
    if (!ss.getSheetByName(TIME_CONFIG.SHEETS.SCHEDULE_PATTERNS)) {
      const patternsSheet = ss.insertSheet(TIME_CONFIG.SHEETS.SCHEDULE_PATTERNS);
      
      // Set up header row
      const headers = [
        'Pattern ID', 'Name', 'Description', 'Configuration', 'Created By', 'Created At'
      ];
      patternsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      patternsSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      patternsSheet.setFrozenRows(1);
      
      // Add default patterns
      const defaultPatterns = [
        {
          id: 'default',
          name: 'Default Pattern',
          description: 'Standard 24/7 coverage with regular shifts',
          configuration: JSON.stringify({
            shiftDuration: 8,
            minStaffing: {
              weekday: {
                day: 3,
                night: 2
              },
              weekend: {
                day: 2,
                night: 2
              }
            }
          })
        },
        {
          id: 'weekend',
          name: 'Weekend Coverage',
          description: 'Increased staffing for weekend hours',
          configuration: JSON.stringify({
            shiftDuration: 8,
            minStaffing: {
              weekday: {
                day: 3,
                night: 2
              },
              weekend: {
                day: 4,
                night: 3
              }
            }
          })
        },
        {
          id: 'holiday',
          name: 'Holiday Week',
          description: 'Adjusted coverage for holiday periods',
          configuration: JSON.stringify({
            shiftDuration: 8,
            minStaffing: {
              weekday: {
                day: 2,
                night: 2
              },
              weekend: {
                day: 3,
                night: 2
              }
            }
          })
        }
      ];
      
      // Add default patterns to sheet
      const user = Session.getActiveUser().getEmail();
      const now = new Date();
      
      defaultPatterns.forEach((pattern, index) => {
        patternsSheet.getRange(2 + index, 1, 1, 6).setValues([[
          pattern.id,
          pattern.name,
          pattern.description,
          pattern.configuration,
          user,
          now
        ]]);
      });
      
      created = true;
    }
    
    // Create Team Schedule sheet if it doesn't exist
    if (!ss.getSheetByName(TIME_CONFIG.SHEETS.TEAM_SCHEDULE)) {
      const scheduleSheet = ss.insertSheet(TIME_CONFIG.SHEETS.TEAM_SCHEDULE);
      
      // Set up header row
      const headers = [
        'Schedule ID', 'Week Start Date', 'Week End Date', 'Pattern ID', 
        'Team Members', 'Notes', 'Created By', 'Created At'
      ];
      scheduleSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      scheduleSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      scheduleSheet.setFrozenRows(1);
      created = true;
    }
    
    return created;
  } catch (error) {
    console.error('Error initializing time sheets:', error);
    logError('initializeTimeSheets', error);
    return false;
  }
}

/**
 * 💾 Save time tracker session
 * @param {Object} sessionData - Time tracker session data
 * @return {Object} Success status
 */
function saveTimeTrackerSession(sessionData) {
  try {
    // Initialize sheets if needed
    initializeTimeSheets();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sessionsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_SESSIONS);
    const activitiesSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_ACTIVITIES);
    
    if (!sessionsSheet || !activitiesSheet) {
      return {
        success: false,
        message: 'Time tracking sheets not found'
      };
    }
    
    // Generate session ID
    const sessionId = Utilities.getUuid();
    
    // Get current user
    const userEmail = Session.getActiveUser().getEmail();
    // Generate a simple hash for the user ID (normally you'd use a real user ID from your auth system)
    const userId = Utilities.computeDigest(Utilities.DigestAlgorithm.MD5, userEmail).reduce((str, chr) => {
      str += (chr < 0 ? chr + 256 : chr).toString(16).padStart(2, '0');
      return str;
    }, '').slice(0, 8);
    
    // Calculate start and end times
    const startTime = new Date(sessionData.date);
    const endTime = new Date(startTime.getTime() + sessionData.elapsedTime);
    
    // Create session entry
    const sessionEntry = [
      sessionId,
      userId,
      userEmail,
      sessionData.date,
      startTime,
      endTime,
      sessionData.elapsedTime,
      sessionData.notes || '',
      sessionData.reflection || '',
      new Date()
    ];
    
    // Add session to sheet
    sessionsSheet.appendRow(sessionEntry);
    
    // Process activity log to create activity entries
    if (sessionData.activityLog && sessionData.activityLog.length > 0) {
      const activities = [];
      
      for (let i = 0; i < sessionData.activityLog.length; i++) {
        const activity = sessionData.activityLog[i];
        const nextActivity = i < sessionData.activityLog.length - 1 ? sessionData.activityLog[i + 1] : null;
        
        // Skip pauses
        if (activity.activity === 'pause') continue;
        
        // Calculate duration
        let duration = 0;
                if (nextActivity) {
          duration = new Date(nextActivity.timestamp) - new Date(activity.timestamp);
        } else {
          // For the last activity, calculate duration until the end of the session
          duration = sessionData.elapsedTime - (new Date(activity.timestamp) - startTime);
        }
        
        // Create activity ID
        const activityId = Utilities.getUuid();
        
        // Create activity entry
        const activityEntry = [
          activityId,
          sessionId,
          activity.activity,
          activity.activityName || activity.activity,
          new Date(activity.timestamp),
          new Date(activity.timestamp).getTime() + duration,
          duration,
          activity.notes || ''
        ];
        
        activities.push(activityEntry);
      }
      
      // Batch add activities
      if (activities.length > 0) {
        activitiesSheet.getRange(activitiesSheet.getLastRow() + 1, 1, activities.length, activities[0].length)
          .setValues(activities);
      }
    }
    
    // Save tasks
    saveSessionTasks(sessionId, sessionData);
    
    return {
      success: true,
      sessionId: sessionId
    };
  } catch (error) {
    console.error('Error saving time tracker session:', error);
    logError('saveTimeTrackerSession', error);
    return {
      success: false,
      message: 'Error saving session: ' + error.toString()
    };
  }
}

/**
 * 💾 Save session tasks
 * @param {String} sessionId - Session ID
 * @param {Object} sessionData - Session data with tasks
 */
function saveSessionTasks(sessionId, sessionData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let tasksSheet = ss.getSheetByName('Time Tasks');
    
    // Create tasks sheet if it doesn't exist
    if (!tasksSheet) {
      tasksSheet = ss.insertSheet('Time Tasks');
      
      // Set up header row
      const headers = ['Task ID', 'Session ID', 'Task Text', 'Completed', 'Task Type', 'Created At'];
      tasksSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      tasksSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      tasksSheet.setFrozenRows(1);
    }
    
    // Collect all tasks
    const tasks = [];
    const now = new Date();
    
    // Add completed and incomplete tasks
    if (sessionData.completedTasks) {
      sessionData.completedTasks.forEach(task => {
        tasks.push([
          Utilities.getUuid(),
          sessionId,
          task.text,
          true,
          'session',
          now
        ]);
      });
    }
    
    if (sessionData.incompleteTasks) {
      sessionData.incompleteTasks.forEach(task => {
        tasks.push([
          Utilities.getUuid(),
          sessionId,
          task.text,
          false,
          'session',
          now
        ]);
      });
    }
    
    // Add next session tasks
    if (sessionData.nextSessionTasks && sessionData.nextSessionTasks.length > 0) {
      sessionData.nextSessionTasks.forEach(taskText => {
        tasks.push([
          Utilities.getUuid(),
          sessionId,
          taskText,
          false,
          'next-session',
          now
        ]);
      });
    }
    
    // Batch add tasks
    if (tasks.length > 0) {
      tasksSheet.getRange(tasksSheet.getLastRow() + 1, 1, tasks.length, tasks[0].length)
        .setValues(tasks);
    }
  } catch (error) {
    console.error('Error saving session tasks:', error);
    logError('saveSessionTasks', error);
  }
}

/**
 * 📊 Get time tracking data for reports
 * @param {Object} params - Query parameters
 * @return {Object} Time tracking data
 */
function getTimeTrackingData(params) {
  try {
    // Set default params
    params = params || {};
    const period = params.period || '7'; // Default to 7 days
    
    // Get date range
    let startDate, endDate;
    
    if (params.startDate && params.endDate && period === 'custom') {
      startDate = new Date(params.startDate);
      endDate = new Date(params.endDate);
      // Set end date to end of day
      endDate.setHours(23, 59, 59, 999);
    } else {
      endDate = new Date();
      startDate = new Date();
      startDate.setDate(startDate.getDate() - parseInt(period));
    }
    
    // Get user's sessions
    const sessions = getUserSessions(startDate, endDate);
    
    // Calculate summary statistics
    const summary = calculateTimeSummary(sessions, startDate, endDate);
    
    // Get time trend
    const timeTrend = calculateTimeTrend(startDate, endDate);
    
    // Get activities by day
    const activitiesByDay = calculateActivitiesByDay(startDate, endDate);
    
    // Get task completion
    const taskCompletion = calculateTaskCompletion(startDate, endDate);
    
    // Get top recurring tasks
    const topTasks = getTopRecurringTasks(startDate, endDate);
    
    // Get next session tasks
    const nextSessionTasks = getNextSessionTasks();
    
    return {
      success: true,
      data: {
        summary: summary,
        sessions: sessions,
        timeTrend: timeTrend,
        activitiesByDay: activitiesByDay,
        activities: summary.activityHours,
        taskCompletion: taskCompletion,
        topTasks: topTasks,
        nextSessionTasks: nextSessionTasks
      }
    };
  } catch (error) {
    console.error('Error getting time tracking data:', error);
    logError('getTimeTrackingData', error);
    return {
      success: false,
      message: 'Error retrieving time data: ' + error.toString()
    };
  }
}

/**
 * 👤 Get user's time tracking sessions
 * @param {Date} startDate - Start date for filtering
 * @param {Date} endDate - End date for filtering
 * @return {Array} List of session objects
 */
function getUserSessions(startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sessionsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_SESSIONS);
    const activitiesSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_ACTIVITIES);
    const tasksSheet = ss.getSheetByName('Time Tasks');
    
    if (!sessionsSheet || !activitiesSheet) {
      return [];
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all sessions
    const sessionsData = sessionsSheet.getDataRange().getValues();
    const headers = sessionsData[0];
    
    // Find column indices
    const sessionIdIndex = headers.indexOf('Session ID');
    const userEmailIndex = headers.indexOf('User Email');
    const dateIndex = headers.indexOf('Date');
    const startTimeIndex = headers.indexOf('Start Time');
    const endTimeIndex = headers.indexOf('End Time');
    const durationIndex = headers.indexOf('Duration (ms)');
    const notesIndex = headers.indexOf('Notes');
    const reflectionIndex = headers.indexOf('Reflection');
    
    if (sessionIdIndex === -1 || userEmailIndex === -1 || dateIndex === -1 || durationIndex === -1) {
      return [];
    }
    
    // Filter sessions by user and date range
    const userSessions = sessionsData.slice(1).filter(row => {
      const sessionDate = new Date(row[dateIndex]);
      return row[userEmailIndex] === userEmail && 
             sessionDate >= startDate && 
             sessionDate <= endDate;
    });
    
    // Get activities data for session activities
    let activitiesData = [];
    if (activitiesSheet) {
      activitiesData = activitiesSheet.getDataRange().getValues();
    }
    const actHeaders = activitiesData[0];
    const actSessionIdIndex = actHeaders.indexOf('Session ID');
    const actTypeIndex = actHeaders.indexOf('Activity Type');
    const actNameIndex = actHeaders.indexOf('Activity Name');
    const actStartTimeIndex = actHeaders.indexOf('Start Time');
    const actEndTimeIndex = actHeaders.indexOf('End Time');
    const actDurationIndex = actHeaders.indexOf('Duration (ms)');
    const actNotesIndex = actHeaders.indexOf('Notes');
    
    // Get tasks data
    let tasksData = [];
    if (tasksSheet) {
      tasksData = tasksSheet.getDataRange().getValues();
    }
    const taskHeaders = tasksData[0];
    const taskSessionIdIndex = taskHeaders.indexOf('Session ID');
    const taskTextIndex = taskHeaders.indexOf('Task Text');
    const taskCompletedIndex = taskHeaders.indexOf('Completed');
    const taskTypeIndex = taskHeaders.indexOf('Task Type');
    
    // Map session data to objects
    return userSessions.map(row => {
      const sessionId = row[sessionIdIndex];
      const sessionDate = new Date(row[dateIndex]);
      
      // Get activities for this session
      const sessionActivities = activitiesData.slice(1).filter(actRow => actRow[actSessionIdIndex] === sessionId);
      
      // Calculate primary and meetings time
      let primaryActivity = 0;
      let meetingsTime = 0;
      
      sessionActivities.forEach(actRow => {
        const type = actRow[actTypeIndex];
        const duration = actRow[actDurationIndex];
        
        if (type === 'primary') {
          primaryActivity += duration;
        } else if (['team-meeting', 'one-on-one', 'manager-meeting'].includes(type)) {
          meetingsTime += duration;
        }
      });
      
      // Get tasks for this session
      const sessionTasks = tasksData.slice(1).filter(taskRow => taskRow[taskSessionIdIndex] === sessionId && taskRow[taskTypeIndex] === 'session');
      
      const taskStats = {
        total: sessionTasks.length,
        completed: sessionTasks.filter(taskRow => taskRow[taskCompletedIndex] === true).length
      };
      
      return {
        id: sessionId,
        date: formatDateString(sessionDate),
        startTime: row[startTimeIndex],
        endTime: row[endTimeIndex],
        duration: row[durationIndex],
        notes: row[notesIndex],
        reflection: row[reflectionIndex],
        primaryActivity: primaryActivity / (1000 * 60 * 60), // Convert to hours
        meetingsTime: meetingsTime / (1000 * 60 * 60), // Convert to hours
        taskStats: taskStats
      };
    });
  } catch (error) {
    console.error('Error getting user sessions:', error);
    logError('getUserSessions', error);
    return [];
  }
}

/**
 * 📈 Calculate time summary statistics
 * @param {Array} sessions - User's sessions
 * @param {Date} startDate - Start date
 * @param {Date} endDate - End date
 * @return {Object} Summary statistics
 */
function calculateTimeSummary(sessions, startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const activitiesSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_ACTIVITIES);
    const tasksSheet = ss.getSheetByName('Time Tasks');
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Calculate total sessions and hours
    const totalSessions = sessions.length;
    const totalHours = sessions.reduce((sum, session) => sum + (session.duration / (1000 * 60 * 60)), 0);
    
    // Calculate average session length
    const averageSessionHours = totalSessions > 0 ? totalHours / totalSessions : 0;
    
    // Get all activities
    let allActivities = [];
    if (activitiesSheet) {
      const activitiesData = activitiesSheet.getDataRange().getValues();
      const headers = activitiesData[0];
      
      const sessionIdIndex = headers.indexOf('Session ID');
      const typeIndex = headers.indexOf('Activity Type');
      const durationIndex = headers.indexOf('Duration (ms)');
      
      // Filter by sessions in date range
      const sessionIds = sessions.map(s => s.id);
      allActivities = activitiesData.slice(1).filter(row => sessionIds.includes(row[sessionIdIndex]));
    }
    
    // Calculate hours by activity type
    const activityHours = {};
    TIME_CONFIG.DEFAULT_ACTIVITIES.forEach(activity => activityHours[activity] = 0);
    
    allActivities.forEach(act => {
      const type = act[2]; // Activity Type
      const duration = act[6]; // Duration (ms)
      
      if (activityHours.hasOwnProperty(type)) {
        activityHours[type] += duration / (1000 * 60 * 60);
      } else {
        activityHours['other'] += duration / (1000 * 60 * 60);
      }
    });
    
    // Calculate task completion rate
    let taskCompletionRate = 0;
    let totalTasks = 0;
    let completedTasks = 0;
    
    if (tasksSheet) {
      const tasksData = tasksSheet.getDataRange().getValues();
      const headers = tasksData[0];
      
      const sessionIdIndex = headers.indexOf('Session ID');
      const completedIndex = headers.indexOf('Completed');
      const typeIndex = headers.indexOf('Task Type');
      
      // Filter by sessions in date range
      const sessionIds = sessions.map(s => s.id);
      const sessionTasks = tasksData.slice(1).filter(row => {
        return sessionIds.includes(row[sessionIdIndex]) && row[typeIndex] === 'session';
      });
      
      totalTasks = sessionTasks.length;
      completedTasks = sessionTasks.filter(task => task[completedIndex] === true).length;
      taskCompletionRate = totalTasks > 0 ? completedTasks / totalTasks : 0;
    }
    
    return {
      totalSessions: totalSessions,
      totalHours: totalHours,
      averageSessionHours: averageSessionHours,
      activityHours: activityHours,
      taskCompletionRate: taskCompletionRate,
      totalTasks: totalTasks,
      completedTasks: completedTasks
    };
  } catch (error) {
    console.error('Error calculating time summary:', error);
    logError('calculateTimeSummary', error);
    return {
      totalSessions: 0,
      totalHours: 0,
      averageSessionHours: 0,
      activityHours: {},
      taskCompletionRate: 0
    };
  }
}

/**
 * 📊 Calculate time trend data
 * @param {Date} startDate - Start date
 * @param {Date} endDate - End date
 * @return {Array} Time trend data
 */
function calculateTimeTrend(startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sessionsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_SESSIONS);
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Create map for each day in the range
    const trendData = {};
    const dayCount = Math.ceil((endDate - startDate) / (24 * 60 * 60 * 1000));
    
    for (let i = 0; i < dayCount; i++) {
      const date = new Date(startDate);
      date.setDate(startDate.getDate() + i);
      const dateString = formatDateString(date);
      trendData[dateString] = { date: dateString, hours: 0 };
    }
    
    // If no sessions sheet, return empty trend
    if (!sessionsSheet) {
      return Object.values(trendData);
    }
    
    // Get all sessions
    const sessionsData = sessionsSheet.getDataRange().getValues();
    const headers = sessionsData[0];
    
    // Find column indices
    const userEmailIndex = headers.indexOf('User Email');
    const dateIndex = headers.indexOf('Date');
    const durationIndex = headers.indexOf('Duration (ms)');
    
    if (userEmailIndex === -1 || dateIndex === -1 || durationIndex === -1) {
      return Object.values(trendData);
    }
    
    // Process sessions
    sessionsData.slice(1).forEach(row => {
      const email = row[userEmailIndex];
      const date = new Date(row[dateIndex]);
      const duration = row[durationIndex];
      
      // Skip if not the current user or outside date range
      if (email !== userEmail || date < startDate || date > endDate) {
        return;
      }
      
      const dateString = formatDateString(date);
      if (trendData[dateString]) {
        trendData[dateString].hours += duration / (1000 * 60 * 60);
      }
    });
    
    // Convert map to array and ensure all dates are included
    return Object.values(trendData);
  } catch (error) {
    console.error('Error calculating time trend:', error);
    logError('calculateTimeTrend', error);
    return [];
  }
}

/**
 * 📊 Calculate activities by day
 * @param {Date} startDate - Start date
 * @param {Date} endDate - End date
 * @return {Array} Activities by day data
 */
function calculateActivitiesByDay(startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sessionsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_SESSIONS);
    const activitiesSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_ACTIVITIES);
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Create map for each day in the range
    const dayData = {};
    const dayCount = Math.ceil((endDate - startDate) / (24 * 60 * 60 * 1000));
    
    for (let i = 0; i < dayCount; i++) {
      const date = new Date(startDate);
      date.setDate(startDate.getDate() + i);
      const dateString = formatDateString(date);
      
      const activities = {};
      TIME_CONFIG.DEFAULT_ACTIVITIES.forEach(activity => activities[activity] = 0);
      
      dayData[dateString] = { 
        date: dateString,
        activities: activities
      };
    }
    
    // If sheets don't exist, return empty data
    if (!sessionsSheet || !activitiesSheet) {
      return Object.values(dayData);
    }
    
    // Get all sessions
    const sessionsData = sessionsSheet.getDataRange().getValues();
    const sessionsHeaders = sessionsData[0];
    
    // Find session column indices
    const sessionIdIndex = sessionsHeaders.indexOf('Session ID');
    const userEmailIndex = sessionsHeaders.indexOf('User Email');
    const dateIndex = sessionsHeaders.indexOf('Date');
    
    // Get all activities
    const activitiesData = activitiesSheet.getDataRange().getValues();
    const activitiesHeaders = activitiesData[0];
    
    // Find activities column indices
    const actSessionIdIndex = activitiesHeaders.indexOf('Session ID');
    const actTypeIndex = activitiesHeaders.indexOf('Activity Type');
    const actDurationIndex = activitiesHeaders.indexOf('Duration (ms)');
    
    // Filter user sessions
    const userSessions = {};
    
    sessionsData.slice(1).forEach(row => {
      const email = row[userEmailIndex];
      const date = new Date(row[dateIndex]);
      const sessionId = row[sessionIdIndex];
      
      // Skip if not the current user or outside date range
      if (email !== userEmail || date < startDate || date > endDate) {
        return;
      }
      
      const dateString = formatDateString(date);
      userSessions[sessionId] = dateString;
    });
    
    // Process activities
    activitiesData.slice(1).forEach(row => {
      const sessionId = row[actSessionIdIndex];
      const dateString = userSessions[sessionId];
      
      // Skip if not in user sessions
      if (!dateString) {
        return;
      }
      
      const type = row[actTypeIndex];
      const duration = row[actDurationIndex] / (1000 * 60 * 60); // Convert to hours
      
      if (dayData[dateString] && dayData[dateString].activities[type] !== undefined) {
        dayData[dateString].activities[type] += duration;
      } else if (dayData[dateString]) {
        // If type not recognized, add to 'other'
        dayData[dateString].activities.other += duration;
      }
    });
    
    // Convert map to array
    return Object.values(dayData);
  } catch (error) {
    console.error('Error calculating activities by day:', error);
    logError('calculateActivitiesByDay', error);
    return [];
  }
}

/**
 * 📊 Calculate task completion data
 * @param {Date} startDate - Start date
 * @param {Date} endDate - End date
 * @return {Array} Task completion data
 */
function calculateTaskCompletion(startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sessionsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_SESSIONS);
    const tasksSheet = ss.getSheetByName('Time Tasks');
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Create map for each day in the range
    const taskData = {};
    const dayCount = Math.ceil((endDate - startDate) / (24 * 60 * 60 * 1000));
    
    for (let i = 0; i < dayCount; i++) {
      const date = new Date(startDate);
      date.setDate(startDate.getDate() + i);
      const dateString = formatDateString(date);
      taskData[dateString] = { 
        date: dateString,
        completed: 0,
        incomplete: 0
      };
    }
    
    // If sheets don't exist, return empty data
    if (!sessionsSheet || !tasksSheet) {
      return Object.values(taskData);
    }
    
    // Get all sessions
    const sessionsData = sessionsSheet.getDataRange().getValues();
    const sessionsHeaders = sessionsData[0];
    
    // Find session column indices
    const sessionIdIndex = sessionsHeaders.indexOf('Session ID');
    const userEmailIndex = sessionsHeaders.indexOf('User Email');
    const dateIndex = sessionsHeaders.indexOf('Date');
    
    // Get all tasks
    const tasksData = tasksSheet.getDataRange().getValues();
    const tasksHeaders = tasksData[0];
    
    // Find tasks column indices
    const taskSessionIdIndex = tasksHeaders.indexOf('Session ID');
    const taskCompletedIndex = tasksHeaders.indexOf('Completed');
    const taskTypeIndex = tasksHeaders.indexOf('Task Type');
    
    // Filter user sessions
    const userSessions = {};
    
    sessionsData.slice(1).forEach(row => {
      const email = row[userEmailIndex];
      const date = new Date(row[dateIndex]);
      const sessionId = row[sessionIdIndex];
      
      // Skip if not the current user or outside date range
      if (email !== userEmail || date < startDate || date > endDate) {
        return;
      }
      
      const dateString = formatDateString(date);
      userSessions[sessionId] = dateString;
    });
    
    // Process tasks
    tasksData.slice(1).forEach(row => {
      const sessionId = row[taskSessionIdIndex];
      const dateString = userSessions[sessionId];
      const isCompleted = row[taskCompletedIndex] === true;
      const taskType = row[taskTypeIndex];
      
      // Skip if not in user sessions or not a session task
      if (!dateString || taskType !== 'session') {
        return;
      }
      
      if (isCompleted) {
        taskData[dateString].completed++;
      } else {
        taskData[dateString].incomplete++;
      }
    });
    
    // Convert map to array
    return Object.values(taskData);
  } catch (error) {
    console.error('Error calculating task completion:', error);
    logError('calculateTaskCompletion', error);
    return [];
  }
}

/**
 * 🔄 Get top recurring tasks
 * @param {Date} startDate - Start date
 * @param {Date} endDate - End date
 * @return {Array} Top recurring tasks
 */
function getTopRecurringTasks(startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sessionsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_SESSIONS);
    const tasksSheet = ss.getSheetByName('Time Tasks');
    
    // If sheets don't exist, return empty array
    if (!sessionsSheet || !tasksSheet) {
      return [];
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get all sessions
    const sessionsData = sessionsSheet.getDataRange().getValues();
    const sessionsHeaders = sessionsData[0];
    
    // Find session column indices
    const sessionIdIndex = sessionsHeaders.indexOf('Session ID');
    const userEmailIndex = sessionsHeaders.indexOf('User Email');
    const dateIndex = sessionsHeaders.indexOf('Date');
    
    // Filter user sessions
    const userSessions = [];
    
    sessionsData.slice(1).forEach(row => {
      const email = row[userEmailIndex];
      const date = new Date(row[dateIndex]);
      const sessionId = row[sessionIdIndex];
      
      // Skip if not the current user or outside date range
      if (email !== userEmail || date < startDate || date > endDate) {
        return;
      }
      
      userSessions.push(sessionId);
    });
    
    // Get all tasks
    const tasksData = tasksSheet.getDataRange().getValues();
    const tasksHeaders = tasksData[0];
    
    // Find tasks column indices
    const taskSessionIdIndex = tasksHeaders.indexOf('Session ID');
    const taskTextIndex = tasksHeaders.indexOf('Task Text');
    const taskCompletedIndex = tasksHeaders.indexOf('Completed');
    const taskTypeIndex = tasksHeaders.indexOf('Task Type');
    
    // Count task occurrences
    const taskCounts = {};
    
    tasksData.slice(1).forEach(row => {
      const sessionId = row[taskSessionIdIndex];
      const taskText = row[taskTextIndex].toLowerCase();
      const isCompleted = row[taskCompletedIndex] === true;
      const taskType = row[taskTypeIndex];
      
      // Skip if not in user sessions or not a session task
      if (!userSessions.includes(sessionId) || taskType !== 'session') {
        return;
      }
      
      // Initialize if new task
      if (!taskCounts[taskText]) {
        taskCounts[taskText] = {
          text: row[taskTextIndex], // Original text with proper casing
          totalCount: 0,
          completedCount: 0
        };
      }
      
      taskCounts[taskText].totalCount++;
      if (isCompleted) taskCounts[taskText].completedCount++;
    });
    
    // Filter to tasks that occur more than once
    const recurringTasks = Object.values(taskCounts)
      .filter(task => task.totalCount > 1)
      .sort((a, b) => b.totalCount - a.totalCount)
      .slice(0, 10); // Get top 10
    
    return recurringTasks;
  } catch (error) {
    console.error('Error getting top recurring tasks:', error);
    logError('getTopRecurringTasks', error);
    return [];
  }
}

/**
 * 📋 Get next session tasks
 * @return {Array} Next session tasks
 */
function getNextSessionTasks() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName('Time Tasks');
    
    // If sheet doesn't exist, return empty array
    if (!tasksSheet) {
      return [];
    }
    
    // Get current user email
    const userEmail = Session.getActiveUser().getEmail();
    
    // Get user sessions first
    const sessionsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_SESSIONS);
    const userSessionIds = [];
    
    if (sessionsSheet) {
      const sessionsData = sessionsSheet.getDataRange().getValues();
      const headers = sessionsData[0];
      const userEmailIndex = headers.indexOf('User Email');
      const sessionIdIndex = headers.indexOf('Session ID');
      
      sessionsData.slice(1).forEach(row => {
        if (row[userEmailIndex] === userEmail) {
          userSessionIds.push(row[sessionIdIndex]);
        }
      });
    }
    
    // Get all tasks
    const tasksData = tasksSheet.getDataRange().getValues();
    const headers = tasksData[0];
    
    // Find column indices
    const sessionIdIndex = headers.indexOf('Session ID');
    const taskTextIndex = headers.indexOf('Task Text');
    const taskTypeIndex = headers.indexOf('Task Type');
    const createdAtIndex = headers.indexOf('Created At');
    
    // Filter next session tasks for the user
    const nextTasks = tasksData.slice(1).filter(row => {
      return userSessionIds.includes(row[sessionIdIndex]) && 
             row[taskTypeIndex] === 'next-session';
    });
    
    // Sort by created at (newest first)
    nextTasks.sort((a, b) => new Date(b[createdAtIndex]) - new Date(a[createdAtIndex]));
    
    // Get unique task texts (newest first for duplicates)
    const seenTasks = new Set();
    const uniqueTasks = [];
    
    nextTasks.forEach(task => {
      const text = task[taskTextIndex];
      if (!seenTasks.has(text)) {
        seenTasks.add(text);
        uniqueTasks.push(text);
      }
    });
    
    // Return top 5 tasks
    return uniqueTasks.slice(0, 5);
  } catch (error) {
    console.error('Error getting next session tasks:', error);
    logError('getNextSessionTasks', error);
    return [];
  }
}

/**
 * 📄 Get time session details
 * @param {String} sessionId - Session ID
 * @return {Object} Session details
 */
function getTimeSessionDetails(sessionId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sessionsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_SESSIONS);
    const activitiesSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TIME_ACTIVITIES);
    const tasksSheet = ss.getSheetByName('Time Tasks');
    
    if (!sessionsSheet || !activitiesSheet || !tasksSheet) {
      return {
        success: false,
        message: 'Required sheets not found'
      };
    }
    
    // Get all sessions
    const sessionsData = sessionsSheet.getDataRange().getValues();
    const sessionsHeaders = sessionsData[0];
    
    // Find session column indices
    const sessionIdIndex = sessionsHeaders.indexOf('Session ID');
    const userEmailIndex = sessionsHeaders.indexOf('User Email');
    const dateIndex = sessionsHeaders.indexOf('Date');
    const startTimeIndex = sessionsHeaders.indexOf('Start Time');
    const endTimeIndex = sessionsHeaders.indexOf('End Time');
    const durationIndex = sessionsHeaders.indexOf('Duration (ms)');
    const notesIndex = sessionsHeaders.indexOf('Notes');
    const reflectionIndex = sessionsHeaders.indexOf('Reflection');
    
    // Find the session
    const sessionRow = sessionsData.slice(1).find(row => row[sessionIdIndex] === sessionId);
    
    if (!sessionRow) {
      return {
        success: false,
        message: 'Session not found'
      };
    }
    
    // Check if it belongs to the current user
    const userEmail = Session.getActiveUser().getEmail();
    if (sessionRow[userEmailIndex] !== userEmail) {
      return {
        success: false,
        message: 'You do not have permission to view this session'
      };
    }
    
    // Get session activities
    const activitiesData = activitiesSheet.getDataRange().getValues();
    const activitiesHeaders = activitiesData[0];
    
    const actSessionIdIndex = activitiesHeaders.indexOf('Session ID');
    const actTypeIndex = activitiesHeaders.indexOf('Activity Type');
    const actNameIndex = activitiesHeaders.indexOf('Activity Name');
    const actStartTimeIndex = activitiesHeaders.indexOf('Start Time');
    const actEndTimeIndex = activitiesHeaders.indexOf('End Time');
    const actDurationIndex = activitiesHeaders.indexOf('Duration (ms)');
    const actNotesIndex = activitiesHeaders.indexOf('Notes');
    
    const activities = activitiesData.slice(1)
      .filter(row => row[actSessionIdIndex] === sessionId)
      .map(row => ({
        activity: row[actTypeIndex],
        activityName: row[actNameIndex],
        timestamp: row[actStartTimeIndex],
        endTime: row[actEndTimeIndex],
        duration: row[actDurationIndex],
        notes: row[actNotesIndex]
      }));
    
    // Get session tasks
    const tasksData = tasksSheet.getDataRange().getValues();
    const tasksHeaders = tasksData[0];
    
    const taskSessionIdIndex = tasksHeaders.indexOf('Session ID');
    const taskTextIndex = tasksHeaders.indexOf('Task Text');
    const taskCompletedIndex = tasksHeaders.indexOf('Completed');
    const taskTypeIndex = tasksHeaders.indexOf('Task Type');
    
    const sessionTasks = tasksData.slice(1).filter(row => row[taskSessionIdIndex] === sessionId);
    
    const completedTasks = sessionTasks
      .filter(row => row[taskTypeIndex] === 'session' && row[taskCompletedIndex] === true)
      .map(row => ({
        text: row[taskTextIndex]
      }));
    
    const incompleteTasks = sessionTasks
      .filter(row => row[taskTypeIndex] === 'session' && row[taskCompletedIndex] !== true)
      .map(row => ({
        text: row[taskTextIndex]
      }));
    
    const nextSessionTasks = sessionTasks
      .filter(row => row[taskTypeIndex] === 'next-session')
      .map(row => row[taskTextIndex]);
    
    // Build session object
    const session = {
      id: sessionId,
      date: formatDateString(new Date(sessionRow[dateIndex])),
      startTime: sessionRow[startTimeIndex],
      endTime: sessionRow[endTimeIndex],
      duration: sessionRow[durationIndex],
      notes: sessionRow[notesIndex],
      reflection: sessionRow[reflectionIndex],
      activityLog: activities,
      completedTasks: completedTasks,
      incompleteTasks: incompleteTasks,
      nextSessionTasks: nextSessionTasks
    };
    
    return {
      success: true,
      session: session
    };
  } catch (error) {
    console.error('Error getting time session details:', error);
    logError('getTimeSessionDetails', error);
    return {
      success: false,
      message: 'Error retrieving session details: ' + error.toString()
    };
  }
}

/**
 * 📤 Export time session
 * @param {String} sessionId - Session ID
 * @return {Object} Success status and export URL
 */
function exportTimeSession(sessionId) {
  try {
    // Get session details
    const result = getTimeSessionDetails(sessionId);
    
    if (!result.success) {
      return result;
    }
    
    const session = result.session;
    
    // Create a PDF for the session
    const htmlTemplate = HtmlService.createTemplateFromFile('time-session-export');
    htmlTemplate.session = session;
    const html = htmlTemplate.evaluate().getContent();
    
    // Create a temporary Google Doc to convert to PDF
    const tempDoc = DocumentApp.create(`Time Session Export - ${session.date}`);
    const tempDocId = tempDoc.getId();
    const tempDocFile = DriveApp.getFileById(tempDocId);
    
    // Convert HTML for use in Google Docs (simplified approach)
    const docBody = tempDoc.getBody();
    docBody.appendParagraph(`Time Session Report - ${session.date}`).setHeading(DocumentApp.ParagraphHeading.HEADING1);
    
    // Session info
    docBody.appendParagraph('Session Information').setHeading(DocumentApp.ParagraphHeading.HEADING2);
    docBody.appendParagraph(`Date: ${session.date}`);
    docBody.appendParagraph(`Duration: ${formatDuration(session.duration)}`);
    
    if (session.notes) {
      docBody.appendParagraph('Notes').setHeading(DocumentApp.ParagraphHeading.HEADING3);
      docBody.appendParagraph(session.notes);
    }
    
    // Activities
    docBody.appendParagraph('Activities').setHeading(DocumentApp.ParagraphHeading.HEADING2);
    session.activityLog.forEach(activity => {
      let activityText = `- ${activity.activityName}`;
      if (activity.duration) {
        activityText += ` (${formatDuration(activity.duration)})`;
      }
      if (activity.notes) {
        activityText += `: ${activity.notes}`;
      }
      docBody.appendParagraph(activityText);
    });
    
    // Tasks
    docBody.appendParagraph('Tasks').setHeading(DocumentApp.ParagraphHeading.HEADING2);
    
    if (session.completedTasks.length > 0) {
      docBody.appendParagraph('Completed Tasks').setHeading(DocumentApp.ParagraphHeading.HEADING3);
      session.completedTasks.forEach(task => {
        docBody.appendParagraph(`✓ ${task.text}`);
      });
    }
    
    if (session.incompleteTasks.length > 0) {
      docBody.appendParagraph('Incomplete Tasks').setHeading(DocumentApp.ParagraphHeading.HEADING3);
      session.incompleteTasks.forEach(task => {
        docBody.appendParagraph(`○ ${task.text}`);
      });
    }
    
    // Reflection
    if (session.reflection) {
      docBody.appendParagraph('Reflection').setHeading(DocumentApp.ParagraphHeading.HEADING2);
      docBody.appendParagraph(session.reflection);
    }
    
    // Next Session Tasks
    if (session.nextSessionTasks && session.nextSessionTasks.length > 0) {
      docBody.appendParagraph('Next Session Tasks').setHeading(DocumentApp.ParagraphHeading.HEADING2);
      session.nextSessionTasks.forEach(task => {
        docBody.appendParagraph(`→ ${task}`);
      });
    }
    
    // Save and close the doc
    tempDoc.saveAndClose();
    
    // Convert to PDF
    const pdfBlob = tempDocFile.getAs('application/pdf');
    const pdfFile = DriveApp.createFile(pdfBlob);
    pdfFile.setName(`Time Session Report - ${session.date}.pdf`);
    
    // Delete the temporary doc
    tempDocFile.setTrashed(true);
    
    return {
      success: true,
      url: pdfFile.getUrl()
    };
  } catch (error) {
    console.error('Error exporting time session:', error);
    logError('exportTimeSession', error);
    return {
      success: false,
      message: 'Error exporting session: ' + error.toString()
    };
  }
}

/**
 * 📅 Format date as YYYY-MM-DD
 * @param {Date} date - Date to format
 * @return {String} Formatted date
 */
function formatDateString(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}

/**
 * ⌛ Format duration in milliseconds to readable time
 * @param {Number} duration - Duration in milliseconds
 * @return {String} Formatted duration
 */
function formatDuration(duration) {
  const hours = Math.floor(duration / (1000 * 60 * 60));
  const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((duration % (1000 * 60)) / 1000);
  
  if (hours > 0) {
    return `${hours}h ${minutes}m`;
  } else if (minutes > 0) {
    return `${minutes}m ${seconds}s`;
  } else {
    return `${seconds}s`;
  }
}

// SCHEDULE MANAGEMENT FUNCTIONS

/**
 * 📋 Get team members for schedule management
 * @return {Object} Team members data
 */
function getTeamMembers() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const membersSheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!membersSheet) {
      return {
        success: false,
        message: 'Team members sheet not found'
      };
    }
    
    // Get all team members
    const membersData = membersSheet.getDataRange().getValues();
    const headers = membersData[0];
    
    // Find column indices
    const idIndex = headers.indexOf('Member ID');
    const nameIndex = headers.indexOf('Name');
    const roleIndex = headers.indexOf('Role');
    const activeIndex = headers.indexOf('Active');
    
    // Filter active members
    const members = membersData.slice(1)
      .filter(row => row[activeIndex] !== false)
      .map(row => ({
        id: row[idIndex],
        name: row[nameIndex],
        role: row[roleIndex]
      }));
    
    return {
      success: true,
      teamMembers: members
    };
  } catch (error) {
    console.error('Error getting team members:', error);
    logError('getTeamMembers', error);
    return {
      success: false,
      message: 'Error retrieving team members: ' + error.toString()
    };
  }
}

/**
 * 📆 Get team member schedule
 * @param {String} memberId - Team member ID
 * @param {String} startDate - Start date (YYYY-MM-DD)
 * @param {String} endDate - End date (YYYY-MM-DD)
 * @return {Object} Schedule data
 */
function getTeamMemberSchedule(memberId, startDate, endDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const eventsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.SCHEDULE_EVENTS);
    
    if (!eventsSheet) {
      return {
        success: false,
        message: 'Schedule events sheet not found'
      };
    }
    
    // Parse dates
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    // Get all events
    const eventsData = eventsSheet.getDataRange().getValues();
    const headers = eventsData[0];
    
    // Find column indices
    const eventIdIndex = headers.indexOf('Event ID');
    const memberIdIndex = headers.indexOf('Member ID');
    const dateIndex = headers.indexOf('Date');
    const startTimeIndex = headers.indexOf('Start Time');
    const endTimeIndex = headers.indexOf('End Time');
    const statusIndex = headers.indexOf('Status');
    const titleIndex = headers.indexOf('Title');
    const notesIndex = headers.indexOf('Notes');
    
    // Filter events for the member and date range
    const events = eventsData.slice(1)
      .filter(row => {
        if (row[memberIdIndex] !== memberId) return false;
        
        const eventDate = new Date(row[dateIndex]);
        return eventDate >= start && eventDate <= end;
      })
      .map(row => ({
        id: row[eventIdIndex],
        date: formatDateString(new Date(row[dateIndex])),
        startTime: row[startTimeIndex],
        endTime: row[endTimeIndex],
        status: row[statusIndex],
        title: row[titleIndex],
        notes: row[notesIndex]
      }));
    
    // Calculate statistics
    const stats = calculateScheduleStats(events);
    
    return {
      success: true,
      scheduleData: {
        events: events,
        stats: stats
      }
    };
  } catch (error) {
    console.error('Error getting team member schedule:', error);
    logError('getTeamMemberSchedule', error);
    return {
      success: false,
      message: 'Error retrieving schedule: ' + error.toString()
    };
  }
}

/**
 * 📊 Calculate schedule statistics
 * @param {Array} events - Schedule events
 * @return {Object} Schedule statistics
 */
function calculateScheduleStats(events) {
  // Calculate total hours by status
  const statusHours = {};
  TIME_CONFIG.SCHEDULE_STATUSES.forEach(status => statusHours[status] = 0);
  
  let totalHours = 0;
  
  events.forEach(event => {
    // Parse times
    const startTime = parseTimeString(event.startTime);
    const endTime = parseTimeString(event.endTime);
    
    if (!startTime || !endTime) return;
    
    // Calculate hours
    let hours;
    if (endTime > startTime) {
      hours = (endTime - startTime) / 3600000; // Convert ms to hours
    } else {
      // Handle overnight shifts
      hours = (24 - startTime / 3600000) + (endTime / 3600000);
    }
    
    totalHours += hours;
    
    // Add to status hours
    if (statusHours.hasOwnProperty(event.status)) {
      statusHours[event.status] += hours;
    }
  });
  
  // Calculate percentages
  const availablePercentage = totalHours > 0 ? (statusHours.available / totalHours) * 100 : 0;
  
  return {
    totalHours: totalHours,
    availableHours: statusHours.available,
    busyHours: statusHours.busy,
    awayHours: statusHours.away,
    ptoHours: statusHours.pto,
    trainingHours: statusHours.training,
    meetingHours: statusHours.meeting,
    availablePercentage: availablePercentage
  };
}

/**
 * ⏰ Parse time string (HH:MM) to milliseconds since midnight
 * @param {String} timeString - Time string (HH:MM)
 * @return {Number} Milliseconds since midnight
 */
function parseTimeString(timeString) {
  if (!timeString) return null;
  
  const parts = timeString.split(':');
  if (parts.length !== 2) return null;
  
  const hours = parseInt(parts[0]);
  const minutes = parseInt(parts[1]);
  
  if (isNaN(hours) || isNaN(minutes)) return null;
  
  return (hours * 60 * 60 * 1000) + (minutes * 60 * 1000);
}

/**
 * 💾 Save schedule event
 * @param {Object} eventData - Schedule event data
 * @return {Object} Success status
 */
function saveScheduleEvent(eventData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const eventsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.SCHEDULE_EVENTS);
    
    if (!eventsSheet) {
      return {
        success: false,
        message: 'Schedule events sheet not found'
      };
    }
    
    const now = new Date();
    const user = Session.getActiveUser().getEmail();
    
    // Check if this is a new event or an update
    if (eventData.id) {
      // Update existing event
      const eventsData = eventsSheet.getDataRange().getValues();
      const headers = eventsData[0];
      
      // Find column indices
      const eventIdIndex = headers.indexOf('Event ID');
      const memberIdIndex = headers.indexOf('Member ID');
      const dateIndex = headers.indexOf('Date');
      const startTimeIndex = headers.indexOf('Start Time');
      const endTimeIndex = headers.indexOf('End Time');
      const statusIndex = headers.indexOf('Status');
      const titleIndex = headers.indexOf('Title');
      const notesIndex = headers.indexOf('Notes');
      
      // Find the event
      let eventRow = -1;
      for (let i = 1; i < eventsData.length; i++) {
        if (eventsData[i][eventIdIndex] === eventData.id) {
          eventRow = i + 1; // +1 because rows are 1-based
          break;
        }
      }
      
      if (eventRow === -1) {
        return {
          success: false,
          message: 'Event not found'
        };
      }
      
      // Update the event
      eventsSheet.getRange(eventRow, dateIndex + 1).setValue(eventData.date);
      eventsSheet.getRange(eventRow, startTimeIndex + 1).setValue(eventData.startTime);
      eventsSheet.getRange(eventRow, endTimeIndex + 1).setValue(eventData.endTime);
      eventsSheet.getRange(eventRow, statusIndex + 1).setValue(eventData.status);
      eventsSheet.getRange(eventRow, titleIndex + 1).setValue(eventData.title || '');
      eventsSheet.getRange(eventRow, notesIndex + 1).setValue(eventData.notes || '');
      
    } else {
      // Create new event
      const eventId = Utilities.getUuid();
      
      eventsSheet.appendRow([
        eventId,
        eventData.memberId,
        eventData.date,
        eventData.startTime,
        eventData.endTime,
        eventData.status,
        eventData.title || '',
        eventData.notes || '',
        user,
        now
      ]);
      
      // Handle repeating events
      if (eventData.repeat) {
        createRepeatingEvents(eventData, eventId);
      }
    }
    
    return {
      success: true,
      message: 'Event saved successfully'
    };
  } catch (error) {
    console.error('Error saving schedule event:', error);
    logError('saveScheduleEvent', error);
    return {
      success: false,
      message: 'Error saving event: ' + error.toString()
    };
  }
}

/**
 * 🔄 Create repeating events
 * @param {Object} eventData - Original event data
 * @param {String} originalEventId - Original event ID
 */
function createRepeatingEvents(eventData, originalEventId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const eventsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.SCHEDULE_EVENTS);
    
    if (!eventsSheet) return;
    
    const user = Session.getActiveUser().getEmail();
    const now = new Date();
    
    // Parse dates
    const startDate = new Date(eventData.date);
    const untilDate = new Date(eventData.repeat.until);
    
    // Calculate day increment
    let dayIncrement = 1; // Default to daily
    if (eventData.repeat.frequency === 'weekly') {
      dayIncrement = 7;
    }
    
    // Create repeating events
    const currentDate = new Date(startDate);
    currentDate.setDate(currentDate.getDate() + dayIncrement); // Start with the next date
    
    const events = [];
    
    while (currentDate <= untilDate) {
      const eventId = Utilities.getUuid();
      const eventDate = formatDateString(currentDate);
      
      events.push([
        eventId,
        eventData.memberId,
        eventDate,
        eventData.startTime,
        eventData.endTime,
        eventData.status,
        eventData.title || '',
        eventData.notes || '',
        user,
        now
      ]);
      
      // Move to next date
      currentDate.setDate(currentDate.getDate() + dayIncrement);
    }
    
    // Batch add events
    if (events.length > 0) {
      eventsSheet.getRange(eventsSheet.getLastRow() + 1, 1, events.length, events[0].length)
        .setValues(events);
    }
  } catch (error) {
    console.error('Error creating repeating events:', error);
    logError('createRepeatingEvents', error);
  }
}

/**
 * 🗑️ Delete schedule event
 * @param {String} eventId - Event ID
 * @return {Object} Success status
 */
function deleteScheduleEvent(eventId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const eventsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.SCHEDULE_EVENTS);
    
    if (!eventsSheet) {
      return {
        success: false,
        message: 'Schedule events sheet not found'
      };
    }
    
    // Find the event
    const eventsData = eventsSheet.getDataRange().getValues();
    const headers = eventsData[0];
    const eventIdIndex = headers.indexOf('Event ID');
    
    let eventRow = -1;
    for (let i = 1; i < eventsData.length; i++) {
      if (eventsData[i][eventIdIndex] === eventId) {
        eventRow = i + 1; // +1 because rows are 1-based
        break;
      }
    }
    
    if (eventRow === -1) {
      return {
        success: false,
        message: 'Event not found'
      };
    }
    
    // Delete the event
    eventsSheet.deleteRow(eventRow);
    
    return {
      success: true,
      message: 'Event deleted successfully'
    };
  } catch (error) {
    console.error('Error deleting schedule event:', error);
    logError('deleteScheduleEvent', error);
    return {
      success: false,
      message: 'Error deleting event: ' + error.toString()
    };
  }
}

/**
 * 🏢 Get teams for filtering
 * @return {Object} Teams data
 */
function getTeams() {
  try {
    // In a more complex system, you might have a Teams sheet
    // For now, we'll return some dummy data
    return {
      success: true,
      teams: [
        { id: 'team1', name: 'Operations Team' },
        { id: 'team2', name: 'Support Team' },
        { id: 'team3', name: 'Administrative Team' }
      ]
    };
  } catch (error) {
    console.error('Error getting teams:', error);
    logError('getTeams', error);
    return {
      success: false,
      message: 'Error retrieving teams: ' + error.toString()
    };
  }
}

/**
 * 📊 Get schedule report data
 * @param {Object} params - Report parameters
 * @return {Object} Schedule report data
 */
function getScheduleReportData(params) {
  try {
    // Process params
    params = params || {};
    const dateRange = params.dateRange || 'current-week';
    
    // Calculate date range
    let startDate, endDate;
    
    if (dateRange === 'custom' && params.startDate && params.endDate) {
      startDate = new Date(params.startDate);
      endDate = new Date(params.endDate);
      // Set end date to end of day
      endDate.setHours(23, 59, 59, 999);
    } else {
      const now = new Date();
      
      switch (dateRange) {
        case 'next-week':
          startDate = getNextMonday();
          endDate = new Date(startDate);
          endDate.setDate(startDate.getDate() + 6);
          break;
        case 'last-week':
          endDate = getPreviousSunday();
          startDate = new Date(endDate);
          startDate.setDate(endDate.getDate() - 6);
          break;
        case 'current-month':
          startDate = new Date(now.getFullYear(), now.getMonth(), 1);
          endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
          break;
        case 'current-week':
        default:
          // Current week (Sunday to Saturday)
          const day = now.getDay(); // 0 = Sunday
          startDate = new Date(now);
          startDate.setDate(now.getDate() - day);
          endDate = new Date(startDate);
          endDate.setDate(startDate.getDate() + 6);
      }
    }
    
    // Format dates
    startDate.setHours(0, 0, 0, 0);
    endDate.setHours(23, 59, 59, 999);
    
    // Get schedule data
    const scheduleData = getScheduleData(startDate, endDate, params.teamId);
    
    // Calculate summary statistics
    const summary = calculateScheduleSummary(scheduleData);
    
    // Generate insights
    const insights = generateScheduleInsights(scheduleData, summary);
    
    return {
      success: true,
      data: {
        dateRange: {
          start: formatDateString(startDate),
          end: formatDateString(endDate)
        },
        stats: summary.stats,
        coverageByDay: summary.coverageByDay,
        hourlyCoverage: summary.hourlyCoverage,
        statusDistribution: summary.statusDistribution,
        scheduleByMember: scheduleData.scheduleByMember,
        scheduleStats: summary.scheduleStats,
        coverageAnalysis: summary.coverageAnalysis,
        insights: insights,
        trends: getTrendData()
      }
    };
  } catch (error) {
    console.error('Error getting schedule report data:', error);
    logError('getScheduleReportData', error);
    return {
      success: false,
      message: 'Error retrieving schedule report data: ' + error.toString()
    };
  }
}

/**
 * 📅 Get schedule data
 * @param {Date} startDate - Start date
 * @param {Date} endDate - End date
 * @param {String} teamId - Team ID (optional)
 * @return {Object} Schedule data
 */
function getScheduleData(startDate, endDate, teamId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const eventsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.SCHEDULE_EVENTS);
    const membersSheet = ss.getSheetByName(CONFIG.SHEETS.TEAM_MEMBERS);
    
    if (!eventsSheet || !membersSheet) {
      return {
        scheduleByMember: []
      };
    }
    
    // Get members data
    const membersData = membersSheet.getDataRange().getValues();
    const memberHeaders = membersData[0];
    
    // Find column indices
    const memberIdIndex = memberHeaders.indexOf('Member ID');
    const nameIndex = memberHeaders.indexOf('Name');
    const roleIndex = memberHeaders.indexOf('Role');
    const departmentIndex = memberHeaders.indexOf('Department');
    
    // Get events data
    const eventsData = eventsSheet.getDataRange().getValues();
    const eventHeaders = eventsData[0];
    
    // Find column indices
    const eventIdIndex = eventHeaders.indexOf('Event ID');
    const eventMemberIdIndex = eventHeaders.indexOf('Member ID');
    const dateIndex = eventHeaders.indexOf('Date');
    const startTimeIndex = eventHeaders.indexOf('Start Time');
    const endTimeIndex = eventHeaders.indexOf('End Time');
    const statusIndex = eventHeaders.indexOf('Status');
    const titleIndex = eventHeaders.indexOf('Title');
    
    // Filter events within date range
    const events = eventsData.slice(1).filter(row => {
      const eventDate = new Date(row[dateIndex]);
      return eventDate >= startDate && eventDate <= endDate;
    });
    
    // Group members and their schedules
    const memberMap = {};
    
    membersData.slice(1).forEach(row => {
      const memberId = row[memberIdIndex];
      const department = row[departmentIndex];
      
      // Skip if filtering by team and not matching
      if (teamId && department !== teamId) return;
      
      memberMap[memberId] = {
        id: memberId,
        name: row[nameIndex],
        role: row[roleIndex],
        schedule: []
      };
    });
    
    // Create date map for the range
        const dateMap = {};
    let currentDate = new Date(startDate);
    
    // Create an entry for each day
    while (currentDate <= endDate) {
      const dateString = formatDateString(currentDate);
      dateMap[dateString] = { date: dateString };
      
      // Move to next day
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    // Process events
    events.forEach(event => {
      const memberId = event[eventMemberIdIndex];
      const eventDate = formatDateString(new Date(event[dateIndex]));
      
      // Skip if member is not in map (filtered by team)
      if (!memberMap[memberId]) return;
      
      // Ensure the schedule has entries for all days
      if (!memberMap[memberId].schedule || memberMap[memberId].schedule.length === 0) {
        memberMap[memberId].schedule = Object.values(dateMap).map(d => ({
          date: d.date,
          status: null,
          title: null,
          hours: 0
        }));
      }
      
      // Find the day in the schedule
      const dayIndex = memberMap[memberId].schedule.findIndex(day => day.date === eventDate);
      if (dayIndex !== -1) {
        // Calculate hours
        const startTime = parseTimeString(event[startTimeIndex]);
        const endTime = parseTimeString(event[endTimeIndex]);
        
        let hours = 0;
        if (startTime !== null && endTime !== null) {
          if (endTime > startTime) {
            hours = (endTime - startTime) / (1000 * 60 * 60);
          } else {
            // Overnight shift
            hours = (24 - startTime / (1000 * 60 * 60)) + (endTime / (1000 * 60 * 60));
          }
        }
        
        // Update the day with event info
        memberMap[memberId].schedule[dayIndex] = {
          date: eventDate,
          status: event[statusIndex],
          title: event[titleIndex],
          hours: hours
        };
      }
    });
    
    // Convert map to array
    const scheduleByMember = Object.values(memberMap);
    
    return {
      scheduleByMember: scheduleByMember
    };
  } catch (error) {
    console.error('Error getting schedule data:', error);
    logError('getScheduleData', error);
    return {
      scheduleByMember: []
    };
  }
}

/**
 * 📊 Calculate schedule summary
 * @param {Object} scheduleData - Schedule data
 * @return {Object} Summary data
 */
function calculateScheduleSummary(scheduleData) {
  try {
    const scheduleByMember = scheduleData.scheduleByMember || [];
    
    // Initialize stats
    const stats = {
      coverageRate: 0,
      scheduledHours: 0,
      avgDailyStaff: 0,
      ptoHours: 0,
      coverageTrend: 1.5 // Mock data, would need historical data comparison
    };
    
    // Initialize status distribution
    const statusDistribution = {};
    TIME_CONFIG.SCHEDULE_STATUSES.forEach(status => statusDistribution[status] = 0);
    
    // Calculate by day coverage
    const coverageByDay = [];
    const hourlyStaffCount = {};
    
    for (let hour = 0; hour < 24; hour++) {
      hourlyStaffCount[hour] = 0;
    }
    
    // Process schedules
    if (scheduleByMember.length > 0) {
      // Get number of days from first member's schedule
      const dayCount = scheduleByMember[0].schedule ? scheduleByMember[0].schedule.length : 0;
      
      // Initialize coverage by day
      for (let i = 0; i < dayCount; i++) {
        coverageByDay.push({
          date: scheduleByMember[0].schedule[i].date,
          coverage: 0,
          target: 100
        });
      }
      
      // Process each member's schedule
      scheduleByMember.forEach(member => {
        if (!member.schedule) return;
        
        member.schedule.forEach((day, index) => {
          if (!day.status) return;
          
          // Add to status distribution
          if (statusDistribution[day.status] !== undefined) {
            statusDistribution[day.status] += day.hours || 0;
          }
          
          // Track total scheduled hours
          stats.scheduledHours += day.hours || 0;
          
          // Track PTO hours
          if (day.status === 'pto') {
            stats.ptoHours += day.hours || 0;
          }
          
          // Add to coverage if available
          if (day.status === 'available') {
            // Update coverage by day
            if (index < coverageByDay.length) {
              // Simplified coverage calculation: % of team members available
              coverageByDay[index].coverage += (1 / scheduleByMember.length) * 100;
            }
            
            // Add to hourly coverage (simplified estimate)
            for (let hour = 0; hour < 24; hour++) {
              // Assume 8-hour shift distributed through day
              if (day.hours && day.hours > 0) {
                hourlyStaffCount[hour] += 1/3; // Simplified distribution
              }
            }
          }
        });
      });
      
      // Calculate average daily staff (simplistic model)
      stats.avgDailyStaff = scheduleByMember.length / 2; // Assuming 2 shifts
      
      // Calculate overall coverage rate (average of daily rates)
      if (coverageByDay.length > 0) {
        stats.coverageRate = coverageByDay.reduce((sum, day) => sum + day.coverage, 0) / coverageByDay.length;
      }
    }
    
    // Format hourly coverage
    const hourlyCoverage = Object.keys(hourlyStaffCount).map(hour => ({
      hour: hour,
      staffCount: Math.round(hourlyStaffCount[hour])
    }));
    
    // Calculate coverage analysis
    const coverageAnalysis = analyzeCoverage(hourlyCoverage);
    
    // Schedule stats
    const scheduleStats = {
      totalMembers: scheduleByMember.length,
      availabilityRate: calculateAvailabilityRate(statusDistribution),
      ptoPercentage: calculatePTOPercentage(statusDistribution)
    };
    
    return {
      stats: stats,
      coverageByDay: coverageByDay,
      hourlyCoverage: hourlyCoverage,
      statusDistribution: statusDistribution,
      scheduleStats: scheduleStats,
      coverageAnalysis: coverageAnalysis
    };
  } catch (error) {
    console.error('Error calculating schedule summary:', error);
    logError('calculateScheduleSummary', error);
    return {
      stats: { coverageRate: 0, scheduledHours: 0, avgDailyStaff: 0, ptoHours: 0 },
      coverageByDay: [],
      hourlyCoverage: [],
      statusDistribution: {},
      scheduleStats: { totalMembers: 0, availabilityRate: 0, ptoPercentage: 0 },
      coverageAnalysis: { optimalHours: 0, minimalHours: 0, noCoverageHours: 0 }
    };
  }
}

/**
 * 📊 Analyze coverage
 * @param {Array} hourlyCoverage - Hourly coverage data
 * @return {Object} Coverage analysis
 */
function analyzeCoverage(hourlyCoverage) {
  try {
    let optimalHours = 0;
    let minimalHours = 0;
    let noCoverageHours = 0;
    const criticalHours = [];
    
    hourlyCoverage.forEach(hour => {
      const staffCount = hour.staffCount;
      
      if (staffCount === 0) {
        noCoverageHours++;
        criticalHours.push(formatHourLabel(hour.hour));
      } else if (staffCount <= 2) {
        minimalHours++;
      } else {
        optimalHours++;
      }
    });
    
    // Generate recommendations
    const recommendations = [];
    
    if (noCoverageHours > 0) {
      recommendations.push('Add coverage for hours with no staff currently scheduled.');
    }
    
    if (minimalHours > 12) {
      recommendations.push('Increase staffing for hours with minimal coverage to ensure adequate service levels.');
    }
    
    if (optimalHours < 8) {
      recommendations.push('Work toward having optimal coverage for at least 8 hours a day.');
    }
    
    return {
      optimalHours: optimalHours,
      minimalHours: minimalHours,
      noCoverageHours: noCoverageHours,
      criticalHours: criticalHours,
      recommendations: recommendations
    };
  } catch (error) {
    console.error('Error analyzing coverage:', error);
    logError('analyzeCoverage', error);
    return {
      optimalHours: 0,
      minimalHours: 0,
      noCoverageHours: 0,
      criticalHours: [],
      recommendations: []
    };
  }
}

/**
 * 📈 Calculate availability rate
 * @param {Object} statusDistribution - Status distribution
 * @return {Number} Availability rate percentage
 */
function calculateAvailabilityRate(statusDistribution) {
  try {
    const availableHours = statusDistribution.available || 0;
    
    // Calculate total hours
    let totalHours = 0;
    Object.values(statusDistribution).forEach(hours => {
      totalHours += hours;
    });
    
    if (totalHours === 0) return 0;
    
    return Math.round((availableHours / totalHours) * 100);
  } catch (error) {
    console.error('Error calculating availability rate:', error);
    logError('calculateAvailabilityRate', error);
    return 0;
  }
}

/**
 * 🌴 Calculate PTO percentage
 * @param {Object} statusDistribution - Status distribution
 * @return {Number} PTO percentage
 */
function calculatePTOPercentage(statusDistribution) {
  try {
    const ptoHours = statusDistribution.pto || 0;
    
    // Calculate total hours
    let totalHours = 0;
    Object.values(statusDistribution).forEach(hours => {
      totalHours += hours;
    });
    
    if (totalHours === 0) return 0;
    
    return Math.round((ptoHours / totalHours) * 100);
  } catch (error) {
    console.error('Error calculating PTO percentage:', error);
    logError('calculatePTOPercentage', error);
    return 0;
  }
}

/**
 * 📋 Generate schedule insights
 * @param {Object} scheduleData - Schedule data
 * @param {Object} summary - Summary data
 * @return {Array} Insights
 */
function generateScheduleInsights(scheduleData, summary) {
  try {
    const insights = [];
    
    // Add insights based on data
    if (summary.stats.coverageRate < 70) {
      insights.push({
        type: 'warning',
        title: 'Low Coverage Alert',
        description: `Current coverage rate is ${Math.round(summary.stats.coverageRate)}%, which is below the recommended 70% minimum.`
      });
    }
    
    if (summary.coverageAnalysis.noCoverageHours > 0) {
      insights.push({
        type: 'warning',
        title: 'Uncovered Hours',
        description: `There are ${summary.coverageAnalysis.noCoverageHours} hours with no scheduled coverage.`
      });
    }
    
    if (summary.stats.ptoHours > 40) {
      insights.push({
        type: 'info',
        title: 'High PTO Usage',
        description: `Current PTO usage is ${Math.round(summary.stats.ptoHours)} hours, which might impact coverage.`
      });
    }
    
    if (summary.coverageAnalysis.optimalHours >= 16) {
      insights.push({
        type: 'success',
        title: 'Good Coverage Distribution',
        description: `${summary.coverageAnalysis.optimalHours} hours have optimal staffing levels.`
      });
    }
    
    // Add at least one insight if none were added
    if (insights.length === 0) {
      insights.push({
        type: 'info',
        title: 'Schedule Overview',
        description: `Current schedule has ${scheduleData.scheduleByMember.length} team members with an average coverage of ${Math.round(summary.stats.coverageRate)}%.`
      });
    }
    
    return insights;
  } catch (error) {
    console.error('Error generating schedule insights:', error);
    logError('generateScheduleInsights', error);
    return [];
  }
}

/**
 * 📈 Get trend data
 * @return {Object} Trend data
 */
function getTrendData() {
  try {
    // In a real implementation, this would query historical data
    // For now, we'll return sample data
    
    return {
      weeks: ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Current Week'],
      coverage: [85, 75, 82, 78, 80],
      staffing: [5, 4, 6, 5, 5],
      pto: [8, 16, 24, 16, 12]
    };
  } catch (error) {
    console.error('Error getting trend data:', error);
    logError('getTrendData', error);
    return {
      weeks: [],
      coverage: [],
      staffing: [],
      pto: []
    };
  }
}

/**
 * 📅 Get next Monday
 * @return {Date} Next Monday
 */
function getNextMonday() {
  const date = new Date();
  const day = date.getDay();
  const daysToAdd = day === 0 ? 1 : 8 - day;
  date.setDate(date.getDate() + daysToAdd);
  date.setHours(0, 0, 0, 0);
  return date;
}

/**
 * 📅 Get previous Sunday
 * @return {Date} Previous Sunday
 */
function getPreviousSunday() {
  const date = new Date();
  const day = date.getDay();
  date.setDate(date.getDate() - day);
  date.setHours(23, 59, 59, 999);
  return date;
}

/**
 * ⏰ Format hour label
 * @param {Number|String} hour - Hour (0-23)
 * @return {String} Formatted hour label
 */
function formatHourLabel(hour) {
  hour = parseInt(hour);
  if (isNaN(hour)) return '';
  
  if (hour === 0) return '12 AM';
  if (hour === 12) return '12 PM';
  if (hour < 12) return `${hour} AM`;
  return `${hour - 12} PM`;
}

/**
 * 🗓️ Initialize schedule week
 * @param {Object} weekData - Week initialization data
 * @return {Object} Success status
 */
function initializeScheduleWeek(weekData) {
  try {
    // Initialize sheets if not already done
    initializeTimeSheets();
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const scheduleSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.TEAM_SCHEDULE);
    const eventsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.SCHEDULE_EVENTS);
    const patternsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.SCHEDULE_PATTERNS);
    
    if (!scheduleSheet || !eventsSheet || !patternsSheet) {
      return {
        success: false,
        message: 'Required sheets not found'
      };
    }
    
    // Parse start date
    const startDate = new Date(weekData.startDate);
    
    // Calculate end date (6 days later)
    const endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    
    // Get current user
    const user = Session.getActiveUser().getEmail();
    const now = new Date();
    
    // Create schedule record
    const scheduleId = Utilities.getUuid();
    
    scheduleSheet.appendRow([
      scheduleId,
      formatDateString(startDate),
      formatDateString(endDate),
      weekData.pattern,
      weekData.teamMembers.join(','),
      weekData.notes || '',
      user,
      now
    ]);
    
    // Get pattern configuration
    const patternConfig = getPatternConfig(weekData.pattern, patternsSheet);
    
    // Create schedule events based on pattern
    if (patternConfig) {
      createScheduleEvents(
        scheduleId,
        startDate,
        endDate,
        weekData.teamMembers,
        patternConfig,
        weekData.copyPreviousWeek,
        weekData.includeStandingEvents
      );
    }
    
    return {
      success: true,
      scheduleId: scheduleId
    };
  } catch (error) {
    console.error('Error initializing schedule week:', error);
    logError('initializeScheduleWeek', error);
    return {
      success: false,
      message: 'Error initializing week: ' + error.toString()
    };
  }
}

/**
 * 📝 Get pattern configuration
 * @param {String} patternId - Pattern ID
 * @param {Sheet} patternsSheet - Patterns sheet
 * @return {Object|null} Pattern configuration
 */
function getPatternConfig(patternId, patternsSheet) {
  try {
    // Get all patterns
    const patternsData = patternsSheet.getDataRange().getValues();
    const headers = patternsData[0];
    
    const patternIdIndex = headers.indexOf('Pattern ID');
    const configIndex = headers.indexOf('Configuration');
    
    // Find pattern
    const patternRow = patternsData.slice(1).find(row => row[patternIdIndex] === patternId);
    
    if (patternRow && patternRow[configIndex]) {
      return JSON.parse(patternRow[configIndex]);
    }
    
    // Return default config if not found
    return {
      shiftDuration: 8,
      minStaffing: {
        weekday: {
          day: 3,
          night: 2
        },
        weekend: {
          day: 2,
          night: 2
        }
      }
    };
  } catch (error) {
    console.error('Error getting pattern config:', error);
    logError('getPatternConfig', error);
    return null;
  }
}

/**
 * 📝 Create schedule events based on pattern
 * @param {String} scheduleId - Schedule ID
 * @param {Date} startDate - Start date
 * @param {Date} endDate - End date
 * @param {Array} teamMembers - Team member IDs
 * @param {Object} patternConfig - Pattern configuration
 * @param {Boolean} copyPrevious - Whether to copy from previous week
 * @param {Boolean} includeStanding - Whether to include standing events
 */
function createScheduleEvents(scheduleId, startDate, endDate, teamMembers, patternConfig, copyPrevious, includeStanding) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const eventsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.SCHEDULE_EVENTS);
    
    if (!eventsSheet) return;
    
    const user = Session.getActiveUser().getEmail();
    const now = new Date();
    
    // Events to create
    const events = [];
    
    if (copyPrevious) {
      // Copy previous week's events
      const previousWeekEvents = getPreviousWeekEvents(startDate, teamMembers);
      
      if (previousWeekEvents.length > 0) {
        previousWeekEvents.forEach(prevEvent => {
          const eventDate = new Date(prevEvent.date);
          const daysDiff = eventDate.getDay();
          
          // Calculate new date in this week
          const newDate = new Date(startDate);
          newDate.setDate(startDate.getDate() + daysDiff);
          
          events.push([
            Utilities.getUuid(),
            prevEvent.memberId,
            formatDateString(newDate),
            prevEvent.startTime,
            prevEvent.endTime,
            prevEvent.status,
            prevEvent.title,
            prevEvent.notes,
            user,
            now
          ]);
        });
      }
    } else {
      // Create new schedule based on pattern
      // This is a simplified version - a real implementation would be more complex
      
      // Set shifts for each day
      for (let i = 0; i < 7; i++) {
        const currentDate = new Date(startDate);
        currentDate.setDate(startDate.getDate() + i);
        
        const isWeekend = i === 0 || i === 6; // Sunday or Saturday
        const staffNeeded = {
          day: isWeekend ? 
            patternConfig.minStaffing.weekend.day : 
            patternConfig.minStaffing.weekday.day,
          night: isWeekend ? 
            patternConfig.minStaffing.weekend.night : 
            patternConfig.minStaffing.weekday.night
        };
        
        // Assign team members to shifts (round-robin)
        for (let j = 0; j < teamMembers.length; j++) {
          // Skip if we've met staffing needs
          if (Math.floor(j / 2) >= (staffNeeded.day + staffNeeded.night)) break;
          
          // Alternate between day and night shifts
          const isDayShift = j % 2 === 0;
          const shift = isDayShift ? 'day' : 'night';
          
          // Skip if we've met staffing needs for this shift
          if ((isDayShift && Math.floor(j / 2) >= staffNeeded.day) || 
              (!isDayShift && Math.floor(j / 2) >= staffNeeded.night)) {
            continue;
          }
          
          // Set shift times
          let startTime, endTime;
          if (isDayShift) {
            startTime = '09:00';
            endTime = '17:00';
          } else {
            startTime = '17:00';
            endTime = '01:00'; // Next day
          }
          
          events.push([
            Utilities.getUuid(),
            teamMembers[j % teamMembers.length],
            formatDateString(currentDate),
            startTime,
            endTime,
            'available',
            isDayShift ? 'Day Shift' : 'Night Shift',
            '',
            user,
            now
          ]);
        }
      }
    }
    
    if (includeStanding) {
      // Add standing events (e.g., recurring meetings)
      const standingEvents = getStandingEvents(startDate, endDate, teamMembers);
      
      standingEvents.forEach(event => {
        events.push([
          Utilities.getUuid(),
          event.memberId,
          event.date,
          event.startTime,
          event.endTime,
          event.status,
          event.title,
          event.notes,
          user,
          now
        ]);
      });
    }
    
    // Batch add events
    if (events.length > 0) {
      eventsSheet.getRange(eventsSheet.getLastRow() + 1, 1, events.length, events[0].length)
        .setValues(events);
    }
  } catch (error) {
    console.error('Error creating schedule events:', error);
    logError('createScheduleEvents', error);
  }
}

/**
 * 📆 Get previous week's events
 * @param {Date} currentWeekStart - Start date of current week
 * @param {Array} teamMembers - Team member IDs
 * @return {Array} Previous week's events
 */
function getPreviousWeekEvents(currentWeekStart, teamMembers) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const eventsSheet = ss.getSheetByName(TIME_CONFIG.SHEETS.SCHEDULE_EVENTS);
    
    if (!eventsSheet) return [];
    
    // Calculate previous week dates
    const prevWeekStart = new Date(currentWeekStart);
    prevWeekStart.setDate(prevWeekStart.getDate() - 7);
    
    const prevWeekEnd = new Date(prevWeekStart);
    prevWeekEnd.setDate(prevWeekStart.getDate() + 6);
    
    // Format dates
    const startDateString = formatDateString(prevWeekStart);
    const endDateString = formatDateString(prevWeekEnd);
    
    // Get all events
    const eventsData = eventsSheet.getDataRange().getValues();
    const headers = eventsData[0];
    
    // Find column indices
    const memberIdIndex = headers.indexOf('Member ID');
    const dateIndex = headers.indexOf('Date');
    const startTimeIndex = headers.indexOf('Start Time');
    const endTimeIndex = headers.indexOf('End Time');
    const statusIndex = headers.indexOf('Status');
    const titleIndex = headers.indexOf('Title');
    const notesIndex = headers.indexOf('Notes');
    
    // Filter events
    return eventsData.slice(1)
      .filter(row => {
        // Check if in team members list
        if (!teamMembers.includes(row[memberIdIndex])) return false;
        
        // Check if in date range
        const eventDate = formatDateString(new Date(row[dateIndex]));
        return eventDate >= startDateString && eventDate <= endDateString;
      })
      .map(row => ({
        memberId: row[memberIdIndex],
        date: row[dateIndex],
        startTime: row[startTimeIndex],
        endTime: row[endTimeIndex],
        status: row[statusIndex],
        title: row[titleIndex],
        notes: row[notesIndex] || ''
      }));
  } catch (error) {
    console.error('Error getting previous week events:', error);
    logError('getPreviousWeekEvents', error);
    return [];
  }
}

/**
 * 🔄 Get standing events
 * @param {Date} startDate - Start date
 * @param {Date} endDate - End date
 * @param {Array} teamMembers - Team member IDs
 * @return {Array} Standing events
 */
function getStandingEvents(startDate, endDate, teamMembers) {
  // In a real implementation, this would query a standing events/recurring meetings sheet
  // For now, we'll return some sample standing events
  
  const events = [];
  const user = Session.getActiveUser().getEmail();
  
  // Sample team meeting every Monday at 10am
  const mondayDate = new Date(startDate);
  const daysUntilMonday = (1 + 7 - mondayDate.getDay()) % 7 || 7;
  mondayDate.setDate(mondayDate.getDate() + daysUntilMonday);
  
  if (mondayDate <= endDate) {
    teamMembers.forEach(memberId => {
      events.push({
        memberId: memberId,
        date: formatDateString(mondayDate),
        startTime: '10:00',
        endTime: '11:00',
        status: 'meeting',
        title: 'Weekly Team Meeting',
        notes: 'Regular team sync-up'
      });
    });
  }
  
  // Sample training event on Wednesday
  const wednesdayDate = new Date(startDate);
  const daysUntilWednesday = (3 + 7 - wednesdayDate.getDay()) % 7 || 7;
  wednesdayDate.setDate(wednesdayDate.getDate() + daysUntilWednesday);
  
  if (wednesdayDate <= endDate && teamMembers.length > 0) {
    // Assign to half the team
    const trainingMembers = teamMembers.slice(0, Math.ceil(teamMembers.length / 2));
    
    trainingMembers.forEach(memberId => {
      events.push({
        memberId: memberId,
        date: formatDateString(wednesdayDate),
        startTime: '14:00',
        endTime: '16:00',
        status: 'training',
        title: 'Skill Development Training',
        notes: 'Bi-weekly training session'
      });
    });
  }
  
  return events;
}

/**
 * 📊 Export schedule report
 * @param {Object} params - Export parameters
 * @return {Object} Success status and report URL
 */
function exportScheduleReport(params) {
  try {
    // Get report data
    const result = getScheduleReportData(params);
    
    if (!result.success) {
      return result;
    }
    
    const reportData = result.data;
    
    // Create a PDF report
    const htmlTemplate = HtmlService.createTemplateFromFile('schedule-report-export');
    htmlTemplate.report = reportData;
    htmlTemplate.dateRange = reportData.dateRange;
    const html = htmlTemplate.evaluate().getContent();
    
    // Create a temporary Google Doc to convert to PDF
    const tempDoc = DocumentApp.create('Schedule Report');
    const tempDocId = tempDoc.getId();
    const tempDocFile = DriveApp.getFileById(tempDocId);
    
    // Add report content to doc (simplified approach)
    const docBody = tempDoc.getBody();
    
    docBody.appendParagraph('Schedule Report').setHeading(DocumentApp.ParagraphHeading.HEADING1);
    docBody.appendParagraph(`Date Range: ${reportData.dateRange.start} to ${reportData.dateRange.end}`);
    
    // Add summary stats
    docBody.appendParagraph('Summary Statistics').setHeading(DocumentApp.ParagraphHeading.HEADING2);
    docBody.appendParagraph(`Coverage Rate: ${reportData.stats.coverageRate.toFixed(1)}%`);
    docBody.appendParagraph(`Total Scheduled Hours: ${reportData.stats.scheduledHours}`);
    docBody.appendParagraph(`Average Daily Staff: ${reportData.stats.avgDailyStaff}`);
    docBody.appendParagraph(`PTO Hours: ${reportData.stats.ptoHours}`);
    
    // Add coverage analysis
    docBody.appendParagraph('Coverage Analysis').setHeading(DocumentApp.ParagraphHeading.HEADING2);
    docBody.appendParagraph(`Optimal Coverage Hours: ${reportData.coverageAnalysis.optimalHours}`);
    docBody.appendParagraph(`Minimal Coverage Hours: ${reportData.coverageAnalysis.minimalHours}`);
    docBody.appendParagraph(`No Coverage Hours: ${reportData.coverageAnalysis.noCoverageHours}`);
    
    // Add insights
    if (reportData.insights && reportData.insights.length > 0) {
      docBody.appendParagraph('Insights').setHeading(DocumentApp.ParagraphHeading.HEADING2);
      
      reportData.insights.forEach(insight => {
        docBody.appendParagraph(insight.title).setHeading(DocumentApp.ParagraphHeading.HEADING3);
        docBody.appendParagraph(insight.description);
      });
    }
    
    // Save and close the doc
    tempDoc.saveAndClose();
    
    // Convert to PDF
    const pdfBlob = tempDocFile.getAs('application/pdf');
    const pdfFile = DriveApp.createFile(pdfBlob);
    pdfFile.setName(`Schedule Report ${reportData.dateRange.start} to ${reportData.dateRange.end}.pdf`);
    
    // Delete the temporary doc
    tempDocFile.setTrashed(true);
    
    return {
      success: true,
      url: pdfFile.getUrl()
    };
  } catch (error) {
    console.error('Error exporting schedule report:', error);
    logError('exportScheduleReport', error);
    return {
      success: false,
      message: 'Error exporting report: ' + error.toString()
    };
  }
}

/**
 * 📊 Export schedule data
 * @param {Object} params - Export parameters
 * @return {Object} Success status and data URL
 */
function exportScheduleData(params) {
  try {
    // Get report data
    const result = getScheduleReportData(params);
    
    if (!result.success) {
      return result;
    }
    
    const reportData = result.data;
    
    // Create spreadsheet for export
    const exportSS = SpreadsheetApp.create(`Schedule Data - ${reportData.dateRange.start} to ${reportData.dateRange.end}`);
    const scheduleSheet = exportSS.getActiveSheet();
    scheduleSheet.setName('Team Schedule');
    
    // Set headers
    const headers = ['Team Member', 'Date', 'Status', 'Hours', 'Title', 'Day of Week'];
    scheduleSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    scheduleSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
    
    // Prepare data rows
    const rows = [];
    
    reportData.scheduleByMember.forEach(member => {
      if (!member.schedule) return;
      
      member.schedule.forEach(day => {
        if (!day.status) return;
        
        // Get day of week
        const date = new Date(day.date);
        const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });
        
        rows.push([
          member.name,
          day.date,
          day.status,
          day.hours || 0,
          day.title || '',
          dayOfWeek
        ]);
      });
    });
    
    // Add data to sheet
    if (rows.length > 0) {
      scheduleSheet.getRange(2, 1, rows.length, rows[0].length).setValues(rows);
    }
    
    // Add summary sheet
    const summarySheet = exportSS.insertSheet('Summary');
    
    // Add summary stats
    summarySheet.getRange(1, 1).setValue('Schedule Summary');
    summarySheet.getRange(1, 1).setFontWeight('bold');
    
    summarySheet.getRange(3, 1).setValue('Date Range:');
    summarySheet.getRange(3, 2).setValue(`${reportData.dateRange.start} to ${reportData.dateRange.end}`);
    
    summarySheet.getRange(4, 1).setValue('Coverage Rate:');
    summarySheet.getRange(4, 2).setValue(reportData.stats.coverageRate.toFixed(1) + '%');
    
    summarySheet.getRange(5, 1).setValue('Total Scheduled Hours:');
    summarySheet.getRange(5, 2).setValue(reportData.stats.scheduledHours);
    
    summarySheet.getRange(6, 1).setValue('Average Daily Staff:');
    summarySheet.getRange(6, 2).setValue(reportData.stats.avgDailyStaff);
    
    // Format sheets
    scheduleSheet.autoResizeColumns(1, headers.length);
    summarySheet.autoResizeColumns(1, 2);
    
    return {
      success: true,
      url: exportSS.getUrl()
    };
  } catch (error) {
    console.error('Error exporting schedule data:', error);
    logError('exportScheduleData', error);
    return {
      success: false,
      message: 'Error exporting data: ' + error.toString()
    };
  }
}

/**
 * 📋 Get available team members for schedule
 * @return {Object} Available team members
 */
function getAvailableTeamMembers() {
  try {
    // In a real implementation, this would filter members not already in schedule view
    // For now, we'll just call getTeamMembers
    return getTeamMembers();
  } catch (error) {
    console.error('Error getting available team members:', error);
    logError('getAvailableTeamMembers', error);
    return {
      success: false,
      message: 'Error retrieving available team members: ' + error.toString()
    };
  }
}

/**
 * 📋 Add team member to schedule
 * @param {String} memberId - Team member ID
 * @return {Object} Success status
 */
function addTeamMemberToSchedule(memberId) {
  try {
    // In a real implementation, this would add a member to current schedule view
    // For now, we'll just return success
    return {
      success: true
    };
  } catch (error) {
    console.error('Error adding team member to schedule:', error);
    logError('addTeamMemberToSchedule', error);
    return {
      success: false,
      message: 'Error adding team member: ' + error.toString()
    };
  }
}

/**
 * 🔍 Show time tracker form
 */
function showTimeTracker() {
  const html = HtmlService.createTemplateFromFile('team-lead-time-tracker')
    .evaluate()
    .setTitle('Time Tracker')
    .setWidth(800)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, '⏱️ Time Tracker');
}

/**
 * 📊 Show time reports
 */
function showTimeReports() {
  const html = HtmlService.createTemplateFromFile('time-reports')
    .evaluate()
    .setTitle('Time Reports')
    .setWidth(1000)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, '📊 Time Reports');
}

/**
 * 📅 Show schedule manager
 */
function showScheduleManager() {
  const html = HtmlService.createTemplateFromFile('schedule-manager')
    .evaluate()
    .setTitle('Schedule Manager')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, '📅 Schedule Manager');
}

/**
 * 🗓️ Show initialize week form
 */
function showInitializeWeekForm() {
  const html = HtmlService.createTemplateFromFile('initialize-week-form')
    .evaluate()
    .setTitle('Initialize Week')
    .setWidth(800)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, '🗓️ Initialize Week');
}

/**
 * 📈 Show schedule reports
 */
function showScheduleReports() {
  const html = HtmlService.createTemplateFromFile('schedule-reports')
    .evaluate()
    .setTitle('Schedule Reports')
    .setWidth(1000)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, '📈 Schedule Reports');
}

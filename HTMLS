<!DOCTYPE html>
<html lang="en">
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Crisis Services Team Lead Dashboard</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  
  <style>
    :root {
      /* Primary colors */
      --primary: #6366f1;
      --primary-dark: #4f46e5;
      --primary-light: #c7d2fe;
      --primary-bg: #eef2ff;
      
      /* Secondary colors */
      --secondary: #f43f5e;
      --secondary-dark: #e11d48;
      --secondary-light: #fecdd3;
      --secondary-bg: #fff1f2;
      
      /* Success colors */
      --success: #10b981;
      --success-dark: #059669;
      --success-light: #a7f3d0;
      --success-bg: #ecfdf5;
      
      /* Warning colors */
      --warning: #f59e0b;
      --warning-dark: #d97706;
      --warning-light: #fde68a;
      --warning-bg: #fffbeb;
      
      /* Danger colors */
      --danger: #ef4444;
      --danger-dark: #dc2626;
      --danger-light: #fca5a5;
      --danger-bg: #fee2e2;
      
      /* Neutral colors */
      --gray-50: #f9fafb;
      --gray-100: #f3f4f6;
      --gray-200: #e5e7eb;
      --gray-300: #d1d5db;
      --gray-400: #9ca3af;
      --gray-500: #6b7280;
      --gray-600: #4b5563;
      --gray-700: #374151;
      --gray-800: #1f2937;
      --gray-900: #111827;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--gray-50);
      color: var(--gray-800);
    }
    
    .card {
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      margin-bottom: 20px;
      transition: transform 0.2s, box-shadow 0.2s;
      border: none;
    }
    
    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
    }
    
    .card-header {
      font-weight: 600;
      background-color: white;
      border-bottom: 1px solid var(--gray-200);
      border-radius: 10px 10px 0 0 !important;
      padding: 15px 20px;
    }
    
    .stat-card {
      text-align: center;
      padding: 20px;
    }
    
    .stat-value {
      font-size: 2.2rem;
      font-weight: 700;
      line-height: 1.2;
      margin-bottom: 5px;
    }
    
    .stat-label {
      color: var(--gray-500);
      font-size: 0.85rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }
    
    .team-member-card {
      cursor: pointer;
      border-left: 4px solid transparent;
      transition: all 0.2s;
    }
    
    .team-member-card:hover {
      background-color: var(--primary-bg);
      border-left-color: var(--primary);
    }
    
    .chart-container {
      height: 250px;
      position: relative;
    }
    
    .success { color: var(--success); }
    .warning { color: var(--warning); }
    .danger { color: var(--danger); }
    .primary { color: var(--primary); }
    
    .badge-pill {
      padding: 0.4em 0.7em;
      margin-left: 5px;
    }
    
    .badge-success { background-color: var(--success-bg); color: var(--success-dark); }
    .badge-warning { background-color: var(--warning-bg); color: var(--warning-dark); }
    .badge-danger { background-color: var(--danger-bg); color: var(--danger-dark); }
    .badge-primary { background-color: var(--primary-bg); color: var(--primary-dark); }
    
    #loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(3px);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 500;
      color: var(--primary);
    }
    
    .navbar {
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      background-color: white !important;
      padding: 0.7rem 1.5rem;
    }
    
    .navbar-brand {
      color: var(--gray-800) !important;
      font-weight: 700;
      display: flex;
      align-items: center;
    }
    
    .navbar-brand i {
      color: var(--primary);
      margin-right: 10px;
    }
    
    .navbar-text {
      color: var(--gray-700) !important;
    }
    
    .sidebar {
      min-height: calc(100vh - 56px);
      background-color: white;
      padding-top: 20px;
      box-shadow: 1px 0 10px rgba(0, 0, 0, 0.05);
    }
    
    .sidebar-link {
      color: var(--gray-700);
      padding: 12px 20px;
      display: flex;
      align-items: center;
      text-decoration: none;
      transition: all 0.2s;
      border-left: 3px solid transparent;
    }
    
    .sidebar-link:hover, .sidebar-link.active {
      color: var(--primary);
      background-color: var(--primary-bg);
      border-left-color: var(--primary);
      text-decoration: none;
    }
    
    .sidebar-link i {
      margin-right: 10px;
      width: 20px;
      text-align: center;
    }
    
    .sidebar-heading {
      color: var(--gray-500);
      font-size: 0.75rem;
      padding: 20px 20px 8px;
      text-transform: uppercase;
      font-weight: 700;
      letter-spacing: 0.05em;
    }
    
    .content {
      padding: 25px;
      background-color: var(--gray-50);
    }
    
    .page-title {
      font-weight: 700;
      color: var(--gray-800);
      margin-bottom: 20px;
    }
    
    .action-item {
      padding: 15px;
      border-bottom: 1px solid var(--gray-200);
      transition: background-color 0.2s;
    }
    
    .action-item:hover {
      background-color: var(--gray-50);
    }
    
    .action-item:last-child {
      border-bottom: none;
    }
    
    .btn-icon {
      width: 32px;
      height: 32px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      background-color: var(--gray-100);
      color: var(--gray-700);
      margin-right: 5px;
      transition: all 0.2s;
    }
    
    .btn-icon:hover {
      background-color: var(--primary-bg);
      color: var(--primary);
    }
    
    .quick-filter {
      margin-bottom: 15px;
    }
    
    .notification-badge {
      position: relative;
    }
    
    .notification-badge::after {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      width: 8px;
      height: 8px;
      background-color: var(--danger);
      border-radius: 50%;
    }
    
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1050;
    }
    
    .toast {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      margin-bottom: 10px;
      min-width: 250px;
      overflow: hidden;
      opacity: 1;
    }
    
    .toast-header {
      padding: 10px 15px;
      border-bottom: 1px solid var(--gray-200);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .toast-body {
      padding: 15px;
    }
    
    .metrics-summary {
      display: flex;
      justify-content: space-between;
      text-align: center;
      margin-top: 10px;
    }
    
    .metrics-item {
      flex: 1;
      padding: 5px;
    }
    
    .metrics-label {
      font-size: 0.75rem;
      color: var(--gray-500);
      margin-bottom: 5px;
    }
    
    .metrics-value {
      font-weight: 700;
      font-size: 1.1rem;
    }
    
    .status-indicator {
      display: inline-block;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      margin-right: 5px;
    }
    
    .status-active { background-color: var(--success); }
    .status-training { background-color: var(--warning); }
    .status-inactive { background-color: var(--danger); }
    .status-other { background-color: var(--gray-400); }
    
    @media (max-width: 768px) {
      .sidebar {
        min-height: auto;
      }
      
      .card {
        margin-bottom: 15px;
      }
      
      .stat-value {
        font-size: 1.8rem;
      }
    }
    
    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .fade-in {
      animation: fadeIn 0.3s ease-in-out;
    }
    
    /* Placeholder shimmer effect */
    .placeholder {
      background-color: var(--gray-200);
      display: inline-block;
      position: relative;
      overflow: hidden;
      border-radius: 4px;
    }
    
    .placeholder::after {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background: linear-gradient(90deg, 
                                 rgba(255,255,255,0) 0%, 
                                 rgba(255,255,255,0.6) 50%, 
                                 rgba(255,255,255,0) 100%);
      animation: shimmer 1.5s infinite;
    }
    
    @keyframes shimmer {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }
  </style>
</head>
<body>
  <div id="loading-overlay">
    <div class="spinner-border text-primary" role="status">
      <span class="sr-only">Loading...</span>
    </div>
    <div class="loading-text">Loading dashboard data...</div>
  </div>
  
  <div id="toast-container" class="toast-container"></div>

  <nav class="navbar navbar-expand-lg navbar-light">
    <a class="navbar-brand" href="#">
      <i class="fas fa-heartbeat"></i>Crisis Services Team Lead
    </a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#sidebarMenu">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="ml-auto d-flex align-items-center">
      <div class="btn-icon notification-badge mr-3" id="notifications-btn" onclick="showNotifications()">
        <i class="far fa-bell"></i>
      </div>
      <div class="dropdown">
        <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-toggle="dropdown">
          <i class="fas fa-user-circle mr-1"></i>
          <span id="current-user">Loading...</span>
        </button>
        <div class="dropdown-menu dropdown-menu-right">
          <a class="dropdown-item" href="#" onclick="showUserPreferences()">
            <i class="fas fa-cog mr-2"></i>Preferences
          </a>
          <a class="dropdown-item" href="#" onclick="showHelp()">
            <i class="fas fa-question-circle mr-2"></i>Help
          </a>
          <div class="dropdown-divider"></div>
          <div class="dropdown-item text-muted">
            <small>Last updated: <span id="last-updated">Loading...</span></small>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <div class="container-fluid">
    <div class="row">
      <div class="col-md-3 col-lg-2 d-md-block sidebar collapse" id="sidebarMenu">
        <div class="sidebar-heading">Main</div>
        <a href="#" class="sidebar-link active">
          <i class="fas fa-tachometer-alt"></i> Dashboard
        </a>
        
        <div class="sidebar-heading">One-on-Ones</div>
        <a href="#" class="sidebar-link" onclick="createOneOnOne()">
          <i class="fas fa-plus"></i> Create Session
        </a>
        <a href="#" class="sidebar-link" onclick="viewOneOnOnes()">
          <i class="fas fa-calendar-alt"></i> View Sessions
        </a>
        
        <div class="sidebar-heading">Team</div>
        <a href="#" class="sidebar-link" onclick="addTeamMember()">
          <i class="fas fa-user-plus"></i> Add Member
        </a>
        <a href="#" class="sidebar-link" onclick="viewTeam()">
          <i class="fas fa-users"></i> View Team
        </a>
        
        <div class="sidebar-heading">Quality</div>
        <a href="#" class="sidebar-link" onclick="createQAReview()">
          <i class="fas fa-clipboard-check"></i> New QA Review
        </a>
        <a href="#" class="sidebar-link" onclick="viewQAReports()">
          <i class="fas fa-chart-pie"></i> QA Reports
        </a>
        
        <div class="sidebar-heading">Tasks</div>
        <a href="#" class="sidebar-link" onclick="manageActionItems()">
          <i class="fas fa-tasks"></i> Action Items
        </a>
        <a href="#" class="sidebar-link" onclick="createTask()">
          <i class="fas fa-plus-circle"></i> Create Task
        </a>
        <a href="#" class="sidebar-link" onclick="openTimeTracker()">
          <i class="fas fa-clock"></i> Time Tracker
        </a>
        
        <div class="sidebar-heading">Reports</div>
        <a href="#" class="sidebar-link" onclick="enterMetricsData()">
          <i class="fas fa-edit"></i> Enter Metrics
        </a>
        <a href="#" class="sidebar-link" onclick="viewMetricsReports()">
          <i class="fas fa-chart-bar"></i> Metrics Reports
        </a>
      </div>
      
      <!-- Main content -->
      <main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-md-4 content">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-4">
          <h1 class="page-title">Dashboard Overview</h1>
          <div class="btn-toolbar mb-2 mb-md-0">
            <div class="input-group mr-2">
              <input type="date" class="form-control" id="date-filter" onchange="filterByDate(this.value)">
            </div>
            <div class="btn-group mr-2">
              <button type="button" class="btn btn-sm btn-outline-secondary" onclick="exportDashboardData()">
                <i class="fas fa-download mr-1"></i> Export
              </button>
              <button type="button" class="btn btn-sm btn-outline-secondary" onclick="printDashboard()">
                <i class="fas fa-print mr-1"></i> Print
              </button>
            </div>
            <button type="button" class="btn btn-sm btn-primary" onclick="refreshDashboard()">
              <i class="fas fa-sync-alt mr-1"></i> Refresh
            </button>
          </div>
        </div>

        <!-- Summary Cards -->
        <div class="row">
          <div class="col-xl-3 col-md-6">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span>Team</span>
                <button class="btn-icon" onclick="viewTeam()">
                  <i class="fas fa-external-link-alt"></i>
                </button>
              </div>
              <div class="card-body stat-card">
                <div id="team-total" class="stat-value primary">-</div>
                <div class="stat-label">Total Members</div>
                <hr>
                <div class="d-flex justify-content-around">
                  <div>
                    <div id="team-active" class="success">-</div>
                    <small>Active</small>
                  </div>
                  <div>
                    <div id="team-training" class="warning">-</div>
                    <small>Training</small>
                  </div>
                  <div>
                    <div id="team-other" class="danger">-</div>
                    <small>Other</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="col-xl-3 col-md-6">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span>One-on-Ones</span>
                <button class="btn-icon" onclick="viewOneOnOnes()">
                  <i class="fas fa-external-link-alt"></i>
                </button>
              </div>
              <div class="card-body stat-card">
                <div id="one-on-one-total" class="stat-value primary">-</div>
                <div class="stat-label">Total Sessions</div>
                <hr>
                <div class="d-flex justify-content-around">
                  <div>
                    <div id="one-on-one-completed" class="success">-</div>
                    <small>Completed</small>
                  </div>
                  <div>
                    <div id="one-on-one-upcoming" class="warning">-</div>
                    <small>Upcoming</small>
                  </div>
                  <div>
                    <div id="one-on-one-overdue" class="danger">-</div>
                    <small>Overdue</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="col-xl-3 col-md-6">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span>Action Items</span>
                <button class="btn-icon" onclick="manageActionItems()">
                  <i class="fas fa-external-link-alt"></i>
                </button>
              </div>
              <div class="card-body stat-card">
                <div id="action-items-total" class="stat-value primary">-</div>
                <div class="stat-label">Total Items</div>
                <hr>
                <div class="d-flex justify-content-around">
                  <div>
                    <div id="action-items-completed" class="success">-</div>
                    <small>Completed</small>
                  </div>
                  <div>
                    <div id="action-items-open" class="warning">-</div>
                    <small>Open</small>
                  </div>
                  <div>
                    <div id="action-items-overdue" class="danger">-</div>
                    <small>Overdue</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="col-xl-3 col-md-6">
            <div class="card">
              <div class="card-header">Quick Actions</div>
              <div class="card-body p-0">
                <div class="list-group list-group-flush">
                  <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" onclick="createOneOnOne()">
                    <div>
                      <i class="fas fa-plus-circle mr-2 text-primary"></i>New One-on-One
                    </div>
                    <i class="fas fa-chevron-right text-muted"></i>
                  </a>
                  <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" onclick="createQAReview()">
                    <div>
                      <i class="fas fa-clipboard-check mr-2 text-success"></i>Create QA Review
                    </div>
                    <i class="fas fa-chevron-right text-muted"></i>
                  </a>
                  <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" onclick="enterMetricsData()">
                    <div>
                      <i class="fas fa-chart-line mr-2 text-warning"></i>Enter Metrics
                    </div>
                    <i class="fas fa-chevron-right text-muted"></i>
                  </a>
                  <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" onclick="createTask()">
                    <div>
                      <i class="fas fa-tasks mr-2 text-danger"></i>Create Task
                    </div>
                    <i class="fas fa-chevron-right text-muted"></i>
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Performance Metrics Card -->
        <div class="row mt-4">
          <div class="col-12">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span>Team Performance Metrics</span>
                <button class="btn-icon" onclick="viewMetricsReports()">
                  <i class="fas fa-external-link-alt"></i>
                </button>
              </div>
              <div class="card-body">
                <div class="quick-filter">
                  <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-outline-secondary active" onclick="filterMetrics('week')">This Week</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="filterMetrics('month')">This Month</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="filterMetrics('quarter')">This Quarter</button>
                  </div>
                </div>
                <div class="row">
                  <div class="col-lg-3 col-md-6">
                    <div class="metrics-card p-3 border rounded">
                      <h6 class="mb-2">Answer Rate</h6>
                      <div class="progress mb-2" style="height: 8px;">
                        <div id="answer-rate-progress" class="progress-bar bg-success" role="progressbar" style="width: 0%"></div>
                      </div>
                      <div class="d-flex justify-content-between">
                        <div id="answer-rate-value">-</div>
                        <small class="text-muted">Target: ≥95%</small>
                      </div>
                    </div>
                  </div>
                  <div class="col-lg-3 col-md-6">
                    <div class="metrics-card p-3 border rounded">
                      <h6 class="mb-2">Average Talk Time</h6>
                      <div class="progress mb-2" style="height: 8px;">
                        <div id="talk-time-progress" class="progress-bar bg-success" role="progressbar" style="width: 0%"></div>
                      </div>
                      <div class="d-flex justify-content-between">
                        <div id="talk-time-value">-</div>
                        <small class="text-muted">Target: >13min</small>
                      </div>
                    </div>
                  </div>
                  <div class="col-lg-3 col-md-6">
                    <div class="metrics-card p-3 border rounded">
                      <h6 class="mb-2">On Queue Percentage</h6>
                      <div class="progress mb-2" style="height: 8px;">
                        <div id="on-queue-progress" class="progress-bar bg-success" role="progressbar" style="width: 0%"></div>
                      </div>
                      <div class="d-flex justify-content-between">
                        <div id="on-queue-value">-</div>
                        <small class="text-muted">Target: ≥60%</small>
                      </div>
                    </div>
                  </div>
                  <div class="col-lg-3 col-md-6">
                    <div class="metrics-card p-3 border rounded">
                      <h6 class="mb-2">Interacting Percentage</h6>
                      <div class="progress mb-2" style="height: 8px;">
                        <div id="interacting-progress" class="progress-bar bg-success" role="progressbar" style="width: 0%"></div>
                      </div>
                      <div class="d-flex justify-content-between">
                        <div id="interacting-value">-</div>
                        <small class="text-muted">Target: >80%</small>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Charts Row -->
        <div class="row mt-4">
          <div class="col-lg-6">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span>One-on-One Completion</span>
                <div class="dropdown">
                  <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="oneOnOneChartDropdown" data-toggle="dropdown">
                    Last 6 Weeks
                  </button>
                  <div class="dropdown-menu dropdown-menu-right">
                    <a class="dropdown-item" href="#" onclick="updateOneOnOneChart('4weeks')">Last 4 Weeks</a>
                    <a class="dropdown-item" href="#" onclick="updateOneOnOneChart('6weeks')">Last 6 Weeks</a>
                    <a class="dropdown-item" href="#" onclick="updateOneOnOneChart('quarter')">This Quarter</a>
                  </div>
                </div>
              </div>
              <div class="card-body">
                <div class="chart-container">
                  <canvas id="oneOnOneChart"></canvas>
                </div>
              </div>
            </div>
          </div>
          
          <div class="col-lg-6">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span>Team Composition</span>
                <div class="btn-group">
                  <button type="button" class="btn btn-sm btn-outline-secondary active" onclick="updateTeamChart('role')">By Role</button>
                  <button type="button" class="btn btn-sm btn-outline-secondary" onclick="updateTeamChart('status')">By Status</button>
                </div>
              </div>
              <div class="card-body">
                <div class="chart-container">
                  <canvas id="teamCompositionChart"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Team Members and Action Items -->
        <div class="row mt-4">
          <div class="col-lg-6">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span>Team Members</span>
                <div>
                  <div class="input-group input-group-sm w-auto float-right">
                    <input type="text" class="form-control" placeholder="Search members..." id="team-search" oninput="searchTeamMembers(this.value)">
                    <div class="input-group-append">
                      <button class="btn btn-outline-secondary" type="button" onclick="searchTeamMembers(document.getElementById('team-search').value)">
                        <i class="fas fa-search"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card-body p-0">
                <div class="p-3 border-bottom">
                  <div class="btn-group btn-group-sm w-100">
                    <button type="button" class="btn btn-outline-secondary active" onclick="filterTeamMembers('all')">All</button>
                    <button type="button" class="btn btn-outline-secondary" onclick="filterTeamMembers('needsSession')">Needs Session</button>
                    <button type="button" class="btn btn-outline-secondary" onclick="filterTeamMembers('active')">Active</button>
                    <button type="button" class="btn btn-outline-secondary" onclick="filterTeamMembers('training')">Training</button>
                  </div>
                </div>
                <div id="team-members-container" class="list-group list-group-flush">
                  <!-- Team members will be loaded here -->
                  <div class="p-4 text-center text-muted">
                    <i class="fas fa-spinner fa-spin mr-2"></i> Loading team members...
                  </div>
                </div>
              </div>
              <div class="card-footer d-flex justify-content-between align-items-center">
                <small><span id="team-filter-count">0</span> members shown</small>
                <button class="btn btn-sm btn-primary" onclick="viewTeam()">View All Members</button>
              </div>
            </div>
          </div>
          
          <div class="col-lg-6">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span>Action Items</span>
                <button class="btn btn-sm btn-primary" onclick="createTask()">New Item</button>
              </div>
              <div class="card-body p-0">
                <ul class="nav nav-tabs" id="actionItemsTab" role="tablist">
                  <li class="nav-item">
                    <a class="nav-link active" id="overdue-tab" data-toggle="tab" href="#overdue" role="tab">Overdue</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="upcoming-tab" data-toggle="tab" href="#upcoming" role="tab">Upcoming</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="recent-tab" data-toggle="tab" href="#recent" role="tab">Recently Completed</a>
                  </li>
                </ul>
                <div class="tab-content" id="actionItemsTabContent">
                  <div class="tab-pane fade show active" id="overdue" role="tabpanel">
                    <div id="overdue-items-container">
                      <!-- Overdue items will be loaded here -->
                      <div class="p-4 text-center text-muted">
                        <i class="fas fa-spinner fa-spin mr-2"></i> Loading overdue items...
                      </div>
                    </div>
                  </div>
                  <div class="tab-pane fade" id="upcoming" role="tabpanel">
                    <div id="upcoming-items-container">
                      <!-- Upcoming items will be loaded here -->
                      <div class="p-4 text-center text-muted">
                        <i class="fas fa-spinner fa-spin mr-2"></i> Loading upcoming items...
                      </div>
                    </div>
                  </div>
                  <div class="tab-pane fade" id="recent" role="tabpanel">
                    <div id="recent-items-container">
                      <!-- Recently completed items will be loaded here -->
                      <div class="p-4 text-center text-muted">
                        <i class="fas fa-spinner fa-spin mr-2"></i> Loading recent items...
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card-footer d-flex justify-content-between align-items-center">
                <span id="action-items-count" class="text-muted small">Loading items...</span>
                <button class="btn btn-sm btn-primary" onclick="manageActionItems()">Manage All Items</button>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Upcoming Sessions -->
        <div class="row mt-4">
          <div class="col-12">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span>Upcoming One-on-One Sessions</span>
                <button class="btn btn-sm btn-primary" onclick="createOneOnOne()">Schedule New</button>
              </div>
              <div class="card-body p-0">
                <div class="table-responsive">
                  <table class="table table-hover">
                    <thead>
                      <tr>
                        <th>Team Member</th>
                        <th>Date & Time</th>
                        <th>Status</th>
                        <th>Last Session</th>
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody id="upcoming-sessions-table">
                      <!-- Upcoming sessions will be loaded here -->
                      <tr>
                        <td colspan="5" class="text-center py-4">
                          <i class="fas fa-spinner fa-spin mr-2"></i> Loading upcoming sessions...
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  </div>

  <!-- Bootstrap JS, Popper.js, and jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>
  
  <script>
    // Global variables
    let teamMembers = [];
    let oneOnOneChartInstance = null;
    let teamChartInstance = null;
    
    // Toast notification system
    function showToast(title, message, type = 'info') {
      const toastContainer = document.getElementById('toast-container');
      const toastId = 'toast-' + Date.now();
      
      const toastClasses = {
        'success': 'border-left-success',
        'warning': 'border-left-warning',
        'danger': 'border-left-danger',
        'info': 'border-left-info'
      };
      
      const toastHtml = `
        <div id="${toastId}" class="toast fade-in" style="border-left: 4px solid var(--${type});">
          <div class="toast-header">
            <strong class="mr-auto">${title}</strong>
            <small>${new Date().toLocaleTimeString()}</small>
            <button type="button" class="ml-2 mb-1 close" onclick="dismissToast('${toastId}')">
              <span>&times;</span>
            </button>
          </div>
          <div class="toast-body">
            ${message}
          </div>
        </div>
      `;
      
      toastContainer.innerHTML += toastHtml;
      
      // Auto dismiss after 5 seconds
      setTimeout(() => {
        dismissToast(toastId);
      }, 5000);
    }
    
    function dismissToast(toastId) {
      const toast = document.getElementById(toastId);
      if (toast) {
        toast.style.opacity = '0';
        setTimeout(() => {
          toast.remove();
        }, 300);
      }
    }
    
    // Load current user info
    function loadCurrentUser() {
      google.script.run
        .withSuccessHandler(function(userInfo) {
          document.getElementById('current-user').textContent = userInfo.name || userInfo.email;
          document.getElementById('last-updated').textContent = new Date().toLocaleString();
        })
        .withFailureHandler(function(error) {
          console.error('Error loading user info:', error);
          document.getElementById('current-user').textContent = 'Error loading user';
        })
        .getCurrentUserInfo();
    }
    
    // Load dashboard data
    function loadDashboardData() {
      document.getElementById('loading-overlay').style.display = 'flex';
      
      google.script.run
        .withSuccessHandler(function(dashboardData) {
          // Update summary stats
          updateSummaryStats(dashboardData.summary);
          
          // Update performance metrics
          updatePerformanceMetrics(dashboardData.performanceMetrics);
          
          // Create charts
          createOneOnOneChart(dashboardData.oneOnOneChartData);
          createTeamCompositionChart(dashboardData.teamCompositionData);
          
          // Load upcoming sessions
          loadUpcomingSessions(dashboardData.upcomingSessions);
          
          // Hide loading overlay
          document.getElementById('loading-overlay').style.display = 'none';
          
          // Show toast notification
          showToast('Dashboard Updated', 'Dashboard data has been refreshed successfully', 'success');
        })
        .withFailureHandler(function(error) {
          console.error('Error loading dashboard data:', error);
          document.getElementById('loading-overlay').style.display = 'none';
          showToast('Error', 'Failed to load dashboard data: ' + error, 'danger');
        })
        .getDashboardData();
      
      // Load team member cards
      loadTeamMembers();
      
      // Load action items
      loadActionItems();
    }
    
    // Load team members
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(function(members) {
          teamMembers = members;
          displayTeamMembers(members);
        })
        .withFailureHandler(function(error) {
          console.error('Error loading team members:', error);
          document.getElementById('team-members-container').innerHTML = 
            `<div class="p-3 text-center text-danger">Error loading team members: ${error}</div>`;
        })
        .getTeamMemberCards();
    }
    
    // Display team members
    function displayTeamMembers(members, filter = 'all', searchTerm = '') {
      const container = document.getElementById('team-members-container');
      container.innerHTML = '';
      
      let filteredMembers = members;
      
      // Apply filters
      if (filter === 'needsSession') {
        filteredMembers = members.filter(member => member.needsSession);
      } else if (filter === 'active') {
        filteredMembers = members.filter(member => member.status === 'Active');
      } else if (filter === 'training') {
        filteredMembers = members.filter(member => member.status === 'Training');
      }
      
      // Apply search
      if (searchTerm) {
        const term = searchTerm.toLowerCase();
        filteredMembers = filteredMembers.filter(member => 
          member.name.toLowerCase().includes(term) || 
          member.email.toLowerCase().includes(term) ||
          (member.role && member.role.toLowerCase().includes(term))
        );
      }
      
      document.getElementById('team-filter-count').textContent = filteredMembers.length;
      
      if (filteredMembers.length === 0) {
        container.innerHTML = '<div class="p-3 text-center text-muted">No team members found</div>';
        return;
      }
      
      filteredMembers.forEach(function(member) {
        const needsSessionClass = member.needsSession ? 'text-danger' : 'text-success';
        const needsSessionIcon = member.needsSession ? 
          '<i class="fas fa-exclamation-circle"></i>' : 
          '<i class="fas fa-check-circle"></i>';
        
        let statusIndicator = '';
        if (member.status === 'Active') {
          statusIndicator = '<span class="status-indicator status-active"></span>';
        } else if (member.status === 'Training') {
          statusIndicator = '<span class="status-indicator status-training"></span>';
        } else if (member.status === 'Inactive') {
          statusIndicator = '<span class="status-indicator status-inactive"></span>';
        } else {
          statusIndicator = '<span class="status-indicator status-other"></span>';
        }
        
        const html = `
          <a href="#" class="list-group-item list-group-item-action team-member-card" 
              onclick="showTeamMemberDetails('${member.email}')">
            <div class="d-flex w-100 justify-content-between">
              <div>
                ${statusIndicator}
                <span class="font-weight-bold">${member.name}</span>
              </div>
              <small class="${needsSessionClass}">${needsSessionIcon}</small>
            </div>
            <div class="d-flex justify-content-between align-items-center mt-2">
              <div>
                <small class="text-muted d-block">${member.role || 'No role specified'}</small>
                <small>Last 1:1: ${member.lastOneOnOne || 'None'}</small>
              </div>
              <button class="btn btn-sm btn-outline-primary" onclick="event.stopPropagation(); createOneOnOne('${member.email}')">
                Schedule 1:1
              </button>
            </div>
          </a>
        `;
        
        container.innerHTML += html;
      });
    }
    
    // Filter team members
    function filterTeamMembers(filter) {
      // Update active button
      const buttons = document.querySelectorAll('.card-body .btn-group .btn');
      buttons.forEach(btn => btn.classList.remove('active'));
      event.target.classList.add('active');
      
      // Apply filter
      const searchTerm = document.getElementById('team-search').value;
      displayTeamMembers(teamMembers, filter, searchTerm);
    }
    
    // Search team members
    function searchTeamMembers(term) {
      // Get current filter
      const activeButton = document.querySelector('.card-body .btn-group .btn.active');
      const filter = activeButton.onclick.toString().match(/filterTeamMembers\('(.+)'\)/)[1];
      
      // Apply filter and search
      displayTeamMembers(teamMembers, filter, term);
    }
    
    // Load action items
    function loadActionItems() {
      google.script.run
        .withSuccessHandler(function(actionItems) {
          displayActionItems(actionItems);
        })
        .withFailureHandler(function(error) {
          console.error('Error loading action items:', error);
          document.getElementById('overdue-items-container').innerHTML = 
            `<div class="p-3 text-center text-danger">Error loading items: ${error}</div>`;
          document.getElementById('upcoming-items-container').innerHTML = 
            `<div class="p-3 text-center text-danger">Error loading items: ${error}</div>`;
          document.getElementById('recent-items-container').innerHTML = 
            `<div class="p-3 text-center text-danger">Error loading items: ${error}</div>`;
        })
        .getDashboardActionItems();
    }
    
    // Display action items
    function displayActionItems(actionItems) {
      const overdueContainer = document.getElementById('overdue-items-container');
      const upcomingContainer = document.getElementById('upcoming-items-container');
      const recentContainer = document.getElementById('recent-items-container');
      
      overdueContainer.innerHTML = '';
      upcomingContainer.innerHTML = '';
      recentContainer.innerHTML = '';
      
      // Update count display
      const totalCount = actionItems.overdue.length + actionItems.upcoming.length + actionItems.recent.length;
      document.getElementById('action-items-count').textContent = 
        `Showing ${totalCount} items (${actionItems.overdue.length} overdue, ${actionItems.upcoming.length} upcoming, ${actionItems.recent.length} recent)`;
      
      // Overdue items
      if (actionItems.overdue.length === 0) {
        overdueContainer.innerHTML = '<div class="p-3 text-center text-muted">No overdue items</div>';
      } else {
        actionItems.overdue.forEach(function(item) {
          const html = `
            <div class="action-item">
              <div class="d-flex w-100 justify-content-between">
                <h6 class="mb-1 font-weight-bold">${item.description}</h6>
                <span class="badge badge-danger">${item.relativeDue}</span>
              </div>
              <p class="mb-1 small">Assigned to: ${item.owner}</p>
              <div class="d-flex justify-content-between align-items-center">
                <small class="text-muted">From: ${item.source || 'Manual entry'}</small>
                <div>
                  <button class="btn btn-sm btn-outline-success" 
                    onclick="completeActionItem('${item.id}')">Complete</button>
                  <button class="btn btn-sm btn-outline-secondary" 
                    onclick="editActionItem('${item.id}')">Edit</button>
                </div>
              </div>
            </div>
          `;
          
          overdueContainer.innerHTML += html;
        });
      }
      
      // Upcoming items
      if (actionItems.upcoming.length === 0) {
        upcomingContainer.innerHTML = '<div class="p-3 text-center text-muted">No upcoming items</div>';
      } else {
        actionItems.upcoming.forEach(function(item) {
          const html = `
            <div class="action-item">
              <div class="d-flex w-100 justify-content-between">
                <h6 class="mb-1 font-weight-bold">${item.description}</h6>
                <span class="badge badge-warning">${item.relativeDue}</span>
              </div>
              <p class="mb-1 small">Assigned to: ${item.owner}</p>
              <div class="d-flex justify-content-between align-items-center">
                <small class="text-muted">From: ${item.source || 'Manual entry'}</small>
                <div>
                  <button class="btn btn-sm btn-outline-success" 
                    onclick="completeActionItem('${item.id}')">Complete</button>
                  <button class="btn btn-sm btn-outline-secondary" 
                    onclick="editActionItem('${item.id}')">Edit</button>
                </div>
              </div>
            </div>
          `;
          
          upcomingContainer.innerHTML += html;
        });
      }
      
      // Recently completed items
      if (actionItems.recent.length === 0) {
        recentContainer.innerHTML = '<div class="p-3 text-center text-muted">No recently completed items</div>';
      } else {
        actionItems.recent.forEach(function(item) {
          const html = `
            <div class="action-item">
              <div class="d-flex w-100 justify-content-between">
                <h6 class="mb-1 font-weight-bold">${item.description}</h6>
                <span class="badge badge-success">Completed</span>
              </div>
              <p class="mb-1 small">Completed by: ${item.owner}</p>
              <div class="d-flex justify-content-between align-items-center">
                <small class="text-muted">Completed: ${item.completedDate || 'Unknown'}</small>
                <button class="btn btn-sm btn-outline-secondary" 
                  onclick="viewActionItemDetails('${item.id}')">Details</button>
              </div>
            </div>
          `;
          
          recentContainer.innerHTML += html;
        });
      }
    }
    
    // Load upcoming sessions
    function loadUpcomingSessions(sessions) {
      const tableBody = document.getElementById('upcoming-sessions-table');
      
      if (!sessions || sessions.length === 0) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="5" class="text-center py-4">
              No upcoming sessions found. <a href="#" onclick="createOneOnOne()">Schedule a new session</a>
            </td>
          </tr>
        `;
        return;
      }
      
      tableBody.innerHTML = '';
      
      sessions.forEach(function(session) {
        const statusBadge = getStatusBadge(session.status);
        
        const html = `
          <tr>
            <td>
              <div class="d-flex align-items-center">
                <div>
                  <span class="font-weight-bold">${session.memberName}</span>
                  <small class="d-block text-muted">${session.memberRole || ''}</small>
                </div>
              </div>
            </td>
            <td>${session.dateTime}</td>
            <td>${statusBadge}</td>
            <td>${session.lastSession || 'None'}</td>
            <td>
              <button class="btn btn-sm btn-outline-primary mr-1" 
                onclick="viewSession('${session.id}')">View</button>
              <button class="btn btn-sm btn-outline-secondary" 
                onclick="editSession('${session.id}')">Edit</button>
            </td>
          </tr>
        `;
        
        tableBody.innerHTML += html;
      });
    }
    
    function getStatusBadge(status) {
      if (status === 'Scheduled') {
        return '<span class="badge badge-pill badge-primary">Scheduled</span>';
      } else if (status === 'Completed') {
        return '<span class="badge badge-pill badge-success">Completed</span>';
      } else if (status === 'Cancelled') {
        return '<span class="badge badge-pill badge-danger">Cancelled</span>';
      } else if (status === 'Rescheduled') {
        return '<span class="badge badge-pill badge-warning">Rescheduled</span>';
      } else {
        return '<span class="badge badge-pill badge-secondary">Unknown</span>';
      }
    }
    
    // Update summary stats
    function updateSummaryStats(summary) {
      // Team stats
      document.getElementById('team-total').textContent = summary.team.total;
      document.getElementById('team-active').textContent = summary.team.active;
      document.getElementById('team-training').textContent = summary.team.training;
      document.getElementById('team-other').textContent = summary.team.other;
      
      // One-on-One stats
      document.getElementById('one-on-one-total').textContent = summary.oneOnOne.total;
      document.getElementById('one-on-one-completed').textContent = summary.oneOnOne.completed;
      document.getElementById('one-on-one-upcoming').textContent = summary.oneOnOne.upcoming;
      document.getElementById('one-on-one-overdue').textContent = summary.oneOnOne.overdue;
      
      // Action Items stats
      document.getElementById('action-items-total').textContent = summary.actionItems.total;
      document.getElementById('action-items-completed').textContent = summary.actionItems.completed;
      document.getElementById('action-items-open').textContent = summary.actionItems.open;
      document.getElementById('action-items-overdue').textContent = summary.actionItems.overdue;
    }
    
    // Update performance metrics
    function updatePerformanceMetrics(metrics) {
      // Answer Rate
      const answerRateValue = document.getElementById('answer-rate-value');
      const answerRateProgress = document.getElementById('answer-rate-progress');
      answerRateValue.textContent = metrics.answerRate;
      answerRateProgress.style.width = `${parseFloat(metrics.answerRate)}%`;
      
      if (parseFloat(metrics.answerRate) >= 95) {
        answerRateProgress.className = 'progress-bar bg-success';
      } else if (parseFloat(metrics.answerRate) >= 90) {
        answerRateProgress.className = 'progress-bar bg-warning';
      } else {
        answerRateProgress.className = 'progress-bar bg-danger';
      }
      
      // Talk Time
      const talkTimeValue = document.getElementById('talk-time-value');
      const talkTimeProgress = document.getElementById('talk-time-progress');
      talkTimeValue.textContent = metrics.talkTime;
      
      // Calculate percentage for talk time (assuming target is 13 min and max is 20 min)
      const talkTimeMinutes = parseFloat(metrics.talkTime);
      const talkTimePercentage = Math.min(100, (talkTimeMinutes / 13) * 100);
      talkTimeProgress.style.width = `${talkTimePercentage}%`;
      
      if (talkTimeMinutes >= 13) {
        talkTimeProgress.className = 'progress-bar bg-success';
      } else if (talkTimeMinutes >= 10) {
        talkTimeProgress.className = 'progress-bar bg-warning';
      } else {
        talkTimeProgress.className = 'progress-bar bg-danger';
      }
      
      // On Queue
      const onQueueValue = document.getElementById('on-queue-value');
      const onQueueProgress = document.getElementById('on-queue-progress');
      onQueueValue.textContent = metrics.onQueue;
      onQueueProgress.style.width = metrics.onQueue;
      
      if (parseFloat(metrics.onQueue) >= 60) {
        onQueueProgress.className = 'progress-bar bg-success';
      } else if (parseFloat(metrics.onQueue) >= 50) {
        onQueueProgress.className = 'progress-bar bg-warning';
      } else {
        onQueueProgress.className = 'progress-bar bg-danger';
      }
      
      // Interacting
      const interactingValue = document.getElementById('interacting-value');
      const interactingProgress = document.getElementById('interacting-progress');
      interactingValue.textContent = metrics.interacting;
      interactingProgress.style.width = metrics.interacting;
      
      if (parseFloat(metrics.interacting) >= 80) {
        interactingProgress.className = 'progress-bar bg-success';
      } else if (parseFloat(metrics.interacting) >= 70) {
        interactingProgress.className = 'progress-bar bg-warning';
      } else {
        interactingProgress.className = 'progress-bar bg-danger';
      }
    }
    
    // Create One-on-One chart
    function createOneOnOneChart(data) {
      const ctx = document.getElementById('oneOnOneChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (oneOnOneChartInstance) {
        oneOnOneChartInstance.destroy();
      }
      
      oneOnOneChartInstance = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: data.labels,
          datasets: [
            {
              label: 'Completed',
              data: data.datasets[0].data,
              backgroundColor: 'rgba(16, 185, 129, 0.5)',
              borderColor: 'rgb(16, 185, 129)',
              borderWidth: 1
            },
            {
              label: 'Incomplete',
              data: data.datasets[1].data,
              backgroundColor: 'rgba(245, 158, 11, 0.5)',
              borderColor: 'rgb(245, 158, 11)',
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero: true,
                precision: 0
              },
              stacked: true
            }],
            xAxes: [{
              stacked: true
            }]
          },
          tooltips: {
            mode: 'index',
            intersect: false
          }
        }
      });
    }
    
    // Update One-on-One chart
    function updateOneOnOneChart(period) {
      document.getElementById('oneOnOneChartDropdown').textContent = 
        period === '4weeks' ? 'Last 4 Weeks' : 
        period === '6weeks' ? 'Last 6 Weeks' : 'This Quarter';
      
      google.script.run
        .withSuccessHandler(function(data) {
          createOneOnOneChart(data);
        })
        .withFailureHandler(function(error) {
          console.error('Error updating One-on-One chart:', error);
          showToast('Error', 'Failed to update chart: ' + error, 'danger');
        })
        .getOneOnOneChartData(period);
    }
    
    // Create Team Composition chart
    function createTeamCompositionChart(data) {
      const ctx = document.getElementById('teamCompositionChart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (teamChartInstance) {
        teamChartInstance.destroy();
      }
      
      teamChartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: data.role.labels,
          datasets: [{
            data: data.role.data,
            backgroundColor: [
                            'rgba(99, 102, 241, 0.7)',
              'rgba(16, 185, 129, 0.7)',
              'rgba(245, 158, 11, 0.7)',
              'rgba(239, 68, 68, 0.7)',
              'rgba(139, 92, 246, 0.7)',
              'rgba(14, 165, 233, 0.7)'
            ],
            borderColor: [
              'rgb(99, 102, 241)',
              'rgb(16, 185, 129)',
              'rgb(245, 158, 11)',
              'rgb(239, 68, 68)',
              'rgb(139, 92, 246)',
              'rgb(14, 165, 233)'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            position: 'right',
            labels: {
              padding: 20,
              boxWidth: 12
            }
          },
          tooltips: {
            callbacks: {
              label: function(tooltipItem, data) {
                const dataset = data.datasets[tooltipItem.datasetIndex];
                const total = dataset.data.reduce((acc, val) => acc + val, 0);
                const currentValue = dataset.data[tooltipItem.index];
                const percentage = Math.round((currentValue / total) * 100);
                return `${data.labels[tooltipItem.index]}: ${currentValue} (${percentage}%)`;
              }
            }
          },
          animation: {
            animateRotate: true,
            animateScale: true
          }
        }
      });
    }
    
    // Update Team Composition chart
    function updateTeamChart(type) {
      // Update active button state
      const buttons = document.querySelectorAll('.card-header .btn-group .btn');
      buttons.forEach(btn => btn.classList.remove('active'));
      event.target.classList.add('active');
      
      // Get the chart data
      google.script.run
        .withSuccessHandler(function(data) {
          const ctx = document.getElementById('teamCompositionChart').getContext('2d');
          
          // Destroy existing chart if it exists
          if (teamChartInstance) {
            teamChartInstance.destroy();
          }
          
          teamChartInstance = new Chart(ctx, {
            type: 'doughnut',
            data: {
              labels: data[type].labels,
              datasets: [{
                data: data[type].data,
                backgroundColor: [
                  'rgba(99, 102, 241, 0.7)',
                  'rgba(16, 185, 129, 0.7)',
                  'rgba(245, 158, 11, 0.7)',
                  'rgba(239, 68, 68, 0.7)',
                  'rgba(139, 92, 246, 0.7)',
                  'rgba(14, 165, 233, 0.7)'
                ],
                borderColor: [
                  'rgb(99, 102, 241)',
                  'rgb(16, 185, 129)',
                  'rgb(245, 158, 11)',
                  'rgb(239, 68, 68)',
                  'rgb(139, 92, 246)',
                  'rgb(14, 165, 233)'
                ],
                borderWidth: 1
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              legend: {
                position: 'right',
                labels: {
                  padding: 20,
                  boxWidth: 12
                }
              },
              tooltips: {
                callbacks: {
                  label: function(tooltipItem, data) {
                    const dataset = data.datasets[tooltipItem.datasetIndex];
                    const total = dataset.data.reduce((acc, val) => acc + val, 0);
                    const currentValue = dataset.data[tooltipItem.index];
                    const percentage = Math.round((currentValue / total) * 100);
                    return `${data.labels[tooltipItem.index]}: ${currentValue} (${percentage}%)`;
                  }
                }
              },
              title: {
                display: true,
                text: type === 'role' ? 'Team by Role' : 'Team by Status',
                fontSize: 14
              }
            }
          });
        })
        .withFailureHandler(function(error) {
          console.error('Error updating team chart:', error);
          showToast('Error', 'Failed to update team chart: ' + error, 'danger');
        })
        .getTeamCompositionData();
    }
    
    // Filter metrics by time period
    function filterMetrics(period) {
      // Update active button state
      const buttons = document.querySelectorAll('.quick-filter .btn-group .btn');
      buttons.forEach(btn => btn.classList.remove('active'));
      event.target.classList.add('active');
      
      // Show loading state in metrics cards
      document.getElementById('answer-rate-value').innerHTML = '<div class="placeholder" style="width: 60px; height: 24px;"></div>';
      document.getElementById('talk-time-value').innerHTML = '<div class="placeholder" style="width: 60px; height: 24px;"></div>';
      document.getElementById('on-queue-value').innerHTML = '<div class="placeholder" style="width: 60px; height: 24px;"></div>';
      document.getElementById('interacting-value').innerHTML = '<div class="placeholder" style="width: 60px; height: 24px;"></div>';
      
      // Get the metrics data for the selected period
      google.script.run
        .withSuccessHandler(function(metrics) {
          updatePerformanceMetrics(metrics);
        })
        .withFailureHandler(function(error) {
          console.error('Error updating metrics:', error);
          showToast('Error', 'Failed to update metrics: ' + error, 'danger');
        })
        .getPerformanceMetrics(period);
    }
    
    // Filter dashboard by date
    function filterByDate(date) {
      if (!date) return;
      
      document.getElementById('loading-overlay').style.display = 'flex';
      
      google.script.run
        .withSuccessHandler(function(dashboardData) {
          updateSummaryStats(dashboardData.summary);
          updatePerformanceMetrics(dashboardData.performanceMetrics);
          loadUpcomingSessions(dashboardData.upcomingSessions);
          document.getElementById('loading-overlay').style.display = 'none';
          showToast('Dashboard Filtered', `Showing data for ${new Date(date).toLocaleDateString()}`, 'info');
        })
        .withFailureHandler(function(error) {
          console.error('Error filtering dashboard:', error);
          document.getElementById('loading-overlay').style.display = 'none';
          showToast('Error', 'Failed to filter dashboard: ' + error, 'danger');
        })
        .getDashboardDataByDate(date);
    }
    
    // Action Items functionality
    function completeActionItem(itemId) {
      document.getElementById('loading-overlay').style.display = 'flex';
      
      google.script.run
        .withSuccessHandler(function() {
          loadActionItems();
          document.getElementById('loading-overlay').style.display = 'none';
          showToast('Success', 'Action item marked as complete', 'success');
        })
        .withFailureHandler(function(error) {
          console.error('Error completing action item:', error);
          document.getElementById('loading-overlay').style.display = 'none';
          showToast('Error', 'Failed to complete action item: ' + error, 'danger');
        })
        .completeActionItem(itemId);
    }
    
    function editActionItem(itemId) {
      google.script.run.editActionItem(itemId);
    }
    
    function viewActionItemDetails(itemId) {
      google.script.run.viewActionItemDetails(itemId);
    }
    
    // Team member functionality
    function showTeamMemberDetails(email) {
      google.script.run
        .withSuccessHandler(function(teamMember) {
          if (teamMember) {
            google.script.run.viewTeamMemberProfile(email);
          } else {
            showToast('Error', 'Team member not found', 'danger');
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error showing team member details:', error);
          showToast('Error', 'Failed to load team member details: ' + error, 'danger');
        })
        .getTeamMemberByEmail(email);
    }
    
    // Session management
    function viewSession(sessionId) {
      google.script.run.viewOneOnOneSession(sessionId);
    }
    
    function editSession(sessionId) {
      google.script.run.editOneOnOneSession(sessionId);
    }
    
    // Dashboard management
    function refreshDashboard() {
      document.getElementById('loading-overlay').style.display = 'flex';
      loadDashboardData();
    }
    
    function exportDashboardData() {
      document.getElementById('loading-overlay').style.display = 'flex';
      
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loading-overlay').style.display = 'none';
          showToast('Export Complete', result, 'success');
        })
        .withFailureHandler(function(error) {
          console.error('Error exporting dashboard data:', error);
          document.getElementById('loading-overlay').style.display = 'none';
          showToast('Error', 'Failed to export dashboard data: ' + error, 'danger');
        })
        .exportDashboardData();
    }
    
    function printDashboard() {
      window.print();
    }
    
    // Show notifications (would be implemented on the server side in a real app)
    function showNotifications() {
      google.script.run
        .withSuccessHandler(function(notifications) {
          if (notifications && notifications.length > 0) {
            const notificationsList = notifications.map(n => 
              `<li class="list-group-item">
                <div class="d-flex w-100 justify-content-between">
                  <h6 class="mb-1">${n.title}</h6>
                  <small>${n.time}</small>
                </div>
                <p class="mb-1 small">${n.message}</p>
              </li>`
            ).join('');
            
            // Show notifications in a modal
            const modalHtml = `
              <div class="modal fade" id="notificationsModal" tabindex="-1" role="dialog" aria-hidden="true">
                <div class="modal-dialog" role="document">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title">Notifications</h5>
                      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                      </button>
                    </div>
                    <div class="modal-body p-0">
                      <ul class="list-group list-group-flush">
                        ${notificationsList}
                      </ul>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                      <button type="button" class="btn btn-primary" onclick="markAllNotificationsAsRead()">Mark All as Read</button>
                    </div>
                  </div>
                </div>
              </div>
            `;
            
            // Add modal to the page and show it
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            $('#notificationsModal').modal('show');
            
            // Clean up modal when it's closed
            $('#notificationsModal').on('hidden.bs.modal', function() {
              document.getElementById('notificationsModal').remove();
            });
          } else {
            showToast('No Notifications', 'You have no new notifications', 'info');
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error showing notifications:', error);
          showToast('Error', 'Failed to load notifications: ' + error, 'danger');
        })
        .getNotifications();
    }
    
    function markAllNotificationsAsRead() {
      google.script.run
        .withSuccessHandler(function() {
          $('#notificationsModal').modal('hide');
          showToast('Success', 'All notifications marked as read', 'success');
          
          // Remove notification badge
          document.getElementById('notifications-btn').classList.remove('notification-badge');
        })
        .withFailureHandler(function(error) {
          console.error('Error marking notifications as read:', error);
          showToast('Error', 'Failed to mark notifications as read: ' + error, 'danger');
        })
        .markAllNotificationsAsRead();
    }
    
    // Show user preferences
    function showUserPreferences() {
      google.script.run.showUserPreferences();
    }
    
    // Show help
    function showHelp() {
      google.script.run.showHelp();
    }
    
    // Navigation functions
    function createOneOnOne(email) {
      google.script.run.createOneOnOneSession(email);
    }
    
    function viewOneOnOnes() {
      google.script.run.viewOneOnOneSessions();
    }
    
    function addTeamMember() {
      google.script.run.addTeamMember();
    }
    
    function viewTeam() {
      google.script.run.viewTeam();
    }
    
    function createQAReview() {
      google.script.run.createQAReview();
    }
    
    function enterMetricsData() {
      google.script.run.enterMetricsData();
    }
    
    function viewMetricsReports() {
      google.script.run.viewMetricsReports();
    }
    
    function viewQAReports() {
      google.script.run.viewQAReports();
    }
    
    function manageActionItems() {
      google.script.run.manageActionItems();
    }
    
    function openTimeTracker() {
      google.script.run.openTimeTracker();
    }
    
    function createTask() {
      google.script.run.createTask();
    }

    
    
    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
      // Use the current date for the date filter
      const today = new Date();
      const formattedDate = today.toISOString().split('T')[0]; // YYYY-MM-DD
      document.getElementById('date-filter').value = formattedDate;
      
      // Load user info
      loadCurrentUser();
      
      // Load dashboard data
      loadDashboardData();
    });
  </script>
</body>
</html>



<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>One-on-One Session</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <!-- Select2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    /* Container spacing */
    .container-fluid {
      padding: 30px !important;
    }
    
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.5rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
    }
    
    .card:hover {
      transform: translateY(-3px);
      box-shadow: 0 .5rem 2rem 0 rgba(58,59,69,.2);
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 2rem;
    }
    
    /* Custom tabs */
    .custom-tabs {
      display: flex;
      flex-wrap: nowrap;
      overflow-x: auto;
      padding-bottom: 15px;
      border-bottom: 1px solid var(--gray-200);
      margin-bottom: 25px;
      -ms-overflow-style: none; /* Hide scrollbar in IE and Edge */
      scrollbar-width: none; /* Hide scrollbar in Firefox */
    }
    
    .custom-tabs::-webkit-scrollbar {
      display: none; /* Hide scrollbar in Chrome, Safari and Opera */
    }
    
    .custom-tab {
      padding: 15px 25px;
      border: none;
      border-radius: 50px;
      margin-right: 15px;
      background: var(--gray-100);
      color: var(--gray-700);
      font-weight: 600;
      white-space: nowrap;
      transition: var(--transition);
      cursor: pointer;
      font-size: 1rem;
    }
    
    .custom-tab:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    .custom-tab.active {
      background: var(--primary);
      color: white;
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .custom-tab i {
      margin-right: 10px;
    }
    
    /* Notes tabs */
    .notes-tabs {
      display: flex;
      margin-bottom: 25px;
      background: var(--gray-100);
      border-radius: 10px;
      padding: 8px;
    }
    
    .note-tab {
      padding: 12px 20px;
      border: none;
      border-radius: 8px;
      margin: 0 5px;
      background: transparent;
      color: var(--gray-700);
      font-weight: 600;
      flex: 1;
      text-align: center;
      transition: var(--transition);
      cursor: pointer;
    }
    
    .note-tab:hover:not(.active) {
      background: rgba(78, 115, 223, 0.05);
    }
    
    .note-tab.active {
      background: var(--primary);
      color: white;
      box-shadow: 0 .25rem .5rem rgba(78,115,223,.15);
    }
    
    .notes-content > div {
      display: none;
    }
    
    .notes-content > div.active {
      display: block;
      animation: fadeIn 0.3s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    /* Fancy textarea */
    .fancy-textarea {
      position: relative;
      margin-bottom: 30px;
    }
    
    .fancy-textarea textarea {
      width: 100%;
      border: 1px solid var(--gray-300);
      border-radius: 12px;
      padding: 20px;
      padding-right: 50px;
      min-height: 180px;
      resize: vertical;
      font-size: 1rem;
      line-height: 1.6;
      transition: var(--transition);
      background: #fff;
    }
    
    .fancy-textarea textarea:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
      outline: none;
    }
    
    .fancy-textarea .template-btn {
      position: absolute;
      top: 15px;
      right: 15px;
      background: #fff;
      border: 1px solid var(--gray-300);
      border-radius: 50%;
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--gray-600);
      cursor: pointer;
      transition: var(--transition);
      z-index: 1;
    }
    
    .fancy-textarea .template-btn:hover {
      background: var(--primary);
      color: #fff;
      border-color: var(--primary);
    }
    
    /* Form controls */
    .form-group {
      margin-bottom: 25px;
    }
    
    .form-control {
      border: 1px solid var(--gray-300);
      border-radius: 10px;
      padding: 15px 20px;
      height: auto;
      transition: var(--transition);
      font-size: 1rem;
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    .input-group-text {
      background-color: var(--primary);
      color: white;
      border: 1px solid var(--primary);
      border-radius: 10px 0 0 10px;
      padding: 0 15px;
    }
    
    .form-label {
      color: var(--gray-700);
      font-weight: 600;
      margin-bottom: 12px;
      font-size: 1rem;
    }
    
    /* Custom switch */
    .custom-switch {
      padding-left: 3rem;
    }
    
    .custom-switch .custom-control-label {
      font-size: 1rem;
      padding-top: 5px;
    }
    
    .custom-switch .custom-control-label::before {
      height: 1.5rem;
      width: 2.75rem;
      border-radius: 3rem;
      left: -3rem;
    }
    
    .custom-switch .custom-control-label::after {
      height: calc(1.5rem - 4px);
      width: calc(1.5rem - 4px);
      border-radius: 50%;
      left: calc(-3rem + 2px);
    }
    
    .custom-control-input:checked ~ .custom-control-label::before {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    /* Action items */
    .action-item {
      background: var(--gray-100);
      border-left: 3px solid var(--primary);
      border-radius: 10px;
      padding: 18px 20px;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
      transition: var(--transition);
    }
    
    .action-item:hover {
      background: var(--gray-200);
      transform: translateX(5px);
    }
    
    .action-item-input {
      flex: 1;
      border: none;
      background: transparent;
      font-size: 1rem;
      color: var(--gray-800);
      outline: none;
      padding: 5px 0;
    }
    
    .action-item-remove {
      color: var(--danger);
      cursor: pointer;
      margin-left: 15px;
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: var(--transition);
    }
    
    .action-item-remove:hover {
      background-color: var(--danger);
      color: #fff;
    }
    
    /* Enhanced action items */
    .action-item-enhanced {
      background: var(--gray-100);
      border-left: 3px solid var(--primary);
      border-radius: 10px;
      padding: 18px 20px;
      margin-bottom: 15px;
      transition: var(--transition);
    }
    
    .action-item-enhanced:hover {
      background: var(--gray-200);
      transform: translateX(5px);
    }
    
    .action-item-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    
    .action-item-title {
      font-weight: 600;
      color: var(--gray-800);
    }
    
    .action-item-controls {
      display: flex;
      align-items: center;
    }
    
    .action-item-badge {
      font-size: 12px;
      padding: 5px 10px;
      border-radius: 20px;
      margin-right: 10px;
    }
    
    .action-item-badge.high {
      background-color: #feeced;
      color: var(--danger);
    }
    
    .action-item-badge.medium {
      background-color: #fff5e6;
      color: var(--warning);
    }
    
    .action-item-badge.low {
      background-color: #e6f7f0;
      color: var(--success);
    }
    
    .action-item-content {
      display: flex;
      flex-direction: column;
    }
    
    .action-item-description {
      width: 100%;
      border: none;
      background: transparent;
      font-size: 1rem;
      color: var(--gray-800);
      outline: none;
      padding: 5px 0;
    }
    
    .action-item-row {
      display: flex;
      flex-wrap: wrap;
      margin-top: 10px;
      align-items: center;
    }
    
    .action-item-date {
      margin-right: 15px;
    }
    
    .action-item-priority {
      margin-right: 15px;
    }
    
    /* Buttons */
    .btn {
      border-radius: 10px;
      padding: 12px 25px;
      font-weight: 600;
      transition: var(--transition);
      font-size: 1rem;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background: var(--primary);
      color: #fff;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.85);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .spinner {
      position: relative;
      width: 60px;
      height: 60px;
    }
    
    .spinner:before {
      content: '';
      box-sizing: border-box;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: 3px solid var(--gray-200);
      border-top: 3px solid var(--primary);
      border-radius: 50%;
      animation: spin 0.8s infinite linear;
    }
    
    .loading-text {
      margin-top: 20px;
      font-weight: 600;
      color: var(--primary);
      font-size: 1.1rem;
    }
    
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    /* Toast notifications */
    .toast-container {
      position: fixed;
      top: 25px;
      right: 25px;
      z-index: 9999;
    }
    
    .toast {
      background: #fff;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 .5rem 1.5rem rgba(0,0,0,.1);
      margin-bottom: 20px;
      width: 350px;
      animation: slideInRight 0.3s ease-out;
    }
    
    @keyframes slideInRight {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
    
    .toast-header {
      padding: 15px;
      display: flex;
      align-items: center;
      border-bottom: 1px solid var(--gray-200);
    }
    
    .toast-header.success { border-bottom: 3px solid var(--success); }
    .toast-header.error { border-bottom: 3px solid var(--danger); }
    .toast-header.info { border-bottom: 3px solid var(--info); }
    .toast-header.warning { border-bottom: 3px solid var(--warning); }
    
    .toast-status-icon {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 12px;
      flex-shrink: 0;
    }
    
    .toast-status-icon.success { background: var(--success); color: white; }
    .toast-status-icon.error { background: var(--danger); color: white; }
    .toast-status-icon.info { background: var(--info); color: white; }
    .toast-status-icon.warning { background: var(--warning); color: white; }
    
    .toast-title {
      font-weight: 600;
      color: var(--gray-800);
      flex: 1;
      font-size: 1rem;
    }
    
    .toast-close {
      cursor: pointer;
      color: var(--gray-500);
      transition: var(--transition);
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
    }
    
    .toast-close:hover {
      color: var(--gray-800);
      background-color: var(--gray-200);
    }
    
    .toast-body {
      padding: 20px;
      color: var(--gray-700);
      font-size: 0.95rem;
    }
    
    /* Email preview */
    .email-preview {
      background: var(--gray-100);
      border: 1px solid var(--gray-300);
      border-radius: 12px;
      padding: 25px;
      margin-top: 25px;
    }
    
    /* Enhanced email preview */
    .email-preview-enhanced {
      background: var(--gray-100);
      border: 1px solid var(--gray-300);
      border-radius: 12px;
      padding: 25px;
      margin-top: 25px;
      max-height: 600px;
      overflow-y: auto;
    }
    
    .email-preview-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    
    .email-preview-title {
      font-weight: 600;
      font-size: 16px;
      color: var(--gray-800);
    }
    
    .email-preview-actions {
      display: flex;
      gap: 10px;
    }
    
    .preview-toggle-btn {
      padding: 8px 15px;
      border-radius: 50px;
      background: var(--primary);
      color: white;
      font-size: 13px;
      font-weight: 600;
      border: none;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .preview-toggle-btn:hover {
      background: var(--primary-dark);
    }
    
    .email-preview-container {
      border: 1px solid var(--gray-300);
      border-radius: 8px;
      background: white;
      overflow: hidden;
    }
    
    .email-preview-frame {
      width: 100%;
      height: 500px;
      border: none;
    }
    
    /* Page header section */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin-right: 20px;
    }
    
    /* Meta information badges */
    .meta-badges {
      display: flex;
      flex-wrap: wrap;
      margin-top: 10px;
      margin-left: 10px;
    }
    
    .meta-badge {
      background: var(--gray-100);
      border: 1px solid var(--gray-200);
      border-radius: 50px;
      padding: 8px 15px;
      display: inline-flex;
      align-items: center;
      font-size: 0.9rem;
      color: var(--gray-700);
      margin: 5px 10px 5px 0;
      white-space: nowrap;
    }
    
    .meta-badge i {
      margin-right: 8px;
      color: var(--primary);
    }
    
    /* Progress indicator */
    .progress-indicator {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin: 30px 0;
      padding: 0 20px;
    }
    
    .progress-step {
      width: 35px;
      height: 35px;
      border-radius: 50%;
      background: var(--gray-200);
      color: var(--gray-600);
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      position: relative;
      z-index: 2;
    }
    
    .progress-step.active {
      background: var(--primary);
      color: white;
    }
    
    .progress-step.completed {
      background: var(--success);
      color: white;
    }
    
    .progress-line {
      flex: 1;
      height: 4px;
      background: var(--gray-200);
      margin: 0 10px;
    }
    
    .progress-line.active {
      background: var(--primary);
    }
    
    /* Tip cards */
    .card.tip-card {
      background-color: var(--gray-100);
      padding: 20px;
      border-left: 4px solid var(--warning);
      margin-top: 15px;
    }
    
    .card-title {
      font-size: 1.1rem;
      margin-bottom: 10px;
    }
    
    /* Tab content */
    .tab-content {
      min-height: 400px;
      padding: 0 20px;
      display: none;
    }
    
    .tab-content.active {
      display: block;
    }
    
    /* Responsive layout helpers */
    .w-mobile-100 {
      width: auto;
    }
    
    @media (max-width: 768px) {
      .w-mobile-100 {
        width: 100%;
        margin-bottom: 15px;
      }
      
      .container-fluid {
        padding: 15px !important;
      }
      
      .page-header {
        padding: 20px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .meta-badges {
        margin-left: 0;
        margin-bottom: 15px;
      }
      
      .card-body {
        padding: 1.25rem;
      }
      
      .tab-content {
        padding: 0;
      }
      
      .custom-tab {
        padding: 10px 15px;
        font-size: 0.9rem;
      }
      
      .fancy-textarea textarea {
        min-height: 150px;
        padding: 15px;
      }
    }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
      width: 10px;
      height: 10px;
    }
    
    ::-webkit-scrollbar-track {
      background: var(--gray-100);
      border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
      background: var(--gray-400);
      border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: var(--primary);
    }
    
    /* Email Scheduling */
    .scheduled-time-section {
      background: var(--gray-100);
      border-radius: 10px;
      padding: 20px;
      margin-top: 20px;
      border: 1px solid var(--gray-300);
    }
    
    .scheduled-time-header {
      font-weight: 600;
      margin-bottom: 15px;
      font-size: 16px;
      color: var(--gray-800);
      display: flex;
      align-items: center;
    }
    
    .scheduled-time-header i {
      color: var(--primary);
      margin-right: 8px;
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loading-overlay">
    <div class="spinner"></div>
    <div class="loading-text">Loading...</div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container" id="toast-container"></div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <div class="d-flex align-items-center flex-wrap">
        <h2 class="page-title" id="form-title">
          <i class="fas fa-comments text-primary mr-2"></i>Create One-on-One Session
        </h2>
        <div class="meta-badges">
          <div class="meta-badge" id="userBadge">
            <i class="fas fa-user"></i> Loading...
          </div>
          <div class="meta-badge" id="dateBadge">
            <i class="far fa-calendar-alt"></i> Loading...
          </div>
        </div>
      </div>
      <button class="btn btn-outline-primary w-mobile-100" onclick="goBack()">
        <i class="fas fa-arrow-left mr-2"></i>Back to List
      </button>
    </div>
    
    <!-- Alert Messages -->
    <div class="alert alert-danger animate__animated animate__fadeIn" id="error-alert" style="display:none;">
      <i class="fas fa-exclamation-circle mr-2"></i><span id="error-message"></span>
    </div>
    <div class="alert alert-success animate__animated animate__fadeIn" id="success-alert" style="display:none;">
      <i class="fas fa-check-circle mr-2"></i><span id="success-message"></span>
    </div>
    
    <!-- Progress Indicator -->
    <div class="progress-indicator">
      <div class="progress-step active" id="step-1">1</div>
      <div class="progress-line" id="line-1"></div>
      <div class="progress-step" id="step-2">2</div>
      <div class="progress-line" id="line-2"></div>
      <div class="progress-step" id="step-3">3</div>
      <div class="progress-line" id="line-3"></div>
      <div class="progress-step" id="step-4">4</div>
      <div class="progress-line" id="line-4"></div>
      <div class="progress-step" id="step-5">5</div>
    </div>
    
    <form id="oneOnOneForm">
      <input type="hidden" id="sessionId">
      
      <!-- Main Content Card -->
      <div class="card animate__animated animate__fadeIn">
        <div class="card-body p-0">
          <!-- Custom Tabs -->
          <div class="custom-tabs px-4 pt-4" id="mainTabs">
            <button type="button" class="custom-tab active" id="member-tab" data-target="member-content">
              <i class="fas fa-user"></i> Team Member
            </button>
            <button type="button" class="custom-tab" id="details-tab" data-target="details-content">
              <i class="fas fa-calendar-alt"></i> Details
            </button>
            <button type="button" class="custom-tab" id="notes-tab" data-target="notes-content">
              <i class="fas fa-clipboard"></i> Notes
            </button>
            <button type="button" class="custom-tab" id="actions-tab" data-target="actions-content">
              <i class="fas fa-tasks"></i> Actions
            </button>
                        <button type="button" class="custom-tab" id="followup-tab" data-target="followup-content">
              <i class="fas fa-envelope"></i> Follow-up
            </button>
          </div>
          
          <!-- Tab Contents -->
          <div class="p-4">
            <!-- Team Member Tab -->
            <div id="member-content" class="tab-content active">
              <h4 class="mb-4">
                <i class="fas fa-user-circle text-primary mr-2"></i>Team Member Information
              </h4>
              
              <div class="custom-control custom-switch mb-4">
                <input type="checkbox" class="custom-control-input" id="newMemberSwitch">
                <label class="custom-control-label" for="newMemberSwitch">Add New Team Member</label>
              </div>
              
              <!-- Existing Member Section -->
              <div id="existingMemberSection">
                <div class="form-group">
                  <label class="form-label" for="teamMemberSelect">
                    <i class="fas fa-users text-primary mr-1"></i> Select Team Member
                  </label>
                  <select class="form-control" id="teamMemberSelect" style="width: 100%">
                    <option value="">-- Select Team Member --</option>
                  </select>
                  <small class="form-text text-muted mt-2">Select an existing team member from the list</small>
                </div>
              </div>
              
              <!-- New Member Section -->
              <div id="newMemberSection" style="display:none;">
                <div class="card shadow-sm bg-light">
                  <div class="card-body">
                    <div class="row">
                      <div class="col-md-6">
                        <div class="form-group">
                          <label class="form-label" for="newEmail">
                            <i class="fas fa-envelope text-primary mr-1"></i> Email Address
                          </label>
                          <input type="email" class="form-control" id="newEmail" placeholder="email@example.com">
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label class="form-label" for="newRole">
                            <i class="fas fa-briefcase text-primary mr-1"></i> Role
                          </label>
                          <select class="form-control" id="newRole">
                            <option value="Team Member">Team Member</option>
                            <option value="Senior Team Member">Senior Team Member</option>
                            <option value="Team Lead">Team Lead</option>
                            <option value="Manager">Manager</option>
                          </select>
                        </div>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-md-6">
                        <div class="form-group">
                          <label class="form-label" for="newFirstName">
                            <i class="fas fa-user text-primary mr-1"></i> First Name
                          </label>
                          <input type="text" class="form-control" id="newFirstName" placeholder="First Name">
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group mb-0">
                          <label class="form-label" for="newLastName">
                            <i class="fas fa-user text-primary mr-1"></i> Last Name
                          </label>
                          <input type="text" class="form-control" id="newLastName" placeholder="Last Name">
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="text-right mt-5">
                <button type="button" class="btn btn-primary" onclick="goToTab('details-tab')">
                  Next Step <i class="fas fa-arrow-right ml-2"></i>
                </button>
              </div>
            </div>
            
            <!-- Session Details Tab -->
            <div id="details-content" class="tab-content">
              <h4 class="mb-4">
                <i class="fas fa-info-circle text-primary mr-2"></i>Session Details
              </h4>
              
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    <label class="form-label" for="sessionDate">
                      <i class="fas fa-calendar-day text-primary mr-1"></i> Session Date & Time
                    </label>
                    <div class="input-group">
                      <div class="input-group-prepend">
                        <span class="input-group-text">
                          <i class="fas fa-calendar-alt"></i>
                        </span>
                      </div>
                      <input type="datetime-local" class="form-control" id="sessionDate" required>
                    </div>
                    <small class="form-text text-muted mt-2">When did/will this session take place?</small>
                  </div>
                </div>
                
                <div class="col-md-6">
                  <div class="form-group">
                    <label class="form-label" for="sessionLocation">
                      <i class="fas fa-map-marker-alt text-primary mr-1"></i> Location
                    </label>
                    <select class="form-control" id="sessionLocation">
                      <option value="Virtual" selected>Virtual Meeting</option>
                      <option value="In Person">In Person</option>
                      <option value="Phone">Phone Call</option>
                      <option value="Other">Other</option>
                    </select>
                    <small class="form-text text-muted mt-2">Where did/will this session take place?</small>
                  </div>
                </div>
              </div>
              
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    <label class="form-label" for="sessionStatus">
                      <i class="fas fa-tasks text-primary mr-1"></i> Session Status
                    </label>
                    <div class="status-select">
                      <select class="form-control" id="sessionStatus">
                        <option value="Scheduled">Scheduled</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Completed" selected>Completed</option>
                        <option value="Cancelled">Cancelled</option>
                      </select>
                    </div>
                  </div>
                </div>
                
                <div class="col-md-6">
                  <div class="form-group">
                    <label class="form-label" for="followUpDate">
                      <i class="fas fa-calendar-check text-primary mr-1"></i> Follow-up Date
                    </label>
                    <div class="input-group">
                      <div class="input-group-prepend">
                        <span class="input-group-text">
                          <i class="fas fa-calendar-plus"></i>
                        </span>
                      </div>
                      <input type="date" class="form-control" id="followUpDate">
                    </div>
                    <small class="form-text text-muted mt-2">When should the next session be scheduled?</small>
                  </div>
                </div>
              </div>
              
              <div class="text-right mt-5">
                <button type="button" class="btn btn-outline-secondary mr-2" onclick="goToTab('member-tab')">
                  <i class="fas fa-arrow-left mr-2"></i> Previous
                </button>
                <button type="button" class="btn btn-primary" onclick="goToTab('notes-tab')">
                  Next Step <i class="fas fa-arrow-right ml-2"></i>
                </button>
              </div>
            </div>
            
            <!-- Notes Tab -->
            <div id="notes-content" class="tab-content">
              <h4 class="mb-4">
                <i class="fas fa-clipboard-list text-primary mr-2"></i>Session Notes
              </h4>
              
              <!-- Notes Inner Tabs -->
              <div class="notes-tabs">
                <button type="button" class="note-tab active" data-target="pre-meeting">
                  <i class="fas fa-clipboard-check mr-1"></i> Pre-Meeting
                </button>
                <button type="button" class="note-tab" data-target="during-meeting">
                  <i class="fas fa-comments mr-1"></i> During Meeting
                </button>
                <button type="button" class="note-tab" data-target="post-meeting">
                  <i class="fas fa-clipboard-list mr-1"></i> Post-Meeting
                </button>
              </div>
              
              <!-- Notes Content -->
              <div class="notes-content">
                <!-- Pre-Meeting Notes -->
                <div class="active" id="pre-meeting">
                  <div class="fancy-textarea">
                    <textarea id="prepNotes" placeholder="Enter agenda items and preparation notes for the meeting..."></textarea>
                    <div class="template-btn" onclick="useTemplate('prepNotes')" title="Use Template">
                      <i class="fas fa-file-alt"></i>
                    </div>
                  </div>
                  <div class="card tip-card">
                    <h6 class="card-title"><i class="fas fa-lightbulb text-warning mr-2"></i>Pre-Meeting Tips</h6>
                    <p class="card-text small">Prepare your agenda in advance and review previous action items. Consider what topics are most important to discuss and what feedback you want to provide.</p>
                  </div>
                </div>
                
                <!-- During Meeting Notes -->
                <div id="during-meeting">
                  <div class="fancy-textarea mb-4">
                    <textarea id="statusNotes" placeholder="Enter current status updates and progress..."></textarea>
                    <div class="template-btn" onclick="useTemplate('statusNotes')" title="Use Template">
                      <i class="fas fa-file-alt"></i>
                    </div>
                  </div>
                  <div class="fancy-textarea">
                    <textarea id="performanceNotes" placeholder="Enter performance feedback and observations..."></textarea>
                    <div class="template-btn" onclick="useTemplate('performanceNotes')" title="Use Template">
                      <i class="fas fa-file-alt"></i>
                    </div>
                  </div>
                </div>
                
                <!-- Post-Meeting Notes -->
                <div id="post-meeting">
                  <div class="fancy-textarea mb-4">
                    <textarea id="developmentNotes" placeholder="Enter development goals and progress..."></textarea>
                    <div class="template-btn" onclick="useTemplate('developmentNotes')" title="Use Template">
                      <i class="fas fa-file-alt"></i>
                    </div>
                  </div>
                  <div class="fancy-textarea">
                    <textarea id="supportNotes" placeholder="Enter notes about support needed..."></textarea>
                    <div class="template-btn" onclick="useTemplate('supportNotes')" title="Use Template">
                      <i class="fas fa-file-alt"></i>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="text-right mt-5">
                <button type="button" class="btn btn-outline-secondary mr-2" onclick="goToTab('details-tab')">
                  <i class="fas fa-arrow-left mr-2"></i> Previous
                </button>
                <button type="button" class="btn btn-primary" onclick="goToTab('actions-tab')">
                  Next Step <i class="fas fa-arrow-right ml-2"></i>
                </button>
              </div>
            </div>
            
            <!-- Action Items Tab -->
            <div id="actions-content" class="tab-content">
              <div class="d-flex justify-content-between align-items-center mb-4">
                <h4 class="mb-0">
                  <i class="fas fa-tasks text-primary mr-2"></i>Action Items
                </h4>
                <button type="button" class="btn btn-primary" onclick="addEnhancedActionItem()">
                  <i class="fas fa-plus mr-1"></i> Add Item
                </button>
              </div>
              
              <div id="actionItemsList" class="mb-4">
                <!-- Action items will be added here dynamically -->
              </div>
              
              <div class="card tip-card">
                <h6 class="card-title"><i class="fas fa-lightbulb text-warning mr-2"></i>Action Item Tips</h6>
                <p class="card-text small">Be specific about who is responsible for each action item and include a target completion date when possible. Make sure all items are clear and measurable.</p>
              </div>
              
              <div class="text-right mt-5">
                <button type="button" class="btn btn-outline-secondary mr-2" onclick="goToTab('notes-tab')">
                  <i class="fas fa-arrow-left mr-2"></i> Previous
                </button>
                <button type="button" class="btn btn-primary" onclick="goToTab('followup-tab')">
                  Next Step <i class="fas fa-arrow-right ml-2"></i>
                </button>
              </div>
            </div>
            
            <!-- Follow-up Tab -->
            <div id="followup-content" class="tab-content">
              <h4 class="mb-4">
                <i class="fas fa-envelope-open-text text-primary mr-2"></i>Follow-up Email
              </h4>
              
              <div class="custom-control custom-switch mb-4">
                <input type="checkbox" class="custom-control-input" id="sendEmailSwitch" checked>
                <label class="custom-control-label" for="sendEmailSwitch">Send follow-up email after saving</label>
              </div>
              
              <div id="emailSection">
                <div class="card shadow-sm">
                  <div class="card-body">
                    <div class="row mb-3">
                      <div class="col-md-6">
                        <div class="form-group">
                          <label class="form-label" for="emailSubject">
                            <i class="fas fa-heading text-primary mr-1"></i> Email Subject
                          </label>
                          <input type="text" class="form-control" id="emailSubject" value="One-on-One Session Summary">
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label class="form-label">
                            <i class="fas fa-file-alt text-primary mr-1"></i> Email Template
                          </label>
                          <div class="input-group">
                            <select class="form-control" id="emailTemplate" onchange="applyEmailTemplate()">
                              <option value="">-- Select Template --</option>
                              <option value="modernSummary" selected>Modern Summary</option>
                              <option value="detailedReport">Detailed Report</option>
                              <option value="actionFocused">Action Items Focus</option>
                              <option value="custom">Custom (Plain Text)</option>
                            </select>
                            <div class="input-group-append">
                              <button class="btn btn-outline-primary" type="button" onclick="previewEmail()">
                                <i class="fas fa-eye mr-1"></i> Preview
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div class="scheduled-time-section" id="scheduleEmailSection">
                      <div class="scheduled-time-header">
                        <i class="fas fa-clock"></i> Schedule Email Delivery
                      </div>
                      <div class="custom-control custom-switch mb-3">
                        <input type="checkbox" class="custom-control-input" id="scheduleEmailSwitch">
                        <label class="custom-control-label" for="scheduleEmailSwitch">Schedule this email for later</label>
                      </div>
                      <div id="scheduleTimeInputs" style="display: none;">
                        <div class="row">
                          <div class="col-md-6">
                            <div class="form-group">
                              <label class="form-label" for="scheduledDate">Date</label>
                              <input type="date" class="form-control" id="scheduledDate">
                            </div>
                          </div>
                          <div class="col-md-6">
                            <div class="form-group">
                              <label class="form-label" for="scheduledTime">Time</label>
                              <input type="time" class="form-control" id="scheduledTime">
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div id="emailContentSection" style="display: none;">
                      <div class="form-group mt-4">
                        <label class="form-label" for="emailContent">
                          <i class="fas fa-pen-fancy text-primary mr-1"></i> Email Content
                        </label>
                        <textarea class="form-control" id="emailContent" rows="8" 
                          placeholder="Enter email content or select a template..."></textarea>
                      </div>
                    </div>
                    
                    <div id="emailPreview" class="email-preview-enhanced">
                      <div class="email-preview-header">
                        <div class="email-preview-title">
                          <i class="fas fa-envelope text-primary mr-2"></i>Email Preview
                        </div>
                        <div class="email-preview-actions">
                          <button type="button" class="preview-toggle-btn" id="toggleContentType">
                            <i class="fas fa-code mr-1"></i> Show HTML
                          </button>
                        </div>
                      </div>
                      <div class="email-preview-container">
                        <div id="previewContent"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="text-right mt-5">
                <button type="button" class="btn btn-outline-secondary mr-2" onclick="goToTab('actions-tab')">
                  <i class="fas fa-arrow-left mr-2"></i> Previous
                </button>
                <button type="button" class="btn btn-info mr-2" onclick="saveAsDraft()">
                  <i class="fas fa-save mr-2"></i> Save as Draft
                </button>
                <button type="button" class="btn btn-success" onclick="saveSession()">
                  <i class="fas fa-check mr-2"></i> Complete Session
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </form>
  </div>

  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Select2 JS -->
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  
  <script>
    // Global variables
    let isEditMode = false;
    let currentMemberName = '';
    let teamMembers = [];
    let currentTab = 'member';
    let currentUser = '';
    let currentUserRole = '';
    let isHtmlPreview = true;
    let actionItemCounter = 0;
    
    $(document).ready(function() {
      // Get current user and date from server
      getCurrentUserAndDate();
      
      // Initialize custom tabs and note tabs
      initializeTabs();
      
      // Initialize Select2 for dropdown
      initSelect2();
      
      // Set default date and time
      setDefaultDateTime();
      
      // Setup event listeners
      setupEventListeners();
      
      // Load team members
      loadTeamMembers();
      
      // Check if editing existing session
      checkForEditSession();
      
      // Add a default action item
      addEnhancedActionItem();
      
      // Initialize email preview
      initializeEmailPreview();
    });
    
    function getCurrentUserAndDate() {
      google.script.run
        .withSuccessHandler(function(data) {
          // Use the data returned from the server
          if (data) {
            // Update the UI with actual data
            $('#userBadge').html(`<i class="fas fa-user"></i> ${data.username || ''}`);
            $('#dateBadge').html(`<i class="far fa-calendar-alt"></i> ${data.formattedDate || ''}`);
            
            // Store username for later use in email templates
            currentUser = data.username || '';
            currentUserRole = data.userRole || 'Manager';
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error fetching user data:', error);
        })
        .getCurrentUserAndDate();
    }
    
    function initializeTabs() {
      // Main tabs functionality
      $('.custom-tab').on('click', function() {
        const targetId = $(this).data('target');
        
        // Update tabs
        $('.custom-tab').removeClass('active');
        $(this).addClass('active');
        
        // Update content
        $('.tab-content').removeClass('active');
        $(`#${targetId}`).addClass('active');
        
        // Update current tab
        currentTab = $(this).attr('id').split('-')[0];
        
        // Update progress steps
        updateProgressSteps();
        
        // Special case for follow-up tab: refresh email preview
        if (currentTab === 'followup') {
          refreshEmailPreview();
        }
      });
      
      // Notes tabs functionality
      $('.note-tab').on('click', function() {
        const targetId = $(this).data('target');
        
        // Update tabs
        $('.note-tab').removeClass('active');
        $(this).addClass('active');
        
        // Update content
        $('.notes-content > div').removeClass('active');
        $(`#${targetId}`).addClass('active');
      });
    }
    
    function updateProgressSteps() {
      // Map tabs to steps
      const steps = {
        'member': 1,
        'details': 2,
        'notes': 3,
        'actions': 4,
        'followup': 5
      };
      
      const currentStep = steps[currentTab];
      
      // Update steps and lines
      for (let i = 1; i <= 5; i++) {
        if (i < currentStep) {
          $(`#step-${i}`).removeClass('active').addClass('completed');
          $(`#line-${i}`).addClass('active');
        } else if (i === currentStep) {
          $(`#step-${i}`).addClass('active').removeClass('completed');
          $(`#line-${i}`).removeClass('active');
        } else {
          $(`#step-${i}`).removeClass('active completed');
          $(`#line-${i}`).removeClass('active');
        }
      }
    }
    
    function initSelect2() {
      // Initialize select2 for team member dropdown
      try {
        $('#teamMemberSelect').select2({
          placeholder: "Search for a team member...",
          allowClear: true,
          templateResult: formatMemberOption,
          templateSelection: formatMemberSelection,
          dropdownParent: $('#existingMemberSection')
        });
      } catch(e) {
        console.error("Select2 initialization error:", e);
      }
    }
    
    function formatMemberOption(member) {
      if (!member.id) return member.text;
      
      const name = member.text.split(' (')[0];
      const email = member.text.split(' (')[1]?.replace(')', '') || '';
      const initials = name.split(' ').map(n => n[0]).join('').toUpperCase();
      
      return $(`
        <div class="d-flex align-items-center p-1">
          <div style="width: 36px; height: 36px; background-color: var(--primary); color: white; 
                      border-radius: 50%; display: flex; justify-content: center; 
                      align-items: center; margin-right: 10px; font-weight: 600;">
            ${initials}
          </div>
          <div>
            <div style="font-weight: 600;">${name}</div>
            <small class="text-muted">${email}</small>
          </div>
        </div>
      `);
    }
    
    function formatMemberSelection(member) {
      if (!member.id) return member.text;
      return member.text.split(' (')[0];
    }
    
    function setDefaultDateTime() {
      // Set current date and time as default
      const now = new Date();
      const year = now.getFullYear();
      const month = (now.getMonth() + 1).toString().padStart(2, '0');
      const day = now.getDate().toString().padStart(2, '0');
      const hours = now.getHours().toString().padStart(2, '0');
      const minutes = now.getMinutes().toString().padStart(2, '0');
      
      const defaultDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
      $('#sessionDate').val(defaultDateTime);
      
      // Set follow-up date to one week from now by default
      const nextWeek = new Date();
      nextWeek.setDate(nextWeek.getDate() + 7);
      
      const followUpYear = nextWeek.getFullYear();
      const followUpMonth = (nextWeek.getMonth() + 1).toString().padStart(2, '0');
      const followUpDay = nextWeek.getDate().toString().padStart(2, '0');
      
      const followUpDate = `${followUpYear}-${followUpMonth}-${followUpDay}`;
      $('#followUpDate').val(followUpDate);
      
      // Set default scheduled email time (tomorrow at 9am)
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(9, 0, 0, 0);
      
      const scheduledYear = tomorrow.getFullYear();
      const scheduledMonth = (tomorrow.getMonth() + 1).toString().padStart(2, '0');
      const scheduledDay = tomorrow.getDate().toString().padStart(2, '0');
      const scheduledHours = tomorrow.getHours().toString().padStart(2, '0');
      const scheduledMinutes = tomorrow.getMinutes().toString().padStart(2, '0');
      
      const scheduledDate = `${scheduledYear}-${scheduledMonth}-${scheduledDay}`;
      const scheduledTime = `${scheduledHours}:${scheduledMinutes}`;
      
      $('#scheduledDate').val(scheduledDate);
      $('#scheduledTime').val(scheduledTime);
    }
    
    function setupEventListeners() {
      // New Member Switch
      $('#newMemberSwitch').on('change', function() {
        const isAddingNew = $(this).is(':checked');
        $('#existingMemberSection').toggle(!isAddingNew);
        $('#newMemberSection').toggle(isAddingNew);
      });
      
      // Send Email Switch
      $('#sendEmailSwitch').on('change', function() {
        const shouldSendEmail = $(this).is(':checked');
        $('#emailSection').toggle(shouldSendEmail);
        
        if (shouldSendEmail) {
          refreshEmailPreview();
        }
      });
      
      // Schedule Email Switch
      $('#scheduleEmailSwitch').on('change', function() {
        const shouldSchedule = $(this).is(':checked');
        $('#scheduleTimeInputs').toggle(shouldSchedule);
      });
      
      // Email Template Switch
      $('#emailTemplate').on('change', function() {
        const template = $(this).val();
        // Show content section only for custom template
        $('#emailContentSection').toggle(template === 'custom');
        refreshEmailPreview();
      });
      
      // Toggle Content Type Button
      $('#toggleContentType').on('click', function() {
        isHtmlPreview = !isHtmlPreview;
        if (isHtmlPreview) {
          $(this).html('<i class="fas fa-code mr-1"></i> Show HTML');
        } else {
          $(this).html('<i class="fas fa-eye mr-1"></i> Show Preview');
        }
        refreshEmailPreview();
      });
      
      // Team Member Select Change
      $('#teamMemberSelect').on('change', function() {
        const selectedValue = $(this).val();
        const selectedMember = teamMembers.find(m => m.email === selectedValue);
        
        if (selectedMember) {
          currentMemberName = selectedMember.firstName + ' ' + selectedMember.lastName;
          refreshEmailPreview();
        }
      });
      
      // Watch for changes to fields that affect email content
      $('#statusNotes, #performanceNotes, #developmentNotes, #supportNotes, #followUpDate').on('change keyup', function() {
        // Only refresh if we're on the followup tab
        if (currentTab === 'followup') {
          refreshEmailPreview();
        }
      });
    }
    
    function loadTeamMembers() {
      showLoading('Loading team members...');
      
      google.script.run
        .withSuccessHandler(function(members) {
          hideLoading();
          
          if (!members || members.length === 0) {
            showToast('No team members found. Please add a new team member.', 'info');
            $('#newMemberSwitch').prop('checked', true).trigger('change');
            return;
          }
          
          teamMembers = members;
          const select = $('#teamMemberSelect');
          select.empty();
          select.append('<option value="">-- Select Team Member --</option>');
          
          members.forEach(function(member) {
            const option = $('<option></option>')
              .val(member.email)
              .text(`${member.firstName} ${member.lastName} (${member.email})`);
            select.append(option);
          });
          
          // Refresh Select2
          select.trigger('change');
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showToast('Error loading team members: ' + error, 'error');
          console.error('Error loading team members:', error);
        })
        .getTeamMembers();
    }
    
    function checkForEditSession() {
      google.script.run
        .withSuccessHandler(function(sessionId) {
          if (sessionId) {
            isEditMode = true;
            $('#form-title').html('<i class="fas fa-edit text-primary mr-2"></i>Edit One-on-One Session');
            $('#sessionId').val(sessionId);
            loadSessionData(sessionId);
          }
        })
        .getCachedOneOnOneSessionId();
    }
    
    function loadSessionData(sessionId) {
      showLoading('Loading session data...');
      
      google.script.run
        .withSuccessHandler(function(session) {
          hideLoading();
          
          if (!session) {
            showToast('Session not found', 'error');
            return;
          }
          
          try {
            // Set team member
            $('#teamMemberSelect').val(session.teamMemberEmail).trigger('change');
            currentMemberName = session.teamMemberName || '';
            
            // Set session date and time
            if (session.date) {
              const sessionDate = new Date(session.date);
              const year = sessionDate.getFullYear();
              const month = (sessionDate.getMonth() + 1).toString().padStart(2, '0');
              const day = sessionDate.getDate().toString().padStart(2, '0');
              const hours = sessionDate.getHours().toString().padStart(2, '0');
              const minutes = sessionDate.getMinutes().toString().padStart(2, '0');
              
              const formattedDate = `${year}-${month}-${day}T${hours}:${minutes}`;
              $('#sessionDate').val(formattedDate);
            }
            
            // Set follow-up date
            if (session.followUpDate) {
              const followUpDate = new Date(session.followUpDate);
              const year = followUpDate.getFullYear();
              const month = (followUpDate.getMonth() + 1).toString().padStart(2, '0');
              const day = followUpDate.getDate().toString().padStart(2, '0');
              
              const formattedDate = `${year}-${month}-${day}`;
              $('#followUpDate').val(formattedDate);
            }
            
            // Set other fields
            $('#sessionLocation').val(session.location || 'Virtual');
            $('#sessionStatus').val(session.status || 'Completed');
            
            // Set notes fields with null/undefined check
            $('#prepNotes').val(session.prepNotes || '');
            $('#statusNotes').val(session.statusNotes || '');
            $('#performanceNotes').val(session.performanceNotes || '');
            $('#developmentNotes').val(session.developmentNotes || '');
            $('#supportNotes').val(session.supportNotes || '');
            
            // Set action items
            $('#actionItemsList').empty();
            if (session.actionItems && Array.isArray(session.actionItems)) {
              // If the action items have detailed structure
              if (session.actionItems.length > 0 && typeof session.actionItems[0] === 'object') {
                session.actionItems.forEach(function(item) {
                  addEnhancedActionItem(item);
                });
              } else {
                // Simple action items (just strings)
                session.actionItems.forEach(function(item) {
                  addEnhancedActionItem({ description: item });
                });
              }
            } else {
              // Add default empty action item
              addEnhancedActionItem();
            }
            
            // Set email options if available
            if (session.sendFollowUpEmail !== undefined) {
              $('#sendEmailSwitch').prop('checked', session.sendFollowUpEmail).trigger('change');
            }
            
            if (session.emailSubject) {
              $('#emailSubject').val(session.emailSubject);
            }
            
            if (session.emailContent) {
              $('#emailContent').val(session.emailContent);
              $('#emailTemplate').val('custom').trigger('change');
            }
            
            // Refresh the email preview
            refreshEmailPreview();
            
            showToast('Session loaded successfully', 'success');
          } catch (err) {
            console.error('Error processing session data:', err);
            showToast('Error loading session data: ' + err.message, 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          console.error('Server error loading session:', error);
          showToast('Error from server: ' + (error || 'Unknown error'), 'error');
        })
        .getOneOnOneSessionById(sessionId);
    }
    
    function goToTab(tabId) {
      $(`#${tabId}`).click();
    }
    
    function addEnhancedActionItem(data = {}) {
      actionItemCounter++;
      const itemId = 'action_' + actionItemCounter;
      
      // Set defaults for each field
      const description = data.description || '';
      const dueDate = data.dueDate || '';
      const priority = data.priority || 'medium';
      
      // Format the date if it exists
      let formattedDueDate = '';
      if (dueDate) {
        const dateObj = new Date(dueDate);
        const year = dateObj.getFullYear();
        const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');
        const day = dateObj.getDate().toString().padStart(2, '0');
        formattedDueDate = `${year}-${month}-${day}`;
      }
      
      const actionItem = $(`
        <div class="action-item-enhanced" id="${itemId}">
          <div class="action-item-content">
            <input type="text" class="action-item-description" 
                   placeholder="Enter an action item..." 
                   value="${escapeHtml(description)}">
            <div class="action-item-row">
              <div class="action-item-date">
                <label class="mr-2 mb-0"><i class="far fa-calendar-alt text-primary mr-1"></i> Due Date:</label>
                <input type="date" class="form-control form-control-sm" style="display:inline-block; width:auto;">
              </div>
              <div class="action-item-priority">
                <label class="mr-2 mb-0"><i class="fas fa-flag text-primary mr-1"></i> Priority:</label>
                <select class="form-control form-control-sm" style="display:inline-block; width:auto;">
                  <option value="low">Low</option>
                  <option value="medium" selected>Medium</option>
                  <option value="high">High</option>
                </select>
              </div>
              <button type="button" class="btn btn-sm btn-danger" onclick="removeActionItem('${itemId}')">
                <i class="fas fa-trash"></i> Remove
              </button>
            </div>
          </div>
        </div>
      `);
      
      // Set any values passed in
      if (formattedDueDate) {
        actionItem.find('input[type="date"]').val(formattedDueDate);
      }
      
      if (priority) {
        actionItem.find('select').val(priority);
      }
      
      $('#actionItemsList').append(actionItem);
      
      // Return the ID so it can be referenced later
      return itemId;
    }
    
    function removeActionItem(itemId) {
      $(`#${itemId}`).fadeOut(300, function() {
        $(this).remove();
        
        // Add empty item if list is now empty
        if ($('#actionItemsList').children().length === 0) {
          addEnhancedActionItem();
        }
        
        // Update email preview if we're on the follow-up tab
        if (currentTab === 'followup') {
          refreshEmailPreview();
        }
      });
    }
    
    function escapeHtml(unsafe) {
      return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }
    
    function useTemplate(fieldId) {
      let template = '';
      
      switch (fieldId) {
        case 'prepNotes':
          template = "Agenda:\n\n1. Review previous action items\n2. Current project updates\n3. Challenges and roadblocks\n4. Personal development\n5. Any additional topics";
          break;
        case 'statusNotes':
          template = "Project Status:\n\n- Current projects and their status\n- Timeline updates\n- Achievements since last one-on-one\n- Upcoming milestones";
          break;
        case 'performanceNotes':
          template = "Strengths:\n- \n- \n- \n\nAreas for improvement:\n- \n- \n- \n\nFeedback:\n";
          break;
        case 'developmentNotes':
          template = "Career Goals:\n\nSkills to develop:\n- \n- \n\nAction plan:\n1. \n2. \n\nResources needed:";
          break;
        case 'supportNotes':
          template = "Support needed:\n\nResources requested:\n\nObstacles to address:\n\nHow I can help:";
          break;
      }
      
      const currentValue = $(`#${fieldId}`).val();
      
      if (currentValue && currentValue.trim() !== '') {
        if (confirm('This will replace your current text. Continue?')) {
          $(`#${fieldId}`).val(template).focus();
        }
      } else {
        $(`#${fieldId}`).val(template).focus();
      }
      
      // If we're on the follow-up tab, refresh the preview
      if (currentTab === 'followup') {
        refreshEmailPreview();
      }
    }
    
    function initializeEmailPreview() {
      // Create an iframe to display the preview
      const iframe = document.createElement('iframe');
      iframe.className = 'email-preview-frame';
      $('#previewContent').append(iframe);
      
      // Initial preview
      refreshEmailPreview();
    }
    
    function refreshEmailPreview() {
      if (!$('#sendEmailSwitch').is(':checked')) {
        return;
      }
      
      const template = $('#emailTemplate').val() || 'modernSummary';
      const previewContent = $('#previewContent');
      
      if (!isHtmlPreview) {
        // Show the raw HTML
        const emailHtml = generateEmailPreviewHtml();
        previewContent.empty().append($('<pre></pre>').text(emailHtml));
        return;
      }
      
      // Get the iframe
      const iframe = previewContent.find('iframe')[0];
      if (!iframe) return;
      
      // Write the content to the iframe
      const emailHtml = generateEmailPreviewHtml();
      
      const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(emailHtml);
      iframeDocument.close();
    }
    
    function generateEmailPreviewHtml() {
      // Get data for the email
      const template = $('#emailTemplate').val() || 'modernSummary';
      const recipientName = currentMemberName || 'Team Member';
      
      // Format session date
      let sessionDate = 'the session';
      if ($('#sessionDate').val()) {
        const date = new Date($('#sessionDate').val());
        sessionDate = date.toLocaleDateString(undefined, { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
      }
      
      // If custom template is selected, just return the content
      if (template === 'custom') {
        const customContent = $('#emailContent').val() || '';
        return `<div style="font-family: Arial, sans-serif; padding: 20px; white-space: pre-wrap;">${customContent}</div>`;
      }
      
      // Collect data for the email
      const sessionData = {
        teamMember: $('#teamMemberSelect').val() || 'example@example.com',
        date: new Date($('#sessionDate').val() || new Date()),
        statusNotes: $('#statusNotes').val() || '',
        performanceNotes: $('#performanceNotes').val() || '',
        developmentNotes: $('#developmentNotes').val() || '',
        supportNotes: $('#supportNotes').val() || '',
        actionItems: getActionItemsData(),
        followUpDate: $('#followUpDate').val() ? new Date($('#followUpDate').val()) : null
      };
      
      // Generate email based on template
      return generateEmailFromTemplate(template, sessionData);
    }
    
    function getActionItemsData() {
      const actionItems = [];
      $('#actionItemsList .action-item-enhanced').each(function() {
        const description = $(this).find('.action-item-description').val().trim();
        
        if (description) {
          const dueDate = $(this).find('input[type="date"]').val();
          const priority = $(this).find('select').val();
          
          actionItems.push({
            description: description,
            dueDate: dueDate ? new Date(dueDate) : null,
            priority: priority
          });
        }
      });
      
      return actionItems;
    }
    
    function generateEmailFromTemplate(template, sessionData) {
      // Using the modern email service, this HTML is a simplified preview
      // The server-side will generate the full HTML with proper styling
      
      let emailHtml = '';
      const username = currentUser || 'Team Lead';
      const userRole = currentUserRole || 'Manager';
      
      // Get follow-up date formatted
      let followUpFormatted = '';
      if (sessionData.followUpDate) {
        followUpFormatted = sessionData.followUpDate.toLocaleDateString(undefined, {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
      }
      
      // Get session date formatted
      const sessionDateFormatted = sessionData.date.toLocaleDateString(undefined, {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      
      switch (template) {
        case 'modernSummary':
          emailHtml = `
            <div style="font-family: 'Segoe UI', Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f8f9fc; padding: 20px;">
              <div style="background: linear-gradient(135deg, #4e73df 0%, #2e59d9 100%); padding: 30px; color: white; border-radius: 10px;">
                <h1 style="margin: 0 0 5px 0; font-size: 24px;">One-on-One Session Summary</h1>
                <div style="font-size: 15px;">Meeting Notes & Action Items</div>
                <div style="margin-top: 10px; font-size: 12px; background: rgba(0,0,0,0.1); display: inline-block; padding: 5px 12px; border-radius: 30px;">${sessionDateFormatted}</div>
              </div>
              
              <div style="background: white; padding: 30px; border-radius: 10px; margin-top: 20px;">
                <div style="font-size: 18px; font-weight: 500; margin-bottom: 20px; color: #3a3b45;">Hello ${currentMemberName},</div>
                
                <div style="margin-bottom: 30px; color: #6e707e;">
                  Thank you for our one-on-one meeting. I've summarized our discussion below for your reference.
                </div>
          `;
          
          // Add status notes section if available
          if (sessionData.statusNotes) {
            emailHtml += `
              <div style="background-color: #f8f9fc; border-radius: 10px; padding: 25px; margin-bottom: 25px; border-left: 4px solid #36b9cc;">
                <div style="display: flex; align-items: center; margin-bottom: 15px;">
                  <div style="width: 32px; height: 32px; background-color: #36b9cc; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; margin-right: 12px;">
                    <span style="font-size: 16px;">&#128202;</span>
                  </div>
                  <h3 style="font-size: 16px; font-weight: 600; color: #5a5c69; margin: 0;">Status Update</h3>
                </div>
                <div style="color: #6e707e; font-size: 14px; line-height: 1.8;">
                  ${sessionData.statusNotes.replace(/\n/g, '<br>')}
                </div>
              </div>
            `;
          }
          
          // Add performance notes section if available
          if (sessionData.performanceNotes) {
            emailHtml += `
              <div style="background-color: #f8f9fc; border-radius: 10px; padding: 25px; margin-bottom: 25px; border-left: 4px solid #4e73df;">
                <div style="display: flex; align-items: center; margin-bottom: 15px;">
                  <div style="width: 32px; height: 32px; background-color: #4e73df; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; margin-right: 12px;">
                    <span style="font-size: 16px;">&#11088;</span>
                  </div>
                  <h3 style="font-size: 16px; font-weight: 600; color: #5a5c69; margin: 0;">Performance Discussion</h3>
                </div>
                <div style="color: #6e707e; font-size: 14px; line-height: 1.8;">
                  ${sessionData.performanceNotes.replace(/\n/g, '<br>')}
                </div>
              </div>
            `;
          }
          
          // Add development notes section if available
          if (sessionData.developmentNotes) {
            emailHtml += `
              <div style="background-color: #f8f9fc; border-radius: 10px; padding: 25px; margin-bottom: 25px; border-left: 4px solid #f6c23e;">
                <div style="display: flex; align-items: center; margin-bottom: 15px;">
                  <div style="width: 32px; height: 32px; background-color: #f6c23e; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; margin-right: 12px;">
                    <span style="font-size: 16px;">&#127891;</span>
                  </div>
                  <h3 style="font-size: 16px; font-weight: 600; color: #5a5c69; margin: 0;">Development Areas</h3>
                </div>
                <div style="color: #6e707e; font-size: 14px; line-height: 1.8;">
                  ${sessionData.developmentNotes.replace(/\n/g, '<br>')}
                </div>
              </div>
            `;
          }
          
          // Add support notes section if available
          if (sessionData.supportNotes) {
            emailHtml += `
              <div style="background-color: #f8f9fc; border-radius: 10px; padding: 25px; margin-bottom: 25px; border-left: 4px solid #1cc88a;">
                <div style="display: flex; align-items: center; margin-bottom: 15px;">
                  <div style="width: 32px; height: 32px; background-color: #1cc88a; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; margin-right: 12px;">
                    <span style="font-size: 16px;">&#129309;</span>
                  </div>
                  <h3 style="font-size: 16px; font-weight: 600; color: #5a5c69; margin: 0;">Support Needed</h3>
                </div>
                <div style="color: #6e707e; font-size: 14px; line-height: 1.8;">
                  ${sessionData.supportNotes.replace(/\n/g, '<br>')}
                </div>
              </div>
            `;
          }
          
          // Add action items if available
          if (sessionData.actionItems && sessionData.actionItems.length > 0) {
            let actionItemsHtml = '';
            
            sessionData.actionItems.forEach(function(item, index) {
              const dueDateFormatted = item.dueDate ? item.dueDate.toLocaleDateString(undefined, {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              }) : '';
              
              let priorityBadge = '';
              let priorityColor = '';
              
              switch(item.priority) {
                case 'high':
                  priorityColor = '#e74a3b';
                  priorityBadge = 'High Priority';
                  break;
                case 'medium':
                  priorityColor = '#f6c23e';
                  priorityBadge = 'Medium Priority';
                  break;
                case 'low':
                  priorityColor = '#1cc88a';
                  priorityBadge = 'Low Priority';
                  break;
                default:
                  priorityColor = '#4e73df';
                  priorityBadge = '';
              }
              
              actionItemsHtml += `
                <div style="background-color: white; padding: 15px; margin-bottom: 10px; border-radius: 8px; display: flex; align-items: flex-start; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);">
                  <div style="background-color: #4e73df; color: white; width: 26px; height: 26px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 12px; font-weight: 600; margin-right: 12px;">${index + 1}</div>
                  <div style="flex: 1; font-size: 14px;">
                    ${item.description}
                    <div style="display: flex; align-items: center; margin-top: 8px; flex-wrap: wrap;">
                      ${dueDateFormatted ? `
                        <span style="display: inline-flex; align-items: center; background-color: #f8f9fc; color: #6e707e; font-size: 12px; padding: 3px 8px; border-radius: 4px; margin-right: 10px; margin-top: 5px;">
                          <span style="margin-right: 5px; color: #4e73df;">&#128197;</span>
                          ${dueDateFormatted}
                        </span>
                      ` : ''}
                      
                      ${priorityBadge ? `
                        <span style="display: inline-flex; align-items: center; font-size: 12px; padding: 3px 8px; border-radius: 4px; margin-top: 5px; background-color: ${item.priority === 'high' ? '#feeced' : item.priority === 'medium' ? '#fff5e6' : '#e6f7f0'}; color: ${priorityColor};">
                          <span style="margin-right: 5px;">&#9873;</span>
                          ${priorityBadge}
                        </span>
                      ` : ''}
                    </div>
                  </div>
                </div>
              `;
            });
            
            emailHtml += `
              <div style="margin-bottom: 25px;">
                <div style="background-color: #4e73df; color: white; padding: 15px 20px; border-radius: 10px 10px 0 0; font-weight: 600; display: flex; align-items: center;">
                  <span style="margin-right: 10px;">&#128203;</span> Action Items
                </div>
                <div style="background-color: #f8f9fc; border-radius: 0 0 10px 10px; padding: 15px 20px; box-shadow: 0 3px 8px rgba(0, 0, 0, 0.03);">
                  ${actionItemsHtml}
                </div>
              </div>
            `;
          }
          
          // Add follow-up info if available
          if (followUpFormatted) {
            emailHtml += `
              <div style="display: flex; align-items: center; background-color: #e8f2ff; border-radius: 10px; padding: 20px; margin: 25px 0;">
                <div style="background-color: #4285f4; color: white; width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 15px;">
                  <span style="font-size: 18px;">&#128197;</span>
                </div>
                <div>
                  <div style="font-weight: 600; font-size: 15px; margin-bottom: 3px;">Next One-on-One Session</div>
                  <div style="font-size: 14px; color: #6e707e;">Scheduled for ${followUpFormatted}</div>
                </div>
              </div>
            `;
          }
          
          // Add signature
          emailHtml += `
              <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eaecf4;">
                <div style="font-weight: 600; font-size: 15px; color: #5a5c69;">Best regards,</div>
                <div style="font-weight: 600; font-size: 15px; color: #5a5c69;">${username}</div>
                <div style="color: #858796; font-size: 13px; margin-top: 3px;">${userRole}</div>
              </div>
            </div>
            
            <div style="background-color: #f8f9fc; padding: 20px; text-align: center; font-size: 12px; color: #858796; border-top: 1px solid #eaecf4;">
              This email was sent from the Team Dashboard
            </div>
          </div>
          `;
          break;
          
        case 'detailedReport':
          // Similar structure but with more details
          emailHtml = `
            <div style="font-family: 'Segoe UI', Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f8f9fc; padding: 20px;">
              <div style="background: linear-gradient(135deg, #4e73df 0%, #2e59d9 100%); padding: 30px; color: white; border-radius: 10px;">
                <h1 style="margin: 0 0 5px 0; font-size: 24px;">Comprehensive One-on-One Report</h1>
                <div style="font-size: 15px;">Detailed Discussion Summary</div>
                <div style="margin-top: 10px; font-size: 12px; background: rgba(0,0,0,0.1); display: inline-block; padding: 5px 12px; border-radius: 30px;">${sessionDateFormatted}</div>
              </div>
              
              <div style="background: white; padding: 30px; border-radius: 10px; margin-top: 20px;">
                <div style="font-size: 18px; font-weight: 500; margin-bottom: 20px; color: #3a3b45;">Hello ${currentMemberName},</div>
                
                <div style="margin-bottom: 30px; color: #6e707e;">
                  Thank you for our in-depth one-on-one discussion. I've prepared a comprehensive summary of everything we covered to ensure we both have a clear record of our conversation.
                </div>
                
                <!-- Same content sections as modernSummary but with additional intro text for each section -->
          `;
          
          // Add the rest of the detailed content sections...
          // (Similar to modernSummary but with more detailed introductions to each section)
          
          if (sessionData.statusNotes) {
            emailHtml += `
              <div style="background-color: #f8f9fc; border-radius: 10px; padding: 25px; margin-bottom: 25px; border-left: 4px solid #36b9cc;">
                <div style="display: flex; align-items: center; margin-bottom: 15px;">
                  <div style="width: 32px; height: 32px; background-color: #36b9cc; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; margin-right: 12px;">
                    <span style="font-size: 16px;">&#128202;</span>
                  </div>
                  <h3 style="font-size: 16px; font-weight: 600; color: #5a5c69; margin: 0;">Detailed Status Update</h3>
                </div>
                <div style="color: #6e707e; font-size: 14px; line-height: 1.8;">
                  <p><strong>Current Status Overview:</strong></p>
                  ${sessionData.statusNotes.replace(/\n/g, '<br>')}
                </div>
              </div>
            `;
          }
          
          // Add final paragraphs and signature
          emailHtml += `
                <p style="color: #6e707e; margin-top: 30px;">I appreciate your openness during our conversation. These regular check-ins are valuable for ensuring we're aligned and addressing any concerns proactively.</p>
                
                <p style="color: #6e707e;">If you have any additional thoughts or questions about anything we discussed, please don't hesitate to reach out.</p>
                
                <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eaecf4;">
                  <div style="font-weight: 600; font-size: 15px; color: #5a5c69;">Best regards,</div>
                  <div style="font-weight: 600; font-size: 15px; color: #5a5c69;">${username}</div>
                  <div style="color: #858796; font-size: 13px; margin-top: 3px;">${userRole}</div>
                </div>
              </div>
              
              <div style="background-color: #f8f9fc; padding: 20px; text-align: center; font-size: 12px; color: #858796; border-top: 1px solid #eaecf4;">
                This email was sent from the Team Dashboard
              </div>
            </div>
          `;
          break;
          
        case 'actionFocused':
          // Focus primarily on action items
          emailHtml = `
            <div style="font-family: 'Segoe UI', Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f8f9fc; padding: 20px;">
              <div style="background: linear-gradient(135deg, #4e73df 0%, #2e59d9 100%); padding: 30px; color: white; border-radius: 10px;">
                <h1 style="margin: 0 0 5px 0; font-size: 24px;">Action Items Summary</h1>
                <div style="font-size: 15px;">Key Tasks & Next Steps</div>
                <div style="margin-top: 10px; font-size: 12px; background: rgba(0,0,0,0.1); display: inline-block; padding: 5px 12px; border-radius: 30px;">${sessionDateFormatted}</div>
              </div>
              
              <div style="background: white; padding: 30px; border-radius: 10px; margin-top: 20px;">
                <div style="font-size: 18px; font-weight: 500; margin-bottom: 20px; color: #3a3b45;">Hello ${currentMemberName},</div>
                
                <div style="margin-bottom: 30px; color: #6e707e;">
                  Thank you for our one-on-one meeting. Below are the key action items and next steps we identified during our discussion.
                </div>
          `;
          
          // Action items get priority placement and enhanced styling
          if (sessionData.actionItems && sessionData.actionItems.length > 0) {
            let actionItemsHtml = '';
            
            sessionData.actionItems.forEach(function(item, index) {
              const dueDateFormatted = item.dueDate ? item.dueDate.toLocaleDateString(undefined, {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              }) : '';
              
              let priorityBadge = '';
              let priorityColor = '';
              let priorityBgColor = '';
              let priorityIcon = '';
              
              switch(item.priority) {
                case 'high':
                  priorityColor = '#e74a3b';
                  priorityBgColor = '#feeced';
                  priorityBadge = 'High Priority';
                  priorityIcon = '&#9650;'; // Up arrow
                  break;
                case 'medium':
                  priorityColor = '#f6c23e';
                  priorityBgColor = '#fff5e6';
                  priorityBadge = 'Medium Priority';
                  priorityIcon = '&#8212;'; // Horizontal line
                  break;
                case 'low':
                  priorityColor = '#1cc88a';
                  priorityBgColor = '#e6f7f0';
                  priorityBadge = 'Low Priority';
                  priorityIcon = '&#9660;'; // Down arrow
                  break;
                default:
                  priorityColor = '#4e73df';
                  priorityBgColor = '#e8f2ff';
                  priorityBadge = 'Priority Not Set';
                  priorityIcon = '&#8212;'; // Horizontal line
              }
              
              actionItemsHtml += `
                <div style="background-color: white; padding: 20px; margin-bottom: 15px; border-radius: 8px; box-shadow: 0 3px 8px rgba(0, 0, 0, 0.05); border-left: 3px solid ${priorityColor};">
                  <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                    <div style="font-weight: 600; font-size: 16px; color: #3a3b45;">
                      <span style="color: ${priorityColor}; margin-right: 5px;">${index + 1}.</span> 
                      ${item.description}
                    </div>
                    <div style="background-color: ${priorityBgColor}; color: ${priorityColor}; font-size: 12px; font-weight: 600; padding: 5px 10px; border-radius: 20px;">
                      <span style="margin-right: 5px;">${priorityIcon}</span> ${priorityBadge}
                    </div>
                  </div>
                  
                  ${dueDateFormatted ? `
                    <div style="display: flex; align-items: center; margin-top: 10px;">
                      <div style="background-color: #f8f9fc; padding: 8px 15px; border-radius: 6px; display: flex; align-items: center;">
                        <span style="color: #4e73df; margin-right: 8px;">&#128197;</span>
                        <div>
                          <div style="font-size: 12px; color: #6e707e;">Due Date</div>
                          <div style="font-weight: 600; color: #4e73df;">${dueDateFormatted}</div>
                        </div>
                      </div>
                    </div>
                  ` : ''}
                </div>
              `;
            });
            
            emailHtml += `
              <div style="margin-bottom: 25px;">
                <div style="background: linear-gradient(90deg, #4e73df 0%, #6f8be8 100%); color: white; padding: 15px 20px; border-radius: 10px; font-weight: 600; display: flex; align-items: center; margin-bottom: 20px;">
                  <span style="margin-right: 10px; font-size: 20px;">&#128203;</span> Action Items Requiring Attention
                </div>
                ${actionItemsHtml}
              </div>
            `;
          } else {
            emailHtml += `
              <div style="background-color: #f8f9fc; border-radius: 10px; padding: 20px; margin-bottom: 25px; text-align: center;">
                <div style="color: #858796; font-size: 16px;">
                  <span style="font-size: 24px; display: block; margin-bottom: 10px;">&#128203;</span>
                  No action items were identified during this session.
                </div>
              </div>
            `;
          }
          
          // Add a brief summary of key discussion points
          emailHtml += `
            <div style="background-color: #f8f9fc; border-radius: 10px; padding: 25px; margin-bottom: 25px; border-left: 4px solid #4e73df;">
              <div style="display: flex; align-items: center; margin-bottom: 15px;">
                <div style="width: 32px; height: 32px; background-color: #4e73df; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; margin-right: 12px;">
                  <span style="font-size: 16px;">&#128172;</span>
                </div>
                <h3 style="font-size: 16px; font-weight: 600; color: #5a5c69; margin: 0;">Key Discussion Points</h3>
              </div>
              <div style="color: #6e707e; font-size: 14px; line-height: 1.8;">
          `;
          
          // Add summaries of the discussion areas that have content
          let hasSummaryContent = false;
          
          if (sessionData.statusNotes) {
            emailHtml += `<p><strong>Status:</strong> ${sessionData.statusNotes.split('\n')[0]}</p>`;
            hasSummaryContent = true;
          }
          
          if (sessionData.performanceNotes) {
            emailHtml += `<p><strong>Performance:</strong> ${sessionData.performanceNotes.split('\n')[0]}</p>`;
            hasSummaryContent = true;
          }
          
          if (sessionData.developmentNotes) {
            emailHtml += `<p><strong>Development:</strong> ${sessionData.developmentNotes.split('\n')[0]}</p>`;
            hasSummaryContent = true;
          }
          
          if (sessionData.supportNotes) {
            emailHtml += `<p><strong>Support:</strong> ${sessionData.supportNotes.split('\n')[0]}</p>`;
            hasSummaryContent = true;
          }
          
          if (!hasSummaryContent) {
            emailHtml += `<p>Focus was primarily on action items during this session.</p>`;
          }
          
          emailHtml += `
              </div>
            </div>
          `;
          
          // Add follow-up info if available
          if (followUpFormatted) {
            emailHtml += `
              <div style="display: flex; align-items: center; background-color: #e8f2ff; border-radius: 10px; padding: 20px; margin: 25px 0;">
                <div style="background-color: #4285f4; color: white; width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 15px;">
                  <span style="font-size: 18px;">&#128197;</span>
                </div>
                <div>
                  <div style="font-weight: 600; font-size: 15px; margin-bottom: 3px;">Next One-on-One Session</div>
                  <div style="font-size: 14px; color: #6e707e;">Scheduled for ${followUpFormatted}</div>
                </div>
              </div>
            `;
          }
          
          // Add signature
          emailHtml += `
              <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eaecf4;">
                <div style="font-weight: 600; font-size: 15px; color: #5a5c69;">Best regards,</div>
                <div style="font-weight: 600; font-size: 15px; color: #5a5c69;">${username}</div>
                <div style="color: #858796; font-size: 13px; margin-top: 3px;">${userRole}</div>
              </div>
            </div>
            
            <div style="background-color: #f8f9fc; padding: 20px; text-align: center; font-size: 12px; color: #858796; border-top: 1px solid #eaecf4;">
              This email was sent from the Team Dashboard
            </div>
          </div>
          `;
          break;
          
        default:
          // Simple text based email if no template is selected
          emailHtml = `
            <div style="font-family: Arial, sans-serif; padding: 20px;">
              <h2>One-on-One Summary</h2>
              <p>Hello ${currentMemberName},</p>
              <p>Thank you for our one-on-one meeting on ${sessionDateFormatted}.</p>
              
              ${sessionData.statusNotes ? `<h3>Status Updates</h3><p>${sessionData.statusNotes.replace(/\n/g, '<br>')}</p>` : ''}
              ${sessionData.performanceNotes ? `<h3>Performance Discussion</h3><p>${sessionData.performanceNotes.replace(/\n/g, '<br>')}</p>` : ''}
              ${sessionData.developmentNotes ? `<h3>Development Areas</h3><p>${sessionData.developmentNotes.replace(/\n/g, '<br>')}</p>` : ''}
              ${sessionData.supportNotes ? `<h3>Support Needed</h3><p>${sessionData.supportNotes.replace(/\n/g, '<br>')}</p>` : ''}
              
              ${followUpFormatted ? `<p>Our next one-on-one is scheduled for ${followUpFormatted}.</p>` : ''}
              
              <p>Best regards,<br>${username}<br>${userRole}</p>
            </div>
          `;
      }
      
      return emailHtml;
    }
    
    function saveSession() {
      if (!validateForm()) {
        return;
      }
      
      showLoading('Saving session...');
      
      try {
        // Get action items with all details
        const actionItems = getActionItemsData();
        
        // Get team member data
        const isNewMember = $('#newMemberSwitch').is(':checked');
        let teamMember;
        
        if (isNewMember) {
          teamMember = {
            isNew: true,
            email: $('#newEmail').val(),
            firstName: $('#newFirstName').val(),
            lastName: $('#newLastName').val(),
            role: $('#newRole').val()
          };
        } else {
          teamMember = {
            isNew: false,
            email: $('#teamMemberSelect').val()
          };
        }
        
        // Get scheduling information
        const shouldScheduleEmail = $('#sendEmailSwitch').is(':checked') && $('#scheduleEmailSwitch').is(':checked');
        let scheduledTime = null;
        
        if (shouldScheduleEmail) {
          const scheduledDate = $('#scheduledDate').val();
          const scheduledTimeVal = $('#scheduledTime').val();
          
          if (scheduledDate && scheduledTimeVal) {
            scheduledTime = new Date(`${scheduledDate}T${scheduledTimeVal}`);
          }
        }
        
        // Build session data object
        const sessionData = {
          id: $('#sessionId').val(),
          teamMember: teamMember,
          date: $('#sessionDate').val(),
          location: $('#sessionLocation').val(),
          status: $('#sessionStatus').val(),
          followUpDate: $('#followUpDate').val(),
          prepNotes: $('#prepNotes').val(),
          statusNotes: $('#statusNotes').val(),
          performanceNotes: $('#performanceNotes').val(),
          developmentNotes: $('#developmentNotes').val(),
          supportNotes: $('#supportNotes').val(),
          actionItems: actionItems,
          sendFollowUpEmail: $('#sendEmailSwitch').is(':checked'),
          emailTemplate: $('#emailTemplate').val(),
          emailSubject: $('#emailSubject').val(),
          emailContent: $('#emailContent').val(),
          scheduleEmail: shouldScheduleEmail,
          scheduledTime: scheduledTime ? scheduledTime.toISOString() : null
        };
        
        google.script.run
          .withSuccessHandler(function(result) {
            hideLoading();
            
            if (result.success) {
              showToast('Session saved successfully!', 'success');
              
              // Go back to list after brief delay
              setTimeout(function() {
                goBack();
              }, 1500);
            } else {
              showToast('Error: ' + (result.message || 'Unknown error'), 'error');
            }
          })
          .withFailureHandler(function(error) {
            hideLoading();
            showToast('Error saving session: ' + (error || 'Unknown error'), 'error');
            console.error('Error saving session:', error);
          })
          .createOneOnOneSessionRecord(sessionData);
      } catch (err) {
        hideLoading();
        showToast('Error preparing session data: ' + err.message, 'error');
        console.error('Error preparing session data:', err);
      }
    }
    
    function saveAsDraft() {
      $('#sessionStatus').val('Scheduled');
      saveSession();
    }
    
    function validateForm() {
      // Clear previous errors
      hideAllAlerts();
      
      // Validate team member
      const isNewMember = $('#newMemberSwitch').is(':checked');
      
      if (isNewMember) {
        // Validate new member fields
        if (!$('#newEmail').val().trim()) {
          showAlert('Please enter email for the new team member', 'error');
          goToTab('member-tab');
          $('#newEmail').focus();
          return false;
        }
        
        if (!$('#newFirstName').val().trim()) {
          showAlert('Please enter first name for the new team member', 'error');
          goToTab('member-tab');
          $('#newFirstName').focus();
          return false;
        }
        
        if (!$('#newLastName').val().trim()) {
          showAlert('Please enter last name for the new team member', 'error');
          goToTab('member-tab');
          $('#newLastName').focus();
          return false;
        }
      } else {
        // Validate team member selection
        if (!$('#teamMemberSelect').val()) {
          showAlert('Please select a team member', 'error');
          goToTab('member-tab');
          $('#teamMemberSelect').focus();
          return false;
        }
      }
      
      // Validate session date
      if (!$('#sessionDate').val()) {
        showAlert('Please select a date and time for the session', 'error');
        goToTab('details-tab');
        $('#sessionDate').focus();
        return false;
      }
      
      // Validate follow-up email if enabled and scheduled
      if ($('#sendEmailSwitch').is(':checked') && $('#scheduleEmailSwitch').is(':checked')) {
        if (!$('#scheduledDate').val()) {
          showAlert('Please select a date for the scheduled email', 'error');
          goToTab('followup-tab');
          $('#scheduledDate').focus();
          return false;
        }
        
        if (!$('#scheduledTime').val()) {
          showAlert('Please select a time for the scheduled email', 'error');
          goToTab('followup-tab');
          $('#scheduledTime').focus();
          return false;
        }
        
        // Validate that scheduled time is in the future
        const scheduledDateTime = new Date(`${$('#scheduledDate').val()}T${$('#scheduledTime').val()}`);
        if (scheduledDateTime <= new Date()) {
          showAlert('Scheduled email time must be in the future', 'error');
          goToTab('followup-tab');
          $('#scheduledTime').focus();
          return false;
        }
      }
      
      return true;
    }
    
    function showLoading(message = 'Loading...') {
      $('.loading-text').text(message);
      $('#loading-overlay').fadeIn(300);
    }
    
    function hideLoading() {
      $('#loading-overlay').fadeOut(300);
    }
    
    function showAlert(message, type) {
      if (type === 'error') {
        $('#error-message').text(message);
        $('#error-alert').fadeIn();
      } else {
        $('#success-message').text(message);
        $('#success-alert').fadeIn();
      }
      
      // Scroll to top to show the alert
      window.scrollTo(0, 0);
      
      // Auto-hide success messages after a delay
      if (type === 'success') {
        setTimeout(() => {
          $('#success-alert').fadeOut();
        }, 3000);
      }
    }
    
    function hideAllAlerts() {
      $('#error-alert, #success-alert').hide();
    }
    
    function showToast(message, type = 'info') {
      const iconClass = getToastIcon(type);
      
      const toast = $(`
        <div class="toast">
          <div class="toast-header ${type}">
            <div class="toast-status-icon ${type}">
              <i class="fas ${iconClass}"></i>
            </div>
            <div class="toast-title">${capitalizeFirstLetter(type)}</div>
            <small>Just now</small>
            <div class="toast-close" data-dismiss="toast">
              <i class="fas fa-times"></i>
            </div>
          </div>
          <div class="toast-body">
            ${message}
          </div>
        </div>
      `);
      
      $('#toast-container').append(toast);
      
      // Initialize Bootstrap toast
      toast.toast({
        delay: 5000,
        autohide: true
      });
      
      toast.toast('show');
      
      // Remove toast from DOM after it's hidden
      toast.on('hidden.bs.toast', function() {
        $(this).remove();
      });
      
      // Handle manual close
      toast.find('.toast-close').on('click', function() {
        toast.toast('hide');
      });
    }
    
    function getToastIcon(type) {
      switch (type) {
        case 'success': return 'fa-check-circle';
        case 'error': return 'fa-exclamation-circle';
        case 'warning': return 'fa-exclamation-triangle';
        default: return 'fa-info-circle';
      }
    }

    
    
    function capitalizeFirstLetter(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    function goBack() {
      google.script.run.viewOneOnOneSessions();
    }
  </script>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>One-on-One Notes</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css for animations -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --shadow-lg: 0 1rem 3rem rgba(0,0,0,.175);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .container-fluid {
      padding: 30px !important;
    }
    
    /* Cards */
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.75rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
      overflow: hidden;
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 1.5rem;
    }

    /* Page header section */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .page-title i {
      color: var(--primary);
      margin-right: 12px;
    }
    
    /* System info bar */
    .system-info {
      background-color: var(--gray-800);
      color: white;
      padding: 8px 15px;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }
    
    .system-info p {
      margin: 0;
    }
    
    /* Button styles */
    .btn {
      border-radius: 10px;
      padding: 8px 16px;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
    }
    
    .btn i {
      margin-right: 8px;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background: var(--primary);
      color: #fff;
      transform: translateY(-2px);
    }
    
    .btn-light {
      background: var(--gray-100);
      color: var(--gray-700);
      border-color: var(--gray-100);
    }
    
    .btn-light:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    .btn-sm {
      padding: 5px 12px;
      font-size: 0.875rem;
    }
    
    /* Filters */
    .filters-section {
      margin-bottom: 25px;
      background: #fff;
      border-radius: 0.75rem;
      padding: 20px 25px;
      box-shadow: var(--shadow-sm);
    }
    
    .filters-title {
      font-weight: 600;
      color: var(--gray-700);
      margin-bottom: 15px;
    }
    
    .filter-form {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      align-items: flex-end;
    }
    
    .filter-group {
      flex: 1;
      min-width: 200px;
    }
    
    .filter-label {
      font-weight: 600;
      color: var(--gray-700);
      margin-bottom: 8px;
      display: block;
      font-size: 0.9rem;
    }
    
    .form-control {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }

    /* Stats cards */
    .stats-cards {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 25px;
    }
    
    .stat-card {
      flex: 1;
      background: #fff;
      border-radius: 0.75rem;
      padding: 20px;
      box-shadow: var(--shadow-sm);
      display: flex;
      align-items: center;
      min-width: 200px;
      position: relative;
      overflow: hidden;
      transition: var(--transition);
    }
    
    .stat-card:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow);
    }
    
    .stat-card .stat-icon {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 15px;
      font-size: 1.5rem;
      flex-shrink: 0;
    }
    
    .stat-primary .stat-icon {
      background: rgba(78, 115, 223, 0.1);
      color: var(--primary);
    }
    
    .stat-success .stat-icon {
      background: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .stat-warning .stat-icon {
      background: rgba(246, 194, 62, 0.1);
      color: var(--warning);
    }
    
    .stat-info .stat-icon {
      background: rgba(54, 185, 204, 0.1);
      color: var(--info);
    }
    
    .stat-content {
      flex: 1;
    }
    
    .stat-value {
      font-size: 1.75rem;
      font-weight: 700;
      line-height: 1;
      margin: 0 0 5px;
    }
    
    .stat-label {
      color: var(--gray-600);
      font-size: 0.85rem;
      margin: 0;
    }
    
    .stat-bg-icon {
      position: absolute;
      right: -10px;
      bottom: -10px;
      font-size: 4rem;
      opacity: 0.05;
      transform: rotate(-15deg);
    }
    
    /* Notes Timeline */
    .notes-timeline {
      position: relative;
      padding-left: 40px;
    }
    
    .notes-timeline:before {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      left: 15px;
      width: 2px;
      background: var(--gray-300);
    }
    
    .note-item {
      position: relative;
    }
    
    .note-item:not(:last-child) {
      margin-bottom: 30px;
    }
    
    .note-item:before {
      content: '';
      position: absolute;
      left: -40px;
      top: 20px;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: var(--primary);
      border: 4px solid #fff;
      box-shadow: 0 0 0 2px rgba(78, 115, 223, 0.3);
      z-index: 1;
    }
    
    .note-date {
      position: absolute;
      left: -135px;
      top: 15px;
      width: 80px;
      text-align: right;
      color: var(--gray-600);
      font-size: 0.85rem;
    }
    
    .note-card {
      background: #fff;
      border-radius: 0.75rem;
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      overflow: hidden;
    }
    
    .note-card:hover {
      transform: translateY(-3px);
      box-shadow: var(--shadow);
    }
    
    .note-header {
      background-color: #fff;
      padding: 15px 20px;
      border-bottom: 1px solid var(--gray-200);
    }
    
    .note-title {
      margin: 0;
      font-size: 1.1rem;
      color: var(--gray-800);
    }
    
    .note-meta {
      margin-top: 5px;
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      gap: 10px;
    }
    
    .note-badge {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 50px;
      font-size: 0.75rem;
      background: var(--gray-200);
      color: var(--gray-700);
    }
    
    .note-content {
      padding: 20px;
    }
    
    .note-section {
      margin-bottom: 15px;
    }
    
    .note-section:last-child {
      margin-bottom: 0;
    }
    
    .note-section h6 {
      font-weight: 600;
      margin-bottom: 8px;
      color: var(--gray-800);
    }
    
    .note-text {
      background: var(--gray-100);
      border-radius: 8px;
      padding: 12px 15px;
      color: var(--gray-700);
      font-size: 0.95rem;
      line-height: 1.5;
    }
    
    .note-footer {
      background: var(--gray-100);
      padding: 12px 20px;
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }
    
    /* Action items */
    .action-items-list {
      list-style-type: none;
      padding: 0;
      margin: 0;
    }
    
    .action-item {
      display: flex;
      align-items: flex-start;
      padding: 8px 0;
      border-bottom: 1px solid var(--gray-200);
    }
    
    .action-item:last-child {
      border-bottom: none;
    }
    
    .action-number {
      color: var(--primary);
      font-weight: 600;
      margin-right: 10px;
    }
    
    .action-content {
      flex: 1;
    }
    
    .action-text {
      color: var(--gray-800);
    }
    
    .action-meta {
      display: flex;
      align-items: center;
      margin-top: 5px;
      flex-wrap: wrap;
      gap: 10px;
    }
    
    .action-due-date {
      font-size: 0.8rem;
      color: var(--gray-600);
    }
    
    .action-priority {
      font-size: 0.8rem;
      padding: 2px 8px;
      border-radius: 50px;
    }
    
    .action-priority.high {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    .action-priority.medium {
      background-color: rgba(246, 194, 62, 0.1);
      color: var(--warning);
    }
    
    .action-priority.low {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    /* Status badges */
    .status-badge {
      display: inline-block;
      padding: 5px 12px;
      font-size: 0.8rem;
      font-weight: 600;
      border-radius: 50px;
    }
    
    .status-completed {
      color: #0c864e;
      background-color: #e6f7f0;
    }
    
    .status-scheduled {
      color: #2a6cdb;
      background-color: #edf3ff;
    }
    
    .status-cancelled {
      color: #d13212;
      background-color: #fdf0ed;
    }
    
    .status-in-progress {
      color: #b07906;
      background-color: #fef7e8;
    }
    
    /* Empty state */
    .empty-state {
      padding: 50px 20px;
      text-align: center;
      background: #fff;
      border-radius: 0.75rem;
      box-shadow: var(--shadow-sm);
    }
    
    .empty-icon {
      font-size: 4rem;
      color: var(--gray-400);
      margin-bottom: 20px;
    }
    
    .empty-title {
      font-weight: 600;
      font-size: 1.25rem;
      color: var(--gray-700);
      margin-bottom: 10px;
    }
    
    .empty-text {
      color: var(--gray-600);
      max-width: 500px;
      margin: 0 auto 20px;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--gray-200);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 600;
      color: var(--primary);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: var(--gray-100);
      border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
      background: var(--gray-400);
      border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: var(--primary);
    }
  </style>
</head>
<body>
  <!-- System Info Bar - FIXED TO USE PLACEHOLDERS INSTEAD OF TEMPLATE VARIABLES -->
  <div class="system-info">
    <p>Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): <span id="currentDate">Loading...</span></p>
    <p>Current User: <span id="currentUser">Loading...</span></p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div id="loadingText" class="loading-text">Loading...</div>
  </div>
  
  <!-- Toast Container -->
  <div id="toastContainer" class="toast-container"></div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <h1 class="page-title">
        <i class="fas fa-sticky-note"></i> One-on-One Notes
      </h1>
      <div class="page-actions">
        <button id="refreshBtn" class="btn btn-light mr-2">
          <i class="fas fa-sync-alt"></i> Refresh
        </button>
        <button id="createBtn" class="btn btn-primary">
          <i class="fas fa-plus"></i> New Note
        </button>
      </div>
    </div>
    
    <!-- Stats Cards -->
    <div class="stats-cards animate__animated animate__fadeIn">
      <div class="stat-card stat-primary">
        <div class="stat-icon">
          <i class="fas fa-sticky-note"></i>
        </div>
        <div class="stat-content">
          <div id="totalNotes" class="stat-value">0</div>
          <div class="stat-label">Total Notes</div>
        </div>
        <i class="fas fa-sticky-note stat-bg-icon"></i>
      </div>
      
      <div class="stat-card stat-info">
        <div class="stat-icon">
          <i class="fas fa-calendar-alt"></i>
        </div>
        <div class="stat-content">
          <div id="recentNotes" class="stat-value">0</div>
          <div class="stat-label">Last 30 Days</div>
        </div>
        <i class="fas fa-calendar-alt stat-bg-icon"></i>
      </div>
      
      <div class="stat-card stat-success">
        <div class="stat-icon">
          <i class="fas fa-user-friends"></i>
        </div>
        <div class="stat-content">
          <div id="teamMembersCount" class="stat-value">0</div>
          <div class="stat-label">Team Members</div>
        </div>
        <i class="fas fa-user-friends stat-bg-icon"></i>
      </div>
      
      <div class="stat-card stat-warning">
        <div class="stat-icon">
          <i class="fas fa-tasks"></i>
        </div>
        <div class="stat-content">
          <div id="actionItemsCount" class="stat-value">0</div>
          <div class="stat-label">Action Items</div>
        </div>
        <i class="fas fa-tasks stat-bg-icon"></i>
      </div>
    </div>
    
    <!-- Filters Section -->
    <div class="filters-section animate__animated animate__fadeIn">
      <h5 class="filters-title">
        <i class="fas fa-filter text-primary mr-2"></i> Filters
      </h5>
      <div class="filter-form">
        <div class="filter-group">
          <label class="filter-label" for="teamMemberFilter">Team Member</label>
          <select class="form-control" id="teamMemberFilter">
            <option value="">All Team Members</option>
            <!-- Team members will be loaded dynamically -->
          </select>
        </div>
        <div class="filter-group">
          <label class="filter-label" for="dateFromFilter">From Date</label>
          <input type="date" class="form-control" id="dateFromFilter">
        </div>
        <div class="filter-group">
          <label class="filter-label" for="dateToFilter">To Date</label>
          <input type="date" class="form-control" id="dateToFilter">
        </div>
        <div class="filter-group">
          <label class="filter-label" for="searchFilter">Search</label>
          <input type="text" class="form-control" id="searchFilter" placeholder="Search in notes">
        </div>
        <div style="align-self: flex-end;">
          <button id="applyFiltersBtn" class="btn btn-primary">
            Apply Filters
          </button>
          <button id="clearFiltersBtn" class="btn btn-light ml-2">
            Clear
          </button>
        </div>
      </div>
    </div>
    
    <!-- Notes Section -->
    <div class="card animate__animated animate__fadeIn">
      <div class="card-header">
        <h5 class="card-header-title">
          <i class="fas fa-sticky-note text-primary mr-2"></i>
          <span id="notesTitle">All Notes</span>
        </h5>
        <div>
          <div class="btn-group" role="group">
            <button type="button" class="btn btn-sm btn-outline-secondary active" data-view="timeline">
              <i class="fas fa-stream"></i> Timeline
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary" data-view="cards">
              <i class="fas fa-th-large"></i> Cards
            </button>
          </div>
        </div>
      </div>
      <div class="card-body">
        <div id="notesContainer">
          <!-- Notes will be loaded here dynamically -->
          <div id="loadingIndicator" class="d-flex justify-content-center align-items-center p-5">
            <div class="spinner-border text-primary mr-3" role="status">
              <span class="sr-only">Loading...</span>
            </div>
            <span>Loading notes...</span>
          </div>
        </div>
        
        <!-- Empty State (will show when no notes are found) -->
        <div id="emptyState" class="empty-state" style="display: none;">
          <div class="empty-icon">
            <i class="fas fa-sticky-note"></i>
          </div>
          <h4 class="empty-title">No Notes Found</h4>
          <p class="empty-text">No one-on-one notes match your current filters. Try changing your search criteria or create a new note.</p>
          <button id="createEmptyBtn" class="btn btn-primary">
            <i class="fas fa-plus mr-2"></i>Create New Note
          </button>
        </div>
        
        <!-- Debug Info Panel - Add this for troubleshooting -->
        <div id="debugPanel" class="mt-4 p-3 border rounded" style="display: none; background-color: #f8f9fa;">
          <h6><i class="fas fa-bug"></i> Debug Information</h6>
          <div id="debugInfo" class="mt-2">No debug information available</div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Scripts -->
  <script>
    // Global variables
    let currentView = 'timeline';
    
    // Load user information correctly - This will replace the hardcoded values
    function loadUserInfo() {
      google.script.run
        .withSuccessHandler(function(info) {
          // Update the header with user info from the server
          document.getElementById('currentDate').textContent = info.formattedDate;
          document.getElementById('currentUser').textContent = info.username;
          
          console.log("User info loaded:", info.username);
        })
        .withFailureHandler(function(error) {
          console.error("Error loading user info:", error);
          document.getElementById('currentDate').textContent = new Date().toISOString().replace('T', ' ').split('.')[0];
          document.getElementById('currentUser').textContent = "current_user";
        })
        .getCurrentUserAndDate();
    }
    
    // Load notes with error handling and debugging
    function loadNotes() {
      // Show loading indicator
      document.getElementById('notesContainer').innerHTML = 
        '<div class="d-flex justify-content-center align-items-center p-5">' +
        '<div class="spinner-border text-primary mr-3" role="status">' +
        '<span class="sr-only">Loading...</span></div>' +
        '<span>Loading notes...</span></div>';
      
      // Show debug information
      console.log("Attempting to load notes from OneOnOneService.getOneOnOneSessions()...");
      updateDebugInfo("Attempting to load notes from server...");
      
      // Call the server function with proper error handling
      google.script.run
        .withSuccessHandler(function(sessions) {
          console.log("Notes loaded successfully:", sessions);
          updateDebugInfo("Notes loaded successfully: " + sessions.length + " found");
          displayNotes(sessions);
        })
        .withFailureHandler(function(error) {
          console.error("Error loading notes:", error);
          updateDebugInfo("ERROR: " + error);
          
          document.getElementById('notesContainer').innerHTML = 
            '<div class="alert alert-danger">' +
            '<strong>Error:</strong> ' + error +
            '<br><br>Please try refreshing or contact your administrator.' +
            '</div>';
            
          // Show empty state
          document.getElementById('emptyState').style.display = 'block';
        })
        .getOneOnOneSessions();
    }

    // Display notes in the UI
    function displayNotes(sessions) {
      if (!sessions || sessions.length === 0) {
        document.getElementById('notesContainer').innerHTML = '';
        document.getElementById('emptyState').style.display = 'block';
        updateStats([], true);
        return;
      }
      
      document.getElementById('emptyState').style.display = 'none';
      
      // Sort sessions by date (newest first)
      sessions.sort(function(a, b) {
        return new Date(b.date || b.createdDate || 0) - new Date(a.date || a.createdDate || 0);
      });
      
      let html = '';
      
      if (currentView === 'timeline') {
        html = '<div class="notes-timeline">';
        
        sessions.forEach(function(session, index) {
          const date = new Date(session.date || session.createdDate || new Date());
          const formattedDate = date.toLocaleDateString();
          
          html += `
            <div class="note-item animate__animated animate__fadeIn" style="animation-delay: ${index * 0.1}s">
              <div class="note-date">${formattedDate}</div>
              <div class="note-card">
                <div class="note-header">
                  <h5 class="note-title">${session.teamMemberName || 'Team Member'}</h5>
                  <div class="note-meta">
                    <span class="status-badge ${getStatusClass(session.status)}">
                      ${session.status || 'N/A'}
                    </span>
                    <span class="note-badge">
                      <i class="far fa-clock"></i> ${formatTime(date)}
                    </span>
                  </div>
                </div>
                <div class="note-content">
                  ${renderNoteContent(session)}
                </div>
                <div class="note-footer">
                  <button class="btn btn-sm btn-light view-note" data-id="${session.id}">
                    <i class="fas fa-eye"></i> View
                  </button>
                  <button class="btn btn-sm btn-primary edit-note" data-id="${session.id}">
                    <i class="fas fa-edit"></i> Edit
                  </button>
                </div>
              </div>
            </div>
          `;
        });
        
        html += '</div>';
      } else {
        // Cards view
        html = '<div class="row">';
        
        sessions.forEach(function(session, index) {
          const date = new Date(session.date || session.createdDate || new Date());
          const formattedDate = date.toLocaleDateString();
          
          html += `
            <div class="col-lg-6 mb-4 animate__animated animate__fadeIn" style="animation-delay: ${index * 0.1}s">
              <div class="note-card h-100">
                <div class="note-header">
                  <h5 class="note-title">${session.teamMemberName || 'Team Member'}</h5>
                  <div class="note-meta">
                    <span class="status-badge ${getStatusClass(session.status)}">
                      ${session.status || 'N/A'}
                    </span>
                    <span class="note-badge">
                      <i class="far fa-calendar"></i> ${formattedDate}
                    </span>
                    <span class="note-badge">
                      <i class="far fa-clock"></i> ${formatTime(date)}
                    </span>
                  </div>
                </div>
                <div class="note-content">
                  ${renderNoteContent(session)}
                </div>
                <div class="note-footer">
                  <button class="btn btn-sm btn-light view-note" data-id="${session.id}">
                    <i class="fas fa-eye"></i> View
                  </button>
                  <button class="btn btn-sm btn-primary edit-note" data-id="${session.id}">
                    <i class="fas fa-edit"></i> Edit
                  </button>
                </div>
              </div>
            </div>
          `;
        });
        
        html += '</div>';
      }
      
      document.getElementById('notesContainer').innerHTML = html;
      updateStats(sessions);
      
      // Add event listeners
      document.querySelectorAll('.view-note').forEach(function(btn) {
        btn.addEventListener('click', function() {
          viewNote(this.getAttribute('data-id'));
        });
      });
      
      document.querySelectorAll('.edit-note').forEach(function(btn) {
        btn.addEventListener('click', function() {
          editNote(this.getAttribute('data-id'));
        });
      });
      
      // Add view switcher listeners
      document.querySelectorAll('[data-view]').forEach(function(btn) {
        btn.addEventListener('click', function() {
          const view = this.getAttribute('data-view');
          switchView(view);
        });
      });
    }

    // Helper functions
    function getStatusClass(status) {
      if (!status) return '';
      switch(status.toLowerCase()) {
        case 'completed': return 'status-completed';
        case 'scheduled': return 'status-scheduled';
        case 'cancelled': return 'status-cancelled';
        case 'in progress': return 'status-in-progress';
        default: return '';
      }
    }
    
    function formatTime(date) {
      if (!(date instanceof Date)) {
        date = new Date(date);
      }
      return date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    }
    
    function renderNoteContent(session) {
      let html = '';
      
      // Add general content if available
      if (session.content) {
        html += `
          <div class="note-section">
            <h6><i class="fas fa-comment-alt text-primary mr-2"></i> Notes</h6>
            <div class="note-text">${formatContent(session.content)}</div>
          </div>
        `;
      }
      
      // Add action items if available
      if (session.actionItems && session.actionItems.length > 0) {
        html += `
          <div class="note-section">
            <h6><i class="fas fa-tasks text-primary mr-2"></i> Action Items</h6>
            <ul class="action-items-list">
        `;
        
        // Handle action items as string or array
        let actionItems = session.actionItems;
        if (typeof actionItems === 'string') {
          try {
            actionItems = JSON.parse(actionItems);
          } catch (e) {
            console.error('Error parsing action items:', e);
            actionItems = [actionItems]; // Treat as a single string item
          }
        }
        
        if (!Array.isArray(actionItems)) {
          actionItems = [actionItems]; // Ensure it's an array
        }
        
        actionItems.forEach(function(item, index) {
          if (item) {
            html += `
              <li class="action-item">
                <span class="action-number">${index + 1}.</span>
                <div class="action-content">
                  <div class="action-text">${item}</div>
                </div>
              </li>
            `;
          }
        });
        
        html += `
            </ul>
          </div>
        `;
      }
      
      return html;
    }
    
    function formatContent(content) {
      if (!content) return '';
      
      // Convert line breaks to <br> tags and escape HTML
      return content
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/\n/g, '<br>');
    }
    
    function updateStats(sessions, empty = false) {
      if (empty) {
        document.getElementById('totalNotes').textContent = '0';
        document.getElementById('recentNotes').textContent = '0';
        document.getElementById('teamMembersCount').textContent = '0';
        document.getElementById('actionItemsCount').textContent = '0';
        return;
      }
      
      document.getElementById('totalNotes').textContent = sessions.length;
      
      // Count notes from last 30 days
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      const recentNotes = sessions.filter(function(session) {
        return new Date(session.date || session.createdDate || 0) >= thirtyDaysAgo;
      }).length;
      
      document.getElementById('recentNotes').textContent = recentNotes;
      
      // Count unique team members
      const teamMembers = new Set();
      sessions.forEach(function(session) {
        if (session.teamMemberEmail) {
          teamMembers.add(session.teamMemberEmail);
        }
      });
      
      document.getElementById('teamMembersCount').textContent = teamMembers.size;
      
      // Count action items
      let actionItemCount = 0;
      sessions.forEach(function(session) {
        if (session.actionItems) {
          // Handle action items as string or array
          let actionItems = session.actionItems;
          if (typeof actionItems === 'string') {
            try {
              actionItems = JSON.parse(actionItems);
            } catch (e) {
              actionItems = [actionItems]; // Treat as a single string item
            }
          }
          
          if (Array.isArray(actionItems)) {
            actionItemCount += actionItems.length;
          } else if (actionItems) {
            actionItemCount += 1; // Count as one item if not an array
          }
        }
      });
      
      document.getElementById('actionItemsCount').textContent = actionItemCount;
    }
    
    function switchView(view) {
      currentView = view;
      
      // Update active button
      document.querySelectorAll('[data-view]').forEach(function(btn) {
        if (btn.getAttribute('data-view') === view) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
      
      // Reload notes to apply new view
      loadNotes();
    }
    
    function viewNote(id) {
      console.log("Viewing note:", id);
      google.script.run.viewOneOnOneSession(id);
    }
    
    function editNote(id) {
      console.log("Editing note:", id);
      google.script.run.editOneOnOneSession(id);
    }
    
    function applyFilters() {
      const teamMember = document.getElementById('teamMemberFilter').value;
      const dateFrom = document.getElementById('dateFromFilter').value;
      const dateTo = document.getElementById('dateToFilter').value;
      const search = document.getElementById('searchFilter').value;
      
      const filters = {};
      
      if (teamMember) {
        filters.teamMemberEmail = teamMember;
      }
      
      if (dateFrom) {
        filters.startDate = new Date(dateFrom);
      }
      
      if (dateTo) {
        // Set the time to the end of day for inclusive filtering
        const endDate = new Date(dateTo);
        endDate.setHours(23, 59, 59, 999);
        filters.endDate = endDate;
      }
      
      if (search) {
        filters.searchText = search;
      }
      
      // Update notes title based on filters
      if (Object.keys(filters).length > 0) {
        document.getElementById('notesTitle').textContent = 'Filtered Notes';
      } else {
        document.getElementById('notesTitle').textContent = 'All Notes';
      }
      
      // Show loading indicator
      document.getElementById('notesContainer').innerHTML = 
        '<div class="d-flex justify-content-center align-items-center p-5">' +
        '<div class="spinner-border text-primary mr-3" role="status">' +
        '<span class="sr-only">Loading...</span></div>' +
        '<span>Loading notes...</span></div>';
      
      updateDebugInfo("Applying filters: " + JSON.stringify(filters));
      
      // Load filtered notes
      google.script.run
        .withSuccessHandler(function(sessions) {
          updateDebugInfo("Filtered notes loaded: " + sessions.length + " found");
          displayNotes(sessions);
        })
        .withFailureHandler(function(error) {
          updateDebugInfo("ERROR applying filters: " + error);
          document.getElementById('notesContainer').innerHTML = 
            '<div class="alert alert-danger">' +
            '<strong>Error:</strong> ' + error +
            '</div>';
        })
        .getOneOnOneSessions(filters);
    }

    
    
    function clearFilters() {
      document.getElementById('teamMemberFilter').value = '';
      document.getElementById('dateFromFilter').value = '';
      document.getElementById('dateToFilter').value = '';
      document.getElementById('searchFilter').value = '';
      
      document.getElementById('notesTitle').textContent = 'All Notes';
      
      updateDebugInfo("Filters cleared");
      loadNotes();
    }
    
    function updateDebugInfo(message) {
      // Debug panel might be useful during development
      document.getElementById('debugInfo').innerHTML += '<div>' + message + '</div>';
    }
    
    function showDebugPanel(show = true) {
      document.getElementById('debugPanel').style.display = show ? 'block' : 'none';
    }
    
    // Create a debug mode toggle (for development only)
    function toggleDebugMode() {
      const debugPanel = document.getElementById('debugPanel');
      debugPanel.style.display = debugPanel.style.display === 'none' ? 'block' : 'none';
    }
    
    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      // Load user info - this will update the header with correct values
      loadUserInfo();
      
      // Hide loading overlay after a short delay
      setTimeout(function() {
        document.getElementById('loadingOverlay').style.display = 'none';
      }, 500);
      
      // Enable debug mode during development - comment this out for production
      showDebugPanel(true);
      
      // Load notes
      loadNotes();
      
      // Load team members for filter
      google.script.run
        .withSuccessHandler(function(members) {
          updateDebugInfo("Loaded " + members.length + " team members for filter");
          const select = document.getElementById('teamMemberFilter');
          members.forEach(function(member) {
            const option = document.createElement('option');
            option.value = member.email;
            option.textContent = member.firstName + ' ' + member.lastName;
            select.appendChild(option);
          });
        })
        .withFailureHandler(function(error) {
          updateDebugInfo("ERROR loading team members: " + error);
        })
        .getTeamMembers();
      
      // Add event listeners
      document.getElementById('refreshBtn').addEventListener('click', function() {
        loadNotes();
      });
      
      document.getElementById('createBtn').addEventListener('click', function() {
        google.script.run.createOneOnOneSession();
      });
      
      document.getElementById('createEmptyBtn').addEventListener('click', function() {
        google.script.run.createOneOnOneSession();
      });
      
      document.getElementById('applyFiltersBtn').addEventListener('click', function() {
        applyFilters();
      });
      
      document.getElementById('clearFiltersBtn').addEventListener('click', function() {
        clearFilters();
      });
      
      // Double-click title to toggle debug mode (development only)
      document.querySelector('.page-title').addEventListener('dblclick', function() {
        toggleDebugMode();
      });
    });
  </script>
</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Add Team Member</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  
  <style>
    :root {
      /* Primary colors */
      --primary: #6366f1;
      --primary-dark: #4f46e5;
      --primary-light: #c7d2fe;
      --primary-bg: #eef2ff;
      
      /* Secondary colors */
      --secondary: #f43f5e;
      --secondary-dark: #e11d48;
      --secondary-light: #fecdd3;
      --secondary-bg: #fff1f2;
      
      /* Success colors */
      --success: #10b981;
      --success-dark: #059669;
      --success-light: #a7f3d0;
      --success-bg: #ecfdf5;
      
      /* Warning colors */
      --warning: #f59e0b;
      --warning-dark: #d97706;
      --warning-light: #fde68a;
      --warning-bg: #fffbeb;
      
      /* Danger colors */
      --danger: #ef4444;
      --danger-dark: #dc2626;
      --danger-light: #fca5a5;
      --danger-bg: #fee2e2;
      
      /* Neutral colors */
      --gray-50: #f9fafb;
      --gray-100: #f3f4f6;
      --gray-200: #e5e7eb;
      --gray-300: #d1d5db;
      --gray-400: #9ca3af;
      --gray-500: #6b7280;
      --gray-600: #4b5563;
      --gray-700: #374151;
      --gray-800: #1f2937;
      --gray-900: #111827;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--gray-50);
      color: var(--gray-800);
    }
    
    .card {
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      border: none;
    }
    
    .card-header {
      background-color: white;
      border-bottom: 1px solid var(--gray-200);
      border-radius: 10px 10px 0 0 !important;
      padding: 15px 20px;
    }
    
    .form-control {
      border-radius: 6px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
    }
    
    .form-control:focus {
      box-shadow: 0 0 0 3px var(--primary-light);
      border-color: var(--primary);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary-dark);
    }
    
    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
    }
    
    .btn-outline-secondary {
      color: var(--gray-600);
      border-color: var(--gray-300);
    }
    
    .btn-outline-secondary:hover {
      background-color: var(--gray-100);
      color: var(--gray-800);
    }
    
    label {
      font-weight: 500;
      color: var(--gray-700);
      margin-bottom: 0.5rem;
    }
    
    .avatar-upload {
      position: relative;
      width: 120px;
      height: 120px;
      margin: 0 auto 20px;
    }
    
    .avatar-preview {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      overflow: hidden;
      border: 3px solid var(--primary);
      position: relative;
    }
    
    .avatar-preview img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .avatar-edit {
      position: absolute;
      right: 0;
      bottom: 0;
      width: 36px;
      height: 36px;
      background-color: var(--primary);
      border-radius: 50%;
      text-align: center;
      line-height: 36px;
      color: white;
      overflow: hidden;
      z-index: 10;
      cursor: pointer;
    }
    
    .avatar-edit input {
      position: absolute;
      transform: scale(2);
      opacity: 0;
      cursor: pointer;
    }
    
    .avatar-edit i {
      color: white;
      font-size: 16px;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    
    .form-section {
      margin-bottom: 30px;
    }
    
    .form-section-title {
      font-weight: 600;
      font-size: 1.1rem;
      margin-bottom: 15px;
      color: var(--gray-800);
      padding-bottom: 8px;
      border-bottom: 1px solid var(--gray-200);
    }
    
    .is-invalid {
      border-color: var(--danger) !important;
    }
    
    .invalid-feedback {
      color: var(--danger);
      font-size: 0.85rem;
    }
    
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }
    
    .toast {
      min-width: 300px;
    }
    
    #loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }
    
    .badge-role {
      font-size: 0.75rem;
      padding: 0.35em 0.65em;
      border-radius: 30px;
    }
    
    .form-tip {
      color: var(--gray-500);
      font-size: 0.85rem;
      margin-top: 5px;
    }
    
    [role="status"] {
      min-height: 100px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
  </style>
</head>
<body>
  <div class="container py-4">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
              <i class="fas fa-user-plus text-primary mr-2"></i>Add Team Member
            </h5>
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="window.close()">
              <i class="fas fa-times mr-1"></i>Close
            </button>
          </div>
          <div class="card-body">
            <form id="addTeamMemberForm" onsubmit="return validateAndSubmit()">
              <div class="row">
                <div class="col-md-4 text-center">
                  <div class="avatar-upload mb-4">
                    <div class="avatar-preview">
                      <img id="avatar-preview-img" src="https://via.placeholder.com/120/6366f1/ffffff?text=TM" alt="Avatar preview">
                    </div>
                    <div class="avatar-edit">
                      <input type="file" id="avatar-upload" accept=".png, .jpg, .jpeg">
                      <i class="fas fa-camera"></i>
                    </div>
                  </div>
                  <div class="form-group">
                    <label for="status">Status</label>
                    <select class="form-control" id="status" name="status" required>
                      <option value="Active">Active</option>
                      <option value="Training">Training</option>
                      <option value="PTO">PTO</option>
                      <option value="LOA">Leave of Absence</option>
                      <option value="Inactive">Inactive</option>
                    </select>
                  </div>
                </div>
                
                <div class="col-md-8">
                  <div class="form-section">
                    <div class="form-section-title">Basic Information</div>
                    <div class="form-row">
                      <div class="form-group col-md-6">
                        <label for="firstName">First Name*</label>
                        <input type="text" class="form-control" id="firstName" name="firstName" required>
                        <div class="invalid-feedback">Please enter a first name</div>
                      </div>
                      <div class="form-group col-md-6">
                        <label for="lastName">Last Name*</label>
                        <input type="text" class="form-control" id="lastName" name="lastName" required>
                        <div class="invalid-feedback">Please enter a last name</div>
                      </div>
                    </div>
                    
                    <div class="form-group">
                      <label for="email">Email*</label>
                      <input type="email" class="form-control" id="email" name="email" required>
                      <div class="invalid-feedback">Please enter a valid email address</div>
                      <small class="form-tip">Used for login and communication</small>
                    </div>
                    
                    <div class="form-row">
                      <div class="form-group col-md-6">
                        <label for="role">Role*</label>
                        <select class="form-control" id="role" name="role" required>
                          <option value="">Select Role</option>
                          <option value="Counselor">Counselor</option>
                          <option value="Lead Counselor">Lead Counselor</option>
                          <option value="Team Lead">Team Lead</option>
                          <option value="Supervisor">Supervisor</option>
                          <option value="Specialist">Specialist</option>
                          <option value="Manager">Manager</option>
                          <option value="Administrator">Administrator</option>
                          <option value="Other">Other</option>
                        </select>
                        <div class="invalid-feedback">Please select a role</div>
                      </div>
                      <div class="form-group col-md-6">
                        <label for="customRole">Custom Role</label>
                        <input type="text" class="form-control" id="customRole" name="customRole" disabled>
                        <small class="form-tip">Only if "Other" is selected</small>
                      </div>
                    </div>
                  </div>
                  
                  <div class="form-section">
                    <div class="form-section-title">Additional Details</div>
                    <div class="form-row">
                      <div class="form-group col-md-6">
                        <label for="phone">Phone Number</label>
                        <input type="tel" class="form-control" id="phone" name="phone">
                      </div>
                      <div class="form-group col-md-6">
                        <label for="startDate">Start Date</label>
                        <input type="date" class="form-control" id="startDate" name="startDate">
                      </div>
                    </div>
                    
                    <div class="form-group">
                      <label for="department">Department</label>
                      <input type="text" class="form-control" id="department" name="department">
                    </div>
                    
                    <div class="form-group">
                      <label for="notes">Notes</label>
                      <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
                    </div>
                  </div>
                </div>
              </div>
              
              <hr>
              
              <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-outline-secondary" onclick="resetForm()">
                  <i class="fas fa-redo mr-1"></i>Reset
                </button>
                <div>
                  <button type="button" class="btn btn-outline-secondary mr-2" onclick="window.close()">Cancel</button>
                  <button type="submit" class="btn btn-primary">
                    <i class="fas fa-user-plus mr-1"></i>Add Team Member
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loading-overlay" style="display: none;">
    <div class="spinner-border text-primary" role="status">
      <span class="sr-only">Loading...</span>
    </div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container"></div>

  <!-- Bootstrap JS, Popper.js, and jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  
  <script>
    // Document ready function
    document.addEventListener('DOMContentLoaded', function() {
      // Image upload preview
      document.getElementById('avatar-upload').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function(event) {
            document.getElementById('avatar-preview-img').src = event.target.result;
          }
          reader.readAsDataURL(file);
        }
      });
      
      // Toggle custom role field based on role selection
      document.getElementById('role').addEventListener('change', function() {
        const customRoleField = document.getElementById('customRole');
        if (this.value === 'Other') {
          customRoleField.disabled = false;
          customRoleField.required = true;
        } else {
          customRoleField.disabled = true;
          customRoleField.required = false;
          customRoleField.value = '';
        }
      });
      
      // Set today's date as the default for start date
      const today = new Date().toISOString().split('T')[0];
      document.getElementById('startDate').value = today;
    });
    
    // Validate and submit form
    function validateAndSubmit() {
      const form = document.getElementById('addTeamMemberForm');
      
      // Check if form is valid
      if (!form.checkValidity()) {
        // Show validation messages
        Array.from(form.elements).forEach(input => {
          if (input.checkValidity()) {
            input.classList.remove('is-invalid');
          } else {
            input.classList.add('is-invalid');
          }
        });
        
        return false;
      }
      
      // Check if custom role is provided when "Other" is selected
      if (document.getElementById('role').value === 'Other' && 
          document.getElementById('customRole').value.trim() === '') {
        document.getElementById('customRole').classList.add('is-invalid');
        return false;
      }
      
      // Show loading overlay
      document.getElementById('loading-overlay').style.display = 'flex';
      
      // Get form data
      const formData = {
        firstName: document.getElementById('firstName').value,
        lastName: document.getElementById('lastName').value,
        email: document.getElementById('email').value,
        role: document.getElementById('role').value === 'Other' ? 
              document.getElementById('customRole').value : 
              document.getElementById('role').value,
        status: document.getElementById('status').value,
        phone: document.getElementById('phone').value,
        startDate: document.getElementById('startDate').value,
        department: document.getElementById('department').value,
        notes: document.getElementById('notes').value
      };
      
      // Submit the form data
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loading-overlay').style.display = 'none';
          
          if (result.success) {
            showToast('Success', 'Team member added successfully', 'success');
            
            // Reset form after successful submission
            resetForm();
            
            // Optionally close the form after a delay
            setTimeout(function() {
              window.close();
            }, 3000);
          } else {
            showToast('Error', result.message || 'Failed to add team member', 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loading-overlay').style.display = 'none';
          showToast('Error', error.message || 'An error occurred', 'danger');
        })
        .createTeamMember(formData);
      
      return false;
    }
    
    // Reset form
    function resetForm() {
      document.getElementById('addTeamMemberForm').reset();
      
      // Reset validation classes
      Array.from(document.getElementById('addTeamMemberForm').elements).forEach(input => {
        input.classList.remove('is-invalid');
      });
      
      // Reset avatar preview
      document.getElementById('avatar-preview-img').src = 'https://via.placeholder.com/120/6366f1/ffffff?text=TM';
      
      // Disable custom role field
      document.getElementById('customRole').disabled = true;
      
      // Set today's date for start date
      const today = new Date().toISOString().split('T')[0];
      document.getElementById('startDate').value = today;
    }
    
    // Show toast notification
    function showToast(title, message, type) {
      const toastContainer = document.querySelector('.toast-container');
      const toastId = 'toast-' + Date.now();
      
      const toastHtml = `
        <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-delay="5000">
          <div class="toast-header bg-${type} text-white">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : 'info-circle'} mr-2"></i>
            <strong class="mr-auto">${title}</strong>
            <small>Just now</small>
            <button type="button" class="ml-2 mb-1 close text-white" data-dismiss="toast" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="toast-body">
            ${message}
          </div>
        </div>
      `;
      
      toastContainer.insertAdjacentHTML('beforeend', toastHtml);
      $(`#${toastId}`).toast('show');
      
      // Remove toast when hidden
      $(`#${toastId}`).on('hidden.bs.toast', function() {
        this.remove();
      });
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <title>Debug Tool</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    h1 { color: #333; }
    pre { background-color: #f5f5f5; padding: 10px; border-radius: 5px; overflow: auto; max-height: 300px; }
    button { padding: 10px; margin: 5px; cursor: pointer; }
    .success { color: green; }
    .error { color: red; }
    .warning { color: orange; }
    .section { margin-bottom: 20px; border: 1px solid #ddd; padding: 10px; border-radius: 5px; }
  </style>
</head>
<body>
  <h1>Team Lead Dashboard Debug Tool</h1>
  <div class="section">
    <h2>Quick Actions</h2>
    <button onclick="testGetTeamMembers()">Test getTeamMembers()</button>
    <button onclick="testAddTeamMember()">Add Test Team Member</button>
    <button onclick="testGetOneOnOneSessions()">Test getOneOnOneSessions()</button>
    <button onclick="testDebugInfo()">Get Full Debug Info</button>
  </div>
  
  <div class="section">
    <h2>Results</h2>
    <div id="results">Click a button above to see results</div>
  </div>
  
  <script>
    // Test getTeamMembers function
    function testGetTeamMembers() {
      document.getElementById('results').innerHTML = '<p>Testing getTeamMembers()...</p>';
      
      google.script.run
        .withSuccessHandler(function(members) {
          var result = '<p class="success">Success! Got ' + members.length + ' team members:</p>';
          result += '<pre>' + JSON.stringify(members, null, 2) + '</pre>';
          document.getElementById('results').innerHTML = result;
        })
        .withFailureHandler(function(error) {
          var result = '<p class="error">Error: ' + error + '</p>';
          result += '<p>Make sure the getTeamMembers() function is defined in Code.gs as a global function.</p>';
          document.getElementById('results').innerHTML = result;
        })
        .getTeamMembers();
    }
    
    // Test adding a team member
    function testAddTeamMember() {
      document.getElementById('results').innerHTML = '<p>Adding test team member...</p>';
      
      google.script.run
        .withSuccessHandler(function(result) {
          var html = '<p class="success">Success! Team member added.</p>';
          html += '<p>Now testing getTeamMembers() to verify...</p>';
          
          document.getElementById('results').innerHTML = html;
          
          // Now test getting team members to confirm
          setTimeout(testGetTeamMembers, 1000);
        })
        .withFailureHandler(function(error) {
          document.getElementById('results').innerHTML = '<p class="error">Error: ' + error + '</p>';
        })
        .addTestTeamMember();
    }
    
    // Test getOneOnOneSessions function
    function testGetOneOnOneSessions() {
      document.getElementById('results').innerHTML = '<p>Testing getOneOnOneSessions()...</p>';
      
      google.script.run
        .withSuccessHandler(function(sessions) {
          var result = '<p class="success">Success! Got ' + sessions.length + ' sessions:</p>';
          result += '<pre>' + JSON.stringify(sessions, null, 2) + '</pre>';
          document.getElementById('results').innerHTML = result;
        })
        .withFailureHandler(function(error) {
          var result = '<p class="error">Error: ' + error + '</p>';
          document.getElementById('results').innerHTML = result;
        })
        .getOneOnOneSessions();
    }
    
    // Get full debug info
    function testDebugInfo() {
      document.getElementById('results').innerHTML = '<p>Getting debug info...</p>';
      
      google.script.run
        .withSuccessHandler(function(info) {
          var result = '<p class="success">Debug information:</p>';
          result += '<pre>' + JSON.stringify(info, null, 2) + '</pre>';
          document.getElementById('results').innerHTML = result;
        })
        .withFailureHandler(function(error) {
          document.getElementById('results').innerHTML = '<p class="error">Error: ' + error + '</p>';
        })
        .debugServicesData();
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Export One-on-One Sessions</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- DatePicker CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  
  <style>
    :root {
      /* Primary colors */
      --primary: #6366f1;
      --primary-dark: #4f46e5;
      --primary-light: #c7d2fe;
      --primary-bg: #eef2ff;
      
      /* Secondary colors */
      --secondary: #f43f5e;
      --secondary-dark: #e11d48;
      --secondary-light: #fecdd3;
      --secondary-bg: #fff1f2;
      
      /* Success colors */
      --success: #10b981;
      --success-dark: #059669;
      --success-light: #a7f3d0;
      --success-bg: #ecfdf5;
      
      /* Warning colors */
      --warning: #f59e0b;
      --warning-dark: #d97706;
      --warning-light: #fde68a;
      --warning-bg: #fffbeb;
      
      /* Danger colors */
      --danger: #ef4444;
      --danger-dark: #dc2626;
      --danger-light: #fca5a5;
      --danger-bg: #fee2e2;
      
      /* Neutral colors */
      --gray-50: #f9fafb;
      --gray-100: #f3f4f6;
      --gray-200: #e5e7eb;
      --gray-300: #d1d5db;
      --gray-400: #9ca3af;
      --gray-500: #6b7280;
      --gray-600: #4b5563;
      --gray-700: #374151;
      --gray-800: #1f2937;
      --gray-900: #111827;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--gray-50);
      color: var(--gray-800);
      padding: 20px;
    }
    
    .card {
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      margin-bottom: 20px;
      transition: transform 0.2s, box-shadow 0.2s;
      border: none;
    }
    
    .card-header {
      font-weight: 600;
      background-color: white;
      border-bottom: 1px solid var(--gray-200);
      border-radius: 10px 10px 0 0 !important;
      padding: 15px 20px;
    }
    
    .form-card {
      margin-bottom: 30px;
    }
    
    .form-group label {
      font-weight: 500;
      font-size: 0.9rem;
      color: var(--gray-700);
      margin-bottom: 0.5rem;
    }
    
    .form-control {
      border-radius: 8px;
      border: 1px solid var(--gray-300);
      padding: 8px 12px;
      font-size: 0.95rem;
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px var(--primary-light);
    }
    
    .btn {
      border-radius: 8px;
      font-weight: 500;
      padding: 8px 16px;
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
    }
    
    .btn-outline-secondary {
      color: var(--gray-600);
      border-color: var(--gray-300);
    }
    
    .btn-outline-secondary:hover {
      background-color: var(--gray-100);
      color: var(--gray-800);
    }
    
    .btn-group-toggle .btn {
      padding: 6px 12px;
      font-size: 0.9rem;
    }
    
    .btn-group-toggle .btn.active {
      background-color: var(--primary-bg);
      color: var(--primary);
      border-color: var(--primary-light);
    }
    
    .preview-card {
      background-color: var(--primary-bg);
      border-radius: 10px;
      padding: 20px;
    }
    
    .preview-count {
      font-size: 3rem;
      font-weight: 700;
      color: var(--primary);
      line-height: 1;
    }
    
    .preview-label {
      font-size: 0.95rem;
      color: var(--gray-600);
      font-weight: 500;
    }
    
    .checkbox-filter {
      margin-bottom: 5px;
    }
    
    .checkbox-filter .custom-control-label {
      display: flex;
      align-items: center;
    }
    
    .quick-filter-btn {
      margin-right: 5px;
      margin-bottom: 5px;
    }
    
    .section-divider {
      border-top: 1px solid var(--gray-200);
      margin: 20px 0;
    }
    
    .spinner-container {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      width: 100%;
      position: fixed;
      top: 0;
      left: 0;
      background-color: rgba(255, 255, 255, 0.8);
      z-index: 9999;
    }
    
    .spinner-text {
      margin-left: 10px;
      font-weight: 500;
    }
    
    .team-member-selector {
      max-height: 200px;
      overflow-y: auto;
      padding-right: 5px;
    }
    
    .error-alert {
      background-color: var(--danger-bg);
      color: var(--danger-dark);
      border: 1px solid var(--danger-light);
      border-radius: 8px;
    }
    
    .success-alert {
      background-color: var(--success-bg);
      color: var(--success-dark);
      border: 1px solid var(--success-light);
      border-radius: 8px;
    }
    
    .export-success-container {
      text-align: center;
      padding: 20px;
    }
    
    .export-success-icon {
      font-size: 48px;
      color: var(--success);
      margin-bottom: 15px;
    }
    
    .export-link {
      margin: 15px 0;
      padding: 10px;
      background-color: var(--primary-bg);
      border-radius: 8px;
      word-break: break-all;
    }
    
    .field-list {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 10px;
    }
    
    @media (max-width: 768px) {
      .field-list {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="row justify-content-center">
      <div class="col-md-10">
        <h1 class="mb-4">Export One-on-One Sessions</h1>
        
        <div id="export-form-container">
          <div class="card form-card">
            <div class="card-header d-flex justify-content-between align-items-center">
              <span>Filter Sessions</span>
              <button class="btn btn-sm btn-outline-secondary" onclick="resetFilters()">
                <i class="fas fa-undo-alt mr-1"></i>Reset Filters
              </button>
            </div>
            <div class="card-body">
              <!-- Date Range Filter -->
              <div class="row">
                                <div class="col-md-6">
                  <div class="form-group">
                    <label for="date-range">Date Range</label>
                    <select class="form-control" id="date-range" onchange="toggleCustomDateRange()">
                      <option value="all">All Time</option>
                      <option value="recent">Recent (Last 30 Days)</option>
                      <option value="last-quarter">Last Quarter</option>
                      <option value="last-6-months">Last 6 Months</option>
                      <option value="year-to-date">Year to Date</option>
                      <option value="custom">Custom Range</option>
                    </select>
                  </div>
                  
                  <div id="custom-date-container" class="form-group d-none">
                    <div class="row">
                      <div class="col-md-6">
                        <label for="start-date">Start Date</label>
                        <input type="date" class="form-control" id="start-date">
                      </div>
                      <div class="col-md-6">
                        <label for="end-date">End Date</label>
                        <input type="date" class="form-control" id="end-date">
                      </div>
                    </div>
                  </div>
                </div>
                
                <div class="col-md-6">
                  <div class="form-group">
                    <label for="team-member">Team Member</label>
                    <select class="form-control" id="team-member">
                      <option value="all">All Team Members</option>
                      <!-- Team members will be loaded dynamically -->
                    </select>
                  </div>
                  
                  <div class="form-group">
                    <label for="session-status">Session Status</label>
                    <select class="form-control" id="session-status">
                      <option value="all">All Statuses</option>
                      <option value="Completed">Completed</option>
                      <option value="Scheduled">Scheduled</option>
                      <option value="Cancelled">Cancelled</option>
                      <option value="Missed">Missed</option>
                    </select>
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label>Additional Filters</label>
                <div class="row">
                  <div class="col-md-6">
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="filter-has-action-items">
                      <label class="custom-control-label" for="filter-has-action-items">Only sessions with action items</label>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="filter-created-by-me">
                      <label class="custom-control-label" for="filter-created-by-me">Only sessions created by me</label>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="card form-card mt-4">
            <div class="card-header">
              <span>Export Settings</span>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    <label for="export-format">Export Format</label>
                    <select class="form-control" id="export-format">
                      <option value="spreadsheet">Google Spreadsheet</option>
                      <option value="pdf">PDF Document</option>
                      <option value="csv">CSV File</option>
                    </select>
                  </div>
                  
                  <div class="form-group">
                    <label for="export-name">Export Name (Optional)</label>
                    <input type="text" class="form-control" id="export-name" placeholder="One-on-One Export">
                  </div>
                </div>
                
                <div class="col-md-6">
                  <div class="form-group">
                    <label>Include Fields</label>
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="include-basic-info" checked disabled>
                      <label class="custom-control-label" for="include-basic-info">Basic Information (Date, Team Member, Status)</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="include-prep-notes" checked>
                      <label class="custom-control-label" for="include-prep-notes">Preparation Notes</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="include-status-notes" checked>
                      <label class="custom-control-label" for="include-status-notes">Status Notes</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="include-performance-notes" checked>
                      <label class="custom-control-label" for="include-performance-notes">Performance Notes</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="include-development-notes" checked>
                      <label class="custom-control-label" for="include-development-notes">Development Notes</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="include-support-notes" checked>
                      <label class="custom-control-label" for="include-support-notes">Support Notes</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="include-action-items" checked>
                      <label class="custom-control-label" for="include-action-items">Action Items</label>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label>Export Options</label>
                <div class="row">
                  <div class="col-md-6">
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="include-header-row" checked>
                      <label class="custom-control-label" for="include-header-row">Include Header Row</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="format-export" checked>
                      <label class="custom-control-label" for="format-export">Format Export (Colors, Styling)</label>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="email-export">
                      <label class="custom-control-label" for="email-export">Send Export to My Email</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="save-to-drive">
                      <label class="custom-control-label" for="save-to-drive">Save to My Google Drive</label>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="d-flex justify-content-between mt-4">
            <button class="btn btn-secondary" onclick="window.close()">Cancel</button>
            <button class="btn btn-primary" onclick="exportSessions()">
              <i class="fas fa-file-export mr-2"></i>Export Sessions
            </button>
          </div>
        </div>
        
        <!-- Export Results - Hidden Initially -->
        <div id="export-results-container" class="d-none">
          <div class="card">
            <div class="card-header bg-success text-white">
              <h5 class="mb-0"><i class="fas fa-check-circle mr-2"></i>Export Complete</h5>
            </div>
            <div class="card-body text-center">
              <div class="mb-4">
                <div class="export-icon mb-3">
                  <i class="fas fa-file-export fa-4x text-success"></i>
                </div>
                <h4 id="export-summary">Your export is ready!</h4>
                <p id="export-details" class="lead text-muted"></p>
              </div>
              
              <div class="d-flex justify-content-center">
                <a id="export-link" href="#" target="_blank" class="btn btn-primary mr-3">
                  <i class="fas fa-external-link-alt mr-2"></i>Open Export
                </a>
                <button class="btn btn-secondary" onclick="resetExport()">
                  <i class="fas fa-redo mr-2"></i>Create Another Export
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Export History -->
        <div class="card mt-4">
          <div class="card-header">
            <span>Recent Exports</span>
          </div>
          <div class="card-body p-0">
            <div class="table-responsive">
              <table class="table mb-0">
                <thead>
                  <tr>
                    <th>Date & Time</th>
                    <th>Export Name</th>
                    <th>Format</th>
                    <th>Sessions</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody id="export-history">
                  <tr>
                    <td colspan="5" class="text-center py-3">
                      <i class="fas fa-spinner fa-spin mr-2"></i>Loading export history...
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loading-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(255,255,255,0.8); z-index: 9999;">
    <div class="d-flex flex-column align-items-center justify-content-center h-100">
      <div class="spinner-border text-primary mb-3" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div id="loading-message">Preparing export...</div>
      <div class="progress mt-3" style="width: 50%;">
        <div id="export-progress" class="progress-bar" role="progressbar" style="width: 0%;">0%</div>
      </div>
    </div>
  </div>
  
  <script>
    // Initialize variables
    let teamMembers = [];
    let exportHistory = [];
    
    // Document ready function
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize date pickers with default values
      const today = new Date();
      document.getElementById('end-date').valueAsDate = today;
      
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(today.getDate() - 30);
      document.getElementById('start-date').valueAsDate = thirtyDaysAgo;
      
      // Load team members
      loadTeamMembers();
      
      // Load export history
      loadExportHistory();
    });
    
    // Toggle custom date range visibility
    function toggleCustomDateRange() {
      const dateRange = document.getElementById('date-range').value;
      const customDateContainer = document.getElementById('custom-date-container');
      
      if (dateRange === 'custom') {
        customDateContainer.classList.remove('d-none');
      } else {
        customDateContainer.classList.add('d-none');
      }
    }
    
    // Reset filters
    function resetFilters() {
      document.getElementById('date-range').value = 'all';
      document.getElementById('team-member').value = 'all';
      document.getElementById('session-status').value = 'all';
      document.getElementById('filter-has-action-items').checked = false;
      document.getElementById('filter-created-by-me').checked = false;
      
      // Hide custom date range
      document.getElementById('custom-date-container').classList.add('d-none');
    }
    
    // Load team members
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(function(members) {
          teamMembers = members;
          populateTeamMemberDropdown(members);
        })
        .withFailureHandler(function(error) {
          console.error('Error loading team members:', error);
          showError('Failed to load team members. Please try again later.');
        })
        .getTeamMembers();
    }
    
    // Populate team member dropdown
    function populateTeamMemberDropdown(members) {
      const dropdown = document.getElementById('team-member');
      
      // Clear existing options except the first one
      while (dropdown.options.length > 1) {
        dropdown.remove(1);
      }
      
      // Add team members to dropdown
      members.forEach(function(member) {
        const option = document.createElement('option');
        option.value = member.email;
        option.text = member.firstName + ' ' + member.lastName;
        dropdown.add(option);
      });
    }
    
    // Load export history
    function loadExportHistory() {
      google.script.run
        .withSuccessHandler(function(history) {
          exportHistory = history;
          displayExportHistory(history);
        })
        .withFailureHandler(function(error) {
          console.error('Error loading export history:', error);
          
          const historyTable = document.getElementById('export-history');
          historyTable.innerHTML = `
            <tr>
              <td colspan="5" class="text-center py-3 text-danger">
                Error loading export history. Please refresh the page.
              </td>
            </tr>
          `;
        })
        .getExportHistory();
    }
    
    // Display export history
    function displayExportHistory(history) {
      const historyTable = document.getElementById('export-history');
      
      // Clear previous content
      historyTable.innerHTML = '';
      
      // Check if there's no history
      if (!history || history.length === 0) {
        historyTable.innerHTML = `
          <tr>
            <td colspan="5" class="text-center py-3 text-muted">
              No previous exports found
            </td>
          </tr>
        `;
        return;
      }
      
      // Display history items
      history.forEach(function(item) {
        // Format the date
        const exportDate = new Date(item.timestamp);
        const formattedDate = exportDate.toLocaleString();
        
        // Format export type with badges
        let formatBadge = '';
        switch (item.format) {
          case 'spreadsheet':
            formatBadge = '<span class="badge badge-success">Spreadsheet</span>';
            break;
          case 'pdf':
            formatBadge = '<span class="badge badge-danger">PDF</span>';
            break;
          case 'csv':
            formatBadge = '<span class="badge badge-primary">CSV</span>';
            break;
          default:
            formatBadge = '<span class="badge badge-secondary">' + item.format + '</span>';
        }
        
        // Create row
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${formattedDate}</td>
          <td>${item.name || 'Unnamed Export'}</td>
          <td>${formatBadge}</td>
          <td>${item.sessionCount} sessions</td>
          <td>
            <a href="${item.url}" target="_blank" class="btn btn-sm btn-outline-primary mr-2">
              <i class="fas fa-external-link-alt mr-1"></i>Open
            </a>
            <button class="btn btn-sm btn-outline-secondary" onclick="duplicateExport('${item.id}')">
              <i class="fas fa-copy mr-1"></i>Duplicate
            </button>
          </td>
        `;
        
        historyTable.appendChild(row);
      });
    }
    
    // Duplicate export
    function duplicateExport(exportId) {
      const exportItem = exportHistory.find(item => item.id === exportId);
      
      if (!exportItem) {
        showError('Export not found');
        return;
      }
      
      // Set form values based on the export
      document.getElementById('export-format').value = exportItem.format || 'spreadsheet';
      document.getElementById('export-name').value = 'Copy of ' + (exportItem.name || 'Unnamed Export');
      
      // Show success message
      showToast('Export settings copied', 'You can now modify and re-export with these settings', 'success');
      
      // Scroll to top of form
      window.scrollTo(0, 0);
    }
    
    // Export sessions
    function exportSessions() {
      // Get filter values
      const dateRange = document.getElementById('date-range').value;
      const teamMember = document.getElementById('team-member').value;
      const sessionStatus = document.getElementById('session-status').value;
      const hasActionItems = document.getElementById('filter-has-action-items').checked;
      const createdByMe = document.getElementById('filter-created-by-me').checked;
      
      // Get export settings
      const exportFormat = document.getElementById('export-format').value;
      const exportName = document.getElementById('export-name').value || 'One-on-One Export';
      const emailExport = document.getElementById('email-export').checked;
      const saveToDrive = document.getElementById('save-to-drive').checked;
      
      // Get included fields
      const includedFields = {
        prepNotes: document.getElementById('include-prep-notes').checked,
        statusNotes: document.getElementById('include-status-notes').checked,
        performanceNotes: document.getElementById('include-performance-notes').checked,
        developmentNotes: document.getElementById('include-development-notes').checked,
        supportNotes: document.getElementById('include-support-notes').checked,
        actionItems: document.getElementById('include-action-items').checked
      };
      
      // Get export options
      const includeHeaderRow = document.getElementById('include-header-row').checked;
      const formatExport = document.getElementById('format-export').checked;
      
      // Calculate date range
      let startDate = null;
      let endDate = null;
      
      if (dateRange === 'custom') {
        startDate = document.getElementById('start-date').value;
        endDate = document.getElementById('end-date').value;
        
        if (!startDate || !endDate) {
          showError('Please select both start and end dates for custom range');
          return;
        }
      } else {
        // Calculate standard date ranges
        const today = new Date();
        endDate = today.toISOString().split('T')[0]; // YYYY-MM-DD format
        
        switch (dateRange) {
          case 'recent':
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(today.getDate() - 30);
            startDate = thirtyDaysAgo.toISOString().split('T')[0];
            break;
          case 'last-quarter':
            const lastQuarter = new Date();
            lastQuarter.setMonth(today.getMonth() - 3);
            startDate = lastQuarter.toISOString().split('T')[0];
            break;
          case 'last-6-months':
            const sixMonthsAgo = new Date();
            sixMonthsAgo.setMonth(today.getMonth() - 6);
            startDate = sixMonthsAgo.toISOString().split('T')[0];
            break;
          case 'year-to-date':
            const yearStart = new Date(today.getFullYear(), 0, 1);
            startDate = yearStart.toISOString().split('T')[0];
            break;
          // 'all' has null startDate
        }
      }
      
      // Construct filter object
      const filters = {
        startDate: startDate,
        endDate: endDate,
        teamMemberEmail: teamMember === 'all' ? null : teamMember,
        status: sessionStatus === 'all' ? null : sessionStatus,
        hasActionItems: hasActionItems,
        createdByMe: createdByMe
      };
      
      // Construct export options object
      const exportOptions = {
        format: exportFormat,
        name: exportName,
        includeHeaderRow: includeHeaderRow,
        formatExport: formatExport,
        emailExport: emailExport,
        saveToDrive: saveToDrive,
        includedFields: includedFields
      };
      
      // Show loading overlay
      showLoading('Preparing export...');
      updateProgress(10);
      
      // Run the export
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result.success) {
            showExportResults(result);
            
            // Refresh export history
            loadExportHistory();
          } else {
            showError(result.message || 'Export failed');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showError('Export failed: ' + error);
        })
        .exportOneOnOneSessions(filters, exportOptions);
      
      // Start progress simulation
      simulateExportProgress();
    }
    
    // Show export results
    function showExportResults(result) {
      // Hide the form
      document.getElementById('export-form-container').classList.add('d-none');
      
      // Show the results
      const resultsContainer = document.getElementById('export-results-container');
      resultsContainer.classList.remove('d-none');
      
      // Update results content
      document.getElementById('export-summary').textContent = 
        result.sessionCount + ' sessions exported successfully';
        
      const details = [];
      details.push('Format: ' + formatExportType(result.format));
      
      if (result.timestamp) {
        const exportDate = new Date(result.timestamp);
        details.push('Date: ' + exportDate.toLocaleString());
      }
      
      document.getElementById('export-details').textContent = details.join(' • ');
      
      // Set link
      const exportLink = document.getElementById('export-link');
      exportLink.href = result.url;
    }
    
    // Format export type for display
    function formatExportType(type) {
      switch (type) {
        case 'spreadsheet': return 'Google Spreadsheet';
        case 'pdf': return 'PDF Document';
        case 'csv': return 'CSV File';
        default: return type;
      }
    }
    
    // Reset export (go back to form)
    function resetExport() {
      // Show the form
      document.getElementById('export-form-container').classList.remove('d-none');
      
      // Hide the results
      document.getElementById('export-results-container').classList.add('d-none');
      
      // Reset some form fields
      document.getElementById('export-name').value = '';
    }
    
    // Show loading overlay
    function showLoading(message) {
      document.getElementById('loading-overlay').style.display = 'flex';
      document.getElementById('loading-message').textContent = message || 'Loading...';
    }
    
    // Hide loading overlay
    function hideLoading() {
      document.getElementById('loading-overlay').style.display = 'none';
    }
    
    // Update progress bar
    function updateProgress(percentage) {
      const progressBar = document.getElementById('export-progress');
      progressBar.style.width = percentage + '%';
      progressBar.textContent = percentage + '%';
    }
    
    // Simulate progress during export
    function simulateExportProgress() {
      const steps = [
        { message: 'Preparing export...', progress: 10 },
        { message: 'Retrieving sessions...', progress: 30 },
        { message: 'Processing data...', progress: 50 },
        { message: 'Creating export file...', progress: 70 },
        { message: 'Finalizing export...', progress: 90 }
      ];
      
      let currentStep = 0;
      
      const interval = setInterval(function() {
        if (currentStep >= steps.length) {
          clearInterval(interval);
          return;
        }
        
        const step = steps[currentStep];
        document.getElementById('loading-message').textContent = step.message;
        updateProgress(step.progress);
        
        currentStep++;
      }, 800);
    }
    
    // Show error message
    function showError(message) {
      alert(message);
    }
    
    // Show toast notification
    function showToast(title, message, type) {
      // If your app has a toast notification system, implement it here
      console.log(`${title}: ${message} (${type})`);
      
      // Simple alert fallback
      if (type === 'error' || type === 'danger') {
        alert(`${title}: ${message}`);
      }
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Update Team Member Status</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  
  <style>
    :root {
      /* Primary colors */
      --primary: #6366f1;
      --primary-dark: #4f46e5;
      --primary-light: #c7d2fe;
      --primary-bg: #eef2ff;
      
      /* Secondary colors */
      --secondary: #f43f5e;
      --secondary-dark: #e11d48;
      --secondary-light: #fecdd3;
      --secondary-bg: #fff1f2;
      
      /* Success colors */
      --success: #10b981;
      --success-dark: #059669;
      --success-light: #a7f3d0;
      --success-bg: #ecfdf5;
      
      /* Warning colors */
      --warning: #f59e0b;
      --warning-dark: #d97706;
      --warning-light: #fde68a;
      --warning-bg: #fffbeb;
      
      /* Danger colors */
      --danger: #ef4444;
      --danger-dark: #dc2626;
      --danger-light: #fca5a5;
      --danger-bg: #fee2e2;
      
      /* Neutral colors */
      --gray-50: #f9fafb;
      --gray-100: #f3f4f6;
      --gray-200: #e5e7eb;
      --gray-300: #d1d5db;
      --gray-400: #9ca3af;
      --gray-500: #6b7280;
      --gray-600: #4b5563;
      --gray-700: #374151;
      --gray-800: #1f2937;
      --gray-900: #111827;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--gray-50);
      color: var(--gray-800);
    }
    
    .card {
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      border: none;
    }
    
    .card-header {
      background-color: white;
      border-bottom: 1px solid var(--gray-200);
      border-radius: 10px 10px 0 0 !important;
      padding: 15px 20px;
    }
    
    .form-control {
      border-radius: 6px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
    }
    
    .form-control:focus {
      box-shadow: 0 0 0 3px var(--primary-light);
      border-color: var(--primary);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary-dark);
    }
    
    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
    }
    
    .btn-outline-secondary {
      color: var(--gray-600);
      border-color: var(--gray-300);
    }
    
    .btn-outline-secondary:hover {
      background-color: var(--gray-100);
      color: var(--gray-800);
    }
    
    label {
      font-weight: 500;
      color: var(--gray-700);
      margin-bottom: 0.5rem;
    }
    
    .status-badge {
      font-size: 0.8rem;
      padding: 0.35em 0.65em;
      border-radius: 30px;
    }
    
    .status-active {
      background-color: var(--success-bg);
      color: var(--success-dark);
    }
    
    .status-training {
      background-color: var(--warning-bg);
      color: var(--warning-dark);
    }
    
    .status-pto {
      background-color: var(--primary-bg);
      color: var(--primary-dark);
    }
    
    .status-loa {
      background-color: var(--secondary-bg);
      color: var(--secondary-dark);
    }
    
    .status-inactive {
      background-color: var(--gray-100);
      color: var(--gray-600);
    }
    
    .team-member-item {
      margin-bottom: 10px;
      padding: 10px;
      border-radius: 8px;
      transition: all 0.3s ease;
      cursor: pointer;
      border: 1px solid var(--gray-200);
    }
    
    .team-member-item:hover {
      background-color: var(--gray-100);
      transform: translateY(-2px);
    }
    
    .team-member-item.selected {
      background-color: var(--primary-bg);
      border-color: var(--primary);
    }
    
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }
    
    .toast {
      min-width: 300px;
    }
    
    #loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }
    
    .search-box {
      position: relative;
      margin-bottom: 20px;
    }
    
    .search-box i {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      left: 15px;
      color: var(--gray-500);
    }
    
    .search-box input {
      padding-left: 40px;
    }
    
    .status-icon {
      font-size: 1.1rem;
      margin-right: 5px;
    }
    
    .form-tip {
      color: var(--gray-500);
      font-size: 0.85rem;
      margin-top: 5px;
    }
    
    .select-date-range {
      color: var(--primary-dark);
      cursor: pointer;
      text-decoration: underline;
    }
    
    .date-range-input {
      display: none;
      margin-top: 10px;
    }
    
    /* Animation for status update */
    @keyframes statusUpdate {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
    
    .status-update-animation {
      animation: statusUpdate 0.5s ease;
    }
  </style>
</head>
<body>
  <div class="container py-4">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
              <i class="fas fa-user-tag text-primary mr-2"></i>Update Team Member Status
            </h5>
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="window.close()">
              <i class="fas fa-times mr-1"></i>Close
            </button>
          </div>
          <div class="card-body">
            <!-- Search and Team Member Selection -->
            <div class="search-box">
              <i class="fas fa-search"></i>
              <input type="text" class="form-control" id="search-member" placeholder="Search team members..." onkeyup="searchTeamMembers()">
            </div>
            
            <div class="row">
              <div class="col-md-5">
                <div class="team-members-container">
                  <h6 class="mb-3">Select Team Member</h6>
                  <div id="team-members-list" class="pb-3">
                    <div class="text-center py-4">
                      <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                      </div>
                      <div class="mt-2">Loading team members...</div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="col-md-7">
                <!-- Status Update Form -->
                <div id="status-update-form" class="d-none">
                  <h6 class="mb-3">Update Status</h6>
                  <form id="updateStatusForm" onsubmit="return validateAndSubmit()">
                    <input type="hidden" id="teamMemberEmail" name="teamMemberEmail">
                    
                    <div class="text-center mb-4">
                      <img id="member-avatar" src="https://via.placeholder.com/100/6366f1/ffffff?text=TM" alt="Team Member" class="rounded-circle mb-3" width="100" height="100">
                      <h5 id="member-name">Team Member</h5>
                      <p id="member-role" class="text-muted">Role</p>
                      <div id="current-status-badge" class="badge status-badge status-active d-inline-block mb-3">Active</div>
                    </div>
                    
                    <div class="form-group">
                      <label for="newStatus">New Status</label>
                      <select class="form-control" id="newStatus" name="newStatus" required>
                        <option value="">Select Status</option>
                        <option value="Active">Active</option>
                        <option value="Training">Training</option>
                        <option value="PTO">PTO</option>
                        <option value="LOA">Leave of Absence</option>
                        <option value="Inactive">Inactive</option>
                      </select>
                    </div>
                    
                    <div class="form-group">
                      <label for="statusEffect">Status Takes Effect</label>
                      <select class="form-control" id="statusEffect" name="statusEffect" required>
                        <option value="immediately">Immediately</option>
                        <option value="date">From Specific Date</option>
                      </select>
                    </div>
                    
                    <div id="date-range-container" class="d-none">
                      <div class="form-row">
                        <div class="form-group col-md-6">
                          <label for="effectiveDate">Effective Date</label>
                          <input type="date" class="form-control" id="effectiveDate" name="effectiveDate">
                        </div>
                        <div class="form-group col-md-6">
                          <label for="endDate">End Date (Optional)</label>
                          <input type="date" class="form-control" id="endDate" name="endDate">
                        </div>
                      </div>
                    </div>
                    
                    <div class="form-group">
                      <label for="statusNotes">Notes</label>
                      <textarea class="form-control" id="statusNotes" name="statusNotes" rows="3" placeholder="Add any relevant notes about this status change..."></textarea>
                    </div>
                    
                    <div class="form-group custom-control custom-checkbox">
                      <input type="checkbox" class="custom-control-input" id="notifyTeamMember" name="notifyTeamMember">
                      <label class="custom-control-label" for="notifyTeamMember">Notify team member about status change</label>
                    </div>
                    
                    <div class="mt-4">
                      <button type="submit" class="btn btn-primary btn-block">
                        <i class="fas fa-save mr-1"></i>Update Status
                      </button>
                    </div>
                  </form>
                </div>
                
                <!-- No Selection State -->
                <div id="no-selection-state">
                  <div class="text-center py-5 text-muted">
                    <i class="fas fa-user-tag fa-4x mb-3"></i>
                    <h5>Select a Team Member</h5>
                    <p>Choose a team member from the list to update their status</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loading-overlay" style="display: none;">
    <div class="spinner-border text-primary" role="status">
      <span class="sr-only">Loading...</span>
    </div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container"></div>

  <!-- Bootstrap JS, Popper.js, and jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  
  <script>
    // Global variables
    let teamMembers = [];
    let selectedMember = null;
    
    // Document ready function
    document.addEventListener('DOMContentLoaded', function() {
      // Load team members
      loadTeamMembers();
      
      // Set today's date as the default for effective date
      const today = new Date().toISOString().split('T')[0];
      document.getElementById('effectiveDate').value = today;
      
      // Toggle date range container based on status effect selection
      document.getElementById('statusEffect').addEventListener('change', function() {
        const dateRangeContainer = document.getElementById('date-range-container');
        if (this.value === 'date') {
          dateRangeContainer.classList.remove('d-none');
          document.getElementById('effectiveDate').required = true;
        } else {
          dateRangeContainer.classList.add('d-none');
          document.getElementById('effectiveDate').required = false;
          document.getElementById('effectiveDate').value = today;
          document.getElementById('endDate').value = '';
        }
      });
    });
    
    // Load team members
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(function(members) {
          teamMembers = members;
          displayTeamMembers(members);
        })
        .withFailureHandler(function(error) {
          document.getElementById('team-members-list').innerHTML = `
            <div class="alert alert-danger">
              Failed to load team members: ${error}
            </div>
          `;
        })
        .getTeamMembers(false); // false to get all members including inactive ones
    }
    
    // Display team members
    function displayTeamMembers(members) {
      const container = document.getElementById('team-members-list');
      
      if (!members || members.length === 0) {
        container.innerHTML = `
          <div class="alert alert-info">
            No team members found. Add team members first.
          </div>
        `;
        return;
      }
      
      container.innerHTML = '';
      
      // Sort members by name
      members.sort((a, b) => {
        const nameA = `${a.firstName} ${a.lastName}`.toLowerCase();
        const nameB = `${b.firstName} ${b.lastName}`.toLowerCase();
        return nameA.localeCompare(nameB);
      });
      
      members.forEach(member => {
        // Create status badge
        let statusClass = 'status-active';
        let statusIcon = 'check-circle';
        
        switch (member.status) {
          case 'Active':
            statusClass = 'status-active';
            statusIcon = 'check-circle';
            break;
          case 'Training':
            statusClass = 'status-training';
            statusIcon = 'graduation-cap';
            break;
          case 'PTO':
            statusClass = 'status-pto';
            statusIcon = 'calendar';
            break;
          case 'LOA':
            statusClass = 'status-loa';
            statusIcon = 'clock';
            break;
          case 'Inactive':
            statusClass = 'status-inactive';
            statusIcon = 'times-circle';
            break;
        }
        
        const memberItem = document.createElement('div');
        memberItem.className = 'team-member-item';
        memberItem.dataset.email = member.email;
        memberItem.innerHTML = `
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <div class="font-weight-bold">${member.firstName} ${member.lastName}</div>
              <div class="text-muted small">${member.role || 'No role'}</div>
            </div>
            <div class="badge status-badge ${statusClass}">
              <i class="fas fa-${statusIcon} status-icon"></i>${member.status}
            </div>
          </div>
        `;
        
        memberItem.addEventListener('click', function() {
          selectTeamMember(member);
        });
        
        container.appendChild(memberItem);
      });
    }
    
    // Search team members
    function searchTeamMembers() {
      const searchTerm = document.getElementById('search-member').value.toLowerCase();
      
      // If search is empty, show all
      if (!searchTerm) {
        displayTeamMembers(teamMembers);
        return;
      }
      
      // Filter members
      const filteredMembers = teamMembers.filter(member => {
        const fullName = `${member.firstName} ${member.lastName}`.toLowerCase();
        const email = member.email.toLowerCase();
        const role = (member.role || '').toLowerCase();
        
        return fullName.includes(searchTerm) || 
               email.includes(searchTerm) || 
               role.includes(searchTerm);
      });
      
      displayTeamMembers(filteredMembers);
    }
    
    // Select team member
    function selectTeamMember(member) {
      selectedMember = member;
      
      // Update UI to show selected member
      const allMemberItems = document.querySelectorAll('.team-member-item');
      allMemberItems.forEach(item => {
        item.classList.remove('selected');
      });
      
      const selectedItem = document.querySelector(`.team-member-item[data-email="${member.email}"]`);
      if (selectedItem) {
        selectedItem.classList.add('selected');
      }
      
      // Show status update form and hide no selection state
      document.getElementById('status-update-form').classList.remove('d-none');
      document.getElementById('no-selection-state').classList.add('d-none');
      
      // Update form with member details
      document.getElementById('teamMemberEmail').value = member.email;
      document.getElementById('member-name').textContent = `${member.firstName} ${member.lastName}`;
      document.getElementById('member-role').textContent = member.role || 'No role assigned';
      
      // Update current status badge
      const currentStatusBadge = document.getElementById('current-status-badge');
      currentStatusBadge.textContent = member.status;
      
      // Remove all status classes and add the correct one
      currentStatusBadge.className = 'badge status-badge';
      switch (member.status) {
        case 'Active':
          currentStatusBadge.classList.add('status-active');
          break;
        case 'Training':
          currentStatusBadge.classList.add('status-training');
          break;
        case 'PTO':
          currentStatusBadge.classList.add('status-pto');
          break;
        case 'LOA':
          currentStatusBadge.classList.add('status-loa');
          break;
        case 'Inactive':
          currentStatusBadge.classList.add('status-inactive');
          break;
      }
      
      // Reset form
      document.getElementById('updateStatusForm').reset();
      document.getElementById('newStatus').value = '';
      document.getElementById('statusEffect').value = 'immediately';
      document.getElementById('date-range-container').classList.add('d-none');
      
      // Set today's date
      const today = new Date().toISOString().split('T')[0];
      document.getElementById('effectiveDate').value = today;
    }
    
    // Validate and submit form
    function validateAndSubmit() {
      const form = document.getElementById('updateStatusForm');
      
      // Check if form is valid
      if (!form.checkValidity()) {
        form.reportValidity();
        return false;
      }
      
      // Show loading overlay
      document.getElementById('loading-overlay').style.display = 'flex';
      
      // Get form data
      const formData = {
        email: document.getElementById('teamMemberEmail').value,
        newStatus: document.getElementById('newStatus').value,
        statusEffect: document.getElementById('statusEffect').value,
        effectiveDate: document.getElementById('statusEffect').value === 'date' ? 
                       document.getElementById('effectiveDate').value : null,
        endDate: document.getElementById('statusEffect').value === 'date' ? 
                 document.getElementById('endDate').value : null,
        notes: document.getElementById('statusNotes').value,
        notifyMember: document.getElementById('notifyTeamMember').checked
      };
      
      // Submit the form data
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loading-overlay').style.display = 'none';
          
          if (result.success) {
            // Show success message
            showToast('Success', result.message || 'Status updated successfully', 'success');
            
            // Update local data
            const updatedMember = teamMembers.find(m => m.email === formData.email);
            if (updatedMember) {
              updatedMember.status = formData.newStatus;
              
              // Apply animation to the status badge
              document.getElementById('current-status-badge').classList.add('status-update-animation');
              
              // Update UI
              setTimeout(() => {
                displayTeamMembers(teamMembers);
                selectTeamMember(updatedMember);
              }, 500);
            }
          } else {
            showToast('Error', result.message || 'Failed to update status', 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loading-overlay').style.display = 'none';
          showToast('Error', error.message || 'An error occurred', 'danger');
        })
        .updateTeamMemberStatus(formData);
      
      return false;
    }
    
    // Show toast notification
    function showToast(title, message, type) {
      const toastContainer = document.querySelector('.toast-container');
      const toastId = 'toast-' + Date.now();
      
      const toastHtml = `
        <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-delay="5000">
          <div class="toast-header bg-${type} text-white">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : 'info-circle'} mr-2"></i>
            <strong class="mr-auto">${title}</strong>
            <small>Just now</small>
            <button type="button" class="ml-2 mb-1 close text-white" data-dismiss="toast" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="toast-body">
            ${message}
          </div>
        </div>
      `;
      
      toastContainer.insertAdjacentHTML('beforeend', toastHtml);
      $(`#${toastId}`).toast('show');
      
      // Remove toast when hidden
      $(`#${toastId}`).on('hidden.bs.toast', function() {
        this.remove();
      });
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Team Management</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  
  <style>
    :root {
      /* Primary colors */
      --primary: #6366f1;
      --primary-dark: #4f46e5;
      --primary-light: #c7d2fe;
      --primary-bg: #eef2ff;
      
      /* Secondary colors */
      --secondary: #f43f5e;
      --secondary-dark: #e11d48;
      --secondary-light: #fecdd3;
      --secondary-bg: #fff1f2;
      
      /* Success colors */
      --success: #10b981;
      --success-dark: #059669;
      --success-light: #a7f3d0;
      --success-bg: #ecfdf5;
      
      /* Warning colors */
      --warning: #f59e0b;
      --warning-dark: #d97706;
      --warning-light: #fde68a;
      --warning-bg: #fffbeb;
      
      /* Danger colors */
      --danger: #ef4444;
      --danger-dark: #dc2626;
      --danger-light: #fca5a5;
      --danger-bg: #fee2e2;
      
      /* Neutral colors */
      --gray-50: #f9fafb;
      --gray-100: #f3f4f6;
      --gray-200: #e5e7eb;
      --gray-300: #d1d5db;
      --gray-400: #9ca3af;
      --gray-500: #6b7280;
      --gray-600: #4b5563;
      --gray-700: #374151;
      --gray-800: #1f2937;
      --gray-900: #111827;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--gray-50);
      color: var(--gray-800);
    }
    
    .card {
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      border: none;
      margin-bottom: 20px;
    }
    
    .card-header {
      background-color: white;
      border-bottom: 1px solid var(--gray-200);
      border-radius: 10px 10px 0 0 !important;
      padding: 15px 20px;
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary-dark);
    }
    
    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
    }
    
    .btn-outline-secondary {
      color: var(--gray-600);
      border-color: var(--gray-300);
    }
    
    .btn-outline-secondary:hover {
      background-color: var(--gray-100);
      color: var(--gray-800);
    }
    
    .team-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 20px;
    }
    
    .team-member-card {
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      background-color: white;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    
    .team-member-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
    }
    
    .team-member-header {
      padding: 20px;
      text-align: center;
      position: relative;
    }
    
    .team-member-status {
      position: absolute;
      top: 15px;
      right: 15px;
      font-size: 0.8rem;
      padding: 0.25em 0.75em;
      border-radius: 20px;
    }
    
    .status-active {
      background-color: var(--success-bg);
      color: var(--success-dark);
    }
    
    .status-training {
      background-color: var(--warning-bg);
      color: var(--warning-dark);
    }
    
    .status-pto {
      background-color: var(--primary-bg);
      color: var(--primary-dark);
    }
    
    .status-loa {
      background-color: var(--secondary-bg);
      color: var(--secondary-dark);
    }
    
    .status-inactive {
      background-color: var(--gray-100);
      color: var(--gray-600);
    }
    
    .avatar-circle {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background-color: var(--primary-bg);
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2.5rem;
      font-weight: 600;
      margin: 0 auto 15px;
      border: 3px solid var(--primary-light);
    }
    
    .team-member-body {
      padding: 15px 20px;
    }
    
    .team-member-info {
      margin-bottom: 15px;
    }
    
    .info-label {
      color: var(--gray-500);
      font-size: 0.85rem;
      margin-bottom: 3px;
    }
    
    .info-value {
      font-weight: 500;
    }
    
    .team-member-actions {
      padding: 10px 20px 20px;
      display: flex;
      justify-content: space-between;
    }
    
    .search-filters-card {
      margin-bottom: 20px;
    }
    
    .search-box {
      position: relative;
    }
    
    .search-box i {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      left: 15px;
      color: var(--gray-500);
    }
    
    .search-box input {
      padding-left: 40px;
      border-radius: 6px;
      border: 1px solid var(--gray-300);
    }
    
    .team-metrics-card {
      margin-bottom: 20px;
    }
    
    .metric-value {
      font-size: 1.75rem;
      font-weight: 600;
      color: var(--primary);
    }
    
    .metric-label {
      color: var(--gray-600);
      font-size: 0.85rem;
    }
    
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }
    
    .toast {
      min-width: 300px;
    }
    
    #loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }
    
    .team-member-card.list-view {
      display: flex;
      padding: 10px;
      margin-bottom: 10px;
    }
    
    .team-member-card.list-view .avatar-circle {
      width: 50px;
      height: 50px;
      font-size: 1.25rem;
      margin: 0 15px 0 0;
    }
    
    .team-member-card.list-view .team-member-header {
      padding: 0;
      text-align: left;
      display: flex;
      align-items: center;
      width: 40%;
    }
    
    .team-member-card.list-view .team-member-info {
      display: flex;
      flex-grow: 1;
      margin-bottom: 0;
    }
    
    .team-member-card.list-view .team-member-status {
      position: relative;
      top: auto;
      right: auto;
      margin-left: 10px;
    }
    
    .team-member-card.list-view .team-member-body {
      display: flex;
      align-items: center;
      padding: 0;
      flex-grow: 1;
    }
    
    .team-member-card.list-view .info-item {
      width: 33%;
      padding: 0 10px;
    }
    
    .team-member-card.list-view .team-member-actions {
      padding: 0;
      width: 120px;
      justify-content: flex-end;
    }
    
    .empty-state {
      text-align: center;
      padding: 40px 20px;
      background-color: var(--gray-50);
      border-radius: 10px;
    }
    
    .empty-state-icon {
      font-size: 3rem;
      color: var(--gray-400);
      margin-bottom: 10px;
    }
    
    .btn-icon {
      width: 36px;
      height: 36px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      background-color: var(--gray-100);
      color: var(--gray-700);
      border: none;
    }
    
    .btn-icon:hover {
      background-color: var(--primary-bg);
      color: var(--primary);
    }
    
    .role-badge {
      display: inline-block;
      font-size: 0.75rem;
      padding: 0.25em 0.75em;
      border-radius: 20px;
      background-color: var(--gray-100);
      color: var(--gray-700);
      margin-top: 5px;
    }
  </style>
</head>
<body>
  <div class="container py-4">
    <h1 class="mb-4"><i class="fas fa-users text-primary mr-2"></i>Team Management</h1>
    
    <!-- Search and Filters -->
    <div class="card search-filters-card">
      <div class="card-body">
        <div class="row">
          <div class="col-md-4">
            <div class="search-box">
              <i class="fas fa-search"></i>
              <input type="text" class="form-control" id="team-search" placeholder="Search team members..." onkeyup="searchTeamMembers()">
            </div>
          </div>
          <div class="col-md-5">
            <div class="d-flex">
              <div class="mr-3">
                <label for="status-filter" class="small text-muted mb-1">Status</label>
                <select class="form-control form-control-sm" id="status-filter" onchange="applyFilters()">
                  <option value="all">All Statuses</option>
                  <option value="Active">Active</option>
                  <option value="Training">Training</option>
                  <option value="PTO">PTO</option>
                  <option value="LOA">Leave of Absence</option>
                  <option value="Inactive">Inactive</option>
                </select>
              </div>
              <div>
                <label for="role-filter" class="small text-muted mb-1">Role</label>
                <select class="form-control form-control-sm" id="role-filter" onchange="applyFilters()">
                  <option value="all">All Roles</option>
                  <!-- Roles will be populated dynamically -->
                </select>
              </div>
            </div>
          </div>
          <div class="col-md-3 d-flex align-items-end justify-content-end">
            <div class="btn-group btn-group-sm" role="group">
              <button type="button" class="btn btn-outline-secondary active" id="grid-view-btn" onclick="setViewMode('grid')">
                <i class="fas fa-th-large"></i>
              </button>
              <button type="button" class="btn btn-outline-secondary" id="list-view-btn" onclick="setViewMode('list')">
                <i class="fas fa-list"></i>
              </button>
            </div>
            <button class="btn btn-primary btn-sm ml-2" onclick="addTeamMember()">
              <i class="fas fa-plus mr-1"></i>Add Member
            </button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Team Metrics -->
    <div class="card team-metrics-card">
      <div class="card-body">
        <div class="row">
          <div class="col-md-3 col-6 text-center mb-3 mb-md-0">
            <div class="metric-value" id="total-members">-</div>
            <div class="metric-label">Total Team Members</div>
          </div>
          <div class="col-md-3 col-6 text-center mb-3 mb-md-0">
            <div class="metric-value text-success" id="active-members">-</div>
            <div class="metric-label">Active Members</div>
          </div>
          <div class="col-md-3 col-6 text-center mb-3 mb-md-0">
            <div class="metric-value text-warning" id="training-members">-</div>
            <div class="metric-label">In Training</div>
          </div>
          <div class="col-md-3 col-6 text-center">
            <div class="metric-value text-info" id="pto-loa-members">-</div>
            <div class="metric-label">PTO/LOA</div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Team Members -->
    <div id="team-members-container">
      <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
          <span class="sr-only">Loading...</span>
        </div>
        <div class="mt-3">Loading team members...</div>
      </div>
    </div>
  </div>
  
  <!-- Team Member View Modal -->
  <div class="modal fade" id="viewTeamMemberModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="member-modal-title">Team Member Details</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="row">
            <div class="col-md-4 text-center mb-4 mb-md-0">
              <div class="avatar-circle mx-auto" id="member-modal-avatar">AB</div>
              <h5 class="mt-3" id="member-modal-name">Team Member Name</h5>
              <div class="badge status-badge status-active" id="member-modal-status">Active</div>
                            <div class="role-badge mt-2" id="member-modal-role">Team Role</div>
            </div>
            <div class="col-md-8">
              <div class="member-details">
                <div class="row mb-3">
                  <div class="col-md-6">
                    <div class="info-label">Email</div>
                    <div class="info-value" id="member-modal-email">email@example.com</div>
                  </div>
                  <div class="col-md-6">
                    <div class="info-label">Phone</div>
                    <div class="info-value" id="member-modal-phone">-</div>
                  </div>
                </div>
                
                <div class="row mb-3">
                  <div class="col-md-6">
                    <div class="info-label">Department</div>
                    <div class="info-value" id="member-modal-department">-</div>
                  </div>
                  <div class="col-md-6">
                    <div class="info-label">Start Date</div>
                    <div class="info-value" id="member-modal-start-date">-</div>
                  </div>
                </div>
                
                <hr>
                
                <div class="row">
                  <div class="col-12">
                    <div class="info-label">Notes</div>
                    <div class="info-value" id="member-modal-notes">-</div>
                  </div>
                </div>
                
                <hr>
                
                <div class="row">
                  <div class="col-md-6">
                    <div class="info-label">Last One-on-One</div>
                    <div class="info-value" id="member-modal-last-one-on-one">-</div>
                  </div>
                  <div class="col-md-6">
                    <div class="info-label">Action Items</div>
                    <div class="info-value" id="member-modal-action-items">-</div>
                  </div>
                </div>
                
                <div class="row mt-3">
                  <div class="col-md-6">
                    <div class="info-label">Status History</div>
                    <div id="member-modal-status-history" class="small">
                      <div class="text-center py-2">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                          <span class="sr-only">Loading...</span>
                        </div>
                        <span class="ml-2">Loading history...</span>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="info-label">Team Metrics</div>
                    <div id="member-modal-metrics">
                      <!-- Will be filled with metrics data -->
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" onclick="scheduleOneOnOne()" id="schedule-one-on-one-btn">
            <i class="fas fa-calendar-plus mr-1"></i>Schedule 1:1
          </button>
          <button type="button" class="btn btn-primary" onclick="editTeamMember()" id="edit-member-btn">
            <i class="fas fa-edit mr-1"></i>Edit Member
          </button>
          <button type="button" class="btn btn-warning" onclick="updateTeamMemberStatus()" id="update-status-btn">
            <i class="fas fa-user-tag mr-1"></i>Update Status
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loading-overlay" style="display: none;">
    <div class="spinner-border text-primary" role="status">
      <span class="sr-only">Loading...</span>
    </div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container"></div>

  <!-- Bootstrap JS, Popper.js, and jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  
  <script>
    // Global variables
    let teamMembers = [];
    let allRoles = [];
    let viewMode = 'grid';
    let selectedMember = null;
    
    // Document ready function
    document.addEventListener('DOMContentLoaded', function() {
      // Load team members
      loadTeamMembers();
      
      // Initialize UI
      initializeUI();
    });
    
    // Initialize UI elements
    function initializeUI() {
      // Set current date and time for display in the footer if needed
      const now = new Date();
      
      // Get the current user dynamically
      getCurrentUser();
    }
    
    // Get the current user
    function getCurrentUser() {
      google.script.run
        .withSuccessHandler(function(userInfo) {
          // Use the user info as needed
          console.log('Current user:', userInfo);
          // Note: We're not displaying this anywhere to avoid hardcoding
        })
        .withFailureHandler(function(error) {
          console.error('Error getting current user:', error);
        })
        .getCurrentUserInfo();
    }
    
    // Load team members
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(function(members) {
          teamMembers = members;
          
          // Extract all unique roles and populate the filter
          extractRoles(members);
          
          // Update metrics
          updateTeamMetrics(members);
          
          // Display team members
          displayTeamMembers(members);
        })
        .withFailureHandler(function(error) {
          document.getElementById('team-members-container').innerHTML = `
            <div class="alert alert-danger">
              <i class="fas fa-exclamation-triangle mr-2"></i>
              Failed to load team members: ${error}
            </div>
          `;
        })
        .getTeamMembers();
    }
    
    // Extract unique roles from team members
    function extractRoles(members) {
      allRoles = [...new Set(members.map(member => member.role).filter(role => role))];
      
      // Sort roles alphabetically
      allRoles.sort();
      
      // Populate role filter dropdown
      const roleFilter = document.getElementById('role-filter');
      
      // Clear existing options except the first one
      while (roleFilter.options.length > 1) {
        roleFilter.remove(1);
      }
      
      // Add roles to dropdown
      allRoles.forEach(role => {
        const option = document.createElement('option');
        option.value = role;
        option.text = role;
        roleFilter.add(option);
      });
    }
    
    // Update team metrics
    function updateTeamMetrics(members) {
      const totalMembers = members.length;
      const activeMembers = members.filter(m => m.status === 'Active').length;
      const trainingMembers = members.filter(m => m.status === 'Training').length;
      const ptoLoaMembers = members.filter(m => m.status === 'PTO' || m.status === 'LOA').length;
      
      document.getElementById('total-members').textContent = totalMembers;
      document.getElementById('active-members').textContent = activeMembers;
      document.getElementById('training-members').textContent = trainingMembers;
      document.getElementById('pto-loa-members').textContent = ptoLoaMembers;
    }
    
    // Display team members
    function displayTeamMembers(members) {
      const container = document.getElementById('team-members-container');
      
      if (!members || members.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-users-slash"></i>
            </div>
            <h4>No Team Members Found</h4>
            <p class="text-muted">Add your first team member to get started</p>
            <button class="btn btn-primary mt-3" onclick="addTeamMember()">
              <i class="fas fa-plus mr-1"></i>Add Team Member
            </button>
          </div>
        `;
        return;
      }
      
      // Sort members alphabetically by name
      members.sort((a, b) => {
        const nameA = `${a.firstName} ${a.lastName}`.toLowerCase();
        const nameB = `${b.firstName} ${b.lastName}`.toLowerCase();
        return nameA.localeCompare(nameB);
      });
      
      // Determine view mode
      if (viewMode === 'grid') {
        // Grid view
        container.innerHTML = '<div class="team-grid" id="team-grid"></div>';
        const grid = document.getElementById('team-grid');
        
        members.forEach(member => {
          // Get initials for avatar
          const initials = getInitials(member.firstName, member.lastName);
          
          // Determine status class
          const statusClass = getStatusClass(member.status);
          
          const card = document.createElement('div');
          card.className = 'team-member-card';
          card.innerHTML = `
            <div class="team-member-header">
              <div class="badge team-member-status ${statusClass}">${member.status}</div>
              <div class="avatar-circle">${initials}</div>
              <h5>${member.firstName} ${member.lastName}</h5>
              <div class="role-badge">${member.role || 'No role assigned'}</div>
            </div>
            <div class="team-member-body">
              <div class="team-member-info">
                <div class="info-label">Email</div>
                <div class="info-value">${member.email}</div>
              </div>
              <div class="row">
                <div class="col-6">
                  <div class="info-label">Start Date</div>
                  <div class="info-value small">${formatDate(member.startDate) || '-'}</div>
                </div>
                <div class="col-6">
                  <div class="info-label">Department</div>
                  <div class="info-value small">${member.department || '-'}</div>
                </div>
              </div>
            </div>
            <div class="team-member-actions">
              <button class="btn btn-sm btn-outline-primary" onclick="viewTeamMember('${member.email}')">
                <i class="fas fa-eye mr-1"></i>View
              </button>
              <div>
                <button class="btn-icon mr-1" onclick="scheduleOneOnOneForMember('${member.email}')" title="Schedule One-on-One">
                  <i class="fas fa-calendar-plus"></i>
                </button>
                <button class="btn-icon" onclick="updateStatusForMember('${member.email}')" title="Update Status">
                  <i class="fas fa-user-tag"></i>
                </button>
              </div>
            </div>
          `;
          
          grid.appendChild(card);
        });
      } else {
        // List view
        container.innerHTML = '<div id="team-list"></div>';
        const list = document.getElementById('team-list');
        
        members.forEach(member => {
          // Get initials for avatar
          const initials = getInitials(member.firstName, member.lastName);
          
          // Determine status class
          const statusClass = getStatusClass(member.status);
          
          const card = document.createElement('div');
          card.className = 'team-member-card list-view';
          card.innerHTML = `
            <div class="team-member-header">
              <div class="avatar-circle">${initials}</div>
              <div>
                <h6 class="mb-0">${member.firstName} ${member.lastName}</h6>
                <small class="text-muted">${member.role || 'No role assigned'}</small>
                <div class="badge team-member-status ${statusClass}">${member.status}</div>
              </div>
            </div>
            <div class="team-member-body">
              <div class="info-item">
                <div class="info-label">Email</div>
                <div class="info-value small">${member.email}</div>
              </div>
              <div class="info-item">
                <div class="info-label">Start Date</div>
                <div class="info-value small">${formatDate(member.startDate) || '-'}</div>
              </div>
              <div class="info-item">
                <div class="info-label">Department</div>
                <div class="info-value small">${member.department || '-'}</div>
              </div>
            </div>
            <div class="team-member-actions">
              <button class="btn-icon mr-1" onclick="viewTeamMember('${member.email}')" title="View Details">
                <i class="fas fa-eye"></i>
              </button>
              <button class="btn-icon mr-1" onclick="scheduleOneOnOneForMember('${member.email}')" title="Schedule One-on-One">
                <i class="fas fa-calendar-plus"></i>
              </button>
              <button class="btn-icon" onclick="updateStatusForMember('${member.email}')" title="Update Status">
                <i class="fas fa-user-tag"></i>
              </button>
            </div>
          `;
          
          list.appendChild(card);
        });
      }
    }
    
    // Get initials from name
    function getInitials(firstName, lastName) {
      let initials = '';
      if (firstName) initials += firstName.charAt(0).toUpperCase();
      if (lastName) initials += lastName.charAt(0).toUpperCase();
      return initials || 'TM';
    }
    
    // Get status class for badge
    function getStatusClass(status) {
      switch(status) {
        case 'Active': return 'status-active';
        case 'Training': return 'status-training';
        case 'PTO': return 'status-pto';
        case 'LOA': return 'status-loa';
        case 'Inactive': return 'status-inactive';
        default: return 'status-active';
      }
    }
    
    // Format date for display
    function formatDate(dateString) {
      if (!dateString) return '';
      
      try {
        const date = new Date(dateString);
        return date.toLocaleDateString();
      } catch(e) {
        return dateString;
      }
    }
    
    // Search team members
    function searchTeamMembers() {
      applyFilters();
    }
    
    // Apply filters
    function applyFilters() {
      const searchTerm = document.getElementById('team-search').value.toLowerCase();
      const statusFilter = document.getElementById('status-filter').value;
      const roleFilter = document.getElementById('role-filter').value;
      
      let filteredMembers = [...teamMembers];
      
      // Apply search filter
      if (searchTerm) {
        filteredMembers = filteredMembers.filter(member => {
          const fullName = `${member.firstName} ${member.lastName}`.toLowerCase();
          const email = member.email.toLowerCase();
          const department = (member.department || '').toLowerCase();
          
          return fullName.includes(searchTerm) || 
                 email.includes(searchTerm) || 
                 department.includes(searchTerm);
        });
      }
      
      // Apply status filter
      if (statusFilter !== 'all') {
        filteredMembers = filteredMembers.filter(member => member.status === statusFilter);
      }
      
      // Apply role filter
      if (roleFilter !== 'all') {
        filteredMembers = filteredMembers.filter(member => member.role === roleFilter);
      }
      
      // Update metrics for filtered members
      updateTeamMetrics(filteredMembers);
      
      // Display filtered members
      displayTeamMembers(filteredMembers);
    }
    
    // Set view mode (grid or list)
    function setViewMode(mode) {
      viewMode = mode;
      
      // Update active button
      if (mode === 'grid') {
        document.getElementById('grid-view-btn').classList.add('active');
        document.getElementById('list-view-btn').classList.remove('active');
      } else {
        document.getElementById('grid-view-btn').classList.remove('active');
        document.getElementById('list-view-btn').classList.add('active');
      }
      
      // Re-display team members
      applyFilters();
    }
    
    // View team member details
    function viewTeamMember(email) {
      // Find the team member
      const member = teamMembers.find(m => m.email === email);
      if (!member) {
        showToast('Error', 'Team member not found', 'danger');
        return;
      }
      
      selectedMember = member;
      
      // Update modal with member details
      document.getElementById('member-modal-title').textContent = `${member.firstName} ${member.lastName}`;
      document.getElementById('member-modal-name').textContent = `${member.firstName} ${member.lastName}`;
      document.getElementById('member-modal-avatar').textContent = getInitials(member.firstName, member.lastName);
      
      // Update status badge
      const statusBadge = document.getElementById('member-modal-status');
      statusBadge.textContent = member.status;
      statusBadge.className = `badge status-badge ${getStatusClass(member.status)}`;
      
      // Update other fields
      document.getElementById('member-modal-role').textContent = member.role || 'No role assigned';
      document.getElementById('member-modal-email').textContent = member.email;
      document.getElementById('member-modal-phone').textContent = member.phone || '-';
      document.getElementById('member-modal-department').textContent = member.department || '-';
      document.getElementById('member-modal-start-date').textContent = formatDate(member.startDate) || '-';
      document.getElementById('member-modal-notes').textContent = member.notes || 'No notes available';
      
      // Load additional information
      loadMemberOneOnOneInfo(email);
      loadMemberStatusHistory(email);
      loadMemberMetrics(email);
      
      // Show the modal
      $('#viewTeamMemberModal').modal('show');
    }
    
    // Load one-on-one information for team member
    function loadMemberOneOnOneInfo(email) {
      // Reset fields
      document.getElementById('member-modal-last-one-on-one').innerHTML = 
        '<div class="spinner-border spinner-border-sm text-primary" role="status"><span class="sr-only">Loading...</span></div>';
      document.getElementById('member-modal-action-items').innerHTML = 
        '<div class="spinner-border spinner-border-sm text-primary" role="status"><span class="sr-only">Loading...</span></div>';
      
      // Get one-on-one info
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            // Update last one-on-one
            if (result.lastSession) {
              document.getElementById('member-modal-last-one-on-one').innerHTML = `
                <div>${formatDate(result.lastSession.date)}</div>
                <small class="text-${result.needsSession ? 'danger' : 'success'}">
                  ${result.needsSession ? 'Needs session' : 'Up to date'}
                </small>
              `;
            } else {
              document.getElementById('member-modal-last-one-on-one').textContent = 'No previous sessions';
            }
            
            // Update action items
            if (result.actionItems && result.actionItems.length > 0) {
              const actionItemsList = document.createElement('ul');
              actionItemsList.className = 'mb-0 pl-3';
              
              result.actionItems.forEach(item => {
                const li = document.createElement('li');
                li.innerHTML = `
                  <span>${item.description}</span>
                  <small class="text-${item.status === 'Completed' ? 'success' : 'warning'}">
                    (${item.status})
                  </small>
                `;
                actionItemsList.appendChild(li);
              });
              
              document.getElementById('member-modal-action-items').innerHTML = '';
              document.getElementById('member-modal-action-items').appendChild(actionItemsList);
            } else {
              document.getElementById('member-modal-action-items').textContent = 'No action items';
            }
          } else {
            document.getElementById('member-modal-last-one-on-one').textContent = 'Error loading data';
            document.getElementById('member-modal-action-items').textContent = 'Error loading data';
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('member-modal-last-one-on-one').textContent = 'Error loading data';
          document.getElementById('member-modal-action-items').textContent = 'Error loading data';
        })
        .getTeamMemberOneOnOneInfo(email);
    }
    
    // Load status history for team member
    function loadMemberStatusHistory(email) {
      document.getElementById('member-modal-status-history').innerHTML = `
        <div class="text-center py-2">
          <div class="spinner-border spinner-border-sm text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
          <span class="ml-2">Loading history...</span>
        </div>
      `;
      
      google.script.run
        .withSuccessHandler(function(history) {
          if (history && history.length > 0) {
            const historyList = document.createElement('ul');
            historyList.className = 'list-unstyled mb-0';
            
            history.forEach(item => {
              const li = document.createElement('li');
              li.className = 'mb-2';
              li.innerHTML = `
                <div><span class="badge ${getStatusClass(item.status)}">${item.status}</span></div>
                <small class="text-muted">${formatDate(item.date)} - ${item.updatedBy || 'System'}</small>
                ${item.notes ? `<small class="d-block">${item.notes}</small>` : ''}
              `;
              historyList.appendChild(li);
            });
            
            document.getElementById('member-modal-status-history').innerHTML = '';
            document.getElementById('member-modal-status-history').appendChild(historyList);
          } else {
            document.getElementById('member-modal-status-history').textContent = 'No status history available';
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('member-modal-status-history').textContent = 'Error loading status history';
        })
        .getTeamMemberStatusHistory(email);
    }
    
    // Load metrics for team member
    function loadMemberMetrics(email) {
      document.getElementById('member-modal-metrics').innerHTML = `
        <div class="text-center py-2">
          <div class="spinner-border spinner-border-sm text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
          <span class="ml-2">Loading metrics...</span>
        </div>
      `;
      
      google.script.run
        .withSuccessHandler(function(metrics) {
          if (metrics) {
            document.getElementById('member-modal-metrics').innerHTML = `
              <div class="row">
                <div class="col-6">
                  <div class="small text-muted">1:1 Sessions</div>
                  <div class="font-weight-bold">${metrics.sessionCount || 0}</div>
                </div>
                <div class="col-6">
                  <div class="small text-muted">Completed Action Items</div>
                  <div class="font-weight-bold">${metrics.completedActionItems || 0}</div>
                </div>
              </div>
              <div class="row mt-2">
                <div class="col-6">
                  <div class="small text-muted">Avg. Session Duration</div>
                  <div class="font-weight-bold">${metrics.avgSessionDuration || '-'}</div>
                </div>
                <div class="col-6">
                  <div class="small text-muted">Last Status Change</div>
                  <div class="font-weight-bold">${formatDate(metrics.lastStatusChange) || '-'}</div>
                </div>
              </div>
            `;
          } else {
            document.getElementById('member-modal-metrics').textContent = 'No metrics available';
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('member-modal-metrics').textContent = 'Error loading metrics';
        })
        .getTeamMemberMetrics(email);
    }
    
    // Schedule one-on-one for a member
    function scheduleOneOnOneForMember(email) {
      google.script.run.createOneOnOneSession(email);
    }
    
    // Schedule one-on-one for selected member
    function scheduleOneOnOne() {
      if (selectedMember) {
        scheduleOneOnOneForMember(selectedMember.email);
      }
    }
    
    // Update status for a member
    function updateStatusForMember(email) {
      google.script.run.updateTeamMemberStatus(email);
    }
    
    // Update status for selected member
    function updateTeamMemberStatus() {
      if (selectedMember) {
        updateStatusForMember(selectedMember.email);
      }
    }
    
    // Edit team member
    function editTeamMember() {
      if (selectedMember) {
        google.script.run.editTeamMember(selectedMember.email);
      }
    }
    
    // Add new team member
    function addTeamMember() {
      google.script.run.addTeamMember();
    }
    
    // Show toast notification
    function showToast(title, message, type) {
      const toastContainer = document.querySelector('.toast-container');
      const toastId = 'toast-' + Date.now();
      
      const toastHtml = `
        <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-delay="5000">
          <div class="toast-header bg-${type} text-white">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : 'info-circle'} mr-2"></i>
            <strong class="mr-auto">${title}</strong>
            <small>Just now</small>
            <button type="button" class="ml-2 mb-1 close text-white" data-dismiss="toast" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="toast-body">
            ${message}
          </div>
        </div>
      `;
      
      toastContainer.insertAdjacentHTML('beforeend', toastHtml);
      $(`#${toastId}`).toast('show');
      
      // Remove toast when hidden
      $(`#${toastId}`).on('hidden.bs.toast', function() {
        this.remove();
      });
    }
    
    // Refresh team data
    function refreshTeamData() {
      document.getElementById('team-members-container').innerHTML = `
        <div class="text-center py-5">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
          <div class="mt-3">Refreshing team data...</div>
        </div>
      `;
      
      loadTeamMembers();
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Error Log Viewer</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <style>
    body { 
      padding: 15px; 
      font-family: Arial, sans-serif; 
      background-color: #f9f9f9;
    }
    .header { 
      display: flex; 
      justify-content: space-between; 
      align-items: center; 
      margin-bottom: 20px; 
      background-color: #fff;
      padding: 15px;
      border-radius: 5px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .filters { 
      margin-bottom: 20px; 
      padding: 15px; 
      background-color: #fff; 
      border-radius: 5px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .log-container { margin-top: 20px; }
    .log-entry { 
      margin-bottom: 15px; 
      padding: 15px; 
      background-color: #fff;
      border: 1px solid #dee2e6; 
      border-radius: 5px;
      box-shadow: 0 1px 2px rgba(0,0,0,0.05);
      transition: transform 0.1s ease;
    }
    .log-entry:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .log-entry.error { border-left: 5px solid #dc3545; }
    .log-entry.warning { border-left: 5px solid #ffc107; }
    .log-entry.info { border-left: 5px solid #17a2b8; }
    .log-entry.debug { border-left: 5px solid #6c757d; }
    .log-header { 
      display: flex; 
      justify-content: space-between; 
      margin-bottom: 10px;
      padding-bottom: 10px;
      border-bottom: 1px solid #eee;
    }
    .log-body { 
      white-space: pre-wrap; 
      color: #333;
      font-size: 14px;
    }
    .log-details { 
      margin-top: 15px; 
      padding: 12px; 
      background-color: #f8f9fa; 
      border-radius: 5px;
      font-size: 13px;
    }
    .pagination { margin: 20px 0; }
    pre { 
      background-color: #f8f9fa; 
      padding: 10px; 
      border-radius: 5px; 
      overflow-x: auto;
      font-size: 12px; 
      color: #333;
    }
    .badge {
      font-weight: 500;
      padding: 5px 8px;
      margin-right: 5px;
    }
    .badge-error { background-color: #dc3545; color: white; }
    .badge-warning { background-color: #ffc107; color: black; }
    .badge-info { background-color: #17a2b8; color: white; }
    .badge-debug { background-color: #6c757d; color: white; }
    .collapsed-details { 
      cursor: pointer; 
      color: #007bff;
      padding: 5px 0;
      display: inline-block;
      margin-top: 5px;
    }
    .collapsed-details:hover {
      text-decoration: underline;
    }
    .status-badge {
      padding: 5px 8px;
      border-radius: 4px;
      font-size: 12px;
      font-weight: 500;
      margin-right: 10px;
    }
    .user-info {
      background-color: #f8f9fa;
      border-radius: 5px;
      padding: 10px 15px;
      margin-bottom: 15px;
      font-size: 14px;
      color: #666;
    }
    .user-info i {
      margin-right: 5px;
      color: #6c757d;
    }
    .loading-spinner {
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      height: 200px;
    }
    #toggleDebugBtn {
      margin-left: 10px;
    }
    .settings-section {
      background-color: #fff;
      border-radius: 5px;
      padding: 15px;
      margin-top: 20px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .filter-label {
      font-weight: 500;
      color: #555;
      font-size: 14px;
    }
    .form-control:focus {
      box-shadow: 0 0 0 0.2rem rgba(99, 102, 241, 0.25);
      border-color: #8a8df3;
    }
    .btn-primary {
      background-color: #6366f1;
      border-color: #6366f1;
    }
    .btn-primary:hover {
      background-color: #4f46e5;
      border-color: #4f46e5;
    }
    .no-logs-message {
      text-align: center;
      padding: 40px 20px;
      background-color: #fff;
      border-radius: 5px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
  </style>
</head>
<body>
  <div class="container-fluid">
    <!-- User info section -->
    <div class="user-info">
      <div class="row">
        <div class="col-md-6">
          <i class="fas fa-user"></i> Current User: <span id="current-user">Loading...</span>
        </div>
        <div class="col-md-6 text-md-right">
          <i class="far fa-clock"></i> Current Time: <span id="current-time">Loading...</span>
        </div>
      </div>
    </div>
    
    <div class="header">
      <h2><i class="fas fa-exclamation-triangle text-warning mr-2"></i>Error & Event Log Viewer</h2>
      <div>
        <button class="btn btn-sm btn-secondary" id="refresh-btn">
          <i class="fas fa-sync-alt mr-1"></i> Refresh
        </button>
        <button class="btn btn-sm btn-danger" id="clear-logs-btn">
          <i class="fas fa-trash mr-1"></i> Clear Old Logs
        </button>
        <div class="custom-control custom-switch d-inline-block" id="toggleDebugBtn">
          <input type="checkbox" class="custom-control-input" id="debug-logging-toggle">
          <label class="custom-control-label" for="debug-logging-toggle">Debug Mode</label>
        </div>
      </div>
    </div>
    
    <div class="filters">
      <div class="row">
        <div class="col-md-3">
          <div class="form-group">
            <label for="severity-filter" class="filter-label">Severity</label>
            <select class="form-control" id="severity-filter">
              <option value="">All Severities</option>
              <option value="ERROR">Errors Only</option>
              <option value="WARNING">Warnings Only</option>
              <option value="INFO">Info Only</option>
              <option value="DEBUG">Debug Only</option>
            </select>
          </div>
        </div>
        <div class="col-md-3">
          <div class="form-group">
            <label for="status-filter" class="filter-label">Status</label>
            <select class="form-control" id="status-filter">
              <option value="">All Statuses</option>
              <option value="New">New</option>
              <option value="In Progress">In Progress</option>
              <option value="Resolved">Resolved</option>
              <option value="Won't Fix">Won't Fix</option>
            </select>
          </div>
        </div>
        <div class="col-md-3">
          <div class="form-group">
            <label for="date-filter" class="filter-label">Date Range</label>
            <select class="form-control" id="date-filter">
              <option value="all">All Time</option>
              <option value="today" selected>Today</option>
              <option value="yesterday">Yesterday</option>
              <option value="week">This Week</option>
              <option value="month">This Month</option>
            </select>
          </div>
        </div>
        <div class="col-md-3">
          <div class="form-group">
            <label for="function-filter" class="filter-label">Function</label>
            <input type="text" class="form-control" id="function-filter" placeholder="Filter by function name">
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-12">
          <button class="btn btn-primary" id="apply-filters-btn">
            <i class="fas fa-filter mr-1"></i> Apply Filters
          </button>
          <button class="btn btn-outline-secondary ml-2" id="reset-filters-btn">
            <i class="fas fa-undo mr-1"></i> Reset
          </button>
        </div>
      </div>
    </div>
    
    <div id="logs-container">
      <div class="loading-spinner">
        <div class="spinner-border text-primary" role="status">
          <span class="sr-only">Loading...</span>
        </div>
        <p class="mt-3">Loading logs...</p>
      </div>
    </div>
    
    <div class="pagination justify-content-center" id="pagination">
      <!-- Pagination controls will be added here -->
    </div>
    
    <!-- Settings section -->
    <div class="settings-section">
      <h5><i class="fas fa-cog mr-2"></i>Debug Settings</h5>
      <div class="form-text text-muted mb-3">
        Enabling debug logging will record detailed information about script execution. This may affect performance.
      </div>
      <div class="row">
        <div class="col-md-6">
          <div class="custom-control custom-switch">
            <input type="checkbox" class="custom-control-input" id="debug-level-toggle">
            <label class="custom-control-label" for="debug-level-toggle">
              Show Verbose Debug Information
            </label>
          </div>
        </div>
        <div class="col-md-6">
          <div class="custom-control custom-switch">
            <input type="checkbox" class="custom-control-input" id="ui-events-toggle">
            <label class="custom-control-label" for="ui-events-toggle">
              Log UI Events
            </label>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script>
    // Pagination settings
    let currentPage = 1;
    const itemsPerPage = 10;
    let allLogs = [];
    
    // Load logs when the page loads
    document.addEventListener('DOMContentLoaded', function() {
      // Get current user and time
      updateUserAndTime();
      
      // Load logs and settings
      loadLogs();
      loadDebugSetting();
      
      // Set up event listeners
      document.getElementById('refresh-btn').addEventListener('click', loadLogs);
      document.getElementById('clear-logs-btn').addEventListener('click', clearOldLogs);
      document.getElementById('apply-filters-btn').addEventListener('click', applyFilters);
      document.getElementById('reset-filters-btn').addEventListener('click', resetFilters);
      document.getElementById('debug-logging-toggle').addEventListener('change', toggleDebugLogging);
      document.getElementById('debug-level-toggle').addEventListener('change', toggleDebugLevel);
      document.getElementById('ui-events-toggle').addEventListener('change', toggleUIEvents);
    });
    
    // Get current user and time
    function updateUserAndTime() {
      google.script.run
        .withSuccessHandler(function(userInfo) {
          document.getElementById('current-user').textContent = userInfo.email || 'Unknown';
          document.getElementById('current-time').textContent = userInfo.timestamp || new Date().toISOString();
        })
        .withFailureHandler(function(error) {
          console.error('Error getting user info:', error);
          document.getElementById('current-user').textContent = 'Error loading user';
          document.getElementById('current-time').textContent = new Date().toISOString();
        })
        .getCurrentUserInfo();
    }
    
    // Load logs from the server
    function loadLogs() {
      document.getElementById('logs-container').innerHTML = `
        <div class="loading-spinner">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
          <p class="mt-3">Loading logs...</p>
        </div>
      `;
      
      // Get filter values
      const filters = getFilterValues();
      
      // Call server to get logs
      google.script.run
        .withSuccessHandler(function(logs) {
          allLogs = logs;
          displayLogs(logs, currentPage);
        })
        .withFailureHandler(function(error) {
          document.getElementById('logs-container').innerHTML = `
            <div class="alert alert-danger">
              <i class="fas fa-exclamation-circle mr-2"></i>
              Error loading logs: ${error}
            </div>
          `;
        })
        .getErrorLogs(filters);
    }
    
    // Get current filter values
    function getFilterValues() {
      return {
        severity: document.getElementById('severity-filter').value,
        status: document.getElementById('status-filter').value,
        function: document.getElementById('function-filter').value,
        dateRange: document.getElementById('date-filter').value
      };
    }
    
    // Display logs with pagination
    function displayLogs(logs, page) {
      const startIndex = (page - 1) * itemsPerPage;
      const endIndex = startIndex + itemsPerPage;
      const pagedLogs = logs.slice(startIndex, endIndex);
      
      const container = document.getElementById('logs-container');
      
      if (logs.length === 0) {
        container.innerHTML = `
          <div class="no-logs-message">
            <i class="fas fa-search fa-3x mb-3 text-muted"></i>
            <h4>No logs found</h4>
            <p class="text-muted">No logs found matching your criteria. Try adjusting your filters.</p>
          </div>
        `;
        document.getElementById('pagination').innerHTML = '';
        return;
      }
      
      let html = '';
      
      pagedLogs.forEach(function(log, index) {
        const severityClass = getSeverityClass(log.Severity);
        const badge = getSeverityBadge(log.Severity);
        const statusBadge = getStatusBadge(log.Status);
        
        html += `
          <div class="log-entry ${severityClass}">
            <div class="log-header">
              <div>
                ${badge}
                <strong>${log.Function || 'Unknown'}</strong>
                <span class="text-muted ml-2">- ${formatDateTime(log.Timestamp)}</span>
              </div>
              <div>
                ${statusBadge}
                <div class="btn-group ml-2">
                  <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown">
                    Actions
                  </button>
                  <div class="dropdown-menu dropdown-menu-right">
                    <button class="dropdown-item update-status-btn" data-row="${startIndex + index + 2}" data-status="New">
                      <i class="fas fa-tag text-primary mr-2"></i>Mark as New
                    </button>
                    <button class="dropdown-item update-status-btn" data-row="${startIndex + index + 2}" data-status="In Progress">
                      <i class="fas fa-spinner text-warning mr-2"></i>Mark as In Progress
                    </button>
                    <button class="dropdown-item update-status-btn" data-row="${startIndex + index + 2}" data-status="Resolved">
                      <i class="fas fa-check text-success mr-2"></i>Mark as Resolved
                    </button>
                    <button class="dropdown-item update-status-btn" data-row="${startIndex + index + 2}" data-status="Won't Fix">
                      <i class="fas fa-ban text-danger mr-2"></i>Mark as Won't Fix
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div class="log-body">
              ${log.Message || 'No message'}
            </div>
            <div class="collapsed-details" onclick="toggleDetails(this)">
              <i class="fas fa-chevron-down mr-1"></i> Show Details
            </div>
            <div class="log-details" style="display: none;">
              <div><strong>User:</strong> ${log.User || 'Unknown'}</div>
              ${log.Details ? `<div class="mt-2"><strong>Details:</strong> <pre>${log.Details}</pre></div>` : ''}
              ${log.StackTrace ? `<div class="mt-2"><strong>Stack Trace:</strong> <pre>${log.StackTrace}</pre></div>` : ''}
              ${log.Context ? `<div class="mt-2"><strong>Context:</strong> <pre>${log.Context}</pre></div>` : ''}
            </div>
          </div>
        `;
      });
      
      container.innerHTML = html;
      
      // Add event listeners to status update buttons
      document.querySelectorAll('.update-status-btn').forEach(function(btn) {
        btn.addEventListener('click', function() {
          const row = this.getAttribute('data-row');
          const status = this.getAttribute('data-status');
          updateLogStatus(row, status);
        });
      });
      
      // Update pagination
      updatePagination(logs.length, page);
    }
    
    // Format date and time for display
    function formatDateTime(dateString) {
      if (!dateString) return 'Unknown';
      
      try {
        const date = new Date(dateString);
        return date.toLocaleString();
      } catch (e) {
        return dateString;
      }
    }
    
    // Toggle details visibility
    function toggleDetails(element) {
      const details = element.nextElementSibling;
      if (details.style.display === 'none') {
        details.style.display = 'block';
        element.innerHTML = '<i class="fas fa-chevron-up mr-1"></i> Hide Details';
      } else {
        details.style.display = 'none';
        element.innerHTML = '<i class="fas fa-chevron-down mr-1"></i> Show Details';
      }
    }
    
    // Get severity class for styling
    function getSeverityClass(severity) {
      switch (severity) {
        case 'ERROR': return 'error';
        case 'WARNING': return 'warning';
        case 'INFO': return 'info';
        case 'DEBUG': return 'debug';
        default: return '';
      }
    }
    
    // Get severity badge HTML
    function getSeverityBadge(severity) {
      switch (severity) {
        case 'ERROR': return '<span class="badge badge-error"><i class="fas fa-times-circle mr-1"></i>ERROR</span>';
        case 'WARNING': return '<span class="badge badge-warning"><i class="fas fa-exclamation-triangle mr-1"></i>WARNING</span>';
        case 'INFO': return '<span class="badge badge-info"><i class="fas fa-info-circle mr-1"></i>INFO</span>';
        case 'DEBUG': return '<span class="badge badge-debug"><i class="fas fa-bug mr-1"></i>DEBUG</span>';
        default: return '<span class="badge badge-secondary">UNKNOWN</span>';
      }
    }
    
    // Get status badge HTML
    function getStatusBadge(status) {
      switch (status) {
        case 'New': return '<span class="status-badge bg-primary text-white">New</span>';
        case 'In Progress': return '<span class="status-badge bg-warning text-dark">In Progress</span>';
        case 'Resolved': return '<span class="status-badge bg-success text-white">Resolved</span>';
        case "Won't Fix": return '<span class="status-badge bg-secondary text-white">Won\'t Fix</span>';
        default: return '<span class="status-badge bg-light text-dark">New</span>';
      }
    }
    
    // Update pagination controls
    function updatePagination(totalItems, currentPage) {
      const totalPages = Math.ceil(totalItems / itemsPerPage);
      
      if (totalPages <= 1) {
        document.getElementById('pagination').innerHTML = '';
        return;
      }
      
      let paginationHtml = '<ul class="pagination">';
      
      // Previous button
      paginationHtml += `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
          <a class="page-link" href="#" onclick="changePage(${currentPage - 1}); return false;">
            <i class="fas fa-chevron-left"></i>
          </a>
        </li>
      `;
      
      // Page numbers
      const maxVisiblePages = 5;
      let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
      let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
      
      if (endPage - startPage + 1 < maxVisiblePages) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
      }
      
      for (let i = startPage; i <= endPage; i++) {
        paginationHtml += `
          <li class="page-item ${i === currentPage ? 'active' : ''}">
            <a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>
          </li>
        `;
      }
      
      // Next button
      paginationHtml += `
        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
          <a class="page-link" href="#" onclick="changePage(${currentPage + 1}); return false;">
            <i class="fas fa-chevron-right"></i>
          </a>
        </li>
      `;
      
      paginationHtml += '</ul>';
      
      document.getElementById('pagination').innerHTML = paginationHtml;
    }
    
    // Change page
    function changePage(page) {
      if (page < 1 || page > Math.ceil(allLogs.length / itemsPerPage)) {
        return;
      }
      
      currentPage = page;
      displayLogs(allLogs, currentPage);
      
      // Scroll to top of logs container
      document.getElementById('logs-container').scrollIntoView({
        behavior: 'smooth'
      });
    }
    
    // Update log status
    function updateLogStatus(row, status) {
      google.script.run
        .withSuccessHandler(function(result) {
          if (result) {
            loadLogs(); // Reload logs to see the update
          } else {
            alert('Failed to update status. Please try again.');
          }
        })
        .withFailureHandler(function(error) {
          alert('Error updating status: ' + error);
        })
        .updateErrorLogStatus(parseInt(row), status);
    }
    
    // Clear old logs
    function clearOldLogs() {
      if (!confirm('This will clear logs older than 30 days. Continue?')) {
        return;
      }
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            alert(`Cleared ${result.cleared} logs. Kept ${result.kept} recent logs.`);
            loadLogs(); // Reload logs
          } else {
            alert('Failed to clear logs: ' + result.message);
          }
        })
        .withFailureHandler(function(error) {
          alert('Error clearing logs: ' + error);
        })
        .clearErrorLogs(true);
    }
    
    // Apply filters
    function applyFilters() {
      currentPage = 1; // Reset to first page
      loadLogs();
    }
    
    // Reset filters
    function resetFilters() {
      document.getElementById('severity-filter').value = '';
      document.getElementById('status-filter').value = '';
      document.getElementById('function-filter').value = '';
      document.getElementById('date-filter').value = 'today';
      
      currentPage = 1; // Reset to first page
      loadLogs();
    }
    
    // Load debug setting
    function loadDebugSetting() {
      google.script.run
        .withSuccessHandler(function(enabled) {
          document.getElementById('debug-logging-toggle').checked = enabled;
          
          // Also set the related debug settings to match
          document.getElementById('debug-level-toggle').disabled = !enabled;
          document.getElementById('ui-events-toggle').disabled = !enabled;
        })
        .withFailureHandler(function(error) {
          console.error('Error loading debug setting:', error);
        })
        .isDebugLoggingEnabled();
    }
    
    // Toggle debug logging
    function toggleDebugLogging() {
      const enabled = document.getElementById('debug-logging-toggle').checked;
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result) {
            // Update UI for related toggles
            document.getElementById('debug-level-toggle').disabled = !enabled;
            document.getElementById('ui-events-toggle').disabled = !enabled;
          } else {
            alert('Failed to update debug logging setting');
            // Reset the toggle to match the actual state
            loadDebugSetting();
          }
        })
        .withFailureHandler(function(error) {
          alert('Error updating debug setting: ' + error);
          // Reset the toggle to match the actual state
          loadDebugSetting();
        })
        .setDebugLogging(enabled);
    }
    
    // Toggle debug level (placeholder function - implement in your ErrorLogService)
    function toggleDebugLevel() {
      const enabled = document.getElementById('debug-level-toggle').checked;
      
      // You'll need to implement this in your ErrorLogService.gs
      google.script.run
        .withSuccessHandler(function(result) {
          if (!result) {
            // Reset the toggle if failed
            document.getElementById('debug-level-toggle').checked = !enabled;
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error setting debug level:', error);
          document.getElementById('debug-level-toggle').checked = !enabled;
        })
        .setDebugLevel(enabled ? 'verbose' : 'normal');
    }
    
    // Toggle UI event logging (placeholder function - implement in your ErrorLogService)
    function toggleUIEvents() {
      const enabled = document.getElementById('ui-events-toggle').checked;
      
      // You'll need to implement this in your ErrorLogService.gs
      google.script.run
        .withSuccessHandler(function(result) {
          if (!result) {
            // Reset the toggle if failed
            document.getElementById('ui-events-toggle').checked = !enabled;
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error setting UI event logging:', error);
          document.getElementById('ui-events-toggle').checked = !enabled;
        })
        .setUIEventLogging(enabled);
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
  <style>
    :root {
      --primary: #4f46e5;
      --primary-dark: #4338ca;
      --secondary: #0ea5e9;
      --success: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --light-bg: #f9fafb;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      color: #1f2937;
      background-color: var(--light-bg);
      padding: 1rem;
    }
    
    .form-container {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 1.5rem;
      max-width: 100%;
      margin: 0 auto;
    }
    
    .form-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .form-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #111827;
      margin: 0;
    }
    
    .form-subtitle {
      color: #6b7280;
      margin-top: 0.25rem;
    }
    
    .card {
      border: none;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      margin-bottom: 1.5rem;
    }
    
    .card-header {
      background-color: white;
      border-bottom: 1px solid #e5e7eb;
      padding: 1rem 1.25rem;
      font-weight: 600;
    }
    
    .editor-container {
      height: 150px;
      margin-bottom: 1rem;
    }
    
    .ql-toolbar.ql-snow {
      border-radius: 6px 6px 0 0;
      border-color: #d1d5db;
    }
    
    .ql-container.ql-snow {
      border-radius: 0 0 6px 6px;
      border-color: #d1d5db;
    }
    
    .action-item {
      background-color: #f3f4f6;
      border-radius: 6px;
      padding: 0.75rem;
      margin-bottom: 0.75rem;
      display: flex;
      align-items: flex-start;
    }
    
    .action-item-content {
      flex-grow: 1;
      margin-right: 1rem;
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .badge-primary {
      background-color: var(--primary);
    }
    
    .badge-secondary {
      background-color: var(--secondary);
    }
    
    .badge-success {
      background-color: var(--success);
    }
    
    .badge-warning {
      background-color: var(--warning);
    }
    
    .badge-danger {
      background-color: var(--danger);
    }
    
    .form-group label {
      font-weight: 500;
      margin-bottom: 0.5rem;
    }
    
    .form-control {
      border-radius: 6px;
      border-color: #d1d5db;
    }
    
    .form-control:focus {
      box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
      border-color: var(--primary);
    }
    
    .feedback-tag {
      display: inline-block;
      margin-right: 0.5rem;
      margin-bottom: 0.5rem;
      padding: 0.35rem 0.75rem;
      border-radius: 999px;
      background-color: #e5e7eb;
      color: #4b5563;
      font-size: 0.875rem;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .feedback-tag:hover {
      background-color: #d1d5db;
    }
    
    .feedback-tag.active {
      background-color: var(--primary);
      color: white;
    }
    
    .emoji-rating {
      display: flex;
      justify-content: space-between;
      margin-bottom: 1rem;
    }
    
    .emoji-option {
      text-align: center;
      cursor: pointer;
      opacity: 0.5;
      transition: all 0.2s;
    }
    
    .emoji-option:hover {
      transform: scale(1.1);
      opacity: 0.8;
    }
    
    .emoji-option.selected {
      opacity: 1;
      transform: scale(1.2);
    }
    
    .emoji-option .emoji {
      font-size: 1.75rem;
      margin-bottom: 0.25rem;
    }
    
    .emoji-option .label {
      font-size: 0.75rem;
      color: #6b7280;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .spinner-container {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    .spinner-text {
      margin-top: 1rem;
      color: var(--primary);
      font-weight: 500;
    }
    
    /* Toast styling */
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }
    
    .toast {
      background-color: white;
      border-radius: 6px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
      min-width: 250px;
      margin-bottom: 0.75rem;
      display: flex;
      overflow: hidden;
      animation: slideIn 0.3s ease-out forwards;
      max-width: 450px;
    }
    
    @keyframes slideIn {
      from { transform: translateX(100%); }
      to { transform: translateX(0); }
    }
    
    .toast.success {
      border-left: 4px solid var(--success);
    }
    
    .toast.error {
      border-left: 4px solid var(--danger);
    }
    
    .toast.warning {
      border-left: 4px solid var(--warning);
    }
    
    .toast.info {
      border-left: 4px solid var(--primary);
    }
    
    .toast-header {
      padding: 0.75rem 1rem;
    }
    
    .toast-icon {
      margin-right: 10px;
      font-size: 20px;
    }
    
    .toast.success .toast-icon {
      color: var(--success);
    }
    
    .toast.error .toast-icon {
      color: var(--danger);
    }
    
    .toast.warning .toast-icon {
      color: var(--warning);
    }
    
    .toast.info .toast-icon {
      color: var(--primary);
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .toast-message {
      color: #6b7280;
      font-size: 0.875rem;
    }
    
    .toast-close {
      color: #9ca3af;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
      margin-left: auto;
      align-self: flex-start;
    }
    
    .toast-close:hover {
      color: #6b7280;
    }
  </style>
</head>
<body>
  <div class="container-fluid py-3">
    <div class="form-container">
      <div class="form-header">
        <div>
          <h4 class="form-title">
            <i class="fas fa-user-tie text-primary mr-2"></i>
            <span id="form-title-text">Create Manager One-on-One</span>
          </h4>
          <p class="form-subtitle" id="form-subtitle">Document your conversation with your manager</p>
        </div>
        <span class="badge badge-primary px-3 py-2" id="session-status">New Session</span>
      </div>
      
      <form id="manager-1on1-form">
        <div class="row">
          <div class="col-md-6">
            <div class="form-group">
              <label for="session-date">Session Date <span class="text-danger">*</span></label>
              <input type="datetime-local" class="form-control" id="session-date" required>
            </div>
          </div>
          <div class="col-md-6">
            <div class="form-group">
              <label for="manager-name">Manager Name <span class="text-danger">*</span></label>
              <input type="text" class="form-control" id="manager-name" placeholder="Manager's Name" required>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-6">
            <div class="form-group">
              <label for="session-location">Location</label>
              <select class="form-control" id="session-location">
                <option value="Online">Online Meeting</option>
                <option value="In-Person">In-Person</option>
                <option value="Phone">Phone Call</option>
                <option value="Other">Other</option>
              </select>
            </div>
          </div>
          <div class="col-md-6">
            <div class="form-group">
              <label for="session-duration">Duration (minutes)</label>
              <input type="number" class="form-control" id="session-duration" placeholder="30" min="5" max="240">
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header d-flex align-items-center">
            <i class="fas fa-star text-warning mr-2"></i> Overall Session Rating
          </div>
          <div class="card-body">
            <div class="emoji-rating">
              <div class="emoji-option" data-rating="1" onclick="selectRating(1)">
                <div class="emoji">😞</div>
                <div class="label">Not Helpful</div>
              </div>
              <div class="emoji-option" data-rating="2" onclick="selectRating(2)">
                <div class="emoji">😐</div>
                <div class="label">Neutral</div>
              </div>
              <div class="emoji-option" data-rating="3" onclick="selectRating(3)">
                <div class="emoji">🙂</div>
                <div class="label">Good</div>
              </div>
              <div class="emoji-option" data-rating="4" onclick="selectRating(4)">
                <div class="emoji">😀</div>
                <div class="label">Great</div>
              </div>
              <div class="emoji-option" data-rating="5" onclick="selectRating(5)">
                <div class="emoji">🤩</div>
                <div class="label">Excellent</div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-12">
            <div class="card">
              <div class="card-header d-flex align-items-center">
                <i class="fas fa-bullseye text-danger mr-2"></i> Key Topics & Goals
              </div>
              <div class="card-body">
                <div class="form-group">
                  <label>What topics did you want to discuss? <span class="text-danger">*</span></label>
                  <div id="agenda-editor" class="editor-container"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-12">
            <div class="card">
              <div class="card-header d-flex align-items-center">
                <i class="fas fa-briefcase text-secondary mr-2"></i> Career Development Discussion
              </div>
              <div class="card-body">
                <div class="form-group">
                  <label>Career feedback and growth opportunities</label>
                  <div id="career-editor" class="editor-container"></div>
                </div>
                <div class="form-group">
                  <label>Current focus areas:</label>
                  <div class="d-flex flex-wrap mt-2" id="focus-areas-container">
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Technical Skills">Technical Skills</div>
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Leadership">Leadership</div>
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Communication">Communication</div>
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Project Management">Project Management</div>
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Team Collaboration">Team Collaboration</div>
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Strategic Thinking">Strategic Thinking</div>
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Problem Solving">Problem Solving</div>
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Process Improvement">Process Improvement</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-12">
            <div class="card">
              <div class="card-header d-flex align-items-center">
                <i class="fas fa-comment-alt text-info mr-2"></i> Manager Feedback
              </div>
              <div class="card-body">
                <div class="form-group">
                  <label>Feedback received from your manager</label>
                  <div id="feedback-editor" class="editor-container"></div>
                </div>
                <div class="form-group">
                  <label>Feedback type:</label>
                  <div class="d-flex flex-wrap mt-2" id="feedback-type-container">
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Positive">Positive</div>
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Constructive">Constructive</div>
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Performance">Performance</div>
                    <div class="feedback-tag" onclick="toggleFeedbackTag(this)" data-value="Project-specific">Project-specific</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-12">
            <div class="card">
              <div class="card-header d-flex align-items-center">
                <i class="fas fa-tasks text-success mr-2"></i> Action Items
              </div>
              <div class="card-body">
                <div id="action-items-container">
                  <!-- Action items will be added here -->
                </div>
                <button type="button" class="btn btn-outline-primary btn-sm" onclick="addActionItem()">
                  <i class="fas fa-plus mr-1"></i> Add Action Item
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-12">
            <div class="card">
              <div class="card-header d-flex align-items-center">
                <i class="fas fa-sticky-note text-warning mr-2"></i> Additional Notes
              </div>
              <div class="card-body">
                <div class="form-group">
                  <label>Any other notes or comments</label>
                  <div id="notes-editor" class="editor-container"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-12">
            <div class="card">
              <div class="card-header d-flex align-items-center">
                <i class="fas fa-calendar-alt text-danger mr-2"></i> Follow-up
              </div>
              <div class="card-body">
                <div class="row">
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="follow-up-date">Next 1:1 Date</label>
                      <input type="date" class="form-control" id="follow-up-date">
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="email-reminder">Email Reminder</label>
                      <select class="form-control" id="email-reminder">
                        <option value="none">No Reminder</option>
                        <option value="day">1 Day Before</option>
                        <option value="week">1 Week Before</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="form-group mt-4 d-flex justify-content-between">
          <div>
            <button type="button" class="btn btn-outline-secondary mr-2" onclick="closeForm()">
              <i class="fas fa-times mr-1"></i> Cancel
            </button>
            <button type="button" class="btn btn-outline-danger mr-2" id="delete-btn" onclick="confirmDelete()" style="display:none;">
              <i class="fas fa-trash-alt mr-1"></i> Delete
            </button>
          </div>
          <div>
            <button type="button" class="btn btn-outline-secondary mr-2" id="save-draft-btn" onclick="saveSession(true)">
              <i class="fas fa-save mr-1"></i> Save Draft
            </button>
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-check mr-1"></i> Save Session
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loading-overlay" style="display:none;">
    <div class="spinner-container">
      <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div class="spinner-text">Processing...</div>
    </div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container" id="toast-container"></div>
  
  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.6.0.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
  <script>
    // Global variables
    let sessionId = null;
    let sessionData = null;
    let actionItemCounter = 0;
    let selectedRating = 0;
    let focusAreas = [];
    let feedbackTypes = [];
    let isEditMode = false;
    let quillEditors = {};
    
    // Action item template
    const actionItemTemplate = `
      <div class="action-item" id="action-item-{id}">
        <div class="action-item-content">
          <div class="form-group mb-2">
            <input type="text" class="form-control" name="action-item-desc-{id}" placeholder="Action item description" required>
          </div>
          <div class="row">
            <div class="col-md-6">
              <div class="form-group mb-0">
                <select class="form-control form-control-sm" name="action-item-owner-{id}">
                  <option value="me">Me</option>
                  <option value="manager">Manager</option>
                  <option value="both">Both</option>
                </select>
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group mb-0">
                <input type="date" class="form-control form-control-sm" name="action-item-due-{id}" placeholder="Due date">
              </div>
            </div>
          </div>
        </div>
        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeActionItem({id})">
          <i class="fas fa-times"></i>
        </button>
      </div>
    `;
    
    // Initialization
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize Quill editors
      initializeQuillEditors();
      
      // Add form submit handler
      document.getElementById('manager-1on1-form').addEventListener('submit', function(e) {
        e.preventDefault();
        saveSession(false);
      });
      
      // Check if we're editing an existing session
      loadSessionData();
      
      // Add first action item
      addActionItem();
    });
    
    // Initialize Quill editors
    function initializeQuillEditors() {
      const toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'],
        ['blockquote', 'code-block'],
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'header': [1, 2, 3, false] }],
        ['clean']
      ];
      
      // Initialize all editors
      const editorIds = ['agenda-editor', 'career-editor', 'feedback-editor', 'notes-editor'];
      editorIds.forEach(id => {
        quillEditors[id] = new Quill(`#${id}`, {
          theme: 'snow',
          placeholder: 'Write here...',
          modules: {
            toolbar: toolbarOptions
          }
        });
      });
    }
    
    // Load session data (for editing)
    function loadSessionData() {
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result && result.id) {
            // We have session data, we're in edit mode
            sessionId = result.id;
            sessionData = result;
            isEditMode = true;
            populateForm(result);
            
            // Show delete button in edit mode
            document.getElementById('delete-btn').style.display = 'inline-block';
            
            // Update form title and status
            document.getElementById('form-title-text').textContent = 'Edit Manager One-on-One';
            document.getElementById('form-subtitle').textContent = 'Update your session with your manager';
            document.getElementById('session-status').textContent = result.complete ? 'Complete' : 'Draft';
            document.getElementById('session-status').className = 
              result.complete ? 'badge badge-success px-3 py-2' : 'badge badge-warning px-3 py-2';
          }
          showLoading(false);
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to load session data: ' + error, 'error');
          showLoading(false);
        })
        .getCachedManagerOneOnOneSessionId();
    }
    
    // Populate form with session data
    function populateForm(data) {
      // Basic information
      document.getElementById('session-date').value = formatDateForInput(data.date);
      document.getElementById('manager-name').value = data.managerName || '';
      document.getElementById('session-location').value = data.location || 'Online';
      document.getElementById('session-duration').value = data.duration || '';
      
      // Set rating
      if (data.rating) {
        selectRating(parseInt(data.rating));
      }
      
      // Set Quill editor contents
      if (data.agenda) {
        quillEditors['agenda-editor'].root.innerHTML = data.agenda;
      }
      if (data.careerNotes) {
        quillEditors['career-editor'].root.innerHTML = data.careerNotes;
      }
      if (data.feedbackNotes) {
        quillEditors['feedback-editor'].root.innerHTML = data.feedbackNotes;
      }
      if (data.additionalNotes) {
        quillEditors['notes-editor'].root.innerHTML = data.additionalNotes;
      }
      
      // Set focus areas and feedback types
      if (data.focusAreas && data.focusAreas.length) {
        data.focusAreas.forEach(area => {
          const elements = document.querySelectorAll('#focus-areas-container .feedback-tag');
          elements.forEach(el => {
            if (el.getAttribute('data-value') === area) {
              toggleFeedbackTag(el);
            }
          });
        });
      }
      
      if (data.feedbackTypes && data.feedbackTypes.length) {
        data.feedbackTypes.forEach(type => {
          const elements = document.querySelectorAll('#feedback-type-container .feedback-tag');
          elements.forEach(el => {
            if (el.getAttribute('data-value') === type) {
              toggleFeedbackTag(el);
            }
          });
        });
      }
      
      // Action items
      if (data.actionItems && data.actionItems.length) {
        // Clear default action item
        document.getElementById('action-items-container').innerHTML = '';
        actionItemCounter = 0;
        
        // Add each action item from data
        data.actionItems.forEach(item => {
          addActionItem(item);
        });
      }
      
      // Follow-up
      if (data.followUpDate) {
        document.getElementById('follow-up-date').value = formatDateForInput(data.followUpDate, true);
      }
      document.getElementById('email-reminder').value = data.emailReminder || 'none';
    }
    
    // Format date for datetime-local input
    function formatDateForInput(dateString, dateOnly = false) {
      if (!dateString) return '';
      
      const date = new Date(dateString);
      const year = date.getFullYear();
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const day = date.getDate().toString().padStart(2, '0');
      
      if (dateOnly) {
        return `${year}-${month}-${day}`;
      }
      
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      
      return `${year}-${month}-${day}T${hours}:${minutes}`;
    }
    
    // Add a new action item
    function addActionItem(itemData = null) {
      const container = document.getElementById('action-items-container');
      const id = actionItemCounter++;
      
      // Insert the action item HTML
      container.insertAdjacentHTML('beforeend', actionItemTemplate.replace(/{id}/g, id));
      
      // If we have data, populate the fields
      if (itemData) {
        document.querySelector(`[name="action-item-desc-${id}"]`).value = itemData.description || '';
        document.querySelector(`[name="action-item-owner-${id}"]`).value = itemData.owner || 'me';
        if (itemData.dueDate) {
          document.querySelector(`[name="action-item-due-${id}"]`).value = formatDateForInput(itemData.dueDate, true);
        }
      }
    }
    
    // Remove an action item
    function removeActionItem(id) {
      const element = document.getElementById(`action-item-${id}`);
      if (element) {
        element.remove();
      }
    }
    
    // Toggle a feedback tag
    function toggleFeedbackTag(element) {
      element.classList.toggle('active');
      const value = element.getAttribute('data-value');
      const container = element.parentElement;
      
      if (container.id === 'focus-areas-container') {
        if (element.classList.contains('active')) {
          focusAreas.push(value);
        } else {
          focusAreas = focusAreas.filter(area => area !== value);
        }
      } else if (container.id === 'feedback-type-container') {
        if (element.classList.contains('active')) {
          feedbackTypes.push(value);
        } else {
          feedbackTypes = feedbackTypes.filter(type => type !== value);
        }
      }
    }
    
    // Select rating
    function selectRating(rating) {
      selectedRating = rating;
      const options = document.querySelectorAll('.emoji-option');
      options.forEach(option => {
        const optionRating = parseInt(option.getAttribute('data-rating'));
        option.classList.toggle('selected', optionRating === rating);
      });
    }
    
    // Save the session
    function saveSession(isDraft) {
      // Validate required fields if not a draft
      if (!isDraft && !validateForm()) {
        return;
      }
      
      showLoading(true);
      
      // Collect form data
      const sessionDate = document.getElementById('session-date').value;
      const formData = {
        id: sessionId,
        managerName: document.getElementById('manager-name').value,
        date: sessionDate ? new Date(sessionDate).toISOString() : null,
        location: document.getElementById('session-location').value,
        duration: document.getElementById('session-duration').value,
        rating: selectedRating,
        complete: !isDraft,
        agenda: quillEditors['agenda-editor'].root.innerHTML,
        careerNotes: quillEditors['career-editor'].root.innerHTML,
        feedbackNotes: quillEditors['feedback-editor'].root.innerHTML,
        additionalNotes: quillEditors['notes-editor'].root.innerHTML,
        focusAreas: focusAreas,
        feedbackTypes: feedbackTypes,
        actionItems: getActionItems(),
        followUpDate: document.getElementById('follow-up-date').value || null,
        emailReminder: document.getElementById('email-reminder').value
      };
      
      // Add created/updated info
      if (!isEditMode) {
        formData.createdDate = new Date().toISOString();
      }
      formData.updatedDate = new Date().toISOString();
      
      // Save session
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            showToast('Success', result.message, 'success');
            setTimeout(function() {
              // Close the form after successful save
              google.script.host.close();
            }, 1500);
          } else {
            showToast('Error', result.message, 'error');
            showLoading(false);
          }
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to save: ' + error, 'error');
          showLoading(false);
        })
        .saveManagerOneOnOneSession(formData);
    }
    
    // Validate the form
    function validateForm() {
      const requiredFields = [
        { id: 'session-date', label: 'Session Date' },
        { id: 'manager-name', label: 'Manager Name' }
      ];
      
      let isValid = true;
      let errorMessage = 'Please complete the following required fields:';
      
      // Check required fields
      for (const field of requiredFields) {
        const element = document.getElementById(field.id);
        if (!element.value.trim()) {
          isValid = false;
          errorMessage += `\n- ${field.label}`;
          element.classList.add('is-invalid');
        } else {
          element.classList.remove('is-invalid');
        }
      }
      
      // Check agenda content
      if (quillEditors['agenda-editor'].getText().trim().length <= 1) {
        isValid = false;
        errorMessage += '\n- Key Topics & Goals';
        document.getElementById('agenda-editor').querySelector('.ql-container').classList.add('border-danger');
      } else {
        document.getElementById('agenda-editor').querySelector('.ql-container').classList.remove('border-danger');
      }
      
      if (!isValid) {
        showToast('Missing Information', errorMessage, 'warning');
      }
      
      return isValid;
    }
    
    // Get all action items from the form
    function getActionItems() {
      const actionItems = [];
      const container = document.getElementById('action-items-container');
      const items = container.querySelectorAll('.action-item');
      
      items.forEach(item => {
        const id = item.id.replace('action-item-', '');
        const description = document.querySelector(`[name="action-item-desc-${id}"]`).value;
        
        if (description.trim()) {
          actionItems.push({
            description: description,
            owner: document.querySelector(`[name="action-item-owner-${id}"]`).value,
            dueDate: document.querySelector(`[name="action-item-due-${id}"]`).value || null,
            completed: false
          });
        }
      });
      
      return actionItems;
    }
    
    // Confirm delete
    function confirmDelete() {
      if (confirm('Are you sure you want to delete this session? This action cannot be undone.')) {
        deleteSession();
      }
    }
    
    // Delete session
    function deleteSession() {
      if (!sessionId) {
        showToast('Error', 'No session ID to delete', 'error');
        return;
      }
      
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            showToast('Success', 'Session deleted successfully', 'success');
            setTimeout(function() {
              google.script.host.close();
            }, 1500);
          } else {
            showToast('Error', result.message, 'error');
            showLoading(false);
          }
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to delete: ' + error, 'error');
          showLoading(false);
        })
        .deleteManagerOneOnOneSession(sessionId);
    }
    
    // Close the form
    function closeForm() {
      google.script.host.close();
    }
    
    // Show/hide loading overlay
    function showLoading(show) {
      document.getElementById('loading-overlay').style.display = show ? 'flex' : 'none';
    }
    
    // Show toast notification
    function showToast(title, message, type) {
      const toastContainer = document.getElementById('toast-container');
      const id = 'toast-' + Date.now();
      
      let iconClass = 'fas fa-info-circle';
      if (type === 'success') iconClass = 'fas fa-check-circle';
      if (type === 'error') iconClass = 'fas fa-exclamation-circle';
      if (type === 'warning') iconClass = 'fas fa-exclamation-triangle';
      
      const toastHtml = `
        <div class="toast ${type}" id="${id}">
          <div class="toast-header">
            <i class="${iconClass} toast-icon"></i>
            <div>
              <div class="toast-title">${title}</div>
              <div class="toast-message">${message}</div>
            </div>
            <span class="toast-close" onclick="dismissToast('${id}')">&times;</span>
          </div>
        </div>
      `;
      
      toastContainer.insertAdjacentHTML('beforeend', toastHtml);
      
      // Auto-dismiss after 5 seconds
      setTimeout(() => dismissToast(id), 5000);
    }
    
    // Dismiss toast
    function dismissToast(id) {
      const toast = document.getElementById(id);
      if (toast) {
        toast.style.opacity = '0';
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      }
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    :root {
      --primary: #4f46e5;
      --primary-dark: #4338ca;
      --secondary: #0ea5e9;
      --success: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --light-bg: #f9fafb;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      color: #1f2937;
      background-color: var(--light-bg);
      padding: 1rem;
    }
    
    .page-container {
      max-width: 100%;
      margin: 0 auto;
    }
    
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      background-color: white;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .page-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #111827;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .filters-section {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 1rem 1.5rem;
      margin-bottom: 1.5rem;
    }
    
    .notes-wrapper {
      display: flex;
      min-height: 0;
      flex: 1;
    }
    
    .notes-list {
      width: 320px;
      overflow-y: auto;
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      margin-right: 1.5rem;
      flex-shrink: 0;
    }
    
    .note-list-item {
      padding: 1rem;
      border-bottom: 1px solid #e5e7eb;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    
    .note-list-item:hover {
      background-color: #f3f4f6;
    }
    
    .note-list-item.active {
      background-color: #eef2ff;
      border-left: 3px solid var(--primary);
    }
    
    .note-list-item-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
    }
    
    .note-date {
      font-weight: 600;
      color: #111827;
    }
    
    .note-badge {
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
      border-radius: 9999px;
    }
    
    .note-preview {
      color: #6b7280;
      font-size: 0.875rem;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }
    
    .notes-detail {
      flex-grow: 1;
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      overflow-y: auto;
      display: flex;
      flex-direction: column;
    }
    
    .notes-detail-header {
      padding: 1.5rem;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .notes-detail-content {
      padding: 1.5rem;
      flex-grow: 1;
    }
    
    .notes-detail-empty {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
      color: #9ca3af;
    }
    
    .empty-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
      color: #d1d5db;
    }
    
    .notes-section {
      margin-bottom: 1.5rem;
      padding-bottom: 1.5rem;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .notes-section:last-child {
      border-bottom: none;
    }
    
    .notes-section-title {
      display: flex;
      align-items: center;
      font-weight: 600;
      margin-bottom: 0.75rem;
      color: #4b5563;
    }
    
    .notes-section-icon {
      margin-right: 0.5rem;
    }
    
    .notes-content {
      background-color: #f9fafb;
      border-radius: 6px;
      padding: 1rem;
      font-size: 0.875rem;
    }
    
    .action-item {
      display: flex;
      align-items: center;
      padding: 0.75rem;
      background-color: #f9fafb;
      border-radius: 6px;
      margin-bottom: 0.5rem;
    }
    
    .action-item:last-child {
      margin-bottom: 0;
    }
    
    .action-item-checkbox {
      margin-right: 0.75rem;
    }
    
    .action-item-content {
      flex-grow: 1;
    }
    
    .action-item-desc {
      margin-bottom: 0.25rem;
    }
    
    .action-item-meta {
      font-size: 0.75rem;
      color: #6b7280;
    }
    
    .tag-list {
      display: flex;
      flex-wrap: wrap;
      margin-top: 0.5rem;
    }
    
    .tag {
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
      border-radius: 9999px;
      background-color: #e5e7eb;
      color: #4b5563;
      margin-right: 0.5rem;
      margin-bottom: 0.5rem;
    }
    
    .tag i {
      margin-right: 0.25rem;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .spinner-container {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    .spinner-text {
      margin-top: 1rem;
      color: var(--primary);
      font-weight: 500;
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
    }
    
    .badge-primary {
      background-color: var(--primary);
    }
    
    .badge-success {
      background-color: var(--success);
    }
    
    .badge-warning {
      background-color: var(--warning);
    }
    
    .pagination {
      margin-top: 1rem;
      justify-content: center;
    }
    
    /* Toast styling */
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }
    
    .toast {
      background-color: white;
      border-radius: 6px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
      min-width: 250px;
      margin-bottom: 0.75rem;
      display: flex;
      overflow: hidden;
      animation: slideIn 0.3s ease-out forwards;
      max-width: 450px;
    }
    
    @keyframes slideIn {
      from { transform: translateX(100%); }
      to { transform: translateX(0); }
    }
    
    .toast.success {
      border-left: 4px solid var(--success);
    }
    
    .toast.error {
      border-left: 4px solid var(--danger);
    }
    
    .toast.warning {
      border-left: 4px solid var(--warning);
    }
    
    .toast.info {
      border-left: 4px solid var(--primary);
    }
    
    .toast-header {
      padding: 0.75rem 1rem;
    }
    
    .toast-icon {
      margin-right: 10px;
      font-size: 20px;
    }
    
    .toast.success .toast-icon {
      color: var(--success);
    }
    
    .toast.error .toast-icon {
      color: var(--danger);
    }
    
    .toast.warning .toast-icon {
      color: var(--warning);
    }
    
    .toast.info .toast-icon {
      color: var(--primary);
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .toast-message {
      color: #6b7280;
      font-size: 0.875rem;
    }
    
    .toast-close {
      color: #9ca3af;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
      margin-left: auto;
      align-self: flex-start;
    }
    
    .toast-close:hover {
      color: #6b7280;
    }
    
    /* Print styles */
    @media print {
      .notes-list, .filters-section, .header button, .pagination {
        display: none !important;
      }
      
      .notes-detail {
        box-shadow: none !important;
      }
      
      .notes-wrapper {
        display: block !important;
      }
      
      .notes-detail {
        width: 100% !important;
      }
    }
  </style>
</head>
<body>
  <div class="container-fluid page-container">
    <div class="header">
      <h2 class="page-title">
        <i class="fas fa-user-tie text-primary mr-2"></i>
        Manager One-on-One Notes
      </h2>
      <div>
        <button class="btn btn-outline-primary mr-2" onclick="createNewSession()">
          <i class="fas fa-plus mr-1"></i> New Session
        </button>
        <button class="btn btn-outline-secondary mr-2" onclick="exportNotes()">
          <i class="fas fa-file-export mr-1"></i> Export
        </button>
        <button class="btn btn-outline-secondary" onclick="printNotes()">
          <i class="fas fa-print mr-1"></i> Print
        </button>
      </div>
    </div>
    
    <div class="filters-section">
      <div class="row">
        <div class="col-md-4">
          <div class="form-group">
            <label for="manager-filter">Manager</label>
            <select class="form-control" id="manager-filter" onchange="applyFilters()">
              <option value="">All Managers</option>
              <!-- Will be populated dynamically -->
            </select>
          </div>
        </div>
        <div class="col-md-3">
          <div class="form-group">
            <label for="date-range">Date Range</label>
            <select class="form-control" id="date-range" onchange="applyFilters()">
              <option value="all">All Time</option>
              <option value="30" selected>Last 30 Days</option>
              <option value="90">Last 90 Days</option>
              <option value="180">Last 180 Days</option>
              <option value="365">Last Year</option>
            </select>
          </div>
        </div>
        <div class="col-md-3">
          <div class="form-group">
            <label for="status-filter">Status</label>
            <select class="form-control" id="status-filter" onchange="applyFilters()">
              <option value="">All Status</option>
              <option value="complete">Complete</option>
              <option value="draft">Draft</option>
            </select>
          </div>
        </div>
        <div class="col-md-2">
          <div class="form-group">
            <label for="search-notes">Search</label>
            <div class="input-group">
              <input type="text" class="form-control" id="search-notes" placeholder="Search...">
              <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" onclick="applyFilters()">
                  <i class="fas fa-search"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="notes-wrapper">
      <div class="notes-list" id="notes-list">
        <!-- Notes list will be populated here -->
        <div class="text-center my-5">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
          <p class="mt-2">Loading notes...</p>
        </div>
      </div>
      
      <div class="notes-detail" id="notes-detail">
        <div class="notes-detail-empty">
          <i class="far fa-sticky-note empty-icon"></i>
          <h4>No Session Selected</h4>
          <p>Select a session from the list to view details</p>
        </div>
      </div>
    </div>
    
    <div class="pagination-container">
      <nav>
        <ul class="pagination" id="pagination">
          <!-- Pagination will be added here -->
        </ul>
      </nav>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loading-overlay" style="display:none;">
    <div class="spinner-container">
      <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div class="spinner-text">Loading data...</div>
    </div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container" id="toast-container"></div>
  
  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.6.0.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let allSessions = [];
    let currentPage = 1;
    const itemsPerPage = 10;
    let selectedSessionId = null;
    let uniqueManagers = [];
    
    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      loadSessions();
    });
    
    // Load all sessions
    function loadSessions() {
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(sessions) {
          allSessions = sessions || [];
          extractManagers();
          applySorting();
          applyFilters();
          showLoading(false);
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to load sessions: ' + error, 'error');
          document.getElementById('notes-list').innerHTML = `
            <div class="text-center my-5">
              <i class="fas fa-exclamation-circle text-danger" style="font-size: 2rem;"></i>
              <p class="mt-2">Failed to load sessions</p>
              <button class="btn btn-outline-primary btn-sm mt-2" onclick="loadSessions()">Retry</button>
            </div>
          `;
          showLoading(false);
        })
        .getManagerOneOnOneSessions();
    }
    
    // Extract unique managers from sessions
    function extractManagers() {
      uniqueManagers = [...new Set(allSessions.map(session => session.managerName))].filter(Boolean);
      
      // Sort managers alphabetically
      uniqueManagers.sort();
      
      // Populate manager filter dropdown
      const managerFilter = document.getElementById('manager-filter');
      managerFilter.innerHTML = '<option value="">All Managers</option>';
      
      uniqueManagers.forEach(manager => {
        const option = document.createElement('option');
        option.value = manager;
        option.textContent = manager;
        managerFilter.appendChild(option);
      });
    }
    
    // Apply sorting to sessions
    function applySorting() {
      // Sort by date (most recent first)
      allSessions.sort((a, b) => {
        return new Date(b.date) - new Date(a.date);
      });
    }
    
    // Apply filters to sessions
    function applyFilters() {
      const managerFilter = document.getElementById('manager-filter').value;
      const dateRange = document.getElementById('date-range').value;
      const statusFilter = document.getElementById('status-filter').value;
      const searchTerm = document.getElementById('search-notes').value.toLowerCase();
      
      // Filter by manager
      let filteredSessions = allSessions;
      if (managerFilter) {
        filteredSessions = filteredSessions.filter(session => session.managerName === managerFilter);
      }
      
      // Filter by date range
      if (dateRange && dateRange !== 'all') {
        const daysToSubtract = parseInt(dateRange);
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - daysToSubtract);
        
        filteredSessions = filteredSessions.filter(session => new Date(session.date) >= cutoffDate);
      }
      
      // Filter by status
      if (statusFilter) {
        const isComplete = statusFilter === 'complete';
        filteredSessions = filteredSessions.filter(session => session.complete === isComplete);
      }
      
      // Filter by search term
      if (searchTerm) {
        filteredSessions = filteredSessions.filter(session => {
          // Search in all text fields
          return (
            (session.managerName && session.managerName.toLowerCase().includes(searchTerm)) ||
            (session.agenda && session.agenda.toLowerCase().includes(searchTerm)) ||
            (session.careerNotes && session.careerNotes.toLowerCase().includes(searchTerm)) ||
            (session.feedbackNotes && session.feedbackNotes.toLowerCase().includes(searchTerm)) ||
            (session.additionalNotes && session.additionalNotes.toLowerCase().includes(searchTerm))
          );
        });
      }
      
      // Reset to first page when filters change
      currentPage = 1;
      
      // Update UI with filtered sessions
      updateSessionsList(filteredSessions);
    }
    
    // Update the sessions list in the UI
    function updateSessionsList(sessions) {
      const listContainer = document.getElementById('notes-list');
      
      if (!sessions || sessions.length === 0) {
        listContainer.innerHTML = `
          <div class="text-center my-5">
            <i class="far fa-sticky-note empty-icon"></i>
                    <h4>No Sessions Found</h4>
        <p>No sessions match your current filters</p>
        <button class="btn btn-outline-primary btn-sm mt-2" onclick="resetFilters()">Reset Filters</button>
      </div>
    `;
    
    // Clear pagination and detail view
    document.getElementById('pagination').innerHTML = '';
    document.getElementById('notes-detail').innerHTML = `
      <div class="notes-detail-empty">
        <i class="far fa-sticky-note empty-icon"></i>
        <h4>No Sessions Found</h4>
        <p>Try adjusting your filters to see manager one-on-one sessions</p>
      </div>
    `;
    return;
  }
  
  // Calculate pagination
  const totalPages = Math.ceil(sessions.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = Math.min(startIndex + itemsPerPage, sessions.length);
  const paginatedSessions = sessions.slice(startIndex, endIndex);
  
  // Build sessions list HTML
  let listHtml = '';
  
  paginatedSessions.forEach(session => {
    const sessionDate = formatDate(session.date);
    const statusBadge = session.complete ? 
      '<span class="note-badge badge-success">Complete</span>' : 
      '<span class="note-badge badge-warning">Draft</span>';
    
    // Create preview text from agenda or other content
    let previewText = 'No agenda';
    if (session.agenda) {
      previewText = stripHtml(session.agenda).substring(0, 60);
      if (previewText.length >= 60) previewText += '...';
    }
    
    // Determine if this session is the currently selected one
    const isActive = selectedSessionId === session.id ? 'active' : '';
    
    listHtml += `
      <div class="note-list-item ${isActive}" onclick="viewSessionDetail('${session.id}')">
        <div class="note-list-item-header">
          <div class="note-date">${sessionDate}</div>
          ${statusBadge}
        </div>
        <div class="note-manager">${session.managerName || 'No name'}</div>
        <div class="note-preview">${previewText}</div>
      </div>
    `;
  });
  
  listContainer.innerHTML = listHtml;
  
  // Update pagination UI
  updatePagination(sessions.length, totalPages);
  
  // If there was a selected session that is not in the current page, clear the selection
  if (selectedSessionId && !paginatedSessions.some(s => s.id === selectedSessionId)) {
    clearSessionDetail();
  }
}

// Update pagination controls
function updatePagination(totalItems, totalPages) {
  const pagination = document.getElementById('pagination');
  
  if (totalPages <= 1) {
    pagination.innerHTML = '';
    return;
  }
  
  let paginationHtml = '';
  
  // Previous button
  paginationHtml += `
    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
      <a class="page-link" href="#" onclick="changePage(${currentPage - 1}); return false;">
        <i class="fas fa-chevron-left"></i>
      </a>
    </li>
  `;
  
  // Page numbers
  const maxVisiblePages = 5;
  let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
  let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
  
  if (endPage - startPage + 1 < maxVisiblePages) {
    startPage = Math.max(1, endPage - maxVisiblePages + 1);
  }
  
  for (let i = startPage; i <= endPage; i++) {
    paginationHtml += `
      <li class="page-item ${i === currentPage ? 'active' : ''}">
        <a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>
      </li>
    `;
  }
  
  // Next button
  paginationHtml += `
    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
      <a class="page-link" href="#" onclick="changePage(${currentPage + 1}); return false;">
        <i class="fas fa-chevron-right"></i>
      </a>
    </li>
  `;
  
  pagination.innerHTML = paginationHtml;
}

// Change page
function changePage(page) {
  currentPage = page;
  applyFilters();
}

// Reset all filters
function resetFilters() {
  document.getElementById('manager-filter').value = '';
  document.getElementById('date-range').value = '30';
  document.getElementById('status-filter').value = '';
  document.getElementById('search-notes').value = '';
  
  applyFilters();
}

// View session detail
function viewSessionDetail(sessionId) {
  showLoading(true);
  selectedSessionId = sessionId;
  
  // Mark selected item in the list
  const items = document.querySelectorAll('.note-list-item');
  items.forEach(item => item.classList.remove('active'));
  
  // Find the item with the matching session ID and mark it active
  const selectedItem = document.querySelector(`.note-list-item[onclick*="${sessionId}"]`);
  if (selectedItem) {
    selectedItem.classList.add('active');
  }
  
  // Get session data from array
  const session = allSessions.find(s => s.id === sessionId);
  
  if (!session) {
    showToast('Error', 'Session not found', 'error');
    showLoading(false);
    return;
  }
  
  // Format date
  const sessionDate = formatDate(session.date, true);
  const formattedDuration = session.duration ? `${session.duration} minutes` : 'Not specified';
  
  // Build detail view HTML
  let detailHtml = `
    <div class="notes-detail-header">
      <div class="d-flex justify-content-between align-items-start">
        <div>
          <h4>${session.managerName || 'No Name'}</h4>
          <div class="text-muted">
            <i class="far fa-calendar-alt mr-1"></i> ${sessionDate}
            ${session.location ? `<span class="ml-3"><i class="fas fa-map-marker-alt mr-1"></i> ${session.location}</span>` : ''}
            <span class="ml-3"><i class="far fa-clock mr-1"></i> ${formattedDuration}</span>
          </div>
        </div>
        <div>
          ${session.complete ? 
            '<span class="badge badge-success px-3 py-2">Complete</span>' : 
            '<span class="badge badge-warning px-3 py-2">Draft</span>'}
        </div>
      </div>
      <div class="mt-3">
        <button class="btn btn-sm btn-outline-primary mr-2" onclick="editSession('${session.id}')">
          <i class="fas fa-edit mr-1"></i> Edit
        </button>
        <button class="btn btn-sm btn-outline-danger" onclick="confirmDeleteSession('${session.id}')">
          <i class="fas fa-trash-alt mr-1"></i> Delete
        </button>
      </div>
    </div>
    <div class="notes-detail-content">
  `;
  
  // Session rating
  if (session.rating) {
    const ratingEmojis = ['', '😞', '😐', '🙂', '😀', '🤩'];
    const ratingLabels = ['', 'Not Helpful', 'Neutral', 'Good', 'Great', 'Excellent'];
    
    detailHtml += `
      <div class="notes-section">
        <div class="notes-section-title">
          <i class="fas fa-star text-warning notes-section-icon"></i> Session Rating
        </div>
        <div class="d-flex align-items-center">
          <span style="font-size: 2rem; margin-right: 0.5rem;">${ratingEmojis[session.rating]}</span>
          <span>${ratingLabels[session.rating]}</span>
        </div>
      </div>
    `;
  }
  
  // Agenda
  if (session.agenda && session.agenda.trim() !== '<p><br></p>') {
    detailHtml += `
      <div class="notes-section">
        <div class="notes-section-title">
          <i class="fas fa-bullseye text-danger notes-section-icon"></i> Key Topics & Goals
        </div>
        <div class="notes-content">${session.agenda}</div>
      </div>
    `;
  }
  
  // Career notes
  if (session.careerNotes && session.careerNotes.trim() !== '<p><br></p>') {
    detailHtml += `
      <div class="notes-section">
        <div class="notes-section-title">
          <i class="fas fa-briefcase text-secondary notes-section-icon"></i> Career Development
        </div>
        <div class="notes-content">${session.careerNotes}</div>
        ${session.focusAreas && session.focusAreas.length ? `
          <div class="tag-list">
            ${session.focusAreas.map(area => `
              <div class="tag"><i class="fas fa-tag"></i> ${area}</div>
            `).join('')}
          </div>
        ` : ''}
      </div>
    `;
  }
  
  // Feedback notes
  if (session.feedbackNotes && session.feedbackNotes.trim() !== '<p><br></p>') {
    detailHtml += `
      <div class="notes-section">
        <div class="notes-section-title">
          <i class="fas fa-comment-alt text-info notes-section-icon"></i> Manager Feedback
        </div>
        <div class="notes-content">${session.feedbackNotes}</div>
        ${session.feedbackTypes && session.feedbackTypes.length ? `
          <div class="tag-list">
            ${session.feedbackTypes.map(type => `
              <div class="tag"><i class="fas fa-tag"></i> ${type}</div>
            `).join('')}
          </div>
        ` : ''}
      </div>
    `;
  }
  
  // Action items
  if (session.actionItems && session.actionItems.length) {
    detailHtml += `
      <div class="notes-section">
        <div class="notes-section-title">
          <i class="fas fa-tasks text-success notes-section-icon"></i> Action Items
        </div>
        <div class="action-items-list">
    `;
    
    session.actionItems.forEach(item => {
      const dueDateText = item.dueDate ? formatDate(item.dueDate) : 'No due date';
      const ownerText = item.owner === 'me' ? 'Me' : 
                       item.owner === 'manager' ? 'Manager' : 
                       item.owner === 'both' ? 'Both' : item.owner || 'Not assigned';
      
      detailHtml += `
        <div class="action-item">
          <div class="action-item-checkbox">
            <i class="far ${item.completed ? 'fa-check-square text-success' : 'fa-square'}"></i>
          </div>
          <div class="action-item-content">
            <div class="action-item-desc">${item.description}</div>
            <div class="action-item-meta">
              <span><i class="fas fa-user-check"></i> ${ownerText}</span>
              <span class="ml-3"><i class="far fa-calendar-alt"></i> ${dueDateText}</span>
            </div>
          </div>
        </div>
      `;
    });
    
    detailHtml += `
        </div>
      </div>
    `;
  }
  
  // Additional notes
  if (session.additionalNotes && session.additionalNotes.trim() !== '<p><br></p>') {
    detailHtml += `
      <div class="notes-section">
        <div class="notes-section-title">
          <i class="fas fa-sticky-note text-warning notes-section-icon"></i> Additional Notes
        </div>
        <div class="notes-content">${session.additionalNotes}</div>
      </div>
    `;
  }
  
  // Follow-up information
  if (session.followUpDate) {
    detailHtml += `
      <div class="notes-section">
        <div class="notes-section-title">
          <i class="fas fa-calendar-alt text-danger notes-section-icon"></i> Follow-up
        </div>
        <div class="mb-2">
          <strong>Next session:</strong> ${formatDate(session.followUpDate)}
        </div>
        ${session.emailReminder && session.emailReminder !== 'none' ? `
          <div>
            <strong>Reminder:</strong> ${session.emailReminder === 'day' ? '1 day before' : '1 week before'}
          </div>
        ` : ''}
      </div>
    `;
  }
  
  // Session metadata
  detailHtml += `
    <div class="notes-section">
      <div class="notes-section-title">
        <i class="fas fa-info-circle text-secondary notes-section-icon"></i> Session Details
      </div>
      <div class="row">
        <div class="col-md-6">
          <div class="mb-1"><strong>Created:</strong> ${formatDate(session.createdDate)}</div>
          <div><strong>Session ID:</strong> ${session.id}</div>
        </div>
        <div class="col-md-6">
          <div class="mb-1"><strong>Last Updated:</strong> ${formatDate(session.updatedDate)}</div>
        </div>
      </div>
    </div>
  `;
  
  detailHtml += `
    </div>
  `;
  
  document.getElementById('notes-detail').innerHTML = detailHtml;
  showLoading(false);
}

// Clear session detail view
function clearSessionDetail() {
  selectedSessionId = null;
  
  document.getElementById('notes-detail').innerHTML = `
    <div class="notes-detail-empty">
      <i class="far fa-sticky-note empty-icon"></i>
      <h4>No Session Selected</h4>
      <p>Select a session from the list to view details</p>
    </div>
  `;
}

// Create new session
function createNewSession() {
  google.script.run
    .withSuccessHandler(function() {
      // Redirect to the form page
      google.script.run.createManagerOneOnOneForm();
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to open form: ' + error, 'error');
    })
    .cacheManagerOneOnOneSessionId(null);
}

// Edit session
function editSession(sessionId) {
  google.script.run
    .withSuccessHandler(function() {
      // Redirect to the form page
      google.script.run.createManagerOneOnOneForm();
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to open form: ' + error, 'error');
    })
    .cacheManagerOneOnOneSessionId(sessionId);
}

// Confirm delete session
function confirmDeleteSession(sessionId) {
  if (confirm('Are you sure you want to delete this session? This action cannot be undone.')) {
    deleteSession(sessionId);
  }
}

// Delete session
function deleteSession(sessionId) {
  showLoading(true);
  
  google.script.run
    .withSuccessHandler(function(result) {
      if (result.success) {
        showToast('Success', 'Session deleted successfully', 'success');
        
        // Remove session from array
        allSessions = allSessions.filter(s => s.id !== sessionId);
        
        // Clear selection if the deleted session was selected
        if (selectedSessionId === sessionId) {
          clearSessionDetail();
        }
        
        // Refresh list
        applyFilters();
      } else {
        showToast('Error', result.message, 'error');
      }
      showLoading(false);
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to delete session: ' + error, 'error');
      showLoading(false);
    })
    .deleteManagerOneOnOneSession(sessionId);
}

// Export notes
function exportNotes() {
  showLoading(true);
  
  // Get current filters
  const filters = {
    manager: document.getElementById('manager-filter').value,
    dateRange: document.getElementById('date-range').value,
    status: document.getElementById('status-filter').value,
    searchTerm: document.getElementById('search-notes').value
  };
  
  google.script.run
    .withSuccessHandler(function(result) {
      if (result.success) {
        showToast('Success', 'Notes exported successfully', 'success');
        
        // Open the exported spreadsheet in a new tab
        window.open(result.url, '_blank');
      } else {
        showToast('Error', result.message, 'error');
      }
      showLoading(false);
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to export notes: ' + error, 'error');
      showLoading(false);
    })
    .exportManagerOneOnOneNotes(filters);
}

// Print notes
function printNotes() {
  // If no session is selected, show message
  if (!selectedSessionId) {
    showToast('Info', 'Please select a session to print', 'info');
    return;
  }
  
  window.print();
}

// Format date
function formatDate(dateString, includeTime = false) {
  if (!dateString) return 'N/A';
  
  try {
    const date = new Date(dateString);
    
    if (isNaN(date.getTime())) {
      return 'Invalid Date';
    }
    
    const options = includeTime ? 
      { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' } : 
      { year: 'numeric', month: 'short', day: 'numeric' };
    
    return date.toLocaleDateString(undefined, options);
  } catch (e) {
    return 'Date Error';
  }
}

// Strip HTML tags from text
function stripHtml(html) {
  if (!html) return '';
  
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = html;
  return tempDiv.textContent || tempDiv.innerText || '';
}

// Show/hide loading overlay
function showLoading(show) {
  document.getElementById('loading-overlay').style.display = show ? 'flex' : 'none';
}

// Show toast notification
function showToast(title, message, type) {
  const toastContainer = document.getElementById('toast-container');
  const id = 'toast-' + Date.now();
  
  let iconClass = 'fas fa-info-circle';
  if (type === 'success') iconClass = 'fas fa-check-circle';
  if (type === 'error') iconClass = 'fas fa-exclamation-circle';
  if (type === 'warning') iconClass = 'fas fa-exclamation-triangle';
  
  const toastHtml = `
    <div class="toast ${type}" id="${id}">
      <div class="toast-header">
        <i class="${iconClass} toast-icon"></i>
        <div>
          <div class="toast-title">${title}</div>
          <div class="toast-message">${message}</div>
        </div>
        <span class="toast-close" onclick="dismissToast('${id}')">&times;</span>
      </div>
    </div>
  `;
  
  toastContainer.insertAdjacentHTML('beforeend', toastHtml);
  
  // Auto-dismiss after 5 seconds
  setTimeout(() => dismissToast(id), 5000);
}

// Dismiss toast
function dismissToast(id) {
  const toast = document.getElementById(id);
  if (toast) {
    toast.style.opacity = '0';
    setTimeout(() => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 300);
  }
}
</script> 
</body> 
</html> 

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    :root {
      --primary: #4f46e5;
      --primary-light: #818cf8;
      --primary-dark: #4338ca;
      --secondary: #0ea5e9;
      --success: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --light-bg: #f9fafb;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      color: #1f2937;
      background-color: var(--light-bg);
      padding: 1rem;
    }
    
    .dashboard-container {
      max-width: 100%;
      margin: 0 auto;
    }
    
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      background-color: white;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .page-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #111827;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .filters-section {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 1rem 1.5rem;
      margin-bottom: 1.5rem;
    }
    
    .metrics-card {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      transition: transform 0.2s;
    }
    
    .metrics-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .metric-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }
    
    .metric-label {
      color: #6b7280;
      font-size: 0.875rem;
    }
    
    .metric-icon {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      background-color: #eef2ff;
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      margin-right: 1rem;
    }
    
    .chart-container {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
    }
    
    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }
    
    .chart-title {
      font-weight: 600;
      color: #374151;
      margin: 0;
    }
    
    .trend-up {
      color: var(--success);
    }
    
    .trend-down {
      color: var(--danger);
    }
    
    .feedback-card {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
    }
    
    .feedback-icon {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      background-color: #eef2ff;
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      margin-right: 1rem;
    }
    
    .feedback-content {
      flex-grow: 1;
    }
    
    .feedback-text {
      margin-bottom: 0.5rem;
      font-style: italic;
    }
    
    .feedback-source {
      font-size: 0.875rem;
      color: #6b7280;
    }
    
    .emoji-container {
      display: flex;
      justify-content: space-between;
      margin: 1.5rem 0;
    }
    
    .emoji-item {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    .emoji {
      font-size: 2rem;
      margin-bottom: 0.5rem;
    }
    
    .emoji-count {
      font-weight: 600;
    }
    
    .emoji-label {
      font-size: 0.75rem;
      color: #6b7280;
    }
    
    .word-cloud-container {
      height: 250px;
      position: relative;
    }
    
    .word-cloud-item {
      position: absolute;
      transform: translate(-50%, -50%);
      color: var(--primary);
      transition: transform 0.2s, color 0.2s;
      cursor: default;
    }
    
    .word-cloud-item:hover {
      transform: translate(-50%, -50%) scale(1.1);
      color: var(--primary-dark);
    }
    
    .timeline-container {
      position: relative;
      padding-left: 30px;
    }
    
    .timeline-line {
      position: absolute;
      left: 15px;
      top: 0;
      bottom: 0;
      width: 2px;
      background-color: #e5e7eb;
      z-index: 1;
    }
    
    .timeline-item {
      position: relative;
      margin-bottom: 1.5rem;
    }
    
    .timeline-item:last-child {
      margin-bottom: 0;
    }
    
    .timeline-dot {
      position: absolute;
      left: -30px;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      background-color: var(--primary);
      border: 3px solid white;
      z-index: 2;
    }
    
    .timeline-content {
      background-color: #f3f4f6;
      border-radius: 6px;
      padding: 1rem;
    }
    
    .timeline-date {
      font-size: 0.875rem;
      color: #6b7280;
      margin-bottom: 0.5rem;
    }
    
    .timeline-title {
      font-weight: 600;
      margin-bottom: 0.5rem;
    }
    
    .timeline-text {
      font-size: 0.875rem;
    }
    
    .tag-list {
      display: flex;
      flex-wrap: wrap;
      margin-top: 1rem;
    }
    
    .tag {
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
      border-radius: 9999px;
      background-color: #eef2ff;
      color: var(--primary);
      margin-right: 0.5rem;
      margin-bottom: 0.5rem;
    }
    
    .tag i {
      margin-right: 0.25rem;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .spinner-container {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    .spinner-text {
      margin-top: 1rem;
      color: var(--primary);
      font-weight: 500;
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
    }
    
    .card {
      border: none;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .card-header {
      background-color: white;
      border-bottom: 1px solid #e5e7eb;
      font-weight: 600;
    }
    
    .nav-tabs {
      border-bottom: none;
    }
    
    .nav-tabs .nav-link {
      border: none;
      color: #6b7280;
      font-weight: 500;
    }
    
    .nav-tabs .nav-link.active {
      border-bottom: 2px solid var(--primary);
      color: var(--primary);
      font-weight: 600;
      background-color: transparent;
    }
    
    /* Toast styling */
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }
    
    .toast {
      background-color: white;
      border-radius: 6px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
      min-width: 250px;
      margin-bottom: 0.75rem;
      display: flex;
      overflow: hidden;
      animation: slideIn 0.3s ease-out forwards;
      max-width: 450px;
    }
    
    @keyframes slideIn {
      from { transform: translateX(100%); }
      to { transform: translateX(0); }
    }
    
    .toast.success {
      border-left: 4px solid var(--success);
    }
    
    .toast.error {
      border-left: 4px solid var(--danger);
    }
    
    .toast.warning {
      border-left: 4px solid var(--warning);
    }
    
    .toast.info {
      border-left: 4px solid var(--primary);
    }
    
    .toast-header {
      padding: 0.75rem 1rem;
    }
    
    .toast-icon {
      margin-right: 10px;
      font-size: 20px;
    }
    
    .toast.success .toast-icon {
      color: var(--success);
    }
    
    .toast.error .toast-icon {
      color: var(--danger);
    }
    
    .toast.warning .toast-icon {
      color: var(--warning);
    }
    
    .toast.info .toast-icon {
      color: var(--primary);
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .toast-message {
      color: #6b7280;
      font-size: 0.875rem;
    }
    
    .toast-close {
      color: #9ca3af;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
      margin-left: auto;
      align-self: flex-start;
    }
    
    .toast-close:hover {
      color: #6b7280;
    }
  </style>
</head>
<body>
  <div class="container-fluid dashboard-container">
    <div class="header">
      <h2 class="page-title">
        <i class="fas fa-user-tie text-primary mr-2"></i>
        Manager One-on-One Dashboard
      </h2>
      <div>
        <button class="btn btn-outline-primary mr-2" onclick="createNewSession()">
          <i class="fas fa-plus mr-1"></i> New Session
        </button>
        <button class="btn btn-outline-secondary" onclick="exportDashboard()">
          <i class="fas fa-file-export mr-1"></i> Export
        </button>
      </div>
    </div>
    
    <div class="filters-section">
      <div class="row">
        <div class="col-md-4">
          <div class="form-group">
            <label for="manager-filter">Manager</label>
            <select class="form-control" id="manager-filter" onchange="applyFilters()">
              <option value="">All Managers</option>
              <!-- Will be populated dynamically -->
            </select>
          </div>
        </div>
        <div class="col-md-4">
          <div class="form-group">
            <label for="time-period">Time Period</label>
            <select class="form-control" id="time-period" onchange="applyFilters()">
              <option value="30">Last 30 Days</option>
              <option value="90">Last 90 Days</option>
              <option value="180">Last 180 Days</option>
              <option value="365" selected>Last 12 Months</option>
              <option value="all">All Time</option>
            </select>
          </div>
        </div>
        <div class="col-md-4">
          <div class="form-group">
            <label for="chart-type">Chart Type</label>
            <select class="form-control" id="chart-type" onchange="updateChartType()">
              <option value="line">Line Chart</option>
              <option value="bar">Bar Chart</option>
              <option value="radar">Radar Chart</option>
            </select>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row" id="metrics-overview">
      <div class="col-md-3">
        <div class="metrics-card">
          <div class="d-flex align-items-center">
            <div class="metric-icon">
              <i class="fas fa-user-tie"></i>
            </div>
            <div>
              <div class="metric-value" id="total-sessions">0</div>
              <div class="metric-label">Total Sessions</div>
            </div>
          </div>
          <div class="text-right mt-2">
            <span class="badge badge-light" id="sessions-trend">
              <i class="fas fa-equals text-secondary"></i> No change
            </span>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="metrics-card">
          <div class="d-flex align-items-center">
            <div class="metric-icon">
              <i class="far fa-calendar-alt"></i>
            </div>
            <div>
              <div class="metric-value" id="avg-frequency">0</div>
              <div class="metric-label">Avg. Frequency (days)</div>
            </div>
          </div>
          <div class="text-right mt-2">
            <span class="badge badge-light" id="frequency-trend">
              <i class="fas fa-equals text-secondary"></i> No change
            </span>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="metrics-card">
          <div class="d-flex align-items-center">
            <div class="metric-icon">
              <i class="fas fa-star"></i>
            </div>
            <div>
              <div class="metric-value" id="avg-rating">0.0</div>
              <div class="metric-label">Average Rating</div>
            </div>
          </div>
          <div class="text-right mt-2">
            <span class="badge badge-light" id="rating-trend">
              <i class="fas fa-equals text-secondary"></i> No change
            </span>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="metrics-card">
          <div class="d-flex align-items-center">
            <div class="metric-icon">
              <i class="fas fa-tasks"></i>
            </div>
            <div>
              <div class="metric-value" id="action-items-count">0</div>
              <div class="metric-label">Action Items</div>
            </div>
          </div>
          <div class="text-right mt-2">
            <span class="badge badge-light" id="action-items-completion">
              0% completed
            </span>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-8">
        <div class="chart-container">
          <div class="chart-header">
            <h5 class="chart-title">Sessions Overview</h5>
            <div class="btn-group btn-group-sm" role="group">
              <button type="button" class="btn btn-outline-secondary active" onclick="updateTimeFrame('monthly')">Monthly</button>
              <button type="button" class="btn btn-outline-secondary" onclick="updateTimeFrame('quarterly')">Quarterly</button>
            </div>
          </div>
          <div>
            <canvas id="sessions-chart" height="250"></canvas>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="chart-container">
          <div class="chart-header">
            <h5 class="chart-title">Session Ratings</h5>
          </div>
          <div class="emoji-container">
            <div class="emoji-item">
              <div class="emoji">😞</div>
              <div class="emoji-count" id="rating-1-count">0</div>
              <div class="emoji-label">Not Helpful</div>
            </div>
            <div class="emoji-item">
              <div class="emoji">😐</div>
              <div class="emoji-count" id="rating-2-count">0</div>
              <div class="emoji-label">Neutral</div>
            </div>
            <div class="emoji-item">
              <div class="emoji">🙂</div>
              <div class="emoji-count" id="rating-3-count">0</div>
              <div class="emoji-label">Good</div>
            </div>
            <div class="emoji-item">
              <div class="emoji">😀</div>
              <div class="emoji-count" id="rating-4-count">0</div>
              <div class="emoji-label">Great</div>
            </div>
            <div class="emoji-item">
              <div class="emoji">🤩</div>
              <div class="emoji-count" id="rating-5-count">0</div>
              <div class="emoji-label">Excellent</div>
            </div>
          </div>
          <div>
            <canvas id="ratings-chart" height="130"></canvas>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-6">
        <div class="chart-container">
          <div class="chart-header">
            <h5 class="chart-title">Focus Areas</h5>
          </div>
          <div>
            <canvas id="focus-areas-chart" height="300"></canvas>
          </div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="chart-container">
          <div class="chart-header">
            <h5 class="chart-title">Feedback Types</h5>
          </div>
          <div>
            <canvas id="feedback-types-chart" height="300"></canvas>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-8">
        <div class="chart-container">
          <div class="chart-header">
            <h5 class="chart-title">Common Topics</h5>
          </div>
          <div class="word-cloud-container" id="word-cloud-container">
            <!-- Word cloud will be generated here -->
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="chart-container">
          <div class="chart-header">
            <h5 class="chart-title">Action Item Status</h5>
          </div>
          <div>
            <canvas id="action-items-chart" height="250"></canvas>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-6">
        <div class="chart-container">
          <div class="chart-header">
            <h5 class="chart-title">Recent Feedback Highlights</h5>
          </div>
          <div id="feedback-highlights">
            <!-- Feedback highlights will be populated here -->
            <div class="text-center my-4">
              <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="chart-container">
          <div class="chart-header">
            <h5 class="chart-title">Session Timeline</h5>
          </div>
          <div class="timeline-container" id="timeline-container">
            <div class="timeline-line"></div>
            <!-- Timeline items will be populated here -->
            <div class="text-center my-4">
              <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-12">
        <div class="chart-container">
          <div class="chart-header">
            <h5 class="chart-title">Upcoming & Recent Sessions</h5>
          </div>
          <ul class="nav nav-tabs" id="sessions-tabs" role="tablist">
            <li class="nav-item">
              <a class="nav-link active" id="upcoming-tab" data-toggle="tab" href="#upcoming" role="tab">Upcoming</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" id="recent-tab" data-toggle="tab" href="#recent" role="tab">Recent</a>
            </li>
          </ul>
          <div class="tab-content p-3">
            <div class="tab-pane fade show active" id="upcoming" role="tabpanel">
              <div id="upcoming-sessions">
                <!-- Upcoming sessions will be populated here -->
                <div class="text-center my-4">
                  <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                  </div>
                </div>
              </div>
            </div>
            <div class="tab-pane fade" id="recent" role="tabpanel">
              <div id="recent-sessions">
                <!-- Recent sessions will be populated here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loading-overlay" style="display:none;">
    <div class="spinner-container">
      <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div class="spinner-text">Loading dashboard data...</div>
    </div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container" id="toast-container"></div>
  
  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.6.0.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
  <script>
    // Global variables
    let allSessions = [];
    let sessionsChart = null;
    let ratingsChart = null;
    let focusAreasChart = null;
    let feedbackTypesChart = null;
    let actionItemsChart = null;
    let currentChartType = 'line';
    let currentTimeFrame = 'monthly';
    let uniqueManagers = [];
    let dashboardData = null;
    
    // Chart colors
    const chartColors = [
      'rgba(79, 70, 229, 0.8)',
      'rgba(14, 165, 233, 0.8)',
      'rgba(16, 185, 129, 0.8)',
      'rgba(249, 115, 22, 0.8)',
      'rgba(239, 68, 68, 0.8)',
      'rgba(139, 92, 246, 0.8)',
      'rgba(20, 184, 166, 0.8)',
      'rgba(245, 158, 11, 0.8)'
    ];
    
    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      loadDashboardData();
    });
    
    // Load dashboard data
    function loadDashboardData() {
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(data) {
          dashboardData = data;
          allSessions = data.sessions || [];
          
          // Extract unique managers
          extractManagers();
          
          // Update UI components
          updateMetricsOverview(data.metrics);
          updateSessionsChart(data.sessionsChartData);
          updateRatingsChart(data.ratingsData);
          updateFocusAreasChart(data.focusAreasData);
          updateFeedbackTypesChart(data.feedbackTypesData);
          updateActionItemsChart(data.actionItemsData);
          updateWordCloud(data.topicData);
          updateFeedbackHighlights(data.feedbackHighlights);
          updateTimeline(data.timeline);
          updateUpcomingSessions(data.upcomingSessions);
          updateRecentSessions(data.recentSessions);
          
          showLoading(false);
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to load dashboard data: ' + error, 'error');
          showLoading(false);
        })
        .getManagerOneOnOneDashboardData(getFilters());
    }
    
    // Extract unique managers from sessions
    function extractManagers() {
      uniqueManagers = [...new Set(allSessions.map(session => session.managerName))].filter(Boolean);
      
      // Sort managers alphabetically
      uniqueManagers.sort();
      
      // Populate manager filter dropdown
      const managerFilter = document.getElementById('manager-filter');
      managerFilter.innerHTML = '<option value="">All Managers</option>';
      
      uniqueManagers.forEach(manager => {
        const option = document.createElement('option');
        option.value = manager;
        option.textContent = manager;
        managerFilter.appendChild(option);
      });
    }
    
    // Get current filters
    function getFilters() {
      return {
        manager: document.getElementById('manager-filter').value,
        timePeriod: document.getElementById('time-period').value,
        chartType: currentChartType,
        timeFrame: currentTimeFrame
      };
    }
    
    // Apply filters
    function applyFilters() {
      loadDashboardData();
    }
    
    // Update chart type
    function updateChartType() {
      currentChartType = document.getElementById('chart-type').value;
      loadDashboardData();
    }
    
    // Update time frame
    function updateTimeFrame(timeFrame) {
      currentTimeFrame = timeFrame;
      
      // Update button styling
      document.querySelectorAll('.chart-header .btn-group .btn').forEach(btn => {
        btn.classList.remove('active');
      });
      
      document.querySelector(`.chart-header .btn-group .btn[onclick*="${timeFrame}"]`).classList.add('active');
      
      loadDashboardData();
    }
    
    // Update metrics overview
    function updateMetricsOverview(metrics) {
      if (!metrics) return;
      
      // Total sessions
      document.getElementById('total-sessions').textContent = metrics.totalSessions;
      
      // Sessions trend
      const sessionsTrendEl = document.getElementById('sessions-trend');
      if (metrics.sessionsTrend > 0) {
        sessionsTrendEl.innerHTML = `<i class="fas fa-arrow-up trend-up"></i> ${metrics.sessionsTrend}% increase`;
        sessionsTrendEl.className = 'badge badge-success';
      } else if (metrics.sessionsTrend < 0) {
        sessionsTrendEl.innerHTML = `<i class="fas fa-arrow-down trend-down"></i> ${Math.abs(metrics.sessionsTrend)}% decrease`;
        sessionsTrendEl.className = 'badge badge-danger';
      } else {
        sessionsTrendEl.innerHTML = `<i class="fas fa-equals text-secondary"></i> No change`;
        sessionsTrendEl.className = 'badge badge-light';
      }
      
      // Average frequency
      document.getElementById('avg-frequency').textContent = metrics.avgFrequency;
      
      // Frequency trend
      const frequencyTrendEl = document.getElementById('frequency-trend');
      if (metrics.frequencyTrend < 0) {
        // Negative frequency trend is actually good (less days between sessions)
        frequencyTrendEl.innerHTML = `<i class="fas fa-arrow-down trend-up"></i> ${Math.abs(metrics.frequencyTrend)}% decrease`;
        frequencyTrendEl.className = 'badge badge-success';
      } else if (metrics.frequencyTrend > 0) {
        frequencyTrendEl.innerHTML = `<i class="fas fa-arrow-up trend-down"></i> ${metrics.frequencyTrend}% increase`;
        frequencyTrendEl.className = 'badge badge-danger';
      } else {
        frequencyTrendEl.innerHTML = `<i class="fas fa-equals text-secondary"></i> No change`;
        frequencyTrendEl.className = 'badge badge-light';
      }
      
      // Average rating
      document.getElementById('avg-rating').textContent = metrics.avgRating.toFixed(1);
      
      // Rating trend
      const ratingTrendEl = document.getElementById('rating-trend');
      if (metrics.ratingTrend > 0) {
        ratingTrendEl.innerHTML = `<i class="fas fa-arrow-up trend-up"></i> ${metrics.ratingTrend}% increase`;
        ratingTrendEl.className = 'badge badge-success';
      } else if (metrics.ratingTrend < 0) {
        ratingTrendEl.innerHTML = `<i class="fas fa-arrow-down trend-down"></i> ${Math.abs(metrics.ratingTrend)}% decrease`;
        ratingTrendEl.className = 'badge badge-danger';
      } else {
        ratingTrendEl.innerHTML = `<i class="fas fa-equals text-secondary"></i> No change`;
        ratingTrendEl.className = 'badge badge-light';
      }
      
      // Action items
      document.getElementById('action-items-count').textContent = metrics.actionItemsCount;
      
      // Action items completion
      const completionRate = metrics.actionItemsCompletionRate || 0;
      const actionItemsCompletionEl = document.getElementById('action-items-completion');
      actionItemsCompletionEl.textContent = `${completionRate}% completed`;
      
      if (completionRate >= 75) {
        actionItemsCompletionEl.className = 'badge badge-success';
      } else if (completionRate >= 50) {
        actionItemsCompletionEl.className = 'badge badge-warning';
      } else {
        actionItemsCompletionEl.className = 'badge badge-danger';
      }
      
      // Update rating counts
      for (let i = 1; i <= 5; i++) {
        document.getElementById(`rating-${i}-count`).textContent = metrics.ratingCounts[i] || 0;
      }
    }
    
    // Update sessions chart
    function updateSessionsChart(data) {
      if (!data) return;
      
      const ctx = document.getElementById('sessions-chart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (sessionsChart) {
        sessionsChart.destroy();
      }
      
      // Create new chart
      sessionsChart = new Chart(ctx, {
        type: currentChartType,
        data: {
          labels: data.labels,
          datasets: [
            {
              label: 'Sessions',
              backgroundColor: 'rgba(79, 70, 229, 0.2)',
              borderColor: 'rgba(79, 70, 229, 1)',
              borderWidth: 2,
              data: data.sessions,
              tension: 0.4,
              fill: true
            },
            {
              label: 'Action Items',
              backgroundColor: 'rgba(14, 165, 233, 0.2)',
              borderColor: 'rgba(14, 165, 233, 1)',
              borderWidth: 2,
              data: data.actionItems,
              tension: 0.4,
              fill: true
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            mode: 'index',
            intersect: false
          },
          plugins: {
            legend: {
              position: 'top',
            },
            tooltip: {
              padding: 12,
              boxPadding: 3
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                precision: 0
              }
            }
          }
        }
      });
    }
    
    // Update ratings chart
    function updateRatingsChart(data) {
      if (!data) return;
      
      const ctx = document.getElementById('ratings-chart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (ratingsChart) {
        ratingsChart.destroy();
      }
      
      // Create new chart
      ratingsChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: ['Not Helpful', 'Neutral', 'Good', 'Great', 'Excellent'],
          datasets: [{
            label: 'Session Ratings',
            data: [
              data[1] || 0,
              data[2] || 0,
              data[3] || 0,
              data[4] || 0,
              data[5] || 0
            ],
            backgroundColor: [
              'rgba(239, 68, 68, 0.6)',
              'rgba(245, 158, 11, 0.6)',
              'rgba(16, 185, 129, 0.6)',
              'rgba(14, 165, 233, 0.6)',
              'rgba(79, 70, 229, 0.6)'
            ],
            borderColor: [
              'rgba(239, 68, 68, 1)',
              'rgba(245, 158, 11, 1)',
              'rgba(16, 185, 129, 1)',
              'rgba(14, 165, 233, 1)',
              'rgba(79, 70, 229, 1)'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                precision: 0
              }
            }
          }
        }
      });
    }
    
    // Update focus areas chart
    function updateFocusAreasChart(data) {
      if (!data) return;
      
      const ctx = document.getElementById('focus-areas-chart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (focusAreasChart) {
        focusAreasChart.destroy();
      }
      
      // Sort data by value
      const sortedData = [...data].sort((a, b) => b.value - a.value);
      
      // Create new chart
      focusAreasChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: sortedData.map(item => item.label),
          datasets: [{
            data: sortedData.map(item => item.value),
            backgroundColor: chartColors,
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'right'
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.raw || 0;
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value / total) * 100);
                  return `${label}: ${value} (${percentage}%)`;
                }
              }
            }
          }
        }
      });
    }
    
    // Update feedback types chart
    function updateFeedbackTypesChart(data) {
      if (!data) return;
      
      const ctx = document.getElementById('feedback-types-chart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (feedbackTypesChart) {
        feedbackTypesChart.destroy();
      }
      
      // Sort data by value
      const sortedData = [...data].sort((a, b) => b.value - a.value);
      
      // Create new chart
      feedbackTypesChart = new Chart(ctx, {
        type: 'polarArea',
        data: {
          labels: sortedData.map(item => item.label),
          datasets: [{
            data: sortedData.map(item => item.value),
            backgroundColor: chartColors,
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'right'
            }
          },
          scales: {
            r: {
              ticks: {
                display: false
              }
            }
          }
        }
      });
    }
    
    // Update action items chart
    function updateActionItemsChart(data) {
      if (!data) return;
      
      const ctx = document.getElementById('action-items-chart').getContext('2d');
      
      // Destroy existing chart if it exists
      if (actionItemsChart) {
        actionItemsChart.destroy();
      }
      
      // Create new chart
      actionItemsChart = new Chart(ctx, {
        type: 'pie',
        data: {
          labels: ['Completed', 'In Progress', 'Not Started'],
          datasets: [{
            data: [
              data.completed || 0,
              data.inProgress || 0,
              data.notStarted || 0
            ],
            backgroundColor: [
                        'rgba(16, 185, 129, 0.6)',  // Completed - green
          'rgba(245, 158, 11, 0.6)',  // In Progress - yellow
          'rgba(239, 68, 68, 0.6)'    // Not Started - red
        ],
        borderColor: [
          'rgba(16, 185, 129, 1)',
          'rgba(245, 158, 11, 1)',
          'rgba(239, 68, 68, 1)'
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom'
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              const label = context.label || '';
              const value = context.raw || 0;
              const total = context.dataset.data.reduce((a, b) => a + b, 0);
              const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
              return `${label}: ${value} (${percentage}%)`;
            }
          }
        }
      }
    }
  });
}

// Update word cloud
function updateWordCloud(data) {
  if (!data || !data.length) {
    document.getElementById('word-cloud-container').innerHTML = `
      <div class="text-center my-5">
        <p class="text-muted">No topic data available</p>
      </div>
    `;
    return;
  }
  
  const container = document.getElementById('word-cloud-container');
  container.innerHTML = '';
  
  // Calculate min and max frequencies for sizing
  const frequencies = data.map(item => item.count);
  const minFreq = Math.min(...frequencies);
  const maxFreq = Math.max(...frequencies);
  
  // Function to map frequency to font size (between 10px and 32px)
  const getFontSize = (count) => {
    if (minFreq === maxFreq) return 20;
    const size = 10 + ((count - minFreq) / (maxFreq - minFreq)) * 22;
    return size;
  };
  
  // Place words randomly in the container
  data.forEach(item => {
    const fontSize = getFontSize(item.count);
    
    // Create word element
    const wordEl = document.createElement('div');
    wordEl.className = 'word-cloud-item';
    wordEl.textContent = item.word;
    wordEl.style.fontSize = `${fontSize}px`;
    wordEl.style.fontWeight = fontSize > 20 ? 'bold' : 'normal';
    wordEl.title = `${item.count} occurrences`;
    
    // Random position
    const left = Math.random() * 90 + 5; // 5% to 95%
    const top = Math.random() * 90 + 5;  // 5% to 95%
    wordEl.style.left = `${left}%`;
    wordEl.style.top = `${top}%`;
    
    // Add to container
    container.appendChild(wordEl);
  });
}

// Update feedback highlights
function updateFeedbackHighlights(data) {
  if (!data || !data.length) {
    document.getElementById('feedback-highlights').innerHTML = `
      <div class="text-center my-4">
        <p class="text-muted">No feedback highlights available</p>
      </div>
    `;
    return;
  }
  
  const container = document.getElementById('feedback-highlights');
  let html = '';
  
  data.forEach(item => {
    let iconClass = 'fas fa-comment text-primary';
    if (item.type === 'positive') {
      iconClass = 'fas fa-thumbs-up text-success';
    } else if (item.type === 'constructive') {
      iconClass = 'fas fa-tools text-warning';
    } else if (item.type === 'performance') {
      iconClass = 'fas fa-chart-line text-info';
    }
    
    html += `
      <div class="feedback-card">
        <div class="feedback-icon">
          <i class="${iconClass}"></i>
        </div>
        <div class="feedback-content">
          <div class="feedback-text">"${item.text}"</div>
          <div class="feedback-source">
            ${formatDate(item.date)} - ${item.managerName || 'Unknown'}
          </div>
        </div>
      </div>
    `;
  });
  
  container.innerHTML = html;
}

// Update timeline
function updateTimeline(data) {
  if (!data || !data.length) {
    document.getElementById('timeline-container').innerHTML = `
      <div class="timeline-line"></div>
      <div class="text-center my-4">
        <p class="text-muted">No timeline data available</p>
      </div>
    `;
    return;
  }
  
  const container = document.getElementById('timeline-container');
  let html = '<div class="timeline-line"></div>';
  
  data.forEach(item => {
    html += `
      <div class="timeline-item">
        <div class="timeline-dot"></div>
        <div class="timeline-content">
          <div class="timeline-date">${formatDate(item.date)}</div>
          <div class="timeline-title">${item.title}</div>
          <div class="timeline-text">${item.text}</div>
          ${item.tags && item.tags.length ? `
            <div class="tag-list">
              ${item.tags.map(tag => `
                <div class="tag"><i class="fas fa-tag"></i> ${tag}</div>
              `).join('')}
            </div>
          ` : ''}
        </div>
      </div>
    `;
  });
  
  container.innerHTML = html;
}

// Update upcoming sessions
function updateUpcomingSessions(data) {
  const container = document.getElementById('upcoming-sessions');
  
  if (!data || !data.length) {
    container.innerHTML = `
      <div class="text-center my-4">
        <p class="text-muted">No upcoming sessions scheduled</p>
        <button class="btn btn-outline-primary btn-sm mt-2" onclick="createNewSession()">
          <i class="fas fa-plus mr-1"></i> Schedule New Session
        </button>
      </div>
    `;
    return;
  }
  
  let html = '<div class="table-responsive">';
  html += `
    <table class="table table-hover">
      <thead>
        <tr>
          <th>Date</th>
          <th>Manager</th>
          <th>Location</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
  `;
  
  data.forEach(session => {
    html += `
      <tr>
        <td>${formatDate(session.date, true)}</td>
        <td>${session.managerName || 'Unknown'}</td>
        <td>${session.location || 'Not specified'}</td>
        <td>
          <button class="btn btn-sm btn-outline-primary" onclick="editSession('${session.id}')">
            <i class="fas fa-edit"></i>
          </button>
        </td>
      </tr>
    `;
  });
  
  html += `
      </tbody>
    </table>
  </div>
  `;
  
  container.innerHTML = html;
}

// Update recent sessions
function updateRecentSessions(data) {
  const container = document.getElementById('recent-sessions');
  
  if (!data || !data.length) {
    container.innerHTML = `
      <div class="text-center my-4">
        <p class="text-muted">No recent sessions found</p>
      </div>
    `;
    return;
  }
  
  let html = '<div class="table-responsive">';
  html += `
    <table class="table table-hover">
      <thead>
        <tr>
          <th>Date</th>
          <th>Manager</th>
          <th>Rating</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
  `;
  
  data.forEach(session => {
    const ratingEmojis = ['', '😞', '😐', '🙂', '😀', '🤩'];
    const rating = session.rating ? `${ratingEmojis[session.rating]} (${session.rating}/5)` : 'Not rated';
    
    html += `
      <tr>
        <td>${formatDate(session.date, true)}</td>
        <td>${session.managerName || 'Unknown'}</td>
        <td>${rating}</td>
        <td>
          <button class="btn btn-sm btn-outline-info" onclick="viewSession('${session.id}')">
            <i class="fas fa-eye"></i>
          </button>
        </td>
      </tr>
    `;
  });
  
  html += `
      </tbody>
    </table>
  </div>
  `;
  
  container.innerHTML = html;
}

// Create new session
function createNewSession() {
  google.script.run
    .withSuccessHandler(function() {
      // Redirect to the form page
      google.script.run.createManagerOneOnOneForm();
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to open form: ' + error, 'error');
    })
    .cacheManagerOneOnOneSessionId(null);
}

// Edit session
function editSession(sessionId) {
  google.script.run
    .withSuccessHandler(function() {
      // Redirect to the form page
      google.script.run.createManagerOneOnOneForm();
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to open form: ' + error, 'error');
    })
    .cacheManagerOneOnOneSessionId(sessionId);
}

// View session
function viewSession(sessionId) {
  google.script.run
    .withSuccessHandler(function() {
      // Redirect to the notes page
      google.script.run.viewManagerOneOnOneNotes();
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to open notes: ' + error, 'error');
    })
    .cacheManagerOneOnOneSessionId(sessionId);
}

// Export dashboard
function exportDashboard() {
  showLoading(true);
  
  google.script.run
    .withSuccessHandler(function(result) {
      if (result.success) {
        showToast('Success', 'Dashboard exported successfully', 'success');
        
        // Open the exported spreadsheet in a new tab
        window.open(result.url, '_blank');
      } else {
        showToast('Error', result.message, 'error');
      }
      showLoading(false);
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to export dashboard: ' + error, 'error');
      showLoading(false);
    })
    .exportManagerOneOnOneDashboard(getFilters());
}

// Format date
function formatDate(dateString, includeTime = false) {
  if (!dateString) return 'N/A';
  
  try {
    const date = new Date(dateString);
    
    if (isNaN(date.getTime())) {
      return 'Invalid Date';
    }
    
    const options = includeTime ? 
      { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' } : 
      { year: 'numeric', month: 'short', day: 'numeric' };
    
    return date.toLocaleDateString(undefined, options);
  } catch (e) {
    return 'Date Error';
  }
}

// Show/hide loading overlay
function showLoading(show) {
  document.getElementById('loading-overlay').style.display = show ? 'flex' : 'none';
}

// Show toast notification
function showToast(title, message, type) {
  const toastContainer = document.getElementById('toast-container');
  const id = 'toast-' + Date.now();
  
  let iconClass = 'fas fa-info-circle';
  if (type === 'success') iconClass = 'fas fa-check-circle';
  if (type === 'error') iconClass = 'fas fa-exclamation-circle';
  if (type === 'warning') iconClass = 'fas fa-exclamation-triangle';
  
  const toastHtml = `
    <div class="toast ${type}" id="${id}">
      <div class="toast-header">
        <i class="${iconClass} toast-icon"></i>
        <div>
          <div class="toast-title">${title}</div>
          <div class="toast-message">${message}</div>
        </div>
        <span class="toast-close" onclick="dismissToast('${id}')">&times;</span>
      </div>
    </div>
  `;
  
  toastContainer.insertAdjacentHTML('beforeend', toastHtml);
  
  // Auto-dismiss after 5 seconds
  setTimeout(() => dismissToast(id), 5000);
}

// Dismiss toast
function dismissToast(id) {
  const toast = document.getElementById(id);
  if (toast) {
    toast.style.opacity = '0';
    setTimeout(() => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 300);
  }
}
</script>
</body> 
</html> 

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
  <style>
    :root {
      --primary: #6366f1;
      --primary-dark: #4f46e5;
      --secondary: #0ea5e9;
      --success: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --light-bg: #f9fafb;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      color: #1f2937;
      background-color: var(--light-bg);
      padding: 1rem;
    }
    
    .form-container {
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 10px 15px -3px rgba(0,0,0,0.05);
      padding: 1.5rem;
      max-width: 100%;
      margin: 0 auto;
    }
    
    .form-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .form-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #111827;
      margin: 0;
    }
    
    .form-subtitle {
      color: #6b7280;
      margin-top: 0.25rem;
    }
    
    .card {
      border: none;
      border-radius: 12px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 4px 6px -2px rgba(0,0,0,0.05);
      margin-bottom: 1.5rem;
      overflow: hidden;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    
    .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px rgba(0,0,0,0.1), 0 10px 15px -3px rgba(0,0,0,0.05);
    }
    
    .card-header {
      background-color: white;
      border-bottom: 1px solid #e5e7eb;
      padding: 1.25rem 1.5rem;
      font-weight: 600;
      color: #4b5563;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    .editor-container {
      height: 250px;
      margin-bottom: 1rem;
      border-radius: 6px;
      overflow: hidden;
    }
    
    .ql-toolbar.ql-snow {
      border-radius: 6px 6px 0 0;
      border-color: #d1d5db;
      background-color: #f9fafb;
    }
    
    .ql-container.ql-snow {
      border-radius: 0 0 6px 6px;
      border-color: #d1d5db;
      font-family: 'Inter', -apple-system, system-ui, sans-serif;
      font-size: 0.95rem;
    }
    
    .category-tag {
      display: inline-block;
      margin-right: 0.5rem;
      margin-bottom: 0.75rem;
      padding: 0.35rem 0.75rem;
      border-radius: 9999px;
      background-color: #e5e7eb;
      color: #4b5563;
      font-size: 0.875rem;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .category-tag:hover {
      background-color: #d1d5db;
    }
    
    .category-tag.active {
      background-color: var(--primary);
      color: white;
    }
    
    .priority-selector {
      display: flex;
      justify-content: space-between;
      margin: 1rem 0;
    }
    
    .priority-option {
      text-align: center;
      width: 80px;
      cursor: pointer;
      opacity: 0.6;
      transition: all 0.2s;
      padding: 0.75rem 0.5rem;
      border-radius: 6px;
    }
    
    .priority-option:hover {
      opacity: 0.8;
      transform: translateY(-2px);
    }
    
    .priority-option.selected {
      opacity: 1;
      transform: translateY(-2px);
      background-color: #f3f4f6;
      font-weight: 500;
    }
    
    .priority-option .icon {
      font-size: 1.5rem;
      margin-bottom: 0.5rem;
    }
    
    .priority-option .label {
      font-size: 0.75rem;
      color: #4b5563;
    }
    
    .priority-option.low .icon {
      color: #10b981;
    }
    
    .priority-option.medium .icon {
      color: #f59e0b;
    }
    
    .priority-option.high .icon {
      color: #ef4444;
    }
    
    .custom-switch .custom-control-label::before {
      width: 2.5rem;
      height: 1.25rem;
      border-radius: 1rem;
    }
    
    .custom-switch .custom-control-label::after {
      width: calc(1.25rem - 4px);
      height: calc(1.25rem - 4px);
    }
    
    .custom-control-input:checked ~ .custom-control-label::before {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
      font-weight: 500;
      padding: 0.5rem 1.25rem;
      border-radius: 0.5rem;
      transition: all 0.2s;
    }
    
    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-1px);
      box-shadow: 0 4px 6px rgba(50, 50, 93, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
      font-weight: 500;
      padding: 0.5rem 1.25rem;
      border-radius: 0.5rem;
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-secondary {
      color: #6b7280;
      border-color: #e5e7eb;
      font-weight: 500;
      padding: 0.5rem 1.25rem;
      border-radius: 0.5rem;
    }
    
    .btn-outline-secondary:hover {
      background-color: #f3f4f6;
      color: #4b5563;
      border-color: #d1d5db;
    }
    
    .btn-outline-danger {
      color: var(--danger);
      border-color: var(--danger);
      font-weight: 500;
      padding: 0.5rem 1.25rem;
      border-radius: 0.5rem;
    }
    
    .btn-outline-danger:hover {
      background-color: var(--danger);
      border-color: var(--danger);
      color: white;
    }
    
    .form-group label {
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: #4b5563;
    }
    
    .form-control {
      border-radius: 0.5rem;
      border-color: #d1d5db;
      padding: 0.75rem 1rem;
    }
    
    .form-control:focus {
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
      border-color: var(--primary);
    }
    
    .text-info, .text-primary {
      color: var(--primary) !important;
    }
    
    .text-success {
      color: var(--success) !important;
    }
    
    .text-danger {
      color: var(--danger) !important;
    }
    
    .text-warning {
      color: var(--warning) !important;
    }
    
    .related-item {
      padding: 1rem;
      border-radius: 8px;
      background-color: #f9fafb;
      margin-bottom: 0.75rem;
      transition: all 0.2s;
      cursor: pointer;
    }
    
    .related-item:hover {
      background-color: #f3f4f6;
      transform: translateX(3px);
    }
    
    .related-item:last-child {
      margin-bottom: 0;
    }
    
    .related-item-title {
      font-weight: 500;
      margin-bottom: 0.25rem;
    }
    
    .related-item-meta {
      font-size: 0.75rem;
      color: #6b7280;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .spinner-container {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    .spinner-text {
      margin-top: 1rem;
      color: var(--primary);
      font-weight: 500;
    }
    
    /* Toast styling */
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }
    
    .toast {
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      min-width: 250px;
      margin-bottom: 0.75rem;
      display: flex;
      overflow: hidden;
      animation: slideIn 0.3s ease-out forwards;
      max-width: 450px;
    }
    
    @keyframes slideIn {
      from { transform: translateX(100%); }
      to { transform: translateX(0); }
    }
    
    .toast.success {
      border-left: 4px solid var(--success);
    }
    
    .toast.error {
      border-left: 4px solid var(--danger);
    }
    
    .toast.warning {
      border-left: 4px solid var(--warning);
    }
    
    .toast.info {
      border-left: 4px solid var(--primary);
    }
    
    .toast-header {
      padding: 1rem;
      display: flex;
      align-items: flex-start;
    }
    
    .toast-icon {
      margin-right: 12px;
      font-size: 24px;
      line-height: 1;
    }
    
    .toast.success .toast-icon {
      color: var(--success);
    }
    
    .toast.error .toast-icon {
      color: var(--danger);
    }
    
    .toast.warning .toast-icon {
      color: var(--warning);
    }
    
    .toast.info .toast-icon {
      color: var(--primary);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
      color: #111827;
    }
    
    .toast-message {
      color: #6b7280;
      font-size: 0.875rem;
    }
    
    .toast-close {
      color: #9ca3af;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
      margin-left: 12px;
    }
    
    .toast-close:hover {
      color: #6b7280;
    }
  </style>
</head>
<body>
  <div class="container-fluid py-3">
    <div class="form-container">
      <div class="form-header">
        <div>
          <h4 class="form-title">
            <i class="fas fa-sticky-note text-primary mr-2"></i>
            <span id="form-title-text">Create General Note</span>
          </h4>
          <p class="form-subtitle" id="form-subtitle">Capture ideas, information, and next steps</p>
        </div>
        <span class="badge badge-primary px-3 py-2" id="note-status">New Note</span>
      </div>
      
      <form id="general-note-form">
        <div class="row">
          <div class="col-md-12">
            <div class="form-group">
              <label for="note-title">Title <span class="text-danger">*</span></label>
              <input type="text" class="form-control" id="note-title" placeholder="Enter a descriptive title" required>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-6">
            <div class="form-group">
              <label for="note-category">Category</label>
              <select class="form-control" id="note-category">
                <option value="">Select a category</option>
                <option value="Team">Team</option>
                <option value="Project">Project</option>
                <option value="Process">Process</option>
                <option value="Meeting">Meeting</option>
                <option value="Idea">Idea</option>
                <option value="Training">Training</option>
                <option value="Other">Other</option>
              </select>
            </div>
          </div>
          <div class="col-md-6">
            <div class="form-group">
              <label>Priority Level</label>
              <div class="priority-selector">
                <div class="priority-option low" onclick="selectPriority('low')">
                  <div class="icon"><i class="fas fa-arrow-down"></i></div>
                  <div class="label">Low</div>
                </div>
                <div class="priority-option medium selected" onclick="selectPriority('medium')">
                  <div class="icon"><i class="fas fa-minus"></i></div>
                  <div class="label">Medium</div>
                </div>
                <div class="priority-option high" onclick="selectPriority('high')">
                  <div class="icon"><i class="fas fa-arrow-up"></i></div>
                  <div class="label">High</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-12">
            <div class="card">
              <div class="card-header d-flex align-items-center">
                <i class="fas fa-file-alt text-primary mr-2"></i> Note Content <span class="text-danger ml-1">*</span>
              </div>
              <div class="card-body">
                <div class="form-group">
                  <div id="note-editor" class="editor-container"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-12">
            <div class="card">
              <div class="card-header d-flex align-items-center">
                <i class="fas fa-tags text-primary mr-2"></i> Tags
              </div>
              <div class="card-body">
                <div class="form-group">
                  <div class="tags-container mb-2" id="tags-container">
                    <div class="category-tag" onclick="toggleTag(this)" data-value="Important">Important</div>
                    <div class="category-tag" onclick="toggleTag(this)" data-value="Follow-up">Follow-up</div>
                    <div class="category-tag" onclick="toggleTag(this)" data-value="Documentation">Documentation</div>
                    <div class="category-tag" onclick="toggleTag(this)" data-value="Action-Required">Action Required</div>
                    <div class="category-tag" onclick="toggleTag(this)" data-value="Reminder">Reminder</div>
                    <div class="category-tag" onclick="toggleTag(this)" data-value="Decision">Decision</div>
                    <div class="category-tag" onclick="toggleTag(this)" data-value="Problem">Problem</div>
                    <div class="category-tag" onclick="toggleTag(this)" data-value="Solution">Solution</div>
                  </div>
                  <div class="input-group">
                    <input type="text" class="form-control" id="custom-tag" placeholder="Add a custom tag">
                    <div class="input-group-append">
                      <button class="btn btn-outline-secondary" type="button" onclick="addCustomTag()">
                        <i class="fas fa-plus"></i> Add
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-6">
            <div class="card">
              <div class="card-header d-flex align-items-center">
                <i class="fas fa-link text-primary mr-2"></i> Related Items
              </div>
              <div class="card-body">
                <div class="form-group">
                  <label>Type</label>
                  <select class="form-control mb-2" id="related-item-type">
                    <option value="team-member">Team Member</option>
                    <option value="one-on-one">One-on-One Session</option>
                    <option value="project">Project</option>
                    <option value="task">Task</option>
                  </select>
                </div>
                <div class="form-group">
                  <label>Item</label>
                  <select class="form-control mb-2" id="related-item-id">
                    <option value="">Select an item</option>
                    <!-- Will be populated dynamically -->
                  </select>
                </div>
                <button type="button" class="btn btn-outline-primary btn-sm" onclick="addRelatedItem()">
                  <i class="fas fa-plus mr-1"></i> Add Related Item
                </button>
                <div id="related-items-list" class="mt-3">
                  <!-- Related items will be added here -->
                </div>
              </div>
            </div>
          </div>
          
          <div class="col-md-6">
            <div class="card">
              <div class="card-header d-flex align-items-center">
                <i class="fas fa-cog text-primary mr-2"></i> Options
              </div>
              <div class="card-body">
                <div class="form-group">
                  <div class="custom-control custom-switch">
                    <input type="checkbox" class="custom-control-input" id="pin-to-dashboard">
                    <label class="custom-control-label" for="pin-to-dashboard">Pin to Dashboard</label>
                  </div>
                  <small class="text-muted">Make this note appear at the top of your dashboard</small>
                </div>
                
                <div class="form-group mt-3">
                  <div class="custom-control custom-switch">
                    <input type="checkbox" class="custom-control-input" id="set-reminder">
                    <label class="custom-control-label" for="set-reminder">Set Reminder</label>
                  </div>
                  <div id="reminder-options" class="mt-2" style="display: none;">
                    <input type="date" class="form-control mb-2" id="reminder-date">
                    <select class="form-control" id="reminder-type">
                      <option value="email">Email notification</option>
                      <option value="popup">Dashboard popup</option>
                      <option value="both">Both</option>
                    </select>
                  </div>
                </div>
                
                <div class="form-group mt-3">
                  <div class="custom-control custom-switch">
                    <input type="checkbox" class="custom-control-input" id="share-note">
                    <label class="custom-control-label" for="share-note">Share With Team</label>
                  </div>
                  <small class="text-muted">Allow other team members to view this note</small>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="form-group mt-4 d-flex justify-content-between">
          <div>
            <button type="button" class="btn btn-outline-secondary mr-2" onclick="closeForm()">
              <i class="fas fa-times mr-1"></i> Cancel
            </button>
            <button type="button" class="btn btn-outline-danger mr-2" id="delete-btn" onclick="confirmDelete()" style="display:none;">
              <i class="fas fa-trash-alt mr-1"></i> Delete
            </button>
          </div>
          <div>
            <button type="button" class="btn btn-outline-secondary mr-2" id="save-draft-btn" onclick="saveNote(true)">
              <i class="fas fa-save mr-1"></i> Save Draft
            </button>
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-check mr-1"></i> Save Note
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loading-overlay" style="display:none;">
    <div class="spinner-container">
      <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div class="spinner-text">Processing...</div>
    </div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container" id="toast-container"></div>
  
  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.6.0.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
  <script>
    // Global variables
    let noteId = null;
    let noteData = null;
    let isEditMode = false;
    let quillEditor = null;
    let selectedPriority = 'medium';
    let selectedTags = [];
    let relatedItems = [];
    
    // Initialization
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize Quill editor
      initializeQuillEditor();
      
      // Add form submit handler
      document.getElementById('general-note-form').addEventListener('submit', function(e) {
        e.preventDefault();
        saveNote(false);
      });
      
      // Set reminder toggle handling
      document.getElementById('set-reminder').addEventListener('change', function() {
        document.getElementById('reminder-options').style.display = this.checked ? 'block' : 'none';
      });
      
      // Related item type change handler
      document.getElementById('related-item-type').addEventListener('change', loadRelatedItemOptions);
      
      // Check if we're editing an existing note
      loadNoteData();
    });
    
    // Initialize Quill editor
    function initializeQuillEditor() {
      const toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'],
        ['blockquote', 'code-block'],
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'header': [1, 2, 3, false] }],
        [{ 'color': [] }, { 'background': [] }],
        ['link', 'image'],
        ['clean']
      ];
      
      quillEditor = new Quill('#note-editor', {
        theme: 'snow',
        placeholder: 'Start writing your note here...',
        modules: {
          toolbar: toolbarOptions
        }
      });
    }
    
    // Load note data (for editing)
    function loadNoteData() {
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result && result.id) {
            // We have note data, we're in edit mode
            noteId = result.id;
            noteData = result;
            isEditMode = true;
            populateForm(result);
            
            // Show delete button in edit mode
            document.getElementById('delete-btn').style.display = 'inline-block';
            
            // Update form title and status
            document.getElementById('form-title-text').textContent = 'Edit General Note';
            document.getElementById('form-subtitle').textContent = 'Update your existing note';
            document.getElementById('note-status').textContent = result.draft ? 'Draft' : 'Published';
            document.getElementById('note-status').className = 
              result.draft ? 'badge badge-warning px-3 py-2' : 'badge badge-success px-3 py-2';
          }
          showLoading(false);
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to load note data: ' + error, 'error');
          showLoading(false);
        })
        .getCachedGeneralNoteId();
    }
    
    // Populate form with note data
    function populateForm(data) {
      // Basic information
      document.getElementById('note-title').value = data.title || '';
      document.getElementById('note-category').value = data.category || '';
      
      // Set priority
      if (data.priority) {
        selectPriority(data.priority);
      }
      
      // Set Quill editor contents
      if (data.content) {
        quillEditor.root.innerHTML = data.content;
      }
      
      // Set tags
      if (data.tags && data.tags.length) {
        selectedTags = data.tags;
        updateTagsDisplay();
      }
      
      // Set related items
      if (data.relatedItems && data.relatedItems.length) {
        relatedItems = data.relatedItems;
        updateRelatedItemsList();
      }
      
      // Set options
      document.getElementById('pin-to-dashboard').checked = !!data.pinned;
      
      if (data.reminder) {
        document.getElementById('set-reminder').checked = true;
        document.getElementById('reminder-options').style.display = 'block';
        
        if (data.reminder.date) {
          document.getElementById('reminder-date').value = formatDateForInput(data.reminder.date);
        }
        
        if (data.reminder.type) {
          document.getElementById('reminder-type').value = data.reminder.type;
        }
      }
      
      document.getElementById('share-note').checked = !!data.shared;
    }
    
    // Format date for input field
    function formatDateForInput(dateString) {
      if (!dateString) return '';
      
      try {
        const date = new Date(dateString);
        return date.toISOString().split('T')[0];
      } catch (e) {
        return '';
      }
    }
    
    // Toggle tag selection
    function toggleTag(element) {
      const value = element.getAttribute('data-value');
      element.classList.toggle('active');
      
      if (element.classList.contains('active')) {
        if (!selectedTags.includes(value)) {
          selectedTags.push(value);
        }
      } else {
        selectedTags = selectedTags.filter(tag => tag !== value);
      }
    }
    
    // Add custom tag
    function addCustomTag() {
      const customTagInput = document.getElementById('custom-tag');
      const value = customTagInput.value.trim();
      
      if (!value) {
        return;
      }
      
      if (selectedTags.includes(value)) {
        showToast('Warning', 'This tag already exists', 'warning');
        return;
      }
      
      // Add to selected tags
      selectedTags.push(value);
      
      // Create and add tag element
      const tagsContainer = document.getElementById('tags-container');
      const tagElement = document.createElement('div');
      tagElement.className = 'category-tag active';
      tagElement.setAttribute('data-value', value);
      tagElement.onclick = function() { toggleTag(this); };
      tagElement.textContent = value;
      
      tagsContainer.appendChild(tagElement);
      
      // Clear input
      customTagInput.value = '';
    }
    
    // Update tags display
    function updateTagsDisplay() {
      const tagElements = document.querySelectorAll('#tags-container .category-tag');
      
      // Reset all tags
      tagElements.forEach(element => {
        const value = element.getAttribute('data-value');
        element.classList.toggle('active', selectedTags.includes(value));
      });
      
      // Add any custom tags that aren't in the default list
      const tagValues = Array.from(tagElements).map(el => el.getAttribute('data-value'));
      const customTags = selectedTags.filter(tag => !tagValues.includes(tag));
      
      const tagsContainer = document.getElementById('tags-container');
      
      customTags.forEach(tag => {
        const tagElement = document.createElement('div');
        tagElement.className = 'category-tag active';
        tagElement.setAttribute('data-value', tag);
        tagElement.onclick = function() { toggleTag(this); };
        tagElement.textContent = tag;
        
        tagsContainer.appendChild(tagElement);
      });
    }
    
    // Select priority
    function selectPriority(priority) {
      selectedPriority = priority;
      const options = document.querySelectorAll('.priority-option');
      options.forEach(option => {
        option.classList.toggle('selected', option.classList.contains(priority));
      });
    }
    
    // Load related item options
    function loadRelatedItemOptions() {
      const itemType = document.getElementById('related-item-type').value;
      const itemSelect = document.getElementById('related-item-id');
      
      // Clear current options
      itemSelect.innerHTML = '<option value="">Loading...</option>';
      
      // Load options based on type
      google.script.run
        .withSuccessHandler(function(options) {
          itemSelect.innerHTML = '<option value="">Select an item</option>';
          
          if (options && options.length) {
            options.forEach(option => {
              const optionElement = document.createElement('option');
              optionElement.value = option.id;
              optionElement.textContent = option.name;
              itemSelect.appendChild(optionElement);
            });
          } else {
            itemSelect.innerHTML = '<option value="">No items available</option>';
          }
        })
        .withFailureHandler(function(error) {
          itemSelect.innerHTML = '<option value="">Error loading options</option>';
          showToast('Error', 'Failed to load related items: ' + error, 'error');
        })
        .getRelatedItemOptions(itemType);
    }
    
    // Add related item
    function addRelatedItem() {
      const itemType = document.getElementById('related-item-type').value;
      const itemId = document.getElementById('related-item-id').value;
      const itemName = document.getElementById('related-item-id').options[document.getElementById('related-item-id').selectedIndex].text;
      
      if (!itemId) {
        showToast('Warning', 'Please select an item', 'warning');
        return;
      }
      
      // Check if item already exists
      const exists = relatedItems.some(item => item.id === itemId && item.type === itemType);
      
      if (exists) {
        showToast('Warning', 'This item is already related to this note', 'warning');
        return;
      }
      
      // Add to related items
      relatedItems.push({
        id: itemId,
        type: itemType,
        name: itemName
      });
      
      // Update display
      updateRelatedItemsList();
    }
    
    // Update related items list
    function updateRelatedItemsList() {
      const container = document.getElementById('related-items-list');
      
      if (!relatedItems.length) {
        container.innerHTML = '<p class="text-muted">No related items added yet</p>';
        return;
      }
      
      let html = '';
      
      relatedItems.forEach((item, index) => {
        let icon = 'fas fa-link';
        
        switch (item.type) {
          case 'team-member':
            icon = 'fas fa-user';
            break;
          case 'one-on-one':
            icon = 'fas fa-comments';
            break;
          case 'project':
            icon = 'fas fa-project-diagram';
            break;
          case 'task':
            icon = 'fas fa-tasks';
            break;
        }
        
        html += `
          <div class="related-item">
            <div class="d-flex justify-content-between align-items-start">
              <div>
                <div class="related-item-title">
                  <i class="${icon} mr-2"></i> ${item.name}
                </div>
                <div class="related-item-meta">
                  ${formatRelatedItemType(item.type)}
                </div>
              </div>
              <button type="button" class="btn btn-sm btn-link text-danger" onclick="removeRelatedItem(${index})">
                <i class="fas fa-times"></i>
              </button>
            </div>
          </div>
        `;
      });
      
      container.innerHTML = html;
    }
    
    // Format related item type
    function formatRelatedItemType(type) {
      switch (type) {
        case 'team-member':
          return 'Team Member';
        case 'one-on-one':
          return 'One-on-One Session';
        case 'project':
          return 'Project';
        case 'task':
          return 'Task';
        default:
          return type;
      }
    }
    
    // Remove related item
    function removeRelatedItem(index) {
      relatedItems.splice(index, 1);
      updateRelatedItemsList();
    }
    
    // Save the note
    function saveNote(isDraft) {
      // Validate required fields if not a draft
      if (!isDraft && !validateForm()) {
        return;
      }
      
      showLoading(true);
      
      // Collect form data
      const formData = {
        id: noteId,
        title: document.getElementById('note-title').value,
        category: document.getElementById('note-category').value,
        priority: selectedPriority,
        content: quillEditor.root.innerHTML,
        tags: selectedTags,
        relatedItems: relatedItems,
        draft: isDraft,
        pinned: document.getElementById('pin-to-dashboard').checked,
        shared: document.getElementById('share-note').checked
      };
      
      // Add reminder if set
      if (document.getElementById('set-reminder').checked) {
        formData.reminder = {
          date: document.getElementById('reminder-date').value,
          type: document.getElementById('reminder-type').value
        };
      }
      
      // Add created/updated info
      if (!isEditMode) {
        formData.createdDate = new Date().toISOString();
      }
      formData.updatedDate = new Date().toISOString();
      
      // Save note
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            showToast('Success', result.message, 'success');
            setTimeout(function() {
              // Close the form after successful save
              google.script.host.close();
            }, 1500);
          } else {
            showToast('Error', result.message, 'error');
            showLoading(false);
          }
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to save: ' + error, 'error');
          showLoading(false);
        })
        .saveGeneralNote(formData);
    }
    
    // Validate the form
    function validateForm() {
      const title = document.getElementById('note-title').value.trim();
      const content = quillEditor.getText().trim();
      
      if (!title) {
        showToast('Missing Information', 'Please enter a title for your note', 'warning');
        document.getElementById('note-title').focus();
        return false;
      }
      
      if (content.length <= 1) {
        showToast('Missing Information', 'Please enter some content for your note', 'warning');
        quillEditor.focus();
        return false;
      }
      
      return true;
    }
    
    // Confirm delete
    function confirmDelete() {
      if (confirm('Are you sure you want to delete this note? This action cannot be undone.')) {
        deleteNote();
      }
    }
    
    // Delete note
    function deleteNote() {
      if (!noteId) {
        showToast('Error', 'No note ID to delete', 'error');
        return;
      }
      
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            showToast('Success', 'Note deleted successfully', 'success');
            setTimeout(function() {
              google.script.host.close();
            }, 1500);
          } else {
            showToast('Error', result.message, 'error');
            showLoading(false);
          }
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to delete: ' + error, 'error');
          showLoading(false);
        })
        .deleteGeneralNote(noteId);
    }
    
    // Close the form
    function closeForm() {
      google.script.host.close();
    }
    
    // Show/hide loading overlay
    function showLoading(show) {
      document.getElementById('loading-overlay').style.display = show ? 'flex' : 'none';
    }
    
    // Show toast notification
    function showToast(title, message, type) {
      const toastContainer = document.getElementById('toast-container');
      const id = 'toast-' + Date.now();
      
      let iconClass = 'fas fa-info-circle';
      if (type === 'success') iconClass = 'fas fa-check-circle';
      if (type === 'error') iconClass = 'fas fa-exclamation-circle';
      if (type === 'warning') iconClass = 'fas fa-exclamation-triangle';
      
      const toastHtml = `
        <div class="toast ${type}" id="${id}">
          <div class="toast-header">
            <i class="${iconClass} toast-icon"></i>
            <div class="toast-content">
              <div class="toast-title">${title}</div>
              <div class="toast-message">${message}</div>
            </div>
            <span class="toast-close" onclick="dismissToast('${id}')">&times;</span>
          </div>
        </div>
      `;
      
      toastContainer.insertAdjacentHTML('beforeend', toastHtml);
      
      // Auto-dismiss after 5 seconds
      setTimeout(() => dismissToast(id), 5000);
    }
    
    // Dismiss toast
    function dismissToast(id) {
      const toast = document.getElementById(id);
      if (toast) {
        toast.style.opacity = '0';
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      }
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    :root {
      --primary: #6366f1;
      --primary-dark: #4f46e5;
      --secondary: #0ea5e9;
      --success: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --light-bg: #f9fafb;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      color: #1f2937;
      background-color: var(--light-bg);
      padding: 1rem;
    }
    
    .page-container {
      max-width: 100%;
      margin: 0 auto;
    }
    
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      background-color: white;
      padding: 1rem 1.5rem;
      border-radius: 12px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 10px 15px -3px rgba(0,0,0,0.05);
    }
    
    .page-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #111827;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .filters-section {
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 10px 15px -3px rgba(0,0,0,0.05);
      padding: 1rem 1.5rem;
      margin-bottom: 1.5rem;
    }
    
    .filter-divider {
      width: 1px;
      background-color: #e5e7eb;
      height: 40px;
      margin: 0 1rem;
    }
    
    .notes-wrapper {
      display: flex;
      min-height: 0;
      flex: 1;
    }
    
    .notes-list {
      width: 360px;
      overflow-y: auto;
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 10px 15px -3px rgba(0,0,0,0.05);
      margin-right: 1.5rem;
      flex-shrink: 0;
    }
    
    .note-list-item {
      padding: 1rem 1.25rem;
      border-bottom: 1px solid #e5e7eb;
      cursor: pointer;
      transition: all 0.2s;
      position: relative;
    }
    
    .note-list-item:hover {
      background-color: #f3f4f6;
      transform: translateX(3px);
    }
    
    .note-list-item.active {
      background-color: #eef2ff;
      border-left: 3px solid var(--primary);
    }
    
    .note-list-item-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
    }
    
    .note-list-item-title {
      font-weight: 600;
      color: #111827;
      margin-right: 0.5rem;
      line-height: 1.3;
    }
    
    .note-date {
      font-size: 0.75rem;
      color: #6b7280;
    }
    
    .note-preview {
      color: #6b7280;
      font-size: 0.8125rem;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
      margin-bottom: 0.5rem;
    }
    
    .note-badge {
      font-size: 0.675rem;
      padding: 0.2rem 0.5rem;
      border-radius: 9999px;
      font-weight: 500;
    }
    
    .note-badges {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }
    
    .pin-indicator {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      color: var(--warning);
      font-size: 0.75rem;
      transform: rotate(45deg);
    }
    
    .priority-indicator {
      display: inline-block;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      margin-right: 0.5rem;
    }
    
    .priority-low {
      background-color: var(--success);
    }
    
    .priority-medium {
      background-color: var(--warning);
    }
    
    .priority-high {
      background-color: var(--danger);
    }
    
    .notes-detail {
      flex-grow: 1;
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 10px 15px -3px rgba(0,0,0,0.05);
      overflow-y: auto;
      display: flex;
      flex-direction: column;
    }
    
    .notes-detail-empty {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
      color: #9ca3af;
    }
    
    .empty-icon {
      font-size: 4rem;
      margin-bottom: 1rem;
      color: #d1d5db;
    }
    
    .notes-detail-header {
      padding: 1.5rem;
      border-bottom: 1px solid #e5e7eb;
      position: relative;
    }
    
    .notes-detail-title {
      font-weight: 700;
      font-size: 1.5rem;
      color: #111827;
      margin-bottom: 0.5rem;
    }
    
    .notes-detail-meta {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      color: #6b7280;
      font-size: 0.875rem;
      margin-bottom: 1rem;
    }
    
    .meta-divider {
      margin: 0 0.5rem;
      color: #d1d5db;
    }
    
    .notes-detail-content {
      padding: 1.5rem;
      flex-grow: 1;
    }
    
    .notes-detail-section {
      margin-bottom: 2rem;
    }
    
    .notes-detail-section:last-child {
      margin-bottom: 0;
    }
    
    .notes-detail-section-title {
      font-weight: 600;
      color: #4b5563;
      margin-bottom: 0.75rem;
      display: flex;
      align-items: center;
    }
    
    .notes-detail-section-icon {
      margin-right: 0.5rem;
      color: var(--primary);
    }
    
    .note-content {
      line-height: 1.6;
      color: #1f2937;
    }
    
    .note-content h1, .note-content h2, .note-content h3 {
      margin-top: 1.5rem;
      margin-bottom: 0.75rem;
      color: #111827;
    }
    
    .note-content p {
      margin-bottom: 1rem;
    }
    
    .note-content ul, .note-content ol {
      margin-bottom: 1rem;
      padding-left: 1.5rem;
    }
    
    .note-content blockquote {
      border-left: 3px solid #e5e7eb;
      padding-left: 1rem;
      color: #4b5563;
      font-style: italic;
      margin: 1rem 0;
    }
    
    .note-content code {
      background-color: #f3f4f6;
      padding: 0.2rem 0.4rem;
      border-radius: 4px;
      font-size: 0.875rem;
      color: #ef4444;
    }
    
    .note-content pre {
      background-color: #f3f4f6;
      padding: 1rem;
      border-radius: 6px;
      overflow-x: auto;
      margin: 1rem 0;
    }
    
    .note-content img {
      max-width: 100%;
      height: auto;
      border-radius: 6px;
      margin: 1rem 0;
    }
    
    .tag-list {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-top: 0.5rem;
    }
    
    .tag {
      font-size: 0.75rem;
      padding: 0.35rem 0.75rem;
      border-radius: 9999px;
      background-color: #eef2ff;
      color: var(--primary);
      display: flex;
      align-items: center;
    }
    
    .tag i {
      margin-right: 0.25rem;
      font-size: 0.675rem;
    }
    
    .related-item {
      padding: 1rem;
      border-radius: 8px;
      background-color: #f9fafb;
      margin-bottom: 0.75rem;
      transition: all 0.2s;
      cursor: pointer;
      display: flex;
      align-items: center;
    }
    
    .related-item:hover {
      background-color: #f3f4f6;
      transform: translateX(3px);
    }
    
    .related-item:last-child {
      margin-bottom: 0;
    }
    
    .related-item-icon {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background-color: var(--primary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 1rem;
      flex-shrink: 0;
    }
    
    .related-item-content {
      flex-grow: 1;
    }
    
    .related-item-title {
      font-weight: 500;
      margin-bottom: 0.25rem;
      color: #111827;
    }
    
    .related-item-meta {
      font-size: 0.75rem;
      color: #6b7280;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .spinner-container {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    .spinner-text {
      margin-top: 1rem;
      color: var(--primary);
      font-weight: 500;
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
      font-weight: 500;
      padding: 0.5rem 1.25rem;
      border-radius: 0.5rem;
      transition: all 0.2s;
    }
    
    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-1px);
      box-shadow: 0 4px 6px rgba(50, 50, 93, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
      font-weight: 500;
      padding: 0.5rem 1.25rem;
      border-radius: 0.5rem;
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-secondary {
      color: #6b7280;
      border-color: #e5e7eb;
      font-weight: 500;
      padding: 0.5rem 1.25rem;
      border-radius: 0.5rem;
    }
    
    .btn-outline-secondary:hover {
      background-color: #f3f4f6;
      color: #4b5563;
      border-color: #d1d5db;
    }
    
    .form-control {
      border-radius: 0.5rem;
      border-color: #d1d5db;
      padding: 0.75rem 1rem;
    }
    
    .form-control:focus {
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
      border-color: var(--primary);
    }
    
    .dropdown-menu {
      border: none;
      border-radius: 0.5rem;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      padding: 0.5rem;
    }
    
    .dropdown-item {
      border-radius: 0.25rem;
      padding: 0.5rem 0.75rem;
      font-size: 0.875rem;
    }
    
    .dropdown-item:hover {
      background-color: #eef2ff;
      color: var(--primary);
    }
    
    .dropdown-item.active, .dropdown-item:active {
      background-color: var(--primary);
    }
    
    .dropdown-item i {
      margin-right: 0.5rem;
      width: 1rem;
      text-align: center;
    }
    
    .pagination {
      margin-top: 1.5rem;
      justify-content: center;
    }
    
    .page-item .page-link {
      color: var(--primary);
      border-color: #e5e7eb;
      transition: all 0.2s;
    }
    
    .page-item.active .page-link {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .page-item .page-link:hover {
      background-color: #eef2ff;
      color: var(--primary-dark);
    }
    
    /* Toast styling */
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }
    
    .toast {
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      min-width: 250px;
      margin-bottom: 0.75rem;
      display: flex;
      overflow: hidden;
      animation: slideIn 0.3s ease-out forwards;
      max-width: 450px;
    }
    
    @keyframes slideIn {
      from { transform: translateX(100%); }
      to { transform: translateX(0); }
    }
    
    .toast.success {
      border-left: 4px solid var(--success);
    }
    
    .toast.error {
      border-left: 4px solid var(--danger);
    }
    
    .toast.warning {
      border-left: 4px solid var(--warning);
    }
    
    .toast.info {
      border-left: 4px solid var(--primary);
    }
    
    .toast-header {
      padding: 1rem;
      display: flex;
      align-items: flex-start;
    }
    
    .toast-icon {
      margin-right: 12px;
      font-size: 24px;
      line-height: 1;
    }
    
    .toast.success .toast-icon {
      color: var(--success);
    }
    
    .toast.error .toast-icon {
      color: var(--danger);
    }
    
    .toast.warning .toast-icon {
      color: var(--warning);
    }
    
    .toast.info .toast-icon {
      color: var(--primary);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
      color: #111827;
    }
    
    .toast-message {
      color: #6b7280;
      font-size: 0.875rem;
    }
    
    .toast-close {
      color: #9ca3af;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
      margin-left: 12px;
    }
    
    .toast-close:hover {
      color: #6b7280;
    }
    
    /* Print styles */
    @media print {
      .notes-list, .filters-section, .header button, .pagination {
        display: none !important;
      }
      
      .notes-detail {
        box-shadow: none !important;
      }
      
      .notes-wrapper {
        display: block !important;
      }
      
      .notes-detail {
        width: 100% !important;
      }
    }
  </style>
</head>
<body>
  <div class="container-fluid page-container">
    <div class="header">
      <h2 class="page-title">
        <i class="fas fa-sticky-note text-primary mr-2"></i>
        General Notes
      </h2>
      <div>
        <button class="btn btn-outline-primary mr-2" onclick="createNewNote()">
          <i class="fas fa-plus mr-1"></i> New Note
        </button>
        <button class="btn btn-outline-secondary mr-2" onclick="exportNotes()">
          <i class="fas fa-file-export mr-1"></i> Export
        </button>
        <button class="btn btn-outline-secondary" onclick="printNote()">
          <i class="fas fa-print mr-1"></i> Print
        </button>
      </div>
    </div>
    
    <div class="filters-section">
      <div class="row align-items-center">
        <div class="col-md-3">
          <div class="input-group">
            <div class="input-group-prepend">
              <span class="input-group-text bg-white border-right-0">
                <i class="fas fa-search text-muted"></i>
              </span>
            </div>
            <input type="text" class="form-control border-left-0" id="search-input" placeholder="Search notes..." onkeyup="handleSearchKeyUp(event)">
          </div>
        </div>
        
        <div class="col-auto">
          <div class="filter-divider d-none d-md-block"></div>
        </div>
        
        <div class="col-md-2">
          <select class="form-control" id="category-filter" onchange="applyFilters()">
            <option value="">All Categories</option>
            <option value="Team">Team</option>
            <option value="Project">Project</option>
            <option value="Process">Process</option>
            <option value="Meeting">Meeting</option>
            <option value="Idea">Idea</option>
            <option value="Training">Training</option>
            <option value="Other">Other</option>
          </select>
        </div>
        
        <div class="col-md-2">
          <select class="form-control" id="priority-filter" onchange="applyFilters()">
            <option value="">All Priorities</option>
            <option value="high">High Priority</option>
            <option value="medium">Medium Priority</option>
            <option value="low">Low Priority</option>
          </select>
        </div>
        
        <div class="col-md-2">
          <select class="form-control" id="time-filter" onchange="applyFilters()">
            <option value="">All Time</option>
            <option value="today">Today</option>
            <option value="week">This Week</option>
            <option value="month">This Month</option>
            <option value="quarter">This Quarter</option>
            <option value="year">This Year</option>
          </select>
        </div>
        
        <div class="col-md-auto ml-auto">
          <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-secondary" id="toggle-view-btn" onclick="toggleViewMode()">
              <i class="fas fa-th-list" id="view-icon"></i>
            </button>
            <button type="button" class="btn btn-outline-secondary" onclick="resetFilters()">
              <i class="fas fa-sync-alt"></i>
            </button>
          </div>
        </div>
      </div>
    </div>
    
    <div class="notes-wrapper">
      <div class="notes-list" id="notes-list">
        <!-- Notes list will be populated here -->
        <div class="text-center my-5">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
          <p class="mt-2">Loading notes...</p>
        </div>
      </div>
      
      <div class="notes-detail" id="notes-detail">
        <div class="notes-detail-empty">
          <i class="far fa-sticky-note empty-icon"></i>
          <h4>No Note Selected</h4>
          <p>Select a note from the list to view details</p>
        </div>
      </div>
    </div>
    
    <div class="pagination-container">
      <nav>
        <ul class="pagination" id="pagination">
          <!-- Pagination will be added here -->
        </ul>
      </nav>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loading-overlay" style="display:none;">
    <div class="spinner-container">
      <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div class="spinner-text">Loading data...</div>
    </div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container" id="toast-container"></div>
  
  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.6.0.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let allNotes = [];
    let currentPage = 1;
    const itemsPerPage = 10;
    let selectedNoteId = null;
    let viewMode = 'list'; // 'list' or 'card'
    
    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      loadNotes();
    });
    
    // Load all notes
    function loadNotes() {
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(notes) {
          allNotes = notes || [];
          
          // Sort notes by pinned first, then updated date
          sortNotes();
          
          // Apply any existing filters
          applyFilters();
          
          showLoading(false);
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to load notes: ' + error, 'error');
          document.getElementById('notes-list').innerHTML = `
            <div class="text-center my-5">
              <i class="fas fa-exclamation-circle text-danger" style="font-size: 2rem;"></i>
              <p class="mt-2">Failed to load notes</p>
              <button class="btn btn-outline-primary btn-sm mt-2" onclick="loadNotes()">Retry</button>
            </div>
          `;
          showLoading(false);
        })
        .getGeneralNotes();
    }
    
    // Sort notes
    function sortNotes() {
      allNotes.sort((a, b) => {
        // Sort by pinned status first
        if (a.pinned && !b.pinned) return -1;
        if (!a.pinned && b.pinned) return 1;
        
        // Then sort by updated date (most recent first)
        return new Date(b.updatedDate) - new Date(a.updatedDate);
      });
    }
    
    // Apply filters to notes
    function applyFilters() {
      const searchTerm = document.getElementById('search-input').value.toLowerCase();
      const categoryFilter = document.getElementById('category-filter').value;
      const priorityFilter = document.getElementById('priority-filter').value;
      const timeFilter = document.getElementById('time-filter').value;
      
      // Filter notes
      let filteredNotes = allNotes;
      
      // Apply search term filter
      if (searchTerm) {
        filteredNotes = filteredNotes.filter(note => {
          return (
            (note.title && note.title.toLowerCase().includes(searchTerm)) ||
            (note.content && stripHtml(note.content).toLowerCase().includes(searchTerm)) ||
            (note.tags && note.tags.some(tag => tag.toLowerCase().includes(searchTerm)))
          );
        });
      }
      
      // Apply category filter
      if (categoryFilter) {
        filteredNotes = filteredNotes.filter(note => note.category === categoryFilter);
      }
      
      // Apply priority filter
      if (priorityFilter) {
        filteredNotes = filteredNotes.filter(note => note.priority === priorityFilter);
      }
      
      // Apply time filter
      if (timeFilter) {
        const now = new Date();
        let cutoffDate = new Date();
        
        switch (timeFilter) {
          case 'today':
            cutoffDate.setHours(0, 0, 0, 0);
            break;
          case 'week':
            cutoffDate.setDate(now.getDate() - now.getDay()); // Start of this week (Sunday)
            cutoffDate.setHours(0, 0, 0, 0);
            break;
          case 'month':
            cutoffDate.setDate(1); // Start of this month
            cutoffDate.setHours(0, 0, 0, 0);
            break;
          case 'quarter':
            const quarter = Math.floor(now.getMonth() / 3);
            cutoffDate.setMonth(quarter * 3); // Start of this quarter
            cutoffDate.setDate(1);
            cutoffDate.setHours(0, 0, 0, 0);
            break;
          case 'year':
            cutoffDate.setMonth(0); // January
            cutoffDate.setDate(1); // 1st
            cutoffDate.setHours(0, 0, 0, 0);
            break;
        }
        
        filteredNotes = filteredNotes.filter(note => new Date(note.updatedDate) >= cutoffDate);
      }
      
      // Reset to first page when filters change
      currentPage = 1;
      
      // Update UI with filtered notes
      updateNotesList(filteredNotes);
    }
    
    // Handle search key up
    function handleSearchKeyUp(event) {
      // Apply filters on Enter key
      if (event.key === 'Enter') {
        applyFilters();
      }
      
      // Apply filters after a short delay
      clearTimeout(window.searchTimeout);
      window.searchTimeout = setTimeout(applyFilters, 300);
    }
    
    // Update the notes list in the UI
    function updateNotesList(notes) {
      const listContainer = document.getElementById('notes-list');
      
      if (!notes || notes.length === 0) {
        listContainer.innerHTML = `
          <div class="text-center my-5">
            <i class="far fa-sticky-note empty-icon"></i>
            <h4>No Notes Found</h4>
            <p>No notes match your current filters</p>
            <button class="btn btn-outline-primary btn-sm mt-2" onclick="resetFilters()">Reset Filters</button>
          </div>
        `;
        
        // Clear pagination and detail view
        document.getElementById('pagination').innerHTML = '';
        document.getElementById('notes-detail').innerHTML = `
          <div class="notes-detail-empty">
            <i class="far fa-sticky-note empty-icon"></i>
            <h4>No Notes Found</h4>
            <p>Try adjusting your filters to see general notes</p>
          </div>
        `;
        return;
      }
      
      // Calculate pagination
      const totalPages = Math.ceil(notes.length / itemsPerPage);
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, notes.length);
      const paginatedNotes = notes.slice(startIndex, endIndex);
      
      // Build notes list HTML
      let listHtml = '';
      
      paginatedNotes.forEach(note => {
        const noteDate = formatDate(note.updatedDate);
        const priority = note.priority || 'medium';
        const priorityClass = `priority-${priority}`;
        const contentPreview = stripHtml(note.content).substring(0, 70) + (stripHtml(note.content).length > 70 ? '...' : '');
        
        // Determine if this note is the currently selected one
        const isActive = selectedNoteId === note.id ? 'active' : '';
        
        // Get first two tags if they exist
        const tagBadges = note.tags && note.tags.length > 0 ? 
          `<div class="note-badges">
             ${note.tags.slice(0, 2).map(tag => 
               `<span class="note-badge badge-light">${tag}</span>`
             ).join('')}
             ${note.tags.length > 2 ? `<span class="note-badge badge-light">+${note.tags.length - 2}</span>` : ''}
           </div>` : '';
        
        listHtml += `
          <div class="note-list-item ${isActive}" onclick="viewNoteDetail('${note.id}')">
            ${note.pinned ? '<div class="pin-indicator"><i class="fas fa-thumbtack"></i></div>' : ''}
            <div class="note-list-item-header">
              <div class="note-list-item-title">
                <span class="priority-indicator ${priorityClass}"></span>${note.title || 'Untitled Note'}
              </div>
            </div>
            <div class="note-preview">${contentPreview}</div>
            <div class="d-flex justify-content-between align-items-center">
              <div class="note-date">${noteDate}</div>
              ${tagBadges}
            </div>
          </div>
        `;
      });
      
      listContainer.innerHTML = listHtml;
      
      // Update pagination UI
      updatePagination(notes.length, totalPages);
      
      // If there was a selected note that is not in the current page, clear the selection
      if (selectedNoteId && !paginatedNotes.some(n => n.id === selectedNoteId)) {
        clearNoteDetail();
      }
    }
    
    // Update pagination controls
    function updatePagination(totalItems, totalPages) {
      const pagination = document.getElementById('pagination');
      
      if (totalPages <= 1) {
        pagination.innerHTML = '';
        return;
      }
      
      let paginationHtml = '';
      
      // Previous button
      paginationHtml += `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
          <a class="page-link" href="#" onclick="changePage(${currentPage - 1}); return false;">
            <i class="fas fa-chevron-left"></i>
          </a>
        </li>
      `;
      
      // Page numbers
      const maxVisiblePages = 5;
      let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
      let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
      
      if (endPage - startPage + 1 < maxVisiblePages) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
      }
      
      for (let i = startPage; i <= endPage; i++) {
        paginationHtml += `
          <li class="page-item ${i === currentPage ? 'active' : ''}">
            <a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>
          </li>
        `;
      }
      
      // Next button
      paginationHtml += `
        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
          <a class="page-link" href="#" onclick="changePage(${currentPage + 1}); return false;">
            <i class="fas fa-chevron-right"></i>
          </a>
        </li>
      `;
      
      pagination.innerHTML = paginationHtml;
    }
    
    // Change page
    function changePage(page) {
      currentPage = page;
      applyFilters();
    }
    
    // Reset all filters
    function resetFilters() {
      document.getElementById('search-input').value = '';
      document.getElementById('category-filter').value = '';
      document.getElementById('priority-filter').value = '';
      document.getElementById('time-filter').value = '';
      
      applyFilters();
    }
    
    // Toggle view mode (list/card)
    function toggleViewMode() {
      viewMode = viewMode === 'list' ? 'card' : 'list';
      
      // Update icon
      document.getElementById('view-icon').className = viewMode === 'list' ? 'fas fa-th-list' : 'fas fa-th';
      
      // TODO: Implement card view if needed
      applyFilters();
    }
    
    // View note detail
    function viewNoteDetail(noteId) {
      showLoading(true);
      selectedNoteId = noteId;
      
      // Mark selected item in the list
      const items = document.querySelectorAll('.note-list-item');
      items.forEach(item => item.classList.remove('active'));
      
      // Find the item with the matching note ID and mark it active
      const selectedItem = document.querySelector(`.note-list-item[onclick*="${noteId}"]`);
      if (selectedItem) {
        selectedItem.classList.add('active');
        
        // Scroll the item into view if needed
        selectedItem.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
      
      // Get note data from array
      const note = allNotes.find(n => n.id === noteId);
      
      if (!note) {
        showToast('Error', 'Note not found', 'error');
        showLoading(false);
        return;
      }
      
      // Format dates
      const createdDate = formatDate(note.createdDate, true);
      const updatedDate = formatDate(note.updatedDate, true);
      
      // Build detail view HTML
      let detailHtml = `
        <div class="notes-detail-header">
          <div class="d-flex justify-content-between align-items-start">
            <div>
              <h3 class="notes-detail-title">${note.title || 'Untitled Note'}</h3>
              <div class="notes-detail-meta">
                <span><i class="far fa-calendar-alt mr-1"></i> Created: ${createdDate}</span>
                <span class="meta-divider">|</span>
                <span><i class="far fa-clock mr-1"></i> Updated: ${updatedDate}</span>
                ${note.category ? `
                  <span class="meta-divider">|</span>
                  <span><i class="far fa-folder mr-1"></i> ${note.category}</span>
                ` : ''}
                <span class="meta-divider">|</span>
                <span>
                  <i class="fas fa-flag mr-1 text-${getPriorityColorClass(note.priority)}"></i> 
                  ${formatPriority(note.priority)} Priority
                </span>
              </div>
            </div>
            <div>
              <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="noteActionDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  <i class="fas fa-ellipsis-v"></i>
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="noteActionDropdown">
                  <a class="dropdown-item" href="#" onclick="editNote('${note.id}'); return false;">
                    <i class="fas fa-edit"></i> Edit
                  </a>
                  <a class="dropdown-item" href="#" onclick="duplicateNote('${note.id}'); return false;">
                    <i class="far fa-clone"></i> Duplicate
                  </a>
                  <a class="dropdown-item" href="#" onclick="togglePin('${note.id}'); return false;">
                    <i class="fas ${note.pinned ? 'fa-times' : 'fa-thumbtack'}"></i> ${note.pinned ? 'Unpin' : 'Pin to Top'}
                  </a>
                  <div class="dropdown-divider"></div>
                  <a class="dropdown-item text-danger" href="#" onclick="confirmDeleteNote('${note.id}'); return false;">
                    <i class="far fa-trash-alt"></i> Delete
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="notes-detail-content">
          <div class="notes-detail-section">
            <div class="note-content">
              ${note.content || '<p class="text-muted">No content</p>'}
            </div>
          </div>
          
          ${note.tags && note.tags.length ? `
            <div class="notes-detail-section">
              <div class="notes-detail-section-title">
                <i class="fas fa-tags notes-detail-section-icon"></i> Tags
              </div>
              <div class="tag-list">
                ${note.tags.map(tag => `
                  <div class="tag"><i class="fas fa-tag"></i> ${tag}</div>
                `).join('')}
              </div>
            </div>
          ` : ''}
          
          ${note.relatedItems && note.relatedItems.length ? `
            <div class="notes-detail-section">
              <div class="notes-detail-section-title">
                <i class="fas fa-link notes-detail-section-icon"></i> Related Items
              </div>
              <div class="related-items-list">
                ${note.relatedItems.map(item => {
                  let iconClass = 'fas fa-link';
                  
                  switch (item.type) {
                    case 'team-member':
                      iconClass = 'fas fa-user';
                      break;
                    case 'one-on-one':
                      iconClass = 'fas fa-comments';
                      break;
                    case 'project':
                      iconClass = 'fas fa-project-diagram';
                      break;
                    case 'task':
                      iconClass = 'fas fa-tasks';
                      break;
                  }
                  
                  return `
                    <div class="related-item" onclick="openRelatedItem('${item.type}', '${item.id}')">
                      <div class="related-item-icon">
                        <i class="${iconClass}"></i>
                      </div>
                      <div class="related-item-content">
                        <div class="related-item-title">${item.name}</div>
                        <div class="related-item-meta">${formatRelatedItemType(item.type)}</div>
                      </div>
                    </div>
                  `;
                }).join('')}
              </div>
            </div>
          ` : ''}
          
          <div class="notes-detail-section">
            <div class="notes-detail-section-title">
              <i class="fas fa-info-circle notes-detail-section-icon"></i> Note Details
            </div>
            <div class="row">
              <div class="col-md-6">
                <p><strong>Created by:</strong> ${note.createdBy || 'Unknown'}</p>
                <p><strong>Note ID:</strong> ${note.id}</p>
              </div>
              <div class="col-md-6">
                <p><strong>Status:</strong> ${note.draft ? 'Draft' : 'Published'}</p>
                <p><strong>Sharing:</strong> ${note.shared ? 'Shared with team' : 'Private'}</p>
              </div>
            </div>
          </div>
        </div>
      `;
      
      document.getElementById('notes-detail').innerHTML = detailHtml;
      showLoading(false);
    }
    
    // Clear note detail view
    function clearNoteDetail() {
      selectedNoteId = null;
      
      document.getElementById('notes-detail').innerHTML = `
        <div class="notes-detail-empty">
          <i class="far fa-sticky-note empty-icon"></i>
          <h4>No Note Selected</h4>
          <p>Select a note from the list to view details</p>
        </div>
      `;
    }
    
    // Create new note
    function createNewNote() {
      google.script.run
        .withSuccessHandler(function() {
          // Redirect to the form page
          google.script.run.createGeneralNoteForm();
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to open form: ' + error, 'error');
        })
        .cacheGeneralNoteId(null);
    }
    
    // Edit note
    function editNote(noteId) {
      google.script.run
        .withSuccessHandler(function() {
          // Redirect to the form page
          google.script.run.createGeneralNoteForm();
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to open form: ' + error, 'error');
        })
        .cacheGeneralNoteId(noteId);
    }
    
    // Duplicate note
    function duplicateNote(noteId) {
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            showToast('Success', 'Note duplicated successfully', 'success');
            loadNotes(); // Reload notes
          } else {
            showToast('Error', result.message, 'error');
            showLoading(false);
          }
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to duplicate note: ' + error, 'error');
          showLoading(false);
        })
        .duplicateGeneralNote(noteId);
    }
    
    // Toggle pin status
    function togglePin(noteId) {
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            showToast('Success', result.message, 'success');
            loadNotes(); // Reload notes
          } else {
            showToast('Error', result.message, 'error');
            showLoading(false);
          }
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to update pin status: ' + error, 'error');
          showLoading(false);
        })
        .toggleGeneralNotePin(noteId);
    }
    
    // Confirm delete note
    function confirmDeleteNote(noteId) {
      if (confirm('Are you sure you want to delete this note? This action cannot be undone.')) {
        deleteNote(noteId);
      }
    }
    
    // Delete note
    function deleteNote(noteId) {
      showLoading(true);
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            showToast('Success', 'Note deleted successfully', 'success');
            
            // Clear selection if the deleted note was selected
            if (selectedNoteId === noteId) {
              clearNoteDetail();
            }
            
            loadNotes(); // Reload notes
          } else {
            showToast('Error', result.message, 'error');
            showLoading(false);
          }
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to delete note: ' + error, 'error');
          showLoading(false);
        })
        .deleteGeneralNote(noteId);
    }
    
    // Open related item
    function openRelatedItem(type, id) {
      google.script.run
        .withSuccessHandler(function() {
          showToast('Success', 'Opening related item...', 'success');
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to open related item: ' + error, 'error');
        })
        .openRelatedItem(type, id);
    }
    
    // Export notes
    function exportNotes() {
      showLoading(true);
      
      // Get current filters
      const filters = {
        searchTerm: document.getElementById('search-input').value,
        category: document.getElementById('category-filter').value,
        priority: document.getElementById('priority-filter').value,
        timeFilter: document.getElementById('time-filter').value
      };
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            showToast('Success', 'Notes exported successfully', 'success');
            
            // Open the exported spreadsheet in a new tab
            window.open(result.url, '_blank');
          } else {
            showToast('Error', result.message, 'error');
          }
          showLoading(false);
        })
        .withFailureHandler(function(error) {
          showToast('Error', 'Failed to export notes: ' + error, 'error');
          showLoading(false);
        })
        .exportGeneralNotes(filters);
    }
    
    // Print note
    function printNote() {
      // If no note is selected, show message
      if (!selectedNoteId) {
        showToast('Info', 'Please select a note to print', 'info');
        return;
      }
      
      window.print();
    }
    
    // Format date
    function formatDate(dateString, includeTime = false) {
      if (!dateString) return 'N/A';
      
      try {
        const date = new Date(dateString);
        
        if (isNaN(date.getTime())) {
          return 'Invalid Date';
        }
        
        const options = includeTime ? 
          { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' } : 
          { year: 'numeric', month: 'short', day: 'numeric' };
        
        return date.toLocaleDateString(undefined, options);
      } catch (e) {
        return 'Date Error';
      }
    }
    
    // Format priority
    function formatPriority(priority) {
      switch (priority) {
        case 'high':
          return 'High';
        case 'medium':
          return 'Medium';
        case 'low':
          return 'Low';
        default:
          return 'Medium';
      }
    }
    
    // Get priority color class
    function getPriorityColorClass(priority) {
      switch (priority) {
        case 'high':
          return 'danger';
        case 'medium':
          return 'warning';
        case 'low':
          return 'success';
        default:
          return 'warning';
      }
    }
    
    // Format related item type
    function formatRelatedItemType(type) {
      switch (type) {
        case 'team-member':
          return 'Team Member';
        case 'one-on-one':
          return 'One-on-One Session';
        case 'project':
          return 'Project';
        case 'task':
          return 'Task';
        default:
          return type;
      }
    }
    
    // Strip HTML tags from text
    function stripHtml(html) {
      if (!html) return '';
      
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = html;
      return tempDiv.textContent || tempDiv.innerText || '';
    }
    
    // Show/hide loading overlay
    function showLoading(show) {
      document.getElementById('loading-overlay').style.display = show ? 'flex' : 'none';
    }
    
    // Show toast notification
    function showToast(title, message, type) {
      const toastContainer = document.getElementById('toast-container');
      const id = 'toast-' + Date.now();
      
      let iconClass = 'fas fa-info-circle';
      if (type === 'success') iconClass = 'fas fa-check-circle';
      if (type === 'error') iconClass = 'fas fa-exclamation-circle';
      if (type === 'warning') iconClass = 'fas fa-exclamation-triangle';
      
      const toastHtml = `
        <div class="toast ${type}" id="${id}">
          <div class="toast-header">
            <i class="${iconClass} toast-icon"></i>
            <div class="toast-content">
              <div class="toast-title">${title}</div>
              <div class="toast-message">${message}</div>
            </div>
            <span class="toast-close" onclick="dismissToast('${id}')">&times;</span>
          </div>
        </div>
      `;
      
      toastContainer.insertAdjacentHTML('beforeend', toastHtml);
      
      // Auto-dismiss after 5 seconds
      setTimeout(() => dismissToast(id), 5000);
    }
    
    // Dismiss toast
    function dismissToast(id) {
      const toast = document.getElementById(id);
      if (toast) {
        toast.style.opacity = '0';
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      }
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    :root {
      --primary: #6366f1;
      --primary-light: #818cf8;
      --primary-dark: #4f46e5;
      --secondary: #0ea5e9;
      --success: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --light-bg: #f9fafb;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      color: #1f2937;
      background-color: var(--light-bg);
      padding: 1rem;
    }
    
    .dashboard-container {
      max-width: 100%;
      margin: 0 auto;
    }
    
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      background-color: white;
      padding: 1rem 1.5rem;
      border-radius: 12px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 10px 15px -3px rgba(0,0,0,0.05);
    }
    
    .page-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #111827;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .filters-section {
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 10px 15px -3px rgba(0,0,0,0.05);
      padding: 1rem 1.5rem;
      margin-bottom: 1.5rem;
    }
    
    .card {
      position: relative;
      background-color: white;
      border-radius: 12px;
      border: none;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 10px 15px -3px rgba(0,0,0,0.05);
      margin-bottom: 1.5rem;
      transition: transform 0.2s, box-shadow 0.2s;
      overflow: hidden;
    }
    
    .card:hover {
      transform: translateY(-3px);
      box-shadow: 0 10px 25px -5px rgba(0,0,0,0.1), 0 10px 10px -5px rgba(0,0,0,0.04);
    }
    
    .card-header {
      background-color: white;
      border-bottom: 1px solid #e5e7eb;
      padding: 1.25rem 1.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-title {
      font-size: 1.125rem;
      font-weight: 600;
      color: #374151;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      color: var(--primary);
      margin-right: 0.5rem;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    .metrics-card {
      position: relative;
      height: 100%;
      display: flex;
      flex-direction: column;
    }
    
    .metric-value {
      font-size: 2.25rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.25rem;
    }
    
    .metric-label {
      color: #6b7280;
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    .metric-trend {
      position: absolute;
      top: 1.5rem;
      right: 1.5rem;
      display: flex;
      align-items: center;
      font-size: 0.875rem;
      font-weight: 500;
      padding: 0.25rem 0.5rem;
      border-radius: 9999px;
    }
    
    .trend-up {
      color: var(--success);
      background-color: rgba(16, 185, 129, 0.1);
    }
    
    .trend-down {
      color: var(--danger);
      background-color: rgba(239, 68, 68, 0.1);
    }
    
    .trend-neutral {
      color: #6b7280;
      background-color: rgba(107, 114, 128, 0.1);
    }
    
    .chart-container {
      position: relative;
      min-height: 250px;
      width: 100%;
    }
    
    .tag-cloud {
      height: 300px;
      width: 100%;
      position: relative;
    }
    
    .tag-cloud-tag {
      position: absolute;
      transform: translate(-50%, -50%);
      color: var(--primary);
      white-space: nowrap;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .tag-cloud-tag:hover {
      color: var(--primary-dark);
      transform: translate(-50%, -50%) scale(1.1);
    }
    
    .recent-note {
      display: flex;
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1rem;
      transition: all 0.2s;
      border: 1px solid #e5e7eb;
    }
    
    .recent-note:hover {
      background-color: #f3f4f6;
      transform: translateX(3px);
      cursor: pointer;
    }
    
    .recent-note:last-child {
      margin-bottom: 0;
    }
    
    .recent-note-icon {
      width: 40px;
      height: 40px;
      border-radius: 8px;
      background-color: #eef2ff;
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.25rem;
      margin-right: 1rem;
      flex-shrink: 0;
    }
    
    .recent-note-content {
      flex-grow: 1;
    }
    
    .recent-note-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
      color: #111827;
    }
    
    .recent-note-meta {
      display: flex;
      align-items: center;
      color: #6b7280;
      font-size: 0.75rem;
    }
    
    .note-meta-divider {
      margin: 0 0.25rem;
    }
    
    .categories-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .category-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem 0;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .category-item:last-child {
      border-bottom: none;
    }
    
    .category-name {
      font-weight: 500;
      color: #4b5563;
    }
    
    .category-count {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 9999px;
      background-color: #eef2ff;
      color: var(--primary);
      font-size: 0.75rem;
      font-weight: 600;
    }
    
    .activity-timeline {
      position: relative;
      padding-left: 30px;
    }
    
    .timeline-line {
      position: absolute;
      left: 15px;
      top: 0;
      bottom: 0;
      width: 2px;
      background-color: #e5e7eb;
      z-index: 1;
    }
    
    .timeline-item {
      position: relative;
      margin-bottom: 1.5rem;
    }
    
    .timeline-item:last-child {
      margin-bottom: 0;
    }
    
    .timeline-dot {
      position: absolute;
      left: -30px;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      background-color: var(--primary);
      border: 3px solid white;
      z-index: 2;
    }
    
    .timeline-content {
      background-color: #f3f4f6;
      border-radius: 8px;
      padding: 1rem;
    }
    
    .timeline-date {
      font-size: 0.75rem;
      color: #6b7280;
      margin-bottom: 0.5rem;
    }
    
    .timeline-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
      color: #111827;
    }
    
    .timeline-text {
      font-size: 0.875rem;
      color: #4b5563;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .spinner-container {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    .spinner-text {
      margin-top: 1rem;
      color: var(--primary);
      font-weight: 500;
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
      font-weight: 500;
      padding: 0.5rem 1.25rem;
      border-radius: 0.5rem;
      transition: all 0.2s;
    }
    
    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-1px);
      box-shadow: 0 4px 6px rgba(50, 50, 93, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
      font-weight: 500;
      padding: 0.5rem 1.25rem;
      border-radius: 0.5rem;
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-secondary {
      color: #6b7280;
      border-color: #e5e7eb;
      font-weight: 500;
      padding: 0.5rem 1.25rem;
      border-radius: 0.5rem;
    }
    
    .btn-outline-secondary:hover {
      background-color: #f3f4f6;
      color: #4b5563;
      border-color: #d1d5db;
    }
    
    .form-control {
      border-radius: 0.5rem;
      border-color: #d1d5db;
      padding: 0.75rem 1rem;
    }
    
    .form-control:focus {
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
      border-color: var(--primary);
    }
    
    /* Progress bars */
    .progress {
      height: 0.5rem;
      border-radius: 9999px;
      background-color: #e5e7eb;
      margin-top: 0.5rem;
      margin-bottom: 0.25rem;
    }
    
    .progress-bar {
      border-radius: 9999px;
    }
    
    .progress-label {
      display: flex;
      justify-content: space-between;
      font-size: 0.75rem;
      color: #6b7280;
    }
    
    /* Toast styling */
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }
    
    .toast {
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      min-width: 250px;
      margin-bottom: 0.75rem;
      display: flex;
      overflow: hidden;
      animation: slideIn 0.3s ease-out forwards;
      max-width: 450px;
    }
    
    @keyframes slideIn {
      from { transform: translateX(100%); }
      to { transform: translateX(0); }
    }
    
    .toast.success {
      border-left: 4px solid var(--success);
    }
    
    .toast.error {
      border-left: 4px solid var(--danger);
    }
    
    .toast.warning {
      border-left: 4px solid var(--warning);
    }
    
    .toast.info {
      border-left: 4px solid var(--primary);
    }
    
    .toast-header {
      padding: 1rem;
      display: flex;
      align-items: flex-start;
    }
    
    .toast-icon {
      margin-right: 12px;
      font-size: 24px;
      line-height: 1;
    }
    
    .toast.success .toast-icon {
      color: var(--success);
    }
    
    .toast.error .toast-icon {
      color: var(--danger);
    }
    
    .toast.warning .toast-icon {
      color: var(--warning);
    }
    
    .toast.info .toast-icon {
      color: var(--primary);
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
      color: #111827;
    }
    
    .toast-message {
      color: #6b7280;
      font-size: 0.875rem;
    }
    
    .toast-close {
      color: #9ca3af;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
      margin-left: 12px;
    }
    
    .toast-close:hover {
      color: #6b7280;
    }
  </style>
</head>
<body>
  <div class="container-fluid dashboard-container">
    <div class="header">
      <h2 class="page-title">
        <i class="fas fa-analytics text-primary mr-2"></i>
        General Notes Analytics
      </h2>
      <div>
        <button class="btn btn-outline-primary mr-2" onclick="createNewNote()">
          <i class="fas fa-plus mr-1"></i> New Note
        </button>
        <button class="btn btn-outline-secondary mr-2" onclick="viewAllNotes()">
          <i class="fas fa-sticky-note mr-1"></i> View All Notes
        </button>
        <button class="btn btn-outline-secondary" onclick="exportDashboard()">
          <i class="fas fa-file-export mr-1"></i> Export
        </button>
      </div>
    </div>
    
    <div class="filters-section">
      <div class="row align-items-center">
        <div class="col-md-4">
          <select class="form-control" id="time-period" onchange="refreshDashboard()">
            <option value="30">Last 30 Days</option>
            <option value="90">Last 90 Days</option>
            <option value="180">Last 180 Days</option>
            <option value="365" selected>Last 12 Months</option>
            <option value="all">All Time</option>
          </select>
        </div>
        
        <div class="col-md-4">
          <select class="form-control" id="category-filter" onchange="refreshDashboard()">
            <option value="">All Categories</option>
            <!-- Will be populated dynamically -->
          </select>
        </div>
        
        <div class="col-md-4">
          <div class="input-group">
            <input type="text" class="form-control" id="tag-filter" placeholder="Filter by tag">
            <div class="input-group-append">
              <button class="btn btn-outline-secondary" type="button" onclick="refreshDashboard()">
                <i class="fas fa-filter"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-3">
        <div class="card h-100">
          <div class="card-body metrics-card">
            <div class="metric-value" id="total-notes">0</div>
            <div class="metric-label">Total Notes</div>
            <div class="metric-trend" id="notes-trend">
              <i class="fas fa-equals mr-1"></i> 0%
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-md-3">
        <div class="card h-100">
          <div class="card-body metrics-card">
            <div class="metric-value" id="active-notes">0</div>
            <div class="metric-label">Published Notes</div>
            <div class="metric-trend" id="active-notes-trend">
              <i class="fas fa-equals mr-1"></i> 0%
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-md-3">
        <div class="card h-100">
          <div class="card-body metrics-card">
            <div class="metric-value" id="avg-content-length">0</div>
            <div class="metric-label">Avg. Word Count</div>
            <div class="metric-trend" id="content-length-trend">
              <i class="fas fa-equals mr-1"></i> 0%
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-md-3">
        <div class="card h-100">
          <div class="card-body metrics-card">
            <div class="metric-value" id="total-tags">0</div>
            <div class="metric-label">Total Tags</div>
            <div class="metric-trend" id="tags-trend">
              <i class="fas fa-equals mr-1"></i> 0%
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-8">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title">
              <i class="fas fa-chart-line card-title-icon"></i>
              Note Creation Activity
            </h5>
            <div class="btn-group btn-group-sm">
              <button type="button" class="btn btn-outline-secondary active" data-period="month" onclick="updateChartPeriod(this)">Monthly</button>
              <button type="button" class="btn btn-outline-secondary" data-period="week" onclick="updateChartPeriod(this)">Weekly</button>
              <button type="button" class="btn btn-outline-secondary" data-period="day" onclick="updateChartPeriod(this)">Daily</button>
            </div>
          </div>
          <div class="card-body">
            <div class="chart-container">
              <canvas id="activity-chart"></canvas>
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-md-4">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title">
              <i class="fas fa-chart-pie card-title-icon"></i>
              Notes by Category
            </h5>
          </div>
          <div class="card-body">
            <div class="chart-container">
              <canvas id="categories-chart"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-6">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title">
              <i class="fas fa-tags card-title-icon"></i>
              Popular Tags
            </h5>
          </div>
          <div class="card-body">
            <div class="tag-cloud" id="tag-cloud">
              <!-- Tag cloud will be generated here -->
              <div class="d-flex justify-content-center align-items-center h-100">
                <div class="spinner-border text-primary" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-md-6">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title">
              <i class="fas fa-flag card-title-icon"></i>
              Notes by Priority
            </h5>
          </div>
          <div class="card-body">
            <div class="chart-container">
              <canvas id="priority-chart"></canvas>
            </div>
            <div class="mt-4">
              <div class="mb-3">
                <div class="d-flex justify-content-between mb-1">
                  <div><i class="fas fa-arrow-up text-danger mr-1"></i> High Priority</div>
                  <div id="high-priority-percent">0%</div>
                </div>
                <div class="progress">
                  <div id="high-priority-bar" class="progress-bar bg-danger" style="width: 0%"></div>
                </div>
              </div>
              
              <div class="mb-3">
                <div class="d-flex justify-content-between mb-1">
                  <div><i class="fas fa-minus text-warning mr-1"></i> Medium Priority</div>
                  <div id="medium-priority-percent">0%</div>
                </div>
                <div class="progress">
                  <div id="medium-priority-bar" class="progress-bar bg-warning" style="width: 0%"></div>
                </div>
              </div>
              
              <div>
                <div class="d-flex justify-content-between mb-1">
                  <div><i class="fas fa-arrow-down text-success mr-1"></i> Low Priority</div>
                  <div id="low-priority-percent">0%</div>
                </div>
                <div class="progress">
                  <div id="low-priority-bar" class="progress-bar bg-success" style="width: 0%"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-8">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title">
              <i class="fas fa-history card-title-icon"></i>
              Activity Timeline
            </h5>
          </div>
          <div class="card-body">
            <div class="activity-timeline" id="activity-timeline">
              <div class="timeline-line"></div>
              
              <!-- Timeline items will be generated here -->
              <div class="d-flex justify-content-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-md-4">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title">
              <i class="fas fa-clock card-title-icon"></i>
              Recent Notes
            </h5>
          </div>
          <div class="card-body">
            <div id="recent-notes">
              <!-- Recent notes will be generated here -->
              <div class="d-flex justify-content-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-6">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title">
              <i class="fas fa-folder card-title-icon"></i>
              Categories Breakdown
            </h5>
          </div>
          <div class="card-body">
            <ul class="categories-list" id="categories-list">
              <!-- Categories breakdown will be generated here -->
              <div class="d-flex justify-content-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
              </div>
            </ul>
          </div>
        </div>
      </div>
      
      <div class="col-md-6">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title">
              <i class="fas fa-chart-bar card-title-icon"></i>
              Word Count Distribution
            </h5>
          </div>
          <div class="card-body">
            <div class="chart-container">
              <canvas id="word-count-chart"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loading-overlay" style="display:none;">
    <div class="spinner-container">
      <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div class="spinner-text">Loading dashboard data...</div>
    </div>
  </div>
  
  <!-- Toast Container -->
  <div class="toast-container" id="toast-container"></div>
  
  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.6.0.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
  <script>
    // Global variables
let dashboardData = null;
let activityChart = null;
let categoriesChart = null;
let priorityChart = null;
let wordCountChart = null;
let chartPeriod = 'month';
let allCategories = [];

// Colors for charts
const chartColors = [
  'rgba(99, 102, 241, 0.8)',
  'rgba(14, 165, 233, 0.8)',
  'rgba(16, 185, 129, 0.8)',
  'rgba(245, 158, 11, 0.8)',
  'rgba(239, 68, 68, 0.8)',
  'rgba(139, 92, 246, 0.8)',
  'rgba(20, 184, 166, 0.8)',
  'rgba(249, 115, 22, 0.8)'
];

// Initialize dashboard
document.addEventListener('DOMContentLoaded', function() {
  refreshDashboard();
});

// Refresh dashboard data
function refreshDashboard() {
  showLoading(true);
  
  // Get filter values
  const filters = {
    timePeriod: document.getElementById('time-period').value,
    category: document.getElementById('category-filter').value,
    tag: document.getElementById('tag-filter').value.trim()
  };
  
  google.script.run
    .withSuccessHandler(function(data) {
      dashboardData = data;
      
      // Update category filter options if we received categories
      if (data.categories && data.categories.length) {
        updateCategoryFilterOptions(data.categories);
      }
      
      // Update metrics
      updateMetrics(data.metrics);
      
      // Update charts
      updateActivityChart(data.activityData);
      updateCategoriesChart(data.categoriesData);
      updatePriorityChart(data.priorityData);
      updateWordCountChart(data.wordCountData);
      
      // Update tag cloud
      updateTagCloud(data.tagData);
      
      // Update timeline
      updateTimeline(data.timelineData);
      
      // Update recent notes
      updateRecentNotes(data.recentNotes);
      
      // Update categories breakdown
      updateCategoriesBreakdown(data.categoriesData);
      
      showLoading(false);
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to load dashboard data: ' + error, 'error');
      showLoading(false);
    })
    .getGeneralNotesDashboardData(filters);
}

// Update category filter options
function updateCategoryFilterOptions(categories) {
  allCategories = categories;
  
  // Preserve current selection
  const currentSelection = document.getElementById('category-filter').value;
  
  // Get the filter element
  const categoryFilter = document.getElementById('category-filter');
  
  // Clear options but keep the "All Categories" option
  categoryFilter.innerHTML = '<option value="">All Categories</option>';
  
  // Add categories as options
  categories.forEach(category => {
    const option = document.createElement('option');
    option.value = category;
    option.textContent = category;
    
    // Set as selected if it was previously selected
    if (category === currentSelection) {
      option.selected = true;
    }
    
    categoryFilter.appendChild(option);
  });
}

// Update metrics display
function updateMetrics(metrics) {
  if (!metrics) return;
  
  // Update total notes
  document.getElementById('total-notes').textContent = metrics.totalNotes;
  
  // Update notes trend
  const notesTrendEl = document.getElementById('notes-trend');
  updateTrendElement(notesTrendEl, metrics.notesTrend);
  
  // Update active notes
  document.getElementById('active-notes').textContent = metrics.activeNotes;
  
  // Update active notes trend
  const activeNotesTrendEl = document.getElementById('active-notes-trend');
  updateTrendElement(activeNotesTrendEl, metrics.activeNotesTrend);
  
  // Update average content length
  document.getElementById('avg-content-length').textContent = metrics.avgContentLength;
  
  // Update content length trend
  const contentLengthTrendEl = document.getElementById('content-length-trend');
  updateTrendElement(contentLengthTrendEl, metrics.contentLengthTrend);
  
  // Update total tags
  document.getElementById('total-tags').textContent = metrics.totalTags;
  
  // Update tags trend
  const tagsTrendEl = document.getElementById('tags-trend');
  updateTrendElement(tagsTrendEl, metrics.tagsTrend);
}

// Update trend element
function updateTrendElement(element, trendValue) {
  if (trendValue > 0) {
    element.innerHTML = `<i class="fas fa-arrow-up mr-1"></i> ${trendValue}%`;
    element.className = 'metric-trend trend-up';
  } else if (trendValue < 0) {
    element.innerHTML = `<i class="fas fa-arrow-down mr-1"></i> ${Math.abs(trendValue)}%`;
    element.className = 'metric-trend trend-down';
  } else {
    element.innerHTML = `<i class="fas fa-equals mr-1"></i> ${trendValue}%`;
    element.className = 'metric-trend trend-neutral';
  }
}

// Update activity chart
function updateActivityChart(data) {
  if (!data) return;
  
  const ctx = document.getElementById('activity-chart').getContext('2d');
  
  // Destroy existing chart if it exists
  if (activityChart) {
    activityChart.destroy();
  }
  
  // Create new chart
  activityChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: data.labels,
      datasets: [
        {
          label: 'New Notes',
          data: data.values,
          backgroundColor: 'rgba(99, 102, 241, 0.2)',
          borderColor: 'rgba(99, 102, 241, 1)',
          borderWidth: 2,
          tension: 0.4,
          pointRadius: 3,
          pointBackgroundColor: 'rgba(99, 102, 241, 1)',
          fill: true
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false
        },
        tooltip: {
          mode: 'index',
          intersect: false,
          callbacks: {
            title: function(tooltipItems) {
              return tooltipItems[0].label;
            },
            label: function(context) {
              return `New Notes: ${context.parsed.y}`;
            }
          }
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            precision: 0
          }
        }
      }
    }
  });
}

// Update categories chart
function updateCategoriesChart(data) {
  if (!data || !data.length) return;
  
  const ctx = document.getElementById('categories-chart').getContext('2d');
  
  // Destroy existing chart if it exists
  if (categoriesChart) {
    categoriesChart.destroy();
  }
  
  // Transform data for chart
  const labels = data.map(item => item.category || 'Uncategorized');
  const values = data.map(item => item.count);
  const backgroundColors = chartColors.slice(0, data.length);
  
  // Create new chart
  categoriesChart = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: labels,
      datasets: [
        {
          data: values,
          backgroundColor: backgroundColors,
          borderWidth: 0
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'right',
          labels: {
            boxWidth: 12,
            padding: 15
          }
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              const value = context.parsed;
              const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
              const percentage = Math.round((value / total) * 100);
              return `${context.label}: ${value} (${percentage}%)`;
            }
          }
        }
      },
      cutout: '60%'
    }
  });
}

// Update priority chart
function updatePriorityChart(data) {
  if (!data) return;
  
  const ctx = document.getElementById('priority-chart').getContext('2d');
  
  // Destroy existing chart if it exists
  if (priorityChart) {
    priorityChart.destroy();
  }
  
  // Create new chart
  priorityChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['High', 'Medium', 'Low'],
      datasets: [
        {
          data: [
            data.high || 0,
            data.medium || 0,
            data.low || 0
          ],
          backgroundColor: [
            'rgba(239, 68, 68, 0.8)',  // High - red
            'rgba(245, 158, 11, 0.8)', // Medium - amber
            'rgba(16, 185, 129, 0.8)'  // Low - green
          ],
          borderWidth: 0
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              const value = context.parsed.y;
              const total = data.high + data.medium + data.low;
              const percentage = Math.round((value / total) * 100);
              return `${context.label} Priority: ${value} (${percentage}%)`;
            }
          }
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            precision: 0
          }
        }
      }
    }
  });
  
  // Update priority percentages
  const total = data.high + data.medium + data.low;
  
  const highPercent = total > 0 ? Math.round((data.high / total) * 100) : 0;
  const mediumPercent = total > 0 ? Math.round((data.medium / total) * 100) : 0;
  const lowPercent = total > 0 ? Math.round((data.low / total) * 100) : 0;
  
  document.getElementById('high-priority-percent').textContent = `${highPercent}%`;
  document.getElementById('medium-priority-percent').textContent = `${mediumPercent}%`;
  document.getElementById('low-priority-percent').textContent = `${lowPercent}%`;
  
  document.getElementById('high-priority-bar').style.width = `${highPercent}%`;
  document.getElementById('medium-priority-bar').style.width = `${mediumPercent}%`;
  document.getElementById('low-priority-bar').style.width = `${lowPercent}%`;
}

// Update word count chart
function updateWordCountChart(data) {
  if (!data) return;
  
  const ctx = document.getElementById('word-count-chart').getContext('2d');
  
  // Destroy existing chart if it exists
  if (wordCountChart) {
    wordCountChart.destroy();
  }
  
  // Create new chart
  wordCountChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: data.labels,
      datasets: [
        {
          label: 'Notes Count',
          data: data.values,
          backgroundColor: 'rgba(99, 102, 241, 0.8)',
          borderWidth: 0
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false
        },
        tooltip: {
          callbacks: {
            title: function(tooltipItems) {
              return tooltipItems[0].label;
            },
            label: function(context) {
              return `Number of Notes: ${context.parsed.y}`;
            }
          }
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            precision: 0
          }
        }
      }
    }
  });
}

// Update tag cloud
function updateTagCloud(data) {
  if (!data || !data.length) {
    document.getElementById('tag-cloud').innerHTML = `
      <div class="d-flex justify-content-center align-items-center h-100">
        <p class="text-muted">No tags found in the selected time period</p>
      </div>
    `;
    return;
  }
  
  const container = document.getElementById('tag-cloud');
  container.innerHTML = '';
  
  // Calculate min and max frequencies for sizing
  const frequencies = data.map(item => item.count);
  const minFreq = Math.min(...frequencies);
  const maxFreq = Math.max(...frequencies);
  
  // Function to map frequency to font size (between 12px and 28px)
  const getFontSize = (count) => {
    if (minFreq === maxFreq) return 18;
    const size = 12 + ((count - minFreq) / (maxFreq - minFreq)) * 16;
    return size;
  };
  
  // Place tags randomly in the container
  data.forEach(item => {
    const fontSize = getFontSize(item.count);
    
    // Create tag element
    const tagEl = document.createElement('div');
    tagEl.className = 'tag-cloud-tag';
    tagEl.textContent = item.tag;
    tagEl.style.fontSize = `${fontSize}px`;
    tagEl.style.fontWeight = fontSize > 20 ? 'bold' : 'normal';
    tagEl.title = `${item.count} occurrences`;
    
    // Add click handler to filter by this tag
    tagEl.addEventListener('click', function() {
      document.getElementById('tag-filter').value = item.tag;
      refreshDashboard();
    });
    
    // Random position
    const left = Math.random() * 90 + 5; // 5% to 95%
    const top = Math.random() * 90 + 5;  // 5% to 95%
    tagEl.style.left = `${left}%`;
    tagEl.style.top = `${top}%`;
    
    // Add to container
    container.appendChild(tagEl);
  });
}

// Update timeline
function updateTimeline(data) {
  if (!data || !data.length) {
    document.getElementById('activity-timeline').innerHTML = `
      <div class="timeline-line"></div>
      <div class="d-flex justify-content-center py-4">
        <p class="text-muted">No activity in the selected time period</p>
      </div>
    `;
    return;
  }
  
  const container = document.getElementById('activity-timeline');
  let html = '<div class="timeline-line"></div>';
  
  data.forEach(item => {
    html += `
      <div class="timeline-item">
        <div class="timeline-dot"></div>
        <div class="timeline-content">
          <div class="timeline-date">${formatDate(item.date)}</div>
          <div class="timeline-title">${item.title}</div>
          <div class="timeline-text">${item.description}</div>
        </div>
      </div>
    `;
  });
  
  container.innerHTML = html;
}

// Update recent notes
function updateRecentNotes(data) {
  if (!data || !data.length) {
    document.getElementById('recent-notes').innerHTML = `
      <div class="d-flex justify-content-center py-4">
        <p class="text-muted">No recent notes found</p>
      </div>
    `;
    return;
  }
  
  const container = document.getElementById('recent-notes');
  let html = '';
  
  data.forEach(note => {
    let iconClass = 'fas fa-sticky-note';
    
    // Different icon based on category
    if (note.category) {
      switch (note.category.toLowerCase()) {
        case 'team':
          iconClass = 'fas fa-users';
          break;
        case 'project':
          iconClass = 'fas fa-project-diagram';
          break;
        case 'process':
          iconClass = 'fas fa-cogs';
          break;
        case 'meeting':
          iconClass = 'fas fa-comments';
          break;
        case 'idea':
          iconClass = 'fas fa-lightbulb';
          break;
        case 'training':
          iconClass = 'fas fa-graduation-cap';
          break;
      }
    }
    
    html += `
      <div class="recent-note" onclick="viewNote('${note.id}')">
        <div class="recent-note-icon">
          <i class="${iconClass}"></i>
        </div>
        <div class="recent-note-content">
          <div class="recent-note-title">${note.title || 'Untitled Note'}</div>
          <div class="recent-note-meta">
            <span>${formatDate(note.updatedDate)}</span>
            ${note.category ? `
              <span class="note-meta-divider">•</span>
              <span>${note.category}</span>
            ` : ''}
            ${note.priority ? `
              <span class="note-meta-divider">•</span>
              <span class="text-${getPriorityColorClass(note.priority)}">${capitalizeFirst(note.priority)} Priority</span>
            ` : ''}
          </div>
        </div>
      </div>
    `;
  });
  
  container.innerHTML = html;
}

// Update categories breakdown
function updateCategoriesBreakdown(data) {
  if (!data || !data.length) {
    document.getElementById('categories-list').innerHTML = `
      <div class="d-flex justify-content-center py-4">
        <p class="text-muted">No categories found</p>
      </div>
    `;
    return;
  }
  
  const container = document.getElementById('categories-list');
  let html = '';
  
  // Sort by count (highest first)
  const sortedData = [...data].sort((a, b) => b.count - a.count);
  
  sortedData.forEach(item => {
    html += `
      <li class="category-item">
        <div class="category-name">${item.category || 'Uncategorized'}</div>
        <div class="category-count">${item.count}</div>
      </li>
    `;
  });
  
  container.innerHTML = html;
}

// Update chart period
function updateChartPeriod(button) {
  // Update button state
  document.querySelectorAll('.card-header .btn-group .btn').forEach(btn => {
    btn.classList.remove('active');
  });
  button.classList.add('active');
  
  // Update chart period
  chartPeriod = button.getAttribute('data-period');
  
  // Refresh dashboard
  refreshDashboard();
}

// Create new note
function createNewNote() {
  google.script.run
    .withSuccessHandler(function() {
      // Redirect to the form page
      google.script.run.createGeneralNoteForm();
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to open form: ' + error, 'error');
    })
    .cacheGeneralNoteId(null);
}

// View all notes
function viewAllNotes() {
  google.script.run
    .withSuccessHandler(function() {
      // Success, the script will handle the redirection
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to open notes view: ' + error, 'error');
    })
    .viewGeneralNotes();
}

// View specific note
function viewNote(noteId) {
  google.script.run
    .withSuccessHandler(function() {
      // Redirect to the notes page
      google.script.run.viewGeneralNotes();
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to open note: ' + error, 'error');
    })
    .cacheGeneralNoteId(noteId);
}

// Export dashboard
function exportDashboard() {
  showLoading(true);
  
  // Get filter values
  const filters = {
    timePeriod: document.getElementById('time-period').value,
    category: document.getElementById('category-filter').value,
    tag: document.getElementById('tag-filter').value.trim()
  };
  
  google.script.run
    .withSuccessHandler(function(result) {
      if (result.success) {
        showToast('Success', 'Dashboard exported successfully', 'success');
        
        // Open the exported spreadsheet in a new tab
        window.open(result.url, '_blank');
      } else {
        showToast('Error', result.message, 'error');
      }
      showLoading(false);
    })
    .withFailureHandler(function(error) {
      showToast('Error', 'Failed to export dashboard: ' + error, 'error');
      showLoading(false);
    })
    .exportGeneralNotesDashboard(filters);
}

// Format date
function formatDate(dateString) {
  if (!dateString) return 'Unknown';
  
  try {
    const date = new Date(dateString);
    
    if (isNaN(date.getTime())) {
      return 'Invalid Date';
    }
    
    return date.toLocaleDateString(undefined, { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric' 
    });
  } catch (e) {
    return 'Date Error';
  }
}

// Get priority color class
function getPriorityColorClass(priority) {
  switch (priority) {
    case 'high':
      return 'danger';
    case 'medium':
      return 'warning';
    case 'low':
      return 'success';
    default:
      return 'warning';
  }
}

// Capitalize first letter
function capitalizeFirst(string) {
  if (!string) return '';
  return string.charAt(0).toUpperCase() + string.slice(1);
}

// Show/hide loading overlay
function showLoading(show) {
  document.getElementById('loading-overlay').style.display = show ? 'flex' : 'none';
}

// Show toast notification
function showToast(title, message, type) {
  const toastContainer = document.getElementById('toast-container');
  const id = 'toast-' + Date.now();
  
  let iconClass = 'fas fa-info-circle';
  if (type === 'success') iconClass = 'fas fa-check-circle';
  if (type === 'error') iconClass = 'fas fa-exclamation-circle';
  if (type === 'warning') iconClass = 'fas fa-exclamation-triangle';
  
  const toastHtml = `
    <div class="toast ${type}" id="${id}">
      <div class="toast-header">
        <i class="${iconClass} toast-icon"></i>
        <div class="toast-content">
          <div class="toast-title">${title}</div>
          <div class="toast-message">${message}</div>
        </div>
        <span class="toast-close" onclick="dismissToast('${id}')">&times;</span>
      </div>
    </div>
  `;
  
  toastContainer.insertAdjacentHTML('beforeend', toastHtml);
  
  // Auto-dismiss after 5 seconds
  setTimeout(() => dismissToast(id), 5000);
}

// Dismiss toast
function dismissToast(id) {
  const toast = document.getElementById(id);
  if (toast) {
    toast.style.opacity = '0';
    setTimeout(() => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 300);
  }
}

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Metrics Entry Form</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css for animations -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --shadow-lg: 0 1rem 3rem rgba(0,0,0,.175);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .container-fluid {
      padding: 30px !important;
    }
    
    /* Header bar */
    .system-info {
      background-color: var(--gray-800);
      color: white;
      padding: 8px 15px;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }
    
    .system-info p {
      margin: 0;
    }
    
    /* Page header */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .page-title i {
      color: var(--primary);
      margin-right: 12px;
    }
    
    /* Cards */
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.75rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
      overflow: hidden;
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Form controls */
    .form-control {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    .form-group label {
      font-weight: 600;
      color: var(--gray-700);
      margin-bottom: 8px;
    }
    
    .form-hint {
      font-size: 0.85rem;
      color: var(--gray-600);
      margin-top: 5px;
    }
    
    .goal-indicator {
      font-size: 0.85rem;
      display: inline-block;
      margin-left: 10px;
      padding: 2px 8px;
      border-radius: 20px;
      background-color: var(--gray-200);
    }
    
    .result-field {
      background-color: var(--gray-100);
      border-left: 4px solid var(--primary);
      font-weight: 600;
    }
    
    /* Status indicators */
    .status-good {
      color: var(--success);
      background-color: rgba(28, 200, 138, 0.1);
    }
    
    .status-warning {
      color: var(--warning);
      background-color: rgba(246, 194, 62, 0.1);
    }
    
    .status-bad {
      color: var(--danger);
      background-color: rgba(231, 74, 59, 0.1);
    }
    
    /* Buttons */
    .btn {
      border-radius: 10px;
      padding: 8px 16px;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
    }
    
    .btn i {
      margin-right: 8px;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-success {
      background: var(--success);
      border-color: var(--success);
    }
    
    .btn-success:hover {
      background-color: #169b6b;
      border-color: #169b6b;
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(28,200,138,.15);
    }
    
    .btn-light {
            background: var(--gray-100);
      color: var(--gray-700);
      border-color: var(--gray-100);
    }
    
    .btn-light:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    /* Tabs */
    .nav-tabs {
      border-bottom: 1px solid var(--gray-200);
      margin-bottom: 20px;
    }
    
    .nav-tabs .nav-link {
      border: none;
      border-bottom: 3px solid transparent;
      border-radius: 0;
      padding: 10px 20px;
      color: var(--gray-600);
      font-weight: 600;
      transition: var(--transition);
    }
    
    .nav-tabs .nav-link:hover {
      color: var(--primary);
      border-bottom-color: var(--gray-300);
    }
    
    .nav-tabs .nav-link.active {
      color: var(--primary);
      border-bottom-color: var(--primary);
    }
    
    /* Alert messages */
    .alert {
      border-radius: 10px;
      padding: 15px 20px;
      margin-bottom: 20px;
      border: none;
    }
    
    .alert-success {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .alert-danger {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--gray-200);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 600;
      color: var(--primary);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Tooltip */
    .tooltip {
      position: relative;
      display: inline-block;
      cursor: pointer;
      color: var(--primary);
      margin-left: 5px;
    }
    
    .tooltip-content {
      visibility: hidden;
      background-color: var(--dark);
      color: white;
      text-align: center;
      border-radius: 6px;
      padding: 8px 12px;
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      transform: translateX(-50%);
      opacity: 0;
      transition: opacity 0.3s;
      width: 200px;
      font-size: 0.8rem;
      font-weight: normal;
    }
    
    .tooltip-content::after {
      content: "";
      position: absolute;
      top: 100%;
      left: 50%;
      margin-left: -5px;
      border-width: 5px;
      border-style: solid;
      border-color: var(--dark) transparent transparent transparent;
    }
    
    .tooltip:hover .tooltip-content {
      visibility: visible;
      opacity: 1;
    }
    
    /* Table styles */
    .table-responsive {
      border-radius: 0.75rem;
      overflow: hidden;
    }
    
    .table {
      margin-bottom: 0;
    }
    
    .table thead th {
      background-color: var(--gray-100);
      border-bottom: 1px solid var(--gray-300);
      color: var(--gray-700);
      font-weight: 600;
      text-transform: uppercase;
      font-size: 0.8rem;
      letter-spacing: 0.5px;
    }
    
    .table tbody tr:hover {
      background-color: var(--gray-100);
    }
    
    /* Media queries */
    @media (max-width: 768px) {
      .container-fluid {
        padding: 15px !important;
      }
      
      .page-header {
        padding: 15px 20px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .page-actions {
        margin-top: 15px;
        width: 100%;
      }
      
      .card-header {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .card-actions {
        margin-top: 10px;
      }
    }
  </style>
</head>
<body>
  <!-- System Info Bar - Using dynamic IDs for values, not hardcoded -->
  <div class="system-info">
    <p>Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): <span id="currentDate">Loading...</span></p>
    <p>Current User: <span id="currentUser">Loading...</span></p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading...</div>
  </div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <h1 class="page-title">
        <i class="fas fa-chart-line"></i> Metrics Entry
      </h1>
      <div class="page-actions">
        <button id="viewDashboardBtn" class="btn btn-light mr-2">
          <i class="fas fa-tachometer-alt"></i> View Dashboard
        </button>
        <button id="viewReportsBtn" class="btn btn-light mr-2">
          <i class="fas fa-file-alt"></i> View Reports
        </button>
      </div>
    </div>
    
    <!-- Metrics Form Card -->
    <div class="card animate__animated animate__fadeIn">
      <div class="card-header">
        <h5 class="card-header-title">
          <i class="fas fa-keyboard text-primary mr-2"></i> Enter Team Metrics
        </h5>
        <div>
          <div class="custom-control custom-switch">
            <input type="checkbox" class="custom-control-input" id="bulkEntrySwitch">
            <label class="custom-control-label" for="bulkEntrySwitch">Bulk Team Entry</label>
          </div>
        </div>
      </div>
      <div class="card-body">
        <!-- Tab Navigation -->
        <ul class="nav nav-tabs" id="metricsFormTabs" role="tablist">
          <li class="nav-item">
            <a class="nav-link active" id="single-tab" data-toggle="tab" href="#singleEntry" role="tab">Individual Entry</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="bulk-tab" data-toggle="tab" href="#bulkEntry" role="tab">Team Bulk Entry</a>
          </li>
        </ul>
        
        <!-- Alert Messages -->
        <div id="alertContainer" style="display: none;">
          <div id="alertMessage" class="alert" role="alert"></div>
        </div>
        
        <!-- Tab Content -->
        <div class="tab-content" id="metricsFormTabContent">
          <!-- Individual Entry Tab -->
          <div class="tab-pane fade show active" id="singleEntry" role="tabpanel">
            <form id="singleMetricsForm">
              <div class="form-row">
                <div class="form-group col-md-6">
                  <label for="metricDate">Date <span class="text-danger">*</span></label>
                  <input type="date" class="form-control" id="metricDate" required>
                </div>
                <div class="form-group col-md-6">
                  <label for="teamMember">Team Member <span class="text-danger">*</span></label>
                  <select class="form-control" id="teamMember" required>
                    <option value="">Select Team Member</option>
                    <!-- Team members will be loaded dynamically -->
                  </select>
                </div>
              </div>
              
              <div class="form-row">
                <div class="form-group col-md-6">
                  <label for="callsOffered">
                    Calls Offered <span class="text-danger">*</span>
                  </label>
                  <input type="number" class="form-control" id="callsOffered" min="0" step="1" required>
                </div>
                <div class="form-group col-md-6">
                  <label for="callsAccepted">
                    Calls Accepted <span class="text-danger">*</span>
                  </label>
                  <input type="number" class="form-control" id="callsAccepted" min="0" step="1" required>
                </div>
              </div>
              
              <div class="form-row">
                <div class="form-group col-md-6">
                  <label for="answerRate">
                    Answer Rate (%)
                    <span class="goal-indicator" id="answerRateGoal">Goal: ≥ 95%</span>
                  </label>
                  <input type="number" class="form-control result-field" id="answerRate" readonly>
                  <span class="form-hint">Calculated automatically from calls offered and accepted</span>
                </div>
                <div class="form-group col-md-6">
                  <label for="averageTalkTime">
                    Average Talk Time (minutes)
                    <span class="goal-indicator" id="talkTimeGoal">Goal: 15-20 min</span>
                  </label>
                  <input type="number" class="form-control" id="averageTalkTime" min="0" step="0.1" required>
                </div>
              </div>
              
              <div class="form-row">
                <div class="form-group col-md-6">
                  <label for="acwPercentage">
                    ACW Percentage (%)
                    <span class="goal-indicator" id="acwGoal">Goal: ≤ 5%</span>
                  </label>
                  <input type="number" class="form-control" id="acwPercentage" min="0" max="100" step="0.1" required>
                </div>
                <div class="form-group col-md-6">
                  <label for="onQueuePercentage">
                    On Queue Percentage (%)
                    <span class="goal-indicator" id="onQueueGoal">Goal: ≥ 65%</span>
                  </label>
                  <input type="number" class="form-control" id="onQueuePercentage" min="0" max="100" step="0.1" required>
                </div>
              </div>
              
              <div class="form-row">
                <div class="form-group col-md-6">
                  <label for="offQueuePercentage">
                    Off Queue Percentage (%)
                  </label>
                  <input type="number" class="form-control result-field" id="offQueuePercentage" readonly>
                  <span class="form-hint">Calculated automatically (100% - On Queue %)</span>
                </div>
                <div class="form-group col-md-6">
                  <label for="interactingTime">
                    Interacting Time (hours)
                    <span class="goal-indicator" id="interactingGoal">Goal: 4-6 hrs</span>
                  </label>
                  <input type="number" class="form-control" id="interactingTime" min="0" max="24" step="0.1" required>
                </div>
              </div>
              
              <div class="form-group">
                <label for="notes">Notes</label>
                <textarea class="form-control" id="notes" rows="3" placeholder="Additional notes or context about this metrics entry"></textarea>
              </div>
              
              <div class="text-right mt-4">
                <button type="button" class="btn btn-light mr-2" id="resetSingleForm">
                  <i class="fas fa-undo"></i> Reset
                </button>
                <button type="submit" class="btn btn-primary">
                  <i class="fas fa-save"></i> Save Metrics
                </button>
              </div>
            </form>
          </div>
          
          <!-- Bulk Entry Tab -->
          <div class="tab-pane fade" id="bulkEntry" role="tabpanel">
            <form id="bulkMetricsForm">
              <div class="form-group">
                <label for="bulkMetricDate">Date <span class="text-danger">*</span></label>
                <input type="date" class="form-control" id="bulkMetricDate" required>
              </div>
              
              <div class="table-responsive mt-4">
                <table class="table table-bordered" id="bulkEntryTable">
                  <thead>
                    <tr>
                      <th>Team Member</th>
                      <th>Calls Offered</th>
                      <th>Calls Accepted</th>
                      <th>Answer Rate</th>
                      <th>Talk Time (min)</th>
                      <th>ACW %</th>
                      <th>On Queue %</th>
                      <th>Off Queue %</th>
                      <th>Interacting (hrs)</th>
                    </tr>
                  </thead>
                  <tbody>
                    <!-- Team members will be added here dynamically -->
                  </tbody>
                </table>
              </div>
              
              <div class="text-right mt-4">
                <button type="button" class="btn btn-light mr-2" id="resetBulkForm">
                  <i class="fas fa-undo"></i> Reset
                </button>
                <button type="submit" class="btn btn-success">
                  <i class="fas fa-save"></i> Save All Team Metrics
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Recent Entries Card -->
    <div class="card animate__animated animate__fadeIn">
      <div class="card-header">
        <h5 class="card-header-title">
          <i class="fas fa-history text-primary mr-2"></i> Recent Entries
        </h5>
        <div>
          <button id="refreshRecentBtn" class="btn btn-light btn-sm">
            <i class="fas fa-sync-alt"></i> Refresh
          </button>
        </div>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-hover" id="recentEntriesTable">
            <thead>
              <tr>
                <th>Date</th>
                <th>Team Member</th>
                <th>Calls Offered</th>
                <th>Answer Rate</th>
                <th>Talk Time</th>
                <th>On Queue %</th>
                <th>Interacting Time</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <!-- Recent entries will be loaded dynamically -->
            </tbody>
          </table>
        </div>
        <div id="noRecentEntries" class="text-center p-4" style="display: none;">
          <i class="fas fa-info-circle text-info mb-3" style="font-size: 2rem;"></i>
          <p class="mb-0">No recent metrics entries found.</p>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Edit Metric Modal -->
  <div class="modal fade" id="editMetricModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Edit Metrics Entry</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="editMetricsForm">
            <input type="hidden" id="editMetricId">
            <div class="form-row">
              <div class="form-group col-md-6">
                <label for="editMetricDate">Date <span class="text-danger">*</span></label>
                <input type="date" class="form-control" id="editMetricDate" required>
              </div>
              <div class="form-group col-md-6">
                <label for="editTeamMember">Team Member <span class="text-danger">*</span></label>
                <input type="text" class="form-control" id="editTeamMember" readonly>
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group col-md-6">
                <label for="editCallsOffered">Calls Offered <span class="text-danger">*</span></label>
                <input type="number" class="form-control" id="editCallsOffered" min="0" step="1" required>
              </div>
              <div class="form-group col-md-6">
                <label for="editCallsAccepted">Calls Accepted <span class="text-danger">*</span></label>
                <input type="number" class="form-control" id="editCallsAccepted" min="0" step="1" required>
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group col-md-6">
                <label for="editAnswerRate">Answer Rate (%)</label>
                <input type="number" class="form-control result-field" id="editAnswerRate" readonly>
              </div>
              <div class="form-group col-md-6">
                <label for="editAverageTalkTime">Average Talk Time (minutes)</label>
                <input type="number" class="form-control" id="editAverageTalkTime" min="0" step="0.1" required>
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group col-md-6">
                <label for="editAcwPercentage">ACW Percentage (%)</label>
                <input type="number" class="form-control" id="editAcwPercentage" min="0" max="100" step="0.1" required>
              </div>
              <div class="form-group col-md-6">
                <label for="editOnQueuePercentage">On Queue Percentage (%)</label>
                <input type="number" class="form-control" id="editOnQueuePercentage" min="0" max="100" step="0.1" required>
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group col-md-6">
                <label for="editOffQueuePercentage">Off Queue Percentage (%)</label>
                <input type="number" class="form-control result-field" id="editOffQueuePercentage" readonly>
              </div>
              <div class="form-group col-md-6">
                <label for="editInteractingTime">Interacting Time (hours)</label>
                <input type="number" class="form-control" id="editInteractingTime" min="0" max="24" step="0.1" required>
              </div>
            </div>
            
            <div class="form-group">
              <label for="editNotes">Notes</label>
              <textarea class="form-control" id="editNotes" rows="3"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger mr-auto" id="deleteMetricBtn">
            <i class="fas fa-trash"></i> Delete
          </button>
          <button type="button" class="btn btn-primary" id="saveEditBtn">
            <i class="fas fa-save"></i> Save Changes
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Bootstrap & jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Global variables
    let metricGoals = {};
    let teamMembers = [];
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      // Load user information
      loadUserInfo();
      
      // Hide loading overlay after all initial data is loaded
      setTimeout(() => {
        document.getElementById('loadingOverlay').style.display = 'none';
      }, 500);
      
      // Load team members
      loadTeamMembers();
      
      // Load metric goals
      loadMetricGoals();
      
      // Load recent entries
      loadRecentEntries();
      
      // Set today's date as default
      const today = new Date().toISOString().split('T')[0];
      document.getElementById('metricDate').value = today;
      document.getElementById('bulkMetricDate').value = today;
      
      // Add event listeners
      addEventListeners();
    });
    
    // Load user information
    function loadUserInfo() {
      google.script.run
        .withSuccessHandler(function(info) {
          document.getElementById('currentDate').textContent = info.formattedDate;
          document.getElementById('currentUser').textContent = info.username;
        })
        .withFailureHandler(function(error) {
          console.error('Error loading user info:', error);
          document.getElementById('currentDate').textContent = new Date().toISOString().replace('T', ' ').split('.')[0];
          document.getElementById('currentUser').textContent = 'current_user';
        })
        .getCurrentUserInfo();
    }
    
    // Load team members
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(function(members) {
          teamMembers = members;
          
          // Populate single form dropdown
          const select = document.getElementById('teamMember');
          select.innerHTML = '<option value="">Select Team Member</option>';
          
          members.forEach(function(member) {
            const option = document.createElement('option');
            option.value = member.email;
            option.textContent = `${member.firstName} ${member.lastName}`;
            select.appendChild(option);
          });
          
          // Populate bulk entry table
          populateBulkEntryTable(members);
        })
        .withFailureHandler(function(error) {
          showAlert('Error loading team members: ' + error, 'danger');
        })
        .getTeamMembers();
    }
    
    // Load metric goals
    function loadMetricGoals() {
      google.script.run
        .withSuccessHandler(function(goals) {
          // Convert to object for easier access
          goals.forEach(function(goal) {
            metricGoals[goal.metricName] = goal;
          });
          
          // Update goal indicators
          updateGoalIndicators();
        })
        .withFailureHandler(function(error) {
          console.error('Error loading metric goals:', error);
        })
        .getMetricGoals();
    }
    
    // Update goal indicators in the form
    function updateGoalIndicators() {
      if (metricGoals.answerRate) {
        document.getElementById('answerRateGoal').textContent = `Goal: ≥ ${metricGoals.answerRate.minValue}%`;
      }
      
      if (metricGoals.averageTalkTime) {
        document.getElementById('talkTimeGoal').textContent = `Goal: ${metricGoals.averageTalkTime.minValue}-${metricGoals.averageTalkTime.maxValue} min`;
      }
      
      if (metricGoals.acwPercentage) {
        document.getElementById('acwGoal').textContent = `Goal: ≤ ${metricGoals.acwPercentage.maxValue}%`;
      }
      
      if (metricGoals.onQueuePercentage) {
        document.getElementById('onQueueGoal').textContent = `Goal: ≥ ${metricGoals.onQueuePercentage.minValue}%`;
      }
      
      if (metricGoals.interactingTime) {
        document.getElementById('interactingGoal').textContent = `Goal: ${metricGoals.interactingTime.minValue}-${metricGoals.interactingTime.maxValue} hrs`;
      }
    }
    
    // Populate bulk entry table with team members
    function populateBulkEntryTable(members) {
      const tbody = document.querySelector('#bulkEntryTable tbody');
      tbody.innerHTML = '';
      
      members.forEach(function(member, index) {
        const tr = document.createElement('tr');
        tr.dataset.email = member.email;
        
        tr.innerHTML = `
          <td>
            <input type="hidden" name="email_${index}" value="${member.email}">
            <input type="hidden" name="name_${index}" value="${member.firstName} ${member.lastName}">
            ${member.firstName} ${member.lastName}
          </td>
          <td><input type="number" class="form-control form-control-sm bulk-calls-offered" name="callsOffered_${index}" min="0" step="1"></td>
          <td><input type="number" class="form-control form-control-sm bulk-calls-accepted" name="callsAccepted_${index}" min="0" step="1"></td>
          <td><input type="number" class="form-control form-control-sm bulk-answer-rate" name="answerRate_${index}" readonly></td>
          <td><input type="number" class="form-control form-control-sm" name="averageTalkTime_${index}" min="0" step="0.1"></td>
          <td><input type="number" class="form-control form-control-sm" name="acwPercentage_${index}" min="0" max="100" step="0.1"></td>
          <td><input type="number" class="form-control form-control-sm bulk-on-queue" name="onQueuePercentage_${index}" min="0" max="100" step="0.1"></td>
          <td><input type="number" class="form-control form-control-sm bulk-off-queue" name="offQueuePercentage_${index}" readonly></td>
          <td><input type="number" class="form-control form-control-sm" name="interactingTime_${index}" min="0" max="24" step="0.1"></td>
        `;
        
        tbody.appendChild(tr);
      });
      
      // Add event listeners for bulk calculations
      addBulkCalculationListeners();
    }
    
    // Add all event listeners
    function addEventListeners() {
      // Single form calculations
      document.getElementById('callsOffered').addEventListener('input', calculateAnswerRate);
      document.getElementById('callsAccepted').addEventListener('input', calculateAnswerRate);
      document.getElementById('onQueuePercentage').addEventListener('input', calculateOffQueuePercentage);
      
      // Form submissions
      document.getElementById('singleMetricsForm').addEventListener('submit', submitSingleMetricsForm);
      document.getElementById('bulkMetricsForm').addEventListener('submit', submitBulkMetricsForm);
      
      // Tab switching
      document.getElementById('bulkEntrySwitch').addEventListener('change', function() {
        if (this.checked) {
          $('#metricsFormTabs a[href="#bulkEntry"]').tab('show');
        } else {
          $('#metricsFormTabs a[href="#singleEntry"]').tab('show');
        }
      });
      
      // Reset buttons
      document.getElementById('resetSingleForm').addEventListener('click', resetSingleForm);
      document.getElementById('resetBulkForm').addEventListener('click', resetBulkForm);
      
      // Navigation buttons
      document.getElementById('viewDashboardBtn').addEventListener('click', function() {
        google.script.run.openMetricsDashboard();
      });
      
      document.getElementById('viewReportsBtn').addEventListener('click', function() {
        google.script.run.openMetricsReports();
      });
      
      // Refresh recent entries
      document.getElementById('refreshRecentBtn').addEventListener('click', loadRecentEntries);
      
      // Edit modal actions
      document.getElementById('saveEditBtn').addEventListener('click', saveEditedMetric);
      document.getElementById('deleteMetricBtn').addEventListener('click', deleteMetric);
      
      // Edit form calculations
      document.getElementById('editCallsOffered').addEventListener('input', calculateEditAnswerRate);
      document.getElementById('editCallsAccepted').addEventListener('input', calculateEditAnswerRate);
      document.getElementById('editOnQueuePercentage').addEventListener('input', calculateEditOffQueuePercentage);
    }
    
    // Add event listeners for bulk entry calculations
    function addBulkCalculationListeners() {
      // Calculate answer rates
      document.querySelectorAll('.bulk-calls-offered, .bulk-calls-accepted').forEach(function(input) {
        input.addEventListener('input', function() {
          const row = this.closest('tr');
          const callsOffered = parseFloat(row.querySelector('.bulk-calls-offered').value) || 0;
          const callsAccepted = parseFloat(row.querySelector('.bulk-calls-accepted').value) || 0;
          
          if (callsOffered > 0) {
            const answerRate = (callsAccepted / callsOffered) * 100;
            row.querySelector('.bulk-answer-rate').value = answerRate.toFixed(2);
          } else {
            row.querySelector('.bulk-answer-rate').value = '';
          }
        });
      });
      
      // Calculate off queue percentages
      document.querySelectorAll('.bulk-on-queue').forEach(function(input) {
        input.addEventListener('input', function() {
          const row = this.closest('tr');
          const onQueuePercentage = parseFloat(this.value) || 0;
          
          if (onQueuePercentage >= 0) {
            const offQueuePercentage = 100 - onQueuePercentage;
            row.querySelector('.bulk-off-queue').value = offQueuePercentage.toFixed(2);
          } else {
            row.querySelector('.bulk-off-queue').value = '';
          }
        });
      });
    }
    
    // Calculate answer rate for single form
    function calculateAnswerRate() {
      const callsOffered = parseFloat(document.getElementById('callsOffered').value) || 0;
      const callsAccepted = parseFloat(document.getElementById('callsAccepted').value) || 0;
      
      if (callsOffered > 0) {
        const answerRate = (callsAccepted / callsOffered) * 100;
        document.getElementById('answerRate').value = answerRate.toFixed(2);
      } else {
        document.getElementById('answerRate').value = '';
      }
    }
    
    // Calculate off queue percentage for single form
    function calculateOffQueuePercentage() {
      const onQueuePercentage = parseFloat(document.getElementById('onQueuePercentage').value) || 0;
      
      if (onQueuePercentage >= 0) {
        const offQueuePercentage = 100 - onQueuePercentage;
        document.getElementById('offQueuePercentage').value = offQueuePercentage.toFixed(2);
      } else {
        document.getElementById('offQueuePercentage').value = '';
      }
    }
    
    // Calculate answer rate for edit form
    function calculateEditAnswerRate() {
      const callsOffered = parseFloat(document.getElementById('editCallsOffered').value) || 0;
      const callsAccepted = parseFloat(document.getElementById('editCallsAccepted').value) || 0;
      
      if (callsOffered > 0) {
        const answerRate = (callsAccepted / callsOffered) * 100;
        document.getElementById('editAnswerRate').value = answerRate.toFixed(2);
      } else {
        document.getElementById('editAnswerRate').value = '';
      }
    }
    
    // Calculate off queue percentage for edit form
    function calculateEditOffQueuePercentage() {
      const onQueuePercentage = parseFloat(document.getElementById('editOnQueuePercentage').value) || 0;
      
      if (onQueuePercentage >= 0) {
        const offQueuePercentage = 100 - onQueuePercentage;
        document.getElementById('editOffQueuePercentage').value = offQueuePercentage.toFixed(2);
      } else {
        document.getElementById('editOffQueuePercentage').value = '';
      }
    }
    
    // Submit single metrics form
    function submitSingleMetricsForm(e) {
      e.preventDefault();
      
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      
      // Get form data
      const date = document.getElementById('metricDate').value;
      const teamMemberEmail = document.getElementById('teamMember').value;
      const teamMemberName = document.getElementById('teamMember').options[document.getElementById('teamMember').selectedIndex].text;
      
      // Create metric object
      const metricData = {
        date: new Date(date),
        teamMemberEmail: teamMemberEmail,
        teamMemberName: teamMemberName,
        callsOffered: parseFloat(document.getElementById('callsOffered').value) || 0,
        callsAccepted: parseFloat(document.getElementById('callsAccepted').value) || 0,
        answerRate: parseFloat(document.getElementById('answerRate').value) || 0,
        averageTalkTime: parseFloat(document.getElementById('averageTalkTime').value) || 0,
        acwPercentage: parseFloat(document.getElementById('acwPercentage').value) || 0,
        onQueuePercentage: parseFloat(document.getElementById('onQueuePercentage').value) || 0,
        offQueuePercentage: parseFloat(document.getElementById('offQueuePercentage').value) || 0,
        interactingTime: parseFloat(document.getElementById('interactingTime').value) || 0,
        notes: document.getElementById('notes').value
      };
      
      // Save the metric
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Metrics saved successfully!', 'success');
            resetSingleForm();
            loadRecentEntries();
          } else {
            showAlert('Error: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .saveMetric(metricData);
    }
    
    // Submit bulk metrics form
    function submitBulkMetricsForm(e) {
      e.preventDefault();
      
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      
      const date = document.getElementById('bulkMetricDate').value;
      const metrics = [];
      
      // Get all rows with data
      const rows = document.querySelectorAll('#bulkEntryTable tbody tr');
      
      rows.forEach(function(row, index) {
        const callsOffered = parseFloat(row.querySelector(`[name="callsOffered_${index}"]`).value);
        
        // Only include rows with at least calls offered data
        if (!isNaN(callsOffered)) {
          const email = row.dataset.email;
          const name = row.querySelector(`[name="name_${index}"]`).value;
          
          metrics.push({
            date: new Date(date),
            teamMemberEmail: email,
            teamMemberName: name,
            callsOffered: callsOffered,
            callsAccepted: parseFloat(row.querySelector(`[name="callsAccepted_${index}"]`).value) || 0,
            answerRate: parseFloat(row.querySelector(`[name="answerRate_${index}"]`).value) || 0,
            averageTalkTime: parseFloat(row.querySelector(`[name="averageTalkTime_${index}"]`).value) || 0,
            acwPercentage: parseFloat(row.querySelector(`[name="acwPercentage_${index}"]`).value) || 0,
            onQueuePercentage: parseFloat(row.querySelector(`[name="onQueuePercentage_${index}"]`).value) || 0,
            offQueuePercentage: parseFloat(row.querySelector(`[name="offQueuePercentage_${index}"]`).value) || 0,
            interactingTime: parseFloat(row.querySelector(`[name="interactingTime_${index}"]`).value) || 0
          });
        }
      });
      
      if (metrics.length === 0) {
        document.getElementById('loadingOverlay').style.display = 'none';
        showAlert('Please enter data for at least one team member', 'danger');
        return;
      }
      
      // Save all metrics
      saveBulkMetrics(metrics);
    }
    
    // Save bulk metrics sequentially
    function saveBulkMetrics(metrics, index = 0, savedCount = 0) {
      if (index >= metrics.length) {
        // All metrics saved
        document.getElementById('loadingOverlay').style.display = 'none';
        showAlert(`Successfully saved metrics for ${savedCount} team members!`, 'success');
        resetBulkForm();
        loadRecentEntries();
        return;
      }
      
      // Save current metric
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            // Save next metric
            saveBulkMetrics(metrics, index + 1, savedCount + 1);
          } else {
            document.getElementById('loadingOverlay').style.display = 'none';
            showAlert(`Error saving metrics for ${metrics[index].teamMemberName}: ${result.message}`, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert(`Error saving metrics for ${metrics[index].teamMemberName}: ${error}`, 'danger');
        })
        .saveMetric(metrics[index]);
    }
    
    // Load recent entries
    function loadRecentEntries() {
      google.script.run
        .withSuccessHandler(function(metrics) {
          const tbody = document.querySelector('#recentEntriesTable tbody');
          tbody.innerHTML = '';
          
          if (metrics.length === 0) {
            document.getElementById('noRecentEntries').style.display = 'block';
            return;
          }
          
          document.getElementById('noRecentEntries').style.display = 'none';
          
          // Sort by date (newest first)
          metrics.sort((a, b) => new Date(b.date) - new Date(a.date));
          
          // Show only the 10 most recent entries
          const recentMetrics = metrics.slice(0, 10);
          
          recentMetrics.forEach(function(metric) {
            const tr = document.createElement('tr');
            
            // Format date
            const date = new Date(metric.date);
            const formattedDate = date.toLocaleDateString();
            
            tr.innerHTML = `
              <td>${formattedDate}</td>
              <td>${metric.teamMemberName}</td>
              <td>${metric.callsOffered}</td>
              <td>${metric.answerRate.toFixed(2)}%</td>
              <td>${metric.averageTalkTime} min</td>
              <td>${metric.onQueuePercentage}%</td>
              <td>${metric.interactingTime} hrs</td>
              <td>
                <button class="btn btn-sm btn-primary edit-entry" data-id="${metric.id}">
                  <i class="fas fa-edit"></i>
                </button>
              </td>
            `;
            
            tbody.appendChild(tr);
          });
          
          // Add event listeners for edit buttons
          document.querySelectorAll('.edit-entry').forEach(function(button) {
            button.addEventListener('click', function() {
              openEditModal(this.getAttribute('data-id'));
            });
          });
        })
        .withFailureHandler(function(error) {
          showAlert('Error loading recent entries: ' + error, 'danger');
        })
        .getMetrics({ limit: 10 });
    }
    
    // Open edit modal
    function openEditModal(metricId) {
      document.getElementById('loadingOverlay').style.display = 'flex';
      
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            const metric = result.metric;
            
            // Populate form fields
            document.getElementById('editMetricId').value = metric.id;
            document.getElementById('editMetricDate').value = new Date(metric.date).toISOString().split('T')[0];
            document.getElementById('editTeamMember').value = metric.teamMemberName;
            document.getElementById('editCallsOffered').value = metric.callsOffered;
            document.getElementById('editCallsAccepted').value = metric.callsAccepted;
            document.getElementById('editAnswerRate').value = metric.answerRate;
            document.getElementById('editAverageTalkTime').value = metric.averageTalkTime;
            document.getElementById('editAcwPercentage').value = metric.acwPercentage;
            document.getElementById('editOnQueuePercentage').value = metric.onQueuePercentage;
            document.getElementById('editOffQueuePercentage').value = metric.offQueuePercentage;
            document.getElementById('editInteractingTime').value = metric.interactingTime;
            document.getElementById('editNotes').value = metric.notes || '';
            
            // Show modal
            $('#editMetricModal').modal('show');
          } else {
            showAlert('Error: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .getMetricById(metricId);
    }
    
    // Save edited metric
    function saveEditedMetric() {
      document.getElementById('loadingOverlay').style.display = 'flex';
      
      // Get form data
      const metricData = {
        id: document.getElementById('editMetricId').value,
        date: new Date(document.getElementById('editMetricDate').value),
        callsOffered: parseFloat(document.getElementById('editCallsOffered').value) || 0,
        callsAccepted: parseFloat(document.getElementById('editCallsAccepted').value) || 0,
        answerRate: parseFloat(document.getElementById('editAnswerRate').value) || 0,
        averageTalkTime: parseFloat(document.getElementById('editAverageTalkTime').value) || 0,
        acwPercentage: parseFloat(document.getElementById('editAcwPercentage').value) || 0,
        onQueuePercentage: parseFloat(document.getElementById('editOnQueuePercentage').value) || 0,
        offQueuePercentage: parseFloat(document.getElementById('editOffQueuePercentage').value) || 0,
        interactingTime: parseFloat(document.getElementById('editInteractingTime').value) || 0,
        notes: document.getElementById('editNotes').value
      };
      
      // Save the metric
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Metrics updated successfully!', 'success');
            $('#editMetricModal').modal('hide');
            loadRecentEntries();
          } else {
            showAlert('Error: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .saveMetric(metricData);
    }
    
    // Delete metric
    function deleteMetric() {
      if (!confirm('Are you sure you want to delete this metrics entry? This action cannot be undone.')) {
        return;
      }
      
      document.getElementById('loadingOverlay').style.display = 'flex';
      
      const metricId = document.getElementById('editMetricId').value;
      
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Metric deleted successfully!', 'success');
            $('#editMetricModal').modal('hide');
            loadRecentEntries();
          } else {
            showAlert('Error: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .deleteMetric(metricId);
    }
    
    // Reset single form
    function resetSingleForm() {
      document.getElementById('singleMetricsForm').reset();
      document.getElementById('metricDate').value = new Date().toISOString().split('T')[0];
      document.getElementById('answerRate').value = '';
      document.getElementById('offQueuePercentage').value = '';
    }
    
    // Reset bulk form
    function resetBulkForm() {
      document.getElementById('bulkMetricsForm').reset();
      document.getElementById('bulkMetricDate').value = new Date().toISOString().split('T')[0];
      
      // Clear all input fields in the table
      document.querySelectorAll('#bulkEntryTable input[type="number"]').forEach(function(input) {
        input.value = '';
      });
    }
    
    // Show alert message
    function showAlert(message, type) {
      const alertContainer = document.getElementById('alertContainer');
      const alertMessage = document.getElementById('alertMessage');
      
      alertMessage.textContent = message;
      alertMessage.className = `alert alert-${type}`;
      alertContainer.style.display = 'block';
      
      // Auto-hide after 5 seconds
      setTimeout(function() {
        alertContainer.style.display = 'none';
      }, 5000);
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Metrics Dashboard</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css for animations -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --shadow-lg: 0 1rem 3rem rgba(0,0,0,.175);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .container-fluid {
      padding: 30px !important;
    }
    
    /* Header bar */
    .system-info {
      background-color: var(--gray-800);
      color: white;
      padding: 8px 15px;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }
    
    .system-info p {
      margin: 0;
    }
    
    /* Page header */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .page-title i {
      color: var(--primary);
      margin-right: 12px;
    }
    
    /* Cards */
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.75rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
      overflow: hidden;
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Stat cards */
    .stats-cards {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 25px;
    }
    
    .stat-card {
      flex: 1;
      background: #fff;
      border-radius: 0.75rem;
      padding: 20px;
      box-shadow: var(--shadow-sm);
      display: flex;
      align-items: center;
      min-width: 220px;
      position: relative;
      overflow: hidden;
      transition: var(--transition);
    }
    
    .stat-card:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow);
    }
    
    .stat-card .stat-icon {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 15px;
      font-size: 1.5rem;
      flex-shrink: 0;
    }
    
    .stat-primary .stat-icon {
      background: rgba(78, 115, 223, 0.1);
      color: var(--primary);
    }
    
    .stat-success .stat-icon {
      background: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .stat-warning .stat-icon {
      background: rgba(246, 194, 62, 0.1);
      color: var(--warning);
    }
    
    .stat-danger .stat-icon {
      background: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    .stat-info .stat-icon {
      background: rgba(54, 185, 204, 0.1);
      color: var(--info);
    }
    
    .stat-content {
      flex: 1;
    }
    
    .stat-value {
      font-size: 1.75rem;
      font-weight: 700;
      line-height: 1;
      margin: 0 0 5px;
    }
    
    .stat-label {
      color: var(--gray-600);
      font-size: 0.85rem;
      margin: 0;
    }
    
    .stat-bg-icon {
      position: absolute;
      right: -10px;
      bottom: -10px;
      font-size: 4rem;
      opacity: 0.05;
      transform: rotate(-15deg);
    }
    
    .trend-indicator {
      display: inline-flex;
      align-items: center;
      font-size: 0.85rem;
      margin-left: 8px;
    }
    
    .trend-up {
      color: var(--success);
    }
    
    .trend-down {
      color: var(--danger);
    }
    
    /* Filter controls */
    .filters-section {
      margin-bottom: 25px;
      background: #fff;
      border-radius: 0.75rem;
      padding: 20px 25px;
      box-shadow: var(--shadow-sm);
    }
    
    .filters-title {
      font-weight: 600;
      color: var(--gray-700);
      margin-bottom: 15px;
    }
    
    .filter-form {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      align-items: flex-end;
    }
    
    .filter-group {
      flex: 1;
      min-width: 200px;
    }
    
    .filter-label {
      font-weight: 600;
      color: var(--gray-700);
      margin-bottom: 8px;
      display: block;
      font-size: 0.9rem;
    }
    
    .form-control {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    /* Chart containers */
    .chart-container {
      position: relative;
      height: 300px;
      width: 100%;
    }
    
    /* Member performance card */
    .member-performance-card {
      display: flex;
      flex-direction: column;
      margin-bottom: 15px;
      border-radius: 0.75rem;
      background: #fff;
      box-shadow: var(--shadow-sm);
      overflow: hidden;
      transition: var(--transition);
    }
    
    .member-performance-card:hover {
      box-shadow: var(--shadow);
    }
    
    .member-card-header {
      padding: 15px 20px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-bottom: 1px solid var(--gray-200);
    }
    
    .member-info {
      display: flex;
      align-items: center;
    }
    
    .member-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: var(--primary-light);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      margin-right: 15px;
      flex-shrink: 0;
    }
    
    .member-name {
      font-weight: 600;
      margin: 0;
    }
    
    .member-email {
      font-size: 0.85rem;
      color: var(--gray-600);
      margin: 0;
    }
    
    .member-performance-stats {
      display: flex;
      flex-wrap: wrap;
      padding: 15px 20px;
    }
    
    .member-stat {
      flex: 1;
      min-width: 150px;
      padding: 8px 15px;
    }
    
    .member-stat-label {
      font-size: 0.85rem;
      color: var(--gray-600);
      margin-bottom: 5px;
    }
    
    .member-stat-value {
      font-size: 1.1rem;
      font-weight: 600;
      display: flex;
      align-items: center;
    }
    
    .member-flag {
      position: absolute;
      top: 10px;
      right: 10px;
      width: 25px;
      height: 25px;
      border-radius: 50%;
      background-color: var(--danger);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.85rem;
    }
    
    /* Status indicators */
    .status-indicator {
      display: inline-block;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      margin-right: 5px;
    }
    
    .status-good {
      background-color: var(--success);
    }
    
    .status-warning {
      background-color: var(--warning);
    }
    
    .status-critical {
      background-color: var(--danger);
    }
    
    /* Progress bar */
    .metric-progress {
      height: 8px;
      margin: 5px 0;
      border-radius: 5px;
      background-color: var(--gray-200);
    }
    
    .metric-progress-bar {
      height: 100%;
      border-radius: 5px;
    }
    
    /* Tabs */
    .nav-tabs {
      border-bottom: 1px solid var(--gray-200);
      margin-bottom: 20px;
    }
    
    .nav-tabs .nav-link {
      border: none;
      border-bottom: 3px solid transparent;
      border-radius: 0;
      padding: 10px 20px;
      color: var(--gray-600);
      font-weight: 600;
      transition: var(--transition);
    }
    
    .nav-tabs .nav-link:hover {
      color: var(--primary);
      border-bottom-color: var(--gray-300);
    }
    
    .nav-tabs .nav-link.active {
      color: var(--primary);
      border-bottom-color: var(--primary);
    }
    
    /* Alert messages */
    .alert {
      border-radius: 10px;
      padding: 15px 20px;
      margin-bottom: 20px;
      border: none;
    }
    
    .alert-success {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .alert-danger {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--gray-200);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 600;
      color: var(--primary);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Buttons */
    .btn {
      border-radius: 10px;
      padding: 8px 16px;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
    }
    
    .btn i {
      margin-right: 8px;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-light {
      background: var(--gray-100);
      color: var(--gray-700);
      border-color: var(--gray-100);
    }
    
    .btn-light:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    .btn-sm {
      padding: 5px 12px;
      font-size: 0.875rem;
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .container-fluid {
        padding: 15px !important;
      }
      
      .page-header {
        padding: 15px 20px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .page-actions {
        margin-top: 15px;
        width: 100%;
      }
      
      .stats-cards {
        gap: 10px;
      }
      
      .stat-card {
        min-width: 100%;
      }
      
      .chart-container {
        height: 250px;
      }
    }
  </style>
</head>
<body>
  <!-- System Info Bar - Using dynamic loading, no hardcoded values -->
  <div class="system-info">
    <p>Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): <span id="currentDate">Loading...</span></p>
    <p>Current User: <span id="currentUser">Loading...</span></p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading metrics data...</div>
  </div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <h1 class="page-title">
        <i class="fas fa-tachometer-alt"></i> Metrics Dashboard
      </h1>
      <div class="page-actions">
        <button id="enterMetricsBtn" class="btn btn-light mr-2">
          <i class="fas fa-keyboard"></i> Enter Metrics
        </button>
        <button id="viewReportsBtn" class="btn btn-light mr-2">
          <i class="fas fa-file-alt"></i> View Reports
        </button>
        <button id="exportBtn" class="btn btn-primary">
          <i class="fas fa-download"></i> Export
        </button>
      </div>
    </div>
    
    <!-- Filters Section -->
    <div class="filters-section animate__animated animate__fadeIn">
      <h5 class="filters-title">
        <i class="fas fa-filter text-primary mr-2"></i> Filters
      </h5>
      <div class="filter-form">
        <div class="filter-group">
          <label class="filter-label" for="dateRangeFilter">Date Range</label>
          <select class="form-control" id="dateRangeFilter">
            <option value="7">Last 7 Days</option>
            <option value="30" selected>Last 30 Days</option>
            <option value="90">Last 90 Days</option>
            <option value="custom">Custom Range</option>
          </select>
        </div>
        <div class="filter-group" id="customDateRange" style="display: none;">
          <label class="filter-label" for="startDateFilter">From</label>
          <input type="date" class="form-control" id="startDateFilter">
        </div>
        <div class="filter-group" id="customDateRangeTo" style="display: none;">
          <label class="filter-label" for="endDateFilter">To</label>
          <input type="date" class="form-control" id="endDateFilter">
        </div>
        <div class="filter-group">
          <label class="filter-label" for="teamMemberFilter">Team Member</label>
          <select class="form-control" id="teamMemberFilter">
            <option value="all" selected>All Team Members</option>
            <!-- Team members will be loaded dynamically -->
          </select>
        </div>
        <div style="align-self: flex-end;">
          <button id="applyFiltersBtn" class="btn btn-primary">
            Apply Filters
          </button>
          <button id="resetFiltersBtn" class="btn btn-light ml-2">
            Reset
          </button>
        </div>
      </div>
    </div>
    
    <!-- Tab Navigation -->
    <ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
      <li class="nav-item">
        <a class="nav-link active" id="team-tab" data-toggle="tab" href="#teamView" role="tab">Team Overview</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="individual-tab" data-toggle="tab" href="#individualView" role="tab">Individual Performance</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="trends-tab" data-toggle="tab" href="#trendsView" role="tab">Trends & Analytics</a>
      </li>
    </ul>
    
    <!-- Alert Messages -->
    <div id="alertContainer" style="display: none;">
      <div id="alertMessage" class="alert" role="alert"></div>
    </div>
    
    <!-- Tab Content -->
    <div class="tab-content" id="dashboardTabContent">
      <!-- Team Overview Tab -->
      <div class="tab-pane fade show active" id="teamView" role="tabpanel">
        <!-- Team Stats Cards -->
        <div class="stats-cards animate__animated animate__fadeIn">
          <div class="stat-card stat-primary">
            <div class="stat-icon">
              <i class="fas fa-headset"></i>
            </div>
            <div class="stat-content">
              <div class="stat-value" id="teamAnswerRate">--</div>
              <div class="stat-label">Answer Rate</div>
            </div>
            <i class="fas fa-headset stat-bg-icon"></i>
          </div>
          
          <div class="stat-card stat-info">
            <div class="stat-icon">
              <i class="fas fa-clock"></i>
            </div>
            <div class="stat-content">
              <div class="stat-value" id="teamTalkTime">--</div>
              <div class="stat-label">Avg Talk Time</div>
            </div>
            <i class="fas fa-clock stat-bg-icon"></i>
          </div>
          
          <div class="stat-card stat-success">
            <div class="stat-icon">
              <i class="fas fa-user-clock"></i>
            </div>
            <div class="stat-content">
              <div class="stat-value" id="teamOnQueue">--</div>
              <div class="stat-label">On Queue %</div>
            </div>
            <i class="fas fa-user-clock stat-bg-icon"></i>
          </div>
          
          <div class="stat-card stat-warning">
            <div class="stat-icon">
              <i class="fas fa-hourglass-half"></i>
            </div>
            <div class="stat-content">
              <div class="stat-value" id="teamAcw">--</div>
              <div class="stat-label">ACW %</div>
            </div>
            <i class="fas fa-hourglass-half stat-bg-icon"></i>
          </div>
          
          <div class="stat-card stat-danger">
            <div class="stat-icon">
              <i class="fas fa-exclamation-triangle"></i>
            </div>
            <div class="stat-content">
              <div class="stat-value" id="flaggedCount">0</div>
              <div class="stat-label">Flagged Members</div>
            </div>
            <i class="fas fa-exclamation-triangle stat-bg-icon"></i>
          </div>
        </div>
        
        <!-- Team Performance Charts -->
        <div class="row">
          <div class="col-lg-6">
            <div class="card animate__animated animate__fadeIn">
              <div class="card-header">
                <h5 class="card-header-title">
                  <i class="fas fa-chart-bar text-primary mr-2"></i> Answer Rate Performance
                </h5>
                <div class="card-actions">
                  <select id="answerRateChartPeriod" class="form-control form-control-sm">
                    <option value="daily">Daily</option>
                    <option value="weekly" selected>Weekly</option>
                    <option value="monthly">Monthly</option>
                  </select>
                </div>
              </div>
              <div class="card-body">
                <div class="chart-container">
                  <canvas id="answerRateChart"></canvas>
                </div>
              </div>
            </div>
          </div>
          
          <div class="col-lg-6">
            <div class="card animate__animated animate__fadeIn">
              <div class="card-header">
                <h5 class="card-header-title">
                  <i class="fas fa-chart-line text-primary mr-2"></i> On Queue Performance
                </h5>
                <div class="card-actions">
                  <select id="onQueueChartPeriod" class="form-control form-control-sm">
                    <option value="daily">Daily</option>
                    <option value="weekly" selected>Weekly</option>
                    <option value="monthly">Monthly</option>
                  </select>
                </div>
              </div>
              <div class="card-body">
                <div class="chart-container">
                  <canvas id="onQueueChart"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Metric KPIs -->
        <div class="card animate__animated animate__fadeIn mt-4">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-bullseye text-primary mr-2"></i> Key Performance Indicators
            </h5>
            <div class="card-actions">
              <span id="kpiDateRange">Last 30 Days</span>
            </div>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-bordered">
                <thead>
                  <tr>
                    <th>Metric</th>
                    <th>Team Average</th>
                    <th>Goal</th>
                    <th>Status</th>
                    <th>Meeting Goal</th>
                    <th>Below Warning</th>
                    <th>Below Critical</th>
                  </tr>
                </thead>
                <tbody id="kpiTableBody">
                  <!-- KPI data will be loaded dynamically -->
                  <tr>
                    <td colspan="7" class="text-center">Loading KPI data...</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
        
        <!-- Flagged Team Members -->
        <div id="flaggedMembersCard" class="card animate__animated animate__fadeIn mt-4">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-exclamation-triangle text-danger mr-2"></i> Flagged Team Members
            </h5>
          </div>
          <div class="card-body">
            <div id="flaggedMembersContainer">
              <!-- Flagged team members will be loaded dynamically -->
              <p class="text-center" id="noFlaggedMembers">No team members are currently flagged for performance issues.</p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Individual Performance Tab -->
      <div class="tab-pane fade" id="individualView" role="tabpanel">
        <div class="row">
          <div class="col-md-4">
            <!-- Team Members List -->
            <div class="card animate__animated animate__fadeIn">
              <div class="card-header">
                <h5 class="card-header-title">
                  <i class="fas fa-users text-primary mr-2"></i> Team Members
                </h5>
                <div class="card-actions">
                  <input type="text" id="memberSearch" class="form-control form-control-sm" placeholder="Search...">
                </div>
              </div>
              <div class="card-body" style="max-height: 600px; overflow-y: auto;">
                <div id="teamMembersList">
                  <!-- Team members will be loaded dynamically -->
                  <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                      <span class="sr-only">Loading...</span>
                    </div>
                    <p class="mt-2">Loading team members...</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="col-md-8">
            <!-- Selected Member Performance -->
            <div class="card animate__animated animate__fadeIn" id="selectedMemberCard">
              <div class="card-header">
                <h5 class="card-header-title">
                  <i class="fas fa-user text-primary mr-2"></i> <span id="selectedMemberName">Select a Team Member</span>
                </h5>
                <div class="card-actions">
                  <span id="memberDateRange">Last 30 Days</span>
                </div>
              </div>
              <div class="card-body">
                <div id="noMemberSelected" class="text-center py-5">
                  <i class="fas fa-user-circle" style="font-size: 4rem; color: var(--gray-400);"></i>
                  <p class="mt-3">Select a team member from the list to view their performance metrics.</p>
                </div>
                
                <div id="memberPerformance" style="display: none;">
                  <!-- Member Stats -->
                  <div class="stats-cards">
                    <div class="stat-card stat-primary">
                      <div class="stat-icon">
                        <i class="fas fa-headset"></i>
                      </div>
                      <div class="stat-content">
                        <div class="stat-value" id="memberAnswerRate">--</div>
                        <div class="stat-label">Answer Rate</div>
                      </div>
                    </div>
                    
                    <div class="stat-card stat-info">
                      <div class="stat-icon">
                        <i class="fas fa-clock"></i>
                      </div>
                      <div class="stat-content">
                        <div class="stat-value" id="memberTalkTime">--</div>
                        <div class="stat-label">Avg Talk Time</div>
                      </div>
                    </div>
                    
                    <div class="stat-card stat-success">
                      <div class="stat-icon">
                        <i class="fas fa-user-clock"></i>
                      </div>
                      <div class="stat-content">
                        <div class="stat-value" id="memberOnQueue">--</div>
                        <div class="stat-label">On Queue %</div>
                      </div>
                    </div>
                  </div>
                  
                  <div class="stats-cards mt-3">
                    <div class="stat-card stat-warning">
                      <div class="stat-icon">
                        <i class="fas fa-hourglass-half"></i>
                      </div>
                      <div class="stat-content">
                        <div class="stat-value" id="memberAcw">--</div>
                        <div class="stat-label">ACW %</div>
                      </div>
                    </div>
                    
                    <div class="stat-card">
                      <div class="stat-icon">
                        <i class="fas fa-user-minus"></i>
                      </div>
                      <div class="stat-content">
                        <div class="stat-value" id="memberOffQueue">--</div>
                        <div class="stat-label">Off Queue %</div>
                      </div>
                    </div>
                    
                    <div class="stat-card">
                      <div class="stat-icon">
                        <i class="fas fa-handshake"></i>
                      </div>
                      <div class="stat-content">
                        <div class="stat-value" id="memberInteractingTime">--</div>
                        <div class="stat-label">Interacting Time</div>
                      </div>
                    </div>
                  </div>
                  
                  <!-- Member Performance Chart -->
                  <div class="chart-container mt-4">
                    <canvas id="memberPerformanceChart"></canvas>
                  </div>
                  
                  <!-- Recent Metrics -->
                  <h5 class="mt-4 mb-3">Recent Metrics</h5>
                  <div class="table-responsive">
                    <table class="table table-hover">
                      <thead>
                        <tr>
                          <th>Date</th>
                          <th>Calls</th>
                          <th>Answer Rate</th>
                          <th>Talk Time</th>
                          <th>On Queue %</th>
                          <th>ACW %</th>
                        </tr>
                      </thead>
                      <tbody id="memberRecentMetrics">
                        <tr>
                          <td colspan="6" class="text-center">Select a team member to view recent metrics</td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Trends & Analytics Tab -->
      <div class="tab-pane fade" id="trendsView" role="tabpanel">
        <!-- Trend Analysis Cards -->
        <div class="row">
          <div class="col-lg-6">
            <div class="card animate__animated animate__fadeIn">
              <div class="card-header">
                <h5 class="card-header-title">
                  <i class="fas fa-chart-line text-primary mr-2"></i> Weekly Trends
                </h5>
              </div>
              <div class="card-body">
                <div class="form-group">
                  <label for="weeklyTrendMetric">Select Metric</label>
                  <select class="form-control" id="weeklyTrendMetric">
                    <option value="answerRate">Answer Rate</option>
                    <option value="averageTalkTime">Average Talk Time</option>
                    <option value="acwPercentage">ACW Percentage</option>
                    <option value="onQueuePercentage">On Queue Percentage</option>
                    <option value="interactingTime">Interacting Time</option>
                  </select>
                </div>
                <div class="chart-container mt-3">
                  <canvas id="weeklyTrendsChart"></canvas>
                </div>
              </div>
            </div>
          </div>
          
          <div class="col-lg-6">
            <div class="card animate__animated animate__fadeIn">
              <div class="card-header">
                <h5 class="card-header-title">
                  <i class="fas fa-chart-bar text-primary mr-2"></i> Monthly Trends
                </h5>
              </div>
              <div class="card-body">
                <div class="form-group">
                  <label for="monthlyTrendMetric">Select Metric</label>
                  <select class="form-control" id="monthlyTrendMetric">
                    <option value="answerRate">Answer Rate</option>
                    <option value="averageTalkTime">Average Talk Time</option>
                    <option value="acwPercentage">ACW Percentage</option>
                    <option value="onQueuePercentage">On Queue Percentage</option>
                    <option value="interactingTime">Interacting Time</option>
                  </select>
                </div>
                <div class="chart-container mt-3">
                  <canvas id="monthlyTrendsChart"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Call Volume Analysis -->
        <div class="card animate__animated animate__fadeIn mt-4">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-phone-alt text-primary mr-2"></i> Call Volume Analysis
            </h5>
          </div>
          <div class="card-body">
            <div class="chart-container">
              <canvas id="callVolumeChart"></canvas>
            </div>
          </div>
        </div>
        
        <!-- Performance Distribution -->
        <div class="card animate__animated animate__fadeIn mt-4">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-chart-pie text-primary mr-2"></i> Performance Distribution
            </h5>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="distributionMetric">Select Metric</label>
                  <select class="form-control" id="distributionMetric">
                    <option value="answerRate">Answer Rate</option>
                    <option value="averageTalkTime">Average Talk Time</option>
                    <option value="acwPercentage">ACW Percentage</option>
                    <option value="onQueuePercentage">On Queue Percentage</option>
                    <option value="interactingTime">Interacting Time</option>
                  </select>
                </div>
                <div class="chart-container">
                  <canvas id="distributionChart"></canvas>
                </div>
              </div>
              <div class="col-md-6">
                <h5 class="mt-3 mb-4">Performance Insights</h5>
                <div id="performanceInsights">
                  <div class="d-flex align-items-center mb-3">
                    <div class="status-indicator status-good"></div>
                    <div>
                      <strong id="meetingGoalCount">0</strong> team members meeting goal
                    </div>
                  </div>
                  <div class="d-flex align-items-center mb-3">
                    <div class="status-indicator status-warning"></div>
                    <div>
                      <strong id="warningCount">0</strong> team members in warning zone
                    </div>
                  </div>
                  <div class="d-flex align-items-center mb-3">
                    <div class="status-indicator status-critical"></div>
                    <div>
                      <strong id="criticalCount">0</strong> team members in critical zone
                    </div>
                  </div>
                  
                  <div class="mt-4" id="distributionInsight">
                    Select a metric to see performance distribution insights.
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Bootstrap & jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Chart.js for visualizations -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>
  
  <script>
    // Global variables
    let metricsData = null;
    let selectedMemberEmail = null;
    let metricGoals = {};
    let teamMembers = [];
    
    // Chart colors
    const chartColors = {
      primary: '#4e73df',
      success: '#1cc88a',
      warning: '#f6c23e',
      danger: '#e74a3b',
      info: '#36b9cc',
      gray: '#858796',
      goal: 'rgba(46, 204, 113, 0.2)'
    };
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      // Load user information
      loadUserInfo();
      
      // Set default date for custom range
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      document.getElementById('startDateFilter').value = formatDateForInput(thirtyDaysAgo);
      document.getElementById('endDateFilter').value = formatDateForInput(today);
      
      // Load initial data
      loadDashboardData();
      
      // Add event listeners
      addEventListeners();
    });
    
    // Load user information - no hardcoded values
    function loadUserInfo() {
      google.script.run
        .withSuccessHandler(function(info) {
          document.getElementById('currentDate').textContent = info.formattedDate;
          document.getElementById('currentUser').textContent = info.username;
        })
        .withFailureHandler(function(error) {
          console.error('Error loading user info:', error);
          // Default values if there's an error
          document.getElementById('currentDate').textContent = new Date().toISOString().replace('T', ' ').split('.')[0];
          document.getElementById('currentUser').textContent = 'current_user';
        })
        .getCurrentUserInfo();
    }
    
    // Format date for input field
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }
    
    // Add all event listeners
    function addEventListeners() {
      // Date range filter change
      document.getElementById('dateRangeFilter').addEventListener('change', function() {
        const customRangeFields = document.getElementById('customDateRange');
        const customRangeToFields = document.getElementById('customDateRangeTo');
        
        if (this.value === 'custom') {
          customRangeFields.style.display = 'block';
          customRangeToFields.style.display = 'block';
        } else {
          customRangeFields.style.display = 'none';
          customRangeToFields.style.display = 'none';
        }
      });
      
      // Apply filters button
      document.getElementById('applyFiltersBtn').addEventListener('click', function() {
        loadDashboardData();
      });
      
      // Reset filters button
      document.getElementById('resetFiltersBtn').addEventListener('click', function() {
        document.getElementById('dateRangeFilter').value = '30';
        document.getElementById('teamMemberFilter').value = 'all';
        document.getElementById('customDateRange').style.display = 'none';
        document.getElementById('customDateRangeTo').style.display = 'none';
        loadDashboardData();
      });
      
      // Navigation buttons
      document.getElementById('enterMetricsBtn').addEventListener('click', function() {
        google.script.run.openMetricsForm();
      });
      
      document.getElementById('viewReportsBtn').addEventListener('click', function() {
        google.script.run.openMetricsReports();
      });
      
      document.getElementById('exportBtn').addEventListener('click', function() {
        exportMetricsData();
      });
      
      // Weekly trend metric selector
      document.getElementById('weeklyTrendMetric').addEventListener('change', function() {
        updateWeeklyTrendChart(this.value);
      });
      
      // Monthly trend metric selector
      document.getElementById('monthlyTrendMetric').addEventListener('change', function() {
        updateMonthlyTrendChart(this.value);
      });
      
      // Distribution metric selector
      document.getElementById('distributionMetric').addEventListener('change', function() {
        updateDistributionChart(this.value);
      });
      
      // Team view chart period selectors
      document.getElementById('answerRateChartPeriod').addEventListener('change', function() {
        updateAnswerRateChart(this.value);
      });
      
      document.getElementById('onQueueChartPeriod').addEventListener('change', function() {
        updateOnQueueChart(this.value);
      });
      
      // Team member search
      document.getElementById('memberSearch').addEventListener('input', function() {
        filterTeamMembers(this.value);
      });
    }
    
    // Load dashboard data based on filters
    function loadDashboardData() {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      
      // Get filter values
      const dateRangeFilter = document.getElementById('dateRangeFilter').value;
      const teamMemberFilter = document.getElementById('teamMemberFilter').value;
      
      // Prepare date range
      let startDate = null;
      let endDate = new Date(); // Today
      
      if (dateRangeFilter === 'custom') {
        startDate = new Date(document.getElementById('startDateFilter').value);
        endDate = new Date(document.getElementById('endDateFilter').value);
        // Set end date to end of the day
        endDate.setHours(23, 59, 59, 999);
      } else {
        // Calculate start date based on selected range
        startDate = new Date();
        startDate.setDate(startDate.getDate() - parseInt(dateRangeFilter));
      }
      
      // Update date range display
      let dateRangeText = '';
      if (dateRangeFilter === '7') {
        dateRangeText = 'Last 7 Days';
      } else if (dateRangeFilter === '30') {
        dateRangeText = 'Last 30 Days';
      } else if (dateRangeFilter === '90') {
        dateRangeText = 'Last 90 Days';
      } else {
        dateRangeText = `${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`;
      }
      
      document.getElementById('kpiDateRange').textContent = dateRangeText;
      document.getElementById('memberDateRange').textContent = dateRangeText;
      
      // Prepare filter options
      const options = {
        startDate: startDate,
        endDate: endDate
      };
      
      if (teamMemberFilter !== 'all') {
        options.teamMemberEmail = teamMemberFilter;
      }
      
      // Load metric goals
      google.script.run
        .withSuccessHandler(function(goals) {
          // Convert to object for easier access
          goals.forEach(function(goal) {
            metricGoals[goal.metricName] = goal;
          });
          
          // Load analytics data
          google.script.run
            .withSuccessHandler(function(result) {
              document.getElementById('loadingOverlay').style.display = 'none';
              
              if (result.success) {
                metricsData = result.data;
                updateDashboard(result.data);
              } else {
                showAlert('Error loading metrics data: ' + result.message, 'danger');
              }
            })
            .withFailureHandler(function(error) {
              document.getElementById('loadingOverlay').style.display = 'none';
              showAlert('Error: ' + error, 'danger');
            })
            .calculateMetricsAnalytics(options);
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error loading metric goals: ' + error, 'danger');
        })
        .getMetricGoals();
      
      // Load team members
      google.script.run
        .withSuccessHandler(function(members) {
          teamMembers = members;
          
          // Populate team member filter dropdown
          const select = document.getElementById('teamMemberFilter');
          
          // Keep the "All Team Members" option
          select.innerHTML = '<option value="all">All Team Members</option>';
          
          members.forEach(function(member) {
            const option = document.createElement('option');
            option.value = member.email;
            option.textContent = `${member.firstName} ${member.lastName}`;
            select.appendChild(option);
          });
        })
        .withFailureHandler(function(error) {
          console.error('Error loading team members:', error);
        })
        .getTeamMembers();
    }
    
    // Update the entire dashboard with new data
    function updateDashboard(data) {
      // Update team stat cards
      updateTeamStats(data);
      
      // Update KPI table
      updateKpiTable(data.teamAverages);
      
      // Update flagged members
      updateFlaggedMembers(data.flaggedMembers);
      
      // Update team members list in individual view
      updateTeamMembersList(data.teamMembers);
      
      // Update charts
      initializeCharts(data);
      
      // If a team member is selected, update their view
      if (selectedMemberEmail && data.teamMembers[selectedMemberEmail]) {
        updateMemberView(data.teamMembers[selectedMemberEmail]);
      }
    }
    
    // Update team statistic cards
    function updateTeamStats(data) {
      const teamAverages = data.teamAverages;
      
      // Answer Rate
      document.getElementById('teamAnswerRate').textContent = 
        teamAverages.answerRate.average.toFixed(2) + '%';
      
      // Talk Time
      document.getElementById('teamTalkTime').textContent = 
        teamAverages.averageTalkTime.average.toFixed(2) + ' min';
      
      // On Queue %
      document.getElementById('teamOnQueue').textContent = 
        teamAverages.onQueuePercentage.average.toFixed(2) + '%';
      
      // ACW %
      document.getElementById('teamAcw').textContent = 
        teamAverages.acwPercentage.average.toFixed(2) + '%';
      
      // Flagged Count
      document.getElementById('flaggedCount').textContent = 
        data.flaggedMembers.length;
    }
    
    // Update KPI table with team averages and goals
    function updateKpiTable(teamAverages) {
      const tbody = document.getElementById('kpiTableBody');
      tbody.innerHTML = '';
      
      // Define metrics to display
      const metrics = [
        {
          key: 'answerRate',
          label: 'Answer Rate',
          unit: '%',
          higher: true
        },
        {
          key: 'averageTalkTime',
          label: 'Average Talk Time',
          unit: 'min',
          range: true
        },
        {
          key: 'acwPercentage',
          label: 'ACW Percentage',
          unit: '%',
          lower: true
        },
        {
          key: 'onQueuePercentage',
          label: 'On Queue Percentage',
          unit: '%',
          higher: true
        },
        {
          key: 'offQueuePercentage',
          label: 'Off Queue Percentage',
          unit: '%',
          lower: true
        },
        {
          key: 'interactingTime',
          label: 'Interacting Time',
          unit: 'hrs',
          range: true
        }
      ];
      
      metrics.forEach(metric => {
        const avg = teamAverages[metric.key];
        const goal = metricGoals[metric.key];
        
        if (!avg) return;
        
        const tr = document.createElement('tr');
        
        let goalText = 'N/A';
        let statusHtml = '<span class="badge badge-secondary">N/A</span>';
        
        if (goal) {
          if (metric.higher) {
            // Higher is better metrics
            goalText = `≥ ${goal.minValue} ${metric.unit}`;
            
            if (avg.average >= goal.minValue) {
              statusHtml = '<span class="badge badge-success">Meeting Goal</span>';
            } else if (avg.average >= goal.warningThreshold) {
              statusHtml = '<span class="badge badge-warning">Warning</span>';
            } else {
              statusHtml = '<span class="badge badge-danger">Critical</span>';
            }
          } else if (metric.lower) {
            // Lower is better metrics
            goalText = `≤ ${goal.maxValue} ${metric.unit}`;
            
            if (avg.average <= goal.maxValue) {
              statusHtml = '<span class="badge badge-success">Meeting Goal</span>';
            } else if (avg.average <= goal.warningThreshold) {
              statusHtml = '<span class="badge badge-warning">Warning</span>';
            } else {
              statusHtml = '<span class="badge badge-danger">Critical</span>';
            }
          } else if (metric.range) {
            // Range metrics
            goalText = `${goal.minValue} - ${goal.maxValue} ${metric.unit}`;
            
            if (avg.average >= goal.minValue && avg.average <= goal.maxValue) {
              statusHtml = '<span class="badge badge-success">Meeting Goal</span>';
            } else if (
              (avg.average >= goal.warningThreshold && avg.average < goal.minValue) || 
              (avg.average > goal.maxValue && avg.average <= goal.criticaThreshold)
            ) {
              statusHtml = '<span class="badge badge-warning">Warning</span>';
            } else {
              statusHtml = '<span class="badge badge-danger">Critical</span>';
            }
          }
        }
        
        tr.innerHTML = `
          <td>${metric.label}</td>
          <td>${avg.average.toFixed(2)} ${metric.unit}</td>
          <td>${goalText}</td>
          <td>${statusHtml}</td>
          <td>${avg.meetingGoal} (${(avg.meetingGoal / avg.count * 100).toFixed(0)}%)</td>
          <td>${avg.belowWarning} (${(avg.belowWarning / avg.count * 100).toFixed(0)}%)</td>
          <td>${avg.belowCritical} (${(avg.belowCritical / avg.count * 100).toFixed(0)}%)</td>
        `;
        
        tbody.appendChild(tr);
      });
    }
    
    // Update flagged team members list
    function updateFlaggedMembers(flaggedMembers) {
      const container = document.getElementById('flaggedMembersContainer');
      const noFlagged = document.getElementById('noFlaggedMembers');
      
      if (flaggedMembers.length === 0) {
        noFlagged.style.display = 'block';
        container.innerHTML = '';
        return;
      }
      
      noFlagged.style.display = 'none';
      container.innerHTML = '';
      
      flaggedMembers.forEach(member => {
        const criticalMetrics = [];
        
        // Collect critical metrics
        Object.keys(member.averages).forEach(key => {
          const avg = member.averages[key];
          if (avg.status === 'critical') {
            let label = '';
            switch (key) {
              case 'answerRate': label = 'Answer Rate'; break;
              case 'averageTalkTime': label = 'Talk Time'; break;
              case 'acwPercentage': label = 'ACW %'; break;
              case 'onQueuePercentage': label = 'On Queue %'; break;
              case 'offQueuePercentage': label = 'Off Queue %'; break;
              case 'interactingTime': label = 'Interacting Time'; break;
              default: label = key;
            }
            criticalMetrics.push(label);
          }
        });
        
        const div = document.createElement('div');
        div.className = 'member-performance-card';
        
        let initials = '';
        const nameParts = member.name.split(' ');
        if (nameParts.length >= 2) {
          initials = nameParts[0].charAt(0) + nameParts[1].charAt(0);
        } else if (nameParts.length === 1) {
          initials = nameParts[0].charAt(0);
        }
        
        div.innerHTML = `
          <div class="member-card-header">
            <div class="member-info">
              <div class="member-avatar">${initials}</div>
              <div>
                <h5 class="member-name">${member.name}</h5>
                <p class="member-email">${member.email}</p>
              </div>
            </div>
          </div>
          <div class="member-performance-stats">
            <div>
              <h6 class="text-danger"><i class="fas fa-exclamation-triangle mr-2"></i> Critical Metrics:</h6>
              <p>${criticalMetrics.join(', ')}</p>
              <button class="btn btn-sm btn-primary view-member" data-email="${member.email}">
                <i class="fas fa-eye"></i> View Details
              </button>
            </div>
          </div>
        `;
        
        container.appendChild(div);
      });
      
      // Add event listeners to view member buttons
      document.querySelectorAll('.view-member').forEach(button => {
        button.addEventListener('click', function() {
          const email = this.getAttribute('data-email');
          selectedMemberEmail = email;
          
          // Switch to individual tab
          $('#dashboardTabs a[href="#individualView"]').tab('show');
          
          // Update member view
          if (metricsData && metricsData.teamMembers[email]) {
            updateMemberView(metricsData.teamMembers[email]);
          }
        });
      });
    }
    
    // Update team members list in individual view
    function updateTeamMembersList(teamMembers) {
      const container = document.getElementById('teamMembersList');
      container.innerHTML = '';
      
      const membersList = Object.values(teamMembers);
      
      // Sort by name
      membersList.sort((a, b) => a.name.localeCompare(b.name));
      
      membersList.forEach(member => {
        const div = document.createElement('div');
        div.className = 'member-performance-card';
        div.dataset.email = member.email;
        div.dataset.name = member.name.toLowerCase();
        
        let initials = '';
        const nameParts = member.name.split(' ');
        if (nameParts.length >= 2) {
          initials = nameParts[0].charAt(0) + nameParts[1].charAt(0);
        } else if (nameParts.length === 1) {
          initials = nameParts[0].charAt(0);
        }
        
        // Check if member is flagged
        let flagged = false;
        Object.keys(member.averages).forEach(key => {
          const avg = member.averages[key];
          if (avg.status === 'critical') {
            flagged = true;
          }
        });
        
        let flagHtml = '';
        if (flagged) {
          flagHtml = '<span class="member-flag"><i class="fas fa-exclamation"></i></span>';
        }
        
        div.innerHTML = `
          <div class="member-card-header">
            <div class="member-info">
              <div class="member-avatar">${initials}</div>
              <div>
                <h5 class="member-name">${member.name}</h5>
                <p class="member-email">${member.email}</p>
              </div>
            </div>
            ${flagHtml}
          </div>
        `;
        
        div.addEventListener('click', function() {
          selectedMemberEmail = member.email;
          updateMemberView(member);
          
          // Highlight selected member
          document.querySelectorAll('.member-performance-card').forEach(card => {
            card.classList.remove('bg-light');
          });
          this.classList.add('bg-light');
        });
        
        container.appendChild(div);
      });
    }
    
    // Filter team members list based on search text
    function filterTeamMembers(searchText) {
      const cards = document.querySelectorAll('.member-performance-card');
      const lowerSearch = searchText.toLowerCase();
      
      cards.forEach(card => {
        const name = card.dataset.name;
        const email = card.dataset.email;
        
        if (
          !searchText || 
          name.includes(lowerSearch) || 
          email.toLowerCase().includes(lowerSearch)
        ) {
          card.style.display = 'flex';
        } else {
          card.style.display = 'none';
        }
      });
    }
    
    // Update individual member view
    function updateMemberView(member) {
      document.getElementById('selectedMemberName').textContent = member.name;
      document.getElementById('noMemberSelected').style.display = 'none';
      document.getElementById('memberPerformance').style.display = 'block';
      
      // Update stat cards
      document.getElementById('memberAnswerRate').textContent = member.averages.answerRate.average.toFixed(2) + '%';
      document.getElementById('memberTalkTime').textContent = member.averages.averageTalkTime.average.toFixed(2) + ' min';
      document.getElementById('memberOnQueue').textContent = member.averages.onQueuePercentage.average.toFixed(2) + '%';
      document.getElementById('memberAcw').textContent = member.averages.acwPercentage.average.toFixed(2) + '%';
      document.getElementById('memberOffQueue').textContent = member.averages.offQueuePercentage.average.toFixed(2) + '%';
           document.getElementById('memberInteractingTime').textContent = member.averages.interactingTime.average.toFixed(2) + ' hrs';
      
      // Update recent metrics
      const tbody = document.getElementById('memberRecentMetrics');
      tbody.innerHTML = '';
      
      // Sort metrics by date, most recent first
      member.metrics.sort((a, b) => new Date(b.date) - new Date(a.date));
      
      // Show up to 10 most recent entries
      const recentMetrics = member.metrics.slice(0, 10);
      
      recentMetrics.forEach(metric => {
        const tr = document.createElement('tr');
        
        // Format date
        const date = new Date(metric.date);
        const formattedDate = date.toLocaleDateString();
        
        tr.innerHTML = `
          <td>${formattedDate}</td>
          <td>${metric.callsOffered} / ${metric.callsAccepted}</td>
          <td>${metric.answerRate ? metric.answerRate.toFixed(2) + '%' : 'N/A'}</td>
          <td>${metric.averageTalkTime ? metric.averageTalkTime.toFixed(2) + ' min' : 'N/A'}</td>
          <td>${metric.onQueuePercentage ? metric.onQueuePercentage.toFixed(2) + '%' : 'N/A'}</td>
          <td>${metric.acwPercentage ? metric.acwPercentage.toFixed(2) + '%' : 'N/A'}</td>
        `;
        
        tbody.appendChild(tr);
      });
      
      // Update member performance chart
      updateMemberPerformanceChart(member);
    }
    
    // Initialize all charts
    function initializeCharts(data) {
      updateAnswerRateChart('weekly');
      updateOnQueueChart('weekly');
      updateWeeklyTrendChart('answerRate');
      updateMonthlyTrendChart('answerRate');
      updateCallVolumeChart(data);
      updateDistributionChart('answerRate');
    }
    
    // Update answer rate chart
    function updateAnswerRateChart(period) {
      if (!metricsData) return;
      
      let chartData;
      if (period === 'daily') {
        chartData = prepareTimeSeriesData(metricsData, 'answerRate', 'day');
      } else if (period === 'weekly') {
        chartData = prepareTimeSeriesData(metricsData, 'answerRate', 'week');
      } else {
        chartData = prepareTimeSeriesData(metricsData, 'answerRate', 'month');
      }
      
      const ctx = document.getElementById('answerRateChart').getContext('2d');
      
      // Destroy previous chart if it exists
      if (window.answerRateChart) {
        window.answerRateChart.destroy();
      }
      
      // Goal line
      let goalValue = 95;
      if (metricGoals.answerRate) {
        goalValue = metricGoals.answerRate.minValue;
      }
      
      window.answerRateChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: chartData.labels,
          datasets: [{
            label: 'Answer Rate',
            data: chartData.values,
            backgroundColor: 'rgba(78, 115, 223, 0.1)',
            borderColor: chartColors.primary,
            borderWidth: 2,
            pointBackgroundColor: chartColors.primary,
            pointBorderColor: '#fff',
            pointBorderWidth: 2,
            pointRadius: 4,
            pointHoverRadius: 6,
            pointHoverBackgroundColor: chartColors.primary,
            pointHoverBorderColor: '#fff',
            pointHoverBorderWidth: 2,
            fill: true,
            tension: 0.3
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            position: 'top',
            labels: {
              fontFamily: 'Nunito',
              fontColor: chartColors.gray
            }
          },
          tooltips: {
            backgroundColor: '#fff',
            titleFontColor: chartColors.gray,
            bodyFontColor: chartColors.gray,
            bodyFontFamily: 'Nunito',
            borderColor: chartColors.gray,
            borderWidth: 1,
            xPadding: 15,
            yPadding: 15,
            displayColors: false,
            caretPadding: 10,
            callbacks: {
              label: function(tooltipItem, chart) {
                return 'Answer Rate: ' + tooltipItem.yLabel + '%';
              }
            }
          },
          scales: {
            xAxes: [{
              gridLines: {
                drawBorder: false,
                color: "rgba(0, 0, 0, 0.05)"
              },
              ticks: {
                fontFamily: 'Nunito',
                fontColor: chartColors.gray,
                padding: 10
              }
            }],
            yAxes: [{
              gridLines: {
                drawBorder: false,
                color: "rgba(0, 0, 0, 0.05)",
                zeroLineColor: "rgba(0, 0, 0, 0.1)"
              },
              ticks: {
                fontFamily: 'Nunito',
                fontColor: chartColors.gray,
                padding: 10,
                beginAtZero: false,
                min: Math.max(0, Math.min(...chartData.values) - 10),
                max: Math.min(100, Math.max(...chartData.values) + 10),
                callback: function(value) {
                  return value + '%';
                }
              }
            }]
          },
          annotation: {
            annotations: [{
              type: 'line',
              mode: 'horizontal',
              scaleID: 'y-axis-0',
              value: goalValue,
              borderColor: chartColors.success,
              borderWidth: 2,
              borderDash: [5, 5],
              label: {
                enabled: true,
                content: 'Goal: ' + goalValue + '%',
                position: 'right',
                backgroundColor: 'rgba(46, 204, 113, 0.8)',
                fontFamily: 'Nunito',
                fontSize: 12
              }
            }]
          }
        }
      });
    }
    
    // Update on queue chart
    function updateOnQueueChart(period) {
      if (!metricsData) return;
      
      let chartData;
      if (period === 'daily') {
        chartData = prepareTimeSeriesData(metricsData, 'onQueuePercentage', 'day');
      } else if (period === 'weekly') {
        chartData = prepareTimeSeriesData(metricsData, 'onQueuePercentage', 'week');
      } else {
        chartData = prepareTimeSeriesData(metricsData, 'onQueuePercentage', 'month');
      }
      
      const ctx = document.getElementById('onQueueChart').getContext('2d');
      
      // Destroy previous chart if it exists
      if (window.onQueueChart) {
        window.onQueueChart.destroy();
      }
      
      // Goal line
      let goalValue = 65;
      if (metricGoals.onQueuePercentage) {
        goalValue = metricGoals.onQueuePercentage.minValue;
      }
      
      window.onQueueChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: chartData.labels,
          datasets: [{
            label: 'On Queue Percentage',
            data: chartData.values,
            backgroundColor: 'rgba(54, 185, 204, 0.1)',
            borderColor: chartColors.info,
            borderWidth: 2,
            pointBackgroundColor: chartColors.info,
            pointBorderColor: '#fff',
            pointBorderWidth: 2,
            pointRadius: 4,
            pointHoverRadius: 6,
            pointHoverBackgroundColor: chartColors.info,
            pointHoverBorderColor: '#fff',
            pointHoverBorderWidth: 2,
            fill: true,
            tension: 0.3
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            position: 'top',
            labels: {
              fontFamily: 'Nunito',
              fontColor: chartColors.gray
            }
          },
          tooltips: {
            backgroundColor: '#fff',
            titleFontColor: chartColors.gray,
            bodyFontColor: chartColors.gray,
            bodyFontFamily: 'Nunito',
            borderColor: chartColors.gray,
            borderWidth: 1,
            xPadding: 15,
            yPadding: 15,
            displayColors: false,
            caretPadding: 10,
            callbacks: {
              label: function(tooltipItem, chart) {
                return 'On Queue: ' + tooltipItem.yLabel + '%';
              }
            }
          },
          scales: {
            xAxes: [{
              gridLines: {
                drawBorder: false,
                color: "rgba(0, 0, 0, 0.05)"
              },
              ticks: {
                fontFamily: 'Nunito',
                fontColor: chartColors.gray,
                padding: 10
              }
            }],
            yAxes: [{
              gridLines: {
                drawBorder: false,
                color: "rgba(0, 0, 0, 0.05)",
                zeroLineColor: "rgba(0, 0, 0, 0.1)"
              },
              ticks: {
                fontFamily: 'Nunito',
                fontColor: chartColors.gray,
                padding: 10,
                beginAtZero: false,
                min: Math.max(0, Math.min(...chartData.values) - 10),
                max: Math.min(100, Math.max(...chartData.values) + 10),
                callback: function(value) {
                  return value + '%';
                }
              }
            }]
          },
          annotation: {
            annotations: [{
              type: 'line',
              mode: 'horizontal',
              scaleID: 'y-axis-0',
              value: goalValue,
              borderColor: chartColors.success,
              borderWidth: 2,
              borderDash: [5, 5],
              label: {
                enabled: true,
                content: 'Goal: ' + goalValue + '%',
                position: 'right',
                backgroundColor: 'rgba(46, 204, 113, 0.8)',
                fontFamily: 'Nunito',
                fontSize: 12
              }
            }]
          }
        }
      });
    }
    
    // Update weekly trend chart
    function updateWeeklyTrendChart(metricKey) {
      if (!metricsData || !metricsData.weeklyTrends) return;
      
      const metric = metricsData.weeklyTrends[metricKey];
      if (!metric) return;
      
      const labels = Object.keys(metric).sort();
      const values = labels.map(label => metric[label].average);
      
      const ctx = document.getElementById('weeklyTrendsChart').getContext('2d');
      
      // Destroy previous chart if it exists
      if (window.weeklyTrendsChart) {
        window.weeklyTrendsChart.destroy();
      }
      
      // Format labels to be more readable
      const formattedLabels = labels.map(label => {
        const parts = label.split('-');
        const year = parts[0];
        const week = parts[1].substring(1); // Remove 'W' prefix
        return `Week ${week}`;
      });
      
      // Get appropriate label based on metric
      let metricLabel = '';
      let unit = '';
      switch(metricKey) {
        case 'answerRate':
          metricLabel = 'Answer Rate';
          unit = '%';
          break;
        case 'averageTalkTime':
          metricLabel = 'Avg Talk Time';
          unit = ' min';
          break;
        case 'acwPercentage':
          metricLabel = 'ACW Percentage';
          unit = '%';
          break;
        case 'onQueuePercentage':
          metricLabel = 'On Queue Percentage';
          unit = '%';
          break;
        case 'interactingTime':
          metricLabel = 'Interacting Time';
          unit = ' hrs';
          break;
        default:
          metricLabel = metricKey;
          unit = '';
      }
      
      window.weeklyTrendsChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: formattedLabels,
          datasets: [{
            label: metricLabel,
            data: values,
            backgroundColor: 'rgba(78, 115, 223, 0.1)',
            borderColor: chartColors.primary,
            borderWidth: 2,
            pointBackgroundColor: chartColors.primary,
            pointBorderColor: '#fff',
            pointBorderWidth: 2,
            pointRadius: 4,
            fill: true,
            tension: 0.3
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            position: 'top',
            labels: {
              fontFamily: 'Nunito',
              fontColor: chartColors.gray
            }
          },
          tooltips: {
            backgroundColor: '#fff',
            titleFontColor: chartColors.gray,
            bodyFontColor: chartColors.gray,
            bodyFontFamily: 'Nunito',
            borderColor: chartColors.gray,
            borderWidth: 1,
            xPadding: 15,
            yPadding: 15,
            displayColors: false,
            caretPadding: 10,
            callbacks: {
              label: function(tooltipItem, chart) {
                return metricLabel + ': ' + tooltipItem.yLabel.toFixed(2) + unit;
              }
            }
          },
          scales: {
            xAxes: [{
              gridLines: {
                drawBorder: false,
                color: "rgba(0, 0, 0, 0.05)"
              },
              ticks: {
                fontFamily: 'Nunito',
                fontColor: chartColors.gray,
                padding: 10
              }
            }],
            yAxes: [{
              gridLines: {
                drawBorder: false,
                color: "rgba(0, 0, 0, 0.05)",
                zeroLineColor: "rgba(0, 0, 0, 0.1)"
              },
              ticks: {
                fontFamily: 'Nunito',
                fontColor: chartColors.gray,
                padding: 10,
                beginAtZero: false,
                callback: function(value) {
                  return value + unit;
                }
              }
            }]
          }
        }
      });
    }
    
    // Update monthly trend chart
    function updateMonthlyTrendChart(metricKey) {
      if (!metricsData || !metricsData.monthlyTrends) return;
      
      const metric = metricsData.monthlyTrends[metricKey];
      if (!metric) return;
      
      const labels = Object.keys(metric).sort();
      const values = labels.map(label => metric[label].average);
      
      const ctx = document.getElementById('monthlyTrendsChart').getContext('2d');
      
      // Destroy previous chart if it exists
      if (window.monthlyTrendsChart) {
        window.monthlyTrendsChart.destroy();
      }
      
      // Format labels to be more readable
      const formattedLabels = labels.map(label => {
        const parts = label.split('-');
        const year = parts[0];
        const month = parts[1];
        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        return monthNames[parseInt(month) - 1] + ' ' + year;
      });
      
      // Get appropriate label based on metric
      let metricLabel = '';
      let unit = '';
      switch(metricKey) {
        case 'answerRate':
          metricLabel = 'Answer Rate';
          unit = '%';
          break;
        case 'averageTalkTime':
          metricLabel = 'Avg Talk Time';
          unit = ' min';
          break;
        case 'acwPercentage':
          metricLabel = 'ACW Percentage';
          unit = '%';
          break;
        case 'onQueuePercentage':
          metricLabel = 'On Queue Percentage';
          unit = '%';
          break;
        case 'interactingTime':
          metricLabel = 'Interacting Time';
          unit = ' hrs';
          break;
        default:
          metricLabel = metricKey;
          unit = '';
      }
      
      window.monthlyTrendsChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: formattedLabels,
          datasets: [{
            label: metricLabel,
            data: values,
            backgroundColor: chartColors.primary,
            borderColor: chartColors.primary,
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            position: 'top',
            labels: {
              fontFamily: 'Nunito',
              fontColor: chartColors.gray
            }
          },
          tooltips: {
            backgroundColor: '#fff',
            titleFontColor: chartColors.gray,
            bodyFontColor: chartColors.gray,
            bodyFontFamily: 'Nunito',
            borderColor: chartColors.gray,
            borderWidth: 1,
            xPadding: 15,
            yPadding: 15,
            displayColors: false,
            caretPadding: 10,
            callbacks: {
              label: function(tooltipItem, chart) {
                return metricLabel + ': ' + tooltipItem.yLabel.toFixed(2) + unit;
              }
            }
          },
          scales: {
            xAxes: [{
              gridLines: {
                drawBorder: false,
                color: "rgba(0, 0, 0, 0.05)"
              },
              ticks: {
                fontFamily: 'Nunito',
                fontColor: chartColors.gray,
                padding: 10
              }
            }],
            yAxes: [{
              gridLines: {
                drawBorder: false,
                color: "rgba(0, 0, 0, 0.05)",
                zeroLineColor: "rgba(0, 0, 0, 0.1)"
              },
              ticks: {
                fontFamily: 'Nunito',
                fontColor: chartColors.gray,
                padding: 10,
                beginAtZero: false,
                callback: function(value) {
                  return value + unit;
                }
              }
            }]
          }
        }
      });
    }
    
    // Update call volume chart
    function updateCallVolumeChart(data) {
      if (!data || !data.teamMembers) return;
      
      // Aggregate calls by date
      const callsByDate = {};
      
      Object.values(data.teamMembers).forEach(member => {
        member.metrics.forEach(metric => {
          const date = new Date(metric.date).toISOString().split('T')[0];
          
          if (!callsByDate[date]) {
            callsByDate[date] = {
              offered: 0,
              accepted: 0
            };
          }
          
          callsByDate[date].offered += metric.callsOffered || 0;
          callsByDate[date].accepted += metric.callsAccepted || 0;
        });
      });
      
      // Convert to arrays for chart
      const dates = Object.keys(callsByDate).sort();
      const offered = dates.map(date => callsByDate[date].offered);
      const accepted = dates.map(date => callsByDate[date].accepted);
      
      // Format dates for display
      const formattedDates = dates.map(date => {
        const d = new Date(date);
        return d.toLocaleDateString();
      });
      
      const ctx = document.getElementById('callVolumeChart').getContext('2d');
      
      // Destroy previous chart if it exists
      if (window.callVolumeChart) {
        window.callVolumeChart.destroy();
      }
      
      window.callVolumeChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: formattedDates,
          datasets: [
            {
              label: 'Calls Offered',
              data: offered,
              backgroundColor: chartColors.info,
              borderColor: chartColors.info,
              borderWidth: 1
            },
            {
              label: 'Calls Accepted',
              data: accepted,
              backgroundColor: chartColors.success,
              borderColor: chartColors.success,
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            position: 'top',
            labels: {
              fontFamily: 'Nunito',
              fontColor: chartColors.gray
            }
          },
          tooltips: {
            backgroundColor: '#fff',
            titleFontColor: chartColors.gray,
            bodyFontColor: chartColors.gray,
            bodyFontFamily: 'Nunito',
            borderColor: chartColors.gray,
            borderWidth: 1,
            xPadding: 15,
            yPadding: 15,
            displayColors: true,
            caretPadding: 10
          },
          scales: {
            xAxes: [{
              stacked: true,
              gridLines: {
                drawBorder: false,
                color: "rgba(0, 0, 0, 0.05)"
              },
              ticks: {
                fontFamily: 'Nunito',
                fontColor: chartColors.gray,
                padding: 10,
                maxRotation: 45,
                minRotation: 45
              }
            }],
            yAxes: [{
              stacked: false,
              gridLines: {
                drawBorder: false,
                color: "rgba(0, 0, 0, 0.05)",
                zeroLineColor: "rgba(0, 0, 0, 0.1)"
              },
              ticks: {
                fontFamily: 'Nunito',
                fontColor: chartColors.gray,
                padding: 10,
                beginAtZero: true
              }
            }]
          }
        }
      });
    }
    
    // Update distribution chart
    function updateDistributionChart(metricKey) {
      if (!metricsData || !metricsData.teamMembers) return;
      
      // Collect values from team members
      const values = [];
      const memberEmails = [];
      
      Object.entries(metricsData.teamMembers).forEach(([email, member]) => {
        const avg = member.averages[metricKey];
        if (avg && avg.average) {
          values.push(avg.average);
          memberEmails.push(email);
        }
      });
      
      // Get metric goal for comparison
      let goalMin = null;
      let goalMax = null;
      let warningThreshold = null;
      let criticalThreshold = null;
      let isHigherBetter = false;
      let isLowerBetter = false;
      let isRange = false;
      
      if (metricGoals[metricKey]) {
        const goal = metricGoals[metricKey];
        
        if (metricKey === 'answerRate' || metricKey === 'onQueuePercentage' || metricKey === 'interactingTime') {
          // Higher is better
          goalMin = goal.minValue;
          warningThreshold = goal.warningThreshold;
          criticalThreshold = goal.criticaThreshold;
          isHigherBetter = true;
        } else if (metricKey === 'acwPercentage' || metricKey === 'offQueuePercentage') {
          // Lower is better
          goalMax = goal.maxValue;
          warningThreshold = goal.warningThreshold;
          criticalThreshold = goal.criticaThreshold;
          isLowerBetter = true;
        } else if (metricKey === 'averageTalkTime') {
          // Range based
          goalMin = goal.minValue;
          goalMax = goal.maxValue;
          warningThreshold = goal.warningThreshold;
          criticalThreshold = goal.criticaThreshold;
          isRange = true;
        }
      }
      
      // Count members by status
      let meetingGoalCount = 0;
      let warningCount = 0;
      let criticalCount = 0;
      
      values.forEach((value, index) => {
        const email = memberEmails[index];
        const member = metricsData.teamMembers[email];
        const status = member.averages[metricKey].status;
        
        if (status === 'normal') {
          meetingGoalCount++;
        } else if (status === 'warning') {
          warningCount++;
        } else if (status === 'critical') {
          criticalCount++;
        }
      });
      
      // Update counters
      document.getElementById('meetingGoalCount').textContent = meetingGoalCount;
      document.getElementById('warningCount').textContent = warningCount;
      document.getElementById('criticalCount').textContent = criticalCount;
      
      // Generate distribution insight
      const distributionInsight = document.getElementById('distributionInsight');
      let insightText = '';
      
      // Get metric name for display
      let metricName = '';
      let unit = '';
      switch(metricKey) {
        case 'answerRate':
          metricName = 'Answer Rate';
          unit = '%';
          break;
        case 'averageTalkTime':
          metricName = 'Average Talk Time';
          unit = ' min';
          break;
        case 'acwPercentage':
          metricName = 'ACW Percentage';
          unit = '%';
          break;
        case 'onQueuePercentage':
          metricName = 'On Queue Percentage';
          unit = '%';
          break;
        case 'offQueuePercentage':
          metricName = 'Off Queue Percentage';
          unit = '%';
          break;
        case 'interactingTime':
          metricName = 'Interacting Time';
          unit = ' hrs';
          break;
        default:
          metricName = metricKey;
          unit = '';
      }
      
      if (values.length > 0) {
        const totalMembers = values.length;
        const percentMeetingGoal = (meetingGoalCount / totalMembers * 100).toFixed(0);
        
        insightText = `<p><strong>${percentMeetingGoal}%</strong> of team members are meeting the goal for ${metricName}.</p>`;
        
        if (criticalCount > 0) {
          insightText += `<p class="text-danger"><strong>Action needed:</strong> ${criticalCount} team members require immediate attention for ${metricName}.</p>`;
        }
        
        if (warningCount > 0) {
          insightText += `<p class="text-warning"><strong>Watch:</strong> ${warningCount} team members are approaching critical thresholds for ${metricName}.</p>`;
        }
        
        // Calculate average, min, max
        const avg = values.reduce((a, b) => a + b, 0) / values.length;
        const min = Math.min(...values);
        const max = Math.max(...values);
        
        insightText += `<p>Team average: <strong>${avg.toFixed(2)}${unit}</strong><br>
                      Range: <strong>${min.toFixed(2)}${unit}</strong> to <strong>${max.toFixed(2)}${unit}</strong></p>`;
      } else {
        insightText = `<p>No data available for ${metricName} distribution analysis.</p>`;
      }
      
      distributionInsight.innerHTML = insightText;
      
      // Draw the chart
      const ctx = document.getElementById('distributionChart').getContext('2d');
      
      // Destroy previous chart if it exists
      if (window.distributionChart) {
        window.distributionChart.destroy();
      }
      
      // Determine chart type based on data quantity
      const chartType = values.length > 10 ? 'histogram' : 'bar';
      
      if (chartType === 'histogram') {
        // For histogram, group values into bins
        const binCount = Math.min(10, Math.ceil(Math.sqrt(values.length)));
        const min = Math.min(...values);
        const max = Math.max(...values);
        const binWidth = (max - min) / binCount;
        
        const bins = Array(binCount).fill(0);
        const binLabels = [];
        
        // Create bin labels
        for (let i = 0; i < binCount; i++) {
          const lowerBound = min + (i * binWidth);
          const upperBound = min + ((i + 1) * binWidth);
          binLabels.push(`${lowerBound.toFixed(1)} - ${upperBound.toFixed(1)}`);
        }
        
        // Count values in each bin
        values.forEach(value => {
          const binIndex = Math.min(binCount - 1, Math.floor((value - min) / binWidth));
          bins[binIndex]++;
        });
        
        // Create chart
        window.distributionChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: binLabels,
            datasets: [{
              label: metricName + ' Distribution',
              data: bins,
              backgroundColor: chartColors.primary
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            legend: {
              display: false
            },
            scales: {
              xAxes: [{
                scaleLabel: {
                  display: true,
                  labelString: metricName + unit
                }
              }],
              yAxes: [{
                scaleLabel: {
                  display: true,
                  labelString: 'Count'
                },
                ticks: {
                  beginAtZero: true,
                  precision: 0
                }
              }]
            }
          }
        });
      } else {
        // For bar chart, use actual team member names
        const labels = Object.values(metricsData.teamMembers)
          .filter(member => member.averages[metricKey] && member.averages[metricKey].average)
          .map(member => {
            const nameParts = member.name.split(' ');
            if (nameParts.length > 1) {
              return nameParts[0] + ' ' + nameParts[1].charAt(0) + '.';
            }
            return member.name;
          });
        
        // Create chart with colors based on status
        const backgroundColors = Object.values(metricsData.teamMembers)
          .filter(member => member.averages[metricKey] && member.averages[metricKey].average)
          .map(member => {
            const status = member.averages[metricKey].status;
            if (status === 'critical') {
              return chartColors.danger;
            } else if (status === 'warning') {
              return chartColors.warning;
            } else {
              return chartColors.success;
            }
          });
        
        window.distributionChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: metricName,
              data: values,
              backgroundColor: backgroundColors
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            legend: {
              display: false
            },
            scales: {
              xAxes: [{
                ticks: {
                  autoSkip: false,
                  maxRotation: 45,
                  minRotation: 45
                }
              }],
              yAxes: [{
                ticks: {
                  beginAtZero: true,
                  callback: function(value) {
                    return value + unit;
                  }
                }
              }]
            },
            tooltips: {
              callbacks: {
                label: function(tooltipItem, data) {
                  return metricName + ': ' + tooltipItem.yLabel + unit;
                }
              }
            }
          }
        });
      }
    }
    
    // Update member performance chart
    function updateMemberPerformanceChart(member) {
      // Sort metrics by date
      const metrics = [...member.metrics].sort((a, b) => new Date(a.date) - new Date(b.date));
      
      // Get last 10 metrics, or all if less than 10
      const recentMetrics = metrics.slice(-10);
      
      const dates = recentMetrics.map(m => new Date(m.date).toLocaleDateString());
      const answerRates = recentMetrics.map(m => m.answerRate || 0);
      const onQueuePercents = recentMetrics.map(m => m.onQueuePercentage || 0);
      const interactingTimes = recentMetrics.map(m => m.interactingTime || 0);
      
      const ctx = document.getElementById('memberPerformanceChart').getContext('2d');
      
      // Destroy previous chart if it exists
      if (window.memberPerformanceChart) {
        window.memberPerformanceChart.destroy();
      }
      
      // Get goal values for annotations
      const answerRateGoal = metricGoals.answerRate ? metricGoals.answerRate.minValue : 95;
      const onQueueGoal = metricGoals.onQueuePercentage ? metricGoals.onQueuePercentage.minValue : 65;
      
      window.memberPerformanceChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: dates,
          datasets: [
            {
              label: 'Answer Rate',
              data: answerRates,
              backgroundColor: 'rgba(78, 115, 223, 0.1)',
              borderColor: chartColors.primary,
              pointBackgroundColor: chartColors.primary,
              pointBorderColor: '#fff',
              pointBorderWidth: 2,
              pointRadius: 4,
              yAxisID: 'y-axis-1'
            },
            {
              label: 'On Queue %',
              data: onQueuePercents,
              backgroundColor: 'rgba(54, 185, 204, 0.1)',
              borderColor: chartColors.info,
              pointBackgroundColor: chartColors.info,
              pointBorderColor: '#fff',
              pointBorderWidth: 2,
              pointRadius: 4,
              yAxisID: 'y-axis-1'
            },
            {
              label: 'Interacting (hrs)',
              data: interactingTimes,
              backgroundColor: 'rgba(28, 200, 138, 0.1)',
              borderColor: chartColors.success,
              pointBackgroundColor: chartColors.success,
              pointBorderColor: '#fff',
              pointBorderWidth: 2,
              pointRadius: 4,
              yAxisID: 'y-axis-2'
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          tooltips: {
            mode: 'index',
            intersect: false,
            backgroundColor: '#fff',
            titleFontColor: chartColors.gray,
            bodyFontColor: chartColors.gray,
            bodyFontFamily: 'Nunito',
            borderColor: chartColors.gray,
            borderWidth: 1,
            xPadding: 15,
            yPadding: 15
          },
          hover: {
            mode: 'nearest',
            intersect: true
          },
          scales: {
            xAxes: [{
              display: true,
              scaleLabel: {
                display: true,
                labelString: 'Date'
              }
            }],
            yAxes: [
              {
                id: 'y-axis-1',
                display: true,
                position: 'left',
                scaleLabel: {
                  display: true,
                  labelString: 'Percentage (%)'
                },
                ticks: {
                  beginAtZero: false,
                  callback: function(value) {
                    return value + '%';
                  }
                }
              },
              {
                id: 'y-axis-2',
                display: true,
                position: 'right',
                scaleLabel: {
                  display: true,
                  labelString: 'Hours'
                },
                gridLines: {
                  drawOnChartArea: false
                },
                ticks: {
                  beginAtZero: false,
                  callback: function(value) {
                    return value + ' hrs';
                  }
                }
              }
            ]
          }
        }
      });
    }
    
    // Prepare time series data for charts
    function prepareTimeSeriesData(data, metricKey, timePeriod) {
      // Result object
      const result = {
        labels: [],
        values: []
      };
      
      // Get time-based trends from data
      let trends;
      
      if (timePeriod === 'week') {
        trends = data.weeklyTrends[metricKey] || {};
      } else if (timePeriod === 'month') {
        trends = data.monthlyTrends[metricKey] || {};
      } else {
        // For daily, need to aggregate data by day
        const dailyTrends = {};
        
        Object.values(data.teamMembers).forEach(member => {
          member.metrics.forEach(metric => {
            const date = new Date(metric.date).toISOString().split('T')[0];
            
            if (!dailyTrends[date]) {
              dailyTrends[date] = {
                total: 0,
                count: 0
              };
            }
            
            if (metric[metricKey] !== undefined && !isNaN(metric[metricKey])) {
              dailyTrends[date].total += metric[metricKey];
              dailyTrends[date].count++;
            }
          });
        });
        
        // Calculate averages
        Object.keys(dailyTrends).forEach(date => {
          if (dailyTrends[date].count > 0) {
            dailyTrends[date].average = dailyTrends[date].total / dailyTrends[date].count;
          } else {
            dailyTrends[date].average = 0;
          }
        });
        
        trends = dailyTrends;
      }
      
      // Convert to arrays for charting
      const keys = Object.keys(trends).sort();
      
      // Format labels based on time period
      if (timePeriod === 'week') {
        result.labels = keys.map(key => {
          const parts = key.split('-');
          const year = parts[0];
          const week = parts[1].substring(1); // Remove 'W' prefix
          return `Week ${week}`;
        });
      } else if (timePeriod === 'month') {
        result.labels = keys.map(key => {
          const parts = key.split('-');
          const year = parts[0];
          const month = parts[1];
          const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          return monthNames[parseInt(month) - 1] + ' ' + year;
        });
      } else {
        result.labels = keys.map(key => {
          const date = new Date(key);
          return date.toLocaleDateString();
        });
      }
      
      // Get values
      result.values = keys.map(key => trends[key].average);
      
      return result;
    }
    
    // Export metrics data
    function exportMetricsData() {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Preparing export...';
      
      // Get current filters
      const dateRangeFilter = document.getElementById('dateRangeFilter').value;
      const teamMemberFilter = document.getElementById('teamMemberFilter').value;
      
      // Prepare date range
      let startDate = null;
      let endDate = new Date(); // Today
      
      if (dateRangeFilter === 'custom') {
        startDate = new Date(document.getElementById('startDateFilter').value);
        endDate = new Date(document.getElementById('endDateFilter').value);
      } else {
        // Calculate start date based on selected range
        startDate = new Date();
        startDate.setDate(startDate.getDate() - parseInt(dateRangeFilter));
      }
      
      // Prepare filter options
      const options = {
        startDate: startDate,
        endDate: endDate
      };
      
      if (teamMemberFilter !== 'all') {
        options.teamMemberEmail = teamMemberFilter;
      }
      
      // Call server function to export data
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Export successful! Opening the exported file...', 'success');
            
            // Open the exported file
            window.open(result.url, '_blank');
          } else {
            showAlert('Error exporting metrics: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .exportMetrics(options);
    }
    
    // Show alert message
    function showAlert(message, type) {
      const alertContainer = document.getElementById('alertContainer');
      const alertMessage = document.getElementById('alertMessage');
      
      alertMessage.textContent = message;
      alertMessage.className = `alert alert-${type}`;
      alertContainer.style.display = 'block';
      
      // Auto-hide after 5 seconds
      setTimeout(function() {
        alertContainer.style.display = 'none';
      }, 5000);
    }
  </script>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Metrics Reports</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css for animations -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <!-- DataTables CSS -->
  <link rel="stylesheet" href="https://cdn.datatables.net/1.10.22/css/dataTables.bootstrap4.min.css">
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --shadow-lg: 0 1rem 3rem rgba(0,0,0,.175);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .container-fluid {
      padding: 30px !important;
    }
    
    /* Header bar */
    .system-info {
      background-color: var(--gray-800);
      color: white;
      padding: 8px 15px;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }
    
    .system-info p {
      margin: 0;
    }
    
    /* Page header */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .page-title i {
      color: var(--primary);
      margin-right: 12px;
    }
    
    /* Cards */
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.75rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
      overflow: hidden;
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Filter controls */
    .filters-section {
      margin-bottom: 25px;
      background: #fff;
      border-radius: 0.75rem;
      padding: 20px 25px;
      box-shadow: var(--shadow-sm);
    }
    
    .filters-title {
      font-weight: 600;
      color: var(--gray-700);
      margin-bottom: 15px;
    }
    
    .filter-form {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      align-items: flex-end;
    }
    
    .filter-group {
      flex: 1;
      min-width: 200px;
    }
    
    .filter-label {
      font-weight: 600;
      color: var(--gray-700);
      margin-bottom: 8px;
      display: block;
      font-size: 0.9rem;
    }
    
    .form-control {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    /* Report cards */
    .report-card {
      border-radius: 0.75rem;
      box-shadow: var(--shadow-sm);
      background-color: #fff;
      margin-bottom: 20px;
      transition: var(--transition);
      display: flex;
      overflow: hidden;
      border: 1px solid var(--gray-200);
    }
    
    .report-card:hover {
      box-shadow: var(--shadow);
      transform: translateY(-3px);
    }
    
    .report-icon {
      padding: 20px;
      background-color: var(--primary-light);
      color: white;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-width: 100px;
    }
    
    .report-icon i {
      font-size: 2rem;
      margin-bottom: 10px;
    }
    
    .report-content {
      padding: 20px;
      flex: 1;
    }
    
    .report-title {
      font-size: 1.2rem;
      margin: 0 0 10px;
      color: var(--gray-800);
    }
    
    .report-description {
      color: var(--gray-600);
      margin-bottom: 15px;
      font-size: 0.9rem;
    }
    
    /* DataTables overrides */
    .dataTables_wrapper {
      font-family: 'Nunito', sans-serif;
    }
    
    .dataTables_wrapper .dataTables_length select,
    .dataTables_wrapper .dataTables_filter input {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 5px 10px;
    }
    
    .dataTables_wrapper .dataTables_length select:focus,
    .dataTables_wrapper .dataTables_filter input:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    .dataTables_wrapper .dataTables_paginate .paginate_button.current {
      background: var(--primary);
      color: white !important;
      border: 1px solid var(--primary);
      border-radius: 5px;
    }
    
    .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover {
      background: var(--primary-dark) !important;
      color: white !important;
      border: 1px solid var(--primary-dark);
    }
    
    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
      background: var(--gray-200);
      color: var(--gray-700) !important;
      border: 1px solid var(--gray-200);
    }
    
    /* Status indicators */
    .status-indicator {
      display: inline-block;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      margin-right: 5px;
    }
    
    .status-good {
      background-color: var(--success);
    }
    
    .status-warning {
      background-color: var(--warning);
    }
    
    .status-critical {
      background-color: var(--danger);
    }
    
    /* Table styles */
    .table {
      margin-bottom: 0;
    }
    
    .table td, .table th {
      vertical-align: middle;
    }
    
    .table thead th {
      background-color: var(--gray-100);
      border-bottom: 1px solid var(--gray-300);
      color: var(--gray-700);
      font-weight: 600;
      text-transform: uppercase;
      font-size: 0.8rem;
      letter-spacing: 0.5px;
    }
    
    .table-hover tbody tr:hover {
      background-color: var(--gray-100);
    }
    
    /* Alert messages */
    .alert {
      border-radius: 10px;
      padding: 15px 20px;
      margin-bottom: 20px;
      border: none;
    }
    
    .alert-success {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .alert-danger {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--gray-200);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 600;
      color: var(--primary);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Buttons */
    .btn {
      border-radius: 10px;
      padding: 8px 16px;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
    }
    
    .btn i {
      margin-right: 8px;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-success {
      background: var(--success);
      border-color: var(--success);
    }
    
    .btn-success:hover {
      background-color: #169b6b;
      border-color: #169b6b;
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(28,200,138,.15);
    }
    
    .btn-light {
      background: var(--gray-100);
      color: var(--gray-700);
      border-color: var(--gray-100);
    }
    
    .btn-light:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    .btn-sm {
      padding: 5px 12px;
      font-size: 0.875rem;
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .container-fluid {
        padding: 15px !important;
      }
      
      .page-header {
        padding: 15px 20px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .page-actions {
        margin-top: 15px;
        width: 100%;
      }
      
      .report-card {
        flex-direction: column;
      }
      
      .report-icon {
        min-width: auto;
        min-height: 100px;
      }
    }
  </style>
</head>
<body>
  <!-- System Info Bar - Using dynamic loading, no hardcoded values -->
  <div class="system-info">
    <p>Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): <span id="currentDate">Loading...</span></p>
    <p>Current User: <span id="currentUser">Loading...</span></p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading metrics data...</div>
  </div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <h1 class="page-title">
        <i class="fas fa-file-alt"></i> Metrics Reports
      </h1>
      <div class="page-actions">
        <button id="enterMetricsBtn" class="btn btn-light mr-2">
          <i class="fas fa-keyboard"></i> Enter Metrics
        </button>
        <button id="viewDashboardBtn" class="btn btn-light mr-2">
          <i class="fas fa-tachometer-alt"></i> View Dashboard
        </button>
        <button id="configureEmailBtn" class="btn btn-light mr-2">
          <i class="fas fa-envelope"></i> Email Reports
        </button>
        <button id="exportBtn" class="btn btn-primary">
          <i class="fas fa-download"></i> Export
        </button>
      </div>
    </div>
    
    <!-- Filters Section -->
    <div class="filters-section animate__animated animate__fadeIn">
      <h5 class="filters-title">
        <i class="fas fa-filter text-primary mr-2"></i> Report Filters
      </h5>
      <div class="filter-form">
        <div class="filter-group">
          <label class="filter-label" for="reportType">Report Type</label>
          <select class="form-control" id="reportType">
            <option value="all">All Metrics</option>
            <option value="performance">Performance Summary</option>
            <option value="team">Team Comparison</option>
            <option value="trends">Trend Analysis</option>
            <option value="flagged">Flagged Team Members</option>
          </select>
        </div>
        <div class="filter-group">
          <label class="filter-label" for="dateRangeFilter">Date Range</label>
          <select class="form-control" id="dateRangeFilter">
            <option value="7">Last 7 Days</option>
            <option value="30" selected>Last 30 Days</option>
            <option value="90">Last 90 Days</option>
            <option value="custom">Custom Range</option>
          </select>
        </div>
        <div class="filter-group" id="customDateRange" style="display: none;">
          <label class="filter-label" for="startDateFilter">From</label>
          <input type="date" class="form-control" id="startDateFilter">
        </div>
        <div class="filter-group" id="customDateRangeTo" style="display: none;">
          <label class="filter-label" for="endDateFilter">To</label>
          <input type="date" class="form-control" id="endDateFilter">
        </div>
        <div class="filter-group">
          <label class="filter-label" for="teamMemberFilter">Team Member</label>
          <select class="form-control" id="teamMemberFilter">
            <option value="all" selected>All Team Members</option>
            <!-- Team members will be loaded dynamically -->
          </select>
        </div>
        <div style="align-self: flex-end;">
          <button id="generateReportBtn" class="btn btn-primary">
            <i class="fas fa-file-alt"></i> Generate Report
          </button>
          <button id="resetFiltersBtn" class="btn btn-light ml-2">
            <i class="fas fa-undo"></i> Reset
          </button>
        </div>
      </div>
    </div>
    
    <!-- Alert Messages -->
    <div id="alertContainer" style="display: none;">
      <div id="alertMessage" class="alert" role="alert"></div>
    </div>
    
    <!-- Predefined Reports Section -->
    <div class="row animate__animated animate__fadeIn" id="predefinedReports">
      <div class="col-12">
        <h4 class="mb-3">Quick Reports</h4>
      </div>
      
      <div class="col-md-6 col-lg-4">
        <div class="report-card">
          <div class="report-icon">
            <i class="fas fa-star"></i>
            <span>Performance</span>
          </div>
          <div class="report-content">
            <h5 class="report-title">Performance Summary</h5>
            <p class="report-description">Overview of key metrics with performance against goals for all team members.</p>
            <button class="btn btn-sm btn-primary run-report" data-type="performance">
              <i class="fas fa-play"></i> Run Report
            </button>
          </div>
        </div>
      </div>
      
      <div class="col-md-6 col-lg-4">
        <div class="report-card">
          <div class="report-icon">
            <i class="fas fa-users"></i>
            <span>Team</span>
          </div>
          <div class="report-content">
            <h5 class="report-title">Team Comparison</h5>
            <p class="report-description">Comparative analysis of all team members across key performance metrics.</p>
            <button class="btn btn-sm btn-primary run-report" data-type="team">
              <i class="fas fa-play"></i> Run Report
            </button>
          </div>
        </div>
      </div>
      
      <div class="col-md-6 col-lg-4">
        <div class="report-card">
          <div class="report-icon">
            <i class="fas fa-chart-line"></i>
            <span>Trends</span>
          </div>
          <div class="report-content">
            <h5 class="report-title">Trend Analysis</h5>
            <p class="report-description">Analysis of metric trends over time to identify patterns and improvements.</p>
            <button class="btn btn-sm btn-primary run-report" data-type="trends">
              <i class="fas fa-play"></i> Run Report
            </button>
          </div>
        </div>
      </div>
      
      <div class="col-md-6 col-lg-4">
        <div class="report-card">
          <div class="report-icon">
            <i class="fas fa-exclamation-triangle"></i>
            <span>Flagged</span>
          </div>
          <div class="report-content">
            <h5 class="report-title">Flagged Team Members</h5>
            <p class="report-description">Detailed report on team members with metrics below critical thresholds.</p>
            <button class="btn btn-sm btn-primary run-report" data-type="flagged">
              <i class="fas fa-play"></i> Run Report
            </button>
          </div>
        </div>
      </div>
      
      <div class="col-md-6 col-lg-4">
        <div class="report-card">
          <div class="report-icon">
            <i class="fas fa-phone-alt"></i>
            <span>Calls</span>
          </div>
          <div class="report-content">
            <h5 class="report-title">Call Volume Analysis</h5>
            <p class="report-description">Detailed analysis of call volumes, answer rates and handling times.</p>
            <button class="btn btn-sm btn-primary run-report" data-type="calls">
              <i class="fas fa-play"></i> Run Report
            </button>
          </div>
        </div>
      </div>
      
      <div class="col-md-6 col-lg-4">
        <div class="report-card">
          <div class="report-icon">
            <i class="fas fa-calendar-alt"></i>
            <span>Custom</span>
          </div>
          <div class="report-content">
            <h5 class="report-title">Custom Report</h5>
            <p class="report-description">Build a customized report with the metrics and filters you need.</p>
            <button class="btn btn-sm btn-primary" id="customReportBtn">
              <i class="fas fa-cog"></i> Configure
            </button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Report Results Section (initially hidden) -->
    <div class="card animate__animated animate__fadeIn mt-4" id="reportResultsCard" style="display: none;">
      <div class="card-header">
        <h5 class="card-header-title" id="reportTitle">
          <i class="fas fa-file-alt text-primary mr-2"></i> Report Results
        </h5>
        <div class="card-actions">
          <button id="printReportBtn" class="btn btn-sm btn-light mr-2">
            <i class="fas fa-print"></i> Print
          </button>
          <button id="exportReportBtn" class="btn btn-sm btn-primary">
            <i class="fas fa-download"></i> Export
          </button>
        </div>
      </div>
      <div class="card-body">
        <div id="reportSummary" class="mb-4"></div>
        
        <div class="table-responsive">
          <table id="reportTable" class="table table-striped table-bordered table-hover" width="100%">
            <thead>
              <tr></tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Custom Report Modal -->
  <div class="modal fade" id="customReportModal" tabindex="-1" role="dialog" aria-labelledby="customReportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="customReportModalLabel">Configure Custom Report</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="customReportForm">
            <div class="form-group">
              <label for="customReportName">Report Name</label>
              <input type="text" class="form-control" id="customReportName" placeholder="Enter a name for your report">
            </div>
            
            <div class="form-group">
              <label>Select Metrics to Include</label>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="metric_answerRate" checked>
                <label class="custom-control-label" for="metric_answerRate">Answer Rate</label>
              </div>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="metric_averageTalkTime" checked>
                <label class="custom-control-label" for="metric_averageTalkTime">Average Talk Time</label>
              </div>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="metric_acwPercentage" checked>
                <label class="custom-control-label" for="metric_acwPercentage">ACW Percentage</label>
              </div>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="metric_onQueuePercentage" checked>
                <label class="custom-control-label" for="metric_onQueuePercentage">On Queue Percentage</label>
              </div>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="metric_offQueuePercentage">
                <label class="custom-control-label" for="metric_offQueuePercentage">Off Queue Percentage</label>
              </div>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="metric_interactingTime" checked>
                <label class="custom-control-label" for="metric_interactingTime">Interacting Time</label>
              </div>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="metric_callsOffered">
                <label class="custom-control-label" for="metric_callsOffered">Calls Offered</label>
              </div>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="metric_callsAccepted">
                <label class="custom-control-label" for="metric_callsAccepted">Calls Accepted</label>
              </div>
            </div>
            
            <div class="form-group">
              <label for="customReportGrouping">Grouping</label>
              <select class="form-control" id="customReportGrouping">
                <option value="team_member">By Team Member</option>
                <option value="date">By Date</option>
                <option value="week">By Week</option>
                <option value="month">By Month</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="customReportSort">Sort By</label>
              <select class="form-control" id="customReportSort">
                <option value="name">Team Member Name</option>
                <option value="answerRate">Answer Rate</option>
                <option value="averageTalkTime">Average Talk Time</option>
                <option value="onQueuePercentage">On Queue Percentage</option>
                <option value="interactingTime">Interacting Time</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="customReportDisplayOptions">Display Options</label>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="option_showGoals" checked>
                <label class="custom-control-label" for="option_showGoals">Show Goals</label>
              </div>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="option_showStatus" checked>
                <label class="custom-control-label" for="option_showStatus">Show Status Indicators</label>
              </div>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="option_includeCharts">
                <label class="custom-control-label" for="option_includeCharts">Include Charts</label>
              </div>
              <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="option_flaggedOnly">
                <label class="custom-control-label" for="option_flaggedOnly">Show Only Flagged Metrics</label>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="generateCustomReportBtn">
            <i class="fas fa-file-alt"></i> Generate Report
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Bootstrap, jQuery, and DataTables -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.datatables.net/1.10.22/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/1.10.22/js/dataTables.bootstrap4.min.js"></script>
  
  <script>
    // Global variables
    let metricsData = null;
    let metricGoals = {};
    let teamMembers = [];
    let dataTable = null;
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      // Load user information - NO HARDCODED VALUES
      loadUserInfo();
      
      // Set default date for custom range
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      document.getElementById('startDateFilter').value = formatDateForInput(thirtyDaysAgo);
      document.getElementById('endDateFilter').value = formatDateForInput(today);
      
      // Hide loading overlay after a short delay
      setTimeout(() => {
        document.getElementById('loadingOverlay').style.display = 'none';
      }, 500);
      
      // Load team members
      loadTeamMembers();
      
      // Load metric goals
      loadMetricGoals();
      
      // Add event listeners
      addEventListeners();
    });
    
    // Load user information - dynamically, no hardcoded user values
    function loadUserInfo() {
      google.script.run
        .withSuccessHandler(function(info) {
          document.getElementById('currentDate').textContent = info.formattedDate;
          document.getElementById('currentUser').textContent = info.username;
        })
        .withFailureHandler(function(error) {
          console.error('Error loading user info:', error);
          // Default values if there's an error
          document.getElementById('currentDate').textContent = new Date().toISOString().replace('T', ' ').split('.')[0];
          document.getElementById('currentUser').textContent = 'current_user';
        })
        .getCurrentUserInfo();
    }
    
    // Format date for input field
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }
    
    // Load team members
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(function(members) {
          teamMembers = members;
          
          // Populate team member filter dropdown
          const select = document.getElementById('teamMemberFilter');
          
          // Keep the "All Team Members" option
          select.innerHTML = '<option value="all">All Team Members</option>';
          
          members.forEach(function(member) {
            const option = document.createElement('option');
            option.value = member.email;
            option.textContent = `${member.firstName} ${member.lastName}`;
            select.appendChild(option);
          });
        })
        .withFailureHandler(function(error) {
          console.error('Error loading team members:', error);
        })
        .getTeamMembers();
    }
    
    // Load metric goals
    function loadMetricGoals() {
      google.script.run
        .withSuccessHandler(function(goals) {
          // Convert to object for easier access
          goals.forEach(function(goal) {
            metricGoals[goal.metricName] = goal;
          });
        })
        .withFailureHandler(function(error) {
          console.error('Error loading metric goals:', error);
        })
        .getMetricGoals();
    }
    
    // Add all event listeners
    function addEventListeners() {
      // Date range filter change
      document.getElementById('dateRangeFilter').addEventListener('change', function() {
        const customRangeFields = document.getElementById('customDateRange');
        const customRangeToFields = document.getElementById('customDateRangeTo');
        
        if (this.value === 'custom') {
          customRangeFields.style.display = 'block';
          customRangeToFields.style.display = 'block';
        } else {
          customRangeFields.style.display = 'none';
          customRangeToFields.style.display = 'none';
        }
      });
      
      // Generate report button
      document.getElementById('generateReportBtn').addEventListener('click', function() {
        generateReport();
      });
      
      // Reset filters button
      document.getElementById('resetFiltersBtn').addEventListener('click', function() {
        document.getElementById('reportType').value = 'all';
        document.getElementById('dateRangeFilter').value = '30';
        document.getElementById('teamMemberFilter').value = 'all';
        document.getElementById('customDateRange').style.display = 'none';
        document.getElementById('customDateRangeTo').style.display = 'none';
      });
      
      // Quick report buttons
      document.querySelectorAll('.run-report').forEach(function(button) {
        button.addEventListener('click', function() {
          const reportType = this.getAttribute('data-type');
          document.getElementById('reportType').value = reportType;
          generateReport();
        });
      });
      
      // Custom report button
      document.getElementById('customReportBtn').addEventListener('click', function() {
        $('#customReportModal').modal('show');
      });
      
      // Generate custom report button
      document.getElementById('generateCustomReportBtn').addEventListener('click', function() {
        $('#customReportModal').modal('hide');
        generateCustomReport();
      });
      
      // Export report button
      document.getElementById('exportReportBtn').addEventListener('click', function() {
        exportReport();
      });
      
      // Print report button
      document.getElementById('printReportBtn').addEventListener('click', function() {
        printReport();
      });
      
      // Navigation buttons
      document.getElementById('enterMetricsBtn').addEventListener('click', function() {
        google.script.run.openMetricsForm();
      });
      
      document.getElementById('viewDashboardBtn').addEventListener('click', function() {
        google.script.run.openMetricsDashboard();
      });
      
      document.getElementById('configureEmailBtn').addEventListener('click', function() {
        google.script.run.openMetricsEmailConfig();
      });
      
      document.getElementById('exportBtn').addEventListener('click', function() {
        exportMetricsData();
      });
    }
    
    // Generate report based on selected filters
    function generateReport() {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Generating report...';
      
      // Get filter values
      const reportType = document.getElementById('reportType').value;
      const dateRangeFilter = document.getElementById('dateRangeFilter').value;
      const teamMemberFilter = document.getElementById('teamMemberFilter').value;
      
      // Prepare date range
      let startDate = null;
      let endDate = new Date(); // Today
      
      if (dateRangeFilter === 'custom') {
        startDate = new Date(document.getElementById('startDateFilter').value);
        endDate = new Date(document.getElementById('endDateFilter').value);
        // Set end date to end of the day
        endDate.setHours(23, 59, 59, 999);
      } else {
        // Calculate start date based on selected range
        startDate = new Date();
        startDate.setDate(startDate.getDate() - parseInt(dateRangeFilter));
      }
      
      // Prepare filter options
      const options = {
        startDate: startDate,
        endDate: endDate
      };
      
      if (teamMemberFilter !== 'all') {
        options.teamMemberEmail = teamMemberFilter;
      }
      
      // Get metrics data
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            metricsData = result.data;
            
            // Generate appropriate report based on type
            switch(reportType) {
              case 'performance':
                generatePerformanceReport(metricsData);
                break;
              case 'team':
                generateTeamComparisonReport(metricsData);
                break;
              case 'trends':
                generateTrendAnalysisReport(metricsData);
                break;
              case 'flagged':
                generateFlaggedMembersReport(metricsData);
                break;
              case 'calls':
                generateCallVolumeReport(metricsData);
                break;
              default:
                generateAllMetricsReport(metricsData);
            }
            
            document.getElementById('loadingOverlay').style.display = 'none';
          } else {
            document.getElementById('loadingOverlay').style.display = 'none';
            showAlert('Error generating report: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .calculateMetricsAnalytics(options);
    }
    
    // Generate custom report
    function generateCustomReport() {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Generating custom report...';
      
      // Get selected metrics
      const selectedMetrics = [];
      document.querySelectorAll('[id^="metric_"]').forEach(function(checkbox) {
        if (checkbox.checked) {
          const metricName = checkbox.id.replace('metric_', '');
          selectedMetrics.push(metricName);
        }
      });
      
      // Get grouping and sorting options
      const grouping = document.getElementById('customReportGrouping').value;
      const sortBy = document.getElementById('customReportSort').value;
      
      // Get display options
      const showGoals = document.getElementById('option_showGoals').checked;
      const showStatus = document.getElementById('option_showStatus').checked;
      const includeCharts = document.getElementById('option_includeCharts').checked;
      const flaggedOnly = document.getElementById('option_flaggedOnly').checked;
      
      // Get report name
      const reportName = document.getElementById('customReportName').value || 'Custom Report';
      
      // Get filter values for date range
      const dateRangeFilter = document.getElementById('dateRangeFilter').value;
      const teamMemberFilter = document.getElementById('teamMemberFilter').value;
      
      // Prepare date range
      let startDate = null;
      let endDate = new Date(); // Today
      
      if (dateRangeFilter === 'custom') {
        startDate = new Date(document.getElementById('startDateFilter').value);
        endDate = new Date(document.getElementById('endDateFilter').value);
        // Set end date to end of the day
        endDate.setHours(23, 59, 59, 999);
      } else {
        // Calculate start date based on selected range
        startDate = new Date();
        startDate.setDate(startDate.getDate() - parseInt(dateRangeFilter));
      }
      
      // Prepare filter options
      const options = {
        startDate: startDate,
        endDate: endDate
      };
      
      if (teamMemberFilter !== 'all') {
        options.teamMemberEmail = teamMemberFilter;
      }
      
      // Get metrics data
      google.script.run
        .withSuccessHandler(function(result) {
          if (result.success) {
            metricsData = result.data;
            
            // Generate custom report
            generateCustomReportData(
              metricsData, 
              reportName, 
              selectedMetrics, 
              grouping, 
              sortBy, 
              showGoals, 
              showStatus, 
              flaggedOnly
            );
            
            document.getElementById('loadingOverlay').style.display = 'none';
          } else {
            document.getElementById('loadingOverlay').style.display = 'none';
            showAlert('Error generating report: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .calculateMetricsAnalytics(options);
    }
    
    // Generate all metrics report
    function generateAllMetricsReport(data) {
      // Set report title
      document.getElementById('reportTitle').innerHTML = '<i class="fas fa-file-alt text-primary mr-2"></i> All Metrics Report';
      
      // Create summary
      let summaryHtml = `
        <div class="alert alert-info">
          <h5><i class="fas fa-info-circle mr-2"></i> Report Summary</h5>
          <p><strong>Period:</strong> ${formatDate(data.dateRange.start)} to ${formatDate(data.dateRange.end)}</p>
          <p><strong>Team Members:</strong> ${data.totalTeamMembers}</p>
          <p><strong>Total Metrics:</strong> ${data.totalMetrics}</p>
        </div>
      `;
      
      document.getElementById('reportSummary').innerHTML = summaryHtml;
      
      // Prepare table data
      const tableData = [];
      
      // Loop through team members
      Object.values(data.teamMembers).forEach(function(member) {
        // Create a row for each member
        const row = {
          name: member.name,
          email: member.email,
          answerRate: member.averages.answerRate.average.toFixed(2) + '%',
          answerRateStatus: member.averages.answerRate.status,
          talkTime: member.averages.averageTalkTime.average.toFixed(2) + ' min',
          talkTimeStatus: member.averages.averageTalkTime.status,
          acw: member.averages.acwPercentage.average.toFixed(2) + '%',
          acwStatus: member.averages.acwPercentage.status,
          onQueue: member.averages.onQueuePercentage.average.toFixed(2) + '%',
          onQueueStatus: member.averages.onQueuePercentage.status,
          offQueue: member.averages.offQueuePercentage.average.toFixed(2) + '%',
          interactingTime: member.averages.interactingTime.average.toFixed(2) + ' hrs',
          interactingTimeStatus: member.averages.interactingTime.status,
          metricsCount: member.metrics.length
        };
        
        tableData.push(row);
      });
      
      // Define columns
      const columns = [
        { title: "Team Member", data: "name" },
        { 
          title: "Answer Rate", 
          data: "answerRate",
          render: function(data, type, row) {
            if (type === 'display') {
              const statusClass = getStatusClass(row.answerRateStatus);
              return `<span class="${statusClass}">${data}</span>`;
            }
            return data;
          }
        },
        { 
          title: "Talk Time", 
          data: "talkTime",
          render: function(data, type, row) {
            if (type === 'display') {
              const statusClass = getStatusClass(row.talkTimeStatus);
              return `<span class="${statusClass}">${data}</span>`;
            }
            return data;
          }
        },
        { 
          title: "ACW %", 
          data: "acw",
          render: function(data, type, row) {
            if (type === 'display') {
              const statusClass = getStatusClass(row.acwStatus);
              return `<span class="${statusClass}">${data}</span>`;
            }
            return data;
          }
        },
        { 
          title: "On Queue %", 
          data: "onQueue",
          render: function(data, type, row) {
            if (type === 'display') {
              const statusClass = getStatusClass(row.onQueueStatus);
              return `<span class="${statusClass}">${data}</span>`;
            }
            return data;
          }
        },
        { 
          title: "Off Queue %", 
          data: "offQueue" 
        },
        { 
          title: "Interacting Time", 
          data: "interactingTime",
          render: function(data, type, row) {
            if (type === 'display') {
              const statusClass = getStatusClass(row.interactingTimeStatus);
              return `<span class="${statusClass}">${data}</span>`;
            }
            return data;
          }
        },
        { title: "Metrics Count", data: "metricsCount" }
      ];
      
      // Create and show the table
      createDataTable(tableData, columns);
      
      // Show the results card
      document.getElementById('reportResultsCard').style.display = 'block';
      
      // Hide predefined reports section
      document.getElementById('predefinedReports').style.display = 'none';
    }
    
    // Generate performance summary report
    function generatePerformanceReport(data) {
      // Set report title
      document.getElementById('reportTitle').innerHTML = '<i class="fas fa-star text-primary mr-2"></i> Performance Summary Report';
      
      // Create summary
      let summaryHtml = `
        <div class="alert alert-info">
          <h5><i class="fas fa-info-circle mr-2"></i> Performance Report Summary</h5>
          <p><strong>Period:</strong> ${formatDate(data.dateRange.start)} to ${formatDate(data.dateRange.end)}</p>
          <p><strong>Team Members:</strong> ${data.totalTeamMembers}</p>
        </div>
        
        <div class="row mb-4">
          <div class="col-md-4">
            <div class="card bg-success text-white">
              <div class="card-body">
                <h5 class="card-title"><i class="fas fa-check-circle mr-2"></i> Meeting Goals</h5>
                <p class="card-text display-4">${getAverageGoalMeetingPercentage(data)}%</p>
                <p class="card-text">of team metrics meeting goals</p>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card bg-warning text-white">
              <div class="card-body">
                <h5 class="card-title"><i class="fas fa-exclamation-circle mr-2"></i> Warning</h5>
                <p class="card-text display-4">${getAverageWarningPercentage(data)}%</p>
                <p class="card-text">of team metrics in warning range</p>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card bg-danger text-white">
              <div class="card-body">
                <h5 class="card-title"><i class="fas fa-times-circle mr-2"></i> Critical</h5>
                <p class="card-text display-4">${getAverageCriticalPercentage(data)}%</p>
                <p class="card-text">of team metrics below critical thresholds</p>
              </div>
            </div>
          </div>
        </div>
      `;
      
      document.getElementById('reportSummary').innerHTML = summaryHtml;
      
      // Prepare table data
      const tableData = [];
      
      // Define metrics
      const metrics = [
        { key: 'answerRate', label: 'Answer Rate', unit: '%', goal: metricGoals.answerRate ? metricGoals.answerRate.minValue + '%' : '95%' },
        { key: 'averageTalkTime', label: 'Average Talk Time', unit: ' min', goal: metricGoals.averageTalkTime ? metricGoals.averageTalkTime.minValue + '-' + metricGoals.averageTalkTime.maxValue + ' min' : '15-20 min' },
        { key: 'acwPercentage', label: 'ACW Percentage', unit: '%', goal: metricGoals.acwPercentage ? '≤ ' + metricGoals.acwPercentage.maxValue + '%' : '≤ 5%' },
        { key: 'onQueuePercentage', label: 'On Queue Percentage', unit: '%', goal: metricGoals.onQueuePercentage ? '≥ ' + metricGoals.onQueuePercentage.minValue + '%' : '≥ 65%' },
        { key: 'interactingTime', label: 'Interacting Time', unit: ' hrs', goal: metricGoals.interactingTime ? metricGoals.interactingTime.minValue + '-' + metricGoals.interactingTime.maxValue + ' hrs' : '4-6 hrs' }
      ];
      
      // Loop through team members
      Object.values(data.teamMembers).forEach(function(member) {
        metrics.forEach(function(metric) {
          if (member.averages[metric.key]) {
            const avg = member.averages[metric.key];
            
            // Create a row for each member and metric
            const row = {
              name: member.name,
              email: member.email,
              metric: metric.label,
              value: avg.average.toFixed(2) + metric.unit,
              goal: metric.goal,
              status: avg.status,
              trend: avg.trend ? (avg.trend > 0 ? '+' : '') + avg.trend.toFixed(2) + '%' : 'N/A'
            };
            
            tableData.push(row);
          }
        });
      });
      
      // Define columns
      const columns = [
        { title: "Team Member", data: "name" },
        { title: "Metric", data: "metric" },
        { 
          title: "Value", 
          data: "value",
          render: function(data, type, row) {
            if (type === 'display') {
              const statusClass = getStatusClass(row.status);
              return `<span class="${statusClass}">${data}</span>`;
            }
            return data;
          }
        },
        { title: "Goal", data: "goal" },
        { 
          title: "Status", 
          data: "status",
          render: function(data, type, row) {
            if (type === 'display') {
              let icon = '';
              let statusText = '';
              
              switch(data) {
                case 'normal':
                  icon = '<i class="fas fa-check-circle text-success mr-1"></i>';
                  statusText = 'Meeting Goal';
                  break;
                case 'warning':
                  icon = '<i class="fas fa-exclamation-circle text-warning mr-1"></i>';
                  statusText = 'Warning';
                  break;
                case 'critical':
                  icon = '<i class="fas fa-times-circle text-danger mr-1"></i>';
                  statusText = 'Critical';
                  break;
                default:
                  statusText = 'Unknown';
              }
              
              return icon + statusText;
            }
            return data;
          }
        },
        { 
          title: "Trend", 
          data: "trend",
          render: function(data, type, row) {
            if (type === 'display' && data !== 'N/A') {
              const value = parseFloat(data);
              let icon = '';
              let color = '';
              
              if (value > 0) {
                icon = '<i class="fas fa-arrow-up mr-1"></i>';
                color = 'text-success';
              } else if (value < 0) {
                icon = '<i class="fas fa-arrow-down mr-1"></i>';
                color = 'text-danger';
              } else {
                icon = '<i class="fas fa-equals mr-1"></i>';
                color = 'text-secondary';
              }
              
              return `<span class="${color}">${icon}${data}</span>`;
            }
            return data;
          }
        }
      ];
      
      // Create and show the table
      createDataTable(tableData, columns);
      
      // Show the results card
      document.getElementById('reportResultsCard').style.display = 'block';
      
      // Hide predefined reports section
      document.getElementById('predefinedReports').style.display = 'none';
    }
    
    // Generate team comparison report
    function generateTeamComparisonReport(data) {
      // Set report title
      document.getElementById('reportTitle').innerHTML = '<i class="fas fa-users text-primary mr-2"></i> Team Comparison Report';
      
      // Create summary
      let summaryHtml = `
        <div class="alert alert-info">
          <h5><i class="fas fa-info-circle mr-2"></i> Team Comparison Report Summary</h5>
          <p><strong>Period:</strong> ${formatDate(data.dateRange.start)} to ${formatDate(data.dateRange.end)}</p>
          <p><strong>Team Members:</strong> ${data.totalTeamMembers}</p>
        </div>
      `;
      
      document.getElementById('reportSummary').innerHTML = summaryHtml;
      
      // Prepare table data
      const tableData = [];
      
      // Loop through team members
      Object.values(data.teamMembers).forEach(function(member) {
        // Create a row for each member
        const row = {
          name: member.name,
          email: member.email,
          answerRate: member.averages.answerRate.average.toFixed(2) + '%',
          answerRateRank: 0, // Will be calculated later
          answerRateStatus: member.averages.answerRate.status,
          talkTime: member.averages.averageTalkTime.average.toFixed(2) + ' min',
          talkTimeRank: 0,
          talkTimeStatus: member.averages.averageTalkTime.status,
          onQueue: member.averages.onQueuePercentage.average.toFixed(2) + '%',
          onQueueRank: 0,
          onQueueStatus: member.averages.onQueuePercentage.status,
          acw: member.averages.acwPercentage.average.toFixed(2) + '%',
          acwRank: 0, // For ACW, lower is better
          acwStatus: member.averages.acwPercentage.status,
          interactingTime: member.averages.interactingTime.average.toFixed(2) + ' hrs',
          interactingTimeRank: 0,
          interactingTimeStatus: member.averages.interactingTime.status,
          overallRank: 0,
          overallScore: 0
        };
        
        // Calculate raw values for ranking
        row._answerRate = member.averages.answerRate.average;
        row._talkTime = Math.abs(member.averages.averageTalkTime.average - 17.5); // Distance from ideal (midpoint of 15-20)
        row._onQueue = member.averages.onQueuePercentage.average;
        row._acw = member.averages.acwPercentage.average;
        row._interactingTime = member.averages.interactingTime.average;
        
        tableData.push(row);
      });
      
      // Calculate rankings
      // For answer rate, on queue percentage, and interacting time, higher is better
      tableData.sort((a, b) => b._answerRate - a._answerRate);
      tableData.forEach((row, index) => { row.answerRateRank = index + 1; });
      
      // For talk time, closer to ideal is better (sort by distance from ideal)
      tableData.sort((a, b) => a._talkTime - b._talkTime);
      tableData.forEach((row, index) => { row.talkTimeRank = index + 1; });
      
      // For on queue percentage, higher is better
      tableData.sort((a, b) => b._onQueue - a._onQueue);
      tableData.forEach((row, index) => { row.onQueueRank = index + 1; });
      
      // For ACW, lower is better
      tableData.sort((a, b) => a._acw - b._acw);
      tableData.forEach((row, index) => { row.acwRank = index + 1; });
      
      // For interacting time, higher is better
      tableData.sort((a, b) => b._interactingTime - a._interactingTime);
      tableData.forEach((row, index) => { row.interactingTimeRank = index + 1; });
      
      // Calculate overall score (sum of ranks, lower is better)
      tableData.forEach(row => {
        row.overallScore = row.answerRateRank + row.talkTimeRank + row.onQueueRank + row.acwRank + row.interactingTimeRank;
      });
      
      // Calculate overall rank
      tableData.sort((a, b) => a.overallScore - b.overallScore);
      tableData.forEach((row, index) => { row.overallRank = index + 1; });
      
      // Sort by name for display
      tableData.sort((a, b) => a.name.localeCompare(b.name));
      
      // Define columns
      const columns = [
        { title: "Team Member", data: "name" },
        { 
          title: "Answer Rate", 
          data: "answerRate",
          render: function(data, type, row) {
            if (type === 'display') {
              const statusClass = getStatusClass(row.answerRateStatus);
              const rank = `<span class="badge badge-light">#${row.answerRateRank}</span>`;
              return `<span class="${statusClass}">${data}</span> ${rank}`;
            }
            return data;
          }
        },
        { 
          title: "Talk Time", 
          data: "talkTime",
          render: function(data, type, row) {
            if (type === 'display') {
              const statusClass = getStatusClass(row.talkTimeStatus);
              const rank = `<span class="badge badge-light">#${row.talkTimeRank}</span>`;
              return `<span class="${statusClass}">${data}</span> ${rank}`;
            }
            return data;
          }
        },
        { 
          title: "ACW %", 
          data: "acw",
          render: function(data, type, row) {
            if (type === 'display') {
              const statusClass = getStatusClass(row.acwStatus);
              const rank = `<span class="badge badge-light">#${row.acwRank}</span>`;
              return `<span class="${statusClass}">${data}</span> ${rank}`;
            }
            return data;
          }
        },
        { 
          title: "On Queue %", 
          data: "onQueue",
          render: function(data, type, row) {
            if (type === 'display') {
              const statusClass = getStatusClass(row.onQueueStatus);
              const rank = `<span class="badge badge-light">#${row.onQueueRank}</span>`;
              return `<span class="${statusClass}">${data}</span> ${rank}`;
            }
            return data;
          }
        },
        { 
          title: "Interacting Time", 
          data: "interactingTime",
          render: function(data, type, row) {
            if (type === 'display') {
              const statusClass = getStatusClass(row.interactingTimeStatus);
              const rank = `<span class="badge badge-light">#${row.interactingTimeRank}</span>`;
                            return `<span class="${statusClass}">${data}</span> ${rank}`;
            }
            return data;
          }
        },
        { 
          title: "Overall Rank", 
          data: "overallRank",
          render: function(data, type, row) {
            if (type === 'display') {
              let badgeClass = 'badge-secondary';
              
              // Top 3 get special badges
              if (data === 1) {
                badgeClass = 'badge-success';
              } else if (data === 2) {
                badgeClass = 'badge-primary';
              } else if (data === 3) {
                badgeClass = 'badge-info';
              }
              
              return `<span class="badge ${badgeClass}">#${data}</span>`;
            }
            return data;
          }
        }
      ];
      
      // Create and show the table
      createDataTable(tableData, columns);
      
      // Show the results card
      document.getElementById('reportResultsCard').style.display = 'block';
      
      // Hide predefined reports section
      document.getElementById('predefinedReports').style.display = 'none';
    }
    
    // Generate trend analysis report
    function generateTrendAnalysisReport(data) {
      // Set report title
      document.getElementById('reportTitle').innerHTML = '<i class="fas fa-chart-line text-primary mr-2"></i> Trend Analysis Report';
      
      // Create summary
      let summaryHtml = `
        <div class="alert alert-info">
          <h5><i class="fas fa-info-circle mr-2"></i> Trend Analysis Report Summary</h5>
          <p><strong>Period:</strong> ${formatDate(data.dateRange.start)} to ${formatDate(data.dateRange.end)}</p>
          <p><strong>Timeframe:</strong> Weekly trends analysis</p>
        </div>
      `;
      
      document.getElementById('reportSummary').innerHTML = summaryHtml;
      
      // Prepare table data
      const tableData = [];
      
      // Define metrics to analyze
      const metrics = [
        { key: 'answerRate', label: 'Answer Rate', unit: '%' },
        { key: 'averageTalkTime', label: 'Average Talk Time', unit: ' min' },
        { key: 'acwPercentage', label: 'ACW Percentage', unit: '%' },
        { key: 'onQueuePercentage', label: 'On Queue Percentage', unit: '%' },
        { key: 'interactingTime', label: 'Interacting Time', unit: ' hrs' }
      ];
      
      // Get weekly trend data
      const weeklyTrends = data.weeklyTrends;
      
      if (weeklyTrends) {
        metrics.forEach(function(metric) {
          const metricData = weeklyTrends[metric.key];
          
          if (metricData) {
            // Get weeks in chronological order
            const weeks = Object.keys(metricData).sort();
            
            if (weeks.length >= 2) {
              // Get first and last week
              const firstWeek = weeks[0];
              const lastWeek = weeks[weeks.length - 1];
              
              // Calculate trend
              const startValue = metricData[firstWeek].average;
              const endValue = metricData[lastWeek].average;
              const change = endValue - startValue;
              const percentChange = ((endValue - startValue) / startValue) * 100;
              
              // Create row for this metric
              const row = {
                metric: metric.label,
                firstWeek: formatWeek(firstWeek),
                firstValue: startValue.toFixed(2) + metric.unit,
                lastWeek: formatWeek(lastWeek),
                lastValue: endValue.toFixed(2) + metric.unit,
                change: (change >= 0 ? '+' : '') + change.toFixed(2) + metric.unit,
                percentChange: (percentChange >= 0 ? '+' : '') + percentChange.toFixed(2) + '%',
                direction: change >= 0 ? 'up' : 'down',
                improved: isMetricImproved(metric.key, change)
              };
              
              tableData.push(row);
            }
          }
        });
      }
      
      // Define columns
      const columns = [
        { title: "Metric", data: "metric" },
        { title: "Start Period", data: "firstWeek" },
        { title: "Start Value", data: "firstValue" },
        { title: "End Period", data: "lastWeek" },
        { title: "End Value", data: "lastValue" },
        { title: "Change", data: "change" },
        { 
          title: "% Change", 
          data: "percentChange",
          render: function(data, type, row) {
            if (type === 'display') {
              const iconClass = row.direction === 'up' ? 'fa-arrow-up' : 'fa-arrow-down';
              const colorClass = row.improved ? 'text-success' : 'text-danger';
              
              return `<span class="${colorClass}"><i class="fas ${iconClass} mr-1"></i>${data}</span>`;
            }
            return data;
          }
        },
        { 
          title: "Status", 
          data: "improved",
          render: function(data, type, row) {
            if (type === 'display') {
              if (data) {
                return '<span class="badge badge-success">Improved</span>';
              } else {
                return '<span class="badge badge-danger">Declined</span>';
              }
            }
            return data;
          }
        }
      ];
      
      // Create and show the table
      createDataTable(tableData, columns);
      
      // Show the results card
      document.getElementById('reportResultsCard').style.display = 'block';
      
      // Hide predefined reports section
      document.getElementById('predefinedReports').style.display = 'none';
    }
    
    // Generate flagged members report
    function generateFlaggedMembersReport(data) {
      // Set report title
      document.getElementById('reportTitle').innerHTML = '<i class="fas fa-exclamation-triangle text-danger mr-2"></i> Flagged Team Members Report';
      
      // Create summary
      let summaryHtml = `
        <div class="alert alert-info">
          <h5><i class="fas fa-info-circle mr-2"></i> Flagged Team Members Report Summary</h5>
          <p><strong>Period:</strong> ${formatDate(data.dateRange.start)} to ${formatDate(data.dateRange.end)}</p>
          <p><strong>Total Flagged Members:</strong> ${data.flaggedMembers.length} out of ${data.totalTeamMembers}</p>
        </div>
      `;
      
      if (data.flaggedMembers.length === 0) {
        summaryHtml += `
          <div class="alert alert-success">
            <h5><i class="fas fa-check-circle mr-2"></i> Great News!</h5>
            <p>No team members are currently flagged for critical performance issues.</p>
          </div>
        `;
      } else {
        summaryHtml += `
          <div class="alert alert-danger">
            <h5><i class="fas fa-exclamation-circle mr-2"></i> Action Required</h5>
            <p>The following team members require attention due to metrics falling below critical thresholds.</p>
          </div>
        `;
      }
      
      document.getElementById('reportSummary').innerHTML = summaryHtml;
      
      // Prepare table data
      const tableData = [];
      
      // Loop through flagged members
      data.flaggedMembers.forEach(function(member) {
        // Get critical metrics
        const criticalMetrics = [];
        
        Object.keys(member.averages).forEach(function(key) {
          const avg = member.averages[key];
          if (avg.status === 'critical') {
            let metricLabel = '';
            switch (key) {
              case 'answerRate': metricLabel = 'Answer Rate'; break;
              case 'averageTalkTime': metricLabel = 'Talk Time'; break;
              case 'acwPercentage': metricLabel = 'ACW %'; break;
              case 'onQueuePercentage': metricLabel = 'On Queue %'; break;
              case 'offQueuePercentage': metricLabel = 'Off Queue %'; break;
              case 'interactingTime': metricLabel = 'Interacting Time'; break;
              default: metricLabel = key;
            }
            
            criticalMetrics.push({
              key: key,
              label: metricLabel,
              value: avg.average,
              goal: getMetricGoal(key)
            });
          }
        });
        
        // Create a row for each flagged member
        const row = {
          name: member.name,
          email: member.email,
          criticalCount: criticalMetrics.length,
          criticalMetrics: criticalMetrics.map(m => m.label).join(', '),
          worstMetric: criticalMetrics.length > 0 ? criticalMetrics[0].label : '',
          worstValue: criticalMetrics.length > 0 ? formatMetricValue(criticalMetrics[0].key, criticalMetrics[0].value) : '',
          worstGoal: criticalMetrics.length > 0 ? criticalMetrics[0].goal : '',
          trend: member.averages[criticalMetrics[0]?.key]?.trend || 0
        };
        
        tableData.push(row);
      });
      
      // Define columns
      const columns = [
        { title: "Team Member", data: "name" },
        { title: "Email", data: "email" },
        { 
          title: "Critical Metrics", 
          data: "criticalCount",
          render: function(data, type, row) {
            if (type === 'display') {
              return `<span class="badge badge-danger">${data}</span> ${row.criticalMetrics}`;
            }
            return data;
          }
        },
        { 
          title: "Worst Metric", 
          data: "worstMetric" 
        },
        { 
          title: "Current Value", 
          data: "worstValue",
          render: function(data, type, row) {
            if (type === 'display' && data) {
              return `<span class="text-danger">${data}</span>`;
            }
            return data;
          }
        },
        { title: "Goal", data: "worstGoal" },
        { 
          title: "Trend", 
          data: "trend",
          render: function(data, type, row) {
            if (type === 'display') {
              const value = parseFloat(data);
              let icon = '';
              let colorClass = '';
              
              if (value > 0) {
                icon = '<i class="fas fa-arrow-up mr-1"></i>';
                colorClass = 'text-success';
              } else if (value < 0) {
                icon = '<i class="fas fa-arrow-down mr-1"></i>';
                colorClass = 'text-danger';
              } else {
                icon = '<i class="fas fa-equals mr-1"></i>';
                colorClass = 'text-secondary';
              }
              
              return `<span class="${colorClass}">${icon}${value.toFixed(2)}%</span>`;
            }
            return data;
          }
        },
        { 
          title: "Action", 
          data: null,
          render: function(data, type, row) {
            if (type === 'display') {
              return `
                <button class="btn btn-sm btn-primary" onclick="alert('Would schedule coaching session with ${row.name}')">
                  <i class="fas fa-user-plus"></i> Schedule Coaching
                </button>
              `;
            }
            return '';
          }
        }
      ];
      
      // Create and show the table
      createDataTable(tableData, columns);
      
      // Show the results card
      document.getElementById('reportResultsCard').style.display = 'block';
      
      // Hide predefined reports section
      document.getElementById('predefinedReports').style.display = 'none';
    }
    
    // Generate call volume report
    function generateCallVolumeReport(data) {
      // Set report title
      document.getElementById('reportTitle').innerHTML = '<i class="fas fa-phone-alt text-primary mr-2"></i> Call Volume Analysis Report';
      
      // Prepare daily call data
      const callsByDate = {};
      
      Object.values(data.teamMembers).forEach(member => {
        member.metrics.forEach(metric => {
          const date = new Date(metric.date).toISOString().split('T')[0];
          
          if (!callsByDate[date]) {
            callsByDate[date] = {
              date: date,
              offered: 0,
              accepted: 0,
              answerRate: 0,
              avgTalkTime: 0,
              talkTimeCount: 0,
              totalTalkTime: 0
            };
          }
          
          callsByDate[date].offered += metric.callsOffered || 0;
          callsByDate[date].accepted += metric.callsAccepted || 0;
          
          if (metric.averageTalkTime) {
            callsByDate[date].totalTalkTime += metric.averageTalkTime;
            callsByDate[date].talkTimeCount++;
          }
        });
      });
      
      // Calculate derived metrics
      Object.values(callsByDate).forEach(day => {
        if (day.offered > 0) {
          day.answerRate = (day.accepted / day.offered) * 100;
        }
        
        if (day.talkTimeCount > 0) {
          day.avgTalkTime = day.totalTalkTime / day.talkTimeCount;
        }
        
        // Format the date
        const date = new Date(day.date);
        day.formattedDate = date.toLocaleDateString();
        
        // Get day of week
        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        day.dayOfWeek = days[date.getDay()];
      });
      
      // Create summary
      let totalOffered = 0;
      let totalAccepted = 0;
      let totalTalkTime = 0;
      let talkTimeCount = 0;
      
      Object.values(callsByDate).forEach(day => {
        totalOffered += day.offered;
        totalAccepted += day.accepted;
        totalTalkTime += day.totalTalkTime;
        talkTimeCount += day.talkTimeCount;
      });
      
      const overallAnswerRate = totalOffered > 0 ? (totalAccepted / totalOffered) * 100 : 0;
      const overallAvgTalkTime = talkTimeCount > 0 ? totalTalkTime / talkTimeCount : 0;
      
      let summaryHtml = `
        <div class="alert alert-info">
          <h5><i class="fas fa-info-circle mr-2"></i> Call Volume Analysis Summary</h5>
          <p><strong>Period:</strong> ${formatDate(data.dateRange.start)} to ${formatDate(data.dateRange.end)}</p>
          <p><strong>Total Calls Offered:</strong> ${totalOffered}</p>
          <p><strong>Total Calls Accepted:</strong> ${totalAccepted}</p>
          <p><strong>Overall Answer Rate:</strong> ${overallAnswerRate.toFixed(2)}%</p>
          <p><strong>Overall Average Talk Time:</strong> ${overallAvgTalkTime.toFixed(2)} min</p>
        </div>
      `;
      
      document.getElementById('reportSummary').innerHTML = summaryHtml;
      
      // Convert to array and sort by date
      const tableData = Object.values(callsByDate).sort((a, b) => a.date.localeCompare(b.date));
      
      // Define columns
      const columns = [
        { title: "Date", data: "formattedDate" },
        { title: "Day", data: "dayOfWeek" },
        { title: "Calls Offered", data: "offered" },
        { title: "Calls Accepted", data: "accepted" },
        { 
          title: "Answer Rate", 
          data: "answerRate",
          render: function(data, type, row) {
            if (type === 'display') {
              let colorClass = 'text-danger';
              if (data >= 95) {
                colorClass = 'text-success';
              } else if (data >= 90) {
                colorClass = 'text-warning';
              }
              
              return `<span class="${colorClass}">${data.toFixed(2)}%</span>`;
            }
            return data;
          }
        },
        { 
          title: "Avg Talk Time", 
          data: "avgTalkTime",
          render: function(data, type, row) {
            if (type === 'display') {
              let colorClass = 'text-danger';
              if (data >= 15 && data <= 20) {
                colorClass = 'text-success';
              } else if ((data >= 10 && data < 15) || (data > 20 && data <= 25)) {
                colorClass = 'text-warning';
              }
              
              return `<span class="${colorClass}">${data.toFixed(2)} min</span>`;
            }
            return data;
          }
        }
      ];
      
      // Create and show the table
      createDataTable(tableData, columns);
      
      // Show the results card
      document.getElementById('reportResultsCard').style.display = 'block';
      
      // Hide predefined reports section
      document.getElementById('predefinedReports').style.display = 'none';
    }
    
    // Generate custom report with user-defined parameters
    function generateCustomReportData(data, reportName, selectedMetrics, grouping, sortBy, showGoals, showStatus, flaggedOnly) {
      // Set report title
      document.getElementById('reportTitle').innerHTML = '<i class="fas fa-cog text-primary mr-2"></i> ' + reportName;
      
      // Create summary
      let summaryHtml = `
        <div class="alert alert-info">
          <h5><i class="fas fa-info-circle mr-2"></i> Custom Report Summary</h5>
          <p><strong>Period:</strong> ${formatDate(data.dateRange.start)} to ${formatDate(data.dateRange.end)}</p>
          <p><strong>Metrics:</strong> ${selectedMetrics.map(getMetricLabel).join(', ')}</p>
          <p><strong>Grouping:</strong> ${getGroupingLabel(grouping)}</p>
        </div>
      `;
      
      document.getElementById('reportSummary').innerHTML = summaryHtml;
      
      // Prepare table data based on grouping
      let tableData = [];
      
      if (grouping === 'team_member') {
        // Group by team member
        Object.values(data.teamMembers).forEach(member => {
          // Skip if flagged only and member is not flagged
          if (flaggedOnly) {
            let isFlagged = false;
            Object.keys(member.averages).forEach(key => {
              if (member.averages[key].status === 'critical') {
                isFlagged = true;
              }
            });
            
            if (!isFlagged) {
              return;
            }
          }
          
          const row = {
            name: member.name,
            email: member.email
          };
          
          // Add selected metrics
          selectedMetrics.forEach(metric => {
            const avg = member.averages[metric];
            if (avg) {
              row[metric] = formatMetricValue(metric, avg.average);
              
              if (showStatus) {
                row[metric + '_status'] = avg.status;
              }
              
              if (showGoals) {
                row[metric + '_goal'] = getMetricGoal(metric);
              }
            } else {
              row[metric] = 'N/A';
              if (showStatus) {
                row[metric + '_status'] = 'N/A';
              }
              if (showGoals) {
                row[metric + '_goal'] = getMetricGoal(metric);
              }
            }
          });
          
          tableData.push(row);
        });
      } else if (grouping === 'date' || grouping === 'week' || grouping === 'month') {
        // Group by time period
        const timeData = {};
        
        // Collect all metrics by time period
        Object.values(data.teamMembers).forEach(member => {
          member.metrics.forEach(metric => {
            let key;
            const date = new Date(metric.date);
            
            if (grouping === 'date') {
              key = date.toISOString().split('T')[0];
            } else if (grouping === 'week') {
              const weekNumber = getWeekNumber(date);
              key = `${date.getFullYear()}-W${weekNumber}`;
            } else { // month
              key = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;
            }
            
            if (!timeData[key]) {
              timeData[key] = {
                period: key,
                formattedPeriod: formatPeriod(key, grouping),
                counts: {},
                totals: {}
              };
              
              selectedMetrics.forEach(m => {
                timeData[key].counts[m] = 0;
                timeData[key].totals[m] = 0;
              });
            }
            
            // Add metrics
            selectedMetrics.forEach(m => {
              if (metric[m] !== undefined && metric[m] !== null) {
                timeData[key].totals[m] += parseFloat(metric[m]);
                timeData[key].counts[m]++;
              }
            });
          });
        });
        
        // Calculate averages
        Object.values(timeData).forEach(period => {
          selectedMetrics.forEach(m => {
            if (period.counts[m] > 0) {
              period[m] = formatMetricValue(m, period.totals[m] / period.counts[m]);
            } else {
              period[m] = 'N/A';
            }
          });
        });
        
        // Convert to array and sort by period
        tableData = Object.values(timeData).sort((a, b) => a.period.localeCompare(b.period));
      }
      
      // Define columns based on grouping and selected metrics
      const columns = [];
      
      if (grouping === 'team_member') {
        columns.push({ title: "Team Member", data: "name" });
        
        selectedMetrics.forEach(metric => {
          const metricColumn = {
            title: getMetricLabel(metric),
            data: metric,
            render: function(data, type, row) {
              if (type === 'display' && showStatus && row[metric + '_status'] !== 'N/A') {
                const statusClass = getStatusClass(row[metric + '_status']);
                let html = `<span class="${statusClass}">${data}</span>`;
                
                if (showGoals) {
                  html += ` <small class="text-muted">(Goal: ${row[metric + '_goal']})</small>`;
                }
                
                return html;
              }
              return data;
            }
          };
          
          columns.push(metricColumn);
        });
      } else {
        columns.push({ 
          title: getGroupingLabel(grouping), 
          data: "formattedPeriod" 
        });
        
        selectedMetrics.forEach(metric => {
          columns.push({
            title: getMetricLabel(metric),
            data: metric
          });
        });
      }
      
      // Create and show the table
      createDataTable(tableData, columns);
      
      // Show the results card
      document.getElementById('reportResultsCard').style.display = 'block';
      
      // Hide predefined reports section
      document.getElementById('predefinedReports').style.display = 'none';
    }
    
    // Create DataTable with the provided data and columns
    function createDataTable(data, columns) {
      // Destroy existing DataTable if it exists
      if (dataTable) {
        dataTable.destroy();
      }
      
      // Clear table headers and body
      const thead = document.querySelector('#reportTable thead tr');
      const tbody = document.querySelector('#reportTable tbody');
      
      thead.innerHTML = '';
      tbody.innerHTML = '';
      
      // Add column headers
      columns.forEach(column => {
        const th = document.createElement('th');
        th.textContent = column.title;
        thead.appendChild(th);
      });
      
      // Initialize DataTable
      dataTable = $('#reportTable').DataTable({
        data: data,
        columns: columns,
        responsive: true,
        dom: 'Bfrtip',
        buttons: [
          'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        pageLength: 25,
        language: {
          search: "Filter results:",
          lengthMenu: "Show _MENU_ entries per page",
          info: "Showing _START_ to _END_ of _TOTAL_ entries",
          infoEmpty: "Showing 0 to 0 of 0 entries",
          infoFiltered: "(filtered from _MAX_ total entries)"
        }
      });
    }
    
    // Export metrics data
    function exportMetricsData() {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Preparing export...';
      
      // Get current filters
      const dateRangeFilter = document.getElementById('dateRangeFilter').value;
      const teamMemberFilter = document.getElementById('teamMemberFilter').value;
      
      // Prepare date range
      let startDate = null;
      let endDate = new Date(); // Today
      
      if (dateRangeFilter === 'custom') {
        startDate = new Date(document.getElementById('startDateFilter').value);
        endDate = new Date(document.getElementById('endDateFilter').value);
      } else {
        // Calculate start date based on selected range
        startDate = new Date();
        startDate.setDate(startDate.getDate() - parseInt(dateRangeFilter));
      }
      
      // Prepare filter options
      const options = {
        startDate: startDate,
        endDate: endDate
      };
      
      if (teamMemberFilter !== 'all') {
        options.teamMemberEmail = teamMemberFilter;
      }
      
      // Call server function to export data
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Export successful! Opening the exported file...', 'success');
            
            // Open the exported file
            window.open(result.url, '_blank');
          } else {
            showAlert('Error exporting metrics: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .exportMetrics(options);
    }
    
    // Export the current report
    function exportReport() {
      if (dataTable) {
        dataTable.button('.buttons-excel').trigger();
      }
    }
    
    // Print the current report
    function printReport() {
      if (dataTable) {
        dataTable.button('.buttons-print').trigger();
      }
    }
    
    // Format date
    function formatDate(dateObj) {
      if (!dateObj) return '';
      
      const date = new Date(dateObj);
      return date.toLocaleDateString();
    }
    
    // Format week number
    function formatWeek(weekString) {
      if (!weekString) return '';
      
      const parts = weekString.split('-');
      const year = parts[0];
      const week = parts[1].substring(1); // Remove 'W' prefix
      
      return `Week ${week}, ${year}`;
    }
    
    // Format period based on grouping
    function formatPeriod(period, grouping) {
      if (!period) return '';
      
      if (grouping === 'date') {
        return formatDate(period);
      } else if (grouping === 'week') {
        return formatWeek(period);
      } else if (grouping === 'month') {
        const parts = period.split('-');
        const year = parts[0];
        const month = parts[1];
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        
        return `${monthNames[parseInt(month) - 1]} ${year}`;
      }
      
      return period;
    }
    
    // Get status class for display
    function getStatusClass(status) {
      switch(status) {
        case 'normal':
          return 'text-success';
        case 'warning':
          return 'text-warning';
        case 'critical':
          return 'text-danger';
        default:
          return '';
      }
    }
    
    // Get the week number of the year for a date
    function getWeekNumber(date) {
      const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
      const dayNum = d.getUTCDay() || 7;
      d.setUTCDate(d.getUTCDate() + 4 - dayNum);
      const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
      return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
    }
    
    // Get average percentage of team members meeting goals
    function getAverageGoalMeetingPercentage(data) {
      if (!data || !data.teamAverages) return 0;
      
      let meetingGoalCount = 0;
      let totalCount = 0;
      
      // Count metrics meeting goals across all tracked metrics
      const metrics = ['answerRate', 'averageTalkTime', 'acwPercentage', 'onQueuePercentage', 'interactingTime'];
      
      metrics.forEach(key => {
        if (data.teamAverages[key]) {
          meetingGoalCount += data.teamAverages[key].meetingGoal;
          totalCount += data.teamAverages[key].count;
        }
      });
      
      if (totalCount === 0) return 0;
      
      return Math.round((meetingGoalCount / totalCount) * 100);
    }
    
    // Get average percentage of team members in warning range
    function getAverageWarningPercentage(data) {
      if (!data || !data.teamAverages) return 0;
      
      let warningCount = 0;
      let totalCount = 0;
      
      // Count metrics in warning across all tracked metrics
      const metrics = ['answerRate', 'averageTalkTime', 'acwPercentage', 'onQueuePercentage', 'interactingTime'];
      
      metrics.forEach(key => {
        if (data.teamAverages[key]) {
          warningCount += data.teamAverages[key].belowWarning;
          totalCount += data.teamAverages[key].count;
        }
      });
      
      if (totalCount === 0) return 0;
      
      return Math.round((warningCount / totalCount) * 100);
    }
    
    // Get average percentage of team members below critical threshold
    function getAverageCriticalPercentage(data) {
      if (!data || !data.teamAverages) return 0;
      
      let criticalCount = 0;
      let totalCount = 0;
      
      // Count metrics below critical threshold across all tracked metrics
      const metrics = ['answerRate', 'averageTalkTime', 'acwPercentage', 'onQueuePercentage', 'interactingTime'];
      
      metrics.forEach(key => {
        if (data.teamAverages[key]) {
          criticalCount += data.teamAverages[key].belowCritical;
          totalCount += data.teamAverages[key].count;
        }
      });
      
      if (totalCount === 0) return 0;
      
      return Math.round((criticalCount / totalCount) * 100);
    }
    
    // Format metric value with appropriate unit
    function formatMetricValue(metricKey, value) {
      if (value === undefined || value === null) return 'N/A';
      
      switch(metricKey) {
        case 'answerRate':
        case 'acwPercentage':
        case 'onQueuePercentage':
        case 'offQueuePercentage':
          return value.toFixed(2) + '%';
        case 'averageTalkTime':
          return value.toFixed(2) + ' min';
        case 'interactingTime':
          return value.toFixed(2) + ' hrs';
        case 'callsOffered':
        case 'callsAccepted':
          return Math.round(value);
        default:
          return value.toString();
      }
    }
    
    // Get metric goal text
    function getMetricGoal(metricKey) {
      const goal = metricGoals[metricKey];
      
      if (!goal) {
        switch(metricKey) {
          case 'answerRate':
            return '≥ 95%';
          case 'averageTalkTime':
            return '15-20 min';
          case 'acwPercentage':
            return '≤ 5%';
          case 'onQueuePercentage':
            return '≥ 65%';
          case 'offQueuePercentage':
            return '≤ 35%';
          case 'interactingTime':
            return '4-6 hrs';
          default:
            return 'N/A';
        }
      }
      
      if (metricKey === 'answerRate' || metricKey === 'onQueuePercentage' || metricKey === 'interactingTime') {
        // Higher is better
        return '≥ ' + goal.minValue + (metricKey === 'interactingTime' ? ' hrs' : '%');
      } else if (metricKey === 'acwPercentage' || metricKey === 'offQueuePercentage') {
        // Lower is better
        return '≤ ' + goal.maxValue + '%';
      } else if (metricKey === 'averageTalkTime') {
        // Range based
        return goal.minValue + '-' + goal.maxValue + ' min';
      }
      
      return 'N/A';
    }
    
    // Get human-readable metric label
    function getMetricLabel(metricKey) {
      switch(metricKey) {
        case 'answerRate':
          return 'Answer Rate';
        case 'averageTalkTime':
          return 'Average Talk Time';
        case 'acwPercentage':
          return 'ACW Percentage';
        case 'onQueuePercentage':
          return 'On Queue Percentage';
        case 'offQueuePercentage':
          return 'Off Queue Percentage';
        case 'interactingTime':
          return 'Interacting Time';
        case 'callsOffered':
          return 'Calls Offered';
        case 'callsAccepted':
          return 'Calls Accepted';
        default:
          return metricKey;
      }
    }
    
    // Get human-readable grouping label
    function getGroupingLabel(grouping) {
      switch(grouping) {
        case 'team_member':
          return 'Team Member';
        case 'date':
          return 'Date';
        case 'week':
          return 'Week';
        case 'month':
          return 'Month';
        default:
          return grouping;
      }
    }
    
    // Determine if a metric change represents an improvement
    function isMetricImproved(metricKey, change) {
      switch(metricKey) {
        case 'answerRate':
        case 'onQueuePercentage':
        case 'interactingTime':
          // Higher is better
          return change > 0;
        case 'acwPercentage':
        case 'offQueuePercentage':
          // Lower is better
          return change < 0;
        case 'averageTalkTime':
          // Closer to ideal (17.5 min) is better
          return Math.abs(15 - change) < Math.abs(15);
        default:
          return change > 0;
      }
    }
    
    // Show alert message
    function showAlert(message, type) {
      const alertContainer = document.getElementById('alertContainer');
      const alertMessage = document.getElementById('alertMessage');
      
      alertMessage.textContent = message;
      alertMessage.className = `alert alert-${type}`;
      alertContainer.style.display = 'block';
      
      // Auto-hide after 5 seconds
      setTimeout(function() {
        alertContainer.style.display = 'none';
      }, 5000);
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Metrics Export</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css for animations -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --shadow-lg: 0 1rem 3rem rgba(0,0,0,.175);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .container-fluid {
      padding: 30px !important;
    }
    
    /* Header bar */
    .system-info {
      background-color: var(--gray-800);
      color: white;
      padding: 8px 15px;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }
    
    .system-info p {
      margin: 0;
    }
    
    /* Page header */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .page-title i {
      color: var(--primary);
      margin-right: 12px;
    }
    
    /* Cards */
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.75rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
      overflow: hidden;
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Export options card */
    .export-option-card {
      border-radius: 0.75rem;
      box-shadow: var(--shadow-sm);
      background: #fff;
      margin-bottom: 20px;
      transition: var(--transition);
      cursor: pointer;
      border: 2px solid transparent;
    }
    
    .export-option-card:hover {
      transform: translateY(-5px);
      border-color: var(--primary-light);
    }
    
    .export-option-card.selected {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(78, 115, 223, 0.25);
    }
    
    .export-option-header {
      padding: 15px 20px;
      border-bottom: 1px solid var(--gray-200);
      display: flex;
      align-items: center;
    }
    
    .export-option-icon {
      font-size: 1.5rem;
      margin-right: 15px;
      color: var(--primary);
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: rgba(78, 115, 223, 0.1);
      border-radius: 50%;
    }
    
    .export-option-title {
      font-weight: 600;
      font-size: 1.1rem;
      margin: 0;
    }
    
    .export-option-content {
      padding: 15px 20px;
    }
    
    .export-option-description {
      color: var(--gray-600);
      margin-bottom: 0;
    }
    
    /* Buttons */
    .btn {
      border-radius: 10px;
      padding: 8px 16px;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
    }
    
    .btn i {
      margin-right: 8px;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-light {
      background: var(--gray-100);
      color: var(--gray-700);
      border-color: var(--gray-100);
    }
    
    .btn-light:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    /* Form controls */
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      font-weight: 600;
      margin-bottom: 8px;
      display: block;
    }
    
    .form-control {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    .custom-checkbox {
      margin-bottom: 10px;
    }
    
    /* Alert messages */
    .alert {
      border-radius: 10px;
      padding: 15px 20px;
      margin-bottom: 20px;
      border: none;
    }
    
    .alert-success {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .alert-danger {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--gray-200);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 600;
      color: var(--primary);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Export history list */
    .export-history-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 12px 15px;
      border-bottom: 1px solid var(--gray-200);
      transition: var(--transition);
    }
    
    .export-history-item:hover {
      background-color: var(--gray-100);
    }
    
    .export-history-item:last-child {
      border-bottom: none;
    }
    
    .export-history-details {
      flex: 1;
    }
    
    .export-history-title {
      font-weight: 600;
      margin: 0;
    }
    
    .export-history-meta {
      font-size: 0.85rem;
      color: var(--gray-600);
      margin: 5px 0 0;
    }
    
    .export-history-actions {
      display: flex;
      gap: 10px;
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .container-fluid {
        padding: 15px !important;
      }
      
      .page-header {
        padding: 15px 20px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .page-actions {
        margin-top: 15px;
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <!-- System Info Bar - Using dynamic loading, no hardcoded values -->
  <div class="system-info">
    <p>Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): <span id="currentDate">Loading...</span></p>
    <p>Current User: <span id="currentUser">Loading...</span></p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading...</div>
  </div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <h1 class="page-title">
        <i class="fas fa-download"></i> Metrics Export
      </h1>
      <div class="page-actions">
        <button id="enterMetricsBtn" class="btn btn-light mr-2">
          <i class="fas fa-keyboard"></i> Enter Metrics
        </button>
        <button id="viewDashboardBtn" class="btn btn-light mr-2">
          <i class="fas fa-tachometer-alt"></i> View Dashboard
        </button>
        <button id="viewReportsBtn" class="btn btn-light">
          <i class="fas fa-chart-bar"></i> View Reports
        </button>
      </div>
    </div>
    
    <!-- Alert Messages -->
    <div id="alertContainer" style="display: none;">
      <div id="alertMessage" class="alert" role="alert"></div>
    </div>
    
    <div class="row">
      <!-- Export Options Column -->
      <div class="col-lg-7">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-cog text-primary mr-2"></i> Export Options
            </h5>
          </div>
          <div class="card-body">
            <div class="row mb-4">
              <div class="col-md-6">
                <div class="export-option-card selected" data-format="excel" id="excelOption">
                  <div class="export-option-header">
                    <div class="export-option-icon">
                      <i class="fas fa-file-excel"></i>
                    </div>
                    <h5 class="export-option-title">Excel Spreadsheet</h5>
                  </div>
                  <div class="export-option-content">
                    <p class="export-option-description">Export to Microsoft Excel (.xlsx) format with multiple sheets and formatting.</p>
                  </div>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="export-option-card" data-format="csv" id="csvOption">
                  <div class="export-option-header">
                    <div class="export-option-icon">
                      <i class="fas fa-file-csv"></i>
                    </div>
                    <h5 class="export-option-title">CSV File</h5>
                  </div>
                  <div class="export-option-content">
                    <p class="export-option-description">Export to CSV format for maximum compatibility with other systems.</p>
                  </div>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="export-option-card" data-format="pdf" id="pdfOption">
                  <div class="export-option-header">
                    <div class="export-option-icon">
                      <i class="fas fa-file-pdf"></i>
                    </div>
                    <h5 class="export-option-title">PDF Report</h5>
                  </div>
                  <div class="export-option-content">
                    <p class="export-option-description">Export to PDF format with charts and formatted tables for sharing.</p>
                  </div>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="export-option-card" data-format="gsheet" id="gsheetOption">
                  <div class="export-option-header">
                    <div class="export-option-icon">
                      <i class="fas fa-table"></i>
                    </div>
                    <h5 class="export-option-title">Google Sheet</h5>
                  </div>
                  <div class="export-option-content">
                    <p class="export-option-description">Create a new Google Sheet with metrics data and summary charts.</p>
                  </div>
                </div>
              </div>
            </div>
            
            <form id="exportForm">
              <div class="form-group">
                <label class="form-label" for="exportName">Export Name</label>
                <input type="text" class="form-control" id="exportName" placeholder="Enter a name for this export">
              </div>
              
              <div class="form-group">
                <label class="form-label">Date Range</label>
                <div class="row">
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="startDate">From</label>
                      <input type="date" class="form-control" id="startDate">
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="endDate">To</label>
                      <input type="date" class="form-control" id="endDate">
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="teamMemberFilter">Team Member</label>
                <select class="form-control" id="teamMemberFilter">
                  <option value="all" selected>All Team Members</option>
                  <!-- Team members will be loaded dynamically -->
                </select>
              </div>
              
              <div class="form-group">
                <label class="form-label">Data to Include</label>
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="includeRawData" checked>
                  <label class="custom-control-label" for="includeRawData">Raw Metrics Data</label>
                </div>
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="includeSummary" checked>
                  <label class="custom-control-label" for="includeSummary">Summary Statistics</label>
                </div>
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="includeCharts">
                  <label class="custom-control-label" for="includeCharts">Charts and Visualizations</label>
                </div>
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="includeGoals" checked>
                  <label class="custom-control-label" for="includeGoals">Goals and Performance Analysis</label>
                </div>
              </div>
              
              <div class="text-right mt-4">
                <button type="button" class="btn btn-light mr-2" id="resetForm">
                  <i class="fas fa-undo"></i> Reset
                </button>
                <button type="button" class="btn btn-primary" id="exportBtn">
                  <i class="fas fa-download"></i> Export Metrics
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Export History Column -->
      <div class="col-lg-5">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-history text-primary mr-2"></i> Recent Exports
            </h5>
            <button id="refreshHistoryBtn" class="btn btn-sm btn-light">
              <i class="fas fa-sync-alt"></i> Refresh
            </button>
          </div>
          <div class="card-body" id="exportHistoryList">
            <!-- Export history will be loaded dynamically -->
            <div class="text-center py-4">
              <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
              </div>
              <p class="mt-2">Loading export history...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Bootstrap & jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Global variables
    let selectedFormat = 'excel';
    let teamMembers = [];
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      // Load user information - NO HARDCODED VALUES
      loadUserInfo();
      
      // Set default dates (last 30 days)
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      document.getElementById('startDate').value = formatDateForInput(thirtyDaysAgo);
      document.getElementById('endDate').value = formatDateForInput(today);
      
      // Set default export name
      document.getElementById('exportName').value = 'Metrics Export ' + formatDateForInput(today);
      
      // Hide loading overlay after a short delay
      setTimeout(() => {
        document.getElementById('loadingOverlay').style.display = 'none';
      }, 500);
      
      // Load team members
      loadTeamMembers();
      
      // Load export history
      loadExportHistory();
      
      // Add event listeners
      addEventListeners();
    });
    
    // Load user information - dynamically, no hardcoded values
    function loadUserInfo() {
      google.script.run
        .withSuccessHandler(function(info) {
          document.getElementById('currentDate').textContent = info.formattedDate;
          document.getElementById('currentUser').textContent = info.username;
        })
        .withFailureHandler(function(error) {
          console.error('Error loading user info:', error);
          // Default values if there's an error
          document.getElementById('currentDate').textContent = new Date().toISOString().replace('T', ' ').split('.')[0];
          document.getElementById('currentUser').textContent = 'current_user';
        })
        .getCurrentUserInfo();
    }
    
    // Format date for input field
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }
    
    // Load team members
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(function(members) {
          teamMembers = members;
          
          // Populate team member filter dropdown
          const select = document.getElementById('teamMemberFilter');
          
          // Keep the "All Team Members" option
          select.innerHTML = '<option value="all">All Team Members</option>';
          
          members.forEach(function(member) {
            const option = document.createElement('option');
            option.value = member.email;
            option.textContent = `${member.firstName} ${member.lastName}`;
            select.appendChild(option);
          });
        })
        .withFailureHandler(function(error) {
          console.error('Error loading team members:', error);
        })
        .getTeamMembers();
    }
    
    // Load export history
    function loadExportHistory() {
      const historyList = document.getElementById('exportHistoryList');
      
      // Show loading indicator
      historyList.innerHTML = `
        <div class="text-center py-4">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
          <p class="mt-2">Loading export history...</p>
        </div>
      `;
      
      google.script.run
        .withSuccessHandler(function(exports) {
          if (exports.length === 0) {
            historyList.innerHTML = `
              <div class="text-center py-4">
                <i class="fas fa-info-circle text-info mb-3" style="font-size: 2rem;"></i>
                <p class="mb-0">No export history found. Create your first export!</p>
              </div>
            `;
            return;
          }
          
          // Sort by date (newest first)
          exports.sort((a, b) => new Date(b.date) - new Date(a.date));
          
          // Show only the 10 most recent exports
          const recentExports = exports.slice(0, 10);
          
          let html = '';
          
          recentExports.forEach(exportItem => {
            const date = new Date(exportItem.date);
            
            html += `
              <div class="export-history-item">
                <div class="export-history-details">
                  <!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Metrics Email Configuration</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css for animations -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --shadow-lg: 0 1rem 3rem rgba(0,0,0,.175);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .container-fluid {
      padding: 30px !important;
    }
    
    /* Header bar */
    .system-info {
      background-color: var(--gray-800);
      color: white;
      padding: 8px 15px;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }
    
    .system-info p {
      margin: 0;
    }
    
    /* Page header */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .page-title i {
      color: var(--primary);
      margin-right: 12px;
    }
    
    /* Cards */
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.75rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
      overflow: hidden;
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Email configuration card */
    .email-config-card {
      margin-bottom: 20px;
      border-radius: 0.75rem;
      box-shadow: var(--shadow-sm);
      background: #fff;
      border: 1px solid var(--gray-200);
      transition: var(--transition);
    }
    
    .email-config-card:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow);
    }
    
    .email-config-header {
      padding: 20px;
      border-bottom: 1px solid var(--gray-200);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .email-config-title {
      font-weight: 600;
      font-size: 1.1rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .email-config-title i {
      color: var(--primary);
      margin-right: 10px;
    }
    
    .email-config-details {
      padding: 20px;
    }
    
    .email-config-detail-row {
      display: flex;
      margin-bottom: 10px;
    }
    
    .email-config-detail-label {
      font-weight: 600;
      width: 120px;
      color: var(--gray-700);
    }
    
    .email-config-detail-value {
      flex: 1;
    }
    
    .email-config-actions {
      padding: 15px 20px;
      background-color: var(--gray-100);
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }
    
    /* Form controls */
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      font-weight: 600;
      margin-bottom: 8px;
      display: block;
    }
    
    .form-control {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    .custom-control {
      margin-bottom: 10px;
    }
    
    /* Badge classes */
    .badge-active {
      background-color: var(--success);
      color: #fff;
    }
    
    .badge-inactive {
      background-color: var(--gray-500);
      color: #fff;
    }
    
    /* Alert messages */
    .alert {
      border-radius: 10px;
      padding: 15px 20px;
      margin-bottom: 20px;
      border: none;
    }
    
    .alert-success {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .alert-danger {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--gray-200);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 600;
      color: var(--primary);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Buttons */
    .btn {
      border-radius: 10px;
      padding: 8px 16px;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
    }
    
    .btn i {
      margin-right: 8px;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-success {
      background: var(--success);
      border-color: var(--success);
    }
    
    .btn-success:hover {
      background-color: #169b6b;
      border-color: #169b6b;
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(28,200,138,.15);
    }
    
    .btn-light {
      background: var(--gray-100);
      color: var(--gray-700);
      border-color: var(--gray-100);
    }
    
    .btn-light:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    .btn-danger {
      background: var(--danger);
      border-color: var(--danger);
    }
    
    .btn-danger:hover {
      background-color: #cc3323;
      border-color: #cc3323;
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(231,74,59,.15);
    }
    
    .btn-sm {
      padding: 5px 12px;
      font-size: 0.875rem;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .container-fluid {
        padding: 15px !important;
      }
      
      .page-header {
        padding: 15px 20px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .page-actions {
        margin-top: 15px;
        width: 100%;
      }
      
      .email-config-detail-row {
        flex-direction: column;
      }
      
      .email-config-detail-label {
        width: 100%;
        margin-bottom: 5px;
      }
    }
  </style>
</head>
<body>
  <!-- System Info Bar - Using dynamic loading, no hardcoded values -->
  <div class="system-info">
    <p>Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): <span id="currentDate">Loading...</span></p>
    <p>Current User: <span id="currentUser">Loading...</span></p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading...</div>
  </div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <h1 class="page-title">
        <i class="fas fa-envelope"></i> Metrics Email Configuration
      </h1>
      <div class="page-actions">
        <button id="enterMetricsBtn" class="btn btn-light mr-2">
          <i class="fas fa-keyboard"></i> Enter Metrics
        </button>
        <button id="viewDashboardBtn" class="btn btn-light mr-2">
          <i class="fas fa-tachometer-alt"></i> View Dashboard
        </button>
        <button id="viewReportsBtn" class="btn btn-light">
          <i class="fas fa-chart-bar"></i> View Reports
        </button>
      </div>
    </div>
    
    <!-- Alert Messages -->
    <div id="alertContainer" style="display: none;">
      <div id="alertMessage" class="alert" role="alert"></div>
    </div>
    
    <div class="row">
      <!-- Email Configuration Form -->
      <div class="col-lg-6">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-cog text-primary mr-2"></i> Email Report Configuration
            </h5>
          </div>
          <div class="card-body">
            <form id="emailConfigForm">
              <div class="form-group">
                <label class="form-label" for="configName">Configuration Name</label>
                <input type="text" class="form-control" id="configName" placeholder="Daily Team Performance Report">
                <input type="hidden" id="editConfigId">
              </div>
              
              <div class="form-group">
                <label class="form-label" for="recipients">Recipients</label>
                <textarea class="form-control" id="recipients" rows="2" placeholder="Enter email addresses separated by commas"></textarea>
                <small class="form-text text-muted">Example: john@example.com, jane@example.com</small>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="frequency">Frequency</label>
                <select class="form-control" id="frequency">
                  <option value="daily">Daily</option>
                  <option value="weekly" selected>Weekly</option>
                  <option value="monthly">Monthly</option>
                  <option value="custom">Custom Schedule</option>
                </select>
              </div>
              
              <div id="customScheduleOptions" style="display: none;">
                <div class="form-group">
                  <label class="form-label">Days of Week</label>
                  <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="dayMonday">
                    <label class="custom-control-label" for="dayMonday">Monday</label>
                  </div>
                  <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="dayTuesday">
                    <label class="custom-control-label" for="dayTuesday">Tuesday</label>
                  </div>
                  <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="dayWednesday">
                    <label class="custom-control-label" for="dayWednesday">Wednesday</label>
                  </div>
                  <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="dayThursday">
                    <label class="custom-control-label" for="dayThursday">Thursday</label>
                  </div>
                  <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="dayFriday">
                    <label class="custom-control-label" for="dayFriday">Friday</label>
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="reportType">Report Type</label>
                <select class="form-control" id="reportType">
                  <option value="performance">Performance Summary</option>
                  <option value="team">Team Comparison</option>
                  <option value="flagged">Flagged Team Members</option>
                  <option value="full">Full Metrics Report</option>
                </select>
              </div>
              
              <div class="form-group">
                <label class="form-label">Options</label>
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="includeAttachment">
                  <label class="custom-control-label" for="includeAttachment">Include Spreadsheet Attachment</label>
                </div>
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="includeCharts" checked>
                  <label class="custom-control-label" for="includeCharts">Include Charts in Email</label>
                </div>
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="activeStatus" checked>
                  <label class="custom-control-label" for="activeStatus">Active</label>
                </div>
              </div>
              
              <div class="text-right mt-4">
                <button type="button" class="btn btn-light mr-2" id="cancelEditBtn" style="display: none;">
                  <i class="fas fa-times"></i> Cancel
                </button>
                <button type="button" class="btn btn-light mr-2" id="resetForm">
                  <i class="fas fa-undo"></i> Reset
                </button>
                <button type="button" class="btn btn-primary" id="saveConfigBtn">
                  <i class="fas fa-save"></i> Save Configuration
                </button>
              </div>
            </form>
          </div>
        </div>
        
        <!-- Test Email Card -->
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-paper-plane text-primary mr-2"></i> Test Email
            </h5>
          </div>
          <div class="card-body">
            <form id="testEmailForm">
              <div class="form-group">
                <label class="form-label" for="testEmail">Email Address</label>
                <input type="email" class="form-control" id="testEmail" placeholder="Enter your email address">
              </div>
              
              <div class="form-group">
                <label class="form-label" for="testReportType">Report Type</label>
                <select class="form-control" id="testReportType">
                  <option value="performance">Performance Summary</option>
                  <option value="team">Team Comparison</option>
                  <option value="flagged">Flagged Team Members</option>
                  <option value="full">Full Metrics Report</option>
                </select>
              </div>
              
              <div class="text-right">
                <button type="button" class="btn btn-primary" id="sendTestEmailBtn">
                  <i class="fas fa-paper-plane"></i> Send Test Email
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Existing Configurations -->
      <div class="col-lg-6">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-list text-primary mr-2"></i> Existing Configurations
            </h5>
            <button id="refreshConfigsBtn" class="btn btn-sm btn-light">
              <i class="fas fa-sync-alt"></i> Refresh
            </button>
          </div>
          <div class="card-body">
            <div id="configListContainer">
              <!-- Configurations will be loaded here -->
              <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
                <p class="mt-2">Loading configurations...</p>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Email Triggers Card -->
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-clock text-primary mr-2"></i> Email Triggers
            </h5>
          </div>
          <div class="card-body">
            <p>Email reports can be triggered automatically based on your configurations or manually using the buttons below.</p>
            
            <div class="d-flex flex-wrap gap-2 mt-3">
              <button class="btn btn-light mr-3 mb-3" id="runDailyReportsBtn">
                <i class="fas fa-calendar-day"></i> Run Daily Reports
              </button>
              <button class="btn btn-light mr-3 mb-3" id="runWeeklyReportsBtn">
                <i class="fas fa-calendar-week"></i> Run Weekly Reports
              </button>
              <button class="btn btn-light mb-3" id="runMonthlyReportsBtn">
                <i class="fas fa-calendar-alt"></i> Run Monthly Reports
              </button>
            </div>
            
            <div class="alert alert-info mt-3">
              <i class="fas fa-info-circle mr-2"></i> 
              To schedule automatic emails, set up a time-based trigger in the Apps Script editor.
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Bootstrap & jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Global variables
    let emailConfigurations = [];
    let isEditing = false;
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      // Load user information - NO HARDCODED VALUES
      loadUserInfo();
      
      // Hide loading overlay after a short delay
      setTimeout(() => {
        document.getElementById('loadingOverlay').style.display = 'none';
      }, 500);
      
      // Load existing configurations
      loadEmailConfigurations();
      
      // Add event listeners
      addEventListeners();
      
      // Get the user's email to prefill the test email field
      prefillUserEmail();
    });
    
    // Load user information - dynamically, no hardcoded values
    function loadUserInfo() {
      google.script.run
        .withSuccessHandler(function(info) {
          document.getElementById('currentDate').textContent = info.formattedDate;
          document.getElementById('currentUser').textContent = info.username;
        })
        .withFailureHandler(function(error) {
          console.error('Error loading user info:', error);
          // Default values if there's an error
          document.getElementById('currentDate').textContent = new Date().toISOString().replace('T', ' ').split('.')[0];
          document.getElementById('currentUser').textContent = 'current_user';
        })
        .getCurrentUserInfo();
    }
    
    // Prefill user email
    function prefillUserEmail() {
      google.script.run
        .withSuccessHandler(function(info) {
          if (info && info.email) {
            document.getElementById('testEmail').value = info.email;
          }
        })
        .getCurrentUserInfo();
    }
    
    // Load existing email configurations
    function loadEmailConfigurations() {
      const container = document.getElementById('configListContainer');
      
      // Show loading indicator
      container.innerHTML = `
        <div class="text-center py-4">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
          <p class="mt-2">Loading configurations...</p>
        </div>
      `;
      
      google.script.run
        .withSuccessHandler(function(configs) {
          emailConfigurations = configs;
          
          if (configs.length === 0) {
            container.innerHTML = `
              <div class="text-center py-4">
                <i class="fas fa-info-circle text-info mb-3" style="font-size: 2rem;"></i>
                <p class="mb-0">No email configurations found. Create your first one!</p>
              </div>
            `;
            return;
          }
          
          let html = '';
          
          configs.forEach(config => {
            let statusBadge = config.activeStatus ? 
              '<span class="badge badge-active">Active</span>' : 
              '<span class="badge badge-inactive">Inactive</span>';
            
            let lastSentText = config.lastSent ? 
              `Last sent: ${new Date(config.lastSent).toLocaleString()}` : 
              'Never sent';
            
            html += `
              <div class="email-config-card">
                <div class="email-config-header">
                  <h6 class="email-config-title">
                    <i class="fas fa-envelope"></i> ${config.configName}
                  </h6>
                  <div>
                    ${statusBadge}
                  </div>
                </div>
                <div class="email-config-details">
                  <div class="email-config-detail-row">
                    <div class="email-config-detail-label">Recipients:</div>
                    <div class="email-config-detail-value">${formatRecipients(config.recipients)}</div>
                  </div>
                  <div class="email-config-detail-row">
                    <div class="email-config-detail-label">Frequency:</div>
                    <div class="email-config-detail-value">${capitalizeFirstLetter(config.frequency)}</div>
                  </div>
                  <div class="email-config-detail-row">
                    <div class="email-config-detail-label">Report Type:</div>
                    <div class="email-config-detail-value">${getReportTypeName(config.reportType)}</div>
                  </div>
                  <div class="email-config-detail-row">
                    <div class="email-config-detail-label">Status:</div>
                    <div class="email-config-detail-value">${lastSentText}</div>
                  </div>
                </div>
                <div class="email-config-actions">
                  <button class="btn btn-sm btn-danger delete-config" data-id="${config.configName}">
                    <i class="fas fa-trash"></i> Delete
                  </button>
                  <button class="btn btn-sm btn-light edit-config" data-id="${config.configName}">
                    <i class="fas fa-edit"></i> Edit
                  </button>
                  <button class="btn btn-sm btn-primary run-config" data-id="${config.configName}">
                    <i class="fas fa-paper-plane"></i> Run Now
                  </button>
                </div>
              </div>
            `;
          });
          
          container.innerHTML = html;
          
          // Add event listeners to buttons
          document.querySelectorAll('.delete-config').forEach(button => {
            button.addEventListener('click', function() {
              const configId = this.getAttribute('data-id');
              deleteConfiguration(configId);
            });
          });
          
          document.querySelectorAll('.edit-config').forEach(button => {
            button.addEventListener('click', function() {
              const configId = this.getAttribute('data-id');
              editConfiguration(configId);
            });
          });
          
          document.querySelectorAll('.run-config').forEach(button => {
            button.addEventListener('click', function() {
              const configId = this.getAttribute('data-id');
              runConfiguration(configId);
            });
          });
        })
        .withFailureHandler(function(error) {
          container.innerHTML = `
            <div class="alert alert-danger">
              Error loading configurations: ${error}
            </div>
          `;
        })
        .getEmailReportConfigurations();
    }
    
    // Format recipients list for display
    function formatRecipients(recipients) {
      if (!recipients) return '';
      
      const emails = recipients.split(',');
      if (emails.length <= 2) {
        return recipients;
      }
      
      return emails.slice(0, 2).join(', ') + ` and ${emails.length - 2} more`;
    }
    
    // Capitalize first letter
    function capitalizeFirstLetter(string) {
      if (!string) return '';
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    // Get human-readable report type name
    function getReportTypeName(type) {
      switch(type) {
        case 'performance':
          return 'Performance Summary';
        case 'team':
          return 'Team Comparison';
        case 'flagged':
          return 'Flagged Team Members';
        case 'full':
          return 'Full Metrics Report';
        default:
          return capitalizeFirstLetter(type);
      }
    }
    
    // Add all event listeners
    function addEventListeners() {
      // Frequency change
      document.getElementById('frequency').addEventListener('change', function() {
        const customSchedule = document.getElementById('customScheduleOptions');
        if (this.value === 'custom') {
          customSchedule.style.display = 'block';
        } else {
          customSchedule.style.display = 'none';
        }
      });
      
      // Save configuration button
      document.getElementById('saveConfigBtn').addEventListener('click', saveConfiguration);
      
      // Cancel edit button
      document.getElementById('cancelEditBtn').addEventListener('click', cancelEdit);
      
      // Reset form button
      document.getElementById('resetForm').addEventListener('click', resetForm);
      
      // Refresh configurations button
      document.getElementById('refreshConfigsBtn').addEventListener('click', loadEmailConfigurations);
      
      // Send test email button
      document.getElementById('sendTestEmailBtn').addEventListener('click', sendTestEmail);
      
      // Run reports buttons
      document.getElementById('runDailyReportsBtn').addEventListener('click', function() {
        runScheduledReports('daily');
      });
      
      document.getElementById('runWeeklyReportsBtn').addEventListener('click', function() {
        runScheduledReports('weekly');
      });
      
      document.getElementById('runMonthlyReportsBtn').addEventListener('click', function() {
        runScheduledReports('monthly');
      });
      
      // Navigation buttons
      document.getElementById('enterMetricsBtn').addEventListener('click', function() {
        google.script.run.openMetricsForm();
      });
      
      document.getElementById('viewDashboardBtn').addEventListener('click', function() {
        google.script.run.openMetricsDashboard();
      });
      
      document.getElementById('viewReportsBtn').addEventListener('click', function() {
        google.script.run.openMetricsReports();
      });
    }
    
    // Save email configuration
    function saveConfiguration() {
      // Validate form
      const configName = document.getElementById('configName').value.trim();
      const recipients = document.getElementById('recipients').value.trim();
      
      if (!configName) {
        showAlert('Please enter a configuration name', 'danger');
        return;
      }
      
      if (!recipients) {
        showAlert('Please enter at least one recipient email address', 'danger');
        return;
      }
      
      // Validate email addresses
      const emails = recipients.split(',').map(email => email.trim());
      const invalidEmails = emails.filter(email => !isValidEmail(email));
      
      if (invalidEmails.length > 0) {
        showAlert(`Invalid email address(es): ${invalidEmails.join(', ')}`, 'danger');
        return;
      }
      
      // Get form values
      const frequency = document.getElementById('frequency').value;
      const reportType = document.getElementById('reportType').value;
      const includeAttachment = document.getElementById('includeAttachment').checked;
      const includeCharts = document.getElementById('includeCharts').checked;
      const activeStatus = document.getElementById('activeStatus').checked;
      
      // Get custom schedule if selected
      let schedule = frequency;
      if (frequency === 'custom') {
        const days = [];
        if (document.getElementById('dayMonday').checked) days.push('Monday');
        if (document.getElementById('dayTuesday').checked) days.push('Tuesday');
        if (document.getElementById('dayWednesday').checked) days.push('Wednesday');
        if (document.getElementById('dayThursday').checked) days.push('Thursday');
        if (document.getElementById('dayFriday').checked) days.push('Friday');
        
        if (days.length === 0) {
          showAlert('Please select at least one day for custom schedule', 'danger');
          return;
        }
        
        schedule = days.join(',');
      }
      
      // Prepare configuration object
      const config = {
        configName: configName,
        recipients: recipients,
        frequency: frequency,
        schedule: schedule,
        reportType: reportType,
        includeAttachment: includeAttachment,
        includeCharts: includeCharts,
        activeStatus: activeStatus
      };
      
      // If editing, use the original config name as ID
      if (isEditing) {
        config.originalName = document.getElementById('editConfigId').value;
      }
      
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Saving configuration...';
      
      // Save configuration
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert(result.message, 'success');
            resetForm();
            cancelEdit();
            loadEmailConfigurations();
          } else {
            showAlert('Error: ' + result.message, 'danger');
          }
        })
                .withFailureHandler(function(error) {
          console.error('Error loading export history:', error);
          document.getElementById('exportHistoryList').innerHTML = `
            <div class="alert alert-danger">
              <i class="fas fa-exclamation-circle mr-2"></i>
              Error loading export history: ${error}
            </div>
          `;
        })
        .getExportHistory();
    }
    
    // Add all event listeners
    function addEventListeners() {
      // Format selection
      document.querySelectorAll('.export-option-card').forEach(function(card) {
        card.addEventListener('click', function() {
          // Remove selected class from all cards
          document.querySelectorAll('.export-option-card').forEach(function(c) {
            c.classList.remove('selected');
          });
          
          // Add selected class to clicked card
          this.classList.add('selected');
          
          // Update selected format
          selectedFormat = this.getAttribute('data-format');
        });
      });
      
      // Export button
      document.getElementById('exportBtn').addEventListener('click', function() {
        exportMetrics();
      });
      
      // Reset form button
      document.getElementById('resetForm').addEventListener('click', function() {
        resetForm();
      });
      
      // Refresh history button
      document.getElementById('refreshHistoryBtn').addEventListener('click', function() {
        loadExportHistory();
      });
      
      // Navigation buttons
      document.getElementById('enterMetricsBtn').addEventListener('click', function() {
        google.script.run.openMetricsForm();
      });
      
      document.getElementById('viewDashboardBtn').addEventListener('click', function() {
        google.script.run.openMetricsDashboard();
      });
      
      document.getElementById('viewReportsBtn').addEventListener('click', function() {
        google.script.run.openMetricsReports();
      });
    }
    
    // Export metrics based on form options
    function exportMetrics() {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Preparing export...';
      
      // Get form values
      const exportName = document.getElementById('exportName').value || 'Metrics Export';
      const startDate = new Date(document.getElementById('startDate').value);
      const endDate = new Date(document.getElementById('endDate').value);
      const teamMemberFilter = document.getElementById('teamMemberFilter').value;
      
      // Get checkbox values
      const includeRawData = document.getElementById('includeRawData').checked;
      const includeSummary = document.getElementById('includeSummary').checked;
      const includeCharts = document.getElementById('includeCharts').checked;
      const includeGoals = document.getElementById('includeGoals').checked;
      
      // Set end date to end of the day
      endDate.setHours(23, 59, 59, 999);
      
      // Prepare export options
      const options = {
        exportName: exportName,
        startDate: startDate,
        endDate: endDate,
        format: selectedFormat,
        includeRawData: includeRawData,
        includeSummary: includeSummary,
        includeCharts: includeCharts,
        includeGoals: includeGoals
      };
      
      if (teamMemberFilter !== 'all') {
        options.teamMemberEmail = teamMemberFilter;
      }
      
      // Call server function to export data
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Export successful! Opening the exported file...', 'success');
            
            // Refresh export history
            loadExportHistory();
            
            // Open the exported file if it's a Google Sheet
            if (result.url) {
              window.open(result.url, '_blank');
            }
          } else {
            showAlert('Error exporting metrics: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .exportMetrics(options);
    }
    
    // Reset the form to defaults
    function resetForm() {
      // Reset format selection
      document.querySelectorAll('.export-option-card').forEach(function(card) {
        card.classList.remove('selected');
      });
      document.getElementById('excelOption').classList.add('selected');
      selectedFormat = 'excel';
      
      // Reset date range to last 30 days
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      document.getElementById('startDate').value = formatDateForInput(thirtyDaysAgo);
      document.getElementById('endDate').value = formatDateForInput(today);
      
      // Reset export name
      document.getElementById('exportName').value = 'Metrics Export ' + formatDateForInput(today);
      
      // Reset team member filter
      document.getElementById('teamMemberFilter').value = 'all';
      
      // Reset checkboxes
      document.getElementById('includeRawData').checked = true;
      document.getElementById('includeSummary').checked = true;
      document.getElementById('includeCharts').checked = false;
      document.getElementById('includeGoals').checked = true;
    }
    
    // Show alert message
    function showAlert(message, type) {
      const alertContainer = document.getElementById('alertContainer');
      const alertMessage = document.getElementById('alertMessage');
      
      alertMessage.textContent = message;
      alertMessage.className = `alert alert-${type}`;
      alertContainer.style.display = 'block';
      
      // Auto-hide after 5 seconds
      setTimeout(function() {
        alertContainer.style.display = 'none';
      }, 5000);
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Email Report Configuration</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css for animations -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --shadow-lg: 0 1rem 3rem rgba(0,0,0,.175);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .container-fluid {
      padding: 30px !important;
    }
    
    /* Header bar */
    .system-info {
      background-color: var(--gray-800);
      color: white;
      padding: 8px 15px;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }
    
    .system-info p {
      margin: 0;
    }
    
    /* Page header */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .page-title i {
      color: var(--primary);
      margin-right: 12px;
    }
    
    /* Cards */
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.75rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
      overflow: hidden;
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Form controls */
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      font-weight: 600;
      margin-bottom: 8px;
      display: block;
    }
    
    .form-control {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    .custom-checkbox {
      margin-bottom: 10px;
    }
    
    /* Buttons */
    .btn {
      border-radius: 10px;
      padding: 8px 16px;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
    }
    
    .btn i {
      margin-right: 8px;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-success {
      background: var(--success);
      border-color: var(--success);
    }
    
    .btn-success:hover {
      background-color: #169b6b;
      border-color: #169b6b;
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(28,200,138,.15);
    }
    
    .btn-light {
      background: var(--gray-100);
      color: var(--gray-700);
      border-color: var(--gray-100);
    }
    
    .btn-light:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    .btn-danger {
      background: var(--danger);
      border-color: var(--danger);
    }
    
    .btn-danger:hover {
      background-color: #c82333;
      border-color: #bd2130;
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(231,74,59,.15);
    }
    
    /* Tags input field */
    .tags-input-wrapper {
      position: relative;
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 5px 10px;
      background: #fff;
      transition: var(--transition);
      display: flex;
      flex-wrap: wrap;
      align-items: center;
    }
    
    .tags-input-wrapper:focus-within {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    .tag {
      display: inline-flex;
      align-items: center;
      background: var(--primary-light);
      color: #fff;
      padding: 3px 8px;
      border-radius: 15px;
      margin: 5px 5px 5px 0;
      font-size: 0.85rem;
    }
    
    .tag-close-icon {
      display: inline-block;
      width: 16px;
      height: 16px;
      background: rgba(255, 255, 255, 0.3);
      color: #fff;
      border-radius: 50%;
      text-align: center;
      line-height: 16px;
      margin-left: 8px;
      cursor: pointer;
    }
    
    .tags-input {
      flex: 1;
      border: none;
      padding: 8px 0;
      outline: none;
      font-size: 0.95rem;
      min-width: 100px;
    }
    
    /* Scheduled report card */
    .report-card {
      background: #fff;
      border-radius: 0.75rem;
      margin-bottom: 20px;
      box-shadow: var(--shadow-sm);
      border: 1px solid var(--gray-200);
      overflow: hidden;
      transition: var(--transition);
    }
    
    .report-card:hover {
      box-shadow: var(--shadow);
      transform: translateY(-3px);
    }
    
    .report-header {
      padding: 15px 20px;
      border-bottom: 1px solid var(--gray-200);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .report-title {
      font-weight: 600;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .report-title i {
      color: var(--primary);
      margin-right: 10px;
    }
    
    .report-body {
      padding: 15px 20px;
    }
    
    .report-details {
      margin-bottom: 15px;
    }
    
    .report-detail-item {
      display: flex;
      margin-bottom: 8px;
    }
    
    .report-detail-label {
      font-weight: 600;
      width: 120px;
      color: var(--gray-700);
    }
    
    .report-detail-value {
      flex: 1;
    }
    
    .report-actions {
      display: flex;
      justify-content: flex-end;
      padding-top: 10px;
      border-top: 1px solid var(--gray-200);
    }
    
    /* Alert messages */
    .alert {
      border-radius: 10px;
      padding: 15px 20px;
      margin-bottom: 20px;
      border: none;
    }
    
    .alert-success {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .alert-danger {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--gray-200);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 600;
      color: var(--primary);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .container-fluid {
        padding: 15px !important;
      }
      
      .page-header {
        padding: 15px 20px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .page-actions {
        margin-top: 15px;
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <!-- System Info Bar - Using dynamic loading, no hardcoded values -->
  <div class="system-info">
    <p>Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): <span id="currentDate">Loading...</span></p>
    <p>Current User: <span id="currentUser">Loading...</span></p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading...</div>
  </div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <h1 class="page-title">
        <i class="fas fa-envelope"></i> Email Report Configuration
      </h1>
      <div class="page-actions">
        <button id="enterMetricsBtn" class="btn btn-light mr-2">
          <i class="fas fa-keyboard"></i> Enter Metrics
        </button>
        <button id="viewDashboardBtn" class="btn btn-light mr-2">
          <i class="fas fa-tachometer-alt"></i> View Dashboard
        </button>
        <button id="viewReportsBtn" class="btn btn-light">
          <i class="fas fa-chart-bar"></i> View Reports
        </button>
      </div>
    </div>
    
    <!-- Alert Messages -->
    <div id="alertContainer" style="display: none;">
      <div id="alertMessage" class="alert" role="alert"></div>
    </div>
    
    <div class="row">
      <!-- Configuration Form Column -->
      <div class="col-lg-6">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-cog text-primary mr-2"></i> Configure Email Reports
            </h5>
          </div>
          <div class="card-body">
            <form id="emailConfigForm">
              <input type="hidden" id="configId" value="">
              
              <div class="form-group">
                <label class="form-label" for="configName">Configuration Name</label>
                <input type="text" class="form-control" id="configName" placeholder="e.g. Weekly Team Metrics Report">
              </div>
              
              <div class="form-group">
                <label class="form-label" for="recipients">Recipients</label>
                <div class="tags-input-wrapper" id="recipientsWrapper">
                  <input type="text" id="recipientsInput" class="tags-input" placeholder="Type email and press Enter">
                </div>
                <small class="form-text text-muted">Type an email address and press Enter to add it to the list.</small>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="frequency">Frequency</label>
                <select class="form-control" id="frequency">
                  <option value="daily">Daily</option>
                  <option value="weekly" selected>Weekly</option>
                  <option value="monthly">Monthly</option>
                </select>
              </div>
              
              <div class="form-group" id="weekdayGroup">
                <label class="form-label">Day of Week</label>
                <select class="form-control" id="dayOfWeek">
                  <option value="1">Monday</option>
                  <option value="2">Tuesday</option>
                  <option value="3">Wednesday</option>
                  <option value="4">Thursday</option>
                  <option value="5">Friday</option>
                  <option value="6">Saturday</option>
                  <option value="0">Sunday</option>
                </select>
              </div>
              
              <div class="form-group" id="monthDayGroup" style="display: none;">
                <label class="form-label">Day of Month</label>
                <select class="form-control" id="dayOfMonth">
                  <option value="1">1st</option>
                  <option value="15">15th</option>
                  <option value="last">Last day</option>
                </select>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="reportType">Report Type</label>
                <select class="form-control" id="reportType">
                  <option value="performance">Team Performance Summary</option>
                  <option value="individual">Individual Performance</option>
                  <option value="flagged">Flagged Team Members</option>
                  <option value="metrics">All Metrics</option>
                </select>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="timePeriod">Time Period</label>
                <select class="form-control" id="timePeriod">
                  <option value="day">Past Day</option>
                  <option value="week" selected>Past Week</option>
                  <option value="month">Past Month</option>
                </select>
              </div>
              
              <div class="form-group">
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="includeAttachment">
                  <label class="custom-control-label" for="includeAttachment">Include Spreadsheet Attachment</label>
                </div>
              </div>
              
              <div class="text-right mt-4">
                <button type="button" class="btn btn-light mr-2" id="resetForm">
                  <i class="fas fa-undo"></i> Reset
                </button>
                <button type="button" class="btn btn-primary" id="saveConfigBtn">
                  <i class="fas fa-save"></i> Save Configuration
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Scheduled Reports Column -->
      <div class="col-lg-6">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-calendar-alt text-primary mr-2"></i> Scheduled Reports
            </h5>
            <button id="refreshScheduledBtn" class="btn btn-sm btn-light">
              <i class="fas fa-sync-alt"></i> Refresh
            </button>
          </div>
          <div class="card-body" id="scheduledReportsList">
            <!-- Scheduled reports will be loaded dynamically -->
            <div class="text-center py-4">
              <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
              </div>
              <p class="mt-2">Loading scheduled reports...</p>
            </div>
          </div>
        </div>
        
        <!-- Email Preview Card -->
        <div class="card animate__animated animate__fadeIn mt-4">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-eye text-primary mr-2"></i> Email Preview
            </h5>
          </div>
          <div class="card-body">
            <p>See what your email report will look like:</p>
            <button id="previewEmailBtn" class="btn btn-primary">
              <i class="fas fa-eye"></i> Preview Email
            </button>
            <button id="sendTestEmailBtn" class="btn btn-light ml-2">
              <i class="fas fa-paper-plane"></i> Send Test Email
            </button>
            
            <div id="emailPreview" class="mt-4" style="display: none;">
              <div class="card">
                <div class="card-header bg-light">
                  <div><strong>Subject:</strong> <span id="previewSubject">Team Metrics Report</span></div>
                  <div><strong>To:</strong> <span id="previewRecipients">recipients@example.com</span></div>
                </div>
                <div class="card-body">
                  <div id="previewContent" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; min-height: 200px;">
                    <p>Email preview will be displayed here.</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Confirm Delete Modal -->
  <div class="modal fade" id="deleteConfirmModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Confirm Delete</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to delete this scheduled report? This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
            <i class="fas fa-trash"></i> Delete
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Bootstrap & jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Global variables
    let recipientTags = [];
    let currentConfigId = null;
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      // Load user information - NO HARDCODED VALUES
      loadUserInfo();
      
      // Hide loading overlay after a short delay
      setTimeout(() => {
        document.getElementById('loadingOverlay').style.display = 'none';
      }, 500);
      
      // Load scheduled reports
      loadScheduledReports();
      
      // Add event listeners
      addEventListeners();
      
      // Initialize tags input
      initTagsInput();
    });
    
    // Load user information - dynamically, no hardcoded values
    function loadUserInfo() {
      google.script.run
        .withSuccessHandler(function(info) {
          document.getElementById('currentDate').textContent = info.formattedDate;
          document.getElementById('currentUser').textContent = info.username;
        })
        .withFailureHandler(function(error) {
          console.error('Error loading user info:', error);
          // Default values if there's an error
          document.getElementById('currentDate').textContent = new Date().toISOString().replace('T', ' ').split('.')[0];
          document.getElementById('currentUser').textContent = 'current_user';
        })
        .getCurrentUserInfo();
    }
    
    // Load scheduled reports
    function loadScheduledReports() {
      const reportsList = document.getElementById('scheduledReportsList');
      
      // Show loading indicator
      reportsList.innerHTML = `
        <div class="text-center py-4">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
          <p class="mt-2">Loading scheduled reports...</p>
        </div>
      `;
      
      google.script.run
        .withSuccessHandler(function(configs) {
          if (configs.length === 0) {
            reportsList.innerHTML = `
              <div class="text-center py-4">
                <i class="fas fa-info-circle text-info mb-3" style="font-size: 2rem;"></i>
                <p class="mb-0">No scheduled reports found. Create your first one!</p>
              </div>
            `;
            return;
          }
          
          let html = '';
          
          configs.forEach(config => {
            const frequencyText = getFrequencyText(config);
            const lastSent = config.lastSent ? new Date(config.lastSent).toLocaleString() : 'Never';
            
            html += `
              <div class="report-card">
                <div class="report-header">
                  <h6 class="report-title">
                    <i class="fas fa-calendar-alt"></i>
                    ${config.configName}
                  </h6>
                </div>
                <div class="report-body">
                  <div class="report-details">
                    <div class="report-detail-item">
                      <div class="report-detail-label">Recipients:</div>
                      <div class="report-detail-value">${formatRecipients(config.recipients)}</div>
                    </div>
                    <div class="report-detail-item">
                      <div class="report-detail-label">Frequency:</div>
                      <div class="report-detail-value">${frequencyText}</div>
                    </div>
                    <div class="report-detail-item">
                      <div class="report-detail-label">Report Type:</div>
                      <div class="report-detail-value">${getReportTypeText(config.reportType)}</div>
                    </div>
                    <div class="report-detail-item">
                      <div class="report-detail-label">Time Period:</div>
                      <div class="report-detail-value">${getTimePeriodText(config.timePeriod)}</div>
                    </div>
                    <div class="report-detail-item">
                      <div class="report-detail-label">Last Sent:</div>
                      <div class="report-detail-value">${lastSent}</div>
                    </div>
                  </div>
                  <div class="report-actions">
                    <button class="btn btn-sm btn-primary mr-2 edit-config" data-config-id="${config.configName}">
                      <i class="fas fa-edit"></i> Edit
                    </button>
                    <button class="btn btn-sm btn-danger mr-2 delete-config" data-config-id="${config.configName}">
                      <i class="fas fa-trash"></i> Delete
                    </button>
                    <button class="btn btn-sm btn-success send-now" data-config-id="${config.configName}">
                      <i class="fas fa-paper-plane"></i> Send Now
                    </button>
                  </div>
                </div>
              </div>
            `;
          });
          
          reportsList.innerHTML = html;
          
          // Add event listeners for action buttons
          document.querySelectorAll('.edit-config').forEach(button => {
            button.addEventListener('click', function() {
              loadConfigForEdit(this.getAttribute('data-config-id'));
            });
          });
          
          document.querySelectorAll('.delete-config').forEach(button => {
            button.addEventListener('click', function() {
              confirmDeleteConfig(this.getAttribute('data-config-id'));
            });
          });
          
          document.querySelectorAll('.send-now').forEach(button => {
            button.addEventListener('click', function() {
              sendReportNow(this.getAttribute('data-config-id'));
            });
          });
        })
        .withFailureHandler(function(error) {
          console.error('Error loading scheduled reports:', error);
          reportsList.innerHTML = `
            <div class="alert alert-danger">
              <i class="fas fa-exclamation-circle mr-2"></i>
              Error loading scheduled reports: ${error}
            </div>
          `;
        })
        .getEmailReportConfigurations();
    }
    
    // Format recipients list
    function formatRecipients(recipients) {
      if (!recipients) return '';
      
      // If recipients is already a string
      if (typeof recipients === 'string') {
        const emails = recipients.split(',').map(e => e.trim());
        if (emails.length <= 2) {
          return emails.join(', ');
        } else {
          return emails.slice(0, 2).join(', ') + ` (+${emails.length - 2} more)`;
        }
      }
      
      // If recipients is an array
      if (Array.isArray(recipients)) {
        if (recipients.length <= 2) {
          return recipients.join(', ');
        } else {
          return recipients.slice(0, 2).join(', ') + ` (+${recipients.length - 2} more)`;
        }
      }
      
      return '';
    }
    
    // Get frequency text
    function getFrequencyText(config) {
      if (!config.frequency) return '';
      
      if (config.frequency === 'daily') {
        return 'Daily';
      } else if (config.frequency === 'weekly') {
        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        const dayIndex = config.dayOfWeek || 1; // Default to Monday
        return `Weekly on ${days[dayIndex]}`;
      } else if (config.frequency === 'monthly') {
        if (config.dayOfMonth === 'last') {
          return 'Monthly on the last day';
        } else {
          return `Monthly on the ${config.dayOfMonth}${getOrdinalSuffix(config.dayOfMonth)}`;
        }
      }
      
      return config.frequency;
    }
    
    // Get ordinal suffix
    function getOrdinalSuffix(day) {
      if (day >= 11 && day <= 13) {
        return 'th';
      }
      
      switch (day % 10) {
        case 1: return 'st';
        case 2: return 'nd';
        case 3: return 'rd';
        default: return 'th';
      }
    }
    
    // Get report type text
    function getReportTypeText(reportType) {
      switch(reportType) {
        case 'performance': return 'Team Performance Summary';
        case 'individual': return 'Individual Performance';
        case 'flagged': return 'Flagged Team Members';
        case 'metrics': return 'All Metrics';
        default: return reportType;
      }
    }
    
    // Get time period text
    function getTimePeriodText(timePeriod) {
      switch(timePeriod) {
        case 'day': return 'Past Day';
        case 'week': return 'Past Week';
        case 'month': return 'Past Month';
        default: return timePeriod;
      }
    }
    
    // Initialize tags input for recipients
    function initTagsInput() {
      const wrapper = document.getElementById('recipientsWrapper');
      const input = document.getElementById('recipientsInput');
      
      // Focus input when clicking on wrapper
      wrapper.addEventListener('click', function() {
        input.focus();
      });
      
      // Handle input keydown
      input.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ',') {
          e.preventDefault();
          
          const email = input.value.trim();
          if (email && isValidEmail(email) && !recipientTags.includes(email)) {
            addTag(email);
            input.value = '';
          } else if (email && !isValidEmail(email)) {
            showAlert('Please enter a valid email address', 'danger');
          }
        } else if (e.key === 'Backspace' && input.value === '') {
          // Remove last tag when backspace is pressed and input is empty
          if (recipientTags.length > 0) {
            removeTag(recipientTags[recipientTags.length - 1]);
          }
        }
      });
      
      // Paste multiple emails
      input.addEventListener('paste', function(e) {
        e.preventDefault();
        
        // Get pasted text
        const paste = (e.clipboardData || window.clipboardData).getData('text');
        
        // Split by commas or spaces
        const emails = paste.split(/[\s,]+/);
        
        // Add valid emails as tags
        emails.forEach(email => {
          const trimmedEmail = email.trim();
          if (trimmedEmail && isValidEmail(trimmedEmail) && !recipientTags.includes(trimmedEmail)) {
            addTag(trimmedEmail);
          }
        });
      });
    }
    
    // Add a tag to the recipients input
    function addTag(email) {
      const wrapper = document.getElementById('recipientsWrapper');
      const input = document.getElementById('recipientsInput');
      
      // Create tag element
      const tag = document.createElement('div');
      tag.className = 'tag';
      tag.innerHTML = `
        ${email}
        <span class="tag-close-icon" data-email="${email}">×</span>
      `;
      
      // Add tag to wrapper before the input
      wrapper.insertBefore(tag, input);
      
      // Add tag to array
      recipientTags.push(email);
      
      // Add click handler for remove icon
      tag.querySelector('.tag-close-icon').addEventListener('click', function() {
        removeTag(this.getAttribute('data-email'));
      });
    }
    
    // Remove a tag from the recipients input
    function removeTag(email) {
      // Remove tag element
      const tag = document.querySelector(`.tag-close-icon[data-email="${email}"]`).parentNode;
      tag.remove();
      
      // Remove from array
      recipientTags = recipientTags.filter(e => e !== email);
    }
    
    // Clear all recipient tags
    function clearTags() {
      // Remove all tag elements
      document.querySelectorAll('.tag').forEach(tag => tag.remove());
      
      // Clear array
      recipientTags = [];
    }
    
    // Set recipient tags from comma-separated string
    function setRecipientTags(recipients) {
      clearTags();
      
      if (!recipients) return;
      
      const emails = recipients.split(',').map(e => e.trim());
      
      emails.forEach(email => {
        if (email && isValidEmail(email)) {
          addTag(email);
        }
      });
    }
    
    // Validate email format
    function isValidEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    }
    
    // Add all event listeners
    function addEventListeners() {
      // Frequency change
      document.getElementById('frequency').addEventListener('change', function() {
        const frequency = this.value;
        
        if (frequency === 'weekly') {
          document.getElementById('weekdayGroup').style.display = 'block';
          document.getElementById('monthDayGroup').style.display = 'none';
        } else if (frequency === 'monthly') {
          document.getElementById('weekdayGroup').style.display = 'none';
          document.getElementById('monthDayGroup').style.display = 'block';
        } else {
          document.getElementById('weekdayGroup').style.display = 'none';
          document.getElementById('monthDayGroup').style.display = 'none';
        }
      });
      
      // Save configuration button
      document.getElementById('saveConfigBtn').addEventListener('click', function() {
        saveConfiguration();
      });
      
      // Reset form button
      document.getElementById('resetForm').addEventListener('click', function() {
        resetForm();
      });
      
      // Refresh scheduled reports button
      document.getElementById('refreshScheduledBtn').addEventListener('click', function() {
        loadScheduledReports();
      });
      
      // Preview email button
      document.getElementById('previewEmailBtn').addEventListener('click', function() {
        previewEmail();
      });
      
      // Send test email button
      document.getElementById('sendTestEmailBtn').addEventListener('click', function() {
        sendTestEmail();
      });
      
      // Confirm delete button in modal
      document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
        deleteConfig();
      });
      
      // Navigation buttons
      document.getElementById('enterMetricsBtn').addEventListener('click', function() {
        google.script.run.openMetricsForm();
      });
      
      document.getElementById('viewDashboardBtn').addEventListener('click', function() {
        google.script.run.openMetricsDashboard();
      });
      
      document.getElementById('viewReportsBtn').addEventListener('click', function() {
        google.script.run.openMetricsReports();
      });
    }
    
    // Reset form to defaults
    function resetForm() {
      document.getElementById('emailConfigForm').reset();
      clearTags();
      currentConfigId = null;
      document.getElementById('configId').value = '';
      
      // Reset frequency display
      document.getElementById('weekdayGroup').style.display = 'block';
      document.getElementById('monthDayGroup').style.display = 'none';
      
      // Hide email preview
      document.getElementById('emailPreview').style.display = 'none';
    }
    
    // Save email report configuration
    function saveConfiguration() {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Saving configuration...';
      
      // Get form values
      const configName = document.getElementById('configName').value;
      const recipients = recipientTags.join(',');
      const frequency = document.getElementById('frequency').value;
      const reportType = document.getElementById('reportType').value;
      const timePeriod = document.getElementById('timePeriod').value;
      const includeAttachment = document.getElementById('includeAttachment').checked;
      
      // Get day of week/month based on frequency
      let dayOfWeek = null;
      let dayOfMonth = null;
      
      if (frequency === 'weekly') {
        dayOfWeek = document.getElementById('dayOfWeek').value;
      } else if (frequency === 'monthly') {
        dayOfMonth = document.getElementById('dayOfMonth').value;
      }
      
      // Validate required fields
      if (!configName) {
        document.getElementById('loadingOverlay').style.display = 'none';
        showAlert('Please enter a configuration name', 'danger');
        return;
      }
      
      if (recipientTags.length === 0) {
        document.getElementById('loadingOverlay').style.display = 'none';
        showAlert('Please add at least one recipient', 'danger');
        return;
      }
      
      // Prepare config object
      const config = {
        configName: currentConfigId || configName,
        recipients: recipients,
        frequency: frequency,
        dayOfWeek: dayOfWeek,
        dayOfMonth: dayOfMonth,
        reportType: reportType,
        timePeriod: timePeriod,
        includeAttachment: includeAttachment
      };
      
      // Save configuration
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Configuration saved successfully!', 'success');
            resetForm();
            loadScheduledReports();
          } else {
            showAlert('Error saving configuration: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .configureMetricsEmailReport(config);
    }
    
    // Load a configuration for editing
    function loadConfigForEdit(configId) {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Loading configuration...';
      
      google.script.run
        .withSuccessHandler(function(configs) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          const config = configs.find(c => c.configName === configId);
          
          if (!config) {
            showAlert('Configuration not found', 'danger');
            return;
          }
          
          // Set config ID
          currentConfigId = config.configName;
          document.getElementById('configId').value = config.configName;
          
          // Set form values
          document.getElementById('configName').value = config.configName;
          setRecipientTags(config.recipients);
          document.getElementById('frequency').value = config.frequency;
          document.getElementById('reportType').value = config.reportType;
          document.getElementById('timePeriod').value = config.timePeriod;
          document.getElementById('includeAttachment').checked = config.includeAttachment;
          
          // Set day of week/month based on frequency
          if (config.frequency === 'weekly') {
            document.getElementById('weekdayGroup').style.display = 'block';
            document.getElementById('monthDayGroup').style.display = 'none';
            document.getElementById('dayOfWeek').value = config.dayOfWeek || '1';
          } else if (config.frequency === 'monthly') {
            document.getElementById('weekdayGroup').style.display = 'none';
            document.getElementById('monthDayGroup').style.display = 'block';
            document.getElementById('dayOfMonth').value = config.dayOfMonth || '1';
          } else {
            document.getElementById('weekdayGroup').style.display = 'none';
            document.getElementById('monthDayGroup').style.display = 'none';
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error loading configuration: ' + error, 'danger');
        })
        .getEmailReportConfigurations();
    }
    
    // Confirm delete configuration
    function confirmDeleteConfig(configId) {
      currentConfigId = configId;
      $('#deleteConfirmModal').modal('show');
    }
    
    // Delete configuration
    function deleteConfig() {
      if (!currentConfigId) {
        showAlert('No configuration selected for deletion', 'danger');
        $('#deleteConfirmModal').modal('hide');
        return;
      }
      
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Deleting configuration...';
      
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          $('#deleteConfirmModal').modal('hide');
          
          if (result.success) {
            showAlert('Configuration deleted successfully!', 'success');
            loadScheduledReports();
            
            // Reset form if the deleted config was being edited
            if (currentConfigId === document.getElementById('configId').value) {
              resetForm();
            }
          } else {
            showAlert('Error deleting configuration: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          $('#deleteConfirmModal').modal('hide');
          showAlert('Error: ' + error, 'danger');
        })
        .deleteEmailReportConfiguration(currentConfigId);
    }
    
    // Send a report immediately
    function sendReportNow(configId) {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Sending report...';
      
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Report sent successfully!', 'success');
            loadScheduledReports();
          } else {
            showAlert('Error sending report: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .sendMetricsReportEmail(configId);
    }
    
    // Preview email for current configuration
    function previewEmail() {
      // Get form values
      const configName = document.getElementById('configName').value || 'Untitled Configuration';
      const recipients = recipientTags.join(', ');
      const reportType = document.getElementById('reportType').value;
      const timePeriod = document.getElementById('timePeriod').value;
      
      // Update preview
      document.getElementById('previewSubject').textContent = `Team Metrics Report - ${getReportTypeText(reportType)}`;
      document.getElementById('previewRecipients').textContent = recipients || 'No recipients specified';
      
      // Get a basic email content preview
      let previewContent = `
        <h2>Team Metrics Report</h2>
        <p><strong>Report Type:</strong> ${getReportTypeText(reportType)}</p>
        <p><strong>Time Period:</strong> ${getTimePeriodText(timePeriod)}</p>
        
        <h3>Team Averages</h3>
        <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse;">
          <tr style="background-color: #f2f2f2;">
            <th>Metric</th>
            <th>Average</th>
            <th>Goal</th>
            <th>Status</th>
          </tr>
          <tr>
            <td>Answer Rate</td>
            <td>95.2%</td>
            <td>≥ 95%</td>
            <td style="color: #4CAF50; font-weight: bold;">Meeting Goal</td>
          </tr>
          <tr>
            <td>Average Talk Time</td>
            <td>17.3 min</td>
            <td>15 - 20 min</td>
            <td style="color: #4CAF50; font-weight: bold;">Meeting Goal</td>
          </tr>
          <tr>
            <td>ACW Percentage</td>
            <td>4.8%</td>
            <td>≤ 5%</td>
            <td style="color: #4CAF50; font-weight: bold;">Meeting Goal</td>
          </tr>
          <tr>
            <td>On Queue Percentage</td>
            <td>68.5%</td>
            <td>≥ 65%</td>
            <td style="color: #4CAF50; font-weight: bold;">Meeting Goal</td>
          </tr>
        </table>
        
        <p style="margin-top: 20px;">This is a preview of the email report content.</p>
      `;
      
      document.getElementById('previewContent').innerHTML = previewContent;
      document.getElementById('emailPreview').style.display = 'block';
    }
    
    // Send a test email
    function sendTestEmail() {
      // Validate recipients
      if (recipientTags.length === 0) {
        showAlert('Please add at least one recipient', 'danger');
        return;
      }
      
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Sending test email...';
      
      // Get form values
      const configName = document.getElementById('configName').value || 'Test Configuration';
      const recipients = recipientTags.join(',');
      const reportType = document.getElementById('reportType').value;
      const timePeriod = document.getElementById('timePeriod').value;
      const includeAttachment = document.getElementById('includeAttachment').checked;
      
      // Prepare config for test email
      const config = {
        configName: 'test_' + new Date().getTime(),
        recipients: recipients,
        reportType: reportType,
        timePeriod: timePeriod,
        includeAttachment: includeAttachment,
        isTest: true
      };
      
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Test email sent successfully!', 'success');
          } else {
            showAlert('Error sending test email: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .sendTestMetricsEmail(config);
    }
    
    // Show alert message
    function showAlert(message, type) {
      const alertContainer = document.getElementById('alertContainer');
      const alertMessage = document.getElementById('alertMessage');
      
      alertMessage.textContent = message;
      alertMessage.className = `alert alert-${type}`;
      alertContainer.style.display = 'block';
      
      // Auto-hide after 5 seconds
      setTimeout(function() {
        alertContainer.style.display = 'none';
      }, 5000);
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>QA Review Form</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css for animations -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --shadow-lg: 0 1rem 3rem rgba(0,0,0,.175);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .container-fluid {
      padding: 30px !important;
    }
    
    /* Header bar */
    .system-info {
      background-color: var(--gray-800);
      color: white;
      padding: 8px 15px;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }
    
    .system-info p {
      margin: 0;
    }
    
    /* Page header */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .page-title i {
      color: var(--primary);
      margin-right: 12px;
    }
    
    /* Cards */
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.75rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
      overflow: hidden;
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Intro section */
    .qa-intro {
      margin-bottom: 30px;
    }
    
    /* Rating cards */
    .rating-card {
      border: 1px solid var(--gray-200);
      border-radius: 12px;
      margin-bottom: 20px;
      transition: var(--transition);
      background: #fff;
    }
    
    .rating-card:hover {
      box-shadow: var(--shadow-sm);
    }
    
    .rating-header {
      background: var(--gray-100);
      padding: 15px 20px;
      border-radius: 12px 12px 0 0;
      border-bottom: 1px solid var(--gray-200);
    }
    
    .rating-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
    }
    
    .rating-body {
      padding: 20px;
    }
    
    .rating-options {
      display: flex;
      flex-wrap: wrap;
      margin-bottom: 15px;
    }
    
    .rating-option {
      margin-right: 20px;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
    }
    
    .rating-option input {
      margin-right: 6px;
    }
    
    .rating-description {
      margin-bottom: 15px;
      font-size: 0.95rem;
      color: var(--gray-600);
    }
    
    /* Progress bar */
    .progress-section {
      margin-bottom: 30px;
    }
    
    .progress-bar-wrapper {
      height: 10px;
      border-radius: 5px;
      background-color: var(--gray-200);
      overflow: hidden;
      margin-bottom: 10px;
    }
    
    .progress-bar-filled {
      height: 100%;
      background-color: var(--primary);
      border-radius: 5px;
      transition: width 0.5s ease;
    }
    
    .progress-label {
      display: flex;
      justify-content: space-between;
      font-size: 0.85rem;
      color: var(--gray-600);
    }
    
    /* Score card */
    .score-card {
      border-radius: 12px;
      padding: 20px;
      background: var(--gray-100);
      margin-bottom: 20px;
      display: flex;
      align-items: center;
    }
    
    .score-circle {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.8rem;
      font-weight: 700;
      background: var(--primary);
      color: white;
      margin-right: 20px;
    }
    
    .score-details {
      flex: 1;
    }
    
    .score-title {
      font-size: 1.2rem;
      font-weight: 600;
      margin: 0 0 10px;
    }
    
    .score-breakdown {
      display: flex;
      align-items: center;
      font-size: 0.9rem;
      color: var(--gray-600);
    }
    
    .score-status {
      margin-left: auto;
      padding: 5px 10px;
      border-radius: 20px;
      font-size: 0.9rem;
      font-weight: 600;
    }
    
    .score-status-excellent {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .score-status-good {
      background-color: rgba(54, 185, 204, 0.1);
      color: var(--info);
    }
    
    .score-status-needs-improvement {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    /* Quality status radio buttons */
    .quality-status {
      display: flex;
      flex-wrap: wrap;
      margin-bottom: 20px;
    }
    
    .quality-option {
      flex: 1;
      min-width: 150px;
      position: relative;
      padding: 8px;
    }
    
    .quality-radio {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .quality-badge {
      display: block;
      text-align: center;
      padding: 15px;
      border-radius: 8px;
      border: 2px solid var(--gray-300);
      cursor: pointer;
      transition: var(--transition);
    }
    
    .quality-badge i {
      font-size: 1.5rem;
      margin-bottom: 10px;
      display: block;
    }
    
    .quality-radio:checked + .quality-badge {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(78, 115, 223, 0.25);
    }
    
    .quality-badge-excellent {
      color: var(--success);
    }
    
    .quality-badge-good {
      color: var(--info);
    }
    
    .quality-badge-needs-improvement {
      color: var(--danger);
    }
    
    .quality-radio:checked + .quality-badge.quality-badge-excellent {
      background-color: rgba(28, 200, 138, 0.1);
      border-color: var(--success);
      box-shadow: 0 0 0 3px rgba(28, 200, 138, 0.25);
    }
    
    .quality-radio:checked + .quality-badge.quality-badge-good {
      background-color: rgba(54, 185, 204, 0.1);
      border-color: var(--info);
      box-shadow: 0 0 0 3px rgba(54, 185, 204, 0.25);
    }
    
    .quality-radio:checked + .quality-badge.quality-badge-needs-improvement {
      background-color: rgba(231, 74, 59, 0.1);
      border-color: var(--danger);
      box-shadow: 0 0 0 3px rgba(231, 74, 59, 0.25);
    }
    
    /* Follow-up actions */
    .action-item {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
    }
    
    .action-control {
      margin-right: 10px;
    }
    
    .action-input {
      flex: 1;
      border: 1px solid var(--gray-300);
      border-radius: 4px;
      padding: 6px 12px;
      font-size: 0.9rem;
    }
    
    /* Form controls */
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      font-weight: 600;
      margin-bottom: 8px;
      display: block;
    }
    
    .form-control {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    .form-text {
      font-size: 0.85rem;
      color: var(--gray-600);
      margin-top: 5px;
    }
    
    /* Buttons */
    .btn {
      border-radius: 10px;
      padding: 8px 16px;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
    }
    
    .btn i {
      margin-right: 8px;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-success {
      background: var(--success);
      border-color: var(--success);
    }
    
    .btn-success:hover {
      background-color: #169b6b;
      border-color: #169b6b;
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(28,200,138,.15);
    }
    
    .btn-light {
      background: var(--gray-100);
      color: var(--gray-700);
      border-color: var(--gray-100);
    }
    
    .btn-light:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    .btn-danger {
      background: var(--danger);
      border-color: var(--danger);
    }
    
    .btn-danger:hover {
      background-color: #c82333;
      border-color: #bd2130;
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(231,74,59,.15);
    }
    
    /* Alert messages */
    .alert {
      border-radius: 10px;
      padding: 15px 20px;
      margin-bottom: 20px;
      border: none;
    }
    
    .alert-success {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .alert-danger {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--gray-200);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 600;
      color: var(--primary);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Tabs */
    .nav-tabs {
      border-bottom: 1px solid var(--gray-200);
      margin-bottom: 20px;
      display: flex;
      width: 100%;
    }
    
    .nav-tabs .nav-item {
      flex: 1;
      text-align: center;
    }
    
    .nav-tabs .nav-link {
      border: none;
      border-bottom: 3px solid transparent;
      border-radius: 0;
      padding: 15px 20px;
      color: var(--gray-600);
      font-weight: 600;
      transition: var(--transition);
      width: 100%;
    }
    
    .nav-tabs .nav-link:hover {
      color: var(--primary);
      border-bottom-color: var(--gray-300);
    }
    
    .nav-tabs .nav-link.active {
      color: var(--primary);
      border-bottom-color: var(--primary);
    }
    
    .nav-tabs .nav-link.completed {
      color: var(--success);
    }
    
    .nav-tabs .nav-link.completed::after {
      content: '✓';
      margin-left: 5px;
      color: var(--success);
    }
    
    .nav-tabs .nav-link.disabled {
      color: var(--gray-400);
      pointer-events: none;
    }
    
    /* Section tabs */
    .section-tabs {
      display: flex;
      flex-wrap: wrap;
      border: 1px solid var(--gray-200);
      border-radius: 10px;
      margin-bottom: 20px;
      overflow: hidden;
    }
    
    .section-tab {
      flex: 1;
      min-width: 150px;
      text-align: center;
      padding: 12px;
      cursor: pointer;
      border-right: 1px solid var(--gray-200);
      border-bottom: 1px solid var(--gray-200);
      background: var(--gray-100);
      transition: var(--transition);
    }
    
    .section-tab:last-child {
      border-right: none;
    }
    
    .section-tab.active {
      background: #fff;
      font-weight: 600;
      color: var(--primary);
      border-bottom-color: transparent;
    }
    
    .section-tab:hover:not(.active) {
      background: var(--gray-200);
    }
    
    .section-score {
      font-size: 0.8rem;
      color: var(--gray-600);
      margin-top: 5px;
    }
    
    .section-score-excellent {
      color: var(--success);
      font-weight: 600;
    }
    
    .section-score-good {
      color: var(--info);
      font-weight: 600;
    }
    
    .section-score-needs-improvement {
      color: var(--danger);
      font-weight: 600;
    }
    
    /* Evaluation sections */
    .evaluation-section {
      display: none;
    }
    
    .evaluation-section.active {
      display: block;
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .container-fluid {
        padding: 15px !important;
      }
      
      .page-header {
        padding: 15px 20px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .page-actions {
        margin-top: 15px;
        width: 100%;
      }
      
      .score-card {
        flex-direction: column;
        text-align: center;
      }
      
      .score-circle {
        margin-right: 0;
        margin-bottom: 15px;
      }
      
      .score-breakdown {
        flex-direction: column;
      }
      
      .score-status {
        margin-left: 0;
        margin-top: 10px;
      }
      
      .section-tabs {
        flex-direction: column;
      }
      
      .section-tab {
        border-right: none;
      }
    }
  </style>
</head>
<body>
  <!-- System Info Bar - Using dynamic loading, no hardcoded values -->
  <div class="system-info">
    <p>Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): <span id="currentDate">Loading...</span></p>
    <p>Current User: <span id="currentUser">Loading...</span></p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading QA review form...</div>
  </div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <h1 class="page-title">
        <i class="fas fa-clipboard-check"></i> QA Review Form
      </h1>
      <div class="page-actions">
        <button id="viewDashboardBtn" class="btn btn-light mr-2">
          <i class="fas fa-tachometer-alt"></i> QA Dashboard
        </button>
        <button id="viewReportsBtn" class="btn btn-light mr-2">
          <i class="fas fa-chart-bar"></i> QA Reports
        </button>
        <button id="exportBtn" class="btn btn-light">
          <i class="fas fa-download"></i> Export Data
        </button>
      </div>
    </div>

    <!-- Alert Messages -->
    <div id="alertContainer" style="display: none;">
      <div id="alertMessage" class="alert" role="alert"></div>
    </div>
    
    <!-- Main QA Review Form -->
    <div class="card animate__animated animate__fadeIn">
      <div class="card-header">
        <h5 class="card-header-title">
          <i class="fas fa-clipboard-list text-primary mr-2"></i> Quality Assurance Review
        </h5>
        <div>
          <span id="reviewStatus" class="badge badge-secondary">Draft</span>
        </div>
      </div>
      <div class="card-body">
        <!-- Main Navigation Tabs -->
        <ul class="nav nav-tabs" id="qaTabs" role="tablist">
          <li class="nav-item">
            <a class="nav-link active" id="prep-tab" data-toggle="tab" href="#prepSection" role="tab">
              <i class="fas fa-clipboard mr-1"></i> Review Prep
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link disabled" id="review-tab" data-toggle="tab" href="#reviewSection" role="tab">
              <i class="fas fa-star-half-alt mr-1"></i> Evaluation
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link disabled" id="post-tab" data-toggle="tab" href="#postSection" role="tab">
              <i class="fas fa-check-circle mr-1"></i> Post Review
            </a>
          </li>
        </ul>
        
        <!-- Tab Content -->
        <div class="tab-content" id="qaTabContent">
          <!-- Review Prep Tab -->
          <div class="tab-pane fade show active" id="prepSection" role="tabpanel">
            <div class="qa-intro">
              <h4>Counselor QA Review Preparation</h4>
              <p>Enter the details about the interaction you're reviewing. This information will be used to identify and track the review.</p>
            </div>
            
            <form id="prepForm">
              <div class="form-row">
                <div class="form-group col-md-6">
                  <label for="counselorSelect" class="form-label">Counselor</label>
                  <select class="form-control" id="counselorSelect" required>
                    <option value="">Select Counselor</option>
                    <!-- Counselors will be loaded dynamically -->
                  </select>
                </div>
                <div class="form-group col-md-6">
                  <label for="reviewerName" class="form-label">Reviewer</label>
                  <input type="text" class="form-control" id="reviewerName" readonly>
                </div>
              </div>
              
              <div class="form-row">
                <div class="form-group col-md-6">
                  <label for="interactionDate" class="form-label">Interaction Date</label>
                  <input type="date" class="form-control" id="interactionDate" required>
                </div>
                <div class="form-group col-md-6">
                  <label for="interactionId" class="form-label">Interaction ID</label>
                  <input type="text" class="form-control" id="interactionId" required>
                  <small class="form-text">Enter the unique identifier for this interaction</small>
                </div>
              </div>
              
              <div class="form-row">
                <div class="form-group col-md-6">
                  <label for="interactionType" class="form-label">Interaction Type</label>
                  <select class="form-control" id="interactionType" required>
                    <option value="">Select Type</option>
                    <option value="Call">Call</option>
                    <option value="Chat">Chat</option>
                    <option value="Text">Text</option>
                    <option value="Email">Email</option>
                  </select>
                </div>
                <div class="form-group col-md-6">
                  <label for="interactionLength" class="form-label">Interaction Length (minutes)</label>
                  <input type="number" class="form-control" id="interactionLength" min="1" step="1">
                </div>
              </div>
              
              <div class="form-group">
                <div class="custom-control custom-checkbox mb-2">
                  <input type="checkbox" class="custom-control-input" id="shadowSession">
                  <label class="custom-control-label" for="shadowSession">Shadow Session</label>
                </div>
                <small class="form-text">Check if this was a shadow session with the counselor</small>
              </div>
              
              <div class="form-group">
                <label for="interactionSummary" class="form-label">Interaction Summary</label>
                <textarea class="form-control" id="interactionSummary" rows="3" placeholder="Brief summary of the interaction being reviewed"></textarea>
              </div>
              
              <div class="text-right mt-4">
                <button type="button" class="btn btn-light mr-2" id="resetPrepBtn">
                  <i class="fas fa-undo"></i> Reset
                </button>
                <button type="button" class="btn btn-primary" id="nextToReviewBtn">
                  <i class="fas fa-arrow-right"></i> Continue to Evaluation
                </button>
              </div>
            </form>
          </div>
          
          <!-- Review Tab -->
          <div class="tab-pane fade" id="reviewSection" role="tabpanel">
            <div class="qa-intro">
              <h4>Evaluation Criteria</h4>
              <p>Rate each area: 2 points (Fully Met), 1 point (Partially Met), 0 points (Not Met), or N/A. Use the section tabs below to navigate through evaluation criteria.</p>
            </div>
            
            <!-- Progress tracker -->
            <div class="progress-section">
              <div class="progress-bar-wrapper">
                <div class="progress-bar-filled" id="reviewProgress" style="width: 0%"></div>
              </div>
              <div class="progress-label">
                <span>Review Progress</span>
                <span id="progressPercentage">0%</span>
              </div>
            </div>
            
            <!-- Section Tabs -->
            <div class="section-tabs" id="sectionTabs">
              <div class="section-tab active" data-section="callOpening">
                Call Opening
                <div class="section-score" id="callOpeningScore">0/0</div>
              </div>
              <div class="section-tab" data-section="riskAssessment">
                Risk Assessment
                <div class="section-score" id="riskAssessmentScore">0/0</div>
              </div>
              <div class="section-tab" data-section="communicationSkills">
                Communication Skills
                <div class="section-score" id="communicationSkillsScore">0/0</div>
              </div>
              <div class="section-tab" data-section="supportEffectiveness">
                Support Effectiveness
                <div class="section-score" id="supportEffectivenessScore">0/0</div>
              </div>
              <div class="section-tab" data-section="callClosure">
                Call Closure
                <div class="section-score" id="callClosureScore">0/0</div>
              </div>
            </div>
            
            <form id="evaluationForm">
              <!-- Call Opening Section -->
              <div class="evaluation-section active" id="callOpening">
                <h5 class="mb-4">Call Opening</h5>
                
                <div class="rating-card">
                  <div class="rating-header">
                    <h6 class="rating-title">Answered interaction in less than 20 seconds of joining</h6>
                  </div>
                  <div class="rating-body">
                    <div class="rating-description">
                      Evaluate whether the counselor promptly answered the interaction within 20 seconds of joining.
                    </div>
                    <div class="rating-options">
                      <label class="rating-option">
                        <input type="radio" name="answeredPromptly" value="2"> Fully Met (2)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="answeredPromptly" value="1"> Partially Met (1)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="answeredPromptly" value="0"> Not Met (0)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="answeredPromptly" value="NA"> N/A
                      </label>
                    </div>
                    <div class="form-group mb-0">
                      <label for="answeredPromptlyNotes">Notes:</label>
                      <textarea class="form-control" id="answeredPromptlyNotes" rows="2" placeholder="Notes on performance for this criterion"></textarea>
                    </div>
                  </div>
                </div>
                
                <div class="rating-card">
                  <div class="rating-header">
                    <h6 class="rating-title">Opening message completed with tact</h6>
                  </div>
                  <div class="rating-body">
                    <div class="rating-description">
                      Evaluate whether the counselor delivered the opening message clearly and tactfully.
                    </div>
                    <div class="rating-options">
                      <label class="rating-option">
                        <input type="radio" name="openingMessage" value="2"> Fully Met (2)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="openingMessage" value="1"> Partially Met (1)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="openingMessage" value="0"> Not Met (0)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="openingMessage" value="NA"> N/A
                      </label>
                    </div>
                    <div class="form-group mb-0">
                      <label for="openingMessageNotes">Notes:</label>
                      <textarea class="form-control" id="openingMessageNotes" rows="2" placeholder="Notes on performance for this criterion"></textarea>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Risk Assessment Section -->
              <div class="evaluation-section" id="riskAssessment">
                <h5 class="mb-4">Risk Assessment</h5>
                
                <div class="rating-card">
                  <div class="rating-header">
                    <h6 class="rating-title">SASS/Screener questions attempted at least twice (unless contact requested otherwise)</h6>
                  </div>
                  <div class="rating-body">
                    <div class="rating-description">
                      Evaluate whether the counselor properly attempted SASS/Screener questions at least twice.
                    </div>
                    <div class="rating-options">
                      <label class="rating-option">
                        <input type="radio" name="screenerQuestions" value="2"> Fully Met (2)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="screenerQuestions" value="1"> Partially Met (1)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="screenerQuestions" value="0"> Not Met (0)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="screenerQuestions" value="NA"> N/A
                      </label>
                    </div>
                    <div class="form-group mb-0">
                      <label for="screenerQuestionsNotes">Notes:</label>
                      <textarea class="form-control" id="screenerQuestionsNotes" rows="2" placeholder="Notes on performance for this criterion"></textarea>
                    </div>
                  </div>
                </div>
                
                <div class="rating-card">
                  <div class="rating-header">
                    <h6 class="rating-title">Used creative non-judgmental empathy and built rapport</h6>
                  </div>
                  <div class="rating-body">
                    <div class="rating-description">
                      Evaluate whether the counselor demonstrated creative non-judgmental empathy and successfully built rapport.
                    </div>
                    <div class="rating-options">
                      <label class="rating-option">
                        <input type="radio" name="empathyRapport" value="2"> Fully Met (2)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="empathyRapport" value="1"> Partially Met (1)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="empathyRapport" value="0"> Not Met (0)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="empathyRapport" value="NA"> N/A
                      </label>
                    </div>
                    <div class="form-group mb-0">
                      <label for="empathyRapportNotes">Notes:</label>
                      <textarea class="form-control" id="empathyRapportNotes" rows="2" placeholder="Notes on performance for this criterion"></textarea>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Communication Skills Section -->
              <div class="evaluation-section" id="communicationSkills">
                <h5 class="mb-4">Communication Skills</h5>
                
                <div class="rating-card">
                  <div class="rating-header">
                    <h6 class="rating-title">Demonstrated active listening through reflective responses</h6>
                  </div>
                  <div class="rating-body">
                    <div class="rating-description">
                      Evaluate whether the counselor demonstrated active listening skills and used reflective responses.
                    </div>
                    <div class="rating-options">
                      <label class="rating-option">
                        <input type="radio" name="activeListening" value="2"> Fully Met (2)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="activeListening" value="1"> Partially Met (1)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="activeListening" value="0"> Not Met (0)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="activeListening" value="NA"> N/A
                      </label>
                    </div>
                    <div class="form-group mb-0">
                      <label for="activeListeningNotes">Notes:</label>
                      <textarea class="form-control" id="activeListeningNotes" rows="2" placeholder="Notes on performance for this criterion"></textarea>
                    </div>
                  </div>
                </div>
                
                <div class="rating-card">
                  <div class="rating-header">
                    <h6 class="rating-title">Used appropriate LGBTQ+ inclusive language</h6>
                  </div>
                  <div class="rating-body">
                    <div class="rating-description">
                      Evaluate whether the counselor used appropriate LGBTQ+ inclusive language throughout the interaction.
                    </div>
                    <div class="rating-options">
                      <label class="rating-option">
                        <input type="radio" name="inclusiveLanguage" value="2"> Fully Met (2)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="inclusiveLanguage" value="1"> Partially Met (1)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="inclusiveLanguage" value="0"> Not Met (0)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="inclusiveLanguage" value="NA"> N/A
                      </label>
                    </div>
                    <div class="form-group mb-0">
                      <label for="inclusiveLanguageNotes">Notes:</label>
                      <textarea class="form-control" id="inclusiveLanguageNotes" rows="2" placeholder="Notes on performance for this criterion"></textarea>
                    </div>
                  </div>
                </div>
                
                <div class="rating-card">
                  <div class="rating-header">
                    <h6 class="rating-title">Responded to emotional content with appropriate empathy</h6>
                  </div>
                  <div class="rating-body">
                    <div class="rating-description">
                      Evaluate whether the counselor responded to emotional content with an appropriate level of empathy.
                    </div>
                    <div class="rating-options">
                      <label class="rating-option">
                        <input type="radio" name="emotionalResponse" value="2"> Fully Met (2)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="emotionalResponse" value="1"> Partially Met (1)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="emotionalResponse" value="0"> Not Met (0)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="emotionalResponse" value="NA"> N/A
                      </label>
                    </div>
                    <div class="form-group mb-0">
                      <label for="emotionalResponseNotes">Notes:</label>
                      <textarea class="form-control" id="emotionalResponseNotes" rows="2" placeholder="Notes on performance for this criterion"></textarea>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Support Effectiveness Section -->
              <div class="evaluation-section" id="supportEffectiveness">
                <h5 class="mb-4">Support Effectiveness</h5>
                
                <div class="rating-card">
                  <div class="rating-header">
                    <h6 class="rating-title">Provided appropriate resources relevant to the contact's needs</h6>
                  </div>
                  <div class="rating-body">
                    <div class="rating-description">
                      Evaluate whether the counselor provided appropriate and relevant resources based on the contact's specific needs.
                    </div>
                    <div class="rating-options">
                      <label class="rating-option">
                        <input type="radio" name="relevantResources" value="2"> Fully Met (2)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="relevantResources" value="1"> Partially Met (1)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="relevantResources" value="0"> Not Met (0)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="relevantResources" value="NA"> N/A
                      </label>
                    </div>
                    <div class="form-group mb-0">
                      <label for="relevantResourcesNotes">Notes:</label>
                      <textarea class="form-control" id="relevantResourcesNotes" rows="2" placeholder="Notes on performance for this criterion"></textarea>
                    </div>
                  </div>
                </div>
                
                <div class="rating-card">
                  <div class="rating-header">
                    <h6 class="rating-title">Helped identify coping strategies or action steps</h6>
                  </div>
                  <div class="rating-body">
                    <div class="rating-description">
                      Evaluate whether the counselor helped the contact identify appropriate coping strategies or action steps.
                    </div>
                    <div class="rating-options">
                      <label class="rating-option">
                        <input type="radio" name="copingStrategies" value="2"> Fully Met (2)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="copingStrategies" value="1"> Partially Met (1)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="copingStrategies" value="0"> Not Met (0)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="copingStrategies" value="NA"> N/A
                      </label>
                    </div>
                    <div class="form-group mb-0">
                      <label for="copingStrategiesNotes">Notes:</label>
                      <textarea class="form-control" id="copingStrategiesNotes" rows="2" placeholder="Notes on performance for this criterion"></textarea>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Call Closure Section -->
              <div class="evaluation-section" id="callClosure">
                <h5 class="mb-4">Call Closure</h5>
                
                <div class="rating-card">
                  <div class="rating-header">
                    <h6 class="rating-title">Summarized key points of the interaction</h6>
                  </div>
                  <div class="rating-body">
                    <div class="rating-description">
                      Evaluate whether the counselor effectively summarized the key points of the interaction.
                    </div>
                    <div class="rating-options">
                      <label class="rating-option">
                        <input type="radio" name="summarizedPoints" value="2"> Fully Met (2)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="summarizedPoints" value="1"> Partially Met (1)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="summarizedPoints" value="0"> Not Met (0)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="summarizedPoints" value="NA"> N/A
                      </label>
                    </div>
                    <div class="form-group mb-0">
                      <label for="summarizedPointsNotes">Notes:</label>
                      <textarea class="form-control" id="summarizedPointsNotes" rows="2" placeholder="Notes on performance for this criterion"></textarea>
                    </div>
                  </div>
                </div>
                
                <div class="rating-card">
                  <div class="rating-header">
                    <h6 class="rating-title">Completed closure process appropriately</h6>
                  </div>
                  <div class="rating-body">
                    <div class="rating-description">
                      Evaluate whether the counselor completed the closure process in an appropriate manner.
                    </div>
                    <div class="rating-options">
                      <label class="rating-option">
                        <input type="radio" name="closureProcess" value="2"> Fully Met (2)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="closureProcess" value="1"> Partially Met (1)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="closureProcess" value="0"> Not Met (0)
                      </label>
                      <label class="rating-option">
                        <input type="radio" name="closureProcess" value="NA"> N/A
                      </label>
                    </div>
                    <div class="form-group mb-0">
                      <label for="closureProcessNotes">Notes:</label>
                      <textarea class="form-control" id="closureProcessNotes" rows="2" placeholder="Notes on performance for this criterion"></textarea>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="text-right mt-4">
                <button type="button" class="btn btn-light mr-2" id="backToPrepBtn">
                  <i class="fas fa-arrow-left"></i> Back
                </button>
                <button type="button" class="btn btn-primary" id="nextToPostBtn">
                  <i class="fas fa-arrow-right"></i> Continue to Summary
                </button>
              </div>
            </form>
          </div>
          
          <!-- Post Review Tab -->
          <div class="tab-pane fade" id="postSection" role="tabpanel">
            <div class="qa-intro">
              <h4>Review Summary and Feedback</h4>
              <p>Review the calculated scores, provide overall feedback, and select follow-up actions for this QA review.</p>
            </div>
            
            <form id="postForm">
              <!-- Score Card -->
              <div class="score-card">
                <div class="score-circle" id="scorePercentage">0%</div>
                <div class="score-details">
                  <h5 class="score-title">Quality Assurance Score</h5>
                  <div class="score-breakdown">
                    <span id="scorePoints">0 points out of 0 possible</span>
                    <span id="scoreStatus" class="score-status score-status-needs-improvement">Needs Improvement</span>
                  </div>
                </div>
              </div>
              
              <!-- Section Scores Summary -->
              <div class="card mb-4">
                <div class="card-header">
                  <h5 class="card-header-title">Section Scores</h5>
                </div>
                <div class="card-body">
                  <div class="table-responsive">
                    <table class="table">
                      <thead>
                        <tr>
                          <th>Section</th>
                          <th>Score</th>
                          <th>Possible Points</th>
                          <th>Percentage</th>
                        </tr>
                      </thead>
                      <tbody id="sectionScoresTable">
                        <!-- Section scores will be filled in dynamically -->
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
              
              <!-- Quality Status Radio Selection -->
              <div class="form-group">
                <label class="form-label">Quality Status</label>
                <div class="quality-status">
                  <div class="quality-option">
                    <input type="radio" name="qualityStatus" id="statusExcellent" value="Excellent" class="quality-radio">
                    <label for="statusExcellent" class="quality-badge quality-badge-excellent">
                      <i class="fas fa-award"></i>
                      Excellent
                      <small class="d-block mt-1">(90-100%)</small>
                    </label>
                  </div>
                  <div class="quality-option">
                    <input type="radio" name="qualityStatus" id="statusGood" value="Good" class="quality-radio">
                    <label for="statusGood" class="quality-badge quality-badge-good">
                      <i class="fas fa-thumbs-up"></i>
                      Good
                      <small class="d-block mt-1">(75-89%)</small>
                    </label>
                  </div>
                  <div class="quality-option">
                    <input type="radio" name="qualityStatus" id="statusNeedsImprovement" value="Needs Improvement" class="quality-radio">
                    <label for="statusNeedsImprovement" class="quality-badge quality-badge-needs-improvement">
                      <i class="fas fa-exclamation-triangle"></i>
                      Needs Improvement
                      <small class="d-block mt-1">(&lt;75%)</small>
                    </label>
                  </div>
                </div>
              </div>
              
              <!-- Overall Feedback -->
              <div class="form-group">
                <label for="overallFeedback" class="form-label">Overall Feedback</label>
                <textarea class="form-control" id="overallFeedback" rows="5" placeholder="Provide comprehensive feedback about the interaction, including specific strengths and growth opportunities..."></textarea>
              </div>
              
              <!-- Follow-Up Actions -->
              <div class="form-group">
                <label class="form-label">Follow-Up Actions</label>
                <div id="actionItems">
                  <div class="action-item">
                    <div class="action-control">
                      <input type="checkbox" class="action-checkbox">
                    </div>
                    <input type="text" class="action-input" placeholder="Action item...">
                  </div>
                  <div class="action-item">
                    <div class="action-control">
                      <input type="checkbox" class="action-checkbox">
                    </div>
                    <input type="text" class="action-input" placeholder="Action item...">
                  </div>
                  <div class="action-item">
                    <div class="action-control">
                      <input type="checkbox" class="action-checkbox">
                    </div>
                    <input type="text" class="action-input" placeholder="Action item...">
                  </div>
                </div>
                <button type="button" class="btn btn-sm btn-light mt-2" id="addActionBtn">
                  <i class="fas fa-plus"></i> Add Action Item
                </button>
              </div>
              
              <!-- Email Follow-Up -->
              <div class="form-group">
                <label class="form-label">Email Follow-Up</label>
                <div class="custom-control custom-checkbox mb-2">
                  <input type="checkbox" class="custom-control-input" id="sendEmail">
                  <label class="custom-control-label" for="sendEmail">Send quality review results to counselor</label>
                </div>
                
                <div id="emailOptions" style="display: none; margin-left: 25px;">
                  <label class="form-label">Email Template</label>
                  <div class="form-check">
                    <input class="form-check-input" type="radio" name="emailTemplate" id="standardTemplate" value="standard" checked>
                    <label class="form-check-label" for="standardTemplate">
                      Standard
                    </label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="radio" name="emailTemplate" id="developmentTemplate" value="development">
                    <label class="form-check-label" for="developmentTemplate">
                      Development Focus
                    </label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="radio" name="emailTemplate" id="recognitionTemplate" value="recognition">
                    <label class="form-check-label" for="recognitionTemplate">
                      Recognition
                    </label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="radio" name="emailTemplate" id="customTemplate" value="custom">
                    <label class="form-check-label" for="customTemplate">
                      Custom
                    </label>
                  </div>
                </div>
              </div>
              
              <div class="text-right mt-4">
                <button type="button" class="btn btn-light mr-2" id="backToReviewBtn">
                  <i class="fas fa-arrow-left"></i> Back
                </button>
                <button type="button" class="btn btn-light mr-2" id="saveAsDraftBtn">
                  <i class="fas fa-save"></i> Save as Draft
                </button>
                <button type="button" class="btn btn-primary" id="submitReviewBtn">
                  <i class="fas fa-check-circle"></i> Submit Review
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Bootstrap & jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Global variables
    let reviewId = null;
    let reviewData = {};
    let criteriaData = {
      callOpening: ['answeredPromptly', 'openingMessage'],
      riskAssessment: ['screenerQuestions', 'empathyRapport'],
      communicationSkills: ['activeListening', 'inclusiveLanguage', 'emotionalResponse'],
      supportEffectiveness: ['relevantResources', 'copingStrategies'],
      callClosure: ['summarizedPoints', 'closureProcess']
    };
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      // Load user information - NO HARDCODED VALUES
      loadUserInfo();
      
      // Load counselors
      loadCounselors();
      
      // Hide loading overlay after a short delay
      setTimeout(() => {
        document.getElementById('loadingOverlay').style.display = 'none';
      }, 500);
      
      // Set default date to today
      document.getElementById('interactionDate').valueAsDate = new Date();
      
      // Add event listeners
      addEventListeners();
      
      // Check if there's a review ID in the URL (for editing existing reviews)
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has('id')) {
        reviewId = urlParams.get('id');
        loadExistingReview(reviewId);
      }
    });
    
    // Load user information
    function loadUserInfo() {
      google.script.run
        .withSuccessHandler(function(info) {
          document.getElementById('currentDate').textContent = info.formattedDate;
          document.getElementById('currentUser').textContent = info.username;
          document.getElementById('reviewerName').value = info.username;
        })
        .withFailureHandler(function(error) {
          console.error('Error loading user info:', error);
          // Default values if there's an error
          document.getElementById('currentDate').textContent = new Date().toISOString().replace('T', ' ').split('.')[0];
          document.getElementById('currentUser').textContent = 'current_user';
          document.getElementById('reviewerName').value = 'current_user';
        })
        .getCurrentUserInfo();
    }
    
    // Load counselors from the system
    function loadCounselors() {
      google.script.run
        .withSuccessHandler(function(counselors) {
          const select = document.getElementById('counselorSelect');
          
          // Clear existing options except the first one
          while (select.options.length > 1) {
            select.remove(1);
          }
          
          // Add counselors to the dropdown
          counselors.forEach(function(counselor) {
            const option = document.createElement('option');
            option.value = counselor.email;
            option.textContent = counselor.firstName + ' ' + counselor.lastName;
            select.appendChild(option);
          });
        })
        .withFailureHandler(function(error) {
          console.error('Error loading counselors:', error);
          showAlert('Error loading counselors: ' + error, 'danger');
        })
        .getTeamMembers();
    }
    
    // Load existing review data
    function loadExistingReview(reviewId) {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Loading review data...';
      
      google.script.run
        .withSuccessHandler(function(review) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (!review) {
            showAlert('Review not found.', 'danger');
            return;
          }
          
          // Store the full review data
          reviewData = review;
          
          // Fill in the prep form
          document.getElementById('counselorSelect').value = review.counselorEmail;
          document.getElementById('interactionDate').value = formatDateForInput(new Date(review.interactionDate));
          document.getElementById('interactionId').value = review.interactionId;
          document.getElementById('interactionType').value = review.interactionType;
          document.getElementById('interactionLength').value = review.interactionLength;
          document.getElementById('shadowSession').checked = review.shadowSession;
          document.getElementById('interactionSummary').value = review.interactionSummary;
          
          // Update status
          document.getElementById('reviewStatus').textContent = review.status;
          document.getElementById('reviewStatus').className = 'badge badge-' + getStatusClass(review.status);
          
          // If review is complete, enable all tabs
          if (review.status !== 'Draft') {
            enableAllTabs();
          }
          
          // If evaluation data exists, fill it in
          if (review.evaluation) {
            fillEvaluationData(review.evaluation);
          }
          
          // If post-review data exists, fill it in
          if (review.overallFeedback) {
            document.getElementById('overallFeedback').value = review.overallFeedback;
          }
          
          if (review.qualityStatus) {
            document.querySelector(`input[name="qualityStatus"][value="${review.qualityStatus}"]`).checked = true;
          }
          
          if (review.actionItems && review.actionItems.length > 0) {
            fillActionItems(review.actionItems);
          }
          
          if (review.sendEmail) {
            document.getElementById('sendEmail').checked = true;
            document.getElementById('emailOptions').style.display = 'block';
            document.querySelector(`input[name="emailTemplate"][value="${review.emailTemplate}"]`).checked = true;
          }
          
          // Calculate and show scores
          updateScores();
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error loading review: ' + error, 'danger');
        })
        .getQAReviewById(reviewId);
    }
    
    // Fill evaluation form with existing data
    function fillEvaluationData(evaluation) {
      // For each criteria category
      Object.keys(criteriaData).forEach(function(section) {
        // For each criterion in the section
        criteriaData[section].forEach(function(criterion) {
          // Set the radio button value
          if (evaluation[criterion] !== undefined) {
           const value = evaluation[criterion];
const radio = document.querySelector(`input[name="${criterion}"][value="${value}"]`);
            
            if (radio) {
              radio.checked = true;
            }
            
            // Set notes if they exist
            const notesField = document.getElementById(`${criterion}Notes`);
            if (notesField && evaluation[`${criterion}Notes`]) {
              notesField.value = evaluation[`${criterion}Notes`];
            }
          }
        });
      });
    }
    
    // Fill action items with existing data
    function fillActionItems(actionItems) {
      // Clear existing action items
      const actionItemsContainer = document.getElementById('actionItems');
      actionItemsContainer.innerHTML = '';
      
      // Add each action item
      actionItems.forEach(function(item) {
        const actionItem = document.createElement('div');
        actionItem.className = 'action-item';
        actionItem.innerHTML = `
          <div class="action-control">
            <input type="checkbox" class="action-checkbox" ${item.completed ? 'checked' : ''}>
          </div>
          <input type="text" class="action-input" value="${item.text}" placeholder="Action item...">
        `;
        actionItemsContainer.appendChild(actionItem);
      });
      
      // Add an empty one for new items
      const actionItem = document.createElement('div');
      actionItem.className = 'action-item';
      actionItem.innerHTML = `
        <div class="action-control">
          <input type="checkbox" class="action-checkbox">
        </div>
        <input type="text" class="action-input" placeholder="Action item...">
      `;
      actionItemsContainer.appendChild(actionItem);
    }
    
    // Enable all tabs
    function enableAllTabs() {
      document.getElementById('review-tab').classList.remove('disabled');
      document.getElementById('post-tab').classList.remove('disabled');
    }
    
    // Format date for input field
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }
    
    // Get status CSS class
    function getStatusClass(status) {
      switch(status) {
        case 'Draft':
          return 'secondary';
        case 'Complete':
          return 'success';
        case 'In Progress':
          return 'primary';
        default:
          return 'secondary';
      }
    }
    
    // Add all event listeners
    function addEventListeners() {
      // Navigation between sections
      document.getElementById('nextToReviewBtn').addEventListener('click', function() {
        const isValid = validatePrepForm();
        if (isValid) {
          document.getElementById('review-tab').classList.remove('disabled');
          $('#review-tab').tab('show');
          saveReviewData('In Progress');
        } else {
          showAlert('Please fill in all required fields.', 'danger');
        }
      });
      
      document.getElementById('backToPrepBtn').addEventListener('click', function() {
        $('#prep-tab').tab('show');
      });
      
      document.getElementById('nextToPostBtn').addEventListener('click', function() {
        const isValid = validateEvaluationForm();
        if (isValid) {
          document.getElementById('post-tab').classList.remove('disabled');
          $('#post-tab').tab('show');
          updateScores();
        } else {
          showAlert('Please rate all applicable criteria before continuing.', 'danger');
        }
      });
      
      document.getElementById('backToReviewBtn').addEventListener('click', function() {
        $('#review-tab').tab('show');
      });
      
      // Section tab navigation
      document.querySelectorAll('.section-tab').forEach(function(tab) {
        tab.addEventListener('click', function() {
          // Deactivate all tabs and sections
          document.querySelectorAll('.section-tab').forEach(tab => tab.classList.remove('active'));
          document.querySelectorAll('.evaluation-section').forEach(section => section.classList.remove('active'));
          
          // Activate clicked tab and corresponding section
          this.classList.add('active');
          const sectionId = this.getAttribute('data-section');
          document.getElementById(sectionId).classList.add('active');
        });
      });
      
      // Rating option changes (for progress tracking)
      document.querySelectorAll('input[type="radio"]').forEach(function(radio) {
        radio.addEventListener('change', function() {
          updateReviewProgress();
          updateSectionScores();
        });
      });
      
      // Prep form reset
      document.getElementById('resetPrepBtn').addEventListener('click', function() {
        document.getElementById('prepForm').reset();
        document.getElementById('interactionDate').valueAsDate = new Date();
      });
      
      // Send email checkbox
      document.getElementById('sendEmail').addEventListener('change', function() {
        document.getElementById('emailOptions').style.display = this.checked ? 'block' : 'none';
      });
      
      // Add action item button
      document.getElementById('addActionBtn').addEventListener('click', function() {
        const actionItem = document.createElement('div');
        actionItem.className = 'action-item';
        actionItem.innerHTML = `
          <div class="action-control">
            <input type="checkbox" class="action-checkbox">
          </div>
          <input type="text" class="action-input" placeholder="Action item...">
        `;
        document.getElementById('actionItems').appendChild(actionItem);
      });
      
      // Quality status radio buttons
      document.querySelectorAll('input[name="qualityStatus"]').forEach(function(radio) {
        radio.addEventListener('change', function() {
          updateQualityStatus(this.value);
        });
      });
      
      // Save as draft button
      document.getElementById('saveAsDraftBtn').addEventListener('click', function() {
        saveReviewData('Draft');
      });
      
      // Submit review button
      document.getElementById('submitReviewBtn').addEventListener('click', function() {
        const isValid = validatePostForm();
        if (isValid) {
          saveReviewData('Complete');
        } else {
          showAlert('Please complete all required fields before submitting.', 'danger');
        }
      });
      
      // Navigation buttons
      document.getElementById('viewDashboardBtn').addEventListener('click', function() {
        google.script.run.openQADashboard();
      });
      
      document.getElementById('viewReportsBtn').addEventListener('click', function() {
        google.script.run.openQAReports();
      });
      
      document.getElementById('exportBtn').addEventListener('click', function() {
        google.script.run.openQAExport();
      });
    }
    
    // Validate prep form
    function validatePrepForm() {
      const counselor = document.getElementById('counselorSelect').value;
      const interactionDate = document.getElementById('interactionDate').value;
      const interactionId = document.getElementById('interactionId').value;
      const interactionType = document.getElementById('interactionType').value;
      
      return counselor && interactionDate && interactionId && interactionType;
    }
    
    // Validate evaluation form
    function validateEvaluationForm() {
      let isValid = true;
      
      // For each criteria category
      Object.keys(criteriaData).forEach(function(section) {
        // For each criterion in the section
        criteriaData[section].forEach(function(criterion) {
          // Check if any radio button is selected
          const radioButtons = document.querySelectorAll(`input[name="${criterion}"]`);
          const isAnySelected = Array.from(radioButtons).some(radio => radio.checked);
          
          if (!isAnySelected) {
            isValid = false;
          }
        });
      });
      
      return isValid;
    }
    
    // Validate post form
    function validatePostForm() {
      const overallFeedback = document.getElementById('overallFeedback').value;
      const qualityStatus = document.querySelector('input[name="qualityStatus"]:checked');
      
      return overallFeedback && qualityStatus;
    }
    
    // Update review progress
    function updateReviewProgress() {
      let answeredCount = 0;
      let totalCount = 0;
      
      // For each criteria category
      Object.keys(criteriaData).forEach(function(section) {
        // For each criterion in the section
        criteriaData[section].forEach(function(criterion) {
          totalCount++;
          // Check if any radio button is selected
          const radioButtons = document.querySelectorAll(`input[name="${criterion}"]`);
          const isAnySelected = Array.from(radioButtons).some(radio => radio.checked);
          
          if (isAnySelected) {
            answeredCount++;
          }
        });
      });
      
      // Calculate percentage
      const percentage = Math.round((answeredCount / totalCount) * 100);
      
      // Update progress bar
      document.getElementById('reviewProgress').style.width = percentage + '%';
      document.getElementById('progressPercentage').textContent = percentage + '%';
    }
    
    // Update section scores
    function updateSectionScores() {
      // For each criteria category
      Object.keys(criteriaData).forEach(function(section) {
        let sectionPoints = 0;
        let sectionPossible = 0;
        
        // For each criterion in the section
        criteriaData[section].forEach(function(criterion) {
          const selectedRadio = document.querySelector(`input[name="${criterion}"]:checked`);
          
          if (selectedRadio) {
            const value = selectedRadio.value;
            
            if (value !== 'NA') {
              sectionPoints += parseInt(value);
              sectionPossible += 2; // Maximum points per criterion is 2
            }
          } else {
            // If nothing is selected, assume maximum possible points
            sectionPossible += 2;
          }
        });
        
        // Update section score display
        const scoreDisplay = document.getElementById(`${section}Score`);
        scoreDisplay.textContent = `${sectionPoints}/${sectionPossible}`;
        
        // Add score class based on percentage
        const percentage = sectionPossible > 0 ? (sectionPoints / sectionPossible) * 100 : 0;
        
        if (percentage >= 90) {
          scoreDisplay.className = 'section-score section-score-excellent';
        } else if (percentage >= 75) {
          scoreDisplay.className = 'section-score section-score-good';
        } else {
          scoreDisplay.className = 'section-score section-score-needs-improvement';
        }
      });
    }
    
    // Update overall scores
    function updateScores() {
      let totalPoints = 0;
      let totalPossible = 0;
      
      // Clear section scores table
      const sectionScoresTable = document.getElementById('sectionScoresTable');
      sectionScoresTable.innerHTML = '';
      
      // For each criteria category
      Object.keys(criteriaData).forEach(function(section) {
        let sectionPoints = 0;
        let sectionPossible = 0;
        
        // For each criterion in the section
        criteriaData[section].forEach(function(criterion) {
          const selectedRadio = document.querySelector(`input[name="${criterion}"]:checked`);
          
          if (selectedRadio) {
            const value = selectedRadio.value;
            
            if (value !== 'NA') {
              sectionPoints += parseInt(value);
              sectionPossible += 2; // Maximum points per criterion is 2
            }
          } else {
            // If nothing is selected, assume maximum possible points
            sectionPossible += 2;
          }
        });
        
        // Add to total scores
        totalPoints += sectionPoints;
        totalPossible += sectionPossible;
        
        // Add to section scores table
        const percentage = sectionPossible > 0 ? (sectionPoints / sectionPossible) * 100 : 0;
        
        let sectionName = '';
        switch(section) {
          case 'callOpening':
            sectionName = 'Call Opening';
            break;
          case 'riskAssessment':
            sectionName = 'Risk Assessment';
            break;
          case 'communicationSkills':
            sectionName = 'Communication Skills';
            break;
          case 'supportEffectiveness':
            sectionName = 'Support Effectiveness';
            break;
          case 'callClosure':
            sectionName = 'Call Closure';
            break;
        }
        
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${sectionName}</td>
          <td>${sectionPoints}</td>
          <td>${sectionPossible}</td>
          <td class="${getPercentageColorClass(percentage)}">${percentage.toFixed(1)}%</td>
        `;
        sectionScoresTable.appendChild(row);
      });
      
      // Calculate overall percentage
      const percentage = totalPossible > 0 ? (totalPoints / totalPossible) * 100 : 0;
      
      // Update score displays
      document.getElementById('scorePercentage').textContent = percentage.toFixed(0) + '%';
      document.getElementById('scorePoints').textContent = `${totalPoints} points out of ${totalPossible} possible`;
      
      // Update quality status
      let status = '';
      if (percentage >= 90) {
        status = 'Excellent';
        document.getElementById('scoreStatus').className = 'score-status score-status-excellent';
      } else if (percentage >= 75) {
        status = 'Good';
        document.getElementById('scoreStatus').className = 'score-status score-status-good';
      } else {
        status = 'Needs Improvement';
        document.getElementById('scoreStatus').className = 'score-status score-status-needs-improvement';
      }
      
      document.getElementById('scoreStatus').textContent = status;
      
      // Auto-select quality status
      document.querySelector(`input[name="qualityStatus"][value="${status}"]`).checked = true;
    }
    
    // Get color class for percentage
    function getPercentageColorClass(percentage) {
      if (percentage >= 90) {
        return 'text-success font-weight-bold';
      } else if (percentage >= 75) {
        return 'text-info font-weight-bold';
      } else {
        return 'text-danger font-weight-bold';
      }
    }
    
    // Update quality status display
    function updateQualityStatus(status) {
      document.getElementById('scoreStatus').textContent = status;
      
      if (status === 'Excellent') {
        document.getElementById('scoreStatus').className = 'score-status score-status-excellent';
      } else if (status === 'Good') {
        document.getElementById('scoreStatus').className = 'score-status score-status-good';
      } else {
        document.getElementById('scoreStatus').className = 'score-status score-status-needs-improvement';
      }
    }
    
    // Save review data
    function saveReviewData(status) {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Saving review data...';
      
      // Get basic review details
      const reviewData = {
        id: reviewId, // null for new reviews
        counselorEmail: document.getElementById('counselorSelect').value,
        counselorName: document.getElementById('counselorSelect').options[document.getElementById('counselorSelect').selectedIndex].text,
        reviewer: document.getElementById('reviewerName').value,
        interactionDate: document.getElementById('interactionDate').value,
        interactionId: document.getElementById('interactionId').value,
        interactionType: document.getElementById('interactionType').value,
        interactionLength: document.getElementById('interactionLength').value,
        shadowSession: document.getElementById('shadowSession').checked,
        interactionSummary: document.getElementById('interactionSummary').value,
        status: status
      };
      
      // Add evaluation data if available
      if (status !== 'Draft') {
        const evaluation = {};
        
        // For each criteria category
        Object.keys(criteriaData).forEach(function(section) {
          // For each criterion in the section
          criteriaData[section].forEach(function(criterion) {
            const selectedRadio = document.querySelector(`input[name="${criterion}"]:checked`);
            const notesField = document.getElementById(`${criterion}Notes`);
            
            if (selectedRadio) {
              evaluation[criterion] = selectedRadio.value;
            }
            
            if (notesField && notesField.value) {
              evaluation[`${criterion}Notes`] = notesField.value;
            }
          });
        });
        
        reviewData.evaluation = evaluation;
      }
      
      // Add post-review data if available
      if (status === 'Complete') {
        reviewData.overallFeedback = document.getElementById('overallFeedback').value;
        reviewData.qualityStatus = document.querySelector('input[name="qualityStatus"]:checked').value;
        
        // Get scores
        let totalPoints = 0;
        let totalPossible = 0;
        
        // For each criteria category
        Object.keys(criteriaData).forEach(function(section) {
          let sectionPoints = 0;
          let sectionPossible = 0;
          
          // For each criterion in the section
          criteriaData[section].forEach(function(criterion) {
            const selectedRadio = document.querySelector(`input[name="${criterion}"]:checked`);
            
            if (selectedRadio) {
              const value = selectedRadio.value;
              
              if (value !== 'NA') {
                sectionPoints += parseInt(value);
                sectionPossible += 2; // Maximum points per criterion is 2
              }
            } else {
              // If nothing is selected, assume maximum possible points
              sectionPossible += 2;
            }
          });
          
          // Add to total scores
          totalPoints += sectionPoints;
          totalPossible += sectionPossible;
          
          // Add section scores
          reviewData[`${section}Points`] = sectionPoints;
          reviewData[`${section}Possible`] = sectionPossible;
        });
        
        // Add total scores
        reviewData.totalPoints = totalPoints;
        reviewData.totalPossible = totalPossible;
        reviewData.scorePercentage = totalPossible > 0 ? (totalPoints / totalPossible) * 100 : 0;
        
        // Get action items
        const actionItems = [];
        document.querySelectorAll('.action-item').forEach(function(item) {
          const checkbox = item.querySelector('.action-checkbox');
          const input = item.querySelector('.action-input');
          
          if (input.value.trim()) {
            actionItems.push({
              text: input.value.trim(),
              completed: checkbox.checked
            });
          }
        });
        
        reviewData.actionItems = actionItems;
        
        // Get email settings
        reviewData.sendEmail = document.getElementById('sendEmail').checked;
        
        if (reviewData.sendEmail) {
          reviewData.emailTemplate = document.querySelector('input[name="emailTemplate"]:checked').value;
        }
      }
      
      // Save review
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert(result.message, 'success');
            
            // Update review ID and status
            reviewId = result.reviewId;
            document.getElementById('reviewStatus').textContent = status;
            document.getElementById('reviewStatus').className = 'badge badge-' + getStatusClass(status);
            
            // If completed, redirect to dashboard after a delay
            if (status === 'Complete') {
              setTimeout(function() {
                google.script.run.openQADashboard();
              }, 2000);
            }
          } else {
            showAlert('Error saving review: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .saveQAReview(reviewData);
    }
    
    // Show alert message
    function showAlert(message, type) {
      const alertContainer = document.getElementById('alertContainer');
      const alertMessage = document.getElementById('alertMessage');
      
      alertMessage.textContent = message;
      alertMessage.className = `alert alert-${type}`;
      alertContainer.style.display = 'block';
      
      // Auto-hide after 5 seconds
      setTimeout(function() {
        alertContainer.style.display = 'none';
      }, 5000);
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>QA Dashboard</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css for animations -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <!-- Chart.js for visualizations -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --shadow-lg: 0 1rem 3rem rgba(0,0,0,.175);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .container-fluid {
      padding: 30px !important;
    }
    
    /* Header bar */
    .system-info {
      background-color: var(--gray-800);
      color: white;
      padding: 8px 15px;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }
    
    .system-info p {
      margin: 0;
    }
    
    /* Page header */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .page-title i {
      color: var(--primary);
      margin-right: 12px;
    }
    
    /* Cards */
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.75rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
      overflow: hidden;
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Stat cards */
    .stats-cards {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 25px;
    }
    
    .stat-card {
      flex: 1;
      background: #fff;
      border-radius: 0.75rem;
      padding: 20px;
      box-shadow: var(--shadow-sm);
      display: flex;
      align-items: center;
      min-width: 220px;
      position: relative;
      overflow: hidden;
      transition: var(--transition);
    }
    
    .stat-card:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow);
    }
    
    .stat-card .stat-icon {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 15px;
      font-size: 1.5rem;
      flex-shrink: 0;
    }
    
    .stat-primary .stat-icon {
      background: rgba(78, 115, 223, 0.1);
      color: var(--primary);
    }
    
    .stat-success .stat-icon {
      background: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .stat-warning .stat-icon {
      background: rgba(246, 194, 62, 0.1);
      color: var(--warning);
    }
    
    .stat-danger .stat-icon {
      background: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    .stat-info .stat-icon {
      background: rgba(54, 185, 204, 0.1);
      color: var(--info);
    }
    
    .stat-content {
      flex: 1;
    }
    
    .stat-value {
      font-size: 1.75rem;
      font-weight: 700;
      line-height: 1;
      margin: 0 0 5px;
    }
    
    .stat-label {
      color: var(--gray-600);
      font-size: 0.85rem;
      margin: 0;
    }
    
    .stat-bg-icon {
      position: absolute;
      right: -10px;
      bottom: -10px;
      font-size: 4rem;
      opacity: 0.05;
      transform: rotate(-15deg);
    }
    
    .trend-indicator {
      display: inline-flex;
      align-items: center;
      font-size: 0.85rem;
      margin-left: 8px;
    }
    
    .trend-up {
      color: var(--success);
    }
    
    .trend-down {
      color: var(--danger);
    }
    
    /* Chart containers */
    .chart-container {
      position: relative;
      height: 300px;
      width: 100%;
    }
    
    /* Filter controls */
    .filters-section {
      margin-bottom: 25px;
      background: #fff;
      border-radius: 0.75rem;
      padding: 20px 25px;
      box-shadow: var(--shadow-sm);
    }
    
    .filters-title {
      font-weight: 600;
      color: var(--gray-700);
      margin-bottom: 15px;
    }
    
    .filter-form {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      align-items: flex-end;
    }
    
    .filter-group {
      flex: 1;
      min-width: 200px;
    }
    
    .filter-label {
      font-weight: 600;
      color: var(--gray-700);
      margin-bottom: 8px;
      display: block;
      font-size: 0.9rem;
    }
    
    .form-control {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    /* Recent reviews table */
    .review-table {
      border-collapse: separate;
      border-spacing: 0;
      width: 100%;
    }
    
    .review-table th {
      background: var(--gray-100);
      padding: 12px 15px;
      font-weight: 600;
      text-transform: uppercase;
      font-size: 0.75rem;
      letter-spacing: 0.5px;
      color: var(--gray-700);
      border-bottom: 1px solid var(--gray-200);
      text-align: left;
    }
    
    .review-table td {
      padding: 12px 15px;
      border-bottom: 1px solid var(--gray-200);
      vertical-align: middle;
    }
    
    .review-table tr:hover {
      background-color: var(--gray-100);
    }
    
    .review-status {
      display: inline-flex;
      align-items: center;
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.75rem;
      font-weight: 600;
    }
    
    .status-excellent {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .status-good {
      background-color: rgba(54, 185, 204, 0.1);
      color: var(--info);
    }
    
    .status-needs-improvement {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    .status-draft {
      background-color: rgba(133, 135, 150, 0.1);
      color: var(--secondary);
    }
    
    .status-in-progress {
      background-color: rgba(78, 115, 223, 0.1);
      color: var(--primary);
    }
    
    .review-score {
      font-weight: 700;
    }
    
    .score-excellent {
      color: var(--success);
    }
    
    .score-good {
      color: var(--info);
    }
    
    .score-needs-improvement {
      color: var(--danger);
    }
    
    /* Performance cards */
    .counselor-performance-card {
      display: flex;
      align-items: center;
      padding: 15px;
      border-bottom: 1px solid var(--gray-200);
      transition: var(--transition);
    }
    
    .counselor-performance-card:hover {
      background-color: var(--gray-100);
    }
    
    .counselor-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: var(--primary-light);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      margin-right: 15px;
      flex-shrink: 0;
    }
    
    .counselor-info {
      flex: 1;
    }
    
    .counselor-name {
      font-weight: 600;
      margin: 0;
    }
    
    .counselor-meta {
      color: var(--gray-600);
      font-size: 0.8rem;
      margin: 0;
    }
    
    .counselor-score {
      font-size: 1.25rem;
      font-weight: 700;
      width: 60px;
      text-align: right;
    }
    
    /* Buttons */
    .btn {
      border-radius: 10px;
      padding: 8px 16px;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
    }
    
    .btn i {
      margin-right: 8px;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-success {
      background: var(--success);
      border-color: var(--success);
    }
    
    .btn-success:hover {
      background-color: #169b6b;
      border-color: #169b6b;
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(28,200,138,.15);
    }
    
    .btn-light {
      background: var(--gray-100);
      color: var(--gray-700);
      border-color: var(--gray-100);
    }
    
    .btn-light:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    .btn-sm {
      padding: 5px 12px;
      font-size: 0.875rem;
    }
    
    /* Action buttons */
    .action-buttons {
      display: flex;
      gap: 5px;
    }
    
    .btn-icon {
      width: 30px;
      height: 30px;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 6px;
    }
    
    /* Alert messages */
    .alert {
      border-radius: 10px;
      padding: 15px 20px;
      margin-bottom: 20px;
      border: none;
    }
    
    .alert-success {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .alert-danger {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--gray-200);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 600;
      color: var(--primary);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .container-fluid {
        padding: 15px !important;
      }
      
      .page-header {
        padding: 15px 20px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .page-actions {
        margin-top: 15px;
        width: 100%;
      }
      
      .stats-cards {
        gap: 10px;
      }
      
      .stat-card {
        min-width: 100%;
      }
      
      .chart-container {
        height: 250px;
      }
    }
  </style>
</head>
<body>
  <!-- System Info Bar - Using dynamic loading, no hardcoded values -->
  <div class="system-info">
    <p>Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): <span id="currentDate">Loading...</span></p>
    <p>Current User: <span id="currentUser">Loading...</span></p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading QA dashboard...</div>
  </div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <h1 class="page-title">
        <i class="fas fa-tachometer-alt"></i> QA Dashboard
      </h1>
      <div class="page-actions">
        <button id="newReviewBtn" class="btn btn-success mr-2">
          <i class="fas fa-plus"></i> New QA Review
        </button>
        <button id="viewReportsBtn" class="btn btn-light mr-2">
          <i class="fas fa-chart-bar"></i> QA Reports
        </button>
        <button id="exportDataBtn" class="btn btn-light">
          <i class="fas fa-download"></i> Export Data
        </button>
      </div>
    </div>
    
    <!-- Filters Section -->
    <div class="filters-section animate__animated animate__fadeIn">
      <h5 class="filters-title">
        <i class="fas fa-filter text-primary mr-2"></i> Filters
      </h5>
      <div class="filter-form">
        <div class="filter-group">
          <label class="filter-label" for="dateRangeFilter">Date Range</label>
          <select class="form-control" id="dateRangeFilter">
            <option value="7">Last 7 Days</option>
            <option value="30" selected>Last 30 Days</option>
            <option value="90">Last 90 Days</option>
            <option value="custom">Custom Range</option>
          </select>
        </div>
        <div class="filter-group" id="customDateRange" style="display: none;">
          <label class="filter-label" for="startDateFilter">From</label>
          <input type="date" class="form-control" id="startDateFilter">
        </div>
        <div class="filter-group" id="customDateRangeTo" style="display: none;">
          <label class="filter-label" for="endDateFilter">To</label>
          <input type="date" class="form-control" id="endDateFilter">
        </div>
        <div class="filter-group">
          <label class="filter-label" for="counselorFilter">Counselor</label>
          <select class="form-control" id="counselorFilter">
            <option value="all" selected>All Counselors</option>
            <!-- Counselors will be loaded dynamically -->
          </select>
        </div>
        <div class="filter-group">
          <label class="filter-label" for="qualityStatusFilter">Quality Status</label>
          <select class="form-control" id="qualityStatusFilter">
            <option value="all" selected>All Status</option>
            <option value="Excellent">Excellent</option>
            <option value="Good">Good</option>
            <option value="Needs Improvement">Needs Improvement</option>
          </select>
        </div>
        <div style="align-self: flex-end;">
          <button id="applyFiltersBtn" class="btn btn-primary">
            Apply Filters
          </button>
          <button id="resetFiltersBtn" class="btn btn-light ml-2">
            Reset
          </button>
        </div>
      </div>
    </div>
    
    <!-- Stats Cards -->
    <div class="stats-cards animate__animated animate__fadeIn">
      <div class="stat-card stat-primary">
        <div class="stat-icon">
          <i class="fas fa-clipboard-check"></i>
        </div>
        <div class="stat-content">
          <div class="stat-value" id="totalReviews">0</div>
          <div class="stat-label">Total Reviews</div>
        </div>
        <i class="fas fa-clipboard-check stat-bg-icon"></i>
      </div>
      
      <div class="stat-card stat-success">
        <div class="stat-icon">
          <i class="fas fa-medal"></i>
        </div>
        <div class="stat-content">
          <div class="stat-value" id="excellentCount">0</div>
          <div class="stat-label">Excellent</div>
        </div>
        <i class="fas fa-medal stat-bg-icon"></i>
      </div>
      
      <div class="stat-card stat-info">
        <div class="stat-icon">
          <i class="fas fa-thumbs-up"></i>
        </div>
        <div class="stat-content">
          <div class="stat-value" id="goodCount">0</div>
          <div class="stat-label">Good</div>
        </div>
        <i class="fas fa-thumbs-up stat-bg-icon"></i>
      </div>
      
      <div class="stat-card stat-danger">
        <div class="stat-icon">
          <i class="fas fa-exclamation-triangle"></i>
        </div>
        <div class="stat-content">
          <div class="stat-value" id="needsImprovementCount">0</div>
          <div class="stat-label">Needs Improvement</div>
        </div>
        <i class="fas fa-exclamation-triangle stat-bg-icon"></i>
      </div>
      
      <div class="stat-card stat-warning">
        <div class="stat-icon">
          <i class="fas fa-chart-line"></i>
        </div>
        <div class="stat-content">
          <div class="stat-value" id="averageScore">0%</div>
          <div class="stat-label">Average Score</div>
        </div>
        <i class="fas fa-chart-line stat-bg-icon"></i>
      </div>
    </div>
    
    <!-- Charts and Data Section -->
    <div class="row">
      <!-- Score Trends Chart -->
      <div class="col-lg-8">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-chart-line text-primary mr-2"></i> QA Score Trend
            </h5>
            <div class="card-actions">
              <select id="trendChartPeriod" class="form-control form-control-sm">
                <option value="weekly" selected>Weekly</option>
                <option value="monthly">Monthly</option>
              </select>
            </div>
          </div>
          <div class="card-body">
            <div class="chart-container">
              <canvas id="scoreTrendChart"></canvas>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Section Performance Chart -->
      <div class="col-lg-4">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-chart-pie text-primary mr-2"></i> Section Performance
            </h5>
          </div>
          <div class="card-body">
            <div class="chart-container">
              <canvas id="sectionPerformanceChart"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <!-- Recent Reviews -->
      <div class="col-lg-8">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-list text-primary mr-2"></i> Recent Reviews
            </h5>
            <div class="card-actions">
              <button id="viewAllReviewsBtn" class="btn btn-sm btn-light">
                View All
              </button>
            </div>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="review-table">
                <thead>
                  <tr>
                    <th>Date</th>
                    <th>Counselor</th>
                    <th>Interaction</th>
                    <th>Score</th>
                    <th>Status</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody id="recentReviewsTable">
                  <!-- Recent reviews will be loaded dynamically -->
                  <tr>
                    <td colspan="6" class="text-center">Loading recent reviews...</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Top Performers -->
      <div class="col-lg-4">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-star text-primary mr-2"></i> Top Performers
            </h5>
          </div>
          <div class="card-body p-0">
            <div id="topPerformersList">
              <!-- Top performers will be loaded dynamically -->
              <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
                <p class="mt-2">Loading top performers...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Alert Messages -->
    <div id="alertContainer" style="display: none;">
      <div id="alertMessage" class="alert" role="alert"></div>
    </div>
  </div>
  
  <!-- Bootstrap & jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Global variables
    let qaData = null;
    
    // Chart colors
    const chartColors = {
      primary: '#4e73df',
      success: '#1cc88a',
      warning: '#f6c23e',
      danger: '#e74a3b',
      info: '#36b9cc',
      gray: '#858796'
    };
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      // Load user information
      loadUserInfo();
      
      // Set default date for custom range
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      document.getElementById('startDateFilter').value = formatDateForInput(thirtyDaysAgo);
      document.getElementById('endDateFilter').value = formatDateForInput(today);
      
      // Load counselors
      loadCounselors();
      
      // Load dashboard data
      loadDashboardData();
      
      // Add event listeners
      addEventListeners();
    });
    
    // Load user information
    function loadUserInfo() {
      google.script.run
        .withSuccessHandler(function(info) {
          document.getElementById('currentDate').textContent = info.formattedDate;
          document.getElementById('currentUser').textContent = info.username;
        })
        .withFailureHandler(function(error) {
          console.error('Error loading user info:', error);
          // Default values if there's an error
          document.getElementById('currentDate').textContent = new Date().toISOString().replace('T', ' ').split('.')[0];
          document.getElementById('currentUser').textContent = 'current_user';
        })
        .getCurrentUserInfo();
    }
    
    // Format date for input fields
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }
    
    // Load counselors
    function loadCounselors() {
      google.script.run
        .withSuccessHandler(function(counselors) {
          const select = document.getElementById('counselorFilter');
          
          // Clear existing options except the first one
          while (select.options.length > 1) {
            select.remove(1);
          }
          
          // Add counselors to the dropdown
          counselors.forEach(function(counselor) {
            const option = document.createElement('option');
            option.value = counselor.email;
            option.textContent = counselor.firstName + ' ' + counselor.lastName;
            select.appendChild(option);
          });
        })
        .withFailureHandler(function(error) {
          console.error('Error loading counselors:', error);
        })
        .getTeamMembers();
    }
    
    // Add event listeners
    function addEventListeners() {
      // Date range filter change
      document.getElementById('dateRangeFilter').addEventListener('change', function() {
        const customRangeFields = document.getElementById('customDateRange');
        const customRangeToFields = document.getElementById('customDateRangeTo');
        
        if (this.value === 'custom') {
          customRangeFields.style.display = 'block';
          customRangeToFields.style.display = 'block';
        } else {
          customRangeFields.style.display = 'none';
          customRangeToFields.style.display = 'none';
        }
      });
      
      // Apply filters button
      document.getElementById('applyFiltersBtn').addEventListener('click', function() {
        loadDashboardData();
      });
      
      // Reset filters button
      document.getElementById('resetFiltersBtn').addEventListener('click', function() {
        document.getElementById('dateRangeFilter').value = '30';
        document.getElementById('counselorFilter').value = 'all';
        document.getElementById('qualityStatusFilter').value = 'all';
        document.getElementById('customDateRange').style.display = 'none';
        document.getElementById('customDateRangeTo').style.display = 'none';
        loadDashboardData();
      });
      
      // Trend chart period change
      document.getElementById('trendChartPeriod').addEventListener('change', function() {
        if (qaData) {
          updateScoreTrendChart(qaData, this.value);
        }
      });
      
      // Navigation buttons
      document.getElementById('newReviewBtn').addEventListener('click', function() {
        google.script.run.openQAReviewForm();
      });
      
      document.getElementById('viewReportsBtn').addEventListener('click', function() {
        google.script.run.openQAReports();
      });
      
      document.getElementById('exportDataBtn').addEventListener('click', function() {
        google.script.run.openQAExport();
      });
      
      document.getElementById('viewAllReviewsBtn').addEventListener('click', function() {
        google.script.run.openQAReports();
      });
    }
    
    // Load dashboard data
    function loadDashboardData() {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      
      // Get filter values
      const dateRangeFilter = document.getElementById('dateRangeFilter').value;
      const counselorFilter = document.getElementById('counselorFilter').value;
      const qualityStatusFilter = document.getElementById('qualityStatusFilter').value;
      
      // Prepare date range
      let startDate = null;
      let endDate = new Date(); // Today
      
      if (dateRangeFilter === 'custom') {
        startDate = new Date(document.getElementById('startDateFilter').value);
        endDate = new Date(document.getElementById('endDateFilter').value);
        // Set end date to end of the day
        endDate.setHours(23, 59, 59, 999);
      } else {
        // Calculate start date based on selected range
        startDate = new Date();
        startDate.setDate(startDate.getDate() - parseInt(dateRangeFilter));
      }
      
      // Prepare filter options
      const options = {
        startDate: startDate,
        endDate: endDate
      };
      
      if (counselorFilter !== 'all') {
        options.counselorEmail = counselorFilter;
      }
      
      if (qualityStatusFilter !== 'all') {
        options.qualityStatus = qualityStatusFilter;
      }
      
      // Load QA analytics
      google.script.run
        .withSuccessHandler(function(data) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (data) {
            // Store data globally
            qaData = data;
            
            // Update dashboard components
            updateDashboard(data);
          } else {
            showAlert('Error loading QA data: No data returned', 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error loading QA data: ' + error, 'danger');
        })
        .getQADashboardData(options);
    }
    
    // Update dashboard with data
    function updateDashboard(data) {
      // Update stat cards
      updateStatCards(data);
      
      // Update charts
      updateScoreTrendChart(data, document.getElementById('trendChartPeriod').value);
      updateSectionPerformanceChart(data);
      
      // Update recent reviews
      updateRecentReviews(data.recentReviews);
      
      // Update top performers
      updateTopPerformers(data.topPerformers);
    }
    
    // Update stat cards with summary data
    function updateStatCards(data) {
      document.getElementById('totalReviews').textContent = data.totalReviews;
      document.getElementById('excellentCount').textContent = data.excellentCount;
      document.getElementById('goodCount').textContent = data.goodCount;
      document.getElementById('needsImprovementCount').textContent = data.needsImprovementCount;
      document.getElementById('averageScore').textContent = data.averageScore.toFixed(1) + '%';
    }
    
    // Update score trend chart
    function updateScoreTrendChart(data, period) {
      const ctx = document.getElementById('scoreTrendChart').getContext('2d');
      
      // Get trend data based on selected period
      const trendData = period === 'weekly' ? data.weeklyScoreTrend : data.monthlyScoreTrend;
      
      // Prepare chart data
      const labels = [];
      const scores = [];
      const countData = [];
      
      // Sort periods chronologically
      const sortedPeriods = Object.keys(trendData).sort();
      
      sortedPeriods.forEach(period => {
        const formattedLabel = formatPeriodLabel(period, period === 'weekly');
        labels.push(formattedLabel);
        scores.push(trendData[period].averageScore);
        countData.push(trendData[period].reviewCount);
      });
      
      // Destroy previous chart if it exists
      if (window.scoreTrendChart) {
        window.scoreTrendChart.destroy();
      }
      
      // Create chart
      window.scoreTrendChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Average Score (%)',
              data: scores,
              borderColor: chartColors.primary,
              backgroundColor: 'rgba(78, 115, 223, 0.05)',
              borderWidth: 3,
              pointBackgroundColor: chartColors.primary,
              pointBorderColor: '#fff',
              pointBorderWidth: 2,
              pointRadius: 5,
              fill: true,
              yAxisID: 'y-axis-1'
            },
            {
              label: 'Review Count',
              data: countData,
              borderColor: chartColors.info,
              backgroundColor: 'rgba(54, 185, 204, 0.05)',
              borderWidth: 2,
              pointBackgroundColor: chartColors.info,
              pointBorderColor: '#fff',
              pointBorderWidth: 2,
              pointRadius: 4,
              fill: false,
              yAxisID: 'y-axis-2'
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          tooltips: {
            mode: 'index',
            intersect: false,
            backgroundColor: '#fff',
            titleFontColor: chartColors.gray,
            bodyFontColor: chartColors.gray,
            borderColor: chartColors.gray,
            borderWidth: 1,
            xPadding: 15,
            yPadding: 15,
            displayColors: true,
            callbacks: {
              label: function(tooltipItem, data) {
                const dataset = data.datasets[tooltipItem.datasetIndex];
                const value = tooltipItem.yLabel;
                
                if (dataset.label.includes('Score')) {
                  return `${dataset.label}: ${value.toFixed(1)}%`;
                } else {
                  return `${dataset.label}: ${value}`;
                }
              }
            }
          },
          scales: {
            xAxes: [{
              gridLines: {
                drawBorder: false,
                color: "rgba(0, 0, 0, 0.05)"
              },
              ticks: {
                fontFamily: 'Nunito',
                fontColor: chartColors.gray,
                padding: 10
              }
            }],
            yAxes: [
              {
                id: 'y-axis-1',
                position: 'left',
                gridLines: {
                  drawBorder: false,
                  color: "rgba(0, 0, 0, 0.05)",
                  zeroLineColor: "rgba(0, 0, 0, 0.1)"
                },
                ticks: {
                  fontFamily: 'Nunito',
                  fontColor: chartColors.primary,
                  padding: 10,
                  min: Math.max(0, Math.min(...scores) - 5),
                  max: Math.min(100, Math.max(...scores) + 5),
                  callback: function(value) {
                    return value + '%';
                  }
                }
              },
              {
                id: 'y-axis-2',
                position: 'right',
                gridLines: {
                  drawBorder: false,
                  display: false
                },
                ticks: {
                  fontFamily: 'Nunito',
                  fontColor: chartColors.info,
                  padding: 10,
                  min: 0,
                  stepSize: 1,
                  beginAtZero: true
                }
              }
            ]
          },
          legend: {
            position: 'top',
            labels: {
              fontFamily: 'Nunito',
              fontColor: chartColors.gray,
              padding: 20
            }
          }
        }
      });
    }
    
    // Format period label for charts
    function formatPeriodLabel(period, isWeekly) {
      if (isWeekly) {
        // Format is YYYY-WXX
        const parts = period.split('-W');
        return `Week ${parts[1]}, ${parts[0]}`;
      } else {
        // Format is YYYY-MM
        const parts = period.split('-');
        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        const monthIndex = parseInt(parts[1]) - 1;
        return `${months[monthIndex]} ${parts[0]}`;
      }
    }
    
    // Update section performance chart
    function updateSectionPerformanceChart(data) {
      const ctx = document.getElementById('sectionPerformanceChart').getContext('2d');
      
      // Prepare data
      const sections = [
        'Call Opening', 
        'Risk Assessment', 
        'Communication Skills',
        'Support Effectiveness',
        'Call Closure'
      ];
      
      const scores = [
        data.sectionScores.callOpeningPercentage, 
        data.sectionScores.riskAssessmentPercentage,
        data.sectionScores.communicationSkillsPercentage,
        data.sectionScores.supportEffectivenessPercentage,
        data.sectionScores.callClosurePercentage
      ];
      
      // Destroy previous chart if it exists
      if (window.sectionPerformanceChart) {
        window.sectionPerformanceChart.destroy();
      }
      
      // Create chart
      window.sectionPerformanceChart = new Chart(ctx, {
        type: 'radar',
        data: {
          labels: sections,
          datasets: [
            {
              label: 'Performance',
              data: scores,
              backgroundColor: 'rgba(78, 115, 223, 0.3)',
              borderColor: chartColors.primary,
              borderWidth: 2,
              pointBackgroundColor: chartColors.primary,
              pointBorderColor: '#fff',
              pointHoverBackgroundColor: '#fff',
              pointHoverBorderColor: chartColors.primary,
              pointBorderWidth: 2,
              pointRadius: 4,
              pointHoverRadius: 6
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scale: {
            ticks: {
              beginAtZero: true,
              min: 0,
              max: 100,
              stepSize: 20,
              callback: function(value) {
                return value + '%';
              }
            }
          },
          tooltips: {
            backgroundColor: '#fff',
            titleFontColor: chartColors.gray,
            bodyFontColor: chartColors.gray,
            borderColor: chartColors.gray,
            borderWidth: 1,
            xPadding: 15,
            yPadding: 15,
            displayColors: false,
            callbacks: {
              label: function(tooltipItem, data) {
                return sections[tooltipItem.index] + ': ' + tooltipItem.value + '%';
              }
            }
          },
          legend: {
            display: false
          }
        }
      });
    }
    
    // Update recent reviews table
    function updateRecentReviews(reviews) {
      const tableBody = document.getElementById('recentReviewsTable');
      
      if (!reviews || reviews.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="6" class="text-center">No reviews found</td></tr>';
        return;
      }
      
      // Clear table
      tableBody.innerHTML = '';
      
      // Add review rows
      reviews.forEach(review => {
        const tr = document.createElement('tr');
        
        // Format date
        const reviewDate = new Date(review.interactionDate);
        const formattedDate = reviewDate.toLocaleDateString();
        
        // Determine score class
        let scoreClass = '';
        if (review.scorePercentage >= 90) {
          scoreClass = 'score-excellent';
        } else if (review.scorePercentage >= 75) {
          scoreClass = 'score-good';
        } else {
          scoreClass = 'score-needs-improvement';
        }
        
        // Determine status class
        let statusClass = '';
        switch(review.status) {
          case 'Draft':
            statusClass = 'status-draft';
            break;
          case 'In Progress':
            statusClass = 'status-in-progress';
            break;
          case 'Complete':
            if (review.qualityStatus === 'Excellent') {
              statusClass = 'status-excellent';
            } else if (review.qualityStatus === 'Good') {
              statusClass = 'status-good';
            } else {
              statusClass = 'status-needs-improvement';
            }
            break;
        }
        
        // Create row
        tr.innerHTML = `
          <td>${formattedDate}</td>
          <td>${review.counselorName}</td>
          <td>${review.interactionType} - ${review.interactionId}</td>
          <td class="${scoreClass}">${review.status === 'Complete' ? review.scorePercentage.toFixed(1) + '%' : 'N/A'}</td>
          <td><span class="review-status ${statusClass}">${review.status === 'Complete' ? review.qualityStatus : review.status}</span></td>
          <td>
            <div class="action-buttons">
              <button class="btn btn-icon btn-light view-review" data-id="${review.id}" title="View Review">
                <i class="fas fa-eye"></i>
              </button>
              <button class="btn btn-icon btn-light edit-review" data-id="${review.id}" title="Edit Review">
                <i class="fas fa-edit"></i>
              </button>
              ${review.status === 'Complete' ? 
                `<button class="btn btn-icon btn-light send-email" data-id="${review.id}" title="Send Email">
                  <i class="fas fa-envelope"></i>
                </button>` : ''}
            </div>
          </td>
        `;
        
        tableBody.appendChild(tr);
      });
      
      // Add event listeners to action buttons
      document.querySelectorAll('.view-review').forEach(button => {
        button.addEventListener('click', function() {
          const reviewId = this.getAttribute('data-id');
          viewQAReview(reviewId);
        });
      });
      
      document.querySelectorAll('.edit-review').forEach(button => {
        button.addEventListener('click', function() {
          const reviewId = this.getAttribute('data-id');
          editQAReview(reviewId);
        });
      });
      
      document.querySelectorAll('.send-email').forEach(button => {
        button.addEventListener('click', function() {
          const reviewId = this.getAttribute('data-id');
          sendQAReviewEmail(reviewId);
        });
      });
    }
    
    // Update top performers list
    function updateTopPerformers(performers) {
      const listContainer = document.getElementById('topPerformersList');
      
      if (!performers || performers.length === 0) {
        listContainer.innerHTML = '<div class="text-center py-4">No data available</div>';
        return;
      }
      
      listContainer.innerHTML = '';
      
      performers.forEach(performer => {
        // Get initials for avatar
        const nameParts = performer.name.split(' ');
        let initials = '';
        if (nameParts.length >= 2) {
          initials = nameParts[0].charAt(0) + nameParts[1].charAt(0);
        } else if (nameParts.length === 1) {
          initials = nameParts[0].charAt(0);
        }
        
        // Determine score class
        let scoreClass = '';
        if (performer.averageScore >= 90) {
          scoreClass = 'score-excellent';
        } else if (performer.averageScore >= 75) {
          scoreClass = 'score-good';
        } else {
          scoreClass = 'score-needs-improvement';
        }
        
        const performerCard = document.createElement('div');
        performerCard.className = 'counselor-performance-card';
        performerCard.innerHTML = `
          <div class="counselor-avatar">${initials}</div>
          <div class="counselor-info">
            <h6 class="counselor-name">${performer.name}</h6>
            <p class="counselor-meta">${performer.reviewCount} reviews</p>
          </div>
          <div class="counselor-score ${scoreClass}">${performer.averageScore.toFixed(1)}%</div>
        `;
        
        listContainer.appendChild(performerCard);
      });
    }
    
    // View QA review function
    function viewQAReview(reviewId) {
      google.script.run.openQAReportWithId(reviewId);
    }
    
    // Edit QA review function
    function editQAReview(reviewId) {
      google.script.run.openQAReviewForm(reviewId);
    }
    
    // Send QA review email function
    function sendQAReviewEmail(reviewId) {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Sending email...';
      
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Email sent successfully!', 'success');
          } else {
            showAlert('Error sending email: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .sendQAReviewEmail(reviewId);
    }
    
    // Show alert message
    function showAlert(message, type) {
      const alertContainer = document.getElementById('alertContainer');
      const alertMessage = document.getElementById('alertMessage');
      
      alertMessage.textContent = message;
      alertMessage.className = `alert alert-${type}`;
      alertContainer.style.display = 'block';
      
      // Auto-hide after 5 seconds
      setTimeout(function() {
        alertContainer.style.display = 'none';
      }, 5000);
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>QA Reports</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css for animations -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <!-- DataTables CSS -->
  <link rel="stylesheet" href="https://cdn.datatables.net/1.10.22/css/dataTables.bootstrap4.min.css">
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --shadow-lg: 0 1rem 3rem rgba(0,0,0,.175);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .container-fluid {
      padding: 30px !important;
    }
    
    /* Header bar */
    .system-info {
      background-color: var(--gray-800);
      color: white;
      padding: 8px 15px;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }
    
    .system-info p {
      margin: 0;
    }
    
    /* Page header */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .page-title i {
      color: var(--primary);
      margin-right: 12px;
    }
    
    /* Cards */
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.75rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
      overflow: hidden;
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Filters section */
    .filters-section {
      margin-bottom: 25px;
      background: #fff;
      border-radius: 0.75rem;
      padding: 20px 25px;
      box-shadow: var(--shadow-sm);
    }
    
    .filters-title {
      font-weight: 600;
      color: var(--gray-700);
      margin-bottom: 15px;
    }
    
    .filter-form {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      align-items: flex-end;
    }
    
    .filter-group {
      flex: 1;
      min-width: 200px;
    }
    
    .filter-label {
      font-weight: 600;
      color: var(--gray-700);
      margin-bottom: 8px;
      display: block;
      font-size: 0.9rem;
    }
    
    .form-control {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    /* QA Status Badges */
    .qa-status {
      display: inline-flex;
      align-items: center;
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.75rem;
      font-weight: 600;
    }
    
    .status-excellent {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .status-good {
      background-color: rgba(54, 185, 204, 0.1);
      color: var(--info);
    }
    
    .status-needs-improvement {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    .status-draft {
      background-color: rgba(133, 135, 150, 0.1);
      color: var(--secondary);
    }
    
    .status-in-progress {
      background-color: rgba(78, 115, 223, 0.1);
      color: var(--primary);
    }
    
    /* Score values */
    .score-excellent {
      color: var(--success);
      font-weight: 700;
    }
    
    .score-good {
      color: var(--info);
      font-weight: 700;
    }
    
    .score-needs-improvement {
      color: var(--danger);
      font-weight: 700;
    }
    
    /* DataTables overrides */
    .dataTables_wrapper {
      font-family: 'Nunito', sans-serif;
    }
    
    .dataTables_wrapper .dataTables_length select,
    .dataTables_wrapper .dataTables_filter input {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 5px 10px;
    }
    
    .dataTables_wrapper .dataTables_length select:focus,
    .dataTables_wrapper .dataTables_filter input:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    .dataTables_wrapper .dataTables_paginate .paginate_button.current {
      background: var(--primary);
      color: white !important;
      border: 1px solid var(--primary);
      border-radius: 5px;
    }
    
    .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover {
      background: var(--primary-dark) !important;
      color: white !important;
      border: 1px solid var(--primary-dark);
    }
    
    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
      background: var(--gray-200);
      color: var(--gray-700) !important;
      border: 1px solid var(--gray-200);
    }
    
    /* Buttons */
    .btn {
      border-radius: 10px;
      padding: 8px 16px;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
    }
    
    .btn i {
      margin-right: 8px;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-success {
      background: var(--success);
      border-color: var(--success);
    }
    
    .btn-success:hover {
      background-color: #169b6b;
      border-color: #169b6b;
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(28,200,138,.15);
    }
    
    .btn-light {
      background: var(--gray-100);
      color: var(--gray-700);
      border-color: var(--gray-100);
    }
    
    .btn-light:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    .btn-sm {
      padding: 5px 12px;
      font-size: 0.875rem;
    }
    
    .btn-icon {
      width: 30px;
      height: 30px;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 6px;
    }
    
    /* Action buttons */
    .action-buttons {
      display: flex;
      gap: 5px;
    }
    
    /* Alert messages */
    .alert {
      border-radius: 10px;
      padding: 15px 20px;
      margin-bottom: 20px;
      border: none;
    }
    
    .alert-success {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .alert-danger {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--gray-200);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 600;
      color: var(--primary);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Review detail section */
    .review-detail-heading {
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .review-detail-title {
      margin: 0;
      font-size: 1.4rem;
    }
    
    .review-score-display {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-bottom: 20px;
    }
    
    .score-circle {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.8rem;
      font-weight: 700;
      background: var(--primary);
      color: white;
    }
    
    .score-details h5 {
      margin: 0 0 5px;
    }
    
    .score-details p {
      margin: 0;
      color: var(--gray-600);
    }
    
    .score-badge {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 12px;
      font-size: 0.85rem;
      font-weight: 600;
      margin-left: auto;
    }
    
    .section-scores {
      margin-bottom: 20px;
    }
    
    .section-item {
      padding: 12px 15px;
      border-radius: 8px;
      background: var(--gray-100);
      margin-bottom: 8px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .section-name {
      font-weight: 600;
      margin: 0;
    }
    
    .section-criteria {
      margin-bottom: 25px;
    }
    
    .criterion-item {
      padding: 15px;
      border-radius: 8px;
      background: var(--gray-100);
      margin-bottom: 12px;
    }
    
    .criterion-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 10px;
    }
    
    .criterion-title {
      font-weight: 600;
      margin: 0;
    }
    
    .criterion-rating {
      display: inline-block;
      padding: 2px 8px;
      border-radius: 10px;
      font-size: 0.75rem;
      font-weight: 600;
    }
    
    .rating-fully-met {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .rating-partially-met {
      background-color: rgba(246, 194, 62, 0.1);
      color: var(--warning);
    }
    
    .rating-not-met {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    .rating-na {
      background-color: rgba(133, 135, 150, 0.1);
      color: var(--secondary);
    }
    
    .criterion-notes {
      padding: 10px;
      background: #fff;
      border-radius: 6px;
      border-left: 3px solid var(--gray-300);
      font-size: 0.9rem;
      color: var(--gray-700);
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .container-fluid {
        padding: 15px !important;
      }
      
      .page-header {
        padding: 15px 20px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .page-actions {
        margin-top: 15px;
        width: 100%;
      }
      
      .review-detail-heading {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .review-score-display {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .score-badge {
        margin-left: 0;
        margin-top: 10px;
      }
    }
  </style>
</head>
<body>
  <!-- System Info Bar - Using dynamic loading, no hardcoded values -->
  <div class="system-info">
    <p>Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): <span id="currentDate">Loading...</span></p>
    <p>Current User: <span id="currentUser">Loading...</span></p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading QA reports...</div>
  </div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <h1 class="page-title">
        <i class="fas fa-chart-bar"></i> QA Reports
      </h1>
      <div class="page-actions">
        <button id="newReviewBtn" class="btn btn-success mr-2">
          <i class="fas fa-plus"></i> New QA Review
        </button>
        <button id="viewDashboardBtn" class="btn btn-light mr-2">
          <i class="fas fa-tachometer-alt"></i> QA Dashboard
        </button>
        <button id="exportDataBtn" class="btn btn-light">
          <i class="fas fa-download"></i> Export Data
        </button>
      </div>
    </div>
    
    <!-- Alert Messages -->
    <div id="alertContainer" style="display: none;">
      <div id="alertMessage" class="alert" role="alert"></div>
    </div>
    
    <!-- Main content container -->
    <div id="mainContent">
      <!-- Filters Section -->
      <div class="filters-section animate__animated animate__fadeIn">
        <h5 class="filters-title">
          <i class="fas fa-filter text-primary mr-2"></i> QA Review Filters
        </h5>
        <div class="filter-form">
          <div class="filter-group">
            <label class="filter-label" for="dateRangeFilter">Date Range</label>
            <select class="form-control" id="dateRangeFilter">
              <option value="7">Last 7 Days</option>
              <option value="30" selected>Last 30 Days</option>
              <option value="90">Last 90 Days</option>
              <option value="180">Last 6 Months</option>
              <option value="365">Last Year</option>
              <option value="custom">Custom Range</option>
            </select>
          </div>
          <div class="filter-group" id="customDateRange" style="display: none;">
            <label class="filter-label" for="startDateFilter">From</label>
            <input type="date" class="form-control" id="startDateFilter">
          </div>
          <div class="filter-group" id="customDateRangeTo" style="display: none;">
            <label class="filter-label" for="endDateFilter">To</label>
            <input type="date" class="form-control" id="endDateFilter">
          </div>
          <div class="filter-group">
            <label class="filter-label" for="counselorFilter">Counselor</label>
            <select class="form-control" id="counselorFilter">
              <option value="all" selected>All Counselors</option>
              <!-- Counselors will be loaded dynamically -->
            </select>
          </div>
          <div class="filter-group">
            <label class="filter-label" for="statusFilter">Review Status</label>
            <select class="form-control" id="statusFilter">
              <option value="all" selected>All Status</option>
              <option value="Complete">Complete</option>
              <option value="In Progress">In Progress</option>
              <option value="Draft">Draft</option>
            </select>
          </div>
          <div class="filter-group">
            <label class="filter-label" for="qualityStatusFilter">Quality Status</label>
            <select class="form-control" id="qualityStatusFilter">
              <option value="all" selected>All Quality Status</option>
              <option value="Excellent">Excellent</option>
              <option value="Good">Good</option>
              <option value="Needs Improvement">Needs Improvement</option>
            </select>
          </div>
          <div style="align-self: flex-end;">
            <button id="applyFiltersBtn" class="btn btn-primary">
              <i class="fas fa-search"></i> Search
            </button>
            <button id="resetFiltersBtn" class="btn btn-light ml-2">
              <i class="fas fa-undo"></i> Reset
            </button>
          </div>
        </div>
      </div>
      
      <!-- QA Reviews Table -->
      <div class="card animate__animated animate__fadeIn">
        <div class="card-header">
          <h5 class="card-header-title">
            <i class="fas fa-list text-primary mr-2"></i> QA Reviews
          </h5>
          <div class="card-actions">
            <button id="exportResultsBtn" class="btn btn-sm btn-light">
              <i class="fas fa-download"></i> Export Results
            </button>
          </div>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table id="qaReviewsTable" class="table table-bordered table-hover" width="100%">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Date</th>
                  <th>Counselor</th>
                  <th>Interaction Type</th>
                  <th>Interaction ID</th>
                  <th>Reviewer</th>
                  <th>Score</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <!-- Data will be loaded dynamically -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Review Detail Container (initially hidden) -->
    <div id="reviewDetailContainer" class="animate__animated animate__fadeIn" style="display: none;">
      <!-- Back button -->
      <button id="backToListBtn" class="btn btn-light mb-3">
        <i class="fas fa-arrow-left"></i> Back to List
      </button>
      
      <!-- Review Detail Content -->
      <div class="card">
        <div class="card-header">
          <h5 class="card-header-title">
            <i class="fas fa-clipboard-check text-primary mr-2"></i> QA Review Details
          </h5>
          <div class="card-actions">
            <button id="editReviewBtn" class="btn btn-sm btn-primary mr-2">
              <i class="fas fa-edit"></i> Edit
            </button>
            <button id="emailReviewBtn" class="btn btn-sm btn-light">
              <i class="fas fa-envelope"></i> Email
            </button>
          </div>
        </div>
        <div class="card-body" id="reviewDetailContent">
          <!-- Content will be loaded dynamically -->
          <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
              <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-3">Loading review details...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Bootstrap, jQuery, and DataTables -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.datatables.net/1.10.22/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/1.10.22/js/dataTables.bootstrap4.min.js"></script>
  
  <script>
    // Global variables
    let dataTable = null;
    let currentReviewId = null;
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      // Load user information
      loadUserInfo();
      
      // Set default date for custom range
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      document.getElementById('startDateFilter').value = formatDateForInput(thirtyDaysAgo);
      document.getElementById('endDateFilter').value = formatDateForInput(today);
      
      // Load counselors
      loadCounselors();
      
      // Initialize DataTable
      initializeDataTable();
      
      // Add event listeners
      addEventListeners();
      
      // Check if there's a review ID in the URL
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has('id')) {
        const reviewId = urlParams.get('id');
        loadReviewDetail(reviewId);
      } else {
        // Hide loading overlay after initialization is complete
        document.getElementById('loadingOverlay').style.display = 'none';
      }
    });
    
    // Load user information
    function loadUserInfo() {
      google.script.run
        .withSuccessHandler(function(info) {
          document.getElementById('currentDate').textContent = info.formattedDate;
          document.getElementById('currentUser').textContent = info.username;
        })
        .withFailureHandler(function(error) {
          console.error('Error loading user info:', error);
          // Default values if there's an error
          document.getElementById('currentDate').textContent = new Date().toISOString().replace('T', ' ').split('.')[0];
          document.getElementById('currentUser').textContent = 'current_user';
        })
        .getCurrentUserInfo();
    }
    
    // Format date for input fields
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }
    
    // Load counselors
    function loadCounselors() {
      google.script.run
        .withSuccessHandler(function(counselors) {
          const select = document.getElementById('counselorFilter');
          
          // Clear existing options except the first one
          while (select.options.length > 1) {
            select.remove(1);
          }
          
          // Add counselors to the dropdown
          counselors.forEach(function(counselor) {
            const option = document.createElement('option');
            option.value = counselor.email;
            option.textContent = counselor.firstName + ' ' + counselor.lastName;
            select.appendChild(option);
          });
        })
        .withFailureHandler(function(error) {
          console.error('Error loading counselors:', error);
        })
        .getTeamMembers();
    }
    
    // Initialize DataTable
    function initializeDataTable() {
      dataTable = $('#qaReviewsTable').DataTable({
        processing: true,
        ordering: true,
        searching: true,
        responsive: true,
        lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
        language: {
          search: "Filter results:",
          lengthMenu: "Show _MENU_ entries per page",
          info: "Showing _START_ to _END_ of _TOTAL_ entries",
          infoEmpty: "Showing 0 to 0 of 0 entries",
          infoFiltered: "(filtered from _MAX_ total entries)"
        },
        columnDefs: [
          // Hide ID column
          { targets: 0, visible: false },
          // Format date
          { targets: 1, render: function(data) { return new Date(data).toLocaleDateString(); } },
          // Format score
          { 
            targets: 6, 
            render: function(data, type, row) {
              if (row[7] !== 'Complete') return 'N/A';
              
              let scoreClass = '';
              if (data >= 90) {
                scoreClass = 'score-excellent';
              } else if (data >= 75) {
                scoreClass = 'score-good';
              } else {
                scoreClass = 'score-needs-improvement';
              }
              
              return `<span class="${scoreClass}">${data.toFixed(1)}%</span>`;
            } 
          },
          // Format status
          { 
            targets: 7, 
            render: function(data, type, row) {
              let statusClass = '';
              let displayText = data;
              
              if (data === 'Complete') {
                // Use quality status for complete reviews
                statusClass = row[7] === 'Excellent' ? 'status-excellent' : 
                              row[7] === 'Good' ? 'status-good' : 'status-needs-improvement';
                displayText = row[8]; // Quality status
              } else if (data === 'In Progress') {
                statusClass = 'status-in-progress';
              } else {
                statusClass = 'status-draft';
              }
              
              return `<span class="qa-status ${statusClass}">${displayText}</span>`;
            }
          },
          // Action buttons
          {
            targets: 8,
            render: function(data, type, row) {
              return `
                <div class="action-buttons">
                  <button class="btn btn-icon btn-light view-review" data-id="${row[0]}" title="View Details">
                    <i class="fas fa-eye"></i>
                  </button>
                  <button class="btn btn-icon btn-light edit-review" data-id="${row[0]}" title="Edit Review">
                    <i class="fas fa-edit"></i>
                  </button>
                  ${row[7] === 'Complete' ? 
                    `<button class="btn btn-icon btn-light send-email" data-id="${row[0]}" title="Send Email">
                      <i class="fas fa-envelope"></i>
                    </button>` : ''}
                </div>
              `;
            }
          }
        ],
        drawCallback: function() {
          // Add event listeners to action buttons
          addActionButtonListeners();
        }
      });
      
      // Initial data load
      loadTableData();
    }
    
    // Add action button event listeners
    function addActionButtonListeners() {
      // View review buttons
      document.querySelectorAll('.view-review').forEach(button => {
        button.addEventListener('click', function() {
          const reviewId = this.getAttribute('data-id');
          loadReviewDetail(reviewId);
        });
      });
      
      // Edit review buttons
      document.querySelectorAll('.edit-review').forEach(button => {
        button.addEventListener('click', function() {
          const reviewId = this.getAttribute('data-id');
          editReview(reviewId);
        });
      });
      
      // Send email buttons
      document.querySelectorAll('.send-email').forEach(button => {
        button.addEventListener('click', function() {
          const reviewId = this.getAttribute('data-id');
          sendEmail(reviewId);
        });
      });
    }
    
    // Add general event listeners
    function addEventListeners() {
      // Date range filter change
      document.getElementById('dateRangeFilter').addEventListener('change', function() {
        const customRangeFields = document.getElementById('customDateRange');
        const customRangeToFields = document.getElementById('customDateRangeTo');
        
        if (this.value === 'custom') {
          customRangeFields.style.display = 'block';
          customRangeToFields.style.display = 'block';
        } else {
          customRangeFields.style.display = 'none';
          customRangeToFields.style.display = 'none';
        }
      });
      
      // Apply filters button
      document.getElementById('applyFiltersBtn').addEventListener('click', function() {
        loadTableData();
      });
      
      // Reset filters button
      document.getElementById('resetFiltersBtn').addEventListener('click', function() {
        document.getElementById('dateRangeFilter').value = '30';
        document.getElementById('counselorFilter').value = 'all';
        document.getElementById('statusFilter').value = 'all';
        document.getElementById('qualityStatusFilter').value = 'all';
        document.getElementById('customDateRange').style.display = 'none';
        document.getElementById('customDateRangeTo').style.display = 'none';
        loadTableData();
      });
      
      // Back to list button
      document.getElementById('backToListBtn').addEventListener('click', function() {
        showReviewsList();
      });
      
      // Edit review button in detail view
      document.getElementById('editReviewBtn').addEventListener('click', function() {
        if (currentReviewId) {
          editReview(currentReviewId);
        }
      });
      
      // Email review button in detail view
      document.getElementById('emailReviewBtn').addEventListener('click', function() {
        if (currentReviewId) {
          sendEmail(currentReviewId);
        }
      });
      
      // Export results button
      document.getElementById('exportResultsBtn').addEventListener('click', function() {
        exportResults();
      });
      
      // Navigation buttons
      document.getElementById('newReviewBtn').addEventListener('click', function() {
        google.script.run.openQAReviewForm();
      });
      
      document.getElementById('viewDashboardBtn').addEventListener('click', function() {
        google.script.run.openQADashboard();
      });
      
      document.getElementById('exportDataBtn').addEventListener('click', function() {
        google.script.run.openQAExport();
      });
    }
    
    // Load table data based on filters
    function loadTableData() {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Loading QA reviews...';
      
      // Get filter values
      const dateRangeFilter = document.getElementById('dateRangeFilter').value;
      const counselorFilter = document.getElementById('counselorFilter').value;
      const statusFilter = document.getElementById('statusFilter').value;
      const qualityStatusFilter = document.getElementById('qualityStatusFilter').value;
      
      // Prepare date range
      let startDate = null;
      let endDate = new Date(); // Today
      
      if (dateRangeFilter === 'custom') {
        startDate = new Date(document.getElementById('startDateFilter').value);
        endDate = new Date(document.getElementById('endDateFilter').value);
        // Set end date to end of the day
        endDate.setHours(23, 59, 59, 999);
      } else {
        // Calculate start date based on selected range
        startDate = new Date();
        startDate.setDate(startDate.getDate() - parseInt(dateRangeFilter));
      }
      
      // Prepare filter options
      const options = {
        startDate: startDate,
        endDate: endDate
      };
      
      if (counselorFilter !== 'all') {
        options.counselorEmail = counselorFilter;
      }
      
      if (statusFilter !== 'all') {
        options.status = statusFilter;
      }
      
      if (qualityStatusFilter !== 'all') {
        options.qualityStatus = qualityStatusFilter;
      }
      
      // Call server function to get filtered QA reviews
      google.script.run
        .withSuccessHandler(function(reviews) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (!reviews) {
            showAlert('Error loading QA reviews', 'danger');
            return;
          }
          
          // Clear and reload table
          dataTable.clear();
          
          // Add reviews to table
          reviews.forEach(review => {
            dataTable.row.add([
              review.id, 
              review.interactionDate,
              review.counselorName,
              review.interactionType,
              review.interactionId,
              review.reviewer,
              review.scorePercentage || 0,
              review.status,
              review.qualityStatus || ''
            ]);
          });
          
          dataTable.draw();
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error loading QA reviews: ' + error, 'danger');
        })
        .getQAReviews(options);
    }
    
    // Load review detail
    function loadReviewDetail(reviewId) {
      // Store current review ID
      currentReviewId = reviewId;
      
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Loading review details...';
      
      // Call server function to get review details
      google.script.run
        .withSuccessHandler(function(review) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (!review) {
            showAlert('Error loading review details', 'danger');
            return;
          }
          
          // Show review detail and hide list
          showReviewDetail();
          
          // Render review details
          renderReviewDetail(review);
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error loading review details: ' + error, 'danger');
        })
        .getQAReviewById(reviewId);
    }
    
    // Show review detail and hide main content
    function showReviewDetail() {
      document.getElementById('mainContent').style.display = 'none';
      document.getElementById('reviewDetailContainer').style.display = 'block';
    }
    
    // Show reviews list and hide detail view
    function showReviewsList() {
      document.getElementById('mainContent').style.display = 'block';
      document.getElementById('reviewDetailContainer').style.display = 'none';
      currentReviewId = null;
    }
    
    // Render review detail content
    function renderReviewDetail(review) {
      const contentContainer = document.getElementById('reviewDetailContent');
      
      // Format interaction date
      const interactionDate = new Date(review.interactionDate).toLocaleDateString();
      
      // Determine quality status color class
      let statusColorClass = '';
      if (review.status === 'Complete') {
        if (review.qualityStatus === 'Excellent') {
          statusColorClass = 'status-excellent';
        } else if (review.qualityStatus === 'Good') {
          statusColorClass = 'status-good';
        } else {
          statusColorClass = 'status-needs-improvement';
        }
      } else if (review.status === 'In Progress') {
        statusColorClass = 'status-in-progress';
      } else {
        statusColorClass = 'status-draft';
      }
      
      // Create HTML content
      let content = `
        <div class="review-detail-heading">
          <h4 class="review-detail-title">QA Review: ${review.counselorName} - ${interactionDate}</h4>
          <span class="qa-status ${statusColorClass}">${review.status === 'Complete' ? review.qualityStatus : review.status}</span>
        </div>
        
        <div class="row mb-4">
          <div class="col-md-6">
            <div class="card">
              <div class="card-body">
                <h5 class="mb-3">Interaction Details</h5>
                <table class="table table-sm">
                  <tr>
                    <td><strong>Counselor:</strong></td>
                    <td>${review.counselorName}</td>
                  </tr>
                  <tr>
                    <td><strong>Interaction Date:</strong></td>
                    <td>${interactionDate}</td>
                  </tr>
                  <tr>
                    <td><strong>Interaction Type:</strong></td>
                    <td>${review.interactionType}</td>
                  </tr>
                  <tr>
                    <td><strong>Interaction ID:</strong></td>
                    <td>${review.interactionId}</td>
                  </tr>
                  <tr>
                    <td><strong>Interaction Length:</strong></td>
                    <td>${review.interactionLength || 'N/A'} minutes</td>
                  </tr>
                  <tr>
                    <td><strong>Shadow Session:</strong></td>
                    <td>${review.shadowSession ? 'Yes' : 'No'}</td>
                  </tr>
                </table>
              </div>
            </div>
          </div>
          
          <div class="col-md-6">
            <div class="card">
              <div class="card-body">
                <h5 class="mb-3">Review Information</h5>
                <table class="table table-sm">
                  <tr>
                    <td><strong>Reviewer:</strong></td>
                    <td>${review.reviewer}</td>
                  </tr>
                  <tr>
                    <td><strong>Status:</strong></td>
                    <td>${review.status}</td>
                  </tr>
                  <tr>
                    <td><strong>Quality Status:</strong></td>
                    <td>${review.qualityStatus || 'N/A'}</td>
                  </tr>
                  <tr>
                    <td><strong>Score:</strong></td>
                    <td>${review.scorePercentage ? review.scorePercentage.toFixed(1) + '%' : 'N/A'}</td>
                  </tr>
                  <tr>
                    <td><strong>Created Date:</strong></td>
                    <td>${review.createdDate ? new Date(review.createdDate).toLocaleDateString() : 'N/A'}</td>
                  </tr>
                  <tr>
                    <td><strong>Last Updated:</strong></td>
                    <td>${review.lastUpdated ? new Date(review.lastUpdated).toLocaleDateString() : 'N/A'}</td>
                  </tr>
                </table>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Summary section
      if (review.interactionSummary) {
        content += `
          <div class="card mb-4">
            <div class="card-body">
              <h5 class="mb-3">Interaction Summary</h5>
              <p>${review.interactionSummary}</p>
            </div>
          </div>
        `;
      }
      
      // Section scores and criteria evaluations (if review is not in draft)
      if (review.status !== 'Draft' && review.evaluation) {
        // Score display
        content += `
          <div class="card mb-4">
            <div class="card-body">
              <div class="review-score-display">
                <div class="score-circle">${review.scorePercentage ? review.scorePercentage.toFixed(0) + '%' : 'N/A'}</div>
                <div class="score-details">
                  <h5>Quality Score</h5>
                  <p>${review.totalPoints || 0} points out of ${review.totalPossible || 0} possible</p>
                </div>
                <span class="score-badge ${statusColorClass}">${review.qualityStatus || review.status}</span>
              </div>
              
              <h5 class="mb-3">Section Scores</h5>
              <div class="section-scores">
        `;
        
        // Define sections
        const sections = [
          { key: 'callOpening', name: 'Call Opening', points: review.callOpeningPoints, possible: review.callOpeningPossible },
          { key: 'riskAssessment', name: 'Risk Assessment', points: review.riskAssessmentPoints, possible: review.riskAssessmentPossible },
          { key: 'communicationSkills', name: 'Communication Skills', points: review.communicationSkillsPoints, possible: review.communicationSkillsPossible },
          { key: 'supportEffectiveness', name: 'Support Effectiveness', points: review.supportEffectivenessPoints, possible: review.supportEffectivenessPossible },
          { key: 'callClosure', name: 'Call Closure', points: review.callClosurePoints, possible: review.callClosurePossible }
        ];
        
        // Add section score bars
        sections.forEach(section => {
          const percentage = section.possible > 0 ? (section.points / section.possible) * 100 : 0;
          let scoreClass = '';
          
          if (percentage >= 90) {
            scoreClass = 'score-excellent';
          } else if (percentage >= 75) {
            scoreClass = 'score-good';
          } else {
            scoreClass = 'score-needs-improvement';
          }
          
          content += `
            <div class="section-item">
              <h6 class="section-name">${section.name}</h6>
              <div class="${scoreClass}">${section.points || 0}/${section.possible || 0} (${percentage.toFixed(1)}%)</div>
            </div>
          `;
        });
        
        content += `
              </div>
            </div>
          </div>
        `;
        
        // Evaluation criteria sections
        content += `<h5 class="mb-3">Evaluation Criteria</h5>`;
        
        // Define sections and their criteria
        const criteriaData = {
          callOpening: ['answeredPromptly', 'openingMessage'],
          riskAssessment: ['screenerQuestions', 'empathyRapport'],
          communicationSkills: ['activeListening', 'inclusiveLanguage', 'emotionalResponse'],
          supportEffectiveness: ['relevantResources', 'copingStrategies'],
          callClosure: ['summarizedPoints', 'closureProcess']
        };
        
        // Criteria display names
        const criteriaNames = {
          answeredPromptly: 'Answered interaction in less than 20 seconds of joining',
          openingMessage: 'Opening message completed with tact',
          screenerQuestions: 'SASS/Screener questions attempted at least twice (unless contact requested otherwise)',
          empathyRapport: 'Used creative non-judgmental empathy and built rapport',
          activeListening: 'Demonstrated active listening through reflective responses',
          inclusiveLanguage: 'Used appropriate LGBTQ+ inclusive language',
          emotionalResponse: 'Responded to emotional content with appropriate empathy',
          relevantResources: 'Provided appropriate resources relevant to the contact\'s needs',
          copingStrategies: 'Helped identify coping strategies or action steps',
          summarizedPoints: 'Summarized key points of the interaction',
          closureProcess: 'Completed closure process appropriately'
        };
        
        // Rating display text
        const ratingText = {
          '2': 'Fully Met',
          '1': 'Partially Met',
          '0': 'Not Met',
          'NA': 'N/A'
        };
        
        // Rating classes
        const ratingClasses = {
          '2': 'rating-fully-met',
          '1': 'rating-partially-met',
          '0': 'rating-not-met',
          'NA': 'rating-na'
        };
        
        // For each section
        Object.keys(criteriaData).forEach(sectionKey => {
          const sectionName = sections.find(s => s.key === sectionKey).name;
          
          content += `
            <div class="card mb-4">
              <div class="card-header">
                <h5 class="card-header-title">${sectionName}</h5>
              </div>
              <div class="card-body">
                <div class="section-criteria">
          `;
          
          // For each criterion in the section
          criteriaData[sectionKey].forEach(criterion => {
            const rating = review.evaluation[criterion];
            const notes = review.evaluation[criterion + 'Notes'] || '';
            
            if (rating) {
              content += `
                <div class="criterion-item">
                  <div class="criterion-header">
                    <h6 class="criterion-title">${criteriaNames[criterion]}</h6>
                    <span class="criterion-rating ${ratingClasses[rating]}">${ratingText[rating]} (${rating === 'NA' ? 'N/A' : rating})</span>
                  </div>
                  ${notes ? `<div class="criterion-notes">${notes}</div>` : ''}
                </div>
              `;
            }
          });
          
          content += `
                </div>
              </div>
            </div>
          `;
        });
      }
      
      // Overall feedback and follow-up actions (if complete)
      if (review.status === 'Complete' && review.overallFeedback) {
        content += `
          <div class="card mb-4">
            <div class="card-header">
              <h5 class="card-header-title">Overall Feedback</h5>
            </div>
            <div class="card-body">
              <p>${review.overallFeedback}</p>
            </div>
          </div>
        `;
        
        // Action items
        if (review.actionItems && review.actionItems.length > 0) {
          content += `
            <div class="card mb-4">
              <div class="card-header">
                <h5 class="card-header-title">Follow-Up Actions</h5>
              </div>
              <div class="card-body">
                <ul class="list-group">
          `;
          
          review.actionItems.forEach(item => {
            content += `
              <li class="list-group-item">
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="action_${item.text.replace(/\s+/g, '_')}" ${item.completed ? 'checked' : ''} disabled>
                  <label class="custom-control-label" for="action_${item.text.replace(/\s+/g, '_')}">${item.text}</label>
                </div>
              </li>
            `;
          });
          
          content += `
                </ul>
              </div>
            </div>
          `;
        }
      }
      
      // Render the content
      contentContainer.innerHTML = content;
    }
    
    // Edit a review
    function editReview(reviewId) {
      google.script.run.openQAReviewForm(reviewId);
    }
    
    // Send email for review
    function sendEmail(reviewId) {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Sending email...';
      
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Email sent successfully!', 'success');
          } else {
            showAlert('Error sending email: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .sendQAReviewEmail(reviewId);
    }
        // Export results based on current filters
    function exportResults() {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Preparing export...';
      
      // Get filter values
      const dateRangeFilter = document.getElementById('dateRangeFilter').value;
      const counselorFilter = document.getElementById('counselorFilter').value;
      const statusFilter = document.getElementById('statusFilter').value;
      const qualityStatusFilter = document.getElementById('qualityStatusFilter').value;
      
      // Prepare date range
      let startDate = null;
      let endDate = new Date(); // Today
      
      if (dateRangeFilter === 'custom') {
        startDate = new Date(document.getElementById('startDateFilter').value);
        endDate = new Date(document.getElementById('endDateFilter').value);
        // Set end date to end of the day
        endDate.setHours(23, 59, 59, 999);
      } else {
        // Calculate start date based on selected range
        startDate = new Date();
        startDate.setDate(startDate.getDate() - parseInt(dateRangeFilter));
      }
      
      // Prepare filter options
      const options = {
        startDate: startDate,
        endDate: endDate,
        format: 'excel', // Default format
        includeDetails: true
      };
      
      if (counselorFilter !== 'all') {
        options.counselorEmail = counselorFilter;
      }
      
      if (statusFilter !== 'all') {
        options.status = statusFilter;
      }
      
      if (qualityStatusFilter !== 'all') {
        options.qualityStatus = qualityStatusFilter;
      }
      
      // Call server function to export data
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Export successful! Opening the exported file...', 'success');
            
            // Open the exported file
            window.open(result.url, '_blank');
          } else {
            showAlert('Error exporting data: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .exportQAData(options);
    }
    
    // Show alert message
    function showAlert(message, type) {
      const alertContainer = document.getElementById('alertContainer');
      const alertMessage = document.getElementById('alertMessage');
      
      alertMessage.textContent = message;
      alertMessage.className = `alert alert-${type}`;
      alertContainer.style.display = 'block';
      
      // Auto-hide after 5 seconds
      setTimeout(function() {
        alertContainer.style.display = 'none';
      }, 5000);
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>QA Export</title>
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Animate.css for animations -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  
  <style>
    :root {
      --primary: #4e73df;
      --primary-light: #5a80e6;
      --primary-dark: #2e59d9;
      --secondary: #858796;
      --success: #1cc88a;
      --info: #36b9cc;
      --warning: #f6c23e;
      --danger: #e74a3b;
      --light: #f8f9fc;
      --dark: #5a5c69;
      --gray-100: #f8f9fc;
      --gray-200: #eaecf4;
      --gray-300: #dddfeb;
      --gray-400: #d1d3e2;
      --gray-500: #b7b9cc;
      --gray-600: #858796;
      --gray-700: #6e707e;
      --gray-800: #5a5c69;
      --gray-900: #3a3b45;
      --shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
      --shadow-sm: 0 .125rem .25rem 0 rgba(58,59,69,.1);
      --shadow-lg: 0 1rem 3rem rgba(0,0,0,.175);
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Nunito', sans-serif;
      background: var(--gray-100);
      color: var(--gray-800);
      padding: 0;
      margin: 0;
    }
    
    h1, h2, h3, h4, h5, h6, .heading {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
    }
    
    .container-fluid {
      padding: 30px !important;
    }
    
    /* Header bar */
    .system-info {
      background-color: var(--gray-800);
      color: white;
      padding: 8px 15px;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }
    
    .system-info p {
      margin: 0;
    }
    
    /* Page header */
    .page-header {
      background: #fff;
      border-radius: 0.75rem;
      padding: 25px 30px;
      margin-bottom: 30px;
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
    
    .page-title {
      font-size: 1.75rem;
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .page-title i {
      color: var(--primary);
      margin-right: 12px;
    }
    
    /* Cards */
    .card {
      border: none;
      box-shadow: var(--shadow);
      border-radius: 0.75rem;
      background: #fff;
      transition: var(--transition);
      margin-bottom: 30px;
      overflow: hidden;
    }
    
    .card-header {
      background: #fff;
      border-bottom: 1px solid var(--gray-200);
      padding: 1.25rem 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-header-title {
      margin: 0;
      font-weight: 600;
      font-size: 1.1rem;
      color: var(--gray-900);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Export options card */
    .export-option-card {
      border-radius: 0.75rem;
      box-shadow: var(--shadow-sm);
      background: #fff;
      margin-bottom: 20px;
      transition: var(--transition);
      cursor: pointer;
      border: 2px solid transparent;
    }
    
    .export-option-card:hover {
      transform: translateY(-5px);
      border-color: var(--primary-light);
    }
    
    .export-option-card.selected {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(78, 115, 223, 0.25);
    }
    
    .export-option-header {
      padding: 15px 20px;
      border-bottom: 1px solid var(--gray-200);
      display: flex;
      align-items: center;
    }
    
    .export-option-icon {
      font-size: 1.5rem;
      margin-right: 15px;
      color: var(--primary);
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: rgba(78, 115, 223, 0.1);
      border-radius: 50%;
    }
    
    .export-option-title {
      font-weight: 600;
      font-size: 1.1rem;
      margin: 0;
    }
    
    .export-option-content {
      padding: 15px 20px;
    }
    
    .export-option-description {
      color: var(--gray-600);
      margin-bottom: 0;
    }
    
    /* Form controls */
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      font-weight: 600;
      margin-bottom: 8px;
      display: block;
    }
    
    .form-control {
      border-radius: 10px;
      border: 1px solid var(--gray-300);
      padding: 10px 15px;
      font-size: 0.95rem;
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }
    
    .custom-checkbox {
      margin-bottom: 10px;
    }
    
    /* Buttons */
    .btn {
      border-radius: 10px;
      padding: 8px 16px;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
    }
    
    .btn i {
      margin-right: 8px;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 .5rem 1rem rgba(78,115,223,.15);
    }
    
    .btn-light {
      background: var(--gray-100);
      color: var(--gray-700);
      border-color: var(--gray-100);
    }
    
    .btn-light:hover {
      background: var(--gray-200);
      color: var(--gray-800);
    }
    
    /* Alert messages */
    .alert {
      border-radius: 10px;
      padding: 15px 20px;
      margin-bottom: 20px;
      border: none;
    }
    
    .alert-success {
      background-color: rgba(28, 200, 138, 0.1);
      color: var(--success);
    }
    
    .alert-danger {
      background-color: rgba(231, 74, 59, 0.1);
      color: var(--danger);
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--gray-200);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-text {
      margin-top: 15px;
      font-weight: 600;
      color: var(--primary);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Export history list */
    .export-history-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 12px 15px;
      border-bottom: 1px solid var(--gray-200);
      transition: var(--transition);
    }
    
    .export-history-item:hover {
      background-color: var(--gray-100);
    }
    
    .export-history-item:last-child {
      border-bottom: none;
    }
    
    .export-history-details {
      flex: 1;
    }
    
    .export-history-title {
      font-weight: 600;
      margin: 0;
    }
    
    .export-history-meta {
      font-size: 0.85rem;
      color: var(--gray-600);
      margin: 5px 0 0;
    }
    
    .export-history-actions {
      display: flex;
      gap: 10px;
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .container-fluid {
        padding: 15px !important;
      }
      
      .page-header {
        padding: 15px 20px;
        flex-direction: column;
        align-items: flex-start;
      }
      
      .page-actions {
        margin-top: 15px;
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <!-- System Info Bar - Using dynamic loading, no hardcoded values -->
  <div class="system-info">
    <p>Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): <span id="currentDate">Loading...</span></p>
    <p>Current User: <span id="currentUser">Loading...</span></p>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading...</div>
  </div>
  
  <div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header animate__animated animate__fadeIn">
      <h1 class="page-title">
        <i class="fas fa-download"></i> QA Export
      </h1>
      <div class="page-actions">
        <button id="newReviewBtn" class="btn btn-light mr-2">
          <i class="fas fa-plus"></i> New QA Review
        </button>
        <button id="viewDashboardBtn" class="btn btn-light mr-2">
          <i class="fas fa-tachometer-alt"></i> QA Dashboard
        </button>
        <button id="viewReportsBtn" class="btn btn-light">
          <i class="fas fa-chart-bar"></i> QA Reports
        </button>
      </div>
    </div>
    
    <!-- Alert Messages -->
    <div id="alertContainer" style="display: none;">
      <div id="alertMessage" class="alert" role="alert"></div>
    </div>
    
    <div class="row">
      <!-- Export Options Column -->
      <div class="col-lg-7">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-cog text-primary mr-2"></i> Export Options
            </h5>
          </div>
          <div class="card-body">
            <div class="row mb-4">
              <div class="col-md-6">
                <div class="export-option-card selected" data-format="excel" id="excelOption">
                  <div class="export-option-header">
                    <div class="export-option-icon">
                      <i class="fas fa-file-excel"></i>
                    </div>
                    <h5 class="export-option-title">Excel Spreadsheet</h5>
                  </div>
                  <div class="export-option-content">
                    <p class="export-option-description">Export to Microsoft Excel (.xlsx) format with multiple sheets and detailed QA data.</p>
                  </div>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="export-option-card" data-format="csv" id="csvOption">
                  <div class="export-option-header">
                    <div class="export-option-icon">
                      <i class="fas fa-file-csv"></i>
                    </div>
                    <h5 class="export-option-title">CSV File</h5>
                  </div>
                  <div class="export-option-content">
                    <p class="export-option-description">Export to CSV format for maximum compatibility with other systems.</p>
                  </div>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="export-option-card" data-format="pdf" id="pdfOption">
                  <div class="export-option-header">
                    <div class="export-option-icon">
                      <i class="fas fa-file-pdf"></i>
                    </div>
                    <h5 class="export-option-title">PDF Report</h5>
                  </div>
                  <div class="export-option-content">
                    <p class="export-option-description">Export to PDF format with comprehensive QA report details for sharing.</p>
                  </div>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="export-option-card" data-format="gsheet" id="gsheetOption">
                  <div class="export-option-header">
                    <div class="export-option-icon">
                      <i class="fas fa-table"></i>
                    </div>
                    <h5 class="export-option-title">Google Sheet</h5>
                  </div>
                  <div class="export-option-content">
                    <p class="export-option-description">Create a new Google Sheet with QA data and summary charts.</p>
                  </div>
                </div>
              </div>
            </div>
            
            <form id="exportForm">
              <div class="form-group">
                <label class="form-label" for="exportName">Export Name</label>
                <input type="text" class="form-control" id="exportName" placeholder="Enter a name for this export">
              </div>
              
              <div class="form-group">
                <label class="form-label">Date Range</label>
                <div class="row">
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="startDate">From</label>
                      <input type="date" class="form-control" id="startDate">
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="endDate">To</label>
                      <input type="date" class="form-control" id="endDate">
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="counselorFilter">Counselor</label>
                <select class="form-control" id="counselorFilter">
                  <option value="all" selected>All Counselors</option>
                  <!-- Counselors will be loaded dynamically -->
                </select>
              </div>
              
              <div class="form-group">
                <label class="form-label" for="statusFilter">Review Status</label>
                <select class="form-control" id="statusFilter">
                  <option value="all" selected>All Status</option>
                  <option value="Complete">Complete</option>
                  <option value="In Progress">In Progress</option>
                  <option value="Draft">Draft</option>
                </select>
              </div>
              
              <div class="form-group">
                <label class="form-label">Export Content</label>
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="includeSummary" checked>
                  <label class="custom-control-label" for="includeSummary">Include Summary Data</label>
                </div>
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="includeDetails" checked>
                  <label class="custom-control-label" for="includeDetails">Include Detailed Evaluation Data</label>
                </div>
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="includeCharts">
                  <label class="custom-control-label" for="includeCharts">Include Charts and Visualizations</label>
                </div>
                <div class="custom-control custom-checkbox">
                  <input type="checkbox" class="custom-control-input" id="includeFeedback" checked>
                  <label class="custom-control-label" for="includeFeedback">Include Feedback and Action Items</label>
                </div>
              </div>
              
              <div class="text-right mt-4">
                <button type="button" class="btn btn-light mr-2" id="resetForm">
                  <i class="fas fa-undo"></i> Reset
                </button>
                <button type="button" class="btn btn-primary" id="exportBtn">
                  <i class="fas fa-download"></i> Export Data
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Export History Column -->
      <div class="col-lg-5">
        <div class="card animate__animated animate__fadeIn">
          <div class="card-header">
            <h5 class="card-header-title">
              <i class="fas fa-history text-primary mr-2"></i> Recent Exports
            </h5>
            <button id="refreshHistoryBtn" class="btn btn-sm btn-light">
              <i class="fas fa-sync-alt"></i> Refresh
            </button>
          </div>
          <div class="card-body" id="exportHistoryList">
            <!-- Export history will be loaded dynamically -->
            <div class="text-center py-4">
              <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
              </div>
              <p class="mt-2">Loading export history...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Bootstrap & jQuery -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Global variables
    let selectedFormat = 'excel';
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      // Load user information
      loadUserInfo();
      
      // Set default dates (last 30 days)
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      document.getElementById('startDate').value = formatDateForInput(thirtyDaysAgo);
      document.getElementById('endDate').value = formatDateForInput(today);
      
      // Set default export name
      document.getElementById('exportName').value = 'QA Export ' + formatDateForInput(today);
      
      // Hide loading overlay after a short delay
      setTimeout(() => {
        document.getElementById('loadingOverlay').style.display = 'none';
      }, 500);
      
      // Load counselors
      loadCounselors();
      
      // Load export history
      loadExportHistory();
      
      // Add event listeners
      addEventListeners();
    });
    
    // Load user information
    function loadUserInfo() {
      google.script.run
        .withSuccessHandler(function(info) {
          document.getElementById('currentDate').textContent = info.formattedDate;
          document.getElementById('currentUser').textContent = info.username;
        })
        .withFailureHandler(function(error) {
          console.error('Error loading user info:', error);
          // Default values if there's an error
          document.getElementById('currentDate').textContent = new Date().toISOString().replace('T', ' ').split('.')[0];
          document.getElementById('currentUser').textContent = 'current_user';
        })
        .getCurrentUserInfo();
    }
    
    // Format date for input field
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }
    
    // Load counselors
    function loadCounselors() {
      google.script.run
        .withSuccessHandler(function(counselors) {
          const select = document.getElementById('counselorFilter');
          
          // Clear existing options except the first one
          while (select.options.length > 1) {
            select.remove(1);
          }
          
          // Add counselors to the dropdown
          counselors.forEach(function(counselor) {
            const option = document.createElement('option');
            option.value = counselor.email;
            option.textContent = counselor.firstName + ' ' + counselor.lastName;
            select.appendChild(option);
          });
        })
        .withFailureHandler(function(error) {
          console.error('Error loading counselors:', error);
        })
        .getTeamMembers();
    }
    
    // Load export history
    function loadExportHistory() {
      const historyList = document.getElementById('exportHistoryList');
      
      // Show loading indicator
      historyList.innerHTML = `
        <div class="text-center py-4">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
          <p class="mt-2">Loading export history...</p>
        </div>
      `;
      
      google.script.run
        .withSuccessHandler(function(exports) {
          if (exports.length === 0) {
            historyList.innerHTML = `
              <div class="text-center py-4">
                <i class="fas fa-info-circle text-info mb-3" style="font-size: 2rem;"></i>
                <p class="mb-0">No export history found. Create your first export!</p>
              </div>
            `;
            return;
          }
          
          // Sort by date (newest first)
          exports.sort((a, b) => new Date(b.date) - new Date(a.date));
          
          // Show only the 10 most recent exports
          const recentExports = exports.slice(0, 10);
          
          let html = '';
          
          recentExports.forEach(exportItem => {
            const date = new Date(exportItem.date);
            
            html += `
              <div class="export-history-item">
                <div class="export-history-details">
                  <h6 class="export-history-title">${exportItem.name}</h6>
                  <p class="export-history-meta">
                    ${date.toLocaleDateString()} · ${exportItem.format.toUpperCase()} · 
                    ${exportItem.recordCount} records
                  </p>
                </div>
                <div class="export-history-actions">
                  <button class="btn btn-sm btn-light open-export" data-url="${exportItem.url}" title="Open">
                    <i class="fas fa-external-link-alt"></i>
                  </button>
                </div>
              </div>
            `;
          });
          
          historyList.innerHTML = html;
          
          // Add event listeners to open buttons
          document.querySelectorAll('.open-export').forEach(button => {
            button.addEventListener('click', function() {
              const url = this.getAttribute('data-url');
              if (url) {
                window.open(url, '_blank');
              } else {
                showAlert('Export URL not available', 'danger');
              }
            });
          });
        })
        .withFailureHandler(function(error) {
          console.error('Error loading export history:', error);
          historyList.innerHTML = `
            <div class="alert alert-danger">
              <i class="fas fa-exclamation-circle mr-2"></i>
              Error loading export history: ${error}
            </div>
          `;
        })
        .getQAExportHistory();
    }
    
    // Add all event listeners
    function addEventListeners() {
      // Format selection
      document.querySelectorAll('.export-option-card').forEach(function(card) {
        card.addEventListener('click', function() {
          // Remove selected class from all cards
          document.querySelectorAll('.export-option-card').forEach(function(c) {
            c.classList.remove('selected');
          });
          
          // Add selected class to clicked card
          this.classList.add('selected');
          
          // Update selected format
          selectedFormat = this.getAttribute('data-format');
        });
      });
      
      // Export button
      document.getElementById('exportBtn').addEventListener('click', function() {
        exportQAData();
      });
      
      // Reset form button
      document.getElementById('resetForm').addEventListener('click', function() {
        resetForm();
      });
      
      // Refresh history button
      document.getElementById('refreshHistoryBtn').addEventListener('click', function() {
        loadExportHistory();
      });
      
      // Navigation buttons
      document.getElementById('newReviewBtn').addEventListener('click', function() {
        google.script.run.openQAReviewForm();
      });
      
      document.getElementById('viewDashboardBtn').addEventListener('click', function() {
        google.script.run.openQADashboard();
      });
      
      document.getElementById('viewReportsBtn').addEventListener('click', function() {
        google.script.run.openQAReports();
      });
    }
    
    // Export QA data based on form options
    function exportQAData() {
      // Show loading overlay
      document.getElementById('loadingOverlay').style.display = 'flex';
      document.getElementById('loadingText').textContent = 'Preparing export...';
      
      // Get form values
      const exportName = document.getElementById('exportName').value || 'QA Export';
      const startDate = new Date(document.getElementById('startDate').value);
      const endDate = new Date(document.getElementById('endDate').value);
      const counselorFilter = document.getElementById('counselorFilter').value;
      const statusFilter = document.getElementById('statusFilter').value;
      
      // Get checkbox values
      const includeSummary = document.getElementById('includeSummary').checked;
      const includeDetails = document.getElementById('includeDetails').checked;
      const includeCharts = document.getElementById('includeCharts').checked;
      const includeFeedback = document.getElementById('includeFeedback').checked;
      
      // Set end date to end of the day
      endDate.setHours(23, 59, 59, 999);
      
      // Prepare export options
      const options = {
        exportName: exportName,
        startDate: startDate,
        endDate: endDate,
        format: selectedFormat,
        includeSummary: includeSummary,
        includeDetails: includeDetails,
        includeCharts: includeCharts,
        includeFeedback: includeFeedback
      };
      
      if (counselorFilter !== 'all') {
        options.counselorEmail = counselorFilter;
      }
      
      if (statusFilter !== 'all') {
        options.status = statusFilter;
      }
      
      // Call server function to export data
      google.script.run
        .withSuccessHandler(function(result) {
          document.getElementById('loadingOverlay').style.display = 'none';
          
          if (result.success) {
            showAlert('Export successful! Opening the exported file...', 'success');
            
            // Refresh export history
            loadExportHistory();
            
            // Open the exported file if it's a Google Sheet
            if (result.url) {
              window.open(result.url, '_blank');
            }
          } else {
            showAlert('Error exporting QA data: ' + result.message, 'danger');
          }
        })
        .withFailureHandler(function(error) {
          document.getElementById('loadingOverlay').style.display = 'none';
          showAlert('Error: ' + error, 'danger');
        })
        .exportQAData(options);
    }
    
    // Reset the form to defaults
    function resetForm() {
      // Reset format selection
      document.querySelectorAll('.export-option-card').forEach(function(card) {
        card.classList.remove('selected');
      });
      document.getElementById('excelOption').classList.add('selected');
      selectedFormat = 'excel';
      
      // Reset date range to last 30 days
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      document.getElementById('startDate').value = formatDateForInput(thirtyDaysAgo);
      document.getElementById('endDate').value = formatDateForInput(today);
      
      // Reset export name
      document.getElementById('exportName').value = 'QA Export ' + formatDateForInput(today);
      
      // Reset filters
      document.getElementById('counselorFilter').value = 'all';
      document.getElementById('statusFilter').value = 'all';
      
      // Reset checkboxes
      document.getElementById('includeSummary').checked = true;
      document.getElementById('includeDetails').checked = true;
      document.getElementById('includeCharts').checked = false;
      document.getElementById('includeFeedback').checked = true;
    }
    
    // Show alert message
    function showAlert(message, type) {
      const alertContainer = document.getElementById('alertContainer');
      const alertMessage = document.getElementById('alertMessage');
      
      alertMessage.textContent = message;
      alertMessage.className = `alert alert-${type}`;
      alertContainer.style.display = 'block';
      
      // Auto-hide after 5 seconds
      setTimeout(function() {
        alertContainer.style.display = 'none';
      }, 5000);
    }
  </script>
</body>
</html>

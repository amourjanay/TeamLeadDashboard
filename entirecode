/**
 * Crisis Services Team Lead Dashboard
 * Main controller for the application
 * Version: 1.0.0
 * Date: 2025-03-27
 */

// Global configuration
const CONFIG = {
  version: "1.0.0",
  dateFormat: "yyyy-MM-dd",
  dateTimeFormat: "yyyy-MM-dd HH:mm:ss",
  sheetNames: {
    teamMembers: "TeamMembers",
    oneOnOnes: "OneOnOneSessions",
    qaReviews: "QAReviews",
    actionItems: "ActionItems",
    metrics: "Metrics",
    managerOneOnOnes: "ManagerOneOnOnes",
    generalNotes: "GeneralNotes",
    schedules: "Schedules",
    timeTracking: "TimeTracking",
    tasks: "Tasks",
    asanaTasks: "AsanaTasks",
    settings: "Settings"
  },
  metricsGoals: {
    answerRate: 95, // 95% or higher
    avgTalkTime: { min: 15, max: 20 }, // 15-20 minutes
    acwTime: 5, // 5 minutes or less
    onQueuePercentage: 65, // 65% or higher
    interactingTime: { min: 4, max: 6 }, // 4-6 hours
    interactingPercentage: 50 // 50% or higher
  },
  timeTrackerCategories: [
    "Primary",
    "Team Meeting",
    "1:1",
    "Priority Coaching",
    "Manager 1:1",
    "QA Review",
    "Shadow Session",
    "Other"
  ]
};

/**
 * Create menu when spreadsheet opens
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  
  ui.createMenu('🚀 TeamLead Dashboard')
    .addItem('📊 Open Dashboard', 'openDashboard')
    .addSeparator()
    .addSubMenu(ui.createMenu('👥 Team Management')
      .addItem('👤 Add Team Member', 'openAddTeamMemberForm')
      .addItem('👥 View Team', 'openTeamView')
      .addItem('🔄 Update Status', 'openUpdateStatusForm'))
    .addSubMenu(ui.createMenu('🤝 One-on-One Sessions')
      .addItem('➕ New Session', 'openOneOnOneForm')
      .addItem('📝 View All Sessions', 'openOneOnOneNotes')
      .addItem('📊 Dashboard', 'openOneOnOneDashboard')
      .addItem('📤 Export', 'openOneOnOneExport'))
    .addSubMenu(ui.createMenu('🔍 Quality Reviews')
      .addItem('➕ New Review', 'openQAReviewForm')
      .addItem('📊 View Reports', 'openQAReports')
      .addItem('📈 Dashboard', 'openQADashboard')
      .addItem('📤 Export', 'openQAExport'))
    .addSubMenu(ui.createMenu('👔 Manager One-on-Ones')
      .addItem('➕ New Session', 'openManagerOneOnOneForm')
      .addItem('📝 View Sessions', 'openManagerOneOnOneNotes')
      .addItem('📊 Dashboard', 'openManagerOneOnOneDashboard'))
    .addSubMenu(ui.createMenu('📝 General Notes')
      .addItem('➕ New Note', 'openGeneralNoteForm')
      .addItem('📚 View Notes', 'openGeneralNotes')
      .addItem('📊 Dashboard', 'openGeneralNotesDashboard'))
    .addSubMenu(ui.createMenu('📈 Metrics')
      .addItem('➕ Enter Metrics', 'openMetricsForm')
      .addItem('📊 View Reports', 'openMetricsReports')
      .addItem('📈 Dashboard', 'openMetricsDashboard')
      .addItem('📤 Export', 'openMetricsExport')
      .addItem('📧 Email Config', 'openMetricsEmailConfig'))
    .addSubMenu(ui.createMenu('⏱️ Time & Schedule')
      .addItem('⏱️ Time Tracker', 'openTimeTracker')
      .addItem('📊 Time Reports', 'openTimeReports')
      .addItem('📅 Schedule Manager', 'openScheduleManager')
      .addItem('🆕 Initialize Week', 'openInitializeWeekForm')
      .addItem('📊 Schedule Reports', 'openScheduleReports'))
    .addSubMenu(ui.createMenu('✅ Tasks')
      .addItem('➕ New Task', 'openTaskForm')
      .addItem('➕ New Asana Task', 'openAsanaTaskForm')
      .addItem('📋 View Tasks', 'openTasksList'))
    .addSubMenu(ui.createMenu('📋 Action Items')
      .addItem('➕ New Action Item', 'openActionItemsForm')
      .addItem('📋 View Items', 'openActionItemsView')
      .addItem('🔔 Set Reminders', 'openActionItemsReminders'))
    .addSeparator()
    .addItem('⚙️ Settings', 'openSettings')
    .addItem('👤 User Preferences', 'openUserPreferences')
    .addItem('❓ Help & Support', 'openHelp')
    .addToUi();
}

/**
 * Initialize system - Create required sheets if they don't exist
 * @return {Object} Initialization result
 */
function initializeSystem() {
  try {
    const results = {};
    
    // Create all required sheets
    Object.entries(CONFIG.sheetNames).forEach(([key, sheetName]) => {
      let headers = [];
      
      switch (key) {
        case 'teamMembers':
          headers = ['id', 'Name', 'Email', 'Department', 'Role', 'Status', 'HireDate', 'LastOneOnOne', 'LastQAReview', 'Notes'];
          break;
        case 'oneOnOnes':
          headers = [
            'id', 'teamMemberEmail', 'date', 'status', 'followUpDate', 'reviewerEmail', 
            'criticalDiscuss', 'teamMemberWins', 'teamMemberChallenges', 'leaderSupport', 
            'workloadLevel', 'immediateBlockers', 'energyLevel',
            'quantitativeMetrics', 'qualitativeImpact', 'strategicInsight',
            'skillMastery', 'careerTrajectory', 'actionDevelopment',
            'obstacleIdentification', 'leadershipSupport',
            'commitmentsSynthesis', 'actionItems', 'nextCheckInDate', 'lastModified'
          ];
          break;
        case 'qaReviews':
          headers = [
            'id', 'teamMemberEmail', 'interactionDate', 'interactionId', 'reviewerEmail', 'reviewDate', 
            'status', 'scorePercentage', 'totalPoints', 'possiblePoints', 
            'answeredPromptly', 'openingMessage', 'sassScreener', 'empathyRapport', 'activeListening', 
            'inclusiveLanguage', 'emotionalResponse', 'appropriateResources', 'copingStrategies', 
            'summarizedKeyPoints', 'closureProcess', 'overallFeedback', 'strengths', 'improvements', 
            'actionItem1', 'actionItem2', 'actionItem3', 'additionalActionItems',
            'answeredNotes', 'openingNotes', 'sassNotes', 'empathyNotes', 'listeningNotes',
            'inclusiveNotes', 'emotionalNotes', 'resourcesNotes', 'copingNotes', 'summaryNotes',
            'closureNotes', 'sendFollowUpEmail', 'emailTemplate', 'emailSubject', 'scheduleEmail', 
            'scheduledTime', 'lastModified'
          ];
          break;
        case 'actionItems':
          headers = ['id', 'teamMemberEmail', 'description', 'source', 'sourceId', 'dueDate', 'status', 
          'createdBy', 'createdDate', 'completedDate', 'notes', 'reminderDate', 'reminderSent'];
          break;
        case 'metrics':
          headers = [
            'id', 'teamMemberEmail', 'date', 'reportingPeriod', 'callsOffered', 'callsAccepted', 
            'answerRate', 'avgTalkTime', 'acwTime', 'onQueuePercentage', 'offQueuePercentage', 
            'interactingHours', 'interactingPercentage', 'qualityScore', 'notes', 'enteredBy', 'lastModified'
          ];
          break;
        case 'managerOneOnOnes':
          headers = [
            'id', 'date', 'managerEmail', 'teamLeadEmail', 'status', 'followUpDate',
            'teamStatusOverview', 'teamSize', 'teamComposition', 'teamChallenges', 'teamWins',
            'answerRate', 'avgTalkTime', 'acwTime', 'onQueuePercentage', 
            'interactingHours', 'interactingPercentage', 'qualityScore', 
            'leadershipPriorities', 'previousActionItems',
            'personalWellbeing', 'currentSatisfaction', 'supportNeeds', 'teamPerformanceReview', 
            'counselorConcerns', 'teamDevelopmentStrategy', 'leadershipStrengths', 'leadershipGrowth',
            'skillDevelopmentPlan', 'organizationalPriorities', 'resourceNeeds', 'managerFeedback',
            'teamLeadCommitment1', 'teamLeadCommitment2', 'teamLeadCommitment3',
            'managerCommitment1', 'managerCommitment2', 'managerCommitment3',
            'keyTakeaways', 'nextSessionDate', 'priorityFocus', 'midPointCheckIn', 
            'reflectionNotes', 'sendFollowUpEmail', 'emailSubject', 'scheduleEmail', 
            'scheduledTime', 'lastModified'
          ];
          break;
        case 'generalNotes':
          headers = ['id', 'title', 'content', 'category', 'tags', 'createdBy', 'createdDate', 
          'lastModifiedBy', 'lastModifiedDate'];
          break;
        case 'schedules':
          headers = ['id', 'teamMemberEmail', 'weekStartDate', 'weekEndDate', 'monday', 'tuesday', 
          'wednesday', 'thursday', 'friday', 'saturday', 'sunday', 'notes', 'status', 'lastModified'];
          break;
        case 'timeTracking':
          headers = ['id', 'date', 'startTime', 'endTime', 'category', 'description', 'duration', 
          'thingsToGet', 'thingsDone', 'thingsForNext', 'createdBy', 'lastModified'];
          break;
        case 'tasks':
          headers = ['id', 'title', 'description', 'assignedTo', 'dueDate', 'priority', 'status', 
          'category', 'createdBy', 'createdDate', 'lastModified'];
          break;
        case 'asanaTasks':
          headers = ['id', 'asanaId', 'title', 'description', 'assignedTo', 'dueDate', 'project', 
          'status', 'createdBy', 'createdDate', 'lastModified'];
          break;
        case 'settings':
          headers = ['key', 'value', 'description', 'category', 'lastModified'];
          break;
      }
      
      results[key] = createSheetIfNotExists(sheetName, headers);
    });
    
    // Populate settings if empty
    initializeSettings();
    
    return {
      success: true,
      message: 'System initialized successfully',
      results: results
    };
  } catch (error) {
    console.error('Error initializing system:', error);
    return {
      success: false,
      message: `Failed to initialize system: ${error.message}`
    };
  }
}

/**
 * Initialize default settings
 */
function initializeSettings() {
  const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.settings);
  if (!sheet) return;
  
  const data = sheet.getDataRange().getValues();
  if (data.length <= 1) { // Only headers exist
    const defaultSettings = [
      ['metricsAnswerRateGoal', '95', 'Target answer rate percentage', 'Metrics', new Date()],
      ['metricsAvgTalkTimeMinGoal', '15', 'Minimum target talk time (minutes)', 'Metrics', new Date()],
      ['metricsAvgTalkTimeMaxGoal', '20', 'Maximum target talk time (minutes)', 'Metrics', new Date()],
      ['metricsACWTimeGoal', '5', 'Target ACW time (minutes)', 'Metrics', new Date()],
      ['metricsOnQueuePercentageGoal', '65', 'Target on-queue percentage', 'Metrics', new Date()],
      ['metricsInteractingTimeMinGoal', '4', 'Minimum target interacting time (hours)', 'Metrics', new Date()],
      ['metricsInteractingTimeMaxGoal', '6', 'Maximum target interacting time (hours)', 'Metrics', new Date()],
      ['metricsInteractingPercentageGoal', '50', 'Target interacting percentage', 'Metrics', new Date()],
      ['metricsWeeklyEmailEnabled', 'false', 'Enable weekly metrics email', 'Metrics', new Date()],
      ['metricsWeeklyEmailDay', '1', 'Day to send weekly metrics email (0=Sunday)', 'Metrics', new Date()],
      ['metricsEmailRecipients', '', 'Recipients for metrics emails (comma separated)', 'Metrics', new Date()],
      ['asanaApiKey', '', 'Asana API key', 'Asana', new Date()],
      ['asanaDefaultWorkspace', '', 'Asana default workspace ID', 'Asana', new Date()]
    ];
    
    sheet.getRange(2, 1, defaultSettings.length, defaultSettings[0].length).setValues(defaultSettings);
  }
}

/**
 * Create sheet if it doesn't exist
 * @param {string} sheetName - Sheet name
 * @param {Array} headers - Column headers
 * @return {Object} Result object
 */
function createSheetIfNotExists(sheetName, headers) {
  try {
    const ss = SpreadsheetApp.getActive();
    let sheet = ss.getSheetByName(sheetName);
    let created = false;
    
    if (!sheet) {
      sheet = ss.insertSheet(sheetName);
      created = true;
      
      // Add headers
      if (headers && headers.length > 0) {
        sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
        
        // Format header row
        sheet.getRange(1, 1, 1, headers.length)
          .setBackground('#4f46e5')
          .setFontColor('white')
          .setFontWeight('bold');
        
        // Freeze header row
        sheet.setFrozenRows(1);
      }
    }
    
    return {
      success: true,
      message: created ? `Sheet "${sheetName}" created successfully.` : `Sheet "${sheetName}" already exists.`
    };
  } catch (error) {
    console.error(`Error creating sheet "${sheetName}":`, error);
    return {
      success: false,
      message: `Failed to create sheet "${sheetName}": ${error.message}`
    };
  }
}

/**
 * Open the main dashboard
 */
function openDashboard() {
  const html = HtmlService.createTemplateFromFile('html/dashboard')
    .evaluate()
    .setTitle('TeamLead Dashboard')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'TeamLead Dashboard');
}

/**
 * Open one-on-one form
 * @param {string} sessionId - Optional session ID for editing
 */
function openOneOnOneForm(sessionId = null) {
  // Store the session ID in cache if provided
  if (sessionId) {
    CacheService.getUserCache().put('currentOneOnOneId', sessionId, 3600);
  } else {
    CacheService.getUserCache().remove('currentOneOnOneId');
  }
  
  const html = HtmlService.createTemplateFromFile('html/one-on-one-form')
    .evaluate()
    .setTitle('One-on-One Session')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'One-on-One Session');
}

/**
 * Open one-on-one notes
 */
function openOneOnOneNotes() {
  const html = HtmlService.createTemplateFromFile('html/one-on-one-notes')
    .evaluate()
    .setTitle('One-on-One Sessions')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'One-on-One Sessions');
}

/**
 * Open one-on-one details view
 * @param {string} sessionId - Session ID to view
 */
function openOneOnOneDetails(sessionId) {
  // Store the session ID in cache
  CacheService.getUserCache().put('currentOneOnOneId', sessionId, 3600);
  
  const html = HtmlService.createTemplateFromFile('html/one-on-one-details')
    .evaluate()
    .setTitle('One-on-One Details')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'One-on-One Details');
}

/**
 * Open one-on-one dashboard
 */
function openOneOnOneDashboard() {
  const html = HtmlService.createTemplateFromFile('html/one-on-one-dashboard')
    .evaluate()
    .setTitle('One-on-One Dashboard')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'One-on-One Dashboard');
}

/**
 * Open one-on-one export options
 */
function openOneOnOneExport() {
  const html = HtmlService.createTemplateFromFile('html/one-on-one-export')
    .evaluate()
    .setTitle('Export One-on-One Notes')
    .setWidth(600)
    .setHeight(400);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Export One-on-One Notes');
}

/**
 * Open team member form
 */
function openAddTeamMemberForm() {
  const html = HtmlService.createTemplateFromFile('html/add-team-member-form')
    .evaluate()
    .setTitle('Add Team Member')
    .setWidth(600)
    .setHeight(500);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Add Team Member');
}

/**
 * Open team view
 */
function openTeamView() {
  const html = HtmlService.createTemplateFromFile('html/team-view')
    .evaluate()
    .setTitle('Team Members')
    .setWidth(1000)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Team Members');
}

/**
 * Open update status form
 */
function openUpdateStatusForm() {
  const html = HtmlService.createTemplateFromFile('html/update-status-form')
    .evaluate()
    .setTitle('Update Team Member Status')
    .setWidth(500)
    .setHeight(400);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Update Status');
}

/**
 * Open QA review form
 * @param {string} reviewId - Optional review ID for editing
 */
function openQAReviewForm(reviewId = null) {
  // Store the review ID in cache if provided
  if (reviewId) {
    CacheService.getUserCache().put('currentQAReviewId', reviewId, 3600);
  } else {
    CacheService.getUserCache().remove('currentQAReviewId');
  }
  
  const html = HtmlService.createTemplateFromFile('html/qa-review-form')
    .evaluate()
    .setTitle('Quality Review')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Quality Review');
}

/**
 * Open QA reports
 */
function openQAReports() {
  const html = HtmlService.createTemplateFromFile('html/qa-reports')
    .evaluate()
    .setTitle('QA Reports')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'QA Reports');
}

/**
 * Open QA dashboard
 */
function openQADashboard() {
  const html = HtmlService.createTemplateFromFile('html/qa-dashboard')
    .evaluate()
    .setTitle('QA Dashboard')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'QA Dashboard');
}

/**
 * Open QA export
 */
function openQAExport() {
  const html = HtmlService.createTemplateFromFile('html/qa-export')
    .evaluate()
    .setTitle('Export QA Data')
    .setWidth(600)
    .setHeight(400);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Export QA Data');
}

/**
 * Open manager one-on-one form
 * @param {string} sessionId - Optional session ID for editing
 */
function openManagerOneOnOneForm(sessionId = null) {
  // Store the session ID in cache if provided
  if (sessionId) {
    CacheService.getUserCache().put('currentManagerOneOnOneId', sessionId, 3600);
  } else {
    CacheService.getUserCache().remove('currentManagerOneOnOneId');
  }
  
  const html = HtmlService.createTemplateFromFile('html/manager-one-on-one-form')
    .evaluate()
    .setTitle('Manager One-on-One Session')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Manager One-on-One Session');
}

/**
 * Open manager one-on-one notes
 */
function openManagerOneOnOneNotes() {
  const html = HtmlService.createTemplateFromFile('html/manager-one-on-one-notes')
    .evaluate()
    .setTitle('Manager One-on-One Notes')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Manager One-on-One Notes');
}

/**
 * Open manager one-on-one dashboard
 */
function openManagerOneOnOneDashboard() {
  const html = HtmlService.createTemplateFromFile('html/manager-one-on-one-dashboard')
    .evaluate()
    .setTitle('Manager One-on-One Dashboard')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Manager One-on-One Dashboard');
}

/**
 * Open general note form
 * @param {string} noteId - Optional note ID for editing
 */
function openGeneralNoteForm(noteId = null) {
  // Store the note ID in cache if provided
  if (noteId) {
    CacheService.getUserCache().put('currentGeneralNoteId', noteId, 3600);
  } else {
    CacheService.getUserCache().remove('currentGeneralNoteId');
  }
  
  const html = HtmlService.createTemplateFromFile('html/general-note-form')
    .evaluate()
    .setTitle('General Note')
    .setWidth(1000)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'General Note');
}

/**
 * Open general notes
 */
function openGeneralNotes() {
  const html = HtmlService.createTemplateFromFile('html/general-notes')
    .evaluate()
    .setTitle('General Notes')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'General Notes');
}

/**
 * Open general notes dashboard
 */
function openGeneralNotesDashboard() {
  const html = HtmlService.createTemplateFromFile('html/general-notes-dashboard')
    .evaluate()
    .setTitle('General Notes Dashboard')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'General Notes Dashboard');
}

/**
 * Open metrics form
 */
function openMetricsForm() {
  const html = HtmlService.createTemplateFromFile('html/metrics-form')
    .evaluate()
    .setTitle('Enter Metrics')
    .setWidth(1000)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Enter Metrics');
}

/**
 * Open metrics reports
 */
function openMetricsReports() {
  const html = HtmlService.createTemplateFromFile('html/metrics-reports')
    .evaluate()
    .setTitle('Metrics Reports')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Metrics Reports');
}

/**
 * Open metrics dashboard
 */
function openMetricsDashboard() {
  const html = HtmlService.createTemplateFromFile('html/metrics-dashboard')
    .evaluate()
    .setTitle('Metrics Dashboard')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Metrics Dashboard');
}

/**
 * Open metrics export
 */
function openMetricsExport() {
  const html = HtmlService.createTemplateFromFile('html/metrics-export')
    .evaluate()
    .setTitle('Export Metrics Data')
    .setWidth(600)
    .setHeight(400);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Export Metrics Data');
}

/**
 * Open metrics email config
 */
function openMetricsEmailConfig() {
  const html = HtmlService.createTemplateFromFile('html/metrics-email-config')
    .evaluate()
    .setTitle('Configure Metrics Email Reports')
    .setWidth(800)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Configure Metrics Email Reports');
}

/**
 * Open time tracker
 */
function openTimeTracker() {
  const html = HtmlService.createTemplateFromFile('html/time-tracker')
    .evaluate()
    .setTitle('Time Tracker')
    .setWidth(900)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Time Tracker');
}

/**
 * Open time reports
 */
function openTimeReports() {
  const html = HtmlService.createTemplateFromFile('html/time-reports')
    .evaluate()
    .setTitle('Time Tracking Reports')
    .setWidth(1000)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Time Tracking Reports');
}

/**
 * Open schedule manager
 */
function openScheduleManager() {
  const html = HtmlService.createTemplateFromFile('html/schedule-manager')
    .evaluate()
    .setTitle('Schedule Manager')
    .setWidth(1200)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Schedule Manager');
}

/**
 * Open initialize week form
 */
function openInitializeWeekForm() {
  const html = HtmlService.createTemplateFromFile('html/initialize-week-form')
    .evaluate()
    .setTitle('Initialize Week')
    .setWidth(600)
    .setHeight(500);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Initialize Week');
}

/**
 * Open schedule reports
 */
function openScheduleReports() {
  const html = HtmlService.createTemplateFromFile('html/schedule-reports')
    .evaluate()
    .setTitle('Schedule Reports')
    .setWidth(1000)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Schedule Reports');
}

/**
 * Open task form
 * @param {string} taskId - Optional task ID for editing
 */
function openTaskForm(taskId = null) {
  // Store the task ID in cache if provided
  if (taskId) {
    CacheService.getUserCache().put('currentTaskId', taskId, 3600);
  } else {
    CacheService.getUserCache().remove('currentTaskId');
  }
  
  const html = HtmlService.createTemplateFromFile('html/task-form')
    .evaluate()
    .setTitle('Task')
    .setWidth(800)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Task');
}

/**
 * Open Asana task form
 * @param {string} taskId - Optional task ID for editing
 */
function openAsanaTaskForm(taskId = null) {
  // Store the task ID in cache if provided
  if (taskId) {
    CacheService.getUserCache().put('currentAsanaTaskId', taskId, 3600);
  } else {
    CacheService.getUserCache().remove('currentAsanaTaskId');
  }
  
  const html = HtmlService.createTemplateFromFile('html/asana-task-form')
    .evaluate()
    .setTitle('Asana Task')
    .setWidth(800)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Asana Task');
}

/**
 * Open tasks list
 */
function openTasksList() {
  const html = HtmlService.createTemplateFromFile('html/tasks-list')
    .evaluate()
    .setTitle('Tasks')
    .setWidth(1000)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Tasks');
}

/**
 * Open action items form
 * @param {string} actionItemId - Optional action item ID for editing
 */
function openActionItemsForm(actionItemId = null) {
  // Store the action item ID in cache if provided
  if (actionItemId) {
    CacheService.getUserCache().put('currentActionItemId', actionItemId, 3600);
  } else {
    CacheService.getUserCache().remove('currentActionItemId');
  }
  
  const html = HtmlService.createTemplateFromFile('html/action-items-form')
    .evaluate()
    .setTitle('Action Item')
    .setWidth(800)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Action Item');
}

/**
 * Open action items view
 */
function openActionItemsView() {
  const html = HtmlService.createTemplateFromFile('html/action-items-view')
    .evaluate()
    .setTitle('Action Items')
    .setWidth(1000)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Action Items');
}

/**
 * Open action items reminders
 */
function openActionItemsReminders() {
  const html = HtmlService.createTemplateFromFile('html/action-items-reminders')
    .evaluate()
    .setTitle('Action Item Reminders')
    .setWidth(800)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Action Item Reminders');
}

/**
 * Open settings
 */
function openSettings() {
  const html = HtmlService.createTemplateFromFile('html/settings')
    .evaluate()
    .setTitle('Settings')
    .setWidth(800)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Settings');
}

/**
 * Open help
 */
function openHelp() {
  const html = HtmlService.createTemplateFromFile('html/help')
    .evaluate()
    .setTitle('Help & Support')
    .setWidth(800)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Help & Support');
}

/**
 * Open user preferences
 */
function openUserPreferences() {
  const html = HtmlService.createTemplateFromFile('html/user-preferences')
    .evaluate()
    .setTitle('User Preferences')
    .setWidth(600)
    .setHeight(500);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'User Preferences');
}

/**
 * Include HTML content
 * @param {string} filename - Name of the file to include
 * @return {string} HTML content
 */
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

/**
 * Get current user information
 * @return {Object} User information with success flag
 */
function getUserInfo() {
  try {
    const userEmail = Session.getActiveUser().getEmail();
    const userName = Session.getActiveUser().getUsername();
    
    return {
      success: true,
      data: {
        email: userEmail,
        name: userName
      }
    };
  } catch (error) {
    console.error('Error getting user information:', error);
    return {
      success: false,
      message: `Failed to get user information: ${error.message}`
    };
  }
}

/**
 * Get current date and time
 * @return {Object} Current date and time with success flag
 */
function getCurrentDateAndTime() {
  try {
    const now = new Date();
    const formatted = Utilities.formatDate(now, Session.getScriptTimeZone(), CONFIG.dateTimeFormat);
    
    return {
      success: true,
      data: {
        date: now,
        formatted: formatted
      }
    };
  } catch (error) {
    console.error('Error getting current date and time:', error);
    return {
      success: false,
      message: `Failed to get current date and time: ${error.message}`
    };
  }
}

/**
 * Format date
 * @param {Date} date - Date to format
 * @param {string} format - Optional format string (defaults to dateFormat)
 * @return {string} Formatted date string
 */
function formatDate(date, format = null) {
  if (!date) return '';
  
  try {
    return Utilities.formatDate(
      new Date(date), 
      Session.getScriptTimeZone(), 
      format || CONFIG.dateFormat
    );
  } catch (error) {
    console.error('Error formatting date:', error);
    return '';
  }
}

/**
 * Format date and time
 * @param {Date} date - Date to format
 * @param {string} format - Optional format string (defaults to dateTimeFormat)
 * @return {string} Formatted date and time string
 */
function formatDateTime(date, format = null) {
  if (!date) return '';
  
  try {
    return Utilities.formatDate(
      new Date(date), 
      Session.getScriptTimeZone(), 
      format || CONFIG.dateTimeFormat
    );
  } catch (error) {
    console.error('Error formatting date and time:', error);
    return '';
  }
}

/**
 * Generate a unique ID
 * @return {string} UUID
 */
function generateUniqueId() {
  return Utilities.getUuid();
}

/**
 * Strip HTML tags for plain text emails
 * @param {string} html - HTML content
 * @return {string} Plain text content
 */
function stripHtml(html) {
  if (!html) return '';
  
  // Replace common HTML elements with text equivalents
  return html
    .replace(/<p>/gi, '')
    .replace(/<\/p>/gi, '\n\n')
    .replace(/<br\s*\/?>/gi, '\n')
    .replace(/<div>/gi, '')
    .replace(/<\/div>/gi, '\n')
    .replace(/<li>/gi, '- ')
    .replace(/<\/li>/gi, '\n')
    .replace(/<ul>|<\/ul>|<ol>|<\/ol>/gi, '\n')
    .replace(/<h[1-6]>/gi, '\n\n')
    .replace(/<\/h[1-6]>/gi, '\n\n')
    .replace(/<[^>]+>/g, '') // Remove any remaining HTML tags
    .replace(/&nbsp;/g, ' ')
    .replace(/&amp;/g, '&')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .replace(/\n\s*\n\s*\n/g, '\n\n') // Reduce multiple blank lines
    .trim();
}

/**
 * Get cached ID for various forms
 * @param {string} cacheKey - Cache key
 * @return {string} Cached ID or null
 */
function getCachedId(cacheKey) {
  return CacheService.getUserCache().get(cacheKey) || null;
}

/**
 * Get cached one-on-one session ID
 * @return {string} Session ID or null
 */
function getCachedOneOnOneId() {
  return getCachedId('currentOneOnOneId');
}

/**
 * Get cached QA review ID
 * @return {string} Review ID or null
 */
function getCachedQAReviewId() {
  return getCachedId('currentQAReviewId');
}

/**
 * Get cached manager one-on-one session ID
 * @return {string} Session ID or null
 */
function getCachedManagerOneOnOneId() {
  return getCachedId('currentManagerOneOnOneId');
}

/**
 * Get cached general note ID
 * @return {string} Note ID or null
 */
function getCachedGeneralNoteId() {
  return getCachedId('currentGeneralNoteId');
}

/**
 * Get cached action item ID
 * @return {string} Action item ID or null
 */
function getCachedActionItemId() {
  return getCachedId('currentActionItemId');
}

/**
 * Get cached task ID
 * @return {string} Task ID or null
 */
function getCachedTaskId() {
  return getCachedId('currentTaskId');
}

/**
 * Get cached Asana task ID
 * @return {string} Asana task ID or null
 */
function getCachedAsanaTaskId() {
  return getCachedId('currentAsanaTaskId');
}

/**
 * Get application version
 * @return {string} Version number
 */
function getAppVersion() {
  return CONFIG.version;
}
/**
 * Show dashboard
 */
function showDashboard() {
  const html = HtmlService.createTemplateFromFile('html/dashboard')
    .evaluate()
    .setTitle('TeamLead Dashboard')
    .setWidth(1100)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'TeamLead Dashboard');
}

/**
 * Show one-on-one sessions
 */
function showOneOnOnes() {
  const html = HtmlService.createTemplateFromFile('html/one-on-ones')
    .evaluate()
    .setTitle('One-on-One Sessions')
    .setWidth(1000)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'One-on-One Sessions');
}

/**
 * Show QA reviews
 */
function showQAReviews() {
  const html = HtmlService.createTemplateFromFile('html/qa-reviews')
    .evaluate()
    .setTitle('QA Reviews')
    .setWidth(1000)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'QA Reviews');
}

/**
 * Show metrics
 */
function showMetrics() {
  const html = HtmlService.createTemplateFromFile('html/metrics')
    .evaluate()
    .setTitle('Team Metrics')
    .setWidth(1000)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Team Metrics');
}

/**
 * Show action items
 */
function showActionItems() {
  const html = HtmlService.createTemplateFromFile('html/action-items')
    .evaluate()
    .setTitle('Action Items')
    .setWidth(1000)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Action Items');
}

/**
 * Show settings
 */
function showSettings() {
  const html = HtmlService.createTemplateFromFile('html/settings')
    .evaluate()
    .setTitle('Settings')
    .setWidth(800)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'Settings');
}

/**
 * Include HTML file
 * @param {string} filename - HTML filename
 * @return {string} HTML content
 */
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}




/**
 * TeamService.gs
 * Handles team member related functionality
 */

/**
 * Get team members for dropdown selection
 * @param {boolean} activeOnly - If true, only returns active team members
 * @return {Array} Array of team member objects with value, text, department, role
 */
function getTeamMembersForDropdown(activeOnly = false) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.teamMembers}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find column indices
    const emailCol = headers.indexOf('Email');
    const nameCol = headers.indexOf('Name');
    const departmentCol = headers.indexOf('Department');
    const roleCol = headers.indexOf('Role');
    const statusCol = headers.indexOf('Status');
    
    // Verify required columns exist
    if (emailCol === -1 || nameCol === -1) {
      throw new Error('Email or Name columns not found in TeamMembers sheet');
    }
    
    // Filter and map data
    const teamMembers = data.slice(1)
      .filter(row => {
        // Skip empty rows
        if (!row[emailCol] || !row[nameCol]) return false;
        
        // Filter by status if activeOnly is true
        return !activeOnly || (statusCol !== -1 && row[statusCol] === 'Active');
      })
      .map(row => ({
        value: row[emailCol],
        text: row[nameCol],
        department: departmentCol !== -1 ? row[departmentCol] : 'Unassigned',
        role: roleCol !== -1 ? row[roleCol] : ''
      }));
    
    return teamMembers;
  } catch (error) {
    console.error('Error in getTeamMembersForDropdown:', error);
    throw new Error(`Failed to get team members: ${error.message}`);
  }
}

/**
 * Get team member by email
 * @param {string} email - Team member email
 * @return {Object} Team member data
 */
function getTeamMemberByEmail(email) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.teamMembers}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find column indices
    const emailCol = headers.indexOf('Email');
    
    // Verify required columns exist
    if (emailCol === -1) {
      throw new Error('Email column not found in TeamMembers sheet');
    }
    
    // Find team member with matching email
    for (let i = 1; i < data.length; i++) {
      if (data[i][emailCol] === email) {
        const teamMember = {};
        
        // Map columns to properties
        headers.forEach((header, index) => {
          teamMember[header] = data[i][index];
        });
        
        return teamMember;
      }
    }
    
    return null; // Not found
  } catch (error) {
    console.error('Error in getTeamMemberByEmail:', error);
    throw new Error(`Failed to get team member: ${error.message}`);
  }
}

/**
 * Add a new team member
 * @param {Object} teamMember - Team member data
 * @return {Object} Result with success flag and message
 */
function addTeamMember(teamMember) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.teamMembers}" not found`);
    }
    
    // Generate ID if not provided
    if (!teamMember.id) {
      teamMember.id = generateUniqueId();
    }
    
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Create a row with all columns from headers
    const newRow = headers.map(header => {
      const value = teamMember[header] || '';
      
      // Format dates if the value is a date object and the header contains 'date' (case insensitive)
      if (value instanceof Date && header.toLowerCase().includes('date')) {
        return formatDate(value);
      }
      
      return value;
    });
    
    // Add the new row to the sheet
    sheet.appendRow(newRow);
    
    return { 
      success: true, 
      message: `Team member ${teamMember.Name} added successfully`,
      id: teamMember.id
    };
  } catch (error) {
    console.error('Error in addTeamMember:', error);
    return { 
      success: false, 
      message: `Failed to add team member: ${error.message}`
    };
  }
}

/**
 * Update team member
 * @param {string} id - Team member id
 * @param {Object} teamMember - Team member data
 * @return {Object} Result with success flag and message
 */
function updateTeamMember(id, teamMember) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.teamMembers}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    
    if (idCol === -1) {
      throw new Error('ID column not found in TeamMembers sheet');
    }
    
    // Find the row with matching id
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`Team member with ID ${id} not found`);
    }
    
    // Create updated row
    const updatedRow = headers.map((header, index) => {
      if (teamMember.hasOwnProperty(header)) {
        const value = teamMember[header];
        
        // Format dates
        if (value instanceof Date && header.toLowerCase().includes('date')) {
          return formatDate(value);
        }
        
        return value;
      } else {
        // Keep existing value
        return data[rowIndex - 1][index];
      }
    });
    
    // Update the row
    sheet.getRange(rowIndex, 1, 1, updatedRow.length).setValues([updatedRow]);
    
    return {
      success: true,
      message: `Team member updated successfully`
    };
  } catch (error) {
    console.error('Error in updateTeamMember:', error);
    return {
      success: false,
      message: `Failed to update team member: ${error.message}`
    };
  }
}

/**
 * Update team member status
 * @param {string} email - Team member email
 * @param {string} status - New status
 * @return {Object} Result with success flag and message
 */
function updateTeamMemberStatus(email, status) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.teamMembers}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const emailCol = headers.indexOf('Email');
    const statusCol = headers.indexOf('Status');
    
    if (emailCol === -1) {
      throw new Error('Email column not found in TeamMembers sheet');
    }
    
    if (statusCol === -1) {
      throw new Error('Status column not found in TeamMembers sheet');
    }
    
    // Find the row with matching email
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][emailCol] === email) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`Team member with email ${email} not found`);
    }
    
    // Update the status
    sheet.getRange(rowIndex, statusCol + 1).setValue(status);
    
    return {
      success: true,
      message: `Status updated to ${status}`
    };
  } catch (error) {
    console.error('Error in updateTeamMemberStatus:', error);
    return {
      success: false,
      message: `Failed to update status: ${error.message}`
    };
  }
}

/**
 * Delete team member
 * @param {string} id - Team member ID
 * @return {Object} Result with success flag and message
 */
function deleteTeamMember(id) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.teamMembers}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    
    if (idCol === -1) {
      throw new Error('ID column not found in TeamMembers sheet');
    }
    
    // Find the row with matching ID
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`Team member with ID ${id} not found`);
    }
    
    // Delete the row
    sheet.deleteRow(rowIndex);
    
    return {
      success: true,
      message: 'Team member deleted successfully'
    };
  } catch (error) {
    console.error('Error in deleteTeamMember:', error);
    return {
      success: false,
      message: `Failed to delete team member: ${error.message}`
    };
  }
}

/**
 * Get team status summary
 * @return {Object} Team status data with counts by status
 */
function getTeamStatusSummary() {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.teamMembers}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const statusCol = headers.indexOf('Status');
    const departmentCol = headers.indexOf('Department');
    const nameCol = headers.indexOf('Name');
    const roleCol = headers.indexOf('Role');
    
    if (statusCol === -1) {
      throw new Error('Status column not found in TeamMembers sheet');
    }
    
    // Count team members by status and department
    const summary = {
      totalMembers: 0,
      statusBreakdown: {},
      departmentBreakdown: {},
      teamMembers: []
    };
    
    // Skip header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      summary.totalMembers++;
      
      // Status breakdown
      const status = row[statusCol] || 'Unknown';
      if (!summary.statusBreakdown[status]) {
        summary.statusBreakdown[status] = 0;
      }
      summary.statusBreakdown[status]++;
      
      // Department breakdown
      if (departmentCol !== -1) {
        const department = row[departmentCol] || 'Unassigned';
        if (!summary.departmentBreakdown[department]) {
          summary.departmentBreakdown[department] = 0;
        }
        summary.departmentBreakdown[department]++;
      }
      
      // Add to team members array for detailed data
      if (nameCol !== -1) {
        summary.teamMembers.push({
          name: row[nameCol],
          status: status,
          department: departmentCol !== -1 ? row[departmentCol] : 'Unassigned',
          role: roleCol !== -1 ? row[roleCol] : ''
        });
      }
    }
    
    return summary;
  } catch (error) {
    console.error('Error in getTeamStatusSummary:', error);
    throw new Error(`Failed to get team status summary: ${error.message}`);
  }
}

/**
 * Update team member last one-on-one date
 * @param {string} email - Team member email
 * @param {Date} date - Last one-on-one date
 * @return {Object} Result with success flag and message
 */
function updateTeamMemberLastOneOnOne(email, date) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.teamMembers}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const emailCol = headers.indexOf('Email');
    const lastOneOnOneCol = headers.indexOf('LastOneOnOne');
    
    if (emailCol === -1) {
      throw new Error('Email column not found in TeamMembers sheet');
    }
    
    if (lastOneOnOneCol === -1) {
      throw new Error('LastOneOnOne column not found in TeamMembers sheet');
    }
    
    // Find the row with matching email
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][emailCol] === email) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`Team member with email ${email} not found`);
    }
    
    // Format date
    const formattedDate = formatDate(date);
    
    // Update the last one-on-one date
    sheet.getRange(rowIndex, lastOneOnOneCol + 1).setValue(formattedDate);
    
    return {
      success: true,
      message: `Last one-on-one date updated to ${formattedDate}`
    };
  } catch (error) {
    console.error('Error in updateTeamMemberLastOneOnOne:', error);
    return {
      success: false,
      message: `Failed to update last one-on-one date: ${error.message}`
    };
  }
}

/**
 * Update team member last QA review date
 * @param {string} email - Team member email
 * @param {Date} date - Last QA review date
 * @return {Object} Result with success flag and message
 */
function updateTeamMemberLastQAReview(email, date) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.teamMembers}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const emailCol = headers.indexOf('Email');
    const lastQAReviewCol = headers.indexOf('LastQAReview');
    
    if (emailCol === -1) {
      throw new Error('Email column not found in TeamMembers sheet');
    }
    
    if (lastQAReviewCol === -1) {
      throw new Error('LastQAReview column not found in TeamMembers sheet');
    }
    
    // Find the row with matching email
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][emailCol] === email) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`Team member with email ${email} not found`);
    }
    
    // Format date
    const formattedDate = formatDate(date);
    
    // Update the last QA review date
    sheet.getRange(rowIndex, lastQAReviewCol + 1).setValue(formattedDate);
    
    return {
      success: true,
      message: `Last QA review date updated to ${formattedDate}`
    };
  } catch (error) {
    console.error('Error in updateTeamMemberLastQAReview:', error);
    return {
      success: false,
      message: `Failed to update last QA review date: ${error.message}`
    };
  }
}

/**
 * Get all team members
 * @param {Object} filters - Optional filters like department, status
 * @return {Object} Result with team members data
 */
function getTeamMembers(filters = {}) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.teamMembers}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Find relevant column indices
    const statusCol = headers.indexOf('Status');
    const departmentCol = headers.indexOf('Department');
    
    // Filter and map data
    const teamMembers = data.slice(1)
      .filter(row => {
        // Skip empty rows
        if (row.every(cell => !cell)) return false;
        
        // Apply status filter
        if (filters.status && statusCol !== -1 && row[statusCol] !== filters.status) {
          return false;
        }
        
        // Apply department filter
        if (filters.department && departmentCol !== -1 && row[departmentCol] !== filters.department) {
          return false;
        }
        
        return true;
      })
      .map(row => {
        const member = {};
        headers.forEach((header, index) => {
          member[header] = row[index];
        });
        return member;
      });
    
    return {
      success: true,
      data: teamMembers
    };
  } catch (error) {
    console.error('Error in getTeamMembers:', error);
    return {
      success: false,
      message: `Failed to get team members: ${error.message}`
    };
  }
}
/**
 * Get team members
 * @return {Array} Array of team member objects
 */
function getTeamMembers() {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      return [];
    }
    
    const data = sheet.getDataRange().getValues();
    if (data.length <= 1) {
      return []; // Only header row or empty
    }
    
    const headers = data[0];
    const members = data.slice(1).map(row => {
      const member = {};
      headers.forEach((header, index) => {
        member[header] = row[index];
      });
      return member;
    });
    
    return members;
  } catch (error) {
    console.error('Error in getTeamMembers:', error);
    return [];
  }
}

/**
 * Get team member by email
 * @param {string} email - Team member email
 * @return {Object} Team member object
 */
function getTeamMemberByEmail(email) {
  if (!email) return null;
  
  const members = getTeamMembers();
  return members.find(member => member.Email === email) || null;
}

/**
 * Save team member
 * @param {Object} memberData - Team member data
 * @return {Object} Result with success flag and message
 */
function saveTeamMember(memberData) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      // Create the sheet if it doesn't exist
      createSheetIfNotExists(CONFIG.sheetNames.teamMembers, [
        'Name', 'Email', 'Role', 'StartDate', 'Status', 'ManagerEmail', 'LastOneOnOne', 'LastQAReview', 'Notes'
      ]);
    }
    
    if (!memberData.Email) {
      throw new Error('Email is required');
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const emailCol = headers.indexOf('Email');
    if (emailCol === -1) {
      throw new Error('Email column not found in TeamMembers sheet');
    }
    
    // Create a row with values in the same order as headers
    const rowData = headers.map(header => {
      const value = memberData[header] !== undefined ? memberData[header] : '';
      
      // Format dates if the value is a date object
      if (value instanceof Date) {
        return formatDate(value);
      }
      
      return value;
    });
    
    let rowIndex = -1;
    
    // Find existing member if email exists
    for (let i = 1; i < data.length; i++) {
      if (data[i][emailCol] === memberData.Email) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    // Update or append row
    if (rowIndex !== -1) {
      sheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    } else {
      sheet.appendRow(rowData);
    }
    
    return { 
      success: true, 
      message: 'Team member saved successfully'
    };
  } catch (error) {
    console.error('Error in saveTeamMember:', error);
    return { 
      success: false, 
      message: `Failed to save team member: ${error.message}`
    };
  }
}

/**
 * Delete team member
 * @param {string} email - Team member email
 * @return {Object} Result with success flag and message
 */
function deleteTeamMember(email) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.teamMembers}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const emailCol = headers.indexOf('Email');
    
    if (emailCol === -1) {
      throw new Error('Email column not found in TeamMembers sheet');
    }
    
    // Find the row with matching email
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][emailCol] === email) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`Team member with email ${email} not found`);
    }
    
    // Delete the row
    sheet.deleteRow(rowIndex);
    
    return {
      success: true,
      message: 'Team member deleted successfully'
    };
  } catch (error) {
    console.error('Error in deleteTeamMember:', error);
    return {
      success: false,
      message: `Failed to delete team member: ${error.message}`
    };
  }
}

/**
 * Get active team members
 * @return {Array} Array of active team member objects
 */
function getActiveTeamMembers() {
  const members = getTeamMembers();
  return members.filter(member => member.Status === 'Active');
}

/**
 * Update team member last one-on-one date
 * @param {string} email - Team member email
 * @param {Date} date - Last one-on-one date
 * @return {Object} Result with success flag and message
 */
function updateTeamMemberLastOneOnOne(email, date) {
  try {
    const member = getTeamMemberByEmail(email);
    if (!member) {
      throw new Error(`Team member with email ${email} not found`);
    }
    
    member.LastOneOnOne = date;
    return saveTeamMember(member);
  } catch (error) {
    console.error('Error in updateTeamMemberLastOneOnOne:', error);
    return {
      success: false,
      message: `Failed to update last one-on-one date: ${error.message}`
    };
  }
}

/**
 * Update team member last QA review date
 * @param {string} email - Team member email
 * @param {Date} date - Last QA review date
 * @return {Object} Result with success flag and message
 */
function updateTeamMemberLastQAReview(email, date) {
  try {
    const member = getTeamMemberByEmail(email);
    if (!member) {
      throw new Error(`Team member with email ${email} not found`);
    }
    
    member.LastQAReview = date;
    return saveTeamMember(member);
  } catch (error) {
    console.error('Error in updateTeamMemberLastQAReview:', error);
    return {
      success: false,
      message: `Failed to update last QA review date: ${error.message}`
    };
  }
}

/**
 * Import team members from CSV
 * @param {string} csvData - CSV data string
 * @return {Object} Result with success flag and message
 */
function importTeamMembersFromCSV(csvData) {
  try {
    // Parse CSV data
    const members = csvToObjects(csvData);
    
    if (members.length === 0) {
      throw new Error('No valid team members found in CSV data');
    }
    
    // Save each team member
    let successCount = 0;
    let errorCount = 0;
    const errors = [];
    
    members.forEach(member => {
      // Validate required fields
      if (!member.Email) {
        errorCount++;
        errors.push(`Missing email for a member at row ${errorCount + successCount + 1}`);
        return;
      }
      
      // Save the member
      const result = saveTeamMember(member);
      
      if (result.success) {
        successCount++;
      } else {
        errorCount++;
        errors.push(`Failed to save ${member.Email}: ${result.message}`);
      }
    });
    
    return {
      success: errorCount === 0,
      message: `Imported ${successCount} team members${errorCount > 0 ? `, failed to import ${errorCount} team members` : ''}`,
      errors: errors
    };
  } catch (error) {
    console.error('Error in importTeamMembersFromCSV:', error);
    return {
      success: false,
      message: `Failed to import team members: ${error.message}`
    };
  }
}

/**
 * Export team members to CSV
 * @return {Object} Result with CSV content
 */
function exportTeamMembersToCSV() {
  try {
    const members = getTeamMembers();
    
    if (members.length === 0) {
      return {
        success: true,
        data: 'No team members found',
        contentType: 'text/plain'
      };
    }
    
    // Get all headers from the first member
    const headers = Object.keys(members[0]);
    
    // Start with the headers
    let csvContent = headers.join(',') + '\n';
    
    // Add rows for each member
    members.forEach(member => {
      const rowData = headers.map(header => {
        const value = member[header] || '';
        
        // Format dates
        if (value instanceof Date) {
          return `"${formatDate(value)}"`;
        }
        
        // Escape quotes in strings
        if (typeof value === 'string') {
          return `"${value.replace(/"/g, '""')}"`;
        }
        
        return `"${value}"`;
      });
      
      csvContent += rowData.join(',') + '\n';
    });
    
    return {
      success: true,
      data: csvContent,
      contentType: 'text/csv',
      filename: `team-members-export-${formatDate(new Date())}.csv`
    };
  } catch (error) {
    console.error('Error in exportTeamMembersToCSV:', error);
    return {
      success: false,
      message: `Failed to export team members: ${error.message}`
    };
  }
}




/**
 * OneOnOneService.gs
 * Handles one-on-one session functionality
 * Follows the template structure exactly
 */

/**
 * Get one-on-one session by ID
 * @param {string} id - Session ID
 * @return {Object} Session data
 */
function getOneOnOneById(id) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.oneOnOnes);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.oneOnOnes}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    if (idCol === -1) {
      throw new Error('ID column not found in OneOnOneSessions sheet');
    }
    
    // Find the row with matching ID
    let sessionRow = null;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === id) {
        sessionRow = data[i];
        break;
      }
    }
    
    if (!sessionRow) {
      throw new Error(`One-on-one session with ID ${id} not found`);
    }
    
    // Convert row to object using headers as keys
    const session = {};
    headers.forEach((header, index) => {
      session[header] = sessionRow[index];
    });
    
    // Parse action items if they exist
    if (session.actionItems && typeof session.actionItems === 'string') {
      try {
        session.actionItems = JSON.parse(session.actionItems);
      } catch (parseError) {
        console.warn('Error parsing action items JSON:', parseError);
        session.actionItems = [];
      }
    }
    
    return session;
  } catch (error) {
    console.error('Error in getOneOnOneById:', error);
    throw new Error(`Failed to get one-on-one session: ${error.message}`);
  }
}

/**
 * Save one-on-one session
 * @param {Object} sessionData - Session data following the template structure
 * @return {Object} Result with success flag, message, and session ID
 */
function saveOneOnOne(sessionData) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.oneOnOnes);
    if (!sheet) {
      // Create the sheet if it doesn't exist
      createSheetIfNotExists(CONFIG.sheetNames.oneOnOnes, [
        'id', 'teamMemberEmail', 'date', 'status', 'followUpDate', 'reviewerEmail', 
        'criticalDiscuss', 'teamMemberWins', 'teamMemberChallenges', 'leaderSupport', 
        'workloadLevel', 'immediateBlockers', 'energyLevel',
        'quantitativeMetrics', 'qualitativeImpact', 'strategicInsight',
        'skillMastery', 'careerTrajectory', 'actionDevelopment',
        'obstacleIdentification', 'leadershipSupport',
        'commitmentsSynthesis', 'actionItems', 'nextCheckInDate', 'lastModified'
      ]);
    }
    
    // Generate ID if not provided
    if (!sessionData.id) {
      sessionData.id = generateUniqueId();
    }
    
    // Set last modified date
    sessionData.lastModified = new Date();
    
    // Serialize action items if they exist
    if (sessionData.actionItems && typeof sessionData.actionItems !== 'string') {
      sessionData.actionItems = JSON.stringify(sessionData.actionItems);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    if (idCol === -1) {
      throw new Error('ID column not found in OneOnOneSessions sheet');
    }
    
    // Create a row with values in the same order as headers
    const rowData = headers.map(header => {
      const value = sessionData[header] !== undefined ? sessionData[header] : '';
      
      // Format dates if the value is a date object and the header contains 'date' (case insensitive)
      if (value instanceof Date && header.toLowerCase().includes('date')) {
        return formatDate(value);
      }
      
      return value;
    });
    
    let rowIndex = -1;
    
    // Find existing session if ID exists
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === sessionData.id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    // Update or append row
    if (rowIndex !== -1) {
      sheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    } else {
      sheet.appendRow(rowData);
    }
    
    // Update team member's LastOneOnOne date
    if (sessionData.teamMemberEmail && sessionData.status === 'completed') {
      try {
        updateTeamMemberLastOneOnOne(
          sessionData.teamMemberEmail, 
          sessionData.date ? new Date(sessionData.date) : new Date()
        );
      } catch (updateError) {
        console.warn('Error updating team member LastOneOnOne date:', updateError);
      }
    }
    
    // Create action items if specified
    if (sessionData.createActionItems && sessionData.actionItems) {
      let actionItemsArray = [];
      
      if (typeof sessionData.actionItems === 'string') {
        try {
          actionItemsArray = JSON.parse(sessionData.actionItems);
        } catch (parseError) {
          console.warn('Error parsing action items JSON:', parseError);
        }
      } else if (Array.isArray(sessionData.actionItems)) {
        actionItemsArray = sessionData.actionItems;
      }
      
      actionItemsArray.forEach(item => {
        if (item && item.description) {
          const actionItemData = {
            teamMemberEmail: sessionData.teamMemberEmail,
            description: item.description,
            dueDate: item.dueDate || null,
            status: 'Not Started',
            source: 'One-on-One',
            sourceId: sessionData.id,
            createdBy: sessionData.reviewerEmail || Session.getActiveUser().getEmail()
          };
          
          addActionItem(actionItemData);
        }
      });
    }
    
    // Send follow-up email if requested
    if (sessionData.sendFollowUpEmail) {
      sendOneOnOneFollowUpEmail(sessionData);
    }
    
    return { 
      success: true, 
      message: 'One-on-one session saved successfully',
      id: sessionData.id
    };
  } catch (error) {
    console.error('Error in saveOneOnOne:', error);
    return { 
      success: false, 
      message: `Failed to save one-on-one session: ${error.message}`
    };
  }
}

/**
 * Get one-on-one sessions with optional filtering
 * @param {Object} filters - Optional filters
 * @param {string} filters.teamMemberEmail - Filter by team member email
 * @param {string} filters.reviewerEmail - Filter by reviewer email
 * @param {string} filters.status - Filter by status
 * @param {Date} filters.startDate - Filter by date range (start)
 * @param {Date} filters.endDate - Filter by date range (end)
 * @param {number} limit - Maximum number of sessions to return
 * @param {string} sortBy - Column to sort by
 * @param {boolean} sortDesc - Sort in descending order
 * @return {Object} Result with sessions data
 */
function getOneOnOneSessions(filters = {}, limit = 50, sortBy = 'date', sortDesc = true) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.oneOnOnes);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.oneOnOnes}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const reviewerCol = headers.indexOf('reviewerEmail');
    const dateCol = headers.indexOf('date');
    const statusCol = headers.indexOf('status');
    
    // Verify required columns exist
    if (idCol === -1 || teamMemberCol === -1 || dateCol === -1) {
      throw new Error('Required columns not found in OneOnOneSessions sheet');
    }
    
    // Filter sessions based on provided filters
    let sessions = data.slice(1)
      .filter(row => {
        // Skip empty rows
        if (row.every(cell => !cell)) return false;
        
        // Apply team member filter
        if (filters.teamMemberEmail && teamMemberCol !== -1 && 
            row[teamMemberCol] !== filters.teamMemberEmail) {
          return false;
        }
        
        // Apply reviewer filter
        if (filters.reviewerEmail && reviewerCol !== -1 && 
            row[reviewerCol] !== filters.reviewerEmail) {
          return false;
        }
        
        // Apply status filter
        if (filters.status && statusCol !== -1 && 
            row[statusCol] !== filters.status) {
          return false;
        }
        
        // Apply date range filter
        if (dateCol !== -1 && row[dateCol]) {
          const sessionDate = new Date(row[dateCol]);
          
          if (filters.startDate && sessionDate < new Date(filters.startDate)) {
            return false;
          }
          
          if (filters.endDate && sessionDate > new Date(filters.endDate)) {
            return false;
          }
        }
        
        return true;
      })
      .map(row => {
        const session = {};
        headers.forEach((header, index) => {
          session[header] = row[index];
        });
        return session;
      });
    
    // Sort sessions
    const sortColIndex = headers.indexOf(sortBy);
    if (sortColIndex !== -1) {
      sessions.sort((a, b) => {
        const valueA = a[sortBy];
        const valueB = b[sortBy];
        
        // Handle dates
        if (valueA instanceof Date && valueB instanceof Date) {
          return sortDesc ? valueB - valueA : valueA - valueB;
        }
        
        // Handle strings
        if (typeof valueA === 'string' && typeof valueB === 'string') {
          return sortDesc ? 
            valueB.localeCompare(valueA) : 
            valueA.localeCompare(valueB);
        }
        
        // Handle numbers
        return sortDesc ? valueB - valueA : valueA - valueB;
      });
    }
    
    // Apply limit
    if (limit > 0 && sessions.length > limit) {
      sessions = sessions.slice(0, limit);
    }
    
    // Get team member names for sessions
    for (const session of sessions) {
      if (session.teamMemberEmail) {
        try {
          const teamMember = getTeamMemberByEmail(session.teamMemberEmail);
          if (teamMember && teamMember.Name) {
            session.teamMemberName = teamMember.Name;
          }
        } catch (error) {
          console.warn(`Couldn't get team member name for ${session.teamMemberEmail}:`, error);
        }
      }
    }
    
    return {
      success: true,
      data: sessions,
      total: sessions.length
    };
  } catch (error) {
    console.error('Error in getOneOnOneSessions:', error);
    return {
      success: false,
      message: `Failed to get one-on-one sessions: ${error.message}`
    };
  }
}

/**
 * Get upcoming sessions
 * @param {number} limit - Maximum number of sessions to return
 * @return {Array} Upcoming sessions
 */
function getUpcomingSessions(limit = 5) {
  try {
    const today = new Date();
    
    // Get sessions scheduled for today or in the future
    const result = getOneOnOneSessions(
      {
        status: 'scheduled',
        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate())
      },
      limit,
      'date',
      false // Ascending order (earliest first)
    );
    
    return result.success ? result.data : [];
  } catch (error) {
    console.error('Error in getUpcomingSessions:', error);
    return [];
  }
}

/**
 * Get overdue one-on-one sessions
 * @param {number} daysThreshold - Days threshold for overdue sessions
 * @return {Object} Result with overdue sessions data
 */
function getOverdueOneOnOneSessions(daysThreshold = 14) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.oneOnOnes);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.oneOnOnes}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const dateCol = headers.indexOf('date');
    const followUpDateCol = headers.indexOf('followUpDate');
    const nextCheckInDateCol = headers.indexOf('nextCheckInDate');
    const statusCol = headers.indexOf('status');
    
    // Verify required columns exist
    if (idCol === -1 || teamMemberCol === -1 || dateCol === -1) {
      throw new Error('Required columns not found in OneOnOneSessions sheet');
    }
    
    const today = new Date();
    const overdueThreshold = new Date();
    overdueThreshold.setDate(today.getDate() - daysThreshold);
    
    // Get team members who need a one-on-one
    const teamSheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.teamMembers);
    const teamData = teamSheet ? teamSheet.getDataRange().getValues() : [];
    const teamHeaders = teamData.length > 0 ? teamData[0] : [];
    
    const teamEmailCol = teamHeaders.indexOf('Email');
    const teamNameCol = teamHeaders.indexOf('Name');
    const teamStatusCol = teamHeaders.indexOf('Status');
    const teamLastOneOnOneCol = teamHeaders.indexOf('LastOneOnOne');
    
    const teamMembers = {};
    
    // Skip header row
    if (teamSheet && teamEmailCol !== -1) {
      for (let i = 1; i < teamData.length; i++) {
        const row = teamData[i];
        
        // Skip empty rows
        if (row.every(cell => !cell)) continue;
        
        const email = row[teamEmailCol];
        const name = teamNameCol !== -1 ? row[teamNameCol] : '';
        const status = teamStatusCol !== -1 ? row[teamStatusCol] : '';
        const lastOneOnOne = teamLastOneOnOneCol !== -1 ? row[teamLastOneOnOneCol] : null;
        
        // Only include active team members
        if (status === 'Active') {
          teamMembers[email] = {
            name: name,
            email: email,
            lastOneOnOne: lastOneOnOne ? new Date(lastOneOnOne) : null,
            needsOneOnOne: lastOneOnOne ? new Date(lastOneOnOne) < overdueThreshold : true
          };
        }
      }
    }
    
    const overdueSessions = [];
    const upcomingSessions = [];
    
    // Process completed sessions to find follow-ups
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      const teamMemberEmail = row[teamMemberCol];
      const status = statusCol !== -1 ? row[statusCol] : '';
      
      // Only check completed sessions with a follow-up date
      if (status === 'completed') {
        const followUpDate = followUpDateCol !== -1 && row[followUpDateCol] ? 
          new Date(row[followUpDateCol]) : null;
        
        const nextCheckInDate = nextCheckInDateCol !== -1 && row[nextCheckInDateCol] ? 
          new Date(row[nextCheckInDateCol]) : null;
        
        // Use either follow-up date or next check-in date
        const nextDate = followUpDate || nextCheckInDate;
        
        if (nextDate) {
          const session = {
            id: row[idCol],
            teamMemberEmail: teamMemberEmail,
            date: row[dateCol] ? new Date(row[dateCol]) : null,
            followUpDate: nextDate,
            status: status,
            isOverdue: nextDate < today,
            daysOverdue: nextDate < today ? Math.floor((today - nextDate) / (1000 * 60 * 60 * 24)) : 0
          };
          
          // Add team member name if available
          if (teamMembers[teamMemberEmail]) {
            session.teamMemberName = teamMembers[teamMemberEmail].name;
          }
          
          if (nextDate < today) {
            overdueSessions.push(session);
          } else {
            upcomingSessions.push(session);
          }
          
          // Update the team member's status if they have a recent scheduled session
          if (teamMembers[teamMemberEmail]) {
            teamMembers[teamMemberEmail].hasScheduledSession = true;
          }
        }
      }
    }
    
    // Find team members who need one-on-ones
    const membersNeedingOneOnOne = Object.values(teamMembers)
      .filter(member => member.needsOneOnOne && !member.hasScheduledSession)
      .sort((a, b) => {
        // Sort by whether they have a last one-on-one, then by date (oldest first)
        if (!a.lastOneOnOne && b.lastOneOnOne) return -1;
        if (a.lastOneOnOne && !b.lastOneOnOne) return 1;
        if (a.lastOneOnOne && b.lastOneOnOne) return a.lastOneOnOne - b.lastOneOnOne;
        return 0;
      });
    
    // Sort overdue sessions by days overdue (most overdue first)
    overdueSessions.sort((a, b) => b.daysOverdue - a.daysOverdue);
    
    // Sort upcoming sessions by date (soonest first)
    upcomingSessions.sort((a, b) => a.followUpDate - b.followUpDate);
    
    return {
      success: true,
      data: {
        overdueSessions: overdueSessions,
        upcomingSessions: upcomingSessions.slice(0, 10), // Limit to 10
        membersNeedingOneOnOne: membersNeedingOneOnOne,
        totalOverdue: overdueSessions.length,
        totalUpcoming: upcomingSessions.length,
        totalNeedingOneOnOne: membersNeedingOneOnOne.length,
        daysThreshold: daysThreshold
      }
    };
  } catch (error) {
    console.error('Error in getOverdueOneOnOneSessions:', error);
    return {
      success: false,
      message: `Failed to get overdue sessions: ${error.message}`
    };
  }
}

/**
 * Schedule a one-on-one session
 * @param {Object} sessionData - Session data
 * @return {Object} Result with success flag, message, and session ID
 */
function scheduleOneOnOne(sessionData) {
  try {
    // Set default values for a scheduled session
    sessionData.status = 'scheduled';
    
    // Generate a calendar event if needed
    if (sessionData.createCalendarEvent) {
      const event = createCalendarEvent(
        sessionData.teamMemberEmail,
        sessionData.date,
        sessionData.duration || 30,
        sessionData.location || 'Virtual Meeting'
      );
      
      if (event.success) {
        sessionData.calendarEventId = event.eventId;
      } else {
        console.warn('Failed to create calendar event:', event.message);
      }
    }
    
    // Save the session
    return saveOneOnOne(sessionData);
  } catch (error) {
    console.error('Error in scheduleOneOnOne:', error);
    return {
      success: false,
      message: `Failed to schedule one-on-one: ${error.message}`
    };
  }
}

/**
 * Create a calendar event
 * @param {string} attendeeEmail - Attendee email address
 * @param {Date} startTime - Event start time
 * @param {number} durationMinutes - Event duration in minutes
 * @param {string} location - Event location
 * @return {Object} Result with success flag and event ID
 */
function createCalendarEvent(attendeeEmail, startTime, durationMinutes, location) {
  try {
    // Get the default calendar
    const calendar = CalendarApp.getDefaultCalendar();
    
    // Calculate end time
    const endTime = new Date(startTime.getTime() + (durationMinutes * 60 * 1000));
    
    // Create the event
    const event = calendar.createEvent(
      'One-on-One Meeting',
      startTime,
      endTime,
      {
        description: 'Regular one-on-one session for check-in and feedback',
        location: location,
        guests: attendeeEmail,
        sendInvites: true
      }
    );
    
    return {
      success: true,
      eventId: event.getId()
    };
  } catch (error) {
    console.error('Error creating calendar event:', error);
    return {
      success: false,
      message: `Failed to create calendar event: ${error.message}`
    };
  }
}

/**
 * Send one-on-one follow-up email
 * @param {Object} sessionData - Session data
 * @return {Object} Result with success flag and message
 */
function sendOneOnOneFollowUpEmail(sessionData) {
  try {
    const teamMemberEmail = sessionData.teamMemberEmail;
    if (!teamMemberEmail) {
      throw new Error('Team member email is required');
    }
    
    // Get team member name
    let teamMemberName = '';
    try {
      const teamMember = getTeamMemberByEmail(teamMemberEmail);
      if (teamMember) {
        teamMemberName = teamMember.Name;
      }
    } catch (error) {
      console.warn(`Couldn't get team member name for ${teamMemberEmail}:`, error);
    }
    
    // Generate email content
    let emailSubject = `One-on-One Follow-up (${formatDate(sessionData.date)})`;
    let emailBody = '';
    
    try {
      const emailTemplate = HtmlService.createTemplateFromFile('html/email/one-on-one-follow-up');
      
      // Pass session data to the template
      for (const key in sessionData) {
        if (sessionData.hasOwnProperty(key)) {
          emailTemplate[key] = sessionData[key];
        }
      }
      
      // Add formatted dates
      if (sessionData.date) {
        const sessionDate = new Date(sessionData.date);
        emailTemplate.formattedDate = formatDate(sessionDate, 'MMMM d, yyyy');
      }
      
      if (sessionData.nextCheckInDate || sessionData.followUpDate) {
        const nextDate = new Date(sessionData.nextCheckInDate || sessionData.followUpDate);
        emailTemplate.formattedNextDate = formatDate(nextDate, 'MMMM d, yyyy');
      }
      
      // Add team member name
      emailTemplate.teamMemberName = teamMemberName;
      
      // Parse action items if needed
      if (sessionData.actionItems && typeof sessionData.actionItems === 'string') {
        try {
          emailTemplate.actionItems = JSON.parse(sessionData.actionItems);
        } catch (parseError) {
          emailTemplate.actionItems = [];
        }
      } else if (Array.isArray(sessionData.actionItems)) {
        emailTemplate.actionItems = sessionData.actionItems;
      } else {
        emailTemplate.actionItems = [];
      }
      
      emailBody = emailTemplate.evaluate().getContent();
    } catch (templateError) {
      console.error('Error generating email from template:', templateError);
      
      // Simple fallback email
      emailBody = `
        <html>
          <body>
            <h2>One-on-One Follow-up</h2>
            <p>Hello ${teamMemberName || 'there'},</p>
            <p>Thank you for our one-on-one session on ${formatDate(sessionData.date)}. Here's a summary of what we discussed:</p>
            
            <h3>What We Discussed:</h3>
            <p>${sessionData.criticalDiscuss || 'N/A'}</p>
            
            <h3>Your Wins:</h3>
            <p>${sessionData.teamMemberWins || 'N/A'}</p>
            
            <h3>Challenges:</h3>
            <p>${sessionData.teamMemberChallenges || 'N/A'}</p>
            
            <h3>Support Plan:</h3>
            <p>${sessionData.leaderSupport || 'N/A'}</p>
            
            <h3>Commitments:</h3>
            <p>${sessionData.commitmentsSynthesis || 'N/A'}</p>
            
            <p>Our next check-in is scheduled for: ${sessionData.nextCheckInDate ? formatDate(sessionData.nextCheckInDate) : 'To be determined'}</p>
            
            <p>Please let me know if you have any questions!</p>
            
            <p>Best regards,<br>${sessionData.reviewerEmail || Session.getActiveUser().getEmail()}</p>
          </body>
        </html>
      `;
    }
    
    // Send the email
    GmailApp.sendEmail(
      teamMemberEmail,
      emailSubject,
      // Plain text version
      stripHtml(emailBody),
      {
        htmlBody: emailBody,
        name: Session.getActiveUser().getUsername(),
        replyTo: sessionData.reviewerEmail || Session.getActiveUser().getEmail()
      }
    );
    
    return {
      success: true,
      message: `Follow-up email sent to ${teamMemberEmail}`
    };
  } catch (error) {
    console.error('Error in sendOneOnOneFollowUpEmail:', error);
    return {
      success: false,
      message: `Failed to send follow-up email: ${error.message}`
    };
  }
}

/**
 * Preview one-on-one follow-up email
 * @param {Object} sessionData - Session data
 * @return {string} HTML email preview
 */
function previewOneOnOneFollowUpEmail(sessionData) {
  try {
    // Get team member name
    let teamMemberName = '';
    if (sessionData.teamMemberEmail) {
      try {
        const teamMember = getTeamMemberByEmail(sessionData.teamMemberEmail);
        if (teamMember) {
          teamMemberName = teamMember.Name;
        }
      } catch (error) {
        console.warn(`Couldn't get team member name:`, error);
      }
    }
    
    // Generate email content
    const emailTemplate = HtmlService.createTemplateFromFile('html/email/one-on-one-follow-up');
    
    // Pass session data to the template
    for (const key in sessionData) {
      if (sessionData.hasOwnProperty(key)) {
        emailTemplate[key] = sessionData[key];
      }
    }
    
    // Add formatted dates
    if (sessionData.date) {
      const sessionDate = new Date(sessionData.date);
      emailTemplate.formattedDate = formatDate(sessionDate, 'MMMM d, yyyy');
    }
    
    if (sessionData.nextCheckInDate || sessionData.followUpDate) {
      const nextDate = new Date(sessionData.nextCheckInDate || sessionData.followUpDate);
      emailTemplate.formattedNextDate = formatDate(nextDate, 'MMMM d, yyyy');
    }
    
    // Add team member name
    emailTemplate.teamMemberName = teamMemberName;
    
    // Parse action items if needed
    if (sessionData.actionItems && typeof sessionData.actionItems === 'string') {
      try {
        emailTemplate.actionItems = JSON.parse(sessionData.actionItems);
      } catch (parseError) {
        emailTemplate.actionItems = [];
      }
    } else if (Array.isArray(sessionData.actionItems)) {
      emailTemplate.actionItems = sessionData.actionItems;
    } else {
      emailTemplate.actionItems = [];
    }
    
    return emailTemplate.evaluate().getContent();
  } catch (error) {
    console.error('Error in previewOneOnOneFollowUpEmail:', error);
    return `<div style="color: red; padding: 20px; border: 1px solid red;">
      <h3>Error Generating Email Preview</h3>
      <p>${error.message}</p>
    </div>`;
  }
}

/**
 * Get recent one-on-one session summary
 * @return {Object} Summary of recent one-on-one sessions
 */
function getRecentOneOnOneSummary() {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.oneOnOnes);
    if (!sheet) {
      return { totalSessions: 0 };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const dateCol = headers.indexOf('date');
    const statusCol = headers.indexOf('status');
    
    // Skip if required columns don't exist
    if (dateCol === -1) {
      return { totalSessions: 0 };
    }
    
    // Calculate summary data
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    let totalSessions = 0;
    let completedSessions = 0;
    let cancelledSessions = 0;
    
    // Skip header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      const sessionDate = new Date(row[dateCol]);
      
      // Count sessions in the last 30 days
      if (sessionDate >= thirtyDaysAgo) {
        totalSessions++;
        
        // Count by status if available
        if (statusCol !== -1) {
          const status = row[statusCol].toLowerCase();
          if (status === 'completed') completedSessions++;
          else if (status === 'cancelled') cancelledSessions++;
        }
      }
    }
    
    return {
      totalSessions: totalSessions,
      completedSessions: completedSessions,
      cancelledSessions: cancelledSessions,
      completionRate: totalSessions > 0 ? Math.round((completedSessions / totalSessions) * 100) : 0
    };
  } catch (error) {
    console.error('Error in getRecentOneOnOneSummary:', error);
    return { totalSessions: 0, error: error.message };
  }
}

/**
 * Get one-on-one analytics data
 * @param {Object} filters - Optional filters for date ranges
 * @return {Object} Analytics data
 */
function getOneOnOneAnalytics(filters = {}) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.oneOnOnes);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.oneOnOnes}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const dateCol = headers.indexOf('date');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const statusCol = headers.indexOf('status');
    const workloadCol = headers.indexOf('workloadLevel');
    const energyCol = headers.indexOf('energyLevel');
    
    if (dateCol === -1 || teamMemberCol === -1) {
      throw new Error('Required columns not found in OneOnOneSessions sheet');
    }
    
    // Define date range
    let startDate = null;
    let endDate = new Date();
    
    if (filters.startDate) {
      startDate = new Date(filters.startDate);
    } else {
      // Default to 90 days ago
      startDate = new Date(endDate);
      startDate.setDate(startDate.getDate() - 90);
    }
    
    if (filters.endDate) {
      endDate = new Date(filters.endDate);
    }
    
    // Initialize analytics data
    const analytics = {
      sessionsOverTime: {},
      sessionsByTeamMember: {},
      statusDistribution: {},
      workloadDistribution: {},
      energyLevelDistribution: {},
      totalSessions: 0,
      completedSessions: 0,
      cancelledSessions: 0,
      rescheduledSessions: 0
    };
    
    // Skip header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      const sessionDate = new Date(row[dateCol]);
      
      // Apply date range filter
      if (sessionDate < startDate || sessionDate > endDate) {
        continue;
      }
      
      // Extract data
      const teamMemberEmail = row[teamMemberCol];
      const status = statusCol !== -1 ? row[statusCol].toLowerCase() : 'unknown';
      const workload = workloadCol !== -1 ? row[workloadCol] : 'unknown';
      const energyLevel = energyCol !== -1 ? row[energyLevel] : 'unknown';
      
      // Increment total sessions
      analytics.totalSessions++;
      
      // Group by month
      const yearMonth = formatDate(sessionDate, 'yyyy-MM');
      if (!analytics.sessionsOverTime[yearMonth]) {
        analytics.sessionsOverTime[yearMonth] = {
          total: 0,
          completed: 0,
          cancelled: 0,
          rescheduled: 0
        };
      }
      analytics.sessionsOverTime[yearMonth].total++;
      
      // Count by team member
      if (!analytics.sessionsByTeamMember[teamMemberEmail]) {
        analytics.sessionsByTeamMember[teamMemberEmail] = {
          total: 0,
          completed: 0,
          cancelled: 0,
          rescheduled: 0
        };
      }
      analytics.sessionsByTeamMember[teamMemberEmail].total++;
      
      // Count by status
      if (!analytics.statusDistribution[status]) {
        analytics.statusDistribution[status] = 0;
      }
      analytics.statusDistribution[status]++;
      
      // Count by workload level
      if (workload !== 'unknown') {
        if (!analytics.workloadDistribution[workload]) {
          analytics.workloadDistribution[workload] = 0;
        }
        analytics.workloadDistribution[workload]++;
      }
      
      // Count by energy level
      if (energyLevel !== 'unknown') {
        if (!analytics.energyLevelDistribution[energyLevel]) {
          analytics.energyLevelDistribution[energyLevel] = 0;
        }
        analytics.energyLevelDistribution[energyLevel]++;
      }
      
      // Count by status
      if (status === 'completed') {
        analytics.completedSessions++;
        analytics.sessionsOverTime[yearMonth].completed++;
        analytics.sessionsByTeamMember[teamMemberEmail].completed++;
      } else if (status === 'cancelled') {
        analytics.cancelledSessions++;
        analytics.sessionsOverTime[yearMonth].cancelled++;
        analytics.sessionsByTeamMember[teamMemberEmail].cancelled++;
      } else if (status === 'rescheduled') {
        analytics.rescheduledSessions++;
        analytics.sessionsOverTime[yearMonth].rescheduled++;
        analytics.sessionsByTeamMember[teamMemberEmail].rescheduled++;
      }
    }
    
    // Add team member names to analytics
    for (const email in analytics.sessionsByTeamMember) {
      try {
        const teamMember = getTeamMemberByEmail(email);
        if (teamMember) {
          analytics.sessionsByTeamMember[email].name = teamMember.Name;
        }
      } catch (error) {
        console.warn(`Couldn't get team member name for ${email}:`, error);
      }
    }
    
    return {
      success: true,
      data: analytics
    };
  } catch (error) {
    console.error('Error in getOneOnOneAnalytics:', error);
    return {
      success: false,
      message: `Failed to get one-on-one analytics: ${error.message}`
    };
  }
}

/**
 * Generate one-on-one follow-up report
 * @param {string} id - One-on-one session ID
 * @return {Object} Report data
 */
function generateOneOnOneFollowUpReport(id) {
  try {
    const session = getOneOnOneById(id);
    if (!session) {
      throw new Error(`One-on-one session with ID ${id} not found`);
    }
    
    // Get team member name
    let teamMemberName = '';
    try {
      const teamMember = getTeamMemberByEmail(session.teamMemberEmail);
      if (teamMember) {
        teamMemberName = teamMember.Name;
      }
    } catch (error) {
      console.warn(`Couldn't get team member name:`, error);
    }
    
    // Format dates
    const sessionDate = session.date ? formatDate(new Date(session.date), 'MMMM d, yyyy') : 'N/A';
    
    const followUpDate = session.followUpDate || session.nextCheckInDate ? formatDate(
      new Date(session.followUpDate || session.nextCheckInDate), 'MMMM d, yyyy'
    ) : 'To be determined';
    
    // Parse action items
    let actionItems = [];
    if (session.actionItems) {
      if (typeof session.actionItems === 'string') {
        try {
          actionItems = JSON.parse(session.actionItems);
        } catch (error) {
          console.warn('Error parsing action items:', error);
        }
      } else if (Array.isArray(session.actionItems)) {
        actionItems = session.actionItems;
      }
    }
    
    // Create report content
    const report = {
      id: session.id,
      teamMemberEmail: session.teamMemberEmail,
      teamMemberName: teamMemberName,
      date: sessionDate,
      rawDate: session.date,
      status: session.status,
      followUpDate: followUpDate,
      rawFollowUpDate: session.followUpDate || session.nextCheckInDate,
      reviewerEmail: session.reviewerEmail,
      
      // Quick Status Sync section
      criticalDiscuss: session.criticalDiscuss || '',
      workloadLevel: session.workloadLevel || '',
      immediateBlockers: session.immediateBlockers || '',
      energyLevel: session.energyLevel || '',
      
      // Performance Deep Dive section
      quantitativeMetrics: session.quantitativeMetrics || '',
      qualitativeImpact: session.qualitativeImpact || '',
      strategicInsight: session.strategicInsight || '',
      
      // Strategic Development Planning section
      skillMastery: session.skillMastery || '',
      careerTrajectory: session.careerTrajectory || '',
      actionDevelopment: session.actionDevelopment || '',
      
      // Support and Resource Optimization section
      obstacleIdentification: session.obstacleIdentification || '',
      leadershipSupport: session.leadershipSupport || '',
      
      // Commitment and Momentum Generation section
      commitmentsSynthesis: session.commitmentsSynthesis || '',
      actionItems: actionItems,
      
      // Legacy fields for backward compatibility
      teamMemberWins: session.teamMemberWins || '',
      teamMemberChallenges: session.teamMemberChallenges || '',
      leaderSupport: session.leaderSupport || ''
    };
    
    return {
      success: true,
      data: report
    };
  } catch (error) {
    console.error('Error in generateOneOnOneFollowUpReport:', error);
    return {
      success: false,
      message: `Failed to generate follow-up report: ${error.message}`
    };
  }
}

/**
 * Export one-on-one sessions to CSV format
 * @param {Object} filters - Optional filters for the export
 * @return {Object} Result with CSV content
 */
function exportOneOnOnesToCSV(filters = {}) {
  try {
    // Get one-on-one sessions with filters
    const result = getOneOnOneSessions(filters, 1000); // Export up to 1000 sessions
    
    if (!result.success) {
      throw new Error(result.message || 'Failed to get one-on-one sessions');
    }
    
    const sessions = result.data;
    
    if (!sessions || sessions.length === 0) {
      return {
        success: true,
        data: 'No sessions found matching the filter criteria',
        contentType: 'text/plain'
      };
    }
    
    // Define CSV headers
    const csvHeaders = [
      'Session ID',
      'Team Member',
      'Email',
      'Date',
      'Status',
      'Follow-up Date',
      'Reviewer',
      'Critical Items',
      'Wins',
      'Challenges',
      'Support Needed',
      'Commitments'
    ];
    
    // Start with the headers
    let csvContent = csvHeaders.join(',') + '\n';
    
    // Add rows for each session
    sessions.forEach(session => {
      const rowData = [
        `"${session.id || ''}"`,
        `"${session.teamMemberName || ''}"`,
        `"${session.teamMemberEmail || ''}"`,
        `"${session.date ? formatDate(new Date(session.date)) : ''}"`,
        `"${session.status || ''}"`,
        `"${session.followUpDate ? formatDate(new Date(session.followUpDate)) : ''}"`,
        `"${session.reviewerEmail || ''}"`,
        `"${(session.criticalDiscuss || '').replace(/"/g, '""')}"`, // Escape quotes in text fields
        `"${(session.teamMemberWins || '').replace(/"/g, '""')}"`,
        `"${(session.teamMemberChallenges || '').replace(/"/g, '""')}"`,
        `"${(session.leaderSupport || '').replace(/"/g, '""')}"`,
        `"${(session.commitmentsSynthesis || '').replace(/"/g, '""')}"`
      ];
      
      csvContent += rowData.join(',') + '\n';
    });
    
    return {
      success: true,
      data: csvContent,
      contentType: 'text/csv',
      filename: `one-on-one-sessions-export-${formatDate(new Date())}.csv`
    };
  } catch (error) {
    console.error('Error in exportOneOnOnesToCSV:', error);
    return {
      success: false,
      message: `Failed to export one-on-one sessions: ${error.message}`
    };
  }
}

/**
 * Get one-on-one template data
 * @return {Object} Template data for one-on-one session
 */
function getOneOnOneTemplate() {
  return {
    // PRE-MEETING PREPARATION
    preparationChecklist: {
      reviewedPreviousNotes: false,
      checkedMetrics: false,
      gatheredUpdates: false,
      preparedDiscussionPoints: false
    },
    
    dataCollection: {
      reviewedQualityReports: false,
      checkedPerformanceIndicators: false,
      notedChallenges: false,
      identifiedSupportResources: false
    },
    
    preparationNotes: '',
    
    // DURING MEETING
    // 1. Quick Status Sync
    criticalDiscuss: '',
    workloadLevel: '',
    immediateBlockers: '',
    energyLevel: '',
    
    // 2. Performance Deep Dive
    quantitativeMetrics: '',
    qualitativeImpact: '',
    strategicInsight: '',
    
    // 3. Strategic Development Planning
    skillMastery: '',
    careerTrajectory: '',
    actionDevelopment: '',
    
    // 4. Support and Resource Optimization
    obstacleIdentification: '',
    leadershipSupport: '',
    
    // 5. Commitment and Momentum Generation
    commitmentsSynthesis: '',
    actionItems: [],
    
    momentumAccelerationChecklist: {
      confirmedActionItems: false,
      establishedOwnership: false,
      setFollowUpExpectations: false
    },
    
    // POST-MEETING FOLLOW-UP
    immediateDocumentation: {
      finalizedNotes: false,
      clarifiedDiscussionPoints: false,
      documentedActionItems: false,
      notedFollowUpResources: false
    },
    
    continuedSupportMechanisms: {
      scheduledFollowUp: false,
      identifiedMentorshipOpportunities: false,
      connectedToResources: false
    },
    
    reflection: {
      counselorSupportNeeded: '',
      facilitateGrowth: '',
      systemicImprovements: ''
    },
    
    confidentialNotes: {
      growthAreas: '',
      strengthsToDevelop: '',
      careerDevelopmentInsights: ''
    },
    
    meetingDate: null,
    nextCheckInDate: null
  };
}
/**
 * Save one-on-one session
 * @param {Object} sessionData - Session data
 * @return {Object} Result with success flag, message, and session ID
 */
function saveOneOnOne(sessionData) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.oneOnOnes);
    if (!sheet) {
      // Create the sheet if it doesn't exist with all fields from the template
      createSheetIfNotExists(CONFIG.sheetNames.oneOnOnes, [
        'id', 'teamMemberEmail', 'teamMemberName', 'date', 'status', 'followUpDate',
        'reviewedPreviousMeeting', 'reviewedPerformanceMetrics', 'gatheredUpdates', 'preparedDiscussionPoints', 
        'reviewedCallQuality', 'reviewedPerformanceIndicators', 'notedChallenges', 'identifiedResources',
        'preparationNotes', 
        'criticalDiscussionPoints', 'workloadStatus', 'immediateBlockers', 'energyLevel',
        'quantitativeMetricsReview', 'qualitativeImpactAssessment', 'strategicInsightCapture',
        'skillMasteryMapping', 'careerTrajectoryAlignment', 'actionDevelopmentTracker',
        'obstacleIdentification', 'leadershipSupportCalibration',
        'commitmentsSynthesis', 'confirmedActionItems', 'establishedOwnership', 'setPreciseFollowUp',
        'finalizedMeetingNotes', 'clarifiedDiscussionPoints', 'documentedActionItems', 'notedFollowUpResources',
        'actionItemsList', 'scheduledFollowUp', 'identifiedMentorshipOpportunities', 'connectedToResources',
        'counselorSupportNeeds', 'coachingImprovement', 'systemicImprovements',
        'growthAreaObservations', 'strengthsToDevelop', 'longTermCareerInsights',
        'nextCheckInDate', 'lastModified'
      ]);
    }
    
    // Generate ID if not provided
    if (!sessionData.id) {
      sessionData.id = generateUniqueId();
    }
    
    // Set last modified date
    sessionData.lastModified = new Date();
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    if (idCol === -1) {
      throw new Error('ID column not found in OneOnOne sheet');
    }
    
    // Create a row with values in the same order as headers
    const rowData = headers.map(header => {
      const value = sessionData[header] !== undefined ? sessionData[header] : '';
      
      // Format dates if the value is a date object and the header contains 'date' (case insensitive)
      if (value instanceof Date && header.toLowerCase().includes('date')) {
        return formatDate(value);
      }
      
      return value;
    });
    
    let rowIndex = -1;
    
    // Find existing session if ID exists
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === sessionData.id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    // Update or append row
    if (rowIndex !== -1) {
      sheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    } else {
      sheet.appendRow(rowData);
    }
    
    return { 
      success: true, 
      message: 'One-on-one session saved successfully',
      id: sessionData.id
    };
  } catch (error) {
    console.error('Error in saveOneOnOne:', error);
    return { 
      success: false, 
      message: `Failed to save one-on-one session: ${error.message}`
    };
  }
}

/**
 * Get one-on-one sessions with optional filtering
 * @param {Object} filters - Optional filters
 * @param {string} filters.teamMemberEmail - Filter by team member email
 * @param {string} filters.status - Filter by status
 * @param {Date} filters.startDate - Filter by date range (start)
 * @param {Date} filters.endDate - Filter by date range (end)
 * @param {number} limit - Maximum number of sessions to return
 * @param {string} sortBy - Column to sort by
 * @param {boolean} sortDesc - Sort in descending order
 * @return {Object} Result with sessions data
 */
function getOneOnOneSessions(filters = {}, limit = 50, sortBy = 'date', sortDesc = true) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.oneOnOnes);
    if (!sheet) {
      return {
        success: true,
        data: [],
        total: 0
      };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const dateCol = headers.indexOf('date');
    const statusCol = headers.indexOf('status');
    
    // Verify required columns exist
    if (idCol === -1) {
      throw new Error('ID column not found in OneOnOne sheet');
    }
    
    // Filter sessions based on provided filters
    let sessions = data.slice(1)
      .filter(row => {
        // Skip empty rows
        if (row.every(cell => !cell)) return false;
        
        // Apply team member filter
        if (filters.teamMemberEmail && teamMemberCol !== -1 && 
            row[teamMemberCol] !== filters.teamMemberEmail) {
          return false;
        }
        
        // Apply status filter
        if (filters.status && statusCol !== -1 && 
            row[statusCol] !== filters.status) {
          return false;
        }
        
        // Apply date range filter
        if (dateCol !== -1 && row[dateCol]) {
          const sessionDate = new Date(row[dateCol]);
          
          if (filters.startDate && sessionDate < new Date(filters.startDate)) {
            return false;
          }
          
          if (filters.endDate && sessionDate > new Date(filters.endDate)) {
            return false;
          }
        }
        
        return true;
      })
      .map(row => {
        const session = {};
        headers.forEach((header, index) => {
          session[header] = row[index];
        });
        return session;
      });
    
    // Sort sessions
    const sortColIndex = headers.indexOf(sortBy);
    if (sortColIndex !== -1) {
      sessions.sort((a, b) => {
        const valueA = a[sortBy];
        const valueB = b[sortBy];
        
        // Handle dates
        if (valueA instanceof Date && valueB instanceof Date) {
          return sortDesc ? valueB - valueA : valueA - valueB;
        }
        
        // Handle strings
        if (typeof valueA === 'string' && typeof valueB === 'string') {
          return sortDesc ? 
            valueB.localeCompare(valueA) : 
            valueA.localeCompare(valueB);
        }
        
        // Handle numbers
        return sortDesc ? valueB - valueA : valueA - valueB;
      });
    }
    
    // Apply limit
    if (limit > 0 && sessions.length > limit) {
      sessions = sessions.slice(0, limit);
    }
    
    return {
      success: true,
      data: sessions,
      total: sessions.length
    };
  } catch (error) {
    console.error('Error in getOneOnOneSessions:', error);
    return {
      success: false,
      message: `Failed to get one-on-one sessions: ${error.message}`
    };
  }
}

/**
 * Delete one-on-one session
 * @param {string} id - Session ID
 * @return {Object} Result with success flag and message
 */
function deleteOneOnOne(id) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.oneOnOnes);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.oneOnOnes}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    
    if (idCol === -1) {
      throw new Error('ID column not found in OneOnOne sheet');
    }
    
    // Find the row with matching ID
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`One-on-one session with ID ${id} not found`);
    }
    
    // Delete the row
    sheet.deleteRow(rowIndex);
    
    return {
      success: true,
      message: 'One-on-one session deleted successfully'
    };
  } catch (error) {
    console.error('Error in deleteOneOnOne:', error);
    return {
      success: false,
      message: `Failed to delete one-on-one session: ${error.message}`
    };
  }
}

/**
 * Get one-on-one template
 * @return {Object} Template data for one-on-one session
 */
function getOneOnOneTemplate() {
  return {
    // Pre-meeting preparation
    reviewedPreviousMeeting: false,
    reviewedPerformanceMetrics: false,
    gatheredUpdates: false,
    preparedDiscussionPoints: false,
    
    // Data Collection
    reviewedCallQuality: false,
    reviewedPerformanceIndicators: false,
    notedChallenges: false,
    identifiedResources: false,
    
    preparationNotes: '',
    
    // During meeting - Quick Status Sync
    criticalDiscussionPoints: '',
    workloadStatus: '', // Underutilized, Balanced, Heavy, Overwhelming
    immediateBlockers: '',
    energyLevel: '', // Low, Moderate, High, Very High
    
    // Performance Deep Dive
    quantitativeMetricsReview: '',
    qualitativeImpactAssessment: '',
    strategicInsightCapture: '',
    
    // Strategic Development Planning
    skillMasteryMapping: '',
    careerTrajectoryAlignment: '',
    actionDevelopmentTracker: '',
    
    // Support and Resource Optimization
    obstacleIdentification: '',
    leadershipSupportCalibration: '',
    
    // Commitment and Momentum Generation
    commitmentsSynthesis: '',
    confirmedActionItems: false,
    establishedOwnership: false,
    setPreciseFollowUp: false,
    
    // Post-meeting follow up
    finalizedMeetingNotes: false,
    clarifiedDiscussionPoints: false,
    documentedActionItems: false,
    notedFollowUpResources: false,
    
    actionItemsList: '',
    
    scheduledFollowUp: false,
    identifiedMentorshipOpportunities: false,
    connectedToResources: false,
    
    // Reflection and improvement
    counselorSupportNeeds: '',
    coachingImprovement: '',
    systemicImprovements: '',
    
    // Confidential development notes
    growthAreaObservations: '',
    strengthsToDevelop: '',
    longTermCareerInsights: '',
    
    // Session details
    date: new Date(),
    status: 'scheduled',
    followUpDate: null,
    nextCheckInDate: null
  };
}

/**
 * Get recent one-on-one summary
 * @return {Object} Summary of recent one-on-one sessions
 */
function getRecentOneOnOneSummary() {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.oneOnOnes);
    if (!sheet) {
      return { totalSessions: 0 };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const dateCol = headers.indexOf('date');
    const statusCol = headers.indexOf('status');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    
    // Skip if required columns don't exist
    if (dateCol === -1 || teamMemberCol === -1) {
      return { totalSessions: 0 };
    }
    
    // Calculate summary data
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    let totalSessions = 0;
    let completedSessions = 0;
    let scheduledSessions = 0;
    const uniqueTeamMembers = new Set();
    const sessionsByTeamMember = {};
    
    const today = new Date();
    
    // Skip header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      const sessionDate = new Date(row[dateCol]);
      const teamMemberEmail = row[teamMemberCol];
      
      // Count sessions in the last 30 days
      if (sessionDate >= thirtyDaysAgo && sessionDate <= today) {
        totalSessions++;
        
        if (teamMemberEmail) {
          uniqueTeamMembers.add(teamMemberEmail);
          
          // Count sessions by team member
          if (!sessionsByTeamMember[teamMemberEmail]) {
            sessionsByTeamMember[teamMemberEmail] = 0;
          }
          sessionsByTeamMember[teamMemberEmail]++;
        }
        
        // Count by status if available
        if (statusCol !== -1) {
          const status = row[statusCol].toLowerCase();
          if (status === 'completed') {
            completedSessions++;
          } else if (status === 'scheduled') {
            scheduledSessions++;
          }
        }
      }
    }
    
    // Calculate coverage and completion rate
    const teamMembers = getTeamMembers();
    const activeMembers = teamMembers.filter(member => member.Status === 'Active').length;
    const coverage = activeMembers > 0 ? Math.round((uniqueTeamMembers.size / activeMembers) * 100) : 0;
    const completionRate = totalSessions > 0 ? Math.round((completedSessions / totalSessions) * 100) : 0;
    
    return {
      totalSessions: totalSessions,
      completedSessions: completedSessions,
      scheduledSessions: scheduledSessions,
      uniqueTeamMembers: uniqueTeamMembers.size,
      coverage: coverage,
      completionRate: completionRate
    };
  } catch (error) {
    console.error('Error in getRecentOneOnOneSummary:', error);
    return { totalSessions: 0, error: error.message };
  }
}

/**
 * Send one-on-one follow-up email
 * @param {Object} sessionData - Session data
 * @return {Object} Result with success flag and message
 */
function sendOneOnOneFollowUpEmail(sessionData) {
  try {
    const teamMemberEmail = sessionData.teamMemberEmail;
    
    if (!teamMemberEmail) {
      throw new Error('Team member email is required');
    }
    
    // Generate email content
    const emailSubject = `One-on-One Follow-up (${formatDate(sessionData.date)})`;
    
    const emailTemplate = HtmlService.createTemplateFromFile('html/email/one-on-one-follow-up');
    
    // Pass session data to the template
    for (const key in sessionData) {
      if (sessionData.hasOwnProperty(key)) {
        emailTemplate[key] = sessionData[key];
      }
    }
    
    // Add formatted dates
    if (sessionData.date) {
      const sessionDate = new Date(sessionData.date);
      emailTemplate.formattedDate = formatDate(sessionDate, 'MMMM d, yyyy');
    }
    
    if (sessionData.nextCheckInDate) {
      const nextDate = new Date(sessionData.nextCheckInDate);
      emailTemplate.formattedNextCheckIn = formatDate(nextDate, 'MMMM d, yyyy');
    }
    
    const emailBody = emailTemplate.evaluate().getContent();
    
    // Send the email
    GmailApp.sendEmail(
      teamMemberEmail,
      emailSubject,
      // Plain text version
      stripHtml(emailBody),
      {
        htmlBody: emailBody,
        name: Session.getActiveUser().getUsername()
      }
    );
    
    return {
      success: true,
      message: `Follow-up email sent to ${teamMemberEmail}`
    };
  } catch (error) {
    console.error('Error in sendOneOnOneFollowUpEmail:', error);
    return {
      success: false,
      message: `Failed to send follow-up email: ${error.message}`
    };
  }
}



/**
 * ActionItemService.gs
 * Handles action item functionality for tracking follow-up tasks
 */

/**
 * Get action item by ID
 * @param {string} id - Action item ID
 * @return {Object} Action item data
 */
function getActionItemById(id) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.actionItems}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    if (idCol === -1) {
      throw new Error('ID column not found in ActionItems sheet');
    }
    
    // Find the row with matching ID
    let itemRow = null;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === id) {
        itemRow = data[i];
        break;
      }
    }
    
    if (!itemRow) {
      throw new Error(`Action item with ID ${id} not found`);
    }
    
    // Convert row to object using headers as keys
    const actionItem = {};
    headers.forEach((header, index) => {
      actionItem[header] = itemRow[index];
    });
    
    return actionItem;
  } catch (error) {
    console.error('Error in getActionItemById:', error);
    throw new Error(`Failed to get action item: ${error.message}`);
  }
}

/**
 * Add a new action item
 * @param {Object} actionItem - Action item data
 * @return {Object} Result with success flag, message, and action item ID
 */
function addActionItem(actionItem) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      // Create the sheet if it doesn't exist
      createSheetIfNotExists(CONFIG.sheetNames.actionItems, [
        'id', 'teamMemberEmail', 'description', 'source', 'sourceId', 'dueDate', 
        'status', 'createdBy', 'createdDate', 'completedDate', 'notes', 'reminderDate', 'reminderSent'
      ]);
    }
    
    // Generate ID if not provided
    if (!actionItem.id) {
      actionItem.id = generateUniqueId();
    }
    
    // Set created date if not provided
    if (!actionItem.createdDate) {
      actionItem.createdDate = new Date();
    }
    
    // Set created by if not provided
    if (!actionItem.createdBy) {
      actionItem.createdBy = Session.getActiveUser().getEmail();
    }
    
    // Set default status if not provided
    if (!actionItem.status) {
      actionItem.status = 'Not Started';
    }
    
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // Create a row with all columns from headers
    const newRow = headers.map(header => {
      const value = actionItem[header] || '';
      
      // Format dates if the value is a date object and the header contains 'date' (case insensitive)
      if (value instanceof Date && header.toLowerCase().includes('date')) {
        return formatDate(value);
      }
      
      return value;
    });
    
    // Add the new row to the sheet
    sheet.appendRow(newRow);
    
    return { 
      success: true, 
      message: `Action item created successfully`,
      id: actionItem.id
    };
  } catch (error) {
    console.error('Error in addActionItem:', error);
    return { 
      success: false, 
      message: `Failed to create action item: ${error.message}`
    };
  }
}

/**
 * Update action item
 * @param {string} id - Action item ID
 * @param {Object} actionItem - Updated action item data
 * @return {Object} Result with success flag and message
 */
function updateActionItem(id, actionItem) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.actionItems}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    const statusCol = headers.indexOf('status');
    const completedDateCol = headers.indexOf('completedDate');
    
    if (idCol === -1) {
      throw new Error('ID column not found in ActionItems sheet');
    }
    
    // Find the row with matching id
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`Action item with ID ${id} not found`);
    }
    
    // If status is being updated to "Completed", set completedDate if not already set
    if (statusCol !== -1 && completedDateCol !== -1 && 
        actionItem.status === 'Completed' && 
        (!data[rowIndex-1][completedDateCol] || data[rowIndex-1][completedDateCol] === '')) {
      actionItem.completedDate = new Date();
    }
    
    // Create updated row
    const updatedRow = headers.map((header, index) => {
      if (actionItem.hasOwnProperty(header)) {
        const value = actionItem[header];
        
        // Format dates
        if (value instanceof Date && header.toLowerCase().includes('date')) {
          return formatDate(value);
        }
        
        return value;
      } else {
        // Keep existing value
        return data[rowIndex - 1][index];
      }
    });
    
    // Update the row
    sheet.getRange(rowIndex, 1, 1, updatedRow.length).setValues([updatedRow]);
    
    return {
      success: true,
      message: `Action item updated successfully`
    };
  } catch (error) {
    console.error('Error in updateActionItem:', error);
    return {
      success: false,
      message: `Failed to update action item: ${error.message}`
    };
  }
}

/**
 * Delete action item
 * @param {string} id - Action item ID
 * @return {Object} Result with success flag and message
 */
function deleteActionItem(id) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.actionItems}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    
    if (idCol === -1) {
      throw new Error('ID column not found in ActionItems sheet');
    }
    
    // Find the row with matching ID
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`Action item with ID ${id} not found`);
    }
    
    // Delete the row
    sheet.deleteRow(rowIndex);
    
    return {
      success: true,
      message: 'Action item deleted successfully'
    };
  } catch (error) {
    console.error('Error in deleteActionItem:', error);
    return {
      success: false,
      message: `Failed to delete action item: ${error.message}`
    };
  }
}

/**
 * Get action items with optional filtering
 * @param {Object} filters - Optional filters
 * @param {string} filters.teamMemberEmail - Filter by team member email
 * @param {string} filters.status - Filter by status
 * @param {string} filters.source - Filter by source (e.g., "One-on-One", "QA Review")
 * @param {Date} filters.dueDate - Filter by due date
 * @param {Date} filters.startDate - Filter by created date range (start)
 * @param {Date} filters.endDate - Filter by created date range (end)
 * @param {number} limit - Maximum number of items to return
 * @param {string} sortBy - Column to sort by
 * @param {boolean} sortDesc - Sort in descending order
 * @return {Object} Result with action items data
 */
function getActionItems(filters = {}, limit = 50, sortBy = 'dueDate', sortDesc = false) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.actionItems}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const statusCol = headers.indexOf('status');
    const sourceCol = headers.indexOf('source');
    const dueDateCol = headers.indexOf('dueDate');
    const createdDateCol = headers.indexOf('createdDate');
    
    // Verify required columns exist
    if (idCol === -1) {
      throw new Error('ID column not found in ActionItems sheet');
    }
    
    // Filter action items based on provided filters
    let items = data.slice(1)
      .filter(row => {
        // Skip empty rows
        if (row.every(cell => !cell)) return false;
        
        // Apply team member filter
        if (filters.teamMemberEmail && teamMemberCol !== -1 && 
            row[teamMemberCol] !== filters.teamMemberEmail) {
          return false;
        }
        
        // Apply status filter
        if (filters.status && statusCol !== -1 && 
            row[statusCol] !== filters.status) {
          return false;
        }
        
        // Apply source filter
        if (filters.source && sourceCol !== -1 && 
            row[sourceCol] !== filters.source) {
          return false;
        }
        
        // Apply due date filter
        if (filters.dueDate && dueDateCol !== -1 && row[dueDateCol]) {
          const dueDate = new Date(row[dueDateCol]);
          const filterDate = new Date(filters.dueDate);
          
          // Compare only the date part (ignoring time)
          if (dueDate.getFullYear() !== filterDate.getFullYear() || 
              dueDate.getMonth() !== filterDate.getMonth() || 
              dueDate.getDate() !== filterDate.getDate()) {
            return false;
          }
        }
        
        // Apply created date range filter
        if (createdDateCol !== -1 && row[createdDateCol]) {
          const createdDate = new Date(row[createdDateCol]);
          
          if (filters.startDate && createdDate < new Date(filters.startDate)) {
            return false;
          }
          
          if (filters.endDate && createdDate > new Date(filters.endDate)) {
            return false;
          }
        }
        
        return true;
      })
      .map(row => {
        const item = {};
        headers.forEach((header, index) => {
          item[header] = row[index];
        });
        return item;
      });
    
    // Sort action items
    const sortColIndex = headers.indexOf(sortBy);
    if (sortColIndex !== -1) {
      items.sort((a, b) => {
        const valueA = a[sortBy];
        const valueB = b[sortBy];
        
        // Handle dates
        if (valueA instanceof Date && valueB instanceof Date) {
          return sortDesc ? valueB - valueA : valueA - valueB;
        }
        
        // Handle special case for dueDate - null or empty dates should come last in ascending order
        if (sortBy === 'dueDate') {
          if (!valueA && valueB) return sortDesc ? -1 : 1;
          if (valueA && !valueB) return sortDesc ? 1 : -1;
          if (!valueA && !valueB) return 0;
        }
        
        // Handle strings
        if (typeof valueA === 'string' && typeof valueB === 'string') {
          return sortDesc ? 
            valueB.localeCompare(valueA) : 
            valueA.localeCompare(valueB);
        }
        
        // Handle numbers
        return sortDesc ? valueB - valueA : valueA - valueB;
      });
    }
    
    // Apply limit
    if (limit > 0 && items.length > limit) {
      items = items.slice(0, limit);
    }
    
    // Get team member names for action items
    for (const item of items) {
      if (item.teamMemberEmail) {
        try {
          const teamMember = getTeamMemberByEmail(item.teamMemberEmail);
          if (teamMember && teamMember.Name) {
            item.teamMemberName = teamMember.Name;
          }
        } catch (error) {
          console.warn(`Couldn't get team member name for ${item.teamMemberEmail}:`, error);
        }
      }
    }
    
    return {
      success: true,
      data: items,
      total: items.length
    };
  } catch (error) {
    console.error('Error in getActionItems:', error);
    return {
      success: false,
      message: `Failed to get action items: ${error.message}`
    };
  }
}

/**
 * Get action items summary
 * @return {Object} Action items summary data
 */
function getActionItemsSummary() {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      return { 
        totalItems: 0,
        overdue: 0,
        dueToday: 0,
        completed: 0,
        notStarted: 0,
        inProgress: 0,
        pendingItems: 0,
        completionRate: 0
      };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const statusCol = headers.indexOf('status');
    const dueDateCol = headers.indexOf('dueDate');
    
    // Skip if required columns don't exist
    if (statusCol === -1) {
      return { totalItems: 0 };
    }
    
    // Get today's date (without time component)
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    let totalItems = 0;
    let completed = 0;
    let notStarted = 0;
    let inProgress = 0;
    let overdue = 0;
    let dueToday = 0;
    
    // Skip header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      totalItems++;
      
      // Count by status
      const status = row[statusCol];
      if (status === 'Completed') {
        completed++;
      } else if (status === 'Not Started') {
        notStarted++;
      } else if (status === 'In Progress') {
        inProgress++;
      }
      
      // Check due date for incomplete items
      if (status !== 'Completed' && dueDateCol !== -1 && row[dueDateCol]) {
        const dueDate = new Date(row[dueDateCol]);
        dueDate.setHours(0, 0, 0, 0); // Remove time component
        
        if (dueDate < today) {
          overdue++;
        } else if (dueDate.getTime() === today.getTime()) {
          dueToday++;
        }
      }
    }
    
    const pendingItems = totalItems - completed;
    const completionRate = totalItems > 0 ? Math.round((completed / totalItems) * 100) : 0;
    
    return {
      totalItems: totalItems,
      overdue: overdue,
      dueToday: dueToday,
      completed: completed,
      notStarted: notStarted,
      inProgress: inProgress,
      pendingItems: pendingItems,
      completionRate: completionRate
    };
  } catch (error) {
    console.error('Error in getActionItemsSummary:', error);
    return { 
      totalItems: 0, 
      error: error.message 
    };
  }
}

/**
 * Mark action item as completed
 * @param {string} id - Action item ID
 * @return {Object} Result with success flag and message
 */
function markActionItemCompleted(id) {
  try {
    return updateActionItem(id, {
      status: 'Completed',
      completedDate: new Date()
    });
  } catch (error) {
    console.error('Error in markActionItemCompleted:', error);
    return {
      success: false,
      message: `Failed to mark action item as completed: ${error.message}`
    };
  }
}

/**
 * Set reminder for action item
 * @param {string} id - Action item ID
 * @param {Date} reminderDate - Reminder date
 * @return {Object} Result with success flag and message
 */
function setActionItemReminder(id, reminderDate) {
  try {
    return updateActionItem(id, {
      reminderDate: reminderDate,
      reminderSent: false
    });
  } catch (error) {
    console.error('Error in setActionItemReminder:', error);
    return {
      success: false,
      message: `Failed to set reminder: ${error.message}`
    };
  }
}

/**
 * Send action item reminders
 * @return {Object} Result with success flag and message
 */
function sendActionItemReminders() {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Start of today
    
    // Get action items with reminders set for today or earlier
    const filters = {};
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      return {
        success: true,
        message: 'No action items sheet found'
      };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const descriptionCol = headers.indexOf('description');
    const dueDateCol = headers.indexOf('dueDate');
    const statusCol = headers.indexOf('status');
    const reminderDateCol = headers.indexOf('reminderDate');
    const reminderSentCol = headers.indexOf('reminderSent');
    
    // Check required columns
    if (idCol === -1 || teamMemberCol === -1 || reminderDateCol === -1 || 
        reminderSentCol === -1 || statusCol === -1) {
      return {
        success: false,
        message: 'Required columns not found in ActionItems sheet'
      };
    }
    
    // Find items that need reminders
    const reminderItems = [];
    const rowIndices = [];
    
    // Skip header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      // Skip completed items
      if (row[statusCol] === 'Completed') continue;
      
      // Check if reminder is due and not sent
      if (row[reminderDateCol] && !row[reminderSentCol]) {
        const reminderDate = new Date(row[reminderDateCol]);
        reminderDate.setHours(0, 0, 0, 0); // Remove time component
        
        if (reminderDate <= today) {
          reminderItems.push({
            id: row[idCol],
            teamMemberEmail: row[teamMemberCol],
            description: descriptionCol !== -1 ? row[descriptionCol] : '',
            dueDate: dueDateCol !== -1 ? row[dueDateCol] : null,
            status: row[statusCol]
          });
          
          rowIndices.push(i + 1); // +1 because sheet rows are 1-indexed
        }
      }
    }
    
    if (reminderItems.length === 0) {
      return {
        success: true,
        message: 'No reminders due'
      };
    }
    
    // Get team member names and group by email
    const remindersByEmail = {};
    
    for (const item of reminderItems) {
      if (!remindersByEmail[item.teamMemberEmail]) {
        remindersByEmail[item.teamMemberEmail] = {
          items: [],
          name: ''
        };
        
        // Try to get team member name
        try {
          const teamMember = getTeamMemberByEmail(item.teamMemberEmail);
          if (teamMember && teamMember.Name) {
            remindersByEmail[item.teamMemberEmail].name = teamMember.Name;
          }
        } catch (error) {
          console.warn(`Couldn't get team member name for ${item.teamMemberEmail}:`, error);
        }
      }
      
      remindersByEmail[item.teamMemberEmail].items.push(item);
    }
    
    // Send reminders
    let sentCount = 0;
    const errors = [];
    
    for (const email in remindersByEmail) {
      const reminder = remindersByEmail[email];
      
      try {
        // Generate email content
        let emailSubject = `Action Item Reminders - ${formatDate(today, 'MMM d')}`;
        
        // Create email body
        const emailBodyTemplate = HtmlService.createTemplateFromFile('html/email/action-item-reminders');
        emailBodyTemplate.recipientName = reminder.name || email;
        emailBodyTemplate.items = reminder.items;
        emailBodyTemplate.today = formatDate(today, 'MMMM d, yyyy');
        
        const emailBody = emailBodyTemplate.evaluate().getContent();
        
        // Send the email
        GmailApp.sendEmail(
          email,
          emailSubject,
          // Plain text version
          stripHtml(emailBody),
          {
            htmlBody: emailBody,
            name: Session.getActiveUser().getUsername()
          }
        );
        
        sentCount++;
      } catch (emailError) {
        console.error(`Error sending reminder email to ${email}:`, emailError);
        errors.push(`Failed to send email to ${email}: ${emailError.message}`);
      }
    }
    
    // Mark reminders as sent
    for (let i = 0; i < rowIndices.length; i++) {
      sheet.getRange(rowIndices[i], reminderSentCol + 1).setValue(true);
    }
    
    // Generate result message
    let message = `Sent ${sentCount} reminder emails for ${reminderItems.length} action items`;
    if (errors.length > 0) {
      message += `. Errors: ${errors.join('; ')}`;
    }
    
    return {
      success: true,
      message: message,
      sentCount: sentCount,
      errorCount: errors.length
    };
  } catch (error) {
    console.error('Error in sendActionItemReminders:', error);
    return {
      success: false,
      message: `Failed to send action item reminders: ${error.message}`
    };
  }
}

/**
 * Get overdue action items
 * @param {number} limit - Maximum number of items to return
 * @return {Object} Result with overdue action items
 */
function getOverdueActionItems(limit = 10) {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Start of today
    
    // Get action items with filters
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      return {
        success: true,
        data: [],
        total: 0
      };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const descriptionCol = headers.indexOf('description');
    const dueDateCol = headers.indexOf('dueDate');
    const statusCol = headers.indexOf('status');
    
    if (idCol === -1 || dueDateCol === -1 || statusCol === -1) {
      return {
        success: false,
        message: 'Required columns not found in ActionItems sheet'
      };
    }
    
    // Find overdue items
    const overdueItems = [];
    
    // Skip header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      // Skip completed items
      if (row[statusCol] === 'Completed') continue;
      
      // Check if due date is past
      if (row[dueDateCol]) {
        const dueDate = new Date(row[dueDateCol]);
        dueDate.setHours(0, 0, 0, 0); // Remove time component
        
        if (dueDate < today) {
          const item = {
            id: row[idCol],
            teamMemberEmail: teamMemberCol !== -1 ? row[teamMemberCol] : '',
            description: descriptionCol !== -1 ? row[descriptionCol] : '',
            dueDate: row[dueDateCol],
            status: row[statusCol],
            daysOverdue: Math.floor((today - dueDate) / (1000 * 60 * 60 * 24))
          };
          
          // Try to get team member name
          if (item.teamMemberEmail) {
            try {
              const teamMember = getTeamMemberByEmail(item.teamMemberEmail);
              if (teamMember && teamMember.Name) {
                item.teamMemberName = teamMember.Name;
              }
            } catch (error) {
              console.warn(`Couldn't get team member name for ${item.teamMemberEmail}:`, error);
            }
          }
          
          overdueItems.push(item);
        }
      }
    }
    
    // Sort by days overdue (most overdue first)
    overdueItems.sort((a, b) => b.daysOverdue - a.daysOverdue);
    
    // Apply limit
    const limitedItems = limit > 0 ? overdueItems.slice(0, limit) : overdueItems;
    
    return {
      success: true,
      data: limitedItems,
      total: overdueItems.length
    };
  } catch (error) {
    console.error('Error in getOverdueActionItems:', error);
    return {
      success: false,
      message: `Failed to get overdue action items: ${error.message}`
    };
  }
}

/**
 * Export action items to CSV format
 * @param {Object} filters - Optional filters for the export
 * @return {Object} Result with CSV content
 */
function exportActionItemsToCSV(filters = {}) {
  try {
    // Get action items with filters
    const result = getActionItems(filters, 1000); // Export up to 1000 items
    
    if (!result.success) {
      throw new Error(result.message || 'Failed to get action items');
    }
    
    const items = result.data;
    
    if (!items || items.length === 0) {
      return {
        success: true,
        data: 'No action items found matching the filter criteria',
        contentType: 'text/plain'
      };
    }
    
    // Define CSV headers
    const csvHeaders = [
      'ID',
      'Team Member',
      'Email',
      'Description',
      'Status',
      'Due Date',
      'Created By',
      'Created Date',
      'Completed Date',
      'Source',
      'Notes'
    ];
    
    // Start with the headers
    let csvContent = csvHeaders.join(',') + '\n';
    
    // Add rows for each item
    items.forEach(item => {
      const rowData = [
        `"${item.id || ''}"`,
        `"${item.teamMemberName || ''}"`,
        `"${item.teamMemberEmail || ''}"`,
        `"${(item.description || '').replace(/"/g, '""')}"`,
        `"${item.status || ''}"`,
        `"${item.dueDate ? formatDate(new Date(item.dueDate)) : ''}"`,
        `"${item.createdBy || ''}"`,
        `"${item.createdDate ? formatDate(new Date(item.createdDate)) : ''}"`,
        `"${item.completedDate ? formatDate(new Date(item.completedDate)) : ''}"`,
        `"${item.source || ''}"`,
        `"${(item.notes || '').replace(/"/g, '""')}"`
      ];
      
      csvContent += rowData.join(',') + '\n';
    });
    
    return {
      success: true,
      data: csvContent,
      contentType: 'text/csv',
      filename: `action-items-export-${formatDate(new Date())}.csv`
    };
  } catch (error) {
    console.error('Error in exportActionItemsToCSV:', error);
    return {
      success: false,
      message: `Failed to export action items: ${error.message}`
    };
  }
}
/**
 * Save action item
 * @param {Object} actionItemData - Action item data
 * @return {Object} Result with success flag, message, and action item ID
 */
function saveActionItem(actionItemData) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      // Create the sheet if it doesn't exist
      createSheetIfNotExists(CONFIG.sheetNames.actionItems, [
        'id', 'title', 'description', 'teamMemberEmail', 'teamMemberName',
        'status', 'priority', 'sourceType', 'sourceId',
        'createdBy', 'createdDate', 'dueDate', 'completedDate',
        'lastModified'
      ]);
    }
    
    // Generate ID if not provided
    if (!actionItemData.id) {
      actionItemData.id = generateUniqueId();
    }
    
    // Set created date if not provided
    if (!actionItemData.createdDate) {
      actionItemData.createdDate = new Date();
    }
    
    // Set created by if not provided
    if (!actionItemData.createdBy) {
      actionItemData.createdBy = Session.getActiveUser().getEmail();
    }
    
    // Set status if not provided
    if (!actionItemData.status) {
      actionItemData.status = 'Not Started';
    }
    
    // Set last modified date
    actionItemData.lastModified = new Date();
    
    // Set team member name if not provided
    if (actionItemData.teamMemberEmail && !actionItemData.teamMemberName) {
      const teamMember = getTeamMemberByEmail(actionItemData.teamMemberEmail);
      if (teamMember) {
        actionItemData.teamMemberName = teamMember.Name;
      }
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    if (idCol === -1) {
      throw new Error('ID column not found in ActionItems sheet');
    }
    
    // Create a row with values in the same order as headers
    const rowData = headers.map(header => {
      const value = actionItemData[header] !== undefined ? actionItemData[header] : '';
      
      // Format dates if the value is a date object and the header contains 'date' (case insensitive)
      if (value instanceof Date && header.toLowerCase().includes('date')) {
        return formatDate(value);
      }
      
      return value;
    });
    
    let rowIndex = -1;
    
    // Find existing action item if ID exists
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === actionItemData.id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    // Update or append row
    if (rowIndex !== -1) {
      sheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    } else {
      sheet.appendRow(rowData);
    }
    
    return { 
      success: true, 
      message: 'Action item saved successfully',
      id: actionItemData.id
    };
  } catch (error) {
    console.error('Error in saveActionItem:', error);
    return { 
      success: false, 
      message: `Failed to save action item: ${error.message}`
    };
  }
}

/**
 * Get action items with optional filtering
 * @param {Object} filters - Optional filters
 * @param {string} filters.teamMemberEmail - Filter by team member email
 * @param {string|Array} filters.status - Filter by status (can be array for multiple statuses)
 * @param {string} filters.priority - Filter by priority
 * @param {string} filters.sourceType - Filter by source type
 * @param {string} filters.sourceId - Filter by source ID
 * @param {Date} filters.startDate - Filter by due date range (start)
 * @param {Date} filters.endDate - Filter by due date range (end)
 * @param {number} limit - Maximum number of action items to return
 * @param {string} sortBy - Column to sort by
 * @param {boolean} sortDesc - Sort in descending order
 * @return {Object} Result with action items data
 */
function getActionItems(filters = {}, limit = 50, sortBy = 'dueDate', sortDesc = false) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      return {
        success: true,
        data: [],
        total: 0
      };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const statusCol = headers.indexOf('status');
    const priorityCol = headers.indexOf('priority');
    const sourceTypeCol = headers.indexOf('sourceType');
    const sourceIdCol = headers.indexOf('sourceId');
    const dueDateCol = headers.indexOf('dueDate');
    
    // Verify required columns exist
    if (idCol === -1) {
      throw new Error('ID column not found in ActionItems sheet');
    }
    
    // Filter action items based on provided filters
    let actionItems = data.slice(1)
      .filter(row => {
        // Skip empty rows
        if (row.every(cell => !cell)) return false;
        
        // Apply team member filter
        if (filters.teamMemberEmail && teamMemberCol !== -1 && 
            row[teamMemberCol] !== filters.teamMemberEmail) {
          return false;
        }
        
        // Apply status filter
        if (filters.status && statusCol !== -1) {
          // Handle array of statuses
          if (Array.isArray(filters.status)) {
            if (!filters.status.includes(row[statusCol])) {
              return false;
            }
          } else if (row[statusCol] !== filters.status) {
            return false;
          }
        }
        
        // Apply priority filter
        if (filters.priority && priorityCol !== -1 && 
            row[priorityCol] !== filters.priority) {
          return false;
        }
        
        // Apply source type filter
        if (filters.sourceType && sourceTypeCol !== -1 && 
            row[sourceTypeCol] !== filters.sourceType) {
          return false;
        }
        
        // Apply source ID filter
        if (filters.sourceId && sourceIdCol !== -1 && 
            row[sourceIdCol] !== filters.sourceId) {
          return false;
        }
        
        // Apply due date range filter
        if (dueDateCol !== -1 && row[dueDateCol]) {
          const dueDate = new Date(row[dueDateCol]);
          
          if (filters.startDate && dueDate < new Date(filters.startDate)) {
            return false;
          }
          
          if (filters.endDate && dueDate > new Date(filters.endDate)) {
            return false;
          }
        }
        
        return true;
      })
      .map(row => {
        const actionItem = {};
        headers.forEach((header, index) => {
          actionItem[header] = row[index];
        });
        return actionItem;
      });
    
    // Sort action items
    const sortColIndex = headers.indexOf(sortBy);
    if (sortColIndex !== -1) {
      actionItems.sort((a, b) => {
        const valueA = a[sortBy];
        const valueB = b[sortBy];
        
        // Handle dates
        if (valueA instanceof Date && valueB instanceof Date) {
          return sortDesc ? valueB - valueA : valueA - valueB;
        }
        
        // Handle strings
        if (typeof valueA === 'string' && typeof valueB === 'string') {
          return sortDesc ? 
            valueB.localeCompare(valueA) : 
            valueA.localeCompare(valueB);
        }
        
        // Handle numbers
        return sortDesc ? valueB - valueA : valueA - valueB;
      });
    }
    
    // Apply limit
    if (limit > 0 && actionItems.length > limit) {
      actionItems = actionItems.slice(0, limit);
    }
    
    return {
      success: true,
      data: actionItems,
      total: actionItems.length
    };
  } catch (error) {
    console.error('Error in getActionItems:', error);
    return {
      success: false,
      message: `Failed to get action items: ${error.message}`
    };
  }
}

/**
 * Delete action item
 * @param {string} id - Action item ID
 * @return {Object} Result with success flag and message
 */
function deleteActionItem(id) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.actionItems}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    
    if (idCol === -1) {
      throw new Error('ID column not found in ActionItems sheet');
    }
    
    // Find the row with matching ID
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`Action item with ID ${id} not found`);
    }
    
    // Delete the row
    sheet.deleteRow(rowIndex);
    
    return {
      success: true,
      message: 'Action item deleted successfully'
    };
  } catch (error) {
    console.error('Error in deleteActionItem:', error);
    return {
      success: false,
      message: `Failed to delete action item: ${error.message}`
    };
  }
}

/**
 * Mark action item as completed
 * @param {string} id - Action item ID
 * @return {Object} Result with success flag and message
 */
function completeActionItem(id) {
  try {
    const actionItem = getActionItemById(id);
    
    actionItem.status = 'Completed';
    actionItem.completedDate = new Date();
    
    return saveActionItem(actionItem);
  } catch (error) {
    console.error('Error in completeActionItem:', error);
    return {
      success: false,
      message: `Failed to complete action item: ${error.message}`
    };
  }
}

/**
 * Get overdue action items
 * @param {number} limit - Maximum number of action items to return
 * @return {Object} Result with overdue action items data
 */
function getOverdueActionItems(limit = 10) {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Start of today
    
    // Get non-completed action items with due date before today
    return getActionItems(
      {
        status: ['Not Started', 'In Progress'],
        endDate: today
      },
      limit,
      'dueDate',
      false // Ascending, so oldest overdue first
    );
  } catch (error) {
    console.error('Error in getOverdueActionItems:', error);
    return {
      success: false,
      message: `Failed to get overdue action items: ${error.message}`
    };
  }
}

/**
 * Get action items due today
 * @param {number} limit - Maximum number of action items to return
 * @return {Object} Result with action items due today
 */
function getActionItemsDueToday(limit = 10) {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Start of today
    
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1); // Start of tomorrow
    
    // Get non-completed action items with due date today
    return getActionItems(
      {
        status: ['Not Started', 'In Progress'],
        startDate: today,
        endDate: tomorrow
      },
      limit,
      'priority',
      true // Descending, so highest priority first
    );
  } catch (error) {
    console.error('Error in getActionItemsDueToday:', error);
    return {
      success: false,
      message: `Failed to get action items due today: ${error.message}`
    };
  }
}

/**
 * Get action items summary statistics
 * @return {Object} Action items summary statistics
 */
function getActionItemsSummary() {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.actionItems);
    if (!sheet) {
      return { totalItems: 0 };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const statusCol = headers.indexOf('status');
    const dueDateCol = headers.indexOf('dueDate');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const priorityCol = headers.indexOf('priority');
    
    // Skip if required columns don't exist
    if (statusCol === -1) {
      return { totalItems: 0 };
    }
    
    // Initialize counters
    let totalItems = 0;
    let completed = 0;
    let inProgress = 0;
    let notStarted = 0;
    let overdue = 0;
    let dueToday = 0;
    let highPriority = 0;
    
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Start of today
    
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1); // Start of tomorrow
    
    const uniqueTeamMembers = new Set();
    const actionItemsByStatus = {};
    const actionItemsByPriority = {};
    
    // Skip header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      totalItems++;
      
      // Track unique team members
      if (teamMemberCol !== -1 && row[teamMemberCol]) {
        uniqueTeamMembers.add(row[teamMemberCol]);
      }
      
      // Count by status
      const status = row[statusCol] ? row[statusCol].toLowerCase() : '';
      if (status === 'completed') {
        completed++;
      } else if (status === 'in progress') {
        inProgress++;
      } else if (status === 'not started') {
        notStarted++;
      }
      
      // Track counts by status
      if (!actionItemsByStatus[status]) {
        actionItemsByStatus[status] = 0;
      }
      actionItemsByStatus[status]++;
      
      // Check for overdue and due today
      if (status !== 'completed' && dueDateCol !== -1 && row[dueDateCol]) {
        const dueDate = new Date(row[dueDateCol]);
        
        if (dueDate < today) {
          overdue++;
        } else if (dueDate >= today && dueDate < tomorrow) {
          dueToday++;
        }
      }
      
      // Count by priority
      if (priorityCol !== -1 && row[priorityCol]) {
        const priority = row[priorityCol].toLowerCase();
        
        if (priority === 'high') {
          highPriority++;
        }
        
        // Track counts by priority
        if (!actionItemsByPriority[priority]) {
          actionItemsByPriority[priority] = 0;
        }
        actionItemsByPriority[priority]++;
      }
    }
    
    // Calculate completion rate
    const completionRate = totalItems > 0 ? Math.round((completed / totalItems) * 100) : 0;
    
    return {
      totalItems: totalItems,
      completed: completed,
      inProgress: inProgress,
      notStarted: notStarted,
      overdue: overdue,
      dueToday: dueToday,
      highPriority: highPriority,
      completionRate: completionRate,
      uniqueTeamMembers: uniqueTeamMembers.size
    };
  } catch (error) {
    console.error('Error in getActionItemsSummary:', error);
    return { totalItems: 0, error: error.message };
  }
}

/**
 * Create action items from one-on-one session
 * @param {Object} sessionData - One-on-one session data
 * @return {Object} Result with success flag and message
 */
function createActionItemsFromOneOnOne(sessionData) {
  try {
    if (!sessionData.id || !sessionData.teamMemberEmail) {
      throw new Error('Session ID and team member email are required');
    }
    
    // Parse action items list
    const actionItemsList = sessionData.actionItemsList;
    if (!actionItemsList) {
      return {
        success: true,
        message: 'No action items found to create',
        count: 0
      };
    }
    
    // Parse action items from the list (one per line)
    const actionItems = actionItemsList.split('\n')
      .filter(line => line.trim())
      .map(line => line.trim());
    
    if (actionItems.length === 0) {
      return {
        success: true,
        message: 'No action items found to create',
        count: 0
      };
    }
    
    let successCount = 0;
    let errorCount = 0;
    
    // Create action items
    for (const item of actionItems) {
      // Default due date is 7 days from now
      const dueDate = new Date();
      dueDate.setDate(dueDate.getDate() + 7);
      
      const actionItemData = {
        title: item,
        description: `Action item from one-on-one session on ${formatDate(sessionData.date)}`,
        teamMemberEmail: sessionData.teamMemberEmail,
        status: 'Not Started',
        priority: 'Medium',
        sourceType: 'One-on-One',
        sourceId: sessionData.id,
        dueDate: dueDate
      };
      
      const result = saveActionItem(actionItemData);
      
      if (result.success) {
        successCount++;
      } else {
        errorCount++;
        console.error('Failed to create action item:', result.message);
      }
    }
    
    return {
      success: errorCount === 0,
      message: `Created ${successCount} action items${errorCount > 0 ? `, failed to create ${errorCount} action items` : ''}`,
      count: successCount
    };
  } catch (error) {
    console.error('Error in createActionItemsFromOneOnOne:', error);
    return {
      success: false,
      message: `Failed to create action items: ${error.message}`,
      count: 0
    };
  }
}

/**
 * Create action items from QA review
 * @param {Object} reviewData - QA review data
 * @return {Object} Result with success flag and message
 */
function createActionItemsFromQAReview(reviewData) {
  try {
    if (!reviewData.id || !reviewData.teamMemberEmail) {
      throw new Error('Review ID and team member email are required');
    }
    
    // Parse action items from follow-up actions
    const followUpActions = reviewData.followUpActions;
    if (!followUpActions) {
      return {
        success: true,
        message: 'No action items found to create',
        count: 0
      };
    }
    
    // Parse action items from the list (one per line)
    const actionItems = followUpActions.split('\n')
      .filter(line => line.trim())
      .map(line => line.trim());
    
    if (actionItems.length === 0) {
      return {
        success: true,
        message: 'No action items found to create',
        count: 0
      };
    }
    
    let successCount = 0;
    let errorCount = 0;
    
    // Create action items
    for (const item of actionItems) {
      // Default due date is 14 days from now
      const dueDate = new Date();
      dueDate.setDate(dueDate.getDate() + 14);
      
      const actionItemData = {
        title: item,
        description: `Action item from QA review on ${formatDate(reviewData.reviewDate)}. Interaction ID: ${reviewData.interactionId}`,
        teamMemberEmail: reviewData.teamMemberEmail,
        status: 'Not Started',
        priority: reviewData.qualityStatus === 'Needs Improvement' ? 'High' : 'Medium',
        sourceType: 'QA Review',
        sourceId: reviewData.id,
        dueDate: dueDate
      };
      
      const result = saveActionItem(actionItemData);
      
      if (result.success) {
        successCount++;
      } else {
        errorCount++;
        console.error('Failed to create action item:', result.message);
      }
    }
    
    return {
      success: errorCount === 0,
      message: `Created ${successCount} action items${errorCount > 0 ? `, failed to create ${errorCount} action items` : ''}`,
      count: successCount
    };
  } catch (error) {
    console.error('Error in createActionItemsFromQAReview:', error);
    return {
      success: false,
      message: `Failed to create action items: ${error.message}`,
      count: 0
    };
  }
}


/**
 * MetricsService.gs
 * Handles metrics functionality for tracking team performance
 * Metrics include:
 * - Calls Offered
 * - Calls Accepted
 * - Answer Rate (Goal: 95% & Higher)
 * - Average Talk Time (Goal: between 15-20 min)
 * - ACW (After Call Work) Percentage (Goal: 5 min or less)
 * - On Queue Percentage (Goal: 65% and higher)
 * - Off Queue Percentage
 * - Interacting time (Goal 4-6 hrs; > or equal to 50%)
 */

/**
 * Get metrics by ID
 * @param {string} id - Metrics record ID
 * @return {Object} Metrics data
 */
function getMetricsById(id) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.metrics);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.metrics}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    if (idCol === -1) {
      throw new Error('ID column not found in Metrics sheet');
    }
    
    // Find the row with matching ID
    let metricsRow = null;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === id) {
        metricsRow = data[i];
        break;
      }
    }
    
    if (!metricsRow) {
      throw new Error(`Metrics with ID ${id} not found`);
    }
    
    // Convert row to object using headers as keys
    const metrics = {};
    headers.forEach((header, index) => {
      metrics[header] = metricsRow[index];
    });
    
    return metrics;
  } catch (error) {
    console.error('Error in getMetricsById:', error);
    throw new Error(`Failed to get metrics: ${error.message}`);
  }
}

/**
 * Save metrics
 * @param {Object} metricsData - Metrics data
 * @return {Object} Result with success flag, message, and metrics ID
 */
function saveMetrics(metricsData) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.metrics);
    if (!sheet) {
      // Create the sheet if it doesn't exist
      createSheetIfNotExists(CONFIG.sheetNames.metrics, [
        'id', 'teamMemberEmail', 'date', 'reportingPeriod', 'callsOffered', 'callsAccepted', 
        'answerRate', 'avgTalkTime', 'acwTime', 'onQueuePercentage', 'offQueuePercentage', 
        'interactingHours', 'interactingPercentage', 'qualityScore', 'notes', 'enteredBy', 'lastModified'
      ]);
    }
    
    // Generate ID if not provided
    if (!metricsData.id) {
      metricsData.id = generateUniqueId();
    }
    
    // Set last modified date
    metricsData.lastModified = new Date();
    
    // Set entered by if not provided
    if (!metricsData.enteredBy) {
      metricsData.enteredBy = Session.getActiveUser().getEmail();
    }
    
    // Calculate derived metrics
    if (metricsData.callsOffered !== undefined && metricsData.callsAccepted !== undefined) {
      const callsOffered = parseFloat(metricsData.callsOffered);
      const callsAccepted = parseFloat(metricsData.callsAccepted);
      
      if (!isNaN(callsOffered) && !isNaN(callsAccepted) && callsOffered > 0) {
        metricsData.answerRate = Math.round((callsAccepted / callsOffered) * 100);
      }
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    if (idCol === -1) {
      throw new Error('ID column not found in Metrics sheet');
    }
    
    // Create a row with values in the same order as headers
    const rowData = headers.map(header => {
      const value = metricsData[header] !== undefined ? metricsData[header] : '';
      
      // Format dates if the value is a date object and the header contains 'date' (case insensitive)
      if (value instanceof Date && header.toLowerCase().includes('date')) {
        return formatDate(value);
      }
      
      return value;
    });
    
    let rowIndex = -1;
    
    // Find existing metrics if ID exists
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === metricsData.id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    // Update or append row
    if (rowIndex !== -1) {
      sheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    } else {
      sheet.appendRow(rowData);
    }
    
    return { 
      success: true, 
      message: 'Metrics saved successfully',
      id: metricsData.id
    };
  } catch (error) {
    console.error('Error in saveMetrics:', error);
    return { 
      success: false, 
      message: `Failed to save metrics: ${error.message}`
    };
  }
}

/**
 * Save metrics for a team
 * @param {Array} teamMetricsArray - Array of metrics data for team members
 * @param {Date} date - Date for these metrics
 * @param {string} reportingPeriod - Reporting period (e.g., "Daily", "Weekly")
 * @return {Object} Result with success flag and message
 */
function saveTeamMetrics(teamMetricsArray, date, reportingPeriod = 'Daily') {
  try {
    if (!Array.isArray(teamMetricsArray)) {
      throw new Error('Team metrics must be an array');
    }
    
    if (!date) {
      date = new Date();
    }
    
    const results = {
      success: true,
      savedCount: 0,
      errorCount: 0,
      errors: []
    };
    
    // Process each team member's metrics
    for (const metrics of teamMetricsArray) {
      // Ensure required fields are set
      metrics.date = date;
      metrics.reportingPeriod = reportingPeriod;
      
      // Save the metrics
      const result = saveMetrics(metrics);
      
      if (result.success) {
        results.savedCount++;
      } else {
        results.errorCount++;
        results.errors.push({
          teamMemberEmail: metrics.teamMemberEmail,
          error: result.message
        });
      }
    }
    
    // Set overall success flag
    results.success = results.errorCount === 0;
    results.message = `Saved ${results.savedCount} team metrics records` + 
      (results.errorCount > 0 ? ` with ${results.errorCount} errors` : '');
    
    return results;
  } catch (error) {
    console.error('Error in saveTeamMetrics:', error);
    return { 
      success: false, 
      message: `Failed to save team metrics: ${error.message}`
    };
  }
}

/**
 * Get metrics with optional filtering
 * @param {Object} filters - Optional filters
 * @param {string} filters.teamMemberEmail - Filter by team member email
 * @param {Date} filters.date - Filter by specific date
 * @param {Date} filters.startDate - Filter by date range (start)
 * @param {Date} filters.endDate - Filter by date range (end)
 * @param {string} filters.reportingPeriod - Filter by reporting period
 * @param {number} limit - Maximum number of metrics to return
 * @param {string} sortBy - Column to sort by
 * @param {boolean} sortDesc - Sort in descending order
 * @return {Object} Result with metrics data
 */
function getMetrics(filters = {}, limit = 50, sortBy = 'date', sortDesc = true) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.metrics);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.metrics}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const dateCol = headers.indexOf('date');
    const reportingPeriodCol = headers.indexOf('reportingPeriod');
    
    // Verify required columns exist
    if (idCol === -1 || dateCol === -1) {
      throw new Error('Required columns not found in Metrics sheet');
    }
    
    // Filter metrics based on provided filters
    let metrics = data.slice(1)
      .filter(row => {
        // Skip empty rows
        if (row.every(cell => !cell)) return false;
        
        // Apply team member filter
        if (filters.teamMemberEmail && teamMemberCol !== -1 && 
            row[teamMemberCol] !== filters.teamMemberEmail) {
          return false;
        }
        
        // Apply specific date filter
        if (filters.date && dateCol !== -1 && row[dateCol]) {
          const metricDate = new Date(row[dateCol]);
          const filterDate = new Date(filters.date);
          
          // Compare only the date part (ignoring time)
          if (metricDate.getFullYear() !== filterDate.getFullYear() || 
              metricDate.getMonth() !== filterDate.getMonth() || 
              metricDate.getDate() !== filterDate.getDate()) {
            return false;
          }
        }
        
        // Apply date range filter
        if (dateCol !== -1 && row[dateCol]) {
          const metricDate = new Date(row[dateCol]);
          
          if (filters.startDate && metricDate < new Date(filters.startDate)) {
            return false;
          }
          
          if (filters.endDate && metricDate > new Date(filters.endDate)) {
            return false;
          }
        }
        
        // Apply reporting period filter
        if (filters.reportingPeriod && reportingPeriodCol !== -1 && 
            row[reportingPeriodCol] !== filters.reportingPeriod) {
          return false;
        }
        
        return true;
      })
      .map(row => {
        const metric = {};
        headers.forEach((header, index) => {
          metric[header] = row[index];
        });
        return metric;
      });
    
    // Sort metrics
    const sortColIndex = headers.indexOf(sortBy);
    if (sortColIndex !== -1) {
      metrics.sort((a, b) => {
        const valueA = a[sortBy];
        const valueB = b[sortBy];
        
        // Handle dates
        if (valueA instanceof Date && valueB instanceof Date) {
          return sortDesc ? valueB - valueA : valueA - valueB;
        }
        
        // Handle strings
        if (typeof valueA === 'string' && typeof valueB === 'string') {
          return sortDesc ? 
            valueB.localeCompare(valueA) : 
            valueA.localeCompare(valueB);
        }
        
        // Handle numbers
        return sortDesc ? valueB - valueA : valueA - valueB;
      });
    }
    
    // Apply limit
    if (limit > 0 && metrics.length > limit) {
      metrics = metrics.slice(0, limit);
    }
    
    // Get team member names for metrics
    for (const metric of metrics) {
      if (metric.teamMemberEmail) {
        try {
          const teamMember = getTeamMemberByEmail(metric.teamMemberEmail);
          if (teamMember && teamMember.Name) {
            metric.teamMemberName = teamMember.Name;
          }
        } catch (error) {
          console.warn(`Couldn't get team member name for ${metric.teamMemberEmail}:`, error);
        }
      }
    }
    
    return {
      success: true,
      data: metrics,
      total: metrics.length
    };
  } catch (error) {
    console.error('Error in getMetrics:', error);
    return {
      success: false,
      message: `Failed to get metrics: ${error.message}`
    };
  }
}

/**
 * Get team metrics summary for a date range
 * @param {Date} startDate - Start date
 * @param {Date} endDate - End date
 * @return {Object} Team metrics summary
 */
function getTeamMetricsSummary(startDate, endDate) {
  try {
    if (!startDate) {
      // Default to 7 days ago
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 7);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Get metrics for the specified date range
    const result = getMetrics({
      startDate: startDate,
      endDate: endDate
    }, 1000); // Get up to 1000 records
    
    if (!result.success) {
      throw new Error(result.message);
    }
    
    const metrics = result.data;
    
    // Initialize summary object
    const summary = {
      teamAverage: {
        answerRate: 0,
        avgTalkTime: 0,
        acwTime: 0,
        onQueuePercentage: 0,
        offQueuePercentage: 0,
        interactingPercentage: 0,
        qualityScore: 0,
        callsOffered: 0,
        callsAccepted: 0
      },
      byTeamMember: {},
      byDate: {}
    };
    
    // No metrics found
    if (metrics.length === 0) {
      return summary;
    }
    
    let totalMetrics = 0;
    
    // Track values for calculating team averages
    let teamTotalAnswerRate = 0;
    let teamCountAnswerRate = 0;
    
    let teamTotalAvgTalkTime = 0;
    let teamCountAvgTalkTime = 0;
    
    let teamTotalAcwTime = 0;
    let teamCountAcwTime = 0;
    
    let teamTotalOnQueue = 0;
    let teamCountOnQueue = 0;
    
    let teamTotalOffQueue = 0;
    let teamCountOffQueue = 0;
    
    let teamTotalInteracting = 0;
    let teamCountInteracting = 0;
    
    let teamTotalQualityScore = 0;
    let teamCountQualityScore = 0;
    
    let teamTotalCallsOffered = 0;
    let teamTotalCallsAccepted = 0;
    
    // Process each metric record
    for (const metric of metrics) {
      totalMetrics++;
      
      // Get date in string format for grouping
      const dateStr = formatDate(new Date(metric.date));
      
      // Ensure byTeamMember exists for this email
      if (!summary.byTeamMember[metric.teamMemberEmail]) {
        summary.byTeamMember[metric.teamMemberEmail] = {
          teamMemberEmail: metric.teamMemberEmail,
          teamMemberName: metric.teamMemberName || metric.teamMemberEmail,
          metrics: [],
          average: {
            answerRate: 0,
            avgTalkTime: 0,
            acwTime: 0,
            onQueuePercentage: 0,
            offQueuePercentage: 0,
            interactingPercentage: 0,
            qualityScore: 0,
            callsOffered: 0,
            callsAccepted: 0
          }
        };
      }
      
      // Ensure byDate exists for this date
      if (!summary.byDate[dateStr]) {
        summary.byDate[dateStr] = {
          date: dateStr,
          metrics: [],
          average: {
            answerRate: 0,
            avgTalkTime: 0,
            acwTime: 0,
            onQueuePercentage: 0,
            offQueuePercentage: 0,
            interactingPercentage: 0,
            qualityScore: 0,
            callsOffered: 0,
            callsAccepted: 0
          }
        };
      }
      
      // Add metric to arrays
      summary.byTeamMember[metric.teamMemberEmail].metrics.push(metric);
      summary.byDate[dateStr].metrics.push(metric);
      
      // Process numeric metrics
      const answerRate = parseFloat(metric.answerRate);
      if (!isNaN(answerRate)) {
        teamTotalAnswerRate += answerRate;
        teamCountAnswerRate++;
      }
      
      const avgTalkTime = parseFloat(metric.avgTalkTime);
      if (!isNaN(avgTalkTime)) {
        teamTotalAvgTalkTime += avgTalkTime;
        teamCountAvgTalkTime++;
      }
      
      const acwTime = parseFloat(metric.acwTime);
      if (!isNaN(acwTime)) {
        teamTotalAcwTime += acwTime;
        teamCountAcwTime++;
      }
      
      const onQueuePercentage = parseFloat(metric.onQueuePercentage);
      if (!isNaN(onQueuePercentage)) {
        teamTotalOnQueue += onQueuePercentage;
        teamCountOnQueue++;
      }
      
      const offQueuePercentage = parseFloat(metric.offQueuePercentage);
      if (!isNaN(offQueuePercentage)) {
        teamTotalOffQueue += offQueuePercentage;
        teamCountOffQueue++;
      }
      
      const interactingPercentage = parseFloat(metric.interactingPercentage);
      if (!isNaN(interactingPercentage)) {
        teamTotalInteracting += interactingPercentage;
        teamCountInteracting++;
      }
      
      const qualityScore = parseFloat(metric.qualityScore);
      if (!isNaN(qualityScore)) {
        teamTotalQualityScore += qualityScore;
        teamCountQualityScore++;
      }
      
      const callsOffered = parseInt(metric.callsOffered);
      if (!isNaN(callsOffered)) {
        teamTotalCallsOffered += callsOffered;
      }
      
      const callsAccepted = parseInt(metric.callsAccepted);
      if (!isNaN(callsAccepted)) {
        teamTotalCallsAccepted += callsAccepted;
      }
    }
    
    // Calculate team averages
    summary.teamAverage.answerRate = teamCountAnswerRate > 0 ? Math.round((teamTotalAnswerRate / teamCountAnswerRate) * 100) / 100 : 0;
    summary.teamAverage.avgTalkTime = teamCountAvgTalkTime > 0 ? Math.round((teamTotalAvgTalkTime / teamCountAvgTalkTime) * 100) / 100 : 0;
    summary.teamAverage.acwTime = teamCountAcwTime > 0 ? Math.round((teamTotalAcwTime / teamCountAcwTime) * 100) / 100 : 0;
    summary.teamAverage.onQueuePercentage = teamCountOnQueue > 0 ? Math.round((teamTotalOnQueue / teamCountOnQueue) * 100) / 100 : 0;
    summary.teamAverage.offQueuePercentage = teamCountOffQueue > 0 ? Math.round((teamTotalOffQueue / teamCountOffQueue) * 100) / 100 : 0;
    summary.teamAverage.interactingPercentage = teamCountInteracting > 0 ? Math.round((teamTotalInteracting / teamCountInteracting) * 100) / 100 : 0;
    summary.teamAverage.qualityScore = teamCountQualityScore > 0 ? Math.round((teamTotalQualityScore / teamCountQualityScore) * 100) / 100 : 0;
    summary.teamAverage.callsOffered = teamTotalCallsOffered;
    summary.teamAverage.callsAccepted = teamTotalCallsAccepted;
    
    // Calculate average metrics for each team member
    Object.keys(summary.byTeamMember).forEach(email => {
      const teamMember = summary.byTeamMember[email];
      const metrics = teamMember.metrics;
      
      // Initialize tracking variables
      let totalAnswerRate = 0;
      let countAnswerRate = 0;
      let totalAvgTalkTime = 0;
      let countAvgTalkTime = 0;
      let totalAcwTime = 0;
      let countAcwTime = 0;
      let totalOnQueue = 0;
      let countOnQueue = 0;
      let totalOffQueue = 0;
      let countOffQueue = 0;
      let totalInteracting = 0;
      let countInteracting = 0;
      let totalQualityScore = 0;
      let countQualityScore = 0;
      let callsOffered = 0;
      let callsAccepted = 0;
      
      // Sum up metrics
      metrics.forEach(metric => {
        const answerRate = parseFloat(metric.answerRate);
        if (!isNaN(answerRate)) {
          totalAnswerRate += answerRate;
          countAnswerRate++;
        }
        
        const avgTalkTime = parseFloat(metric.avgTalkTime);
        if (!isNaN(avgTalkTime)) {
          totalAvgTalkTime += avgTalkTime;
          countAvgTalkTime++;
        }
        
        const acwTime = parseFloat(metric.acwTime);
        if (!isNaN(acwTime)) {
          totalAcwTime += acwTime;
          countAcwTime++;
        }
        
        const onQueuePercentage = parseFloat(metric.onQueuePercentage);
        if (!isNaN(onQueuePercentage)) {
          totalOnQueue += onQueuePercentage;
          countOnQueue++;
        }
        
        const offQueuePercentage = parseFloat(metric.offQueuePercentage);
        if (!isNaN(offQueuePercentage)) {
          totalOffQueue += offQueuePercentage;
          countOffQueue++;
        }
        
        const interactingPercentage = parseFloat(metric.interactingPercentage);
        if (!isNaN(interactingPercentage)) {
          totalInteracting += interactingPercentage;
          countInteracting++;
        }
        
        const qualityScore = parseFloat(metric.qualityScore);
        if (!isNaN(qualityScore)) {
          totalQualityScore += qualityScore;
          countQualityScore++;
        }
        
        const metricCallsOffered = parseInt(metric.callsOffered);
        if (!isNaN(metricCallsOffered)) {
          callsOffered += metricCallsOffered;
        }
        
        const metricCallsAccepted = parseInt(metric.callsAccepted);
        if (!isNaN(metricCallsAccepted)) {
          callsAccepted += metricCallsAccepted;
        }
      });
      
      // Calculate averages
      teamMember.average.answerRate = countAnswerRate > 0 ? Math.round((totalAnswerRate / countAnswerRate) * 100) / 100 : 0;
      teamMember.average.avgTalkTime = countAvgTalkTime > 0 ? Math.round((totalAvgTalkTime / countAvgTalkTime) * 100) / 100 : 0;
      teamMember.average.acwTime = countAcwTime > 0 ? Math.round((totalAcwTime / countAcwTime) * 100) / 100 : 0;
      teamMember.average.onQueuePercentage = countOnQueue > 0 ? Math.round((totalOnQueue / countOnQueue) * 100) / 100 : 0;
      teamMember.average.offQueuePercentage = countOffQueue > 0 ? Math.round((totalOffQueue / countOffQueue) * 100) / 100 : 0;
      teamMember.average.interactingPercentage = countInteracting > 0 ? Math.round((totalInteracting / countInteracting) * 100) / 100 : 0;
      teamMember.average.qualityScore = countQualityScore > 0 ? Math.round((totalQualityScore / countQualityScore) * 100) / 100 : 0;
      teamMember.average.callsOffered = callsOffered;
      teamMember.average.callsAccepted = callsAccepted;
    });
    
    // Calculate average metrics for each date
    Object.keys(summary.byDate).forEach(dateStr => {
      const dateAverage = summary.byDate[dateStr].average;
      const metrics = summary.byDate[dateStr].metrics;
      
      // Initialize tracking variables
      let totalAnswerRate = 0;
      let countAnswerRate = 0;
      let totalAvgTalkTime = 0;
      let countAvgTalkTime = 0;
      let totalAcwTime = 0;
      let countAcwTime = 0;
      let totalOnQueue = 0;
      let countOnQueue = 0;
      let totalOffQueue = 0;
      let countOffQueue = 0;
      let totalInteracting = 0;
      let countInteracting = 0;
      let totalQualityScore = 0;
      let countQualityScore = 0;
      let dateCallsOffered = 0;
      let dateCallsAccepted = 0;
      
      // Sum up metrics
      metrics.forEach(metric => {
        const answerRate = parseFloat(metric.answerRate);
        if (!isNaN(answerRate)) {
          totalAnswerRate += answerRate;
          countAnswerRate++;
        }
        
        const avgTalkTime = parseFloat(metric.avgTalkTime);
        if (!isNaN(avgTalkTime)) {
          totalAvgTalkTime += avgTalkTime;
          countAvgTalkTime++;
        }
        
        const acwTime = parseFloat(metric.acwTime);
        if (!isNaN(acwTime)) {
          totalAcwTime += acwTime;
          countAcwTime++;
        }
        
        const onQueuePercentage = parseFloat(metric.onQueuePercentage);
        if (!isNaN(onQueuePercentage)) {
          totalOnQueue += onQueuePercentage;
          countOnQueue++;
        }
        
        const offQueuePercentage = parseFloat(metric.offQueuePercentage);
        if (!isNaN(offQueuePercentage)) {
          totalOffQueue += offQueuePercentage;
          countOffQueue++;
        }
        
        const interactingPercentage = parseFloat(metric.interactingPercentage);
        if (!isNaN(interactingPercentage)) {
          totalInteracting += interactingPercentage;
          countInteracting++;
        }
        
        const qualityScore = parseFloat(metric.qualityScore);
        if (!isNaN(qualityScore)) {
          totalQualityScore += qualityScore;
          countQualityScore++;
        }
        
        const metricCallsOffered = parseInt(metric.callsOffered);
        if (!isNaN(metricCallsOffered)) {
          dateCallsOffered += metricCallsOffered;
        }
        
        const metricCallsAccepted = parseInt(metric.callsAccepted);
        if (!isNaN(metricCallsAccepted)) {
          dateCallsAccepted += metricCallsAccepted;
        }
      });
      
      // Calculate date averages
      dateAverage.answerRate = countAnswerRate > 0 ? Math.round((totalAnswerRate / countAnswerRate) * 100) / 100 : 0;
      dateAverage.avgTalkTime = countAvgTalkTime > 0 ? Math.round((totalAvgTalkTime / countAvgTalkTime) * 100) / 100 : 0;
      dateAverage.acwTime = countAcwTime > 0 ? Math.round((totalAcwTime / countAcwTime) * 100) / 100 : 0;
      dateAverage.onQueuePercentage = countOnQueue > 0 ? Math.round((totalOnQueue / countOnQueue) * 100) / 100 : 0;
      dateAverage.offQueuePercentage = countOffQueue > 0 ? Math.round((totalOffQueue / countOffQueue) * 100) / 100 : 0;
      dateAverage.interactingPercentage = countInteracting > 0 ? Math.round((totalInteracting / countInteracting) * 100) / 100 : 0;
      dateAverage.qualityScore = countQualityScore > 0 ? Math.round((totalQualityScore / countQualityScore) * 100) / 100 : 0;
      dateAverage.callsOffered = dateCallsOffered;
      dateAverage.callsAccepted = dateCallsAccepted;
    });
    
    // Add members who are below target metrics
    summary.membersBelowTarget = [];
    
    Object.keys(summary.byTeamMember).forEach(email => {
      const teamMember = summary.byTeamMember[email];
      const memberAverage = teamMember.average;
      const flaggedMetrics = [];
      
      // Check answer rate
      if (memberAverage.answerRate < CONFIG.metricsGoals.answerRate) {
        flaggedMetrics.push({
          metric: 'answerRate',
          value: memberAverage.answerRate,
          target: CONFIG.metricsGoals.answerRate,
          gap: CONFIG.metricsGoals.answerRate - memberAverage.answerRate
        });
      }
      
      // Check average talk time (too low or too high)
      if (memberAverage.avgTalkTime < CONFIG.metricsGoals.avgTalkTime.min) {
        flaggedMetrics.push({
          metric: 'avgTalkTime',
          value: memberAverage.avgTalkTime,
          target: `${CONFIG.metricsGoals.avgTalkTime.min}-${CONFIG.metricsGoals.avgTalkTime.max}`,
          gap: CONFIG.metricsGoals.avgTalkTime.min - memberAverage.avgTalkTime
        });
      } else if (memberAverage.avgTalkTime > CONFIG.metricsGoals.avgTalkTime.max) {
        flaggedMetrics.push({
          metric: 'avgTalkTime',
          value: memberAverage.avgTalkTime,
          target: `${CONFIG.metricsGoals.avgTalkTime.min}-${CONFIG.metricsGoals.avgTalkTime.max}`,
          gap: memberAverage.avgTalkTime - CONFIG.metricsGoals.avgTalkTime.max
        });
      }
      
      // Check ACW time
      if (memberAverage.acwTime > CONFIG.metricsGoals.acwTime) {
        flaggedMetrics.push({
          metric: 'acwTime',
          value: memberAverage.acwTime,
          target: CONFIG.metricsGoals.acwTime,
          gap: memberAverage.acwTime - CONFIG.metricsGoals.acwTime
        });
      }
      
      // Check on queue percentage
      if (memberAverage.onQueuePercentage < CONFIG.metricsGoals.onQueuePercentage) {
        flaggedMetrics.push({
          metric: 'onQueuePercentage',
          value: memberAverage.onQueuePercentage,
          target: CONFIG.metricsGoals.onQueuePercentage,
          gap: CONFIG.metricsGoals.onQueuePercentage - memberAverage.onQueuePercentage
        });
      }
      
      // Check interacting percentage
      if (memberAverage.interactingPercentage < CONFIG.metricsGoals.interactingPercentage) {
        flaggedMetrics.push({
          metric: 'interactingPercentage',
          value: memberAverage.interactingPercentage,
          target: CONFIG.metricsGoals.interactingPercentage,
          gap: CONFIG.metricsGoals.interactingPercentage - memberAverage.interactingPercentage
        });
      }
      
      // Add to summary if any metrics are flagged
      if (flaggedMetrics.length > 0) {
        summary.membersBelowTarget.push({
          teamMemberEmail: email,
          teamMemberName: teamMember.teamMemberName,
          flaggedMetrics: flaggedMetrics
        });
      }
    });
    
    // Sort members below target by most flagged metrics first
    summary.membersBelowTarget.sort((a, b) => b.flaggedMetrics.length - a.flaggedMetrics.length);
    
    return summary;
  } catch (error) {
    console.error('Error in getTeamMetricsSummary:', error);
    return {
      teamAverage: {
        answerRate: 0,
        avgTalkTime: 0,
        acwTime: 0,
        onQueuePercentage: 0,
        offQueuePercentage: 0,
        interactingPercentage: 0
      },
      error: error.message
    };
  }
}

/**
 * Get metrics analytics data
 * @param {Object} filters - Optional filters for date ranges and team members
 * @return {Object} Analytics data
 */
function getMetricsAnalytics(filters = {}) {
  try {
    // Define date range
    let startDate = null;
    let endDate = new Date();
    
    if (filters.startDate) {
      startDate = new Date(filters.startDate);
    } else {
      // Default to 90 days ago
      startDate = new Date(endDate);
      startDate.setDate(startDate.getDate() - 90);
    }
    
    if (filters.endDate) {
      endDate = new Date(filters.endDate);
    }
    
    // Get metrics for the date range
    const result = getMetrics({
      teamMemberEmail: filters.teamMemberEmail,
      startDate: startDate,
      endDate: endDate
    }, 1000); // Get up to 1000 records
    
    if (!result.success) {
      throw new Error(result.message);
    }
    
    const metrics = result.data;
    
    // Initialize analytics object
    const analytics = {
      trends: {
        byDate: {},
        byTeamMember: {}
      },
      summary: {
        overall: {
          answerRate: 0,
          avgTalkTime: 0,
          acwTime: 0,
          onQueuePercentage: 0,
          offQueuePercentage: 0,
          interactingPercentage: 0,
          callsOffered: 0,
          callsAccepted: 0
        },
        byTeamMember: {}
      },
      comparisons: {
        targetMetrics: [],
        teamMemberPerformance: []
      }
    };
    
    // No metrics found
    if (metrics.length === 0) {
      return {
        success: true,
        data: analytics
      };
    }
    
    // Track values for calculating overall averages
    let totalAnswerRate = 0;
    let countAnswerRate = 0;
    let totalAvgTalkTime = 0;
    let countAvgTalkTime = 0;
    let totalAcwTime = 0;
    let countAcwTime = 0;
    let totalOnQueue = 0;
    let countOnQueue = 0;
    let totalOffQueue = 0;
    let countOffQueue = 0;
    let totalInteracting = 0;
    let countInteracting = 0;
    let totalCallsOffered = 0;
    let totalCallsAccepted = 0;
    
    // Process each metric record
    for (const metric of metrics) {
      // Get date in string format for grouping (YYYY-MM-DD)
      const dateStr = formatDate(new Date(metric.date));
      const yearWeek = getYearWeekString(new Date(metric.date));
      const yearMonth = dateStr.substring(0, 7); // YYYY-MM
      
      // Ensure trends.byDate exists for different time periods
      if (!analytics.trends.byDate[dateStr]) {
        analytics.trends.byDate[dateStr] = {
          date: dateStr,
          answerRate: 0,
          avgTalkTime: 0,
          acwTime: 0,
          onQueuePercentage: 0,
          offQueuePercentage: 0,
          interactingPercentage: 0,
          callsOffered: 0,
          callsAccepted: 0,
          count: 0
        };
      }
      
      if (!analytics.trends.byDate[yearWeek]) {
        analytics.trends.byDate[yearWeek] = {
          date: yearWeek,
          answerRate: 0,
          avgTalkTime: 0,
          acwTime: 0,
          onQueuePercentage: 0,
          offQueuePercentage: 0,
          interactingPercentage: 0,
          callsOffered: 0,
          callsAccepted: 0,
          count: 0
        };
      }
      
      if (!analytics.trends.byDate[yearMonth]) {
        analytics.trends.byDate[yearMonth] = {
          date: yearMonth,
          answerRate: 0,
          avgTalkTime: 0,
          acwTime: 0,
          onQueuePercentage: 0,
          offQueuePercentage: 0,
          interactingPercentage: 0,
          callsOffered: 0,
          callsAccepted: 0,
          count: 0
        };
      }
      
      // Ensure trends.byTeamMember exists for this email
      if (!analytics.trends.byTeamMember[metric.teamMemberEmail]) {
        analytics.trends.byTeamMember[metric.teamMemberEmail] = {
          teamMemberEmail: metric.teamMemberEmail,
          teamMemberName: metric.teamMemberName || metric.teamMemberEmail,
          data: {},
          count: 0
        };
      }
      
      // Ensure summary.byTeamMember exists for this email
      if (!analytics.summary.byTeamMember[metric.teamMemberEmail]) {
        analytics.summary.byTeamMember[metric.teamMemberEmail] = {
          teamMemberEmail: metric.teamMemberEmail,
          teamMemberName: metric.teamMemberName || metric.teamMemberEmail,
          answerRate: 0,
          avgTalkTime: 0,
          acwTime: 0,
          onQueuePercentage: 0,
          offQueuePercentage: 0,
          interactingPercentage: 0,
          callsOffered: 0,
          callsAccepted: 0,
          count: 0
        };
      }
      
      // Ensure team member date data exists
      if (!analytics.trends.byTeamMember[metric.teamMemberEmail].data[dateStr]) {
        analytics.trends.byTeamMember[metric.teamMemberEmail].data[dateStr] = {
          date: dateStr,
          answerRate: 0,
          avgTalkTime: 0,
          acwTime: 0,
          onQueuePercentage: 0,
          offQueuePercentage: 0,
          interactingPercentage: 0,
          callsOffered: 0,
          callsAccepted: 0
        };
      }
      
      // Process numeric metrics
      const answerRate = parseFloat(metric.answerRate);
      if (!isNaN(answerRate)) {
        // Add to overall total
        totalAnswerRate += answerRate;
        countAnswerRate++;
        
        // Add to date totals
        analytics.trends.byDate[dateStr].answerRate += answerRate;
        analytics.trends.byDate[yearWeek].answerRate += answerRate;
        analytics.trends.byDate[yearMonth].answerRate += answerRate;
        
        // Add to team member totals
        analytics.summary.byTeamMember[metric.teamMemberEmail].answerRate += answerRate;
        analytics.trends.byTeamMember[metric.teamMemberEmail].data[dateStr].answerRate = answerRate;
      }
      
      const avgTalkTime = parseFloat(metric.avgTalkTime);
      if (!isNaN(avgTalkTime)) {
        totalAvgTalkTime += avgTalkTime;
        countAvgTalkTime++;
        
        analytics.trends.byDate[dateStr].avgTalkTime += avgTalkTime;
        analytics.trends.byDate[yearWeek].avgTalkTime += avgTalkTime;
        analytics.trends.byDate[yearMonth].avgTalkTime += avgTalkTime;
        
        analytics.summary.byTeamMember[metric.teamMemberEmail].avgTalkTime += avgTalkTime;
        analytics.trends.byTeamMember[metric.teamMemberEmail].data[dateStr].avgTalkTime = avgTalkTime;
      }
      
      const acwTime = parseFloat(metric.acwTime);
      if (!isNaN(acwTime)) {
        totalAcwTime += acwTime;
        countAcwTime++;
        
        analytics.trends.byDate[dateStr].acwTime += acwTime;
        analytics.trends.byDate[yearWeek].acwTime += acwTime;
        analytics.trends.byDate[yearMonth].acwTime += acwTime;
        
        analytics.summary.byTeamMember[metric.teamMemberEmail].acwTime += acwTime;
        analytics.trends.byTeamMember[metric.teamMemberEmail].data[dateStr].acwTime = acwTime;
      }
      
      const onQueuePercentage = parseFloat(metric.onQueuePercentage);
      if (!isNaN(onQueuePercentage)) {
        totalOnQueue += onQueuePercentage;
        countOnQueue++;
        
        analytics.trends.byDate[dateStr].onQueuePercentage += onQueuePercentage;
        analytics.trends.byDate[yearWeek].onQueuePercentage += onQueuePercentage;
        analytics.trends.byDate[yearMonth].onQueuePercentage += onQueuePercentage;
        
        analytics.summary.byTeamMember[metric.teamMemberEmail].onQueuePercentage += onQueuePercentage;
        analytics.trends.byTeamMember[metric.teamMemberEmail].data[dateStr].onQueuePercentage = onQueuePercentage;
      }
      
      const offQueuePercentage = parseFloat(metric.offQueuePercentage);
      if (!isNaN(offQueuePercentage)) {
        totalOffQueue += offQueuePercentage;
        countOffQueue++;
        
        analytics.trends.byDate[dateStr].offQueuePercentage += offQueuePercentage;
        analytics.trends.byDate[yearWeek].offQueuePercentage += offQueuePercentage;
        analytics.trends.byDate[yearMonth].offQueuePercentage += offQueuePercentage;
        
        analytics.summary.byTeamMember[metric.teamMemberEmail].offQueuePercentage += offQueuePercentage;
        analytics.trends.byTeamMember[metric.teamMemberEmail].data[dateStr].offQueuePercentage = offQueuePercentage;
      }
      
      const interactingPercentage = parseFloat(metric.interactingPercentage);
      if (!isNaN(interactingPercentage)) {
        totalInteracting += interactingPercentage;
        countInteracting++;
        
        analytics.trends.byDate[dateStr].interactingPercentage += interactingPercentage;
        analytics.trends.byDate[yearWeek].interactingPercentage += interactingPercentage;
        analytics.trends.byDate[yearMonth].interactingPercentage += interactingPercentage;
        
        analytics.summary.byTeamMember[metric.teamMemberEmail].interactingPercentage += interactingPercentage;
        analytics.trends.byTeamMember[metric.teamMemberEmail].data[dateStr].interactingPercentage = interactingPercentage;
      }
      
      const callsOffered = parseInt(metric.callsOffered);
      if (!isNaN(callsOffered)) {
        totalCallsOffered += callsOffered;
        
        analytics.trends.byDate[dateStr].callsOffered += callsOffered;
        analytics.trends.byDate[yearWeek].callsOffered += callsOffered;
        analytics.trends.byDate[yearMonth].callsOffered += callsOffered;
        
        analytics.summary.byTeamMember[metric.teamMemberEmail].callsOffered += callsOffered;
        analytics.trends.byTeamMember[metric.teamMemberEmail].data[dateStr].callsOffered = callsOffered;
      }
      
      const callsAccepted = parseInt(metric.callsAccepted);
      if (!isNaN(callsAccepted)) {
        totalCallsAccepted += callsAccepted;
        
        analytics.trends.byDate[dateStr].callsAccepted += callsAccepted;
        analytics.trends.byDate[yearWeek].callsAccepted += callsAccepted;
        analytics.trends.byDate[yearMonth].callsAccepted += callsAccepted;
        
        analytics.summary.byTeamMember[metric.teamMemberEmail].callsAccepted += callsAccepted;
        analytics.trends.byTeamMember[metric.teamMemberEmail].data[dateStr].callsAccepted = callsAccepted;
      }
      
      // Increment count for averaging
      analytics.trends.byDate[dateStr].count++;
      analytics.trends.byDate[yearWeek].count++;
      analytics.trends.byDate[yearMonth].count++;
      analytics.summary.byTeamMember[metric.teamMemberEmail].count++;
      analytics.trends.byTeamMember[metric.teamMemberEmail].count++;
    }
    
    // Calculate overall averages
    analytics.summary.overall.answerRate = countAnswerRate > 0 ? Math.round((totalAnswerRate / countAnswerRate) * 100) / 100 : 0;
    analytics.summary.overall.avgTalkTime = countAvgTalkTime > 0 ? Math.round((totalAvgTalkTime / countAvgTalkTime) * 100) / 100 : 0;
    analytics.summary.overall.acwTime = countAcwTime > 0 ? Math.round((totalAcwTime / countAcwTime) * 100) / 100 : 0;
    analytics.summary.overall.onQueuePercentage = countOnQueue > 0 ? Math.round((totalOnQueue / countOnQueue) * 100) / 100 : 0;
    analytics.summary.overall.offQueuePercentage = countOffQueue > 0 ? Math.round((totalOffQueue / countOffQueue) * 100) / 100 : 0;
    analytics.summary.overall.interactingPercentage = countInteracting > 0 ? Math.round((totalInteracting / countInteracting) * 100) / 100 : 0;
    analytics.summary.overall.callsOffered = totalCallsOffered;
    analytics.summary.overall.callsAccepted = totalCallsAccepted;
    
    // Calculate averages for each date period
    Object.keys(analytics.trends.byDate).forEach(dateKey => {
      const dateTrend = analytics.trends.byDate[dateKey];
      const count = dateTrend.count;
      
      if (count > 0) {
        dateTrend.answerRate = Math.round((dateTrend.answerRate / count) * 100) / 100;
        dateTrend.avgTalkTime = Math.round((dateTrend.avgTalkTime / count) * 100) / 100;
        dateTrend.acwTime = Math.round((dateTrend.acwTime / count) * 100) / 100;
        dateTrend.onQueuePercentage = Math.round((dateTrend.onQueuePercentage / count) * 100) / 100;
        dateTrend.offQueuePercentage = Math.round((dateTrend.offQueuePercentage / count) * 100) / 100;
        dateTrend.interactingPercentage = Math.round((dateTrend.interactingPercentage / count) * 100) / 100;
      }
    });
    
    // Calculate averages for each team member
    Object.keys(analytics.summary.byTeamMember).forEach(email => {
      const memberSummary = analytics.summary.byTeamMember[email];
      const count = memberSummary.count;
      
      if (count > 0) {
        memberSummary.answerRate = Math.round((memberSummary.answerRate / count) * 100) / 100;
        memberSummary.avgTalkTime = Math.round((memberSummary.avgTalkTime / count) * 100) / 100;
        memberSummary.acwTime = Math.round((memberSummary.acwTime / count) * 100) / 100;
        memberSummary.onQueuePercentage = Math.round((memberSummary.onQueuePercentage / count) * 100) / 100;
        memberSummary.offQueuePercentage = Math.round((memberSummary.offQueuePercentage / count) * 100) / 100;
        memberSummary.interactingPercentage = Math.round((memberSummary.interactingPercentage / count) * 100) / 100;
      }
    });
    
    // Create arrays for trend visualization (sort by date)
    analytics.trendsByDay = Object.keys(analytics.trends.byDate)
      .filter(key => key.match(/^\d{4}-\d{2}-\d{2}$/)) // Only include daily data (YYYY-MM-DD)
      .sort()
      .map(key => ({
        date: key,
        ...analytics.trends.byDate[key]
      }));
    
    analytics.trendsByWeek = Object.keys(analytics.trends.byDate)
      .filter(key => key.match(/^\d{4}-W\d{2}$/)) // Only include weekly data (YYYY-Wnn)
      .sort()
      .map(key => ({
        date: key,
        ...analytics.trends.byDate[key]
      }));
    
    analytics.trendsByMonth = Object.keys(analytics.trends.byDate)
      .filter(key => key.match(/^\d{4}-\d{2}$/)) // Only include monthly data (YYYY-MM)
      .sort()
      .map(key => ({
        date: key,
        ...analytics.trends.byDate[key]
      }));
    
    // Create an array of team members for comparison
    analytics.teamMembers = Object.keys(analytics.summary.byTeamMember)
      .map(email => analytics.summary.byTeamMember[email])
      .sort((a, b) => a.teamMemberName.localeCompare(b.teamMemberName));
    
    // Compare to target metrics
    analytics.comparisons.targetMetrics = [
      {
        metric: 'answerRate',
        name: 'Answer Rate',
        unit: '%',
        target: CONFIG.metricsGoals.answerRate,
        current: analytics.summary.overall.answerRate,
        status: analytics.summary.overall.answerRate >= CONFIG.metricsGoals.answerRate ? 'meeting' : 'below',
        gap: analytics.summary.overall.answerRate < CONFIG.metricsGoals.answerRate ? 
          Math.round((CONFIG.metricsGoals.answerRate - analytics.summary.overall.answerRate) * 100) / 100 : 0
      },
      {
        metric: 'avgTalkTime',
        name: 'Average Talk Time',
        unit: 'min',
        target: `${CONFIG.metricsGoals.avgTalkTime.min}-${CONFIG.metricsGoals.avgTalkTime.max}`,
        current: analytics.summary.overall.avgTalkTime,
        status: analytics.summary.overall.avgTalkTime >= CONFIG.metricsGoals.avgTalkTime.min && 
                analytics.summary.overall.avgTalkTime <= CONFIG.metricsGoals.avgTalkTime.max ? 'meeting' : 'outside',
        gap: analytics.summary.overall.avgTalkTime < CONFIG.metricsGoals.avgTalkTime.min ?
          Math.round((CONFIG.metricsGoals.avgTalkTime.min - analytics.summary.overall.avgTalkTime) * 100) / 100 :
          analytics.summary.overall.avgTalkTime > CONFIG.metricsGoals.avgTalkTime.max ?
          Math.round((analytics.summary.overall.avgTalkTime - CONFIG.metricsGoals.avgTalkTime.max) * 100) / 100 : 0
      },
      {
        metric: 'acwTime',
        name: 'ACW Time',
        unit: 'min',
        target: CONFIG.metricsGoals.acwTime,
        current: analytics.summary.overall.acwTime,
        status: analytics.summary.overall.acwTime <= CONFIG.metricsGoals.acwTime ? 'meeting' : 'above',
        gap: analytics.summary.overall.acwTime > CONFIG.metricsGoals.acwTime ? 
          Math.round((analytics.summary.overall.acwTime - CONFIG.metricsGoals.acwTime) * 100) / 100 : 0
      },
      {
        metric: 'onQueuePercentage',
        name: 'On Queue Percentage',
        unit: '%',
        target: CONFIG.metricsGoals.onQueuePercentage,
        current: analytics.summary.overall.onQueuePercentage,
        status: analytics.summary.overall.onQueuePercentage >= CONFIG.metricsGoals.onQueuePercentage ? 'meeting' : 'below',
        gap: analytics.summary.overall.onQueuePercentage < CONFIG.metricsGoals.onQueuePercentage ? 
          Math.round((CONFIG.metricsGoals.onQueuePercentage - analytics.summary.overall.onQueuePercentage) * 100) / 100 : 0
      },
      {
        metric: 'interactingPercentage',
        name: 'Interacting Percentage',
        unit: '%',
        target: CONFIG.metricsGoals.interactingPercentage,
        current: analytics.summary.overall.interactingPercentage,
        status: analytics.summary.overall.interactingPercentage >= CONFIG.metricsGoals.interactingPercentage ? 'meeting' : 'below',
        gap: analytics.summary.overall.interactingPercentage < CONFIG.metricsGoals.interactingPercentage ? 
          Math.round((CONFIG.metricsGoals.interactingPercentage - analytics.summary.overall.interactingPercentage) * 100) / 100 : 0
      }
    ];
    
    // Create team member performance comparisons
    analytics.teamMembers.forEach(member => {
      const memberCompare = {
        teamMemberEmail: member.teamMemberEmail,
        teamMemberName: member.teamMemberName,
        metrics: []
      };
      
      // Answer rate
      memberCompare.metrics.push({
        metric: 'answerRate',
        name: 'Answer Rate',
        unit: '%',
        target: CONFIG.metricsGoals.answerRate,
        current: member.answerRate,
        status: member.answerRate >= CONFIG.metricsGoals.answerRate ? 'meeting' : 'below',
        gap: member.answerRate < CONFIG.metricsGoals.answerRate ? 
          Math.round((CONFIG.metricsGoals.answerRate - member.answerRate) * 100) / 100 : 0,
        teamAverage: analytics.summary.overall.answerRate,
        vsTeam: Math.round((member.answerRate - analytics.summary.overall.answerRate) * 100) / 100
      });
      
      // Average talk time
      memberCompare.metrics.push({
        metric: 'avgTalkTime',
        name: 'Average Talk Time',
        unit: 'min',
        target: `${CONFIG.metricsGoals.avgTalkTime.min}-${CONFIG.metricsGoals.avgTalkTime.max}`,
        current: member.avgTalkTime,
        status: member.avgTalkTime >= CONFIG.metricsGoals.avgTalkTime.min && 
                member.avgTalkTime <= CONFIG.metricsGoals.avgTalkTime.max ? 'meeting' : 'outside',
        gap: member.avgTalkTime < CONFIG.metricsGoals.avgTalkTime.min ?
          Math.round((CONFIG.metricsGoals.avgTalkTime.min - member.avgTalkTime) * 100) / 100 :
          member.avgTalkTime > CONFIG.metricsGoals.avgTalkTime.max ?
          Math.round((member.avgTalkTime - CONFIG.metricsGoals.avgTalkTime.max) * 100) / 100 : 0,
        teamAverage: analytics.summary.overall.avgTalkTime,
        vsTeam: Math.round((member.avgTalkTime - analytics.summary.overall.avgTalkTime) * 100) / 100
      });
      
      // ACW time
      memberCompare.metrics.push({
        metric: 'acwTime',
        name: 'ACW Time',
        unit: 'min',
        target: CONFIG.metricsGoals.acwTime,
        current: member.acwTime,
        status: member.acwTime <= CONFIG.metricsGoals.acwTime ? 'meeting' : 'above',
        gap: member.acwTime > CONFIG.metricsGoals.acwTime ? 
          Math.round((member.acwTime - CONFIG.metricsGoals.acwTime) * 100) / 100 : 0,
        teamAverage: analytics.summary.overall.acwTime,
        vsTeam: Math.round((member.acwTime - analytics.summary.overall.acwTime) * 100) / 100
      });
      
      // On queue percentage
      memberCompare.metrics.push({
        metric: 'onQueuePercentage',
        name: 'On Queue Percentage',
        unit: '%',
        target: CONFIG.metricsGoals.onQueuePercentage,
        current: member.onQueuePercentage,
        status: member.onQueuePercentage >= CONFIG.metricsGoals.onQueuePercentage ? 'meeting' : 'below',
        gap: member.onQueuePercentage < CONFIG.metricsGoals.onQueuePercentage ? 
          Math.round((CONFIG.metricsGoals.onQueuePercentage - member.onQueuePercentage) * 100) / 100 : 0,
        teamAverage: analytics.summary.overall.onQueuePercentage,
        vsTeam: Math.round((member.onQueuePercentage - analytics.summary.overall.onQueuePercentage) * 100) / 100
      });
      
      // Interacting percentage
      memberCompare.metrics.push({
        metric: 'interactingPercentage',
        name: 'Interacting Percentage',
        unit: '%',
        target: CONFIG.metricsGoals.interactingPercentage,
        current: member.interactingPercentage,
        status: member.interactingPercentage >= CONFIG.metricsGoals.interactingPercentage ? 'meeting' : 'below',
        gap: member.interactingPercentage < CONFIG.metricsGoals.interactingPercentage ? 
          Math.round((CONFIG.metricsGoals.interactingPercentage - member.interactingPercentage) * 100) / 100 : 0,
        teamAverage: analytics.summary.overall.interactingPercentage,
        vsTeam: Math.round((member.interactingPercentage - analytics.summary.overall.interactingPercentage) * 100) / 100
      });
      
      // Add to comparisons
      analytics.comparisons.teamMemberPerformance.push(memberCompare);
    });
    
    return {
      success: true,
      data: analytics
    };
  } catch (error) {
    console.error('Error in getMetricsAnalytics:', error);
    return {
      success: false,
      message: `Failed to get metrics analytics: ${error.message}`
    };
  }
}

/**
 * Get year-week string (YYYY-Wnn) for given date
 * @param {Date} date - Date to get week for
 * @return {string} Year-week string (YYYY-Wnn)
 */
function getYearWeekString(date) {
  const d = new Date(date);
  const firstDayOfYear = new Date(d.getFullYear(), 0, 1);
  const dayOfYear = Math.floor((d - firstDayOfYear) / (24 * 60 * 60 * 1000));
  const weekNumber = Math.ceil((d.getDay() + 1 + dayOfYear) / 7);
  
  // Pad week number with leading zero if needed
  const paddedWeekNumber = weekNumber < 10 ? `0${weekNumber}` : `${weekNumber}`;
  
  return `${d.getFullYear()}-W${paddedWeekNumber}`;
}

/**
 * Export metrics to CSV format
 * @param {Object} filters - Optional filters for the export
 * @return {Object} Result with CSV content
 */
function exportMetricsToCSV(filters = {}) {
  try {
    // Get metrics with filters
    const result = getMetrics(filters, 1000); // Export up to 1000 metrics records
    
    if (!result.success) {
      throw new Error(result.message || 'Failed to get metrics');
    }
    
    const metrics = result.data;
    
    if (!metrics || metrics.length === 0) {
      return {
        success: true,
        data: 'No metrics found matching the filter criteria',
        contentType: 'text/plain'
      };
    }
    
    // Define CSV headers
    const csvHeaders = [
      'ID',
      'Team Member',
      'Email',
      'Date',
      'Reporting Period',
      'Calls Offered',
      'Calls Accepted',
      'Answer Rate (%)',
      'Avg Talk Time (min)',
      'ACW Time (min)',
      'On Queue (%)',
      'Off Queue (%)',
      'Interacting Hours',
      'Interacting Percentage (%)',
      'Quality Score',
      'Notes',
      'Entered By'
    ];
    
    // Start with the headers
    let csvContent = csvHeaders.join(',') + '\n';
    
    // Add rows for each metric
    metrics.forEach(metric => {
      const rowData = [
        `"${metric.id || ''}"`,
        `"${metric.teamMemberName || ''}"`,
        `"${metric.teamMemberEmail || ''}"`,
        `"${metric.date ? formatDate(new Date(metric.date)) : ''}"`,
        `"${metric.reportingPeriod || ''}"`,
        `"${metric.callsOffered || ''}"`,
        `"${metric.callsAccepted || ''}"`,
        `"${metric.answerRate || ''}"`,
        `"${metric.avgTalkTime || ''}"`,
        `"${metric.acwTime || ''}"`,
        `"${metric.onQueuePercentage || ''}"`,
        `"${metric.offQueuePercentage || ''}"`,
        `"${metric.interactingHours || ''}"`,
        `"${metric.interactingPercentage || ''}"`,
        `"${metric.qualityScore || ''}"`,
        `"${(metric.notes || '').replace(/"/g, '""')}"`,
        `"${metric.enteredBy || ''}"`
      ];
      
      csvContent += rowData.join(',') + '\n';
    });
    
    return {
      success: true,
      data: csvContent,
      contentType: 'text/csv',
      filename: `metrics-export-${formatDate(new Date())}.csv`
    };
  } catch (error) {
    console.error('Error in exportMetricsToCSV:', error);
    return {
      success: false,
      message: `Failed to export metrics: ${error.message}`
    };
  }
}

/**
 * Schedule a metrics email report
 * @param {Object} config - Email configuration
 * @param {Array} recipients - Email recipients
 * @param {string} frequency - Email frequency (daily, weekly, monthly)
 * @param {number} dayOfWeek - Day of week for weekly emails (0 = Sunday)
 * @param {number} dayOfMonth - Day of month for monthly emails
 * @return {Object} Result with success flag and message
 */
function scheduleMetricsEmail(config = {}, recipients = [], frequency = 'weekly', dayOfWeek = 1, dayOfMonth = 1) {
  try {
    // Save configuration in settings
    const settings = {
      'metricsEmailEnabled': 'true',
      'metricsEmailFrequency': frequency,
      'metricsEmailDayOfWeek': dayOfWeek.toString(),
      'metricsEmailDayOfMonth': dayOfMonth.toString(),
      'metricsEmailRecipients': recipients.join(','),
      'metricsEmailIncludeTeamSummary': (config.includeTeamSummary === true).toString(),
      'metricsEmailIncludeIndividualMetrics': (config.includeIndividualMetrics === true).toString(),
      'metricsEmailIncludeCharts': (config.includeCharts === true).toString()
    };
    
    // Save each setting
    for (const [key, value] of Object.entries(settings)) {
      saveSetting(key, value, 'Metrics Email Configuration');
    }
    
    // Set up the trigger based on frequency
    // Note: This requires enabling triggers in your Google Apps Script project
    try {
      // Delete existing triggers for metrics emails
      const existingTriggers = ScriptApp.getProjectTriggers().filter(trigger => 
        trigger.getHandlerFunction() === 'sendScheduledMetricsEmail'
      );
      
      existingTriggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));
      
      // Create new trigger based on frequency
      if (frequency === 'daily') {
        ScriptApp.newTrigger('sendScheduledMetricsEmail')
          .timeBased()
          .everyDays(1)
          .atHour(7) // 7 AM
          .create();
      } else if (frequency === 'weekly') {
        ScriptApp.newTrigger('sendScheduledMetricsEmail')
          .timeBased()
          .onWeekDay(dayOfWeek)
          .atHour(7) // 7 AM
          .create();
      } else if (frequency === 'monthly') {
        // For monthly, we'll use a daily trigger and check the day of month in the function
        ScriptApp.newTrigger('sendScheduledMetricsEmail')
          .timeBased()
          .everyDays(1)
          .atHour(7) // 7 AM
          .create();
      }
    } catch (triggerError) {
      console.warn('Could not set up trigger:', triggerError.message);
      console.warn('You will need to manually set up a trigger for sendScheduledMetricsEmail');
    }
    
    return { 
      success: true, 
      message: 'Metrics email schedule set successfully'
    };
  } catch (error) {
    console.error('Error in scheduleMetricsEmail:', error);
    return { 
      success: false, 
      message: `Failed to schedule metrics email: ${error.message}`
    };
  }
}

/**
 * Send scheduled metrics email
 * This function is called by a time-based trigger
 */
function sendScheduledMetricsEmail() {
  try {
    // Get settings
    const enabled = getSetting('metricsEmailEnabled') === 'true';
    const frequency = getSetting('metricsEmailFrequency') || 'weekly';
    const dayOfWeek = parseInt(getSetting('metricsEmailDayOfWeek') || '1');
    const dayOfMonth = parseInt(getSetting('metricsEmailDayOfMonth') || '1');
    const recipientsStr = getSetting('metricsEmailRecipients') || '';
    
    if (!enabled || !recipientsStr) {
      console.log('Metrics email disabled or no recipients configured.');
      return;
    }
    
    const recipients = recipientsStr.split(',').map(r => r.trim()).filter(r => r);
    if (recipients.length === 0) {
      console.log('No valid recipients for metrics email.');
      return;
    }
    
    // Check if today is the right day to send
    const today = new Date();
    
    if (frequency === 'monthly' && today.getDate() !== dayOfMonth) {
      console.log(`Not sending monthly metrics email. Today is day ${today.getDate()}, configured for day ${dayOfMonth}.`);
      return;
    }
    
    if (frequency === 'weekly' && today.getDay() !== dayOfWeek) {
      console.log(`Not sending weekly metrics email. Today is day ${today.getDay()}, configured for day ${dayOfWeek}.`);
      return;
    }
    
    // Determine date range based on frequency
    let startDate = new Date();
    
    if (frequency === 'daily') {
      // Yesterday
      startDate.setDate(startDate.getDate() - 1);
    } else if (frequency === 'weekly') {
      // Last 7 days
      startDate.setDate(startDate.getDate() - 7);
    } else if (frequency === 'monthly') {
      // Last 30 days
      startDate.setDate(startDate.getDate() - 30);
    }
    
    // Get metrics summary for the period
    const summary = getTeamMetricsSummary(startDate, new Date());
    
    // Create email content
    const emailSubject = `${frequency.charAt(0).toUpperCase() + frequency.slice(1)} Team Metrics Report - ${formatDate(new Date())}`;
    
    // Create email body using HTML template
    const emailTemplate = HtmlService.createTemplateFromFile('html/email/metrics-report');
    
    // Pass data to the template
    emailTemplate.summary = summary;
    emailTemplate.startDate = formatDate(startDate);
    emailTemplate.endDate = formatDate(new Date());
    emailTemplate.frequency = frequency;
    emailTemplate.includeTeamSummary = getSetting('metricsEmailIncludeTeamSummary') === 'true';
    emailTemplate.includeIndividualMetrics = getSetting('metricsEmailIncludeIndividualMetrics') === 'true';
    emailTemplate.includeCharts = getSetting('metricsEmailIncludeCharts') === 'true';
    emailTemplate.metricsGoals = CONFIG.metricsGoals;
    
    const emailHtml = emailTemplate.evaluate().getContent();
    
    // Send the email to all recipients
    recipients.forEach(recipient => {
      try {
        GmailApp.sendEmail(
          recipient,
          emailSubject,
          // Plain text version
          stripHtml(emailHtml),
          {
            htmlBody: emailHtml,
            name: 'TeamLead Dashboard',
          }
        );
      } catch (emailError) {
        console.error(`Failed to send metrics email to ${recipient}:`, emailError);
      }
    });
    
    console.log(`Sent ${frequency} metrics report to ${recipients.length} recipients.`);
  } catch (error) {
    console.error('Error in sendScheduledMetricsEmail:', error);
  }
}

/**
 * Get setting value
 * @param {string} key - Setting key
 * @param {string} defaultValue - Default value if not found
 * @return {string} Setting value
 */
function getSetting(key, defaultValue = '') {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.settings);
    if (!sheet) {
      return defaultValue;
    }
    
    const data = sheet.getDataRange().getValues();
    const keyCol = data[0].indexOf('key');
    const valueCol = data[0].indexOf('value');
    
    if (keyCol === -1 || valueCol === -1) {
      return defaultValue;
    }
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][keyCol] === key) {
        return data[i][valueCol].toString();
      }
    }
    
    return defaultValue;
  } catch (error) {
    console.error('Error in getSetting:', error);
    return defaultValue;
  }
}

/**
 * Save setting value
 * @param {string} key - Setting key
 * @param {string} value - Setting value
 * @param {string} description - Setting description
 * @param {string} category - Setting category
 * @return {boolean} Success flag
 */
function saveSetting(key, value, description = '', category = 'General') {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.settings);
    if (!sheet) {
      return false;
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const keyCol = headers.indexOf('key');
    const valueCol = headers.indexOf('value');
    const descriptionCol = headers.indexOf('description');
    const categoryCol = headers.indexOf('category');
    const lastModifiedCol = headers.indexOf('lastModified');
    
    if (keyCol === -1 || valueCol === -1) {
      return false;
    }
    
    // Find existing setting
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][keyCol] === key) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex !== -1) {
      // Update existing setting
      sheet.getRange(rowIndex, valueCol + 1).setValue(value);
      
      if (descriptionCol !== -1 && description) {
        sheet.getRange(rowIndex, descriptionCol + 1).setValue(description);
      }
      
      if (categoryCol !== -1 && category) {
        sheet.getRange(rowIndex, categoryCol + 1).setValue(category);
      }
      
      if (lastModifiedCol !== -1) {
        sheet.getRange(rowIndex, lastModifiedCol + 1).setValue(new Date());
      }
    } else {
      // Add new setting
      const newRow = [];
      for (let i = 0; i < headers.length; i++) {
        if (i === keyCol) {
          newRow[i] = key;
        } else if (i === valueCol) {
          newRow[i] = value;
        } else if (i === descriptionCol && description) {
          newRow[i] = description;
        } else if (i === categoryCol && category) {
          newRow[i] = category;
        } else if (i === lastModifiedCol) {
          newRow[i] = new Date();
        } else {
          newRow[i] = '';
        }
      }
      sheet.appendRow(newRow);
    }
    
    return true;
  } catch (error) {
    console.error('Error in saveSetting:', error);
    return false;
  }
}
function saveSetting(key, value, description = '', category = 'General') {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.settings);
    if (!sheet) {
      return false;
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const keyCol = headers.indexOf('key');
    const valueCol = headers.indexOf('value');
    const descriptionCol = headers.indexOf('description');
    const categoryCol = headers.indexOf('category');
    const lastModifiedCol = headers.indexOf('lastModified');
    
    if (keyCol === -1 || valueCol === -1) {
      return false;
    }
    
    // Find existing setting
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][keyCol] === key) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex !== -1) {
      // Update existing setting
      sheet.getRange(rowIndex, valueCol + 1).setValue(value);
      
      if (descriptionCol !== -1 && description) {
        sheet.getRange(rowIndex, descriptionCol + 1).setValue(description);
      }
      
      if (categoryCol !== -1 && category) {
        sheet.getRange(rowIndex, categoryCol + 1).setValue(category);
      }
      
      if (lastModifiedCol !== -1) {
        sheet.getRange(rowIndex, lastModifiedCol + 1).setValue(new Date());
      }
    } else {
      // Add new setting
      const newRow = [];
      for (let i = 0; i < headers.length; i++) {
        if (i === keyCol) {
          newRow[i] = key;
        } else if (i === valueCol) {
          newRow[i] = value;
        } else if (i === descriptionCol && description) {
          newRow[i] = description;
        } else if (i === categoryCol && category) {
          newRow[i] = category;
        } else if (i === lastModifiedCol) {
          newRow[i] = new Date();
        } else {
          newRow[i] = '';
        }
      }
      sheet.appendRow(newRow);
    }
    
    return true;
  } catch (error) {
    console.error('Error in saveSetting:', error);
    return false;
  }
}

      /**
 * DashboardService.gs
 * Handles dashboard functionality
 */

/**
 * Get dashboard data
 * @return {Object} Dashboard data 
 */
function getDashboardData() {
  try {
    // Get today's date
    const today = new Date();
    
    // Get basic team metrics
    let teamInfo = {};
    try {
      teamInfo = getTeamStatusSummary();
    } catch (error) {
      console.error('Error getting team status summary:', error);
      teamInfo = { totalMembers: 0, error: error.message };
    }
    
    // Get upcoming one-on-one sessions
    let upcomingOneOnOnes = [];
    try {
      upcomingOneOnOnes = getUpcomingSessions();
    } catch (error) {
      console.error('Error getting upcoming sessions:', error);
      upcomingOneOnOnes = [];
    }
    
    // Get recent QA reviews
    let recentQAReviews = [];
    try {
      recentQAReviews = getRecentQAReviews();
    } catch (error) {
      console.error('Error getting recent QA reviews:', error);
      recentQAReviews = [];
    }
    
    // Get action items
    let actionItems = { data: [] };
    try {
      actionItems = getActionItems({
        status: 'Not Started'
      }, 5);
    } catch (error) {
      console.error('Error getting action items:', error);
      actionItems = { data: [] };
    }
    
    // Get overdue action items
    let overdueActionItems = { data: [] };
    try {
      overdueActionItems = getOverdueActionItems(5);
    } catch (error) {
      console.error('Error getting overdue action items:', error);
      overdueActionItems = { data: [] };
    }
    
    // Get recent one-on-one summary
    let oneOnOneSummary = {};
    try {
      oneOnOneSummary = getRecentOneOnOneSummary();
    } catch (error) {
      console.error('Error getting one-on-one summary:', error);
      oneOnOneSummary = { totalSessions: 0, error: error.message };
    }
    
    // Get QA summary statistics
    let qaSummary = {};
    try {
      qaSummary = getQASummaryStatistics();
    } catch (error) {
      console.error('Error getting QA summary statistics:', error);
      qaSummary = { totalReviews: 0, error: error.message };
    }
    
    // Get action items summary
    let actionItemsSummary = {};
    try {
      actionItemsSummary = getActionItemsSummary();
    } catch (error) {
      console.error('Error getting action items summary:', error);
      actionItemsSummary = { totalItems: 0, error: error.message };
    }
    
    // Get recent metrics
    let recentMetrics = [];
    try {
      const result = getMetrics({
        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7)
      }, 100);
      
      if (result.success) {
        recentMetrics = result.data;
      }
    } catch (error) {
      console.error('Error getting recent metrics:', error);
      recentMetrics = [];
    }
    
    // Get manager one-on-one summary
    let managerOneOnOneSummary = {};
    try {
      managerOneOnOneSummary = getRecentManagerOneOnOneSummary();
    } catch (error) {
      console.error('Error getting manager one-on-one summary:', error);
      managerOneOnOneSummary = { totalSessions: 0, error: error.message };
    }
    
    // Get recent general notes
    let recentGeneralNotes = [];
    try {
      recentGeneralNotes = getRecentGeneralNotes();
    } catch (error) {
      console.error('Error getting recent general notes:', error);
      recentGeneralNotes = [];
    }
    
    // Get overdue one-on-one data
    let overdueOneOnOnes = { data: {} };
    try {
      overdueOneOnOnes = getOverdueOneOnOneSessions();
    } catch (error) {
      console.error('Error getting overdue one-on-ones:', error);
      overdueOneOnOnes = { data: {} };
    }
    
    // Process metrics for team summary
    let metricsSummary = {
      answerRate: 0,
      avgTalkTime: 0,
      acwTime: 0,
      onQueuePercentage: 0,
      interactingPercentage: 0,
      totalCalls: 0
    };
    
    if (recentMetrics.length > 0) {
      let totalAnswerRate = 0;
      let countAnswerRate = 0;
      let totalAvgTalkTime = 0;
      let countAvgTalkTime = 0;
      let totalAcwTime = 0;
      let countAcwTime = 0;
      let totalOnQueue = 0;
      let countOnQueue = 0;
      let totalInteracting = 0;
      let countInteracting = 0;
      let totalCallsOffered = 0;
      let totalCallsAccepted = 0;
      
      recentMetrics.forEach(metric => {
        if (metric.answerRate) {
          totalAnswerRate += parseFloat(metric.answerRate);
          countAnswerRate++;
        }
        
        if (metric.avgTalkTime) {
          totalAvgTalkTime += parseFloat(metric.avgTalkTime);
          countAvgTalkTime++;
        }
        
        if (metric.acwTime) {
          totalAcwTime += parseFloat(metric.acwTime);
          countAcwTime++;
        }
        
        if (metric.onQueuePercentage) {
          totalOnQueue += parseFloat(metric.onQueuePercentage);
          countOnQueue++;
        }
        
        if (metric.interactingPercentage) {
          totalInteracting += parseFloat(metric.interactingPercentage);
          countInteracting++;
        }
        
        if (metric.callsOffered) {
          totalCallsOffered += parseInt(metric.callsOffered);
        }
        
        if (metric.callsAccepted) {
          totalCallsAccepted += parseInt(metric.callsAccepted);
        }
      });
      
      metricsSummary = {
        answerRate: countAnswerRate > 0 ? (totalAnswerRate / countAnswerRate).toFixed(1) : 0,
        avgTalkTime: countAvgTalkTime > 0 ? (totalAvgTalkTime / countAvgTalkTime).toFixed(1) : 0,
        acwTime: countAcwTime > 0 ? (totalAcwTime / countAcwTime).toFixed(1) : 0,
        onQueuePercentage: countOnQueue > 0 ? (totalOnQueue / countOnQueue).toFixed(1) : 0,
        interactingPercentage: countInteracting > 0 ? (totalInteracting / countInteracting).toFixed(1) : 0,
        totalCalls: totalCallsOffered,
        acceptedCalls: totalCallsAccepted
      };
    }
    
    // Get metrics targets and calculate status
    const metricsStatus = {
      answerRate: {
        value: metricsSummary.answerRate,
        target: CONFIG.metricsGoals.answerRate,
        status: metricsSummary.answerRate >= CONFIG.metricsGoals.answerRate ? 'success' : 'warning'
      },
      avgTalkTime: {
        value: metricsSummary.avgTalkTime,
        target: `${CONFIG.metricsGoals.avgTalkTime.min}-${CONFIG.metricsGoals.avgTalkTime.max}`,
        status: (metricsSummary.avgTalkTime >= CONFIG.metricsGoals.avgTalkTime.min && 
                 metricsSummary.avgTalkTime <= CONFIG.metricsGoals.avgTalkTime.max) ? 'success' : 'warning'
      },
      acwTime: {
        value: metricsSummary.acwTime,
        target: CONFIG.metricsGoals.acwTime,
        status: metricsSummary.acwTime <= CONFIG.metricsGoals.acwTime ? 'success' : 'warning'
      },
      onQueuePercentage: {
        value: metricsSummary.onQueuePercentage,
        target: CONFIG.metricsGoals.onQueuePercentage,
        status: metricsSummary.onQueuePercentage >= CONFIG.metricsGoals.onQueuePercentage ? 'success' : 'warning'
      },
      interactingPercentage: {
        value: metricsSummary.interactingPercentage,
        target: CONFIG.metricsGoals.interactingPercentage,
        status: metricsSummary.interactingPercentage >= CONFIG.metricsGoals.interactingPercentage ? 'success' : 'warning'
      }
    };
    
    // Get today's schedule (could be extended with call schedules, meetings, etc.)
    const todayEvents = [];
    
    // Add upcoming one-on-ones scheduled for today
    if (upcomingOneOnOnes.length > 0) {
      upcomingOneOnOnes.forEach(session => {
        if (session.date) {
          const sessionDate = new Date(session.date);
          if (sessionDate.toDateString() === today.toDateString()) {
            todayEvents.push({
              type: 'one-on-one',
              title: `1:1 with ${session.teamMemberName || session.teamMemberEmail}`,
              time: Utilities.formatDate(sessionDate, Session.getScriptTimeZone(), 'HH:mm'),
              id: session.id
            });
          }
        }
      });
    }
    
    // Return all dashboard data
    return {
      success: true,
      data: {
        teamInfo: teamInfo,
        upcomingOneOnOnes: upcomingOneOnOnes,
        recentQAReviews: recentQAReviews,
        actionItems: actionItems.data || [],
        overdueActionItems: overdueActionItems.data || [],
        oneOnOneSummary: oneOnOneSummary,
        qaSummary: qaSummary,
        actionItemsSummary: actionItemsSummary,
        metricsSummary: metricsSummary,
        metricsStatus: metricsStatus,
        todayEvents: todayEvents,
        managerOneOnOneSummary: managerOneOnOneSummary,
        recentGeneralNotes: recentGeneralNotes,
        overdueOneOnOnes: overdueOneOnOnes.data || {}
      }
    };
  } catch (error) {
    console.error('Error in getDashboardData:', error);
    return {
      success: false,
      message: `Failed to get dashboard data: ${error.message}`
    };
  }
}

/**
 * Get dashboard summary stats
 * @return {Object} Dashboard summary statistics
 */
function getDashboardSummary() {
  try {
    // Get today's date
    const today = new Date();
    
    // Get basic team metrics
    let teamInfo = {};
    try {
      teamInfo = getTeamStatusSummary();
    } catch (error) {
      console.error('Error getting team status summary:', error);
      teamInfo = { totalMembers: 0, error: error.message };
    }
    
    // Get one-on-one summary
    let oneOnOneSummary = {};
    try {
      oneOnOneSummary = getRecentOneOnOneSummary();
    } catch (error) {
      console.error('Error getting one-on-one summary:', error);
      oneOnOneSummary = { totalSessions: 0, error: error.message };
    }
    
    // Get QA summary statistics
    let qaSummary = {};
    try {
      qaSummary = getQASummaryStatistics();
    } catch (error) {
      console.error('Error getting QA summary statistics:', error);
      qaSummary = { totalReviews: 0, error: error.message };
    }
    
    // Get action items summary
    let actionItemsSummary = {};
    try {
      actionItemsSummary = getActionItemsSummary();
    } catch (error) {
      console.error('Error getting action items summary:', error);
      actionItemsSummary = { totalItems: 0, error: error.message };
    }
    
    // Get manager one-on-one summary
    let managerOneOnOneSummary = {};
    try {
      managerOneOnOneSummary = getRecentManagerOneOnOneSummary();
    } catch (error) {
      console.error('Error getting manager one-on-one summary:', error);
      managerOneOnOneSummary = { totalSessions: 0, error: error.message };
    }
    
    // Get overdue one-on-one data
    let overdueCounts = {
      overdue: 0, 
      upcoming: 0
    };
    try {
      const overdueResult = getOverdueOneOnOneSessions();
      if (overdueResult.success && overdueResult.data) {
        overdueCounts.overdue = overdueResult.data.overdue || 0;
        overdueCounts.upcoming = overdueResult.data.upcoming || 0;
      }
    } catch (error) {
      console.error('Error getting overdue one-on-ones:', error);
    }
    
    // Return summary data
    return {
      success: true,
      data: {
        team: {
          totalMembers: teamInfo.totalMembers || 0,
          activeMembers: teamInfo.activeMembers || 0
        },
        oneOnOnes: {
          total: oneOnOneSummary.totalSessions || 0,
          completed: oneOnOneSummary.completedSessions || 0,
          overdue: overdueCounts.overdue || 0,
          upcoming: overdueCounts.upcoming || 0
        },
        qaReviews: {
          total: qaSummary.totalReviews || 0,
          averageScore: qaSummary.averageScore || 0,
          excellent: qaSummary.excellentCount || 0,
          good: qaSummary.goodCount || 0,
          needsImprovement: qaSummary.needsImprovementCount || 0
        },
        actionItems: {
          total: actionItemsSummary.totalItems || 0,
          completed: actionItemsSummary.completed || 0,
          overdue: actionItemsSummary.overdue || 0,
          dueToday: actionItemsSummary.dueToday || 0,
          completionRate: actionItemsSummary.completionRate || 0
        },
        managerOneOnOnes: {
          total: managerOneOnOneSummary.totalSessions || 0,
          completed: managerOneOnOneSummary.completedSessions || 0,
          upcoming: managerOneOnOneSummary.upcomingSessions || 0,
          nextSessionDaysAway: managerOneOnOneSummary.nextSessionDaysAway || null
        }
      }
    };
  } catch (error) {
    console.error('Error in getDashboardSummary:', error);
    return {
      success: false,
      message: `Failed to get dashboard summary: ${error.message}`
    };
  }
}

/**
 * Get overdue one-on-one sessions
 * @return {Object} Result with overdue sessions data
 */
function getOverdueOneOnOneSessions() {
  try {
    // Get team members
    const teamMembers = getTeamMembers();
    
    // Get one-on-one sessions (latest for each team member)
    const result = getRecentOneOnOneSessions();
    
    if (!result.success) {
      throw new Error(result.message || 'Failed to get one-on-one sessions');
    }
    
    const sessions = result.data || [];
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Start of today
    
    // Group sessions by team member
    const sessionsByMember = {};
    sessions.forEach(session => {
      if (!session.teamMemberEmail) return;
      
      // Keep only the latest session for each member
      if (!sessionsByMember[session.teamMemberEmail] || 
          new Date(session.date) > new Date(sessionsByMember[session.teamMemberEmail].date)) {
        sessionsByMember[session.teamMemberEmail] = session;
      }
    });
    
    // Check each team member for overdue sessions
    const overdueData = {
      overdue: [],
      upcoming: [],
      upToDate: [],
      needsFirstSession: [],
      overdue: 0,
      upcoming: 0,
      upToDate: 0,
      needsFirstSession: 0
    };
    
    teamMembers.forEach(member => {
      const email = member.Email;
      if (!email) return;
      
      const latestSession = sessionsByMember[email];
      
      // If no session exists, add to needsFirstSession
      if (!latestSession) {
        overdueData.needsFirstSession.push({
          teamMemberEmail: email,
          teamMemberName: member.Name || email,
          daysOverdue: CONFIG.oneOnOneFrequency // Consider as this many days overdue
        });
        overdueData.needsFirstSession++;
        return;
      }
      
      // Check next session date
      let nextSessionDate;
      
      if (latestSession.nextSessionDate) {
        // Use explicitly set next session date if available
        nextSessionDate = new Date(latestSession.nextSessionDate);
      } else {
        // Otherwise calculate based on last session date and frequency
        nextSessionDate = new Date(latestSession.date);
        nextSessionDate.setDate(nextSessionDate.getDate() + CONFIG.oneOnOneFrequency);
      }
      
      nextSessionDate.setHours(0, 0, 0, 0); // Start of day
      
      // Calculate days until next session
      const daysUntil = Math.floor((nextSessionDate - today) / (1000 * 60 * 60 * 24));
      
      // Categorize based on days until next session
      if (daysUntil < 0) {
        // Overdue session
        overdueData.overdue.push({
          teamMemberEmail: email,
          teamMemberName: member.Name || email,
          daysOverdue: Math.abs(daysUntil),
          lastSessionDate: latestSession.date,
          nextSessionDate: nextSessionDate
        });
        overdueData.overdue++;
      } else if (daysUntil <= 7) {
        // Upcoming session (within next 7 days)
        overdueData.upcoming.push({
          teamMemberEmail: email,
          teamMemberName: member.Name || email,
          daysUntil: daysUntil,
          lastSessionDate: latestSession.date,
          nextSessionDate: nextSessionDate
        });
        overdueData.upcoming++;
      } else {
        // Up to date session
        overdueData.upToDate.push({
          teamMemberEmail: email,
          teamMemberName: member.Name || email,
          daysUntil: daysUntil,
          lastSessionDate: latestSession.date,
          nextSessionDate: nextSessionDate
        });
        overdueData.upToDate++;
      }
    });
    
    // Sort overdue by most overdue first
    overdueData.overdue.sort((a, b) => b.daysOverdue - a.daysOverdue);
    
    // Sort upcoming by soonest first
    overdueData.upcoming.sort((a, b) => a.daysUntil - b.daysUntil);
    
    // Sort up to date by soonest first
    overdueData.upToDate.sort((a, b) => a.daysUntil - b.daysUntil);
    
    // Sort needs first session alphabetically by name
    overdueData.needsFirstSession.sort((a, b) => a.teamMemberName.localeCompare(b.teamMemberName));
    
    return {
      success: true,
      data: overdueData
    };
  } catch (error) {
    console.error('Error in getOverdueOneOnOneSessions:', error);
    return {
      success: false,
      message: `Failed to get overdue one-on-one sessions: ${error.message}`
    };
  }
}

/**
 * Get upcoming one-on-one sessions
 * @param {number} limit - Maximum number of sessions to return
 * @return {Array} Upcoming one-on-one sessions
 */
function getUpcomingSessions(limit = 5) {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Start of today
    
    // Check for explicitly scheduled upcoming sessions
    const scheduledSessions = getOneOnOneSessions({
      startDate: today,
      status: 'scheduled'
    }, 50, 'date', false); // Sort by date ascending
    
    let upcomingSessions = [];
    
    if (scheduledSessions.success && scheduledSessions.data && scheduledSessions.data.length > 0) {
      upcomingSessions = scheduledSessions.data.slice(0, limit);
    }
    
       
    return upcomingSessions;
  } catch (error) {
    console.error('Error in getUpcomingSessions:', error);
    return [];
  }
}

/**
 * Get team member status summary
 * @return {Object} Team status summary
 */
function getTeamStatusSummary() {
  try {
    const teamMembers = getTeamMembers();
    const today = new Date();
    
    // Initialize counts
    let totalMembers = 0;
    let activeMembers = 0;
    let membersNeedingOneOnOne = 0;
    let membersNeedingQAReview = 0;
    let membersWithActionItems = 0;
    let membersWithOverdueActionItems = 0;
    
    // Get one-on-one sessions (latest for each team member)
    let oneOnOneSessions = [];
    try {
      const result = getRecentOneOnOneSessions();
      if (result.success) {
        oneOnOneSessions = result.data || [];
      }
    } catch (error) {
      console.warn('Error getting one-on-one sessions:', error);
    }
    
    // Group sessions by team member
    const sessionsByMember = {};
    oneOnOneSessions.forEach(session => {
      if (!session.teamMemberEmail) return;
      
      // Keep only the latest session for each member
      if (!sessionsByMember[session.teamMemberEmail] || 
          new Date(session.date) > new Date(sessionsByMember[session.teamMemberEmail].date)) {
        sessionsByMember[session.teamMemberEmail] = session;
      }
    });
    
    // Get QA reviews (latest for each team member)
    let qaReviews = [];
    try {
      const result = getQAReviews({}, 1000);
      if (result.success) {
        qaReviews = result.data || [];
      }
    } catch (error) {
      console.warn('Error getting QA reviews:', error);
    }
    
    // Group QA reviews by team member
    const qaByMember = {};
    qaReviews.forEach(review => {
      if (!review.teamMemberEmail) return;
      
      // Keep only the latest review for each member
      if (!qaByMember[review.teamMemberEmail] || 
          new Date(review.reviewDate) > new Date(qaByMember[review.teamMemberEmail].reviewDate)) {
        qaByMember[review.teamMemberEmail] = review;
      }
    });
    
    // Get action items
    let actionItems = [];
    try {
      const result = getActionItems({
        status: ['Not Started', 'In Progress'] // Get non-completed action items
      }, 1000);
      if (result.success) {
        actionItems = result.data || [];
      }
    } catch (error) {
      console.warn('Error getting action items:', error);
    }
    
    // Group action items by team member
    const actionItemsByMember = {};
    const overdueActionItemsByMember = {};
    
    actionItems.forEach(item => {
      if (!item.teamMemberEmail) return;
      
      // Count action items by team member
      if (!actionItemsByMember[item.teamMemberEmail]) {
        actionItemsByMember[item.teamMemberEmail] = [];
      }
      actionItemsByMember[item.teamMemberEmail].push(item);
      
      // Check for overdue action items
      if (item.dueDate) {
        const dueDate = new Date(item.dueDate);
        if (dueDate < today) {
          if (!overdueActionItemsByMember[item.teamMemberEmail]) {
            overdueActionItemsByMember[item.teamMemberEmail] = [];
          }
          overdueActionItemsByMember[item.teamMemberEmail].push(item);
        }
      }
    });
    
    // Process each team member
    teamMembers.forEach(member => {
      if (!member.Email) return;
      
      totalMembers++;
      
      // Check active status
      if (member.Status === 'Active') {
        activeMembers++;
        
        // Check one-on-one status
        const latestSession = sessionsByMember[member.Email];
        let needsOneOnOne = true;
        
        if (latestSession) {
          let nextSessionDate;
          
          if (latestSession.nextSessionDate) {
            // Use explicitly set next session date
            nextSessionDate = new Date(latestSession.nextSessionDate);
          } else {
            // Calculate based on last session date and frequency
            nextSessionDate = new Date(latestSession.date);
            nextSessionDate.setDate(nextSessionDate.getDate() + CONFIG.oneOnOneFrequency);
          }
          
          // If next session is in the future, doesn't need one-on-one yet
          if (nextSessionDate > today) {
            needsOneOnOne = false;
          }
        }
        
        if (needsOneOnOne) {
          membersNeedingOneOnOne++;
        }
        
        // Check QA review status
        const latestQAReview = qaByMember[member.Email];
        let needsQAReview = true;
        
        if (latestQAReview) {
          const reviewDate = new Date(latestQAReview.reviewDate);
          const nextReviewDate = new Date(reviewDate);
          nextReviewDate.setDate(nextReviewDate.getDate() + CONFIG.qaReviewFrequency);
          
          // If next review is in the future, doesn't need QA review yet
          if (nextReviewDate > today) {
            needsQAReview = false;
          }
        }
        
        if (needsQAReview) {
          membersNeedingQAReview++;
        }
        
        // Check action items
        if (actionItemsByMember[member.Email] && actionItemsByMember[member.Email].length > 0) {
          membersWithActionItems++;
        }
        
        // Check overdue action items
        if (overdueActionItemsByMember[member.Email] && overdueActionItemsByMember[member.Email].length > 0) {
          membersWithOverdueActionItems++;
        }
      }
    });
    
    return {
      totalMembers: totalMembers,
      activeMembers: activeMembers,
      inactiveMembers: totalMembers - activeMembers,
      membersNeedingOneOnOne: membersNeedingOneOnOne,
      membersNeedingQAReview: membersNeedingQAReview,
      membersWithActionItems: membersWithActionItems,
      membersWithOverdueActionItems: membersWithOverdueActionItems
    };
  } catch (error) {
    console.error('Error in getTeamStatusSummary:', error);
    return {
      totalMembers: 0,
      activeMembers: 0,
      inactiveMembers: 0,
      membersNeedingOneOnOne: 0,
      membersNeedingQAReview: 0,
      membersWithActionItems: 0,
      membersWithOverdueActionItems: 0,
      error: error.message
    };
  }
}

/**
 * Get recent one-on-one sessions
 * @param {number} limit - Maximum number of sessions to return
 * @return {Array} Recent one-on-one sessions
 */
function getRecentOneOnOneSessions(limit = 1000) {
  try {
    // Get completed one-on-one sessions, sorted by date (most recent first)
    const result = getOneOnOneSessions({
      status: 'completed'
    }, limit, 'date', true);
    
    return result;
  } catch (error) {
    console.error('Error in getRecentOneOnOneSessions:', error);
    return {
      success: false,
      message: `Failed to get recent one-on-one sessions: ${error.message}`,
      data: []
    };
  }
}

/**
 * Get team performance dashboard data
 * @param {Date} startDate - Start date for metrics
 * @param {Date} endDate - End date for metrics
 * @return {Object} Team performance data
 */
function getTeamPerformanceDashboard(startDate, endDate) {
  try {
    if (!startDate) {
      // Default to 30 days ago
      startDate = new Date();
      startDate.setDate(startDate.getDate() - 30);
    }
    
    if (!endDate) {
      endDate = new Date();
    }
    
    // Get metrics summary
    let metricsSummary = {};
    try {
      metricsSummary = getTeamMetricsSummary(startDate, endDate);
    } catch (error) {
      console.error('Error getting team metrics summary:', error);
      metricsSummary = { 
        teamAverage: {
          answerRate: 0,
          avgTalkTime: 0,
          acwTime: 0,
          onQueuePercentage: 0,
          offQueuePercentage: 0,
          interactingPercentage: 0
        }
      };
    }
    
    // Get QA statistics
    let qaSummary = {};
    try {
      qaSummary = getQASummaryStatistics();
    } catch (error) {
      console.error('Error getting QA summary statistics:', error);
      qaSummary = { totalReviews: 0 };
    }
    
    // Get team members
    const teamMembers = getTeamMembers().filter(member => member.Status === 'Active');
    
    // Get one-on-one sessions (latest for each team member)
    let oneOnOneSessions = [];
    try {
      const result = getRecentOneOnOneSessions();
      if (result.success) {
        oneOnOneSessions = result.data || [];
      }
    } catch (error) {
      console.warn('Error getting one-on-one sessions:', error);
    }
    
    // Group sessions by team member
    const sessionsByMember = {};
    oneOnOneSessions.forEach(session => {
      if (!session.teamMemberEmail) return;
      
      // Keep only the latest session for each member
      if (!sessionsByMember[session.teamMemberEmail] || 
          new Date(session.date) > new Date(sessionsByMember[session.teamMemberEmail].date)) {
        sessionsByMember[session.teamMemberEmail] = session;
      }
    });
    
    // Calculate days since last one-on-one for each team member
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Start of today
    
    const teamMemberData = teamMembers.map(member => {
      const email = member.Email;
      const latestSession = sessionsByMember[email];
      
      let daysSinceLastSession = null;
      let nextSessionDue = null;
      let nextSessionOverdue = false;
      
      if (latestSession) {
        const sessionDate = new Date(latestSession.date);
        sessionDate.setHours(0, 0, 0, 0);
        daysSinceLastSession = Math.floor((today - sessionDate) / (1000 * 60 * 60 * 24));
        
        // Calculate when next session is due
        let nextSessionDate;
        
        if (latestSession.nextSessionDate) {
          nextSessionDate = new Date(latestSession.nextSessionDate);
        } else {
          nextSessionDate = new Date(sessionDate);
          nextSessionDate.setDate(nextSessionDate.getDate() + CONFIG.oneOnOneFrequency);
        }
        
        nextSessionDate.setHours(0, 0, 0, 0);
        nextSessionDue = Math.floor((nextSessionDate - today) / (1000 * 60 * 60 * 24));
        
        // Check if overdue
        nextSessionOverdue = nextSessionDue < 0;
      } else {
        // No session found, consider it as overdue
        nextSessionOverdue = true;
        nextSessionDue = -CONFIG.oneOnOneFrequency; // Treat as this many days overdue
      }
      
      // Find metrics for this team member
      const memberMetrics = metricsSummary.byTeamMember ? 
        metricsSummary.byTeamMember[email] || null : null;
      
      return {
        name: member.Name || email,
        email: email,
        oneOnOne: {
          daysSinceLastSession: daysSinceLastSession,
          nextSessionDue: nextSessionDue,
          nextSessionOverdue: nextSessionOverdue
        },
        metrics: memberMetrics ? memberMetrics.average : null
      };
    });
    
    return {
      success: true,
      data: {
        teamAverage: metricsSummary.teamAverage || {},
        teamMembers: teamMemberData,
        qaSummary: qaSummary,
        startDate: formatDate(startDate),
        endDate: formatDate(endDate)
      }
    };
  } catch (error) {
    console.error('Error in getTeamPerformanceDashboard:', error);
    return {
      success: false,
      message: `Failed to get team performance dashboard: ${error.message}`
    };
  }
}

/**
 * Get custom dashboard data based on specific metrics
 * @param {Object} options - Dashboard options
 * @return {Object} Custom dashboard data
 */
function getCustomDashboard(options = {}) {
  try {
    // Get specified data based on options
    const data = {};
    
    // Team metrics
    if (options.includeTeamMetrics) {
      let startDate = new Date();
      startDate.setDate(startDate.getDate() - (options.daysToInclude || 30));
      
      try {
        data.teamMetrics = getTeamMetricsSummary(startDate, new Date()).teamAverage;
      } catch (error) {
        console.error('Error getting team metrics:', error);
        data.teamMetrics = { error: error.message };
      }
    }
    
    // Team member status
    if (options.includeTeamStatus) {
      try {
        data.teamStatus = getTeamStatusSummary();
      } catch (error) {
        console.error('Error getting team status:', error);
        data.teamStatus = { error: error.message };
      }
    }
    
    // One-on-one summary
    if (options.includeOneOnOneSummary) {
      try {
        data.oneOnOneSummary = getRecentOneOnOneSummary();
      } catch (error) {
        console.error('Error getting one-on-one summary:', error);
        data.oneOnOneSummary = { error: error.message };
      }
    }
    
    // QA summary
    if (options.includeQASummary) {
      try {
        data.qaSummary = getQASummaryStatistics();
      } catch (error) {
        console.error('Error getting QA summary:', error);
        data.qaSummary = { error: error.message };
      }
    }
    
    // Action items summary
    if (options.includeActionItemsSummary) {
      try {
        data.actionItemsSummary = getActionItemsSummary();
      } catch (error) {
        console.error('Error getting action items summary:', error);
        data.actionItemsSummary = { error: error.message };
      }
    }
    
    // Upcoming sessions
    if (options.includeUpcomingSessions) {
      try {
        data.upcomingSessions = getUpcomingSessions(options.sessionLimit || 5);
      } catch (error) {
        console.error('Error getting upcoming sessions:', error);
        data.upcomingSessions = { error: error.message };
      }
    }
    
    // Overdue one-on-ones
    if (options.includeOverdueOneOnOnes) {
      try {
        const result = getOverdueOneOnOneSessions();
        if (result.success) {
          data.overdueOneOnOnes = result.data;
        } else {
          data.overdueOneOnOnes = { error: result.message };
        }
      } catch (error) {
        console.error('Error getting overdue one-on-ones:', error);
        data.overdueOneOnOnes = { error: error.message };
      }
    }
    
    return {
      success: true,
      data: data
    };
  } catch (error) {
    console.error('Error in getCustomDashboard:', error);
    return {
      success: false,
      message: `Failed to get custom dashboard data: ${error.message}`
    };
  }
}


/**
 * QAReviewService.gs
 * Handles QA review functionality
 */

/**
 * Get QA review by ID
 * @param {string} id - Review ID
 * @return {Object} QA review data
 */
function getQAReviewById(id) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.qaReviews);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.qaReviews}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    if (idCol === -1) {
      throw new Error('ID column not found in QAReviews sheet');
    }
    
    // Find the row with matching ID
    let reviewRow = null;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === id) {
        reviewRow = data[i];
        break;
      }
    }
    
    if (!reviewRow) {
      throw new Error(`QA review with ID ${id} not found`);
    }
    
    // Convert row to object using headers as keys
    const review = {};
    headers.forEach((header, index) => {
      review[header] = reviewRow[index];
    });
    
    // Parse action items if they exist
    if (review.additionalActionItems && typeof review.additionalActionItems === 'string') {
      try {
        review.additionalActionItems = JSON.parse(review.additionalActionItems);
      } catch (parseError) {
        console.warn('Error parsing action items JSON:', parseError);
        review.additionalActionItems = [];
      }
    }
    
    return review;
  } catch (error) {
    console.error('Error in getQAReviewById:', error);
    throw new Error(`Failed to get QA review: ${error.message}`);
  }
}

/**
 * Save QA review
 * @param {Object} reviewData - QA review data
 * @return {Object} Result with success flag, message, and review ID
 */
function saveQAReview(reviewData) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.qaReviews);
    if (!sheet) {
      // Create the sheet if it doesn't exist
      createSheetIfNotExists(CONFIG.sheetNames.qaReviews, [
        'id', 'teamMemberEmail', 'interactionDate', 'interactionId', 'reviewerEmail', 'reviewDate', 
        'status', 'scorePercentage', 'totalPoints', 'possiblePoints', 
        'answeredPromptly', 'openingMessage', 'sassScreener', 'empathyRapport', 'activeListening', 
        'inclusiveLanguage', 'emotionalResponse', 'appropriateResources', 'copingStrategies', 
        'summarizedKeyPoints', 'closureProcess', 'overallFeedback', 'strengths', 'improvements', 
        'actionItem1', 'actionItem2', 'actionItem3', 'additionalActionItems',
        'answeredNotes', 'openingNotes', 'sassNotes', 'empathyNotes', 'listeningNotes',
        'inclusiveNotes', 'emotionalNotes', 'resourcesNotes', 'copingNotes', 'summaryNotes',
        'closureNotes', 'sendFollowUpEmail', 'emailTemplate', 'emailSubject', 'scheduleEmail', 
        'scheduledTime', 'lastModified'
      ]);
    }
    
    // Generate ID if not provided
    if (!reviewData.id) {
      reviewData.id = generateUniqueId();
    }
    
    // Set last modified date
    reviewData.lastModified = new Date();
    
    // Calculate score percentage if points are provided
    if (reviewData.totalPoints !== undefined && reviewData.possiblePoints !== undefined) {
      const totalPoints = parseFloat(reviewData.totalPoints);
      const possiblePoints = parseFloat(reviewData.possiblePoints);
      
      if (!isNaN(totalPoints) && !isNaN(possiblePoints) && possiblePoints > 0) {
        reviewData.scorePercentage = Math.round((totalPoints / possiblePoints) * 100);
      }
    }
    
    // Serialize additional action items if they exist
    if (reviewData.additionalActionItems && typeof reviewData.additionalActionItems !== 'string') {
      reviewData.additionalActionItems = JSON.stringify(reviewData.additionalActionItems);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    if (idCol === -1) {
      throw new Error('ID column not found in QAReviews sheet');
    }
    
    // Create a row with values in the same order as headers
    const rowData = headers.map(header => {
      const value = reviewData[header] !== undefined ? reviewData[header] : '';
      
      // Format dates if the value is a date object and the header contains 'date' (case insensitive)
      if (value instanceof Date && header.toLowerCase().includes('date')) {
        return formatDate(value);
      }
      
      return value;
    });
    
    let rowIndex = -1;
    
    // Find existing review if ID exists
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === reviewData.id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    // Update or append row
    if (rowIndex !== -1) {
      sheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    } else {
      sheet.appendRow(rowData);
    }
    
    // Update team member's LastQAReview date
    if (reviewData.teamMemberEmail && reviewData.status === 'completed') {
      try {
        updateTeamMemberLastQAReview(
          reviewData.teamMemberEmail, 
          reviewData.reviewDate ? new Date(reviewData.reviewDate) : new Date()
        );
      } catch (updateError) {
        console.warn('Error updating team member LastQAReview date:', updateError);
      }
    }
    
    // Create action items if specified
    if (reviewData.createActionItems) {
      // Process individual action items
      const actionItems = [];
      
      if (reviewData.actionItem1) {
        actionItems.push({
          description: reviewData.actionItem1,
          dueDate: null
        });
      }
      
      if (reviewData.actionItem2) {
        actionItems.push({
          description: reviewData.actionItem2,
          dueDate: null
        });
      }
      
      if (reviewData.actionItem3) {
        actionItems.push({
          description: reviewData.actionItem3,
          dueDate: null
        });
      }
      
      // Process additional action items
      if (reviewData.additionalActionItems) {
        let additionalActionItems = [];
        
        if (typeof reviewData.additionalActionItems === 'string') {
          try {
            additionalActionItems = JSON.parse(reviewData.additionalActionItems);
          } catch (parseError) {
            console.warn('Error parsing additional action items JSON:', parseError);
          }
        } else if (Array.isArray(reviewData.additionalActionItems)) {
          additionalActionItems = reviewData.additionalActionItems;
        }
        
        actionItems.push(...additionalActionItems);
      }
      
      // Create each action item
      actionItems.forEach(item => {
        if (item && item.description) {
          const actionItemData = {
            teamMemberEmail: reviewData.teamMemberEmail,
            description: item.description,
            dueDate: item.dueDate || null,
            status: 'Not Started',
            source: 'QA Review',
            sourceId: reviewData.id,
            createdBy: reviewData.reviewerEmail || Session.getActiveUser().getEmail()
          };
          
          addActionItem(actionItemData);
        }
      });
    }
    
    // Send follow-up email if requested
    if (reviewData.sendFollowUpEmail) {
      if (reviewData.scheduleEmail && reviewData.scheduledTime) {
        // Schedule for later delivery
        // This would require implementing a time-triggered function
        // For now, just log that we would schedule it
        console.log('Email scheduled for later delivery:', reviewData.scheduledTime);
      } else {
        sendQAReviewFollowUpEmail(reviewData);
      }
    }
    
    return { 
      success: true, 
      message: 'QA review saved successfully',
      id: reviewData.id
    };
  } catch (error) {
    console.error('Error in saveQAReview:', error);
    return { 
      success: false, 
      message: `Failed to save QA review: ${error.message}`
    };
  }
}

/**
 * Get QA reviews with optional filtering
 * @param {Object} filters - Optional filters
 * @param {string} filters.teamMemberEmail - Filter by team member email
 * @param {string} filters.reviewerEmail - Filter by reviewer email
 * @param {string} filters.status - Filter by status
 * @param {Date} filters.startDate - Filter by date range (start)
 * @param {Date} filters.endDate - Filter by date range (end)
 * @param {number} filters.minScore - Filter by minimum score percentage
 * @param {number} filters.maxScore - Filter by maximum score percentage
 * @param {number} limit - Maximum number of reviews to return
 * @param {string} sortBy - Column to sort by
 * @param {boolean} sortDesc - Sort in descending order
 * @return {Object} Result with reviews data
 */
function getQAReviews(filters = {}, limit = 50, sortBy = 'reviewDate', sortDesc = true) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.qaReviews);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.qaReviews}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const reviewerCol = headers.indexOf('reviewerEmail');
    const reviewDateCol = headers.indexOf('reviewDate');
    const statusCol = headers.indexOf('status');
    const scoreCol = headers.indexOf('scorePercentage');
    
    // Verify required columns exist
    if (idCol === -1 || teamMemberCol === -1 || reviewDateCol === -1) {
      throw new Error('Required columns not found in QAReviews sheet');
    }
    
    // Filter reviews based on provided filters
    let reviews = data.slice(1)
      .filter(row => {
        // Skip empty rows
        if (row.every(cell => !cell)) return false;
        
        // Apply team member filter
        if (filters.teamMemberEmail && teamMemberCol !== -1 && 
            row[teamMemberCol] !== filters.teamMemberEmail) {
          return false;
        }
        
        // Apply reviewer filter
        if (filters.reviewerEmail && reviewerCol !== -1 && 
            row[reviewerCol] !== filters.reviewerEmail) {
          return false;
        }
        
        // Apply status filter
        if (filters.status && statusCol !== -1 && 
            row[statusCol] !== filters.status) {
          return false;
        }
        
        // Apply date range filter
        if (reviewDateCol !== -1 && row[reviewDateCol]) {
          const reviewDate = new Date(row[reviewDateCol]);
          
          if (filters.startDate && reviewDate < new Date(filters.startDate)) {
            return false;
          }
          
          if (filters.endDate && reviewDate > new Date(filters.endDate)) {
            return false;
          }
        }
        
        // Apply score range filter
        if (scoreCol !== -1 && row[scoreCol]) {
          const score = parseFloat(row[scoreCol]);
          
          if (!isNaN(score)) {
            if (filters.minScore && score < filters.minScore) {
              return false;
            }
            
            if (filters.maxScore && score > filters.maxScore) {
              return false;
            }
          }
        }
        
        return true;
      })
      .map(row => {
        const review = {};
        headers.forEach((header, index) => {
          review[header] = row[index];
        });
        return review;
      });
    
    // Sort reviews
    const sortColIndex = headers.indexOf(sortBy);
    if (sortColIndex !== -1) {
      reviews.sort((a, b) => {
        const valueA = a[sortBy];
        const valueB = b[sortBy];
        
        // Handle dates
        if (valueA instanceof Date && valueB instanceof Date) {
          return sortDesc ? valueB - valueA : valueA - valueB;
        }
        
        // Handle strings
        if (typeof valueA === 'string' && typeof valueB === 'string') {
          return sortDesc ? 
            valueB.localeCompare(valueA) : 
            valueA.localeCompare(valueB);
        }
        
        // Handle numbers
        return sortDesc ? valueB - valueA : valueA - valueB;
      });
    }
    
    // Apply limit
    if (limit > 0 && reviews.length > limit) {
      reviews = reviews.slice(0, limit);
    }
    
    // Get team member names for reviews
    for (const review of reviews) {
      if (review.teamMemberEmail) {
        try {
          const teamMember = getTeamMemberByEmail(review.teamMemberEmail);
          if (teamMember && teamMember.Name) {
            review.teamMemberName = teamMember.Name;
          }
        } catch (error) {
          console.warn(`Couldn't get team member name for ${review.teamMemberEmail}:`, error);
        }
      }
    }
    
    return {
      success: true,
      data: reviews,
      total: reviews.length
    };
  } catch (error) {
    console.error('Error in getQAReviews:', error);
    return {
      success: false,
      message: `Failed to get QA reviews: ${error.message}`
    };
  }
}

/**
 * Send QA review follow-up email
 * @param {Object} reviewData - QA review data
 * @return {Object} Result with success flag and message
 */
function sendQAReviewFollowUpEmail(reviewData) {
  try {
    const teamMemberEmail = reviewData.teamMemberEmail;
    if (!teamMemberEmail) {
      throw new Error('Team member email is required');
    }
    
    // Get team member name
    let teamMemberName = '';
    try {
      const teamMember = getTeamMemberByEmail(teamMemberEmail);
      if (teamMember) {
        teamMemberName = teamMember.Name;
      }
    } catch (error) {
      console.warn(`Couldn't get team member name for ${teamMemberEmail}:`, error);
    }
    
    // Generate email content
    let emailSubject = reviewData.emailSubject || `QA Review Feedback (${formatDate(reviewData.reviewDate)})`;
    let emailBody = '';
    
    try {
      const emailTemplate = HtmlService.createTemplateFromFile('html/email/qa-review-follow-up');
      
      // Pass review data to the template
      for (const key in reviewData) {
        if (reviewData.hasOwnProperty(key)) {
          emailTemplate[key] = reviewData[key];
        }
      }
      
      // Add formatted dates
      if (reviewData.reviewDate) {
        const reviewDate = new Date(reviewData.reviewDate);
        emailTemplate.formattedReviewDate = formatDate(reviewDate, 'MMMM d, yyyy');
      }
      
      if (reviewData.interactionDate) {
        const interactionDate = new Date(reviewData.interactionDate);
        emailTemplate.formattedInteractionDate = formatDate(interactionDate, 'MMMM d, yyyy');
      }
      
      // Add team member name
      emailTemplate.teamMemberName = teamMemberName;
      
      // Prepare action items
      const actionItems = [];
      if (reviewData.actionItem1) {
        actionItems.push(reviewData.actionItem1);
      }
      if (reviewData.actionItem2) {
        actionItems.push(reviewData.actionItem2);
      }
      if (reviewData.actionItem3) {
        actionItems.push(reviewData.actionItem3);
      }
      
      // Add additional action items if they exist
      if (reviewData.additionalActionItems) {
        try {
          const additionalItems = typeof reviewData.additionalActionItems === 'string' 
            ? JSON.parse(reviewData.additionalActionItems) 
            : reviewData.additionalActionItems;
          
          if (Array.isArray(additionalItems)) {
            additionalItems.forEach(item => {
              if (item && item.description) {
                actionItems.push(item.description);
              }
            });
          }
        } catch (parseError) {
          console.warn('Error parsing additional action items:', parseError);
        }
      }
      
      // Pass action items to template
      emailTemplate.actionItems = actionItems;
      
      emailBody = emailTemplate.evaluate().getContent();
    } catch (templateError) {
      console.error('Error generating email from template:', templateError);
      
      // Simple fallback email
      emailBody = `
        <html>
          <body>
            <h2>QA Review Feedback</h2>
            <p>Hello ${teamMemberName || 'there'},</p>
            <p>Here is your feedback from the recent quality assessment review:</p>
            
            <h3>Interaction Details:</h3>
            <p>Interaction ID: ${reviewData.interactionId || 'N/A'}</p>
            <p>Interaction Date: ${reviewData.interactionDate ? formatDate(new Date(reviewData.interactionDate)) : 'N/A'}</p>
            
            <h3>Overall Score:</h3>
            <p>${reviewData.scorePercentage || '0'}%</p>
            
            <h3>Strengths:</h3>
            <p>${reviewData.strengths || 'N/A'}</p>
            
            <h3>Areas for Improvement:</h3>
            <p>${reviewData.improvements || 'N/A'}</p>
            
            <h3>Action Items:</h3>
            <ul>
              ${reviewData.actionItem1 ? `<li>${reviewData.actionItem1}</li>` : ''}
              ${reviewData.actionItem2 ? `<li>${reviewData.actionItem2}</li>` : ''}
              ${reviewData.actionItem3 ? `<li>${reviewData.actionItem3}</li>` : ''}
            </ul>
            
            <h3>Overall Feedback:</h3>
            <p>${reviewData.overallFeedback || 'N/A'}</p>
            
            <p>If you have any questions about this review, please don't hesitate to reach out.</p>
            
            <p>Best regards,<br>${reviewData.reviewerEmail || Session.getActiveUser().getEmail()}</p>
          </body>
        </html>
      `;
    }
    
    // Send the email
    GmailApp.sendEmail(
      teamMemberEmail,
      emailSubject,
      // Plain text version
      stripHtml(emailBody),
      {
        htmlBody: emailBody,
        name: Session.getActiveUser().getUsername(),
        replyTo: reviewData.reviewerEmail || Session.getActiveUser().getEmail()
      }
    );
    
    return {
      success: true,
      message: `QA review follow-up email sent to ${teamMemberEmail}`
    };
  } catch (error) {
    console.error('Error in sendQAReviewFollowUpEmail:', error);
    return {
      success: false,
      message: `Failed to send QA review follow-up email: ${error.message}`
    };
  }
}

/**
 * Preview QA review follow-up email
 * @param {Object} reviewData - QA review data
 * @return {string} HTML email preview
 */
function previewQAReviewFollowUpEmail(reviewData) {
  try {
    // Get team member name
    let teamMemberName = '';
    if (reviewData.teamMemberEmail) {
      try {
        const teamMember = getTeamMemberByEmail(reviewData.teamMemberEmail);
        if (teamMember) {
          teamMemberName = teamMember.Name;
        }
      } catch (error) {
        console.warn(`Couldn't get team member name:`, error);
      }
    }
    
    // Generate email content
    const emailTemplate = HtmlService.createTemplateFromFile('html/email/qa-review-follow-up');
    
    // Pass review data to the template
    for (const key in reviewData) {
      if (reviewData.hasOwnProperty(key)) {
        emailTemplate[key] = reviewData[key];
      }
    }
    
    // Add formatted dates
    if (reviewData.reviewDate) {
      const reviewDate = new Date(reviewData.reviewDate);
      emailTemplate.formattedReviewDate = formatDate(reviewDate, 'MMMM d, yyyy');
    }
    
    if (reviewData.interactionDate) {
      const interactionDate = new Date(reviewData.interactionDate);
      emailTemplate.formattedInteractionDate = formatDate(interactionDate, 'MMMM d, yyyy');
    }
    
    // Add team member name
    emailTemplate.teamMemberName = teamMemberName;
    
    // Prepare action items
    const actionItems = [];
    if (reviewData.actionItem1) {
      actionItems.push(reviewData.actionItem1);
    }
    if (reviewData.actionItem2) {
      actionItems.push(reviewData.actionItem2);
    }
    if (reviewData.actionItem3) {
      actionItems.push(reviewData.actionItem3);
    }
    
    // Add additional action items if they exist
    if (reviewData.additionalActionItems) {
      try {
        const additionalItems = typeof reviewData.additionalActionItems === 'string' 
          ? JSON.parse(reviewData.additionalActionItems) 
          : reviewData.additionalActionItems;
        
        if (Array.isArray(additionalItems)) {
          additionalItems.forEach(item => {
            if (item && item.description) {
              actionItems.push(item.description);
            }
          });
        }
      } catch (parseError) {
        console.warn('Error parsing additional action items:', parseError);
      }
    }
    
    // Pass action items to template
    emailTemplate.actionItems = actionItems;
    
    return emailTemplate.evaluate().getContent();
  } catch (error) {
    console.error('Error in previewQAReviewFollowUpEmail:', error);
    return `<div style="color: red; padding: 20px; border: 1px solid red;">
      <h3>Error Generating Email Preview</h3>
      <p>${error.message}</p>
    </div>`;
  }
}

/**
 * Get recent QA reviews
 * @param {number} limit - Maximum number of reviews to return
 * @return {Array} Recent QA reviews
 */
function getRecentQAReviews(limit = 5) {
  try {
    // Get reviews sorted by review date (most recent first)
    const result = getQAReviews({}, limit, 'reviewDate', true);
    
    return result.success ? result.data : [];
  } catch (error) {
    console.error('Error in getRecentQAReviews:', error);
    return [];
  }
}

/**
 * Get QA summary statistics
 * @return {Object} QA statistics
 */
function getQASummaryStatistics() {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.qaReviews);
    if (!sheet) {
      return { totalReviews: 0 };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const scoreCol = headers.indexOf('scorePercentage');
    const statusCol = headers.indexOf('status');
    
    // Skip if required columns don't exist
    if (scoreCol === -1) {
      return { totalReviews: 0 };
    }
    
    let totalScore = 0;
    let scoreCount = 0;
    let excellentCount = 0;
    let goodCount = 0;
    let needsImprovementCount = 0;
    let totalReviews = 0;
    
    // Skip header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      // Count only completed reviews if status column exists
      if (statusCol !== -1 && row[statusCol] !== 'completed') continue;
      
      totalReviews++;
      
      // Calculate score statistics
      if (row[scoreCol] !== undefined && row[scoreCol] !== '') {
        const score = parseFloat(row[scoreCol]);
        if (!isNaN(score)) {
          totalScore += score;
          scoreCount++;
          
          // Count by score category
          if (score >= 90) {
            excellentCount++;
          } else if (score >= 75) {
            goodCount++;
          } else {
            needsImprovementCount++;
          }
        }
      }
    }
    
    const averageScore = scoreCount > 0 ? Math.round(totalScore / scoreCount) : 0;
    const excellentPercentage = totalReviews > 0 ? Math.round((excellentCount / totalReviews) * 100) : 0;
    const goodPercentage = totalReviews > 0 ? Math.round((goodCount / totalReviews) * 100) : 0;
    const needsImprovementPercentage = totalReviews > 0 ? Math.round((needsImprovementCount / totalReviews) * 100) : 0;
    
    return {
      totalReviews: totalReviews,
      averageScore: averageScore,
      excellentCount: excellentCount,
      goodCount: goodCount,
      needsImprovementCount: needsImprovementCount,
      excellentPercentage: excellentPercentage,
      goodPercentage: goodPercentage,
      needsImprovementPercentage: needsImprovementPercentage
    };
  } catch (error) {
    console.error('Error in getQASummaryStatistics:', error);
    return { 
      totalReviews: 0, 
      error: error.message 
    };
  }
}

/**
 * Get QA analytics data
 * @param {Object} filters - Optional filters for date ranges
 * @return {Object} Analytics data
 */
function getQAAnalytics(filters = {}) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.qaReviews);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.qaReviews}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const reviewDateCol = headers.indexOf('reviewDate');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const scoreCol = headers.indexOf('scorePercentage');
    const statusCol = headers.indexOf('status');
    
    if (reviewDateCol === -1 || teamMemberCol === -1 || scoreCol === -1) {
      throw new Error('Required columns not found in QAReviews sheet');
    }
    
    // Define date range
    let startDate = null;
    let endDate = new Date();
    
    if (filters.startDate) {
      startDate = new Date(filters.startDate);
    } else {
      // Default to 90 days ago
      startDate = new Date(endDate);
      startDate.setDate(startDate.getDate() - 90);
    }
    
    if (filters.endDate) {
      endDate = new Date(filters.endDate);
    }
    
    // Initialize analytics data
    const analytics = {
      scoresOverTime: {},
      scoresByTeamMember: {},
      scoreDistribution: {
        excellent: 0,
        good: 0,
        needsImprovement: 0
      },
      criteriaPerformance: {},
      totalReviews: 0,
      averageScore: 0
    };
    
    // Extract criteria columns for performance analysis
    const criteriaColumns = [
      'answeredPromptly', 'openingMessage', 'sassScreener', 'empathyRapport', 'activeListening', 
      'inclusiveLanguage', 'emotionalResponse', 'appropriateResources', 'copingStrategies', 
      'summarizedKeyPoints', 'closureProcess'
    ];
    
    const criteriaIndices = {};
    criteriaColumns.forEach(criterion => {
      const index = headers.indexOf(criterion);
      if (index !== -1) {
        criteriaIndices[criterion] = index;
        analytics.criteriaPerformance[criterion] = {
          total: 0,
          count: 0,
          average: 0
        };
      }
    });
    
    let totalScore = 0;
    let scoreCount = 0;
    
    // Skip header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      const reviewDate = new Date(row[reviewDateCol]);
      
      // Apply date range filter
      if (reviewDate < startDate || reviewDate > endDate) {
        continue;
      }
      
      // Count only completed reviews if status column exists
      if (statusCol !== -1 && row[statusCol] !== 'completed') {
        continue;
      }
      
      analytics.totalReviews++;
      
      const teamMemberEmail = row[teamMemberCol];
      const score = parseFloat(row[scoreCol]);
      
      if (!isNaN(score)) {
        // Add to total score
        totalScore += score;
        scoreCount++;
        
        // Group by month
        const yearMonth = formatDate(reviewDate, 'yyyy-MM');
        if (!analytics.scoresOverTime[yearMonth]) {
          analytics.scoresOverTime[yearMonth] = {
            total: 0,
            count: 0,
            average: 0
          };
        }
        analytics.scoresOverTime[yearMonth].total += score;
        analytics.scoresOverTime[yearMonth].count++;
        
        // Count by team member
        if (!analytics.scoresByTeamMember[teamMemberEmail]) {
          analytics.scoresByTeamMember[teamMemberEmail] = {
            total: 0,
            count: 0,
            average: 0
          };
        }
        analytics.scoresByTeamMember[teamMemberEmail].total += score;
        analytics.scoresByTeamMember[teamMemberEmail].count++;
        
        // Score distribution
        if (score >= 90) {
          analytics.scoreDistribution.excellent++;
        } else if (score >= 75) {
          analytics.scoreDistribution.good++;
        } else {
          analytics.scoreDistribution.needsImprovement++;
        }
      }
      
      // Criteria performance
      for (const criterion in criteriaIndices) {
        const index = criteriaIndices[criterion];
        const value = row[index];
        if (value !== undefined && value !== '' && !isNaN(parseInt(value))) {
          analytics.criteriaPerformance[criterion].total += parseInt(value);
          analytics.criteriaPerformance[criterion].count++;
        }
      }
    }
    
    // Calculate averages
    analytics.averageScore = scoreCount > 0 ? Math.round(totalScore / scoreCount) : 0;
    
    // Calculate averages for scores over time
    for (const yearMonth in analytics.scoresOverTime) {
      const data = analytics.scoresOverTime[yearMonth];
      data.average = data.count > 0 ? Math.round(data.total / data.count) : 0;
    }
    
    // Calculate averages for team members
    for (const email in analytics.scoresByTeamMember) {
      const data = analytics.scoresByTeamMember[email];
      data.average = data.count > 0 ? Math.round(data.total / data.count) : 0;
      
      // Add team member name
      try {
        const teamMember = getTeamMemberByEmail(email);
        if (teamMember) {
          analytics.scoresByTeamMember[email].name = teamMember.Name;
        }
      } catch (error) {
        console.warn(`Couldn't get team member name for ${email}:`, error);
      }
    }
    
    // Calculate averages for criteria performance
    for (const criterion in analytics.criteriaPerformance) {
      const data = analytics.criteriaPerformance[criterion];
      data.average = data.count > 0 ? Math.round((data.total / data.count) * 10) / 10 : 0;
    }
    
    // Convert objects to arrays for easier processing in UI
    analytics.scoresOverTimeArray = Object.entries(analytics.scoresOverTime)
      .map(([yearMonth, data]) => ({
        yearMonth: yearMonth,
        average: data.average,
        count: data.count
      }))
      .sort((a, b) => a.yearMonth.localeCompare(b.yearMonth));
    
    analytics.teamMembersArray = Object.entries(analytics.scoresByTeamMember)
      .map(([email, data]) => ({
        email: email,
        name: data.name || email,
        average: data.average,
        count: data.count
      }))
      .sort((a, b) => b.average - a.average); // Sort by highest score first
    
    analytics.criteriaPerformanceArray = Object.entries(analytics.criteriaPerformance)
      .map(([criterion, data]) => ({
        criterion: criterion,
        average: data.average,
        count: data.count
      }))
      .sort((a, b) => b.average - a.average); // Sort by highest score first
    
    return {
      success: true,
      data: analytics
    };
  } catch (error) {
    console.error('Error in getQAAnalytics:', error);
    return {
      success: false,
      message: `Failed to get QA analytics: ${error.message}`
    };
  }
}

/**
 * Get QA template with default scoring
 * @return {Object} QA review template
 */
function getQAReviewTemplate() {
  return {
    interactionDate: new Date(),
    interactionId: '',
    reviewDate: new Date(),
    status: 'in_progress',
    
    // Criteria scores (0-5 points each)
    answeredPromptly: 5,
    openingMessage: 5,
    sassScreener: 5,
    empathyRapport: 5,
    activeListening: 5,
    inclusiveLanguage: 5,
    emotionalResponse: 5,
    appropriateResources: 5,
    copingStrategies: 5,
    summarizedKeyPoints: 5,
    closureProcess: 5,
    
    // Feedback sections
    overallFeedback: '',
    strengths: '',
    improvements: '',
    
    // Action items
    actionItem1: '',
    actionItem2: '',
    actionItem3: '',
    additionalActionItems: [],
    
    // Detailed notes for each criterion
    answeredNotes: '',
    openingNotes: '',
    sassNotes: '',
    empathyNotes: '',
    listeningNotes: '',
    inclusiveNotes: '',
    emotionalNotes: '',
    resourcesNotes: '',
    copingNotes: '',
    summaryNotes: '',
    closureNotes: '',
    
    // Calculated fields (set by the system)
    totalPoints: 55, // Default is all 5s
    possiblePoints: 55, // 11 criteria × 5 points each
    scorePercentage: 100 // Default perfect score
  };
}

/**
 * Calculate QA review scores based on criteria
 * @param {Object} reviewData - QA review data
 * @return {Object} Updated review data with calculated scores
 */
function calculateQAReviewScores(reviewData) {
  // List of criteria fields to include in scoring
  const criteriaFields = [
    'answeredPromptly', 'openingMessage', 'sassScreener', 'empathyRapport', 'activeListening', 
    'inclusiveLanguage', 'emotionalResponse', 'appropriateResources', 'copingStrategies', 
    'summarizedKeyPoints', 'closureProcess'
  ];
  
  let totalPoints = 0;
  let possiblePoints = 0;
  
  // Calculate total points from criteria
  criteriaFields.forEach(field => {
    if (reviewData[field] !== undefined && !isNaN(parseInt(reviewData[field]))) {
      const points = parseInt(reviewData[field]);
      totalPoints += points;
      possiblePoints += 5; // Each criterion has a max of 5 points
    }
  });
  
  // Calculate percentage score
  const scorePercentage = possiblePoints > 0 ? Math.round((totalPoints / possiblePoints) * 100) : 0;
  
  // Update review data with calculated values
  return {
    ...reviewData,
    totalPoints: totalPoints,
    possiblePoints: possiblePoints,
    scorePercentage: scorePercentage
  };
}

/**
 * Export QA reviews to CSV format
 * @param {Object} filters - Optional filters for the export
 * @return {Object} Result with CSV content
 */
function exportQAReviewsToCSV(filters = {}) {
  try {
    // Get QA reviews with filters
    const result = getQAReviews(filters, 1000); // Export up to 1000 reviews
    
    if (!result.success) {
      throw new Error(result.message || 'Failed to get QA reviews');
    }
    
    const reviews = result.data;
    
    if (!reviews || reviews.length === 0) {
      return {
        success: true,
        data: 'No reviews found matching the filter criteria',
        contentType: 'text/plain'
      };
    }
    
    // Define CSV headers
    const csvHeaders = [
      'Review ID',
      'Team Member',
      'Email',
      'Interaction ID',
      'Interaction Date',
      'Review Date',
      'Score (%)',
      'Total Points',
      'Status',
      'Reviewer',
      'Prompt Answer',
      'Opening',
      'SASS Screener',
      'Empathy',
      'Active Listening',
      'Inclusive Language',
      'Emotional Support',
      'Resources',
      'Coping Strategies',
      'Key Points',
      'Closure',
      'Strengths',
      'Areas for Improvement',
      'Action Items'
    ];
    
    // Start with the headers
    let csvContent = csvHeaders.join(',') + '\n';
    
    // Add rows for each review
    reviews.forEach(review => {
      // Format action items
      let actionItems = '';
      if (review.actionItem1) actionItems += review.actionItem1 + '; ';
      if (review.actionItem2) actionItems += review.actionItem2 + '; ';
      if (review.actionItem3) actionItems += review.actionItem3 + '; ';
      actionItems = actionItems.trim();
      if (actionItems.endsWith(';')) actionItems = actionItems.slice(0, -1);
      
      const rowData = [
        `"${review.id || ''}"`,
        `"${review.teamMemberName || ''}"`,
        `"${review.teamMemberEmail || ''}"`,
        `"${review.interactionId || ''}"`,
        `"${review.interactionDate ? formatDate(new Date(review.interactionDate)) : ''}"`,
        `"${review.reviewDate ? formatDate(new Date(review.reviewDate)) : ''}"`,
        `"${review.scorePercentage || '0'}"`,
        `"${review.totalPoints || '0'}"`,
        `"${review.status || ''}"`,
        `"${review.reviewerEmail || ''}"`,
        `"${review.answeredPromptly || '0'}"`,
        `"${review.openingMessage || '0'}"`,
        `"${review.sassScreener || '0'}"`,
        `"${review.empathyRapport || '0'}"`,
        `"${review.activeListening || '0'}"`,
        `"${review.inclusiveLanguage || '0'}"`,
        `"${review.emotionalResponse || '0'}"`,
        `"${review.appropriateResources || '0'}"`,
        `"${review.copingStrategies || '0'}"`,
        `"${review.summarizedKeyPoints || '0'}"`,
        `"${review.closureProcess || '0'}"`,
        `"${(review.strengths || '').replace(/"/g, '""')}"`,
        `"${(review.improvements || '').replace(/"/g, '""')}"`,
        `"${actionItems.replace(/"/g, '""')}"`
      ];
      
      csvContent += rowData.join(',') + '\n';
    });
    
    return {
      success: true,
      data: csvContent,
      contentType: 'text/csv',
      filename: `qa-reviews-export-${formatDate(new Date())}.csv`
    };
  } catch (error) {
    console.error('Error in exportQAReviewsToCSV:', error);
    return {
      success: false,
      message: `Failed to export QA reviews: ${error.message}`
    };
  }
}
/**
 * Save QA review
 * @param {Object} reviewData - QA review data
 * @return {Object} Result with success flag, message, and review ID
 */
function saveQAReview(reviewData) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.qaReviews);
    if (!sheet) {
      // Create the sheet if it doesn't exist with all fields from the template
      createSheetIfNotExists(CONFIG.sheetNames.qaReviews, [
        'id', 'teamMemberEmail', 'teamMemberName', 'interactionDate', 'interactionId',
        'answeredInteractionRating', 'answeredInteractionNotes',
        'openingMessageRating', 'openingMessageNotes',
        'sassScreenerRating', 'sassScreenerNotes',
        'nonJudgmentalEmpathyRating', 'nonJudgmentalEmpathyNotes',
        'activeListeningRating', 'activeListeningNotes',
        'inclusiveLanguageRating', 'inclusiveLanguageNotes',
        'emotionalResponseRating', 'emotionalResponseNotes',
        'resourcesRating', 'resourcesNotes',
        'copingStrategiesRating', 'copingStrategiesNotes',
        'summarizedPointsRating', 'summarizedPointsNotes',
        'completedClosureRating', 'completedClosureNotes',
        'overallFeedback', 'totalPoints', 'possiblePoints', 'percentageScore',
        'qualityStatus', 'followUpActions', 'reviewerName', 'reviewDate', 'lastModified'
      ]);
    }
    
    // Generate ID if not provided
    if (!reviewData.id) {
      reviewData.id = generateUniqueId();
    }
    
    // Set last modified date
    reviewData.lastModified = new Date();
    
    // Calculate scores if not provided
    if (reviewData.totalPoints === undefined || reviewData.possiblePoints === undefined || reviewData.percentageScore === undefined) {
      const scoreData = calculateQAScore(reviewData);
      reviewData.totalPoints = scoreData.totalPoints;
      reviewData.possiblePoints = scoreData.possiblePoints;
      reviewData.percentageScore = scoreData.percentageScore;
    }
    
    // Set quality status based on percentage
    if (reviewData.percentageScore !== undefined) {
      if (reviewData.percentageScore >= 90) {
        reviewData.qualityStatus = 'Excellent';
      } else if (reviewData.percentageScore >= 75) {
        reviewData.qualityStatus = 'Good';
      } else {
        reviewData.qualityStatus = 'Needs Improvement';
      }
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    if (idCol === -1) {
      throw new Error('ID column not found in QAReviews sheet');
    }
    
    // Create a row with values in the same order as headers
    const rowData = headers.map(header => {
      const value = reviewData[header] !== undefined ? reviewData[header] : '';
      
      // Format dates if the value is a date object and the header contains 'date' (case insensitive)
      if (value instanceof Date && header.toLowerCase().includes('date')) {
        return formatDate(value);
      }
      
      return value;
    });
    
    let rowIndex = -1;
    
    // Find existing review if ID exists
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === reviewData.id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    // Update or append row
    if (rowIndex !== -1) {
      sheet.getRange(rowIndex, 1, 1, rowData.length).setValues([rowData]);
    } else {
      sheet.appendRow(rowData);
    }
    
    return { 
      success: true, 
      message: 'QA review saved successfully',
      id: reviewData.id
    };
  } catch (error) {
    console.error('Error in saveQAReview:', error);
    return { 
      success: false, 
      message: `Failed to save QA review: ${error.message}`
    };
  }
}

/**
 * Calculate QA score
 * @param {Object} reviewData - QA review data
 * @return {Object} Result with total points, possible points, and percentage score
 */
function calculateQAScore(reviewData) {
  // Define rating criteria
  const ratingFields = [
    'answeredInteractionRating',
    'openingMessageRating',
    'sassScreenerRating',
    'nonJudgmentalEmpathyRating',
    'activeListeningRating',
    'inclusiveLanguageRating',
    'emotionalResponseRating',
    'resourcesRating',
    'copingStrategiesRating',
    'summarizedPointsRating',
    'completedClosureRating'
  ];
  
  // Calculate scores
  let totalPoints = 0;
  let possiblePoints = 0;
  
  ratingFields.forEach(field => {
    const rating = reviewData[field];
    if (rating !== undefined && rating !== 'N/A') {
      // Convert rating to points
      if (rating === 'Fully Met' || rating === 2) {
        totalPoints += 2;
        possiblePoints += 2;
      } else if (rating === 'Partially Met' || rating === 1) {
        totalPoints += 1;
        possiblePoints += 2;
      } else if (rating === 'Not Met' || rating === 0) {
        totalPoints += 0;
        possiblePoints += 2;
      }
    }
  });
  
  // Calculate percentage
  const percentageScore = possiblePoints > 0 ? Math.round((totalPoints / possiblePoints) * 100) : 0;
  
  return {
    totalPoints: totalPoints,
    possiblePoints: possiblePoints,
    percentageScore: percentageScore
  };
}

/**
 * Get QA reviews with optional filtering
 * @param {Object} filters - Optional filters
 * @param {string} filters.teamMemberEmail - Filter by team member email
 * @param {string} filters.qualityStatus - Filter by quality status
 * @param {Date} filters.startDate - Filter by date range (start)
 * @param {Date} filters.endDate - Filter by date range (end)
 * @param {number} limit - Maximum number of reviews to return
 * @param {string} sortBy - Column to sort by
 * @param {boolean} sortDesc - Sort in descending order
 * @return {Object} Result with reviews data
 */
function getQAReviews(filters = {}, limit = 50, sortBy = 'reviewDate', sortDesc = true) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.qaReviews);
    if (!sheet) {
      return {
        success: true,
        data: [],
        total: 0
      };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const reviewDateCol = headers.indexOf('reviewDate');
    const qualityStatusCol = headers.indexOf('qualityStatus');
    
    // Verify required columns exist
    if (idCol === -1) {
      throw new Error('ID column not found in QAReviews sheet');
    }
    
    // Filter reviews based on provided filters
    let reviews = data.slice(1)
      .filter(row => {
        // Skip empty rows
        if (row.every(cell => !cell)) return false;
        
        // Apply team member filter
        if (filters.teamMemberEmail && teamMemberCol !== -1 && 
            row[teamMemberCol] !== filters.teamMemberEmail) {
          return false;
        }
        
        // Apply quality status filter
        if (filters.qualityStatus && qualityStatusCol !== -1 && 
            row[qualityStatusCol] !== filters.qualityStatus) {
          return false;
        }
        
        // Apply date range filter
        if (reviewDateCol !== -1 && row[reviewDateCol]) {
          const reviewDate = new Date(row[reviewDateCol]);
          
          if (filters.startDate && reviewDate < new Date(filters.startDate)) {
            return false;
          }
          
          if (filters.endDate && reviewDate > new Date(filters.endDate)) {
            return false;
          }
        }
        
        return true;
      })
      .map(row => {
        const review = {};
        headers.forEach((header, index) => {
          review[header] = row[index];
        });
        return review;
      });
    
    // Sort reviews
    const sortColIndex = headers.indexOf(sortBy);
    if (sortColIndex !== -1) {
      reviews.sort((a, b) => {
        const valueA = a[sortBy];
        const valueB = b[sortBy];
        
        // Handle dates
        if (valueA instanceof Date && valueB instanceof Date) {
          return sortDesc ? valueB - valueA : valueA - valueB;
        }
        
        // Handle strings
        if (typeof valueA === 'string' && typeof valueB === 'string') {
          return sortDesc ? 
            valueB.localeCompare(valueA) : 
            valueA.localeCompare(valueB);
        }
        
        // Handle numbers
        return sortDesc ? valueB - valueA : valueA - valueB;
      });
    }
    
    // Apply limit
    if (limit > 0 && reviews.length > limit) {
      reviews = reviews.slice(0, limit);
    }
    
    return {
      success: true,
      data: reviews,
      total: reviews.length
    };
  } catch (error) {
    console.error('Error in getQAReviews:', error);
    return {
      success: false,
      message: `Failed to get QA reviews: ${error.message}`
    };
  }
}

/**
 * Delete QA review
 * @param {string} id - Review ID
 * @return {Object} Result with success flag and message
 */
function deleteQAReview(id) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.qaReviews);
    if (!sheet) {
      throw new Error(`Sheet "${CONFIG.sheetNames.qaReviews}" not found`);
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const idCol = headers.indexOf('id');
    
    if (idCol === -1) {
      throw new Error('ID column not found in QAReviews sheet');
    }
    
    // Find the row with matching ID
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idCol] === id) {
        rowIndex = i + 1; // +1 because sheet rows are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      throw new Error(`QA review with ID ${id} not found`);
    }
    
    // Delete the row
    sheet.deleteRow(rowIndex);
    
    return {
      success: true,
      message: 'QA review deleted successfully'
    };
  } catch (error) {
    console.error('Error in deleteQAReview:', error);
    return {
      success: false,
      message: `Failed to delete QA review: ${error.message}`
    };
  }
}

/**
 * Get QA review template
 * @return {Object} Template data for QA review
 */
function getQAReviewTemplate() {
  return {
    // Counselor Information
    teamMemberName: '',
    teamMemberEmail: '',
    interactionDate: new Date(),
    interactionId: '',
    
    // Call Opening
    answeredInteractionRating: '',
    answeredInteractionNotes: '',
    openingMessageRating: '',
    openingMessageNotes: '',
    
    // Risk Assessment
    sassScreenerRating: '',
    sassScreenerNotes: '',
    nonJudgmentalEmpathyRating: '',
    nonJudgmentalEmpathyNotes: '',
    
    // Communication Skills
    activeListeningRating: '',
    activeListeningNotes: '',
    inclusiveLanguageRating: '',
    inclusiveLanguageNotes: '',
    emotionalResponseRating: '',
    emotionalResponseNotes: '',
    
    // Support Effectiveness
    resourcesRating: '',
    resourcesNotes: '',
    copingStrategiesRating: '',
    copingStrategiesNotes: '',
    
    // Call Closure
    summarizedPointsRating: '',
    summarizedPointsNotes: '',
    completedClosureRating: '',
    completedClosureNotes: '',
    
    // Overall Feedback
    overallFeedback: '',
    
    // Score Calculation (will be calculated on save)
    totalPoints: 0,
    possiblePoints: 0,
    percentageScore: 0,
    qualityStatus: '',
    
    // Follow-Up Actions
    followUpActions: '',
    
    // Review details
    reviewerName: '',
    reviewDate: new Date()
  };
}

/**
 * Get recent QA reviews
 * @param {number} limit - Maximum number of reviews to return
 * @return {Array} Recent QA reviews
 */
function getRecentQAReviews(limit = 5) {
  try {
    // Get QA reviews sorted by review date (most recent first)
    const result = getQAReviews({}, limit);
    
    return result.success ? result.data : [];
  } catch (error) {
    console.error('Error in getRecentQAReviews:', error);
    return [];
  }
}

/**
 * Get QA summary statistics
 * @return {Object} QA summary statistics
 */
function getQASummaryStatistics() {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(CONFIG.sheetNames.qaReviews);
    if (!sheet) {
      return { totalReviews: 0 };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const teamMemberCol = headers.indexOf('teamMemberEmail');
    const reviewDateCol = headers.indexOf('reviewDate');
    const qualityStatusCol = headers.indexOf('qualityStatus');
    const scoreCol = headers.indexOf('percentageScore');
    
    // Skip if required columns don't exist
    if (qualityStatusCol === -1 || scoreCol === -1) {
      return { totalReviews: 0 };
    }
    
    // Initialize counters
    let totalReviews = 0;
    let excellentCount = 0;
    let goodCount = 0;
    let needsImprovementCount = 0;
    let totalScore = 0;
    
    const uniqueTeamMembers = new Set();
    const reviewsByTeamMember = {};
    const reviewsByStatus = {};
    
    // Calculate thirtyDaysAgo for recent metrics
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    let recentReviews = 0;
    
    // Skip header row
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Skip empty rows
      if (row.every(cell => !cell)) continue;
      
      totalReviews++;
      
      // Track unique team members
      if (teamMemberCol !== -1 && row[teamMemberCol]) {
        const teamMember = row[teamMemberCol];
        uniqueTeamMembers.add(teamMember);
        
        // Count reviews by team member
        if (!reviewsByTeamMember[teamMember]) {
          reviewsByTeamMember[teamMember] = 0;
        }
        reviewsByTeamMember[teamMember]++;
      }
      
      // Count by quality status
      const status = row[qualityStatusCol] ? row[qualityStatusCol].toLowerCase() : '';
      if (status === 'excellent') {
        excellentCount++;
      } else if (status === 'good') {
        goodCount++;
      } else if (status === 'needs improvement') {
        needsImprovementCount++;
      }
      
      // Track reviews by status
      if (!reviewsByStatus[status]) {
        reviewsByStatus[status] = 0;
      }
      reviewsByStatus[status]++;
      
      // Sum up scores
      const score = parseFloat(row[scoreCol]);
      if (!isNaN(score)) {
        totalScore += score;
      }
      
      // Count recent reviews
      if (reviewDateCol !== -1 && row[reviewDateCol]) {
        const reviewDate = new Date(row[reviewDateCol]);
        if (reviewDate >= thirtyDaysAgo) {
          recentReviews++;
        }
      }
    }
    
    // Calculate averages and percentages
    const averageScore = totalReviews > 0 ? Math.round((totalScore / totalReviews) * 10) / 10 : 0;
    const excellentPercentage = totalReviews > 0 ? Math.round((excellentCount / totalReviews) * 100) : 0;
    const goodPercentage = totalReviews > 0 ? Math.round((goodCount / totalReviews) * 100) : 0;
    const needsImprovementPercentage = totalReviews > 0 ? Math.round((needsImprovementCount / totalReviews) * 100) : 0;
    
    // Calculate coverage
    const teamMembers = getTeamMembers();
    const activeMembers = teamMembers.filter(member => member.Status === 'Active').length;
    const coverage = activeMembers > 0 ? Math.round((uniqueTeamMembers.size / activeMembers) * 100) : 0;
    
    return {
      totalReviews: totalReviews,
      recentReviews: recentReviews,
      averageScore: averageScore,
      excellentCount: excellentCount,
      goodCount: goodCount,
      needsImprovementCount: needsImprovementCount,
      excellentPercentage: excellentPercentage,
      goodPercentage: goodPercentage,
      needsImprovementPercentage: needsImprovementPercentage,
      uniqueTeamMembers: uniqueTeamMembers.size,
      coverage: coverage
    };
  } catch (error) {
    console.error('Error in getQASummaryStatistics:', error);
    return { totalReviews: 0, error: error.message };
  }
}

/**
 * Send QA review follow-up email
 * @param {Object} reviewData - QA review data
 * @return {Object} Result with success flag and message
 */
function sendQAReviewFollowUpEmail(reviewData) {
  try {
    const teamMemberEmail = reviewData.teamMemberEmail;
    
    if (!teamMemberEmail) {
      throw new Error('Team member email is required');
    }
    
    // Generate email content
    const emailSubject = `QA Review Follow-up (${formatDate(reviewData.reviewDate)})`;
    
    const emailTemplate = HtmlService.createTemplateFromFile('html/email/qa-review-follow-up');
    
    // Pass review data to the template
    for (const key in reviewData) {
      if (reviewData.hasOwnProperty(key)) {
        emailTemplate[key] = reviewData[key];
      }
    }
    
    // Add formatted dates
    if (reviewData.reviewDate) {
      const reviewDate = new Date(reviewData.reviewDate);
      emailTemplate.formattedReviewDate = formatDate(reviewDate, 'MMMM d, yyyy');
    }
    
    if (reviewData.interactionDate) {
      const interactionDate = new Date(reviewData.interactionDate);
      emailTemplate.formattedInteractionDate = formatDate(interactionDate, 'MMMM d, yyyy');
    }
    
    const emailBody = emailTemplate.evaluate().getContent();
    
    // Send the email
    GmailApp.sendEmail(
      teamMemberEmail,
      emailSubject,
      // Plain text version
      stripHtml(emailBody),
      {
        htmlBody: emailBody,
        name: Session.getActiveUser().getUsername()
      }
    );
    
    return {
      success: true,
      message: `QA review follow-up email sent to ${teamMemberEmail}`
    };
  } catch (error) {
    console.error('Error in sendQAReviewFollowUpEmail:', error);
    return {
      success: false,
      message: `Failed to send QA review follow-up email: ${error.message}`
    };
  }
}



/**
 * UtilityService.gs
 * Provides utility functions for the application
 */

/**
 * Create a sheet if it doesn't exist
 * @param {string} sheetName - Name of the sheet to create
 * @param {Array} headers - Array of header names
 * @return {Sheet} The sheet object
 */
function createSheetIfNotExists(sheetName, headers = []) {
  const ss = SpreadsheetApp.getActive();
  let sheet = ss.getSheetByName(sheetName);
  
  if (!sheet) {
    // Create new sheet
    sheet = ss.insertSheet(sheetName);
    
    // Add headers if provided
    if (headers && headers.length > 0) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.setFrozenRows(1);
    }
  }
  
  return sheet;
}

/**
 * Generate a unique ID
 * @return {string} Unique ID
 */
function generateUniqueId() {
  return Utilities.getUuid();
}

/**
 * Format a date to string
 * @param {Date} date - Date to format
 * @param {string} format - Format string (optional)
 * @return {string} Formatted date string
 */
function formatDate(date, format = 'yyyy-MM-dd') {
  if (!date) return '';
  
  try {
    // Ensure date is a Date object
    if (typeof date === 'string') {
      date = new Date(date);
    }
    
    return Utilities.formatDate(date, Session.getScriptTimeZone(), format);
  } catch (error) {
    console.error('Error formatting date:', error);
    return '';
  }
}

/**
 * Strip HTML from a string
 * @param {string} html - HTML string
 * @return {string} Text without HTML
 */
function stripHtml(html) {
  if (!html) return '';
  
  return html
    .replace(/<[^>]*>/g, ' ') // Replace HTML tags with spaces
    .replace(/\s+/g, ' ')     // Replace multiple spaces with single space
    .trim();                  // Trim leading/trailing spaces
}

/**
 * Check if email is valid
 * @param {string} email - Email to check
 * @return {boolean} Whether the email is valid
 */
function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

/**
 * Get last day of month
 * @param {Date} date - Date in the month
 * @return {Date} Last day of the month
 */
function getLastDayOfMonth(date) {
  const nextMonth = new Date(date.getFullYear(), date.getMonth() + 1, 1);
  return new Date(nextMonth.getTime() - 24 * 60 * 60 * 1000);
}

/**
 * Convert minutes to hours and minutes format
 * @param {number} minutes - Total minutes
 * @return {string} Formatted hours and minutes
 */
function formatHoursMinutes(minutes) {
  if (isNaN(minutes) || minutes === null) return '0h 0m';
  
  const hours = Math.floor(minutes / 60);
  const mins = Math.round(minutes % 60);
  
  if (hours === 0) {
    return `${mins}m`;
  } else if (mins === 0) {
    return `${hours}h`;
  } else {
    return `${hours}h ${mins}m`;
  }
}

/**
 * Get sheet data as objects
 * @param {string} sheetName - Name of sheet
 * @param {Function} filterFn - Optional filter function
 * @return {Array} Array of objects with header keys and row values
 */
function getSheetDataAsObjects(sheetName, filterFn = null) {
  const sheet = SpreadsheetApp.getActive().getSheetByName(sheetName);
  if (!sheet) return [];
  
  const data = sheet.getDataRange().getValues();
  if (data.length < 2) return []; // No data or only headers
  
  const headers = data[0];
  const objects = data.slice(1).map(row => {
    const obj = {};
    headers.forEach((header, i) => {
      obj[header] = row[i];
    });
    return obj;
  });
  
  if (filterFn && typeof filterFn === 'function') {
    return objects.filter(filterFn);
  }
  
  return objects;
}

/**
 * Get data from a sheet by ID column
 * @param {string} sheetName - Name of the sheet
 * @param {string} id - ID to look for
 * @param {string} idColumnName - Name of ID column (default: 'id')
 * @return {Object} Object with the data, or null if not found
 */
function getSheetRowById(sheetName, id, idColumnName = 'id') {
  const data = getSheetDataAsObjects(sheetName);
  return data.find(row => row[idColumnName] === id) || null;
}

/**
 * Delete row from a sheet by ID
 * @param {string} sheetName - Name of the sheet
 * @param {string} id - ID to delete
 * @param {string} idColumnName - Name of ID column (default: 'id')
 * @return {boolean} Whether the row was deleted
 */
function deleteSheetRowById(sheetName, id, idColumnName = 'id') {
  const sheet = SpreadsheetApp.getActive().getSheetByName(sheetName);
  if (!sheet) return false;
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  const idCol = headers.indexOf(idColumnName);
  if (idCol === -1) return false;
  
  for (let i = 1; i < data.length; i++) {
    if (data[i][idCol] === id) {
      sheet.deleteRow(i + 1); // +1 because sheet rows are 1-indexed
      return true;
    }
  }
  
  return false;
}

/**
 * Convert CSV to array of objects
 * @param {string} csvData - CSV data string
 * @return {Array} Array of objects
 */
function csvToObjects(csvData) {
  try {
    // Split into lines
    const lines = csvData.split('\n');
    if (lines.length < 2) return [];
    
    // Get headers (first line)
    const headers = parseCsvLine(lines[0]);
    
    // Parse each line
    const objects = [];
    for (let i = 1; i < lines.length; i++) {
      if (lines[i].trim() === '') continue; // Skip empty lines
      
      const values = parseCsvLine(lines[i]);
      const obj = {};
      
      headers.forEach((header, j) => {
        obj[header] = values[j] || '';
      });
      
      objects.push(obj);
    }
    
    return objects;
  } catch (error) {
    console.error('Error converting CSV to objects:', error);
    return [];
  }
}

/**
 * Parse a CSV line, handling quoted values
 * @param {string} line - CSV line
 * @return {Array} Array of values
 */
function parseCsvLine(line) {
  const result = [];
  let start = 0;
  let inQuotes = false;
  
  for (let i = 0; i < line.length; i++) {
    if (line[i] === '"') {
      inQuotes = !inQuotes;
    } else if (line[i] === ',' && !inQuotes) {
      result.push(extractValue(line.substring(start, i)));
      start = i + 1;
    }
  }
  
  // Add the last value
  result.push(extractValue(line.substring(start)));
  
  return result;
}

/**
 * Extract value from CSV field, handling quotes
 * @param {string} value - CSV field value
 * @return {string} Cleaned value
 */
function extractValue(value) {
  value = value.trim();
  
  // Remove surrounding quotes and unescape internal quotes
  if (value.startsWith('"') && value.endsWith('"')) {
    value = value.substring(1, value.length - 1).replace(/""/g, '"');
  }
  
  return value;
}

/**
 * Sort array of objects by a property
 * @param {Array} array - Array to sort
 * @param {string} property - Property to sort by
 * @param {boolean} descending - Whether to sort in descending order
 * @return {Array} Sorted array
 */
function sortByProperty(array, property, descending = false) {
  return [...array].sort((a, b) => {
    if (a[property] < b[property]) return descending ? 1 : -1;
    if (a[property] > b[property]) return descending ? -1 : 1;
    return 0;
  });
}

/**
 * Group array of objects by a property
 * @param {Array} array - Array to group
 * @param {string} property - Property to group by
 * @return {Object} Grouped object
 */
function groupByProperty(array, property) {
  return array.reduce((result, item) => {
    const key = item[property];
    if (!result[key]) {
      result[key] = [];
    }
    result[key].push(item);
    return result;
  }, {});
}

/**
 * Log error with more context
 * @param {string} functionName - Name of the function
 * @param {Error} error - Error object
 * @param {Object} context - Additional context
 */
function logError(functionName, error, context = {}) {
  console.error(`Error in ${functionName}:`, error.message);
  if (context) {
    console.error('Context:', JSON.stringify(context));
  }
  console.error('Stack:', error.stack);
}

/**
 * Format percentage
 * @param {number} value - Value to format
 * @param {number} decimals - Number of decimal places
 * @return {string} Formatted percentage
 */
function formatPercentage(value, decimals = 0) {
  if (isNaN(value)) return '0%';
  return `${(Math.round(value * Math.pow(10, decimals)) / Math.pow(10, decimals)).toFixed(decimals)}%`;
}





<!DOCTYPE html>
<html>
<head>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      margin: 0;
      padding: 0;
    }
    .container {
      width: 100%;
      max-width: 650px;
      margin: 0 auto;
      padding: 20px;
    }
    .header {
      background-color: #4285f4;
      color: white;
      padding: 15px;
      border-radius: 5px 5px 0 0;
    }
    .content {
      padding: 20px;
      background-color: #f9f9f9;
      border: 1px solid #ddd;
    }
    .section {
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid #eee;
    }
    .section-title {
      color: #4285f4;
      font-weight: bold;
      margin-bottom: 10px;
    }
    .action-items {
      background-color: #fffde7;
      padding: 15px;
      border-left: 4px solid #ffd600;
      margin: 15px 0;
    }
    .footer {
      margin-top: 20px;
      font-size: 12px;
      color: #777;
    }
    h1 {
      margin: 0;
    }
    ul, ol {
      padding-left: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>One-on-One Follow-up</h1>
    </div>
    
    <div class="content">
      <p>Hello <?= teamMemberName || teamMemberEmail ?>,</p>
      
      <p>Thank you for our One-on-One session on <?= formattedDate ?>. I've summarized our discussion below:</p>
      
      <div class="section">
        <div class="section-title">Current Status Overview</div>
        <? if (workloadStatus) { ?>
        <p><strong>Workload Level:</strong> <?= workloadStatus ?></p>
        <? } ?>
        
        <? if (energyLevel) { ?>
        <p><strong>Energy/Motivation Level:</strong> <?= energyLevel ?></p>
        <? } ?>
        
        <? if (immediateBlockers) { ?>
        <p><strong>Immediate Blockers:</strong></p>
        <p><?= immediateBlockers ?></p>
        <? } ?>
      </div>
      
      <? if (quantitativeMetricsReview || qualitativeImpactAssessment) { ?>
      <div class="section">
        <div class="section-title">Performance Review</div>
        <? if (quantitativeMetricsReview) { ?>
        <p><strong>Metrics Review:</strong></p>
        <p><?= quantitativeMetricsReview ?></p>
        <? } ?>
        
        <? if (qualitativeImpactAssessment) { ?>
        <p><strong>Impact Assessment:</strong></p>
        <p><?= qualitativeImpactAssessment ?></p>
        <? } ?>
      </div>
      <? } ?>
      
      <? if (skillMasteryMapping || careerTrajectoryAlignment) { ?>
      <div class="section">
        <div class="section-title">Development Planning</div>
        <? if (skillMasteryMapping) { ?>
        <p><strong>Skill Development Areas:</strong></p>
        <p><?= skillMasteryMapping ?></p>
        <? } ?>
        
        <? if (careerTrajectoryAlignment) { ?>
        <p><strong>Career Alignment:</strong></p>
        <p><?= careerTrajectoryAlignment ?></p>
        <? } ?>
      </div>
      <? } ?>
      
      <div class="action-items">
        <div class="section-title">Action Items</div>
        <? if (actionItemsList) { ?>
        <p><?= actionItemsList ?></p>
        <? } else { ?>
        <p>No action items were recorded.</p>
        <? } ?>
      </div>
      
      <? if (leadershipSupportCalibration) { ?>
      <div class="section">
        <div class="section-title">Support Plan</div>
        <p><?= leadershipSupportCalibration ?></p>
      </div>
      <? } ?>
      
      <? if (commitmentsSynthesis) { ?>
      <div class="section">
        <div class="section-title">Commitments</div>
        <p><?= commitmentsSynthesis ?></p>
      </div>
      <? } ?>
      
      <p>Our next session is scheduled for: <?= formattedNextCheckIn ? formattedNextCheckIn : 'To be determined' ?></p>
      
      <p>If you have any questions or want to discuss anything further before our next meeting, please don't hesitate to reach out.</p>
      
      <div class="footer">
        <p>Thank you for your contributions to the team!</p>
        <p>Best regards,<br/>
        <?= Session.getActiveUser().getEmail() ?>
        </p>
      </div>
    </div>
  </div>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
    }
    
    /* Layout */
    .app-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 1.5rem;
    }
    
    /* Content Cards */
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      padding: 1.25rem;
      position: relative;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--info));
    }
    
    .card-title {
      margin: 0;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      background: var(--primary);
      color: white;
      border-radius: 8px;
      margin-right: 0.75rem;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Form Controls */
    .form-label {
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: var(--text-primary);
    }
    
    .form-control, .form-select {
      border-radius: 8px;
      padding: 0.65rem 1rem;
      border: 1px solid var(--border-color);
      background-color: var(--surface);
      transition: var(--transition);
    }
    
    .form-control:focus, .form-select:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.25rem var(--primary-light);
    }
    
    .input-group .form-control {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
    
    .input-group-text {
      border: 1px solid var(--border-color);
      background-color: var(--light);
      border-left: none;
      border-top-right-radius: 8px;
      border-bottom-right-radius: 8px;
      color: var(--text-secondary);
    }
    
    .form-hint {
      font-size: 0.8rem;
      color: var(--text-secondary);
      margin-top: 0.25rem;
    }
    
    /* Tabs */
    .nav-tabs {
      border-bottom: 1px solid var(--border-color);
    }
    
    .nav-tabs .nav-link {
      border: none;
      color: var(--text-secondary);
      padding: 1rem 1.5rem;
      font-weight: 500;
      position: relative;
      transition: var(--transition);
    }
    
    .nav-tabs .nav-link:hover {
      color: var(--primary);
      background-color: var(--primary-light);
      border-color: transparent;
    }
    
    .nav-tabs .nav-link.active {
      color: var(--primary);
      background-color: transparent;
      border-color: transparent;
    }
    
    .nav-tabs .nav-link.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      right: 0;
      height: 2px;
      background-color: var(--primary);
    }
    
    /* Team Member Selection */
    .team-member-selector {
      margin-bottom: 1.5rem;
    }
    
    .team-members-list {
      max-height: 400px;
      overflow-y: auto;
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      background-color: var(--surface);
    }
    
    .team-member-item {
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      align-items: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .team-member-item:last-child {
      border-bottom: none;
    }
    
    .team-member-item:hover {
      background-color: var(--primary-light);
    }
    
    .team-member-item.active {
      background-color: var(--primary-light);
    }
    
    .team-member-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: linear-gradient(to bottom right, var(--primary), var(--info));
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      margin-right: 1rem;
      flex-shrink: 0;
    }
    
    .team-member-info {
      flex-grow: 1;
    }
    
    .team-member-name {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .team-member-position {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    /* Metrics Form */
    .metrics-form-section {
      background: var(--surface);
      border-radius: var(--border-radius);
      padding: 1.25rem;
      margin-bottom: 1.5rem;
      border: 1px solid var(--border-color);
      transition: var(--transition);
    }
    
    .metrics-form-section:hover {
      box-shadow: var(--shadow-sm);
    }
    
    .metrics-form-title {
      font-weight: 600;
      margin-bottom: 1.25rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid var(--border-color);
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .metrics-form-icon {
      width: 28px;
      height: 28px;
      border-radius: 6px;
      background-color: var(--primary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 0.75rem;
    }
    
    .metrics-input-row {
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
    }
    
    .metrics-input-label {
      flex: 0 0 200px;
      font-weight: 500;
      color: var(--text-primary);
    }
    
    .metrics-input-field {
      flex-grow: 1;
      max-width: 200px;
    }
    
    .metrics-input-hint {
      flex: 0 0 200px;
      font-size: 0.8rem;
      color: var(--text-secondary);
      margin-left: 1rem;
    }
    
    .goal-indicator {
      margin-left: 0.5rem;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      color: white;
      font-size: 0.7rem;
    }
    
    .goal-indicator.success {
      background-color: var(--success);
    }
    
    .goal-indicator.warning {
      background-color: var(--warning);
    }
    
    /* Calculated Fields */
    .calculated-field {
      background-color: var(--light);
      border-radius: 8px;
      padding: 0.65rem 1rem;
      font-weight: 500;
      color: var(--text-primary);
    }
    
    /* Button Styles */
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.25rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      border-color: var(--secondary);
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      color: white;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s ease;
    }
    
    .spinner {
      width: 48px;
      height: 48px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      max-width: 350px;
      min-width: 300px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--shadow-md);
      padding: 1rem;
      z-index: 9998;
      transform: translateX(120%);
      transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
      border-left: 4px solid var(--primary);
      display: flex;
      align-items: flex-start;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      margin-right: 0.75rem;
      font-size: 1.25rem;
    }
    
    .notification-content {
      flex-grow: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .notification-message {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .notification-close {
      border: none;
      background: none;
      color: var(--text-secondary);
      opacity: 0.5;
      transition: var(--transition);
      padding: 0;
      margin-left: 0.75rem;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.3s ease forwards;
    }
    
    /* Responsive Adjustments */
    @media (max-width: 768px) {
      .app-container {
        padding: 1rem;
      }
      
      .card-header, .card-body {
        padding: 1rem;
      }
      
      .metrics-form-section {
        padding: 1rem;
      }
      
      .metrics-input-row {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .metrics-input-label {
        flex: 0 0 auto;
        margin-bottom: 0.5rem;
      }
      
      .metrics-input-field {
        width: 100%;
        max-width: none;
      }
      
      .metrics-input-hint {
        margin-left: 0;
        margin-top: 0.5rem;
      }
      
      .nav-tabs .nav-link {
        padding: 0.75rem;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="app-container">
    <div class="content-card fade-in">
      <div class="card-header">
        <h5 class="card-title">
          <div class="card-title-icon">
            <i class="fas fa-chart-line"></i>
          </div>
          <span id="form-title">Enter Metrics Data</span>
        </h5>
        
        <div>
          <button type="button" id="back-button" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left me-2"></i> Back
          </button>
        </div>
      </div>
      
      <div class="card-body">
        <!-- Date Selection -->
        <div class="row mb-4">
          <div class="col-md-6">
            <label for="metrics-date" class="form-label">Date</label>
            <input type="text" class="form-control" id="metrics-date" placeholder="Select date">
            <div class="form-hint">Select the date for which metrics are being entered</div>
          </div>
        </div>
        
        <!-- Metrics Entry Tabs -->
        <ul class="nav nav-tabs mb-4" id="metrics-tabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="team-tab" data-bs-toggle="tab" data-bs-target="#team-metrics" type="button" role="tab">
              <i class="fas fa-users me-2"></i> Team Metrics
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="individual-tab" data-bs-toggle="tab" data-bs-target="#individual-metrics" type="button" role="tab">
              <i class="fas fa-user me-2"></i> Individual Metrics
            </button>
          </li>
        </ul>
        
        <div class="tab-content">
          <!-- Team Metrics Tab -->
          <div class="tab-pane fade show active" id="team-metrics" role="tabpanel">
            <form id="team-metrics-form">
              <div class="metrics-form-section">
                <h6 class="metrics-form-title">
                  <span class="metrics-form-icon"><i class="fas fa-headset"></i></span>
                  Team Call Metrics
                </h6>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Calls Offered</div>
                  <div class="metrics-input-field">
                    <input type="number" class="form-control" id="team-calls-offered" min="0">
                  </div>
                  <div class="metrics-input-hint">Total number of calls offered to the team</div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Calls Accepted</div>
                  <div class="metrics-input-field">
                    <input type="number" class="form-control" id="team-calls-accepted" min="0">
                  </div>
                  <div class="metrics-input-hint">Total number of calls accepted by the team</div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Answer Rate</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="text" class="form-control" id="team-answer-rate" readonly>
                      <span class="input-group-text">%</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">
                    Goal: 95% & Higher
                    <span id="team-answer-rate-indicator" class="goal-indicator"></span>
                  </div>
                </div>
              </div>
              
              <div class="metrics-form-section">
                <h6 class="metrics-form-title">
                  <span class="metrics-form-icon"><i class="fas fa-clock"></i></span>
                  Team Time Metrics
                </h6>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Average Talk Time</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="number" class="form-control" id="team-avg-talk-time" min="0" step="0.01">
                      <span class="input-group-text">min</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">
                    Goal: between 15-20 min
                    <span id="team-talk-time-indicator" class="goal-indicator"></span>
                  </div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">ACW Percentage</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="number" class="form-control" id="team-acw-percentage" min="0" max="100" step="0.01">
                      <span class="input-group-text">%</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">
                    Goal: 5 min or less
                    <span id="team-acw-indicator" class="goal-indicator"></span>
                  </div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">On Queue Percentage</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="number" class="form-control" id="team-on-queue" min="0" max="100" step="0.01">
                      <span class="input-group-text">%</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">
                    Goal: 65% and higher
                    <span id="team-on-queue-indicator" class="goal-indicator"></span>
                  </div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Off Queue Percentage</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="number" class="form-control" id="team-off-queue" min="0" max="100" step="0.01">
                      <span class="input-group-text">%</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">Percentage of time spent off the queue</div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Interacting Time</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="number" class="form-control" id="team-interacting-time" min="0" step="0.01">
                      <span class="input-group-text">hrs</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">
                    Goal: 4-6 hrs (≥ 50%)
                    <span id="team-interacting-indicator" class="goal-indicator"></span>
                  </div>
                </div>
              </div>
              
              <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-outline-primary me-2" id="team-reset-btn">Reset</button>
                <button type="submit" class="btn btn-primary" id="team-save-btn">Save Team Metrics</button>
              </div>
            </form>
          </div>
          
          <!-- Individual Metrics Tab -->
          <div class="tab-pane fade" id="individual-metrics" role="tabpanel">
            <!-- Team Member Selection -->
            <div class="team-member-selector mb-4">
              <div class="row">
                <div class="col-md-6">
                  <label for="team-member-search" class="form-label">Select Team Member</label>
                  <input type="text" class="form-control" id="team-member-search" placeholder="Search team members...">
                </div>
              </div>
              
              <div class="team-members-list mt-3" id="team-members-list">
                <!-- Team members will be populated here -->
                <div class="text-center py-4">
                  <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                  <p class="mt-2">Loading team members...</p>
                </div>
              </div>
            </div>
            
            <!-- Individual Metrics Form -->
            <form id="individual-metrics-form" style="display: none;">
              <input type="hidden" id="selected-member-id" value="">
              
              <div class="metrics-form-section">
                <h6 class="metrics-form-title">
                  <span class="metrics-form-icon"><i class="fas fa-headset"></i></span>
                  Individual Call Metrics for <span id="selected-member-name">Team Member</span>
                </h6>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Calls Offered</div>
                  <div class="metrics-input-field">
                    <input type="number" class="form-control" id="individual-calls-offered" min="0">
                  </div>
                  <div class="metrics-input-hint">Number of calls offered to this team member</div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Calls Accepted</div>
                  <div class="metrics-input-field">
                    <input type="number" class="form-control" id="individual-calls-accepted" min="0">
                  </div>
                  <div class="metrics-input-hint">Number of calls accepted by this team member</div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Answer Rate</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="text" class="form-control" id="individual-answer-rate" readonly>
                      <span class="input-group-text">%</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">
                    Goal: 95% & Higher
                    <span id="individual-answer-rate-indicator" class="goal-indicator"></span>
                  </div>
                </div>
              </div>
              
              <div class="metrics-form-section">
                <h6 class="metrics-form-title">
                  <span class="metrics-form-icon"><i class="fas fa-clock"></i></span>
                  Individual Time Metrics
                </h6>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Average Talk Time</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="number" class="form-control" id="individual-avg-talk-time" min="0" step="0.01">
                      <span class="input-group-text">min</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">
                    Goal: between 15-20 min
                    <span id="individual-talk-time-indicator" class="goal-indicator"></span>
                  </div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">ACW Percentage</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="number" class="form-control" id="individual-acw-percentage" min="0" max="100" step="0.01">
                      <span class="input-group-text">%</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">
                    Goal: 5 min or less
                    <span id="individual-acw-indicator" class="goal-indicator"></span>
                  </div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">On Queue Percentage</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="number" class="form-control" id="individual-on-queue" min="0" max="100" step="0.01">
                      <span class="input-group-text">%</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">
                    Goal: 65% and higher
                    <span id="individual-on-queue-indicator" class="goal-indicator"></span>
                  </div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Off Queue Percentage</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="number" class="form-control" id="individual-off-queue" min="0" max="100" step="0.01">
                      <span class="input-group-text">%</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">Percentage of time spent off the queue</div>
                </div>
                
                <div class="metrics-input-row">
                  <div class="metrics-input-label">Interacting Time</div>
                  <div class="metrics-input-field">
                    <div class="input-group">
                      <input type="number" class="form-control" id="individual-interacting-time" min="0" step="0.01">
                      <span class="input-group-text">hrs</span>
                    </div>
                  </div>
                  <div class="metrics-input-hint">
                    Goal: 4-6 hrs (≥ 50%)
                    <span id="individual-interacting-indicator" class="goal-indicator"></span>
                  </div>
                </div>
              </div>
              
              <!-- Notes Section -->
              <div class="metrics-form-section">
                <h6 class="metrics-form-title">
                  <span class="metrics-form-icon"><i class="fas fa-sticky-note"></i></span>
                  Notes
                </h6>
                
                <div class="mb-3">
                  <label for="individual-notes" class="form-label">Additional Notes</label>
                  <textarea class="form-control" id="individual-notes" rows="3" placeholder="Enter any additional notes or observations"></textarea>
                </div>
              </div>
              
              <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-outline-primary me-2" id="individual-reset-btn">Reset</button>
                <button type="submit" class="btn btn-primary" id="individual-save-btn">Save Individual Metrics</button>
              </div>
            </form>
            
            <!-- Empty State for Individual Metrics -->
            <div id="individual-empty-state" class="text-center py-5">
              <i class="fas fa-user-circle fa-3x mb-3 text-secondary opacity-50"></i>
              <h4 class="mb-3">Select a Team Member</h4>
              <p class="text-secondary mb-4">Choose a team member from the list above to enter their individual metrics.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let teamMembers = [];
    let selectedMemberId = '';
    let datePicker = null;
    let currentDate = new Date("2025-03-28 06:08:04"); // Current date
    
    // Document ready
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize date picker
      initializeDatePicker();
      
      // Setup event listeners
      setupEventListeners();
      
      // Load team members
      loadTeamMembers();
    });
    
    function initializeDatePicker() {
      // Initialize flatpickr
      datePicker = flatpickr("#metrics-date", {
        dateFormat: "Y-m-d",
        defaultDate: currentDate,
        maxDate: currentDate,
        allowInput: true
      });
      
      // Check if metrics already exist for this date
      checkExistingMetrics(formatDateForApi(currentDate));
    }
    
    function setupEventListeners() {
      // Back button
      document.getElementById('back-button').addEventListener('click', navigateBack);
      
      // Team form events
      document.getElementById('team-metrics-form').addEventListener('submit', saveTeamMetrics);
      document.getElementById('team-reset-btn').addEventListener('click', resetTeamForm);
      
      // Team metrics calculation events
      document.getElementById('team-calls-offered').addEventListener('input', calculateTeamAnswerRate);
      document.getElementById('team-calls-accepted').addEventListener('input', calculateTeamAnswerRate);
      document.getElementById('team-avg-talk-time').addEventListener('input', updateTeamTalkTimeIndicator);
      document.getElementById('team-acw-percentage').addEventListener('input', updateTeamAcwIndicator);
      document.getElementById('team-on-queue').addEventListener('input', updateTeamOnQueueIndicator);
      document.getElementById('team-off-queue').addEventListener('input', function() {
        // Ensure on-queue and off-queue add up to 100%
        const offQueueValue = parseFloat(this.value) || 0;
        const onQueueInput = document.getElementById('team-on-queue');
        if (offQueueValue <= 100) {
          onQueueInput.value = (100 - offQueueValue).toFixed(2);
          updateTeamOnQueueIndicator();
        }
      });
      document.getElementById('team-interacting-time').addEventListener('input', updateTeamInteractingIndicator);
      
      // Individual form events
      document.getElementById('individual-metrics-form').addEventListener('submit', saveIndividualMetrics);
      document.getElementById('individual-reset-btn').addEventListener('click', resetIndividualForm);
      document.getElementById('team-member-search').addEventListener('input', filterTeamMembers);
      
      // Individual metrics calculation events
      document.getElementById('individual-calls-offered').addEventListener('input', calculateIndividualAnswerRate);
      document.getElementById('individual-calls-accepted').addEventListener('input', calculateIndividualAnswerRate);
      document.getElementById('individual-avg-talk-time').addEventListener('input', updateIndividualTalkTimeIndicator);
      document.getElementById('individual-acw-percentage').addEventListener('input', updateIndividualAcwIndicator);
      document.getElementById('individual-on-queue').addEventListener('input', updateIndividualOnQueueIndicator);
      document.getElementById('individual-off-queue').addEventListener('input', function() {
        // Ensure on-queue and off-queue add up to 100%
        const offQueueValue = parseFloat(this.value) || 0;
        const onQueueInput = document.getElementById('individual-on-queue');
        if (offQueueValue <= 100) {
          onQueueInput.value = (100 - offQueueValue).toFixed(2);
          updateIndividualOnQueueIndicator();
        }
      });
      document.getElementById('individual-interacting-time').addEventListener('input', updateIndividualInteractingIndicator);
      
      // Date change event
      document.getElementById('metrics-date').addEventListener('change', function() {
        checkExistingMetrics(formatDateForApi(datePicker.selectedDates[0]));
      });
    }
    
    function loadTeamMembers() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleTeamMembersLoaded)
        .withFailureHandler(handleError)
        .getActiveTeamMembers();
    }
    
    function handleTeamMembersLoaded(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load team members', 'error');
        return;
      }
      
      teamMembers = result.data || [];
      populateTeamMembersList(teamMembers);
    }
    
    function populateTeamMembersList(members) {
      const membersList = document.getElementById('team-members-list');
      membersList.innerHTML = '';
      
      if (members.length === 0) {
        membersList.innerHTML = `
          <div class="text-center py-3">
            <p>No active team members found.</p>
          </div>
        `;
        return;
      }
      
      members.forEach(member => {
        const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim() || member.email;
        const initials = getInitials(fullName);
        
        const memberItem = document.createElement('div');
        memberItem.className = 'team-member-item';
        memberItem.dataset.id = member.id;
        
        memberItem.innerHTML = `
          <div class="team-member-avatar">${initials}</div>
          <div class="team-member-info">
            <div class="team-member-name">${fullName}</div>
            <div class="team-member-position">${member.position || 'Team Member'}</div>
          </div>
        `;
        
        memberItem.addEventListener('click', function() {
          // Remove active class from all items
          document.querySelectorAll('.team-member-item').forEach(item => {
            item.classList.remove('active');
          });
          
          // Add active class to this item
          this.classList.add('active');
          
          // Set selected member
          selectedMemberId = this.dataset.id;
          
          // Show individual metrics form
          document.getElementById('individual-metrics-form').style.display = 'block';
          document.getElementById('individual-empty-state').style.display = 'none';
          
          // Set member name
          document.getElementById('selected-member-name').textContent = fullName;
          document.getElementById('selected-member-id').value = selectedMemberId;
          
          // Check for existing metrics
          checkExistingIndividualMetrics(selectedMemberId, formatDateForApi(datePicker.selectedDates[0]));
        });
        
        membersList.appendChild(memberItem);
      });
    }
    
    function filterTeamMembers() {
      const searchTerm = document.getElementById('team-member-search').value.toLowerCase();
      
      if (!searchTerm) {
        populateTeamMembersList(teamMembers);
        return;
      }
      
      const filteredMembers = teamMembers.filter(member => {
        const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim().toLowerCase();
        return fullName.includes(searchTerm) || 
               (member.email && member.email.toLowerCase().includes(searchTerm)) ||
               (member.position && member.position.toLowerCase().includes(searchTerm));
      });
      
      populateTeamMembersList(filteredMembers);
    }
    
    function checkExistingMetrics(date) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result && result.success && result.data) {
            // Populate team metrics form with existing data
            populateTeamMetricsForm(result.data);
            showNotification('Info', 'Loaded existing metrics for this date', 'info');
          } else {
            // Reset the form for new entry
            resetTeamForm();
          }
        })
        .withFailureHandler(handleError)
        .getTeamMetricsForDate(date);
    }
    
    function checkExistingIndividualMetrics(memberId, date) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result && result.success && result.data) {
            // Populate individual metrics form with existing data
            populateIndividualMetricsForm(result.data);
            showNotification('Info', 'Loaded existing metrics for this team member', 'info');
          } else {
            // Reset the form for new entry
            resetIndividualForm();
          }
        })
        .withFailureHandler(handleError)
        .getIndividualMetricsForDate(memberId, date);
    }
    
    function populateTeamMetricsForm(data) {
      document.getElementById('team-calls-offered').value = data.callsOffered || '';
      document.getElementById('team-calls-accepted').value = data.callsAccepted || '';
      document.getElementById('team-avg-talk-time').value = data.averageTalkTime || '';
      document.getElementById('team-acw-percentage').value = data.acwPercentage || '';
      document.getElementById('team-on-queue').value = data.onQueuePercentage || '';
      document.getElementById('team-off-queue').value = data.offQueuePercentage || '';
      document.getElementById('team-interacting-time').value = data.interactingTime || '';
      
      // Calculate derived metrics
      calculateTeamAnswerRate();
      updateTeamTalkTimeIndicator();
      updateTeamAcwIndicator();
      updateTeamOnQueueIndicator();
      updateTeamInteractingIndicator();
    }
    
    function populateIndividualMetricsForm(data) {
      document.getElementById('individual-calls-offered').value = data.callsOffered || '';
      document.getElementById('individual-calls-accepted').value = data.callsAccepted || '';
      document.getElementById('individual-avg-talk-time').value = data.averageTalkTime || '';
      document.getElementById('individual-acw-percentage').value = data.acwPercentage || '';
      document.getElementById('individual-on-queue').value = data.onQueuePercentage || '';
      document.getElementById('individual-off-queue').value = data.offQueuePercentage || '';
      document.getElementById('individual-interacting-time').value = data.interactingTime || '';
      document.getElementById('individual-notes').value = data.notes || '';
      
      // Calculate derived metrics
      calculateIndividualAnswerRate();
      updateIndividualTalkTimeIndicator();
      updateIndividualAcwIndicator();
      updateIndividualOnQueueIndicator();
      updateIndividualInteractingIndicator();
    }
    
    function calculateTeamAnswerRate() {
      const callsOffered = parseFloat(document.getElementById('team-calls-offered').value) || 0;
      const callsAccepted = parseFloat(document.getElementById('team-calls-accepted').value) || 0;
      
      let answerRate = 0;
      if (callsOffered > 0) {
        answerRate = (callsAccepted / callsOffered) * 100;
      }
      
      document.getElementById('team-answer-rate').value = answerRate.toFixed(2);
      updateTeamAnswerRateIndicator(answerRate);
    }
    
    function calculateIndividualAnswerRate() {
      const callsOffered = parseFloat(document.getElementById('individual-calls-offered').value) || 0;
      const callsAccepted = parseFloat(document.getElementById('individual-calls-accepted').value) || 0;
      
      let answerRate = 0;
      if (callsOffered > 0) {
        answerRate = (callsAccepted / callsOffered) * 100;
      }
      
      document.getElementById('individual-answer-rate').value = answerRate.toFixed(2);
      updateIndividualAnswerRateIndicator(answerRate);
    }
    
    function updateTeamAnswerRateIndicator(rate) {
      const indicator = document.getElementById('team-answer-rate-indicator');
      
      if (rate >= 95) {
        indicator.className = 'goal-indicator success';
        indicator.innerHTML = '<i class="fas fa-check"></i>';
      } else {
        indicator.className = 'goal-indicator warning';
        indicator.innerHTML = '<i class="fas fa-exclamation"></i>';
      }
    }
    
    function updateIndividualAnswerRateIndicator(rate) {
      const indicator = document.getElementById('individual-answer-rate-indicator');
      
      if (rate >= 95) {
        indicator.className = 'goal-indicator success';
        indicator.innerHTML = '<i class="fas fa-check"></i>';
      } else {
        indicator.className = 'goal-indicator warning';
        indicator.innerHTML = '<i class="fas fa-exclamation"></i>';
      }
    }
    
    function updateTeamTalkTimeIndicator() {
      const talkTime = parseFloat(document.getElementById('team-avg-talk-time').value) || 0;
      const indicator = document.getElementById('team-talk-time-indicator');
      
      if (talkTime >= 15 && talkTime <= 20) {
        indicator.className = 'goal-indicator success';
        indicator.innerHTML = '<i class="fas fa-check"></i>';
      } else {
        indicator.className = 'goal-indicator warning';
        indicator.innerHTML = '<i class="fas fa-exclamation"></i>';
      }
    }
    
    function updateIndividualTalkTimeIndicator() {
      const talkTime = parseFloat(document.getElementById('individual-avg-talk-time').value) || 0;
      const indicator = document.getElementById('individual-talk-time-indicator');
      
      if (talkTime >= 15 && talkTime <= 20) {
        indicator.className = 'goal-indicator success';
        indicator.innerHTML = '<i class="fas fa-check"></i>';
      } else {
        indicator.className = 'goal-indicator warning';
        indicator.innerHTML = '<i class="fas fa-exclamation"></i>';
      }
    }
    
    function updateTeamAcwIndicator() {
      const acw = parseFloat(document.getElementById('team-acw-percentage').value) || 0;
      const indicator = document.getElementById('team-acw-indicator');
      
      // ACW is in percentage but goal is in minutes
      // Assuming 5 min or less is the goal, which might need conversion based on your data
      if (acw <= 5) {
        indicator.className = 'goal-indicator success';
        indicator.innerHTML = '<i class="fas fa-check"></i>';
      } else {
        indicator.className = 'goal-indicator warning';
        indicator.innerHTML = '<i class="fas fa-exclamation"></i>';
      }
    }
    
    function updateIndividualAcwIndicator() {
      const acw = parseFloat(document.getElementById('individual-acw-percentage').value) || 0;
      const indicator = document.getElementById('individual-acw-indicator');
      
      if (acw <= 5) {
        indicator.className = 'goal-indicator success';
        indicator.innerHTML = '<i class="fas fa-check"></i>';
      } else {
        indicator.className = 'goal-indicator warning';
        indicator.innerHTML = '<i class="fas fa-exclamation"></i>';
      }
    }
    
    function updateTeamOnQueueIndicator() {
      const onQueue = parseFloat(document.getElementById('team-on-queue').value) || 0;
      const indicator = document.getElementById('team-on-queue-indicator');
      
      if (onQueue >= 65) {
        indicator.className = 'goal-indicator success';
        indicator.innerHTML = '<i class="fas fa-check"></i>';
      } else {
        indicator.className = 'goal-indicator warning';
        indicator.innerHTML = '<i class="fas fa-exclamation"></i>';
      }
      
      // Update off queue value
      document.getElementById('team-off-queue').value = (100 - onQueue).toFixed(2);
    }
    
    function updateIndividualOnQueueIndicator() {
      const onQueue = parseFloat(document.getElementById('individual-on-queue').value) || 0;
      const indicator = document.getElementById('individual-on-queue-indicator');
      
      if (onQueue >= 65) {
        indicator.className = 'goal-indicator success';
        indicator.innerHTML = '<i class="fas fa-check"></i>';
      } else {
        indicator.className = 'goal-indicator warning';
        indicator.innerHTML = '<i class="fas fa-exclamation"></i>';
      }
      
      // Update off queue value
      document.getElementById('individual-off-queue').value = (100 - onQueue).toFixed(2);
    }
    
    function updateTeamInteractingIndicator() {
      const interactingTime = parseFloat(document.getElementById('team-interacting-time').value) || 0;
      const indicator = document.getElementById('team-interacting-indicator');
      
      if (interactingTime >= 4 && interactingTime <= 6) {
        indicator.className = 'goal-indicator success';
        indicator.innerHTML = '<i class="fas fa-check"></i>';
      } else {
        indicator.className = 'goal-indicator warning';
        indicator.innerHTML = '<i class="fas fa-exclamation"></i>';
      }
    }
    
    function updateIndividualInteractingIndicator() {
      const interactingTime = parseFloat(document.getElementById('individual-interacting-time').value) || 0;
      const indicator = document.getElementById('individual-interacting-indicator');
      
      if (interactingTime >= 4 && interactingTime <= 6) {
        indicator.className = 'goal-indicator success';
        indicator.innerHTML = '<i class="fas fa-check"></i>';
      } else {
        indicator.className = 'goal-indicator warning';
        indicator.innerHTML = '<i class="fas fa-exclamation"></i>';
      }
    }
    
    function saveTeamMetrics(e) {
      e.preventDefault();
      
      const metricsDate = formatDateForApi(datePicker.selectedDates[0]);
      
      const metricsData = {
        date: metricsDate,
        callsOffered: parseFloat(document.getElementById('team-calls-offered').value) || 0,
        callsAccepted: parseFloat(document.getElementById('team-calls-accepted').value) || 0,
        answerRate: parseFloat(document.getElementById('team-answer-rate').value) || 0,
        averageTalkTime: parseFloat(document.getElementById('team-avg-talk-time').value) || 0,
        acwPercentage: parseFloat(document.getElementById('team-acw-percentage').value) || 0,
        onQueuePercentage: parseFloat(document.getElementById('team-on-queue').value) || 0,
        offQueuePercentage: parseFloat(document.getElementById('team-off-queue').value) || 0,
        interactingTime: parseFloat(document.getElementById('team-interacting-time').value) || 0,
        submittedBy: "amourjanaynow", // Current user
        submittedAt: new Date("2025-03-28 06:08:04").toISOString() // Current date and time
      };
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result && result.success) {
            showNotification('Success', 'Team metrics saved successfully', 'success');
          } else {
            showNotification('Error', result ? result.message : 'Failed to save team metrics', 'error');
          }
        })
        .withFailureHandler(handleError)
        .saveTeamMetrics(metricsData);
    }
    
    function saveIndividualMetrics(e) {
      e.preventDefault();
      
      if (!selectedMemberId) {
        showNotification('Error', 'Please select a team member', 'error');
        return;
      }
      
      const metricsDate = formatDateForApi(datePicker.selectedDates[0]);
      
      const metricsData = {
        teamMemberId: selectedMemberId,
        date: metricsDate,
        callsOffered: parseFloat(document.getElementById('individual-calls-offered').value) || 0,
        callsAccepted: parseFloat(document.getElementById('individual-calls-accepted').value) || 0,
        answerRate: parseFloat(document.getElementById('individual-answer-rate').value) || 0,
        averageTalkTime: parseFloat(document.getElementById('individual-avg-talk-time').value) || 0,
        acwPercentage: parseFloat(document.getElementById('individual-acw-percentage').value) || 0,
        onQueuePercentage: parseFloat(document.getElementById('individual-on-queue').value) || 0,
        offQueuePercentage: parseFloat(document.getElementById('individual-off-queue').value) || 0,
        interactingTime: parseFloat(document.getElementById('individual-interacting-time').value) || 0,
        notes: document.getElementById('individual-notes').value,
        submittedBy: "amourjanaynow", // Current user
        submittedAt: new Date("2025-03-28 06:08:04").toISOString() // Current date and time
      };
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result && result.success) {
            showNotification('Success', 'Individual metrics saved successfully', 'success');
            
            // Update UI to show metrics are saved
            document.querySelector(`.team-member-item[data-id="${selectedMemberId}"]`).classList.add('active');
          } else {
            showNotification('Error', result ? result.message : 'Failed to save individual metrics', 'error');
          }
        })
        .withFailureHandler(handleError)
        .saveIndividualMetrics(metricsData);
    }
    
    function resetTeamForm() {
      document.getElementById('team-calls-offered').value = '';
      document.getElementById('team-calls-accepted').value = '';
      document.getElementById('team-answer-rate').value = '';
      document.getElementById('team-avg-talk-time').value = '';
      document.getElementById('team-acw-percentage').value = '';
      document.getElementById('team-on-queue').value = '';
      document.getElementById('team-off-queue').value = '';
      document.getElementById('team-interacting-time').value = '';
      
      // Reset indicators
      document.getElementById('team-answer-rate-indicator').className = 'goal-indicator';
      document.getElementById('team-answer-rate-indicator').innerHTML = '';
      document.getElementById('team-talk-time-indicator').className = 'goal-indicator';
      document.getElementById('team-talk-time-indicator').innerHTML = '';
      document.getElementById('team-acw-indicator').className = 'goal-indicator';
      document.getElementById('team-acw-indicator').innerHTML = '';
      document.getElementById('team-on-queue-indicator').className = 'goal-indicator';
      document.getElementById('team-on-queue-indicator').innerHTML = '';
      document.getElementById('team-interacting-indicator').className = 'goal-indicator';
      document.getElementById('team-interacting-indicator').innerHTML = '';
    }
    
    function resetIndividualForm() {
      document.getElementById('individual-calls-offered').value = '';
      document.getElementById('individual-calls-accepted').value = '';
      document.getElementById('individual-answer-rate').value = '';
      document.getElementById('individual-avg-talk-time').value = '';
      document.getElementById('individual-acw-percentage').value = '';
      document.getElementById('individual-on-queue').value = '';
      document.getElementById('individual-off-queue').value = '';
      document.getElementById('individual-interacting-time').value = '';
      document.getElementById('individual-notes').value = '';
      
      // Reset indicators
      document.getElementById('individual-answer-rate-indicator').className = 'goal-indicator';
      document.getElementById('individual-answer-rate-indicator').innerHTML = '';
      document.getElementById('individual-talk-time-indicator').className = 'goal-indicator';
      document.getElementById('individual-talk-time-indicator').innerHTML = '';
      document.getElementById('individual-acw-indicator').className = 'goal-indicator';
      document.getElementById('individual-acw-indicator').innerHTML = '';
      document.getElementById('individual-on-queue-indicator').className = 'goal-indicator';
      document.getElementById('individual-on-queue-indicator').innerHTML = '';
      document.getElementById('individual-interacting-indicator').className = 'goal-indicator';
      document.getElementById('individual-interacting-indicator').innerHTML = '';
    }
    
    function getInitials(name) {
      if (!name) return '?';
      
      return name
        .split(' ')
        .map(n => n[0])
        .join('')
        .toUpperCase()
        .substring(0, 2);
    }
    
    function formatDateForApi(date) {
      if (!date) return '';
      
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      
      return `${year}-${month}-${day}`;
    }
    
    function navigateBack() {
      google.script.run.showMetricsDashboard();
      google.script.host.close();
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const loadingOverlay = document.getElementById('loading-overlay');
      loadingOverlay.style.opacity = '0';
      setTimeout(() => {
        loadingOverlay.style.display = 'none';
        loadingOverlay.style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      margin: 0;
      padding: 0;
    }
    .container {
      width: 100%;
      max-width: 650px;
      margin: 0 auto;
      padding: 20px;
    }
    .header {
      background-color: #0f9d58;
      color: white;
      padding: 15px;
      border-radius: 5px 5px 0 0;
    }
    .content {
      padding: 20px;
      background-color: #f9f9f9;
      border: 1px solid #ddd;
    }
    .section {
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid #eee;
    }
    .section-title {
      color: #0f9d58;
      font-weight: bold;
      margin-bottom: 10px;
    }
    .rating {
      background-color: #f1f8e9;
      padding: 10px;
      margin: 5px 0;
      border-left: 4px solid #7cb342;
    }
    .score-excellent {
      color: #0f9d58;
      font-weight: bold;
    }
    .score-good {
      color: #4285f4;
      font-weight: bold;
    }
    .score-needs-improvement {
      color: #ea4335;
      font-weight: bold;
    }
    .footer {
      margin-top: 20px;
      font-size: 12px;
      color: #777;
    }
    h1 {
      margin: 0;
    }
    ul {
      padding-left: 20px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Quality Review Follow-up</h1>
    </div>
    
    <div class="content">
      <p>Hello <?= teamMemberName || teamMemberEmail ?>,</p>
      
      <p>I've completed a quality review of your interaction from <?= formattedInteractionDate ?>. Please find the results below:</p>
      
      <div class="section">
        <div class="section-title">Interaction Details</div>
        <p><strong>Interaction ID:</strong> <?= interactionId ?><br>
        <strong>Interaction Date:</strong> <?= formattedInteractionDate ?><br>
        <strong>Review Date:</strong> <?= formattedReviewDate ?></p>
      </div>
      
      <div class="section">
        <div class="section-title">Overall Results</div>
        <p><strong>Score:</strong> <?= totalPoints ?> out of <?= possiblePoints ?> points (<?= percentageScore ?>%)<br>
        <strong>Quality Status:</strong> <span class="score-<?= qualityStatus.toLowerCase().replace(' ', '-') ?>"><?= qualityStatus ?></span></p>
      </div>
      
      <div class="section">
        <div class="section-title">Evaluation Details</div>
        
        <table>
          <tr>
            <th>Criterion</th>
            <th>Rating</th>
          </tr>
          
          <tr>
            <td>Answered interaction in less than 20 seconds of joining</td>
            <td><?= answeredInteractionRating ?></td>
          </tr>
          <tr>
            <td colspan="2"><?= answeredInteractionNotes ?></td>
          </tr>
          
          <tr>
            <td>Opening message completed with tact</td>
            <td><?= openingMessageRating ?></td>
          </tr>
          <tr>
            <td colspan="2"><?= openingMessageNotes ?></td>
          </tr>
          
          <tr>
            <td>SASS/Screener questions attempted at least twice</td>
            <td><?= sassScreenerRating ?></td>
          </tr>
          <tr>
            <td colspan="2"><?= sassScreenerNotes ?></td>
          </tr>
          
          <tr>
            <td>Used creative non-judgmental empathy and built rapport</td>
            <td><?= nonJudgmentalEmpathyRating ?></td>
          </tr>
          <tr>
            <td colspan="2"><?= nonJudgmentalEmpathyNotes ?></td>
          </tr>
          
          <tr>
            <td>Demonstrated active listening through reflective responses</td>
            <td><?= activeListeningRating ?></td>
          </tr>
          <tr>
            <td colspan="2"><?= activeListeningNotes ?></td>
          </tr>
          
          <tr>
            <td>Used appropriate LGBTQ+ inclusive language</td>
            <td><?= inclusiveLanguageRating ?></td>
          </tr>
          <tr>
            <td colspan="2"><?= inclusiveLanguageNotes ?></td>
          </tr>
          
          <tr>
            <td>Responded to emotional content with appropriate empathy</td>
            <td><?= emotionalResponseRating ?></td>
          </tr>
          <tr>
            <td colspan="2"><?= emotionalResponseNotes ?></td>
          </tr>
          
          <tr>
            <td>Provided appropriate resources relevant to the contact's needs</td>
            <td><?= resourcesRating ?></td>
          </tr>
          <tr>
            <td colspan="2"><?= resourcesNotes ?></td>
          </tr>
          
          <tr>
            <td>Helped identify coping strategies or action steps</td>
            <td><?= copingStrategiesRating ?></td>
          </tr>
          <tr>
            <td colspan="2"><?= copingStrategiesNotes ?></td>
          </tr>
          
          <tr>
            <td>Summarized key points of the interaction</td>
            <td><?= summarizedPointsRating ?></td>
          </tr>
          <tr>
            <td colspan="2"><?= summarizedPointsNotes ?></td>
          </tr>
          
          <tr>
            <td>Completed closure process appropriately</td>
            <td><?= completedClosureRating ?></td>
          </tr>
          <tr>
            <td colspan="2"><?= completedClosureNotes ?></td>
          </tr>
        </table>
      </div>
      
      <div class="section">
        <div class="section-title">Overall Feedback</div>
        <p><?= overallFeedback ?></p>
      </div>
      
      <? if (followUpActions) { ?>
      <div class="section">
        <div class="section-title">Follow-Up Actions</div>
        <p><?= followUpActions ?></p>
      </div>
      <? } ?>
      
      <p>If you'd like to discuss this review further, please don't hesitate to reach out.</p>
      
      <div class="footer">
        <p>Thank you for your dedication to providing high-quality support!</p>
        <p>Best regards,<br/>
        <?= reviewerName || Session.getActiveUser().getEmail() ?>
        </p>
      </div>
    </div>
  </div>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      overflow-x: hidden;
    }
    
    /* App Layout */
    .app-container {
      display: grid;
      grid-template-columns: auto 1fr;
      grid-template-rows: auto 1fr;
      grid-template-areas: 
        "sidebar header"
        "sidebar content";
      height: 100vh;
      width: 100vw;
      overflow: hidden;
    }
    
    /* Modern Sidebar */
    .app-sidebar {
      grid-area: sidebar;
      width: 250px;
      background-color: var(--surface);
      border-right: 1px solid var(--border-color);
      display: flex;
      flex-direction: column;
      transition: var(--transition);
      z-index: 100;
      box-shadow: var(--shadow-sm);
    }
    
    .app-sidebar.collapsed {
      width: 70px;
    }
    
    .sidebar-header {
      padding: 1.5rem;
      display: flex;
      align-items: center;
      border-bottom: 1px solid var(--border-color);
    }
    
    .sidebar-logo {
      font-weight: 700;
      font-size: 1.25rem;
      display: flex;
      align-items: center;
    }
    
    .sidebar-logo-icon {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      margin-right: 12px;
      flex-shrink: 0;
    }
    
    .sidebar-logo-text {
      transition: var(--transition);
      white-space: nowrap;
      overflow: hidden;
    }
    
    .app-sidebar.collapsed .sidebar-logo-text {
      opacity: 0;
      width: 0;
    }
    
    .sidebar-toggle {
      margin-left: auto;
      width: 28px;
      height: 28px;
      border-radius: 6px;
      background: var(--surface-hover);
      border: none;
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .sidebar-toggle:hover {
      background: var(--primary-light);
      color: var(--primary);
    }
    
    .app-sidebar.collapsed .sidebar-toggle i {
      transform: rotate(180deg);
    }
    
    .sidebar-menu {
      list-style: none;
      padding: 1.25rem 0;
      margin: 0;
      flex: 1;
      overflow-y: auto;
    }
    
    .sidebar-menu-item {
      position: relative;
      margin: 0.25rem 0.75rem;
    }
    
    .sidebar-menu-link {
      display: flex;
      align-items: center;
      padding: 0.75rem 1rem;
      color: var(--text-secondary);
      text-decoration: none;
      border-radius: 8px;
      transition: var(--transition);
      overflow: hidden;
      white-space: nowrap;
    }
    
    .sidebar-menu-link:hover {
      color: var(--primary);
      background-color: var(--primary-light);
    }
    
    .sidebar-menu-link.active {
      color: var(--primary);
      background-color: var(--primary-light);
      font-weight: 500;
    }
    
    .sidebar-menu-icon {
      width: 1.25rem;
      text-align: center;
      margin-right: 1rem;
      font-size: 1rem;
      transition: var(--transition);
    }
    
    .sidebar-menu-text {
      transition: var(--transition);
      opacity: 1;
    }
    
    .app-sidebar.collapsed .sidebar-menu-text {
      opacity: 0;
      width: 0;
    }
    
    .app-sidebar.collapsed .sidebar-menu-link {
      padding: 0.75rem;
      justify-content: center;
    }
    
    .app-sidebar.collapsed .sidebar-menu-icon {
      margin-right: 0;
      font-size: 1.25rem;
    }
    
    /* Header */
    .app-header {
      grid-area: header;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1.5rem;
      background-color: var(--surface);
      border-bottom: 1px solid var(--border-color);
      box-shadow: var(--shadow-sm);
      z-index: 99;
    }
    
    .header-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .header-actions {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .header-action-btn {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: var(--surface);
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
      position: relative;
    }
    
    .header-action-btn:hover {
      background: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
      transform: translateY(-2px);
    }
    
    .header-date-range {
      background: var(--surface);
      border: 1px solid var(--border-color);
      padding: 0.5rem 1rem;
      border-radius: 8px;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: var(--text-secondary);
      font-size: 0.875rem;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .header-date-range:hover {
      background: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .header-notification-count {
      position: absolute;
      top: -5px;
      right: -5px;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background: var(--danger);
      color: white;
      font-size: 0.65rem;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    /* Content Area */
    .app-content {
      grid-area: content;
      overflow-y: auto;
      padding: 1.5rem;
      background-color: #f5f7ff;
      position: relative;
    }
    
    /* Dashboard Grid */
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      gap: 1.25rem;
    }
    
    .grid-col-12 { grid-column: span 12; }
    .grid-col-8 { grid-column: span 8; }
    .grid-col-6 { grid-column: span 6; }
    .grid-col-4 { grid-column: span 4; }
    .grid-col-3 { grid-column: span 3; }
    
    @media (max-width: 1199px) {
      .grid-col-4 { grid-column: span 6; }
      .grid-col-3 { grid-column: span 6; }
    }
    
    @media (max-width: 991px) {
      .grid-col-6 { grid-column: span 12; }
    }
    
    @media (max-width: 767px) {
      .grid-col-3, .grid-col-4 { grid-column: span 12; }
    }
    
    /* Card Styles */
    .dashboard-card {
      background: var(--surface);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      height: 100%;
      position: relative;
      overflow: hidden;
    }
    
    .dashboard-card:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-3px);
    }
    
    .card-header {
      padding: 1.25rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-bottom: 1px solid var(--border-color);
    }
    
    .card-title {
      font-size: 1rem;
      font-weight: 600;
      color: var(--text-primary);
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      margin-right: 0.75rem;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      font-size: 1rem;
      color: white;
    }
    
    .card-body {
      padding: 1.25rem;
    }
    
    .card-footer {
      padding: 1rem 1.25rem;
      border-top: 1px solid var(--border-color);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    /* KPI Cards */
    .kpi-card {
      position: relative;
      display: flex;
      flex-direction: column;
      border-radius: var(--border-radius);
      background: var(--surface);
      padding: 1.25rem;
      margin-bottom: 1.25rem;
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      overflow: hidden;
    }
    
    .kpi-card:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-3px);
    }
    
    .kpi-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      height: 4px;
      width: 100%;
      background: linear-gradient(to right, var(--primary), var(--secondary));
      opacity: 0;
      transition: var(--transition);
    }
    
    .kpi-card:hover::before {
      opacity: 1;
    }
    
    .kpi-label {
      color: var(--text-secondary);
      font-weight: 500;
      font-size: 0.875rem;
      margin-bottom: 0.25rem;
    }
    
    .kpi-value {
      color: var(--text-primary);
      font-weight: 700;
      font-size: 1.75rem;
      line-height: 1.2;
      margin-bottom: 0.75rem;
      transition: var(--transition);
    }
    
    .kpi-card:hover .kpi-value {
      color: var(--primary);
    }
    
    .kpi-trend {
      display: flex;
      align-items: center;
      font-size: 0.75rem;
      font-weight: 500;
    }
    
    .kpi-trend-icon {
      margin-right: 0.375rem;
      display: flex;
      align-items: center;
    }
    
    .kpi-trend-up {
      color: var(--success);
    }
    
    .kpi-trend-down {
      color: var(--danger);
    }
    
    .kpi-trend-flat {
      color: var(--text-secondary);
    }
    
    .kpi-chart {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 72px;
      height: 32px;
      opacity: 0.2;
      transition: var(--transition);
    }
    
    .kpi-card:hover .kpi-chart {
      opacity: 0.4;
    }
    
    .kpi-status {
      position: absolute;
      top: 1.25rem;
      right: 1.25rem;
      width: 8px;
      height: 8px;
      border-radius: 50%;
    }
    
    .status-success {
      background-color: var(--success);
    }
    
    .status-warning {
      background-color: var(--warning);
    }
    
    .status-danger {
      background-color: var(--danger);
    }
    
    /* List Items */
    .list-container {
      max-height: 350px;
      overflow-y: auto;
    }
    
    .list-item {
      display: flex;
      align-items: center;
      padding: 0.875rem 1rem;
      border-bottom: 1px solid var(--border-color);
      transition: var(--transition);
      cursor: pointer;
      position: relative;
    }
    
    .list-item:last-child {
      border-bottom: none;
    }
    
    .list-item::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 3px;
      height: 100%;
      background-color: var(--primary);
      opacity: 0;
      transition: var(--transition);
    }
    
    .list-item:hover {
      background-color: var(--surface-hover);
    }
    
    .list-item:hover::after {
      opacity: 1;
    }
    
    .list-item-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--primary-light);
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 1rem;
      flex-shrink: 0;
      font-size: 1rem;
      transition: var(--transition);
    }
    
    .list-item:hover .list-item-icon {
      background: var(--primary);
      color: white;
      transform: scale(1.1);
    }
    
    .list-item-content {
      flex: 1;
      min-width: 0;
    }
    
    .list-item-title {
      font-weight: 500;
      color: var(--text-primary);
      margin: 0;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: var(--transition);
    }
    
    .list-item:hover .list-item-title {
      color: var(--primary);
    }
    
    .list-item-subtitle {
      color: var(--text-secondary);
      font-size: 0.75rem;
      margin-top: 0.25rem;
    }
    
    .list-item-action {
      flex-shrink: 0;
      margin-left: 0.5rem;
      opacity: 0;
      transition: var(--transition);
    }
    
    .list-item:hover .list-item-action {
      opacity: 1;
    }
    
    .list-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 6px;
      font-size: 0.7rem;
      font-weight: 600;
      flex-shrink: 0;
      margin-left: 0.5rem;
    }
    
    .badge-primary {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .badge-success {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .badge-warning {
      background-color: var(--warning-light);
      color: var(--warning);
    }
    
    .badge-danger {
      background-color: var(--danger-light);
      color: var(--danger);
    }
    
    .badge-info {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    /* Chart Container */
    .chart-container {
      height: 300px;
      position: relative;
    }
    
    /* Loading Animation */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      z-index: 9999;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      transition: var(--transition);
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      position: relative;
    }
    
    .loading-spinner::before {
      content: '';
      position: absolute;
      top: -4px;
      left: -4px;
      right: -4px;
      bottom: -4px;
      border: 4px solid transparent;
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .loading-text {
      margin-top: 1rem;
      color: var(--primary);
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    /* Responsive Adjustments */
    @media (max-width: 991px) {
      .app-container {
        grid-template-areas: 
          "header header"
          "sidebar content";
      }
      
      .app-sidebar {
        position: fixed;
        height: 100%;
        transform: translateX(-100%);
      }
      
      .app-sidebar.open {
        transform: translateX(0);
      }
      
      .mobile-menu-btn {
        display: block;
      }
    }
    
    /* Animation Classes */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .animate-fade-in-up {
      animation: fadeInUp 0.6s ease forwards;
      opacity: 0;
    }
    
    .animate-delay-1 { animation-delay: 0.1s; }
    .animate-delay-2 { animation-delay: 0.2s; }
    .animate-delay-3 { animation-delay: 0.3s; }
    .animate-delay-4 { animation-delay: 0.4s; }
    .animate-delay-5 { animation-delay: 0.5s; }
    
    /* Empty State */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 3rem 0;
      text-align: center;
    }
    
    .empty-state-icon {
      font-size: 3rem;
      color: var(--text-secondary);
      opacity: 0.5;
      margin-bottom: 1rem;
    }
    
    .empty-state-text {
      color: var(--text-secondary);
      font-size: 0.875rem;
      max-width: 250px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <!-- Loading Animation -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading dashboard...</div>
  </div>
  
  <div class="app-container">
    <!-- Sidebar -->
    <aside class="app-sidebar" id="sidebar">
      <div class="sidebar-header">
        <div class="sidebar-logo">
          <div class="sidebar-logo-icon">
            <i class="fas fa-chart-pie"></i>
          </div>
          <div class="sidebar-logo-text">TeamLead</div>
        </div>
        <button id="sidebar-toggle" class="sidebar-toggle" aria-label="Toggle Sidebar">
          <i class="fas fa-angle-left"></i>
        </button>
      </div>
      
      <nav class="sidebar-menu">
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link active" data-page="dashboard">
            <span class="sidebar-menu-icon"><i class="fas fa-th-large"></i></span>
            <span class="sidebar-menu-text">Dashboard</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="one-on-ones">
            <span class="sidebar-menu-icon"><i class="fas fa-user-friends"></i></span>
            <span class="sidebar-menu-text">One-on-Ones</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="qa-reviews">
            <span class="sidebar-menu-icon"><i class="fas fa-clipboard-check"></i></span>
            <span class="sidebar-menu-text">QA Reviews</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="metrics">
            <span class="sidebar-menu-icon"><i class="fas fa-chart-line"></i></span>
            <span class="sidebar-menu-text">Metrics</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="action-items">
            <span class="sidebar-menu-icon"><i class="fas fa-tasks"></i></span>
            <span class="sidebar-menu-text">Action Items</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="team">
            <span class="sidebar-menu-icon"><i class="fas fa-users"></i></span>
            <span class="sidebar-menu-text">Team Members</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="settings">
            <span class="sidebar-menu-icon"><i class="fas fa-cog"></i></span>
            <span class="sidebar-menu-text">Settings</span>
          </a>
        </div>
      </nav>
    </aside>
    
    <!-- Header -->
    <header class="app-header">
      <div class="header-title">
        Dashboard Overview
      </div>
      
      <div class="header-actions">
        <div class="header-date-range" id="date-range-selector">
          <i class="far fa-calendar"></i>
          <span id="date-range-text">Last 30 Days</span>
          <i class="fas fa-chevron-down"></i>
        </div>
        
        <button id="refresh-btn" class="header-action-btn" aria-label="Refresh Dashboard">
          <i class="fas fa-sync-alt"></i>
        </button>
        
        <button class="header-action-btn" aria-label="Notifications">
          <i class="fas fa-bell"></i>
          <span class="header-notification-count">3</span>
        </button>
      </div>
    </header>
    
    <!-- Main Content -->
    <main class="app-content">
      <!-- KPI Cards Row -->
      <div class="dashboard-grid mb-4">
        <!-- Team Size KPI -->
        <div class="grid-col-3 animate-fade-in-up animate-delay-1">
          <div class="kpi-card">
            <span class="kpi-status status-success"></span>
            <div class="kpi-label">Team Size</div>
            <div class="kpi-value" id="team-size">--</div>
            <div class="kpi-trend">
              <span class="kpi-trend-icon kpi-trend-up">
                <i class="fas fa-arrow-up"></i>
              </span>
              <span id="team-trend">-- vs. last period</span>
            </div>
            <div class="kpi-chart" id="team-size-chart"></div>
          </div>
        </div>
        
        <!-- Answer Rate KPI -->
        <div class="grid-col-3 animate-fade-in-up animate-delay-2">
          <div class="kpi-card">
            <span class="kpi-status" id="answer-rate-status"></span>
            <div class="kpi-label">Answer Rate</div>
            <div class="kpi-value" id="answer-rate">--%</div>
            <div class="kpi-trend">
              <span class="kpi-trend-icon" id="answer-trend-icon">
                <i class="fas fa-arrow-up"></i>
              </span>
              <span id="answer-rate-trend">-- vs. target</span>
            </div>
            <div class="kpi-chart" id="answer-rate-chart"></div>
          </div>
        </div>
        
        <!-- Talk Time KPI -->
        <div class="grid-col-3 animate-fade-in-up animate-delay-3">
          <div class="kpi-card">
            <span class="kpi-status" id="talk-time-status"></span>
            <div class="kpi-label">Avg Talk Time</div>
            <div class="kpi-value" id="talk-time">-- min</div>
            <div class="kpi-trend">
              <span class="kpi-trend-icon" id="talk-time-trend-icon">
                <i class="fas fa-arrow-up"></i>
              </span>
              <span id="talk-time-trend">-- vs. target</span>
            </div>
            <div class="kpi-chart" id="talk-time-chart"></div>
          </div>
        </div>
        
        <!-- On Queue KPI -->
        <div class="grid-col-3 animate-fade-in-up animate-delay-4">
          <div class="kpi-card">
            <span class="kpi-status" id="on-queue-status"></span>
            <div class="kpi-label">On Queue %</div>
            <div class="kpi-value" id="on-queue">--%</div>
            <div class="kpi-trend">
              <span class="kpi-trend-icon" id="on-queue-trend-icon">
                <i class="fas fa-arrow-up"></i>
              </span>
              <span id="on-queue-trend">-- vs. target</span>
            </div>
            <div class="kpi-chart" id="on-queue-chart"></div>
          </div>
        </div>
      </div>
      
      <!-- Charts Row -->
      <div class="dashboard-grid mb-4">
        <!-- Performance Trends Chart -->
        <div class="grid-col-8 animate-fade-in-up animate-delay-1">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--primary);">
                  <i class="fas fa-chart-line"></i>
                </div>
                Performance Trends
              </h2>
              <div class="btn-group">
                <button class="btn btn-sm btn-outline-secondary active" id="chart-daily" data-period="day">Daily</button>
                <button class="btn btn-sm btn-outline-secondary" id="chart-weekly" data-period="week">Weekly</button>
                <button class="btn btn-sm btn-outline-secondary" id="chart-monthly" data-period="month">Monthly</button>
              </div>
            </div>
            <div class="card-body">
              <div id="performance-chart" class="chart-container"></div>
            </div>
          </div>
        </div>
        
        <!-- Team Status Chart -->
        <div class="grid-col-4 animate-fade-in-up animate-delay-2">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--success);">
                  <i class="fas fa-users"></i>
                </div>
                Team Status
              </h2>
            </div>
            <div class="card-body">
              <div id="team-status-chart" class="chart-container"></div>
              <div class="d-flex justify-content-around mt-3">
                <div class="text-center">
                  <div class="h4 mb-0" id="qa-average">--%</div>
                  <div class="text-muted small">Avg QA Score</div>
                </div>
                <div class="text-center">
                  <div class="h4 mb-0" id="one-on-one-coverage">--%</div>
                  <div class="text-muted small">1:1 Coverage</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Attention Areas Row -->
      <div class="dashboard-grid mb-4">
        <!-- Critical Attention Areas -->
        <div class="grid-col-6 animate-fade-in-up animate-delay-3">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--danger);">
                  <i class="fas fa-exclamation-circle"></i>
                </div>
                Critical Attention Areas
              </h2>
              <span class="badge badge-danger" id="attention-count">--</span>
            </div>
            <div class="card-body p-0">
              <div class="list-container" id="attention-list">
                <!-- Attention items will be loaded here -->
                <div class="empty-state">
                  <div class="empty-state-icon">
                    <i class="fas fa-spinner fa-spin"></i>
                  </div>
                  <div class="empty-state-text">Loading attention areas...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Action Items -->
        <div class="grid-col-6 animate-fade-in-up animate-delay-4">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--warning);">
                  <i class="fas fa-tasks"></i>
                </div>
                Action Items
              </h2>
              <button class="btn btn-sm btn-outline-primary" onclick="navigateTo('action-items')">View All</button>
            </div>
            <div class="card-body p-0">
              <div class="list-container" id="action-items-list">
                <!-- Action items will be loaded here -->
                <div class="empty-state">
                  <div class="empty-state-icon">
                    <i class="fas fa-spinner fa-spin"></i>
                  </div>
                  <div class="empty-state-text">Loading action items...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Recent Activity Row -->
      <div class="dashboard-grid">
        <!-- Today's Schedule -->
        <div class="grid-col-4 animate-fade-in-up animate-delay-1">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--info);">
                  <i class="fas fa-calendar-day"></i>
                </div>
                Today's Schedule
              </h2>
            </div>
            <div class="card-body p-0">
              <div class="list-container" id="schedule-list">
                <!-- Schedule items will be loaded here -->
                <div class="empty-state">
                  <div class="empty-state-icon">
                    <i class="fas fa-spinner fa-spin"></i>
                  </div>
                  <div class="empty-state-text">Loading schedule...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Recent One-on-Ones -->
        <div class="grid-col-4 animate-fade-in-up animate-delay-2">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--primary);">
                  <i class="fas fa-user-friends"></i>
                </div>
                Recent One-on-Ones
              </h2>
              <button class="btn btn-sm btn-outline-primary" onclick="navigateTo('one-on-ones')">View All</button>
            </div>
            <div class="card-body p-0">
              <div class="list-container" id="one-on-ones-list">
                <!-- One-on-ones will be loaded here -->
                <div class="empty-state">
                  <div class="empty-state-icon">
                    <i class="fas fa-spinner fa-spin"></i>
                  </div>
                  <div class="empty-state-text">Loading one-on-ones...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Recent QA Reviews -->
        <div class="grid-col-4 animate-fade-in-up animate-delay-3">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--success);">
                  <i class="fas fa-clipboard-check"></i>
                </div>
                Recent QA Reviews
              </h2>
              <button class="btn btn-sm btn-outline-primary" onclick="navigateTo('qa-reviews')">View All</button>
            </div>
            <div class="card-body p-0">
              <div class="list-container" id="qa-reviews-list">
                <!-- QA reviews will be loaded here -->
                <div class="empty-state">
                  <div class="empty-state-icon">
                    <i class="fas fa-spinner fa-spin"></i>
                  </div>
                  <div class="empty-state-text">Loading QA reviews...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
  
  <!-- Date Range Modal -->
  <div class="modal fade" id="dateRangeModal" tabindex="-1" aria-labelledby="dateRangeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="dateRangeModalLabel">Select Date Range</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="list-group">
            <button type="button" class="list-group-item list-group-item-action" data-range="7" data-bs-dismiss="modal">
              Last 7 Days
            </button>
            <button type="button" class="list-group-item list-group-item-action" data-range="30" data-bs-dismiss="modal">
              Last 30 Days
            </button>
            <button type="button" class="list-group-item list-group-item-action" data-range="90" data-bs-dismiss="modal">
              Last 90 Days
            </button>
            <button type="button" class="list-group-item list-group-item-action" data-range="custom" data-bs-dismiss="modal">
              Custom Range...
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Custom Range Modal -->
  <div class="modal fade" id="customRangeModal" tabindex="-1" aria-labelledby="customRangeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="customRangeModalLabel">Custom Date Range</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="row g-3">
            <div class="col-6">
              <label for="startDate" class="form-label">Start Date</label>
              <input type="date" class="form-control" id="startDate">
            </div>
            <div class="col-6">
              <label for="endDate" class="form-label">End Date</label>
              <input type="date" class="form-control" id="endDate">
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="applyCustomRange">Apply</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let performanceChart = null;
    let teamStatusChart = null;
    let dashboardData = null;
    let currentDateRange = 30; // Default to 30 Days
    let chartPeriod = 'day';
    let dateRangeModal = null;
    let customRangeModal = null;
    let sidebarCollapsed = false;
    
    // Small charts for KPIs
    let teamSizeSparkline = null;
    let answerRateSparkline = null;
    let talkTimeSparkline = null;
    let onQueueSparkline = null;
    
    // DOM Elements
    const sidebar = document.getElementById('sidebar');
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const refreshBtn = document.getElementById('refresh-btn');
    const dateRangeSelector = document.getElementById('date-range-selector');
    
    // Initialize dashboard when document is loaded
    document.addEventListener('DOMContentLoaded', function() {
      initializeDashboard();
      setupEventListeners();
    });
    
    function initializeDashboard() {
      showLoading();
      
      // Initialize modals
      dateRangeModal = new bootstrap.Modal(document.getElementById('dateRangeModal'));
      customRangeModal = new bootstrap.Modal(document.getElementById('customRangeModal'));
      
      // Set default date for custom range
      const today = new Date();
      document.getElementById('endDate').valueAsDate = today;
      
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(today.getDate() - 30);
      document.getElementById('startDate').valueAsDate = thirtyDaysAgo;
      
      // Load dashboard data
      loadDashboard();
    }
    
    function setupEventListeners() {
      // Sidebar toggle
      sidebarToggle.addEventListener('click', toggleSidebar);
      
      // Refresh button
      refreshBtn.addEventListener('click', refreshDashboard);
      
      // Date range selector
      dateRangeSelector.addEventListener('click', () => dateRangeModal.show());
      
      // Date range selection
      document.querySelectorAll('.list-group-item[data-range]').forEach(item => {
        item.addEventListener('click', handleDateRangeSelection);
      });
      
      // Apply custom range
      document.getElementById('applyCustomRange').addEventListener('click', applyCustomRange);
      
      // Navigation links
      document.querySelectorAll('.sidebar-menu-link').forEach(link => {
        link.addEventListener('click', handleNavigation);
      });
      
      // Chart period buttons
      document.querySelectorAll('[data-period]').forEach(button => {
        button.addEventListener('click', handleChartPeriodChange);
      });
    }
    
    function toggleSidebar() {
      sidebarCollapsed = !sidebarCollapsed;
      sidebar.classList.toggle('collapsed', sidebarCollapsed);
      
      // Save preference
      localStorage.setItem('sidebarCollapsed', sidebarCollapsed);
    }
    
    function loadSavedPreferences() {
      // Load sidebar state
      const savedSidebarState = localStorage.getItem('sidebarCollapsed');
      if (savedSidebarState === 'true') {
        sidebarCollapsed = true;
        sidebar.classList.add('collapsed');
      }
    }
    
    function refreshDashboard() {
      showLoading();
      loadDashboard();
    }
    
    function handleDateRangeSelection(e) {
      const range = e.target.dataset.range;
      
      if (range === 'custom') {
        customRangeModal.show();
        return;
      }
      
      currentDateRange = parseInt(range);
      document.getElementById('date-range-text').textContent = `Last ${currentDateRange} Days`;
      
      // Reload dashboard with new date range
      loadDashboard();
    }
    
    function applyCustomRange() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      
      if (!startDate || !endDate) {
        showNotification('Please select both start and end dates', 'error');
        return;
      }
      
      const start = new Date(startDate);
      const end = new Date(endDate);
      
      if (start > end) {
        showNotification('Start date cannot be after end date', 'error');
        return;
      }
      
      // Format dates for display
      const formattedStart = formatDate(start);
      const formattedEnd = formatDate(end);
      document.getElementById('date-range-text').textContent = `${formattedStart} - ${formattedEnd}`;
      
      // Set custom range and reload
      currentDateRange = 'custom';
      customRangeModal.hide();
      
      // Reload dashboard with custom range
      loadDashboard();
    }
    
    function handleNavigation(e) {
      e.preventDefault();
      const page = e.currentTarget.dataset.page;
      navigateTo(page);
    }
    
    function handleChartPeriodChange(e) {
      const period = e.target.dataset.period;
      chartPeriod = period;
      
      // Update active button
      document.querySelectorAll('[data-period]').forEach(btn => {
        btn.classList.remove('active');
      });
      e.target.classList.add('active');
      
      // Update chart
      updatePerformanceChart(period);
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const overlay = document.getElementById('loading-overlay');
      overlay.style.opacity = '0';
      setTimeout(() => {
        overlay.style.display = 'none';
        overlay.style.opacity = '1';
      }, 300);
    }
    
    function loadDashboard() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleDashboardData)
        .withFailureHandler(handleError)
        .getDashboardData();
    }
    
    function handleDashboardData(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification(result ? result.message : 'Failed to load dashboard data', 'error');
        return;
      }
      
      dashboardData = result.data;
      
      // Update UI components
      updateKPIs();
      updateAttentionAreas();
      updateActionItems();
      updateScheduleList();
      updateOneOnOnesList();
      updateQAReviewsList();
      initializeCharts();
    }
    
    function updateKPIs() {
      const teamInfo = dashboardData.teamInfo || {};
      const metrics = dashboardData.metricsSummary || {};
      const metricsStatus = dashboardData.metricsStatus || {};
      
      // Team Size
      document.getElementById('team-size').textContent = teamInfo.activeMembers || '--';
      
      const totalMembers = teamInfo.totalMembers || 0;
      const activeMembers = teamInfo.activeMembers || 0;
      const teamTrend = totalMembers > 0 ? Math.round((activeMembers / totalMembers) * 100) : 0;
      document.getElementById('team-trend').textContent = `${teamTrend}% active`;
      
      // Answer Rate
      updateKPIStatus('answer-rate', metrics.answerRate, '%', metricsStatus.answerRate);
      
      // Talk Time
      updateKPIStatus('talk-time', metrics.avgTalkTime, ' min', metricsStatus.avgTalkTime);
      
      // On Queue %
      updateKPIStatus('on-queue', metrics.onQueuePercentage, '%', metricsStatus.onQueuePercentage);
      
      // Additional summary metrics
      document.getElementById('qa-average').textContent = 
        (dashboardData.qaSummary ? dashboardData.qaSummary.averageScore + '%' : '--');
        
      document.getElementById('one-on-one-coverage').textContent = 
        (dashboardData.oneOnOneSummary ? dashboardData.oneOnOneSummary.coverage + '%' : '--');
      
      // Initialize mini sparkline charts
      initializeSparklineCharts();
    }
    
    function updateKPIStatus(id, value, unit, status) {
      const element = document.getElementById(id);
      const statusElement = document.getElementById(`${id}-status`);
      const trendIcon = document.getElementById(`${id}-trend-icon`);
      const trendText = document.getElementById(`${id}-trend`);
      
      // Set value
      element.textContent = value !== undefined ? value + unit : '--' + unit;
      
      // Set status and trend
      if (status) {
        if (status.status === 'success') {
          statusElement.className = 'kpi-status status-success';
          trendIcon.className = 'kpi-trend-icon kpi-trend-up';
          trendIcon.innerHTML = '<i class="fas fa-arrow-up"></i>';
          trendText.textContent = 'Meeting Goal';
        } else if (status.status === 'warning') {
          statusElement.className = 'kpi-status status-warning';
          trendIcon.className = 'kpi-trend-icon kpi-trend-down';
          trendIcon.innerHTML = '<i class="fas fa-arrow-down"></i>';
          trendText.textContent = 'Below Goal';
        } else {
          statusElement.className = 'kpi-status status-danger';
          trendIcon.className = 'kpi-trend-icon kpi-trend-down';
          trendIcon.innerHTML = '<i class="fas fa-arrow-down"></i>';
          trendText.textContent = 'Attention Needed';
        }
        
        if (status.target) {
          trendText.textContent = `Target: ${status.target}`;
        }
      }
    }
    
    function initializeSparklineCharts() {
      // Mini sparkline options
      const sparklineOptions = {
        chart: {
          type: 'line',
          height: 30,
          width: 70,
          sparkline: {
            enabled: true
          },
          animations: {
            enabled: true,
            speed: 500
          },
        },
        stroke: {
          curve: 'smooth',
          width: 2
        },
        fill: {
          opacity: 0.3,
          type: 'gradient',
          gradient: {
            shade: 'light',
            type: 'vertical',
            opacityFrom: 0.3,
            opacityTo: 0
          }
        },
        tooltip: {
          enabled: false
        }
      };
      
      // Generate random data for demo purposes
      // In production, this would use real historical data
      const generateData = (count = 10) => {
        return Array.from({ length: count }, () => Math.floor(Math.random() * 50) + 50);
      };
      
      // Team Size Sparkline
      if (teamSizeSparkline) teamSizeSparkline.destroy();
      teamSizeSparkline = new ApexCharts(document.getElementById('team-size-chart'), {
        ...sparklineOptions,
        colors: ['#4361ee'],
        series: [{
          name: 'Team Size',
          data: generateData()
        }]
      });
      teamSizeSparkline.render();
      
      // Answer Rate Sparkline
      const answerRateStatus = dashboardData.metricsStatus?.answerRate?.status || 'success';
      if (answerRateSparkline) answerRateSparkline.destroy();
      answerRateSparkline = new ApexCharts(document.getElementById('answer-rate-chart'), {
        ...sparklineOptions,
        colors: [answerRateStatus === 'success' ? '#4cc9f0' : 
                answerRateStatus === 'warning' ? '#f72585' : '#e5383b'],
        series: [{
          name: 'Answer Rate',
          data: generateData()
        }]
      });
      answerRateSparkline.render();
      
      // Talk Time Sparkline
      const talkTimeStatus = dashboardData.metricsStatus?.avgTalkTime?.status || 'success';
      if (talkTimeSparkline) talkTimeSparkline.destroy();
      talkTimeSparkline = new ApexCharts(document.getElementById('talk-time-chart'), {
        ...sparklineOptions,
        colors: [talkTimeStatus === 'success' ? '#4cc9f0' : 
               talkTimeStatus === 'warning' ? '#f72585' : '#e5383b'],
        series: [{
          name: 'Talk Time',
          data: generateData()
        }]
      });
      talkTimeSparkline.render();
      
      // On Queue Sparkline
      const onQueueStatus = dashboardData.metricsStatus?.onQueuePercentage?.status || 'success';
      if (onQueueSparkline) onQueueSparkline.destroy();
      onQueueSparkline = new ApexCharts(document.getElementById('on-queue-chart'), {
        ...sparklineOptions,
        colors: [onQueueStatus === 'success' ? '#4cc9f0' : 
               onQueueStatus === 'warning' ? '#f72585' : '#e5383b'],
        series: [{
          name: 'On Queue %',
          data: generateData()
        }]
      });
      onQueueSparkline.render();
    }
    
    function updateAttentionAreas() {
      const container = document.getElementById('attention-list');
      const countElement = document.getElementById('attention-count');
      
      const overdueOneOnOnes = dashboardData.overdueOneOnOnes || {};
      const overdueItems = (overdueOneOnOnes.overdue || []).concat(overdueOneOnOnes.needsFirstSession || []);
      
      // Update count
      countElement.textContent = overdueItems.length;
      
      // Clear container
      container.innerHTML = '';
      
      if (overdueItems.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-check-circle"></i>
            </div>
            <div class="empty-state-text">No critical attention areas at this time.</div>
          </div>
        `;
        return;
      }
      
      // Create list items
      overdueItems.forEach(item => {
        const isFirstSession = !item.lastSessionDate;
        const overdueText = isFirstSession ? 'Needs first session' : `${item.daysOverdue} days overdue`;
        
        const listItem = document.createElement('div');
        listItem.className = 'list-item';
        listItem.innerHTML = `
          <div class="list-item-icon">
            <i class="fas fa-user"></i>
          </div>
          <div class="list-item-content">
            <h3 class="list-item-title">${item.teamMemberName || item.teamMemberEmail}</h3>
            <div class="list-item-subtitle">${overdueText}</div>
          </div>
          <span class="list-badge badge-danger">1:1 Overdue</span>
        `;
        
        listItem.addEventListener('click', () => navigateTo('one-on-ones', item.teamMemberEmail));
        container.appendChild(listItem);
      });
    }
    
    function updateActionItems() {
      const container = document.getElementById('action-items-list');
      const items = dashboardData.actionItems || [];
      
      // Clear container
      container.innerHTML = '';
      
      if (items.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-check-circle"></i>
            </div>
            <div class="empty-state-text">No pending action items.</div>
          </div>
        `;
        return;
      }
      
      // Create list items
      items.slice(0, 5).forEach(item => {
        const dueDate = new Date(item.dueDate);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        let badgeClass = 'badge-primary';
        let badgeText = 'Pending';
        
        if (dueDate < today) {
          badgeClass = 'badge-danger';
          badgeText = 'Overdue';
        } else if (dueDate.getTime() === today.getTime()) {
          badgeClass = 'badge-warning';
          badgeText = 'Due Today';
        }
        
        const listItem = document.createElement('div');
        listItem.className = 'list-item';
        listItem.innerHTML = `
          <div class="list-item-icon">
            <i class="fas fa-tasks"></i>
          </div>
          <div class="list-item-content">
            <h3 class="list-item-title">${item.title}</h3>
            <div class="list-item-subtitle">
              ${item.teamMemberName || item.teamMemberEmail} · Due: ${formatDate(dueDate)}
            </div>
          </div>
          <span class="list-badge ${badgeClass}">${badgeText}</span>
        `;
        
        listItem.addEventListener('click', () => navigateTo('action-items', item.id));
        container.appendChild(listItem);
      });
      
      // Add "View More" if needed
      if (items.length > 5) {
        const viewMore = document.createElement('div');
        viewMore.className = 'list-item text-center';
        viewMore.innerHTML = `
          <span class="text-primary">View ${items.length - 5} more action items</span>
        `;
        viewMore.style.cursor = 'pointer';
        viewMore.addEventListener('click', () => navigateTo('action-items'));
        container.appendChild(viewMore);
      }
    }
    
    function updateScheduleList() {
      const container = document.getElementById('schedule-list');
      const events = dashboardData.todayEvents || [];
      
      // Clear container
      container.innerHTML = '';
      
      if (events.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-calendar-day"></i>
            </div>
            <div class="empty-state-text">No events scheduled for today.</div>
          </div>
        `;
        return;
      }
      
      // Create list items
      events.forEach(event => {
        let iconClass = 'fa-calendar-check';
        let badgeClass = 'badge-secondary';
        
        if (event.type === 'one-on-one') {
          iconClass = 'fa-user-friends';
          badgeClass = 'badge-primary';
        } else if (event.type === 'qa-review') {
          iconClass = 'fa-clipboard-check';
          badgeClass = 'badge-success';
        } else if (event.type === 'meeting') {
          iconClass = 'fa-users';
          badgeClass = 'badge-info';
        }
        
        const listItem = document.createElement('div');
        listItem.className = 'list-item';
        listItem.innerHTML = `
          <div class="list-item-icon">
            <i class="fas ${iconClass}"></i>
          </div>
          <div class="list-item-content">
            <h3 class="list-item-title">${event.title}</h3>
            <div class="list-item-subtitle">
              <i class="far fa-clock me-1"></i> ${event.time}
            </div>
          </div>
          <span class="list-badge ${badgeClass}">${event.type.charAt(0).toUpperCase() + event.type.slice(1)}</span>
        `;
        
        container.appendChild(listItem);
      });
    }
    
    function updateOneOnOnesList() {
      const container = document.getElementById('one-on-ones-list');
      const sessions = dashboardData.upcomingOneOnOnes || [];
      
      // Clear container
      container.innerHTML = '';
      
      if (sessions.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-user-friends"></i>
            </div>
            <div class="empty-state-text">No upcoming one-on-ones.</div>
          </div>
        `;
        return;
      }
      
      // Create list items
      sessions.forEach(session => {
        const sessionDate = new Date(session.date);
        
        const listItem = document.createElement('div');
        listItem.className = 'list-item';
        listItem.innerHTML = `
                    <div class="list-item-content">
            <h3 class="list-item-title">${session.teamMemberName || session.teamMemberEmail}</h3>
            <div class="list-item-subtitle">
              <i class="far fa-calendar-alt me-1"></i> ${formatDate(sessionDate)}
            </div>
          </div>
          <span class="list-badge badge-primary">Scheduled</span>
        `;
        
        listItem.addEventListener('click', () => navigateTo('one-on-ones', session.id));
        container.appendChild(listItem);
      });
    }
    
    function updateQAReviewsList() {
      const container = document.getElementById('qa-reviews-list');
      const reviews = dashboardData.recentQAReviews || [];
      
      // Clear container
      container.innerHTML = '';
      
      if (reviews.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-clipboard-check"></i>
            </div>
            <div class="empty-state-text">No recent QA reviews.</div>
          </div>
        `;
        return;
      }
      
      // Create list items
      reviews.forEach(review => {
        const reviewDate = new Date(review.reviewDate);
        
        let badgeClass = 'badge-primary';
        if (review.qualityStatus === 'Excellent') {
          badgeClass = 'badge-success';
        } else if (review.qualityStatus === 'Needs Improvement') {
          badgeClass = 'badge-warning';
        }
        
        const listItem = document.createElement('div');
        listItem.className = 'list-item';
        listItem.innerHTML = `
          <div class="list-item-icon">
            <i class="fas fa-clipboard-check"></i>
          </div>
          <div class="list-item-content">
            <h3 class="list-item-title">${review.teamMemberName || review.teamMemberEmail}</h3>
            <div class="list-item-subtitle">
              <i class="far fa-calendar-alt me-1"></i> ${formatDate(reviewDate)}
              <span class="ms-1">${review.percentageScore || 0}%</span>
            </div>
          </div>
          <span class="list-badge ${badgeClass}">${review.qualityStatus}</span>
        `;
        
        listItem.addEventListener('click', () => navigateTo('qa-reviews', review.id));
        container.appendChild(listItem);
      });
    }
    
    function initializeCharts() {
      initializePerformanceChart();
      initializeTeamStatusChart();
    }
    
    function initializePerformanceChart() {
      const performanceData = preparePerformanceChartData(chartPeriod);
      
      const options = {
        chart: {
          type: 'line',
          height: 300,
          fontFamily: getComputedStyle(document.body).fontFamily,
          toolbar: {
            show: false
          },
          animations: {
            enabled: true,
            easing: 'easeinout',
            speed: 800
          },
          background: 'transparent',
        },
        colors: ['#4361ee', '#4cc9f0', '#f72585'],
        series: performanceData.series,
        dataLabels: {
          enabled: false
        },
        stroke: {
          curve: 'smooth',
          width: 3
        },
        grid: {
          borderColor: 'var(--border-color)',
          row: {
            colors: ['transparent', 'transparent'],
            opacity: 0.5
          },
          xaxis: {
            lines: {
              show: false
            }
          },
          padding: {
            top: 10,
            right: 0,
            bottom: 0,
            left: 10
          }
        },
        markers: {
          size: 4,
          hover: {
            size: 6
          }
        },
        xaxis: {
          categories: performanceData.categories,
          labels: {
            style: {
              colors: 'var(--text-secondary)',
              fontSize: '12px'
            }
          },
          axisTicks: {
            color: 'var(--border-color)'
          },
          axisBorder: {
            show: false
          }
        },
        yaxis: {
          labels: {
            style: {
              colors: 'var(--text-secondary)',
              fontSize: '12px'
            }
          }
        },
        legend: {
          position: 'top',
          horizontalAlign: 'right',
          floating: true,
          offsetY: -25,
          offsetX: -5,
          markers: {
            width: 12,
            height: 12,
            radius: 12
          },
          onItemClick: {
            toggleDataSeries: true
          },
          itemMargin: {
            horizontal: 10
          }
        },
        responsive: [{
          breakpoint: 576,
          options: {
            legend: {
              position: 'bottom',
              horizontalAlign: 'center',
              offsetY: 0
            }
          }
        }],
        tooltip: {
          theme: 'light',
          y: {
            formatter: function(value) {
              return value;
            }
          }
        }
      };
      
      if (performanceChart) {
        performanceChart.destroy();
      }
      
      performanceChart = new ApexCharts(document.getElementById('performance-chart'), options);
      performanceChart.render();
    }
    
    function initializeTeamStatusChart() {
      const options = {
        chart: {
          type: 'donut',
          height: 240,
          fontFamily: getComputedStyle(document.body).fontFamily,
          animations: {
            enabled: true,
            easing: 'easeinout',
            speed: 600,
            animateGradually: {
              enabled: true,
              delay: 150
            },
            dynamicAnimation: {
              enabled: true,
              speed: 350
            }
          }
        },
        colors: ['#4cc9f0', '#4361ee', '#f72585'],
        series: createTeamStatusData(),
        labels: ['On Track', 'Need Attention', 'Overdue'],
        dataLabels: {
          enabled: false
        },
        legend: {
          position: 'bottom',
          markers: {
            width: 12,
            height: 12,
            radius: 12
          },
          itemMargin: {
            horizontal: 15,
            vertical: 5
          },
          formatter: function(seriesName, opts) {
            return seriesName + ': ' + opts.w.globals.series[opts.seriesIndex];
          }
        },
        tooltip: {
          y: {
            formatter: function(val) {
              return val + ' members';
            }
          }
        },
        plotOptions: {
          pie: {
            donut: {
              size: '55%',
              background: 'transparent',
              labels: {
                show: true,
                name: {
                  show: true
                },
                value: {
                  show: true,
                  fontSize: '20px',
                  fontWeight: 700,
                  color: 'var(--text-primary)',
                  formatter: function(val) {
                    return val;
                  }
                },
                total: {
                  show: true,
                  label: 'Total',
                  fontSize: '14px',
                  fontWeight: 700,
                  color: 'var(--text-secondary)',
                  formatter: function(w) {
                    return w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                  }
                }
              }
            }
          }
        }
      };
      
      if (teamStatusChart) {
        teamStatusChart.destroy();
      }
      
      teamStatusChart = new ApexCharts(document.getElementById('team-status-chart'), options);
      teamStatusChart.render();
    }
    
    function preparePerformanceChartData(period) {
      // This would normally use real data from dashboardData
      // For demo purposes we'll generate sample data
      const categories = [];
      const answerRateData = [];
      const onQueueData = [];
      const talkTimeData = [];
      
      // Generate sample data based on period
      const today = new Date();
      const numPoints = period === 'day' ? 14 : period === 'week' ? 8 : 6;
      
      for (let i = 0; i < numPoints; i++) {
        const date = new Date();
        
        if (period === 'day') {
          date.setDate(today.getDate() - (numPoints - i - 1));
          categories.push(formatDate(date, 'short'));
        } else if (period === 'week') {
          date.setDate(today.getDate() - 7 * (numPoints - i - 1));
          categories.push(`Week ${i + 1}`);
        } else {
          date.setMonth(today.getMonth() - (numPoints - i - 1));
          categories.push(formatDate(date, 'month'));
        }
        
        // Generate random data with upward trend
        const baseAnswerRate = 90 + (i * 0.3) + (Math.random() * 5);
        answerRateData.push(parseFloat(baseAnswerRate.toFixed(1)));
        
        const baseOnQueue = 60 + (i * 0.5) + (Math.random() * 8);
        onQueueData.push(parseFloat(baseOnQueue.toFixed(1)));
        
        const baseTalkTime = 15 + (i * 0.1) + (Math.random() * 3);
        talkTimeData.push(parseFloat(baseTalkTime.toFixed(1)));
      }
      
      return {
        categories: categories,
        series: [
          {
            name: 'Answer Rate (%)',
            data: answerRateData
          },
          {
            name: 'On Queue (%)',
            data: onQueueData
          },
          {
            name: 'Avg Talk Time (min)',
            data: talkTimeData
          }
        ]
      };
    }
    
    function createTeamStatusData() {
      const teamInfo = dashboardData.teamInfo || {};
      const overdueOneOnOnes = dashboardData.overdueOneOnOnes || {};
      
      // Calculate team status numbers
      const overdue = (overdueOneOnOnes.overdue?.length || 0) + (overdueOneOnOnes.needsFirstSession?.length || 0);
      const needAttention = overdueOneOnOnes.upcoming?.length || 0;
      const onTrack = (teamInfo.activeMembers || 0) - overdue - needAttention;
      
      return [
        Math.max(0, onTrack), // On Track
        needAttention,        // Need Attention
        overdue               // Overdue
      ];
    }
    
    function updatePerformanceChart(period) {
      const chartData = preparePerformanceChartData(period);
      
      performanceChart.updateOptions({
        xaxis: {
          categories: chartData.categories
        }
      });
      
      performanceChart.updateSeries(chartData.series);
    }
    
    function navigateTo(page, id = null) {
      switch (page) {
        case 'dashboard':
          // Already on dashboard, just refresh
          loadDashboard();
          break;
        case 'one-on-ones':
          google.script.run.showOneOnOnes(id);
          google.script.host.close();
          break;
        case 'qa-reviews':
          google.script.run.showQAReviews(id);
          google.script.host.close();
          break;
        case 'metrics':
          google.script.run.showMetrics();
          google.script.host.close();
          break;
        case 'action-items':
          google.script.run.showActionItems(id);
          google.script.host.close();
          break;
        case 'team':
          google.script.run.showTeamMembers();
          google.script.host.close();
          break;
        case 'settings':
          google.script.run.showSettings();
          google.script.host.close();
          break;
      }
    }
    
    function formatDate(dateStr, format = 'default') {
      if (!dateStr) return '';
      
      const date = new Date(dateStr);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const tomorrow = new Date(today);
      tomorrow.setDate(today.getDate() + 1);
      
      const yesterday = new Date(today);
      yesterday.setDate(today.getDate() - 1);
      
      // Check for today/yesterday/tomorrow
      if (format === 'default') {
        if (date.toDateString() === today.toDateString()) {
          return 'Today';
        } else if (date.toDateString() === yesterday.toDateString()) {
          return 'Yesterday';
        } else if (date.toDateString() === tomorrow.toDateString()) {
          return 'Tomorrow';
        }
      }
      
      // Format based on requested style
      if (format === 'short') {
        return date.toLocaleDateString(undefined, { month: 'short', day: 'numeric' });
      } else if (format === 'month') {
        return date.toLocaleDateString(undefined, { month: 'short' });
      } else if (format === 'time') {
        return date.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' });
      } else {
        // Default format
        return date.toLocaleDateString();
      }
    }
    
    function showNotification(message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = 'notification';
      
      // Set notification style
      let backgroundColor = 'rgba(67, 97, 238, 0.9)'; // Primary/Info color
      let icon = 'info-circle';
      
      if (type === 'success') {
        backgroundColor = 'rgba(76, 201, 240, 0.9)';
        icon = 'check-circle';
      } else if (type === 'error') {
        backgroundColor = 'rgba(229, 56, 59, 0.9)';
        icon = 'exclamation-circle';
      } else if (type === 'warning') {
        backgroundColor = 'rgba(247, 37, 133, 0.9)';
        icon = 'exclamation-triangle';
      }
      
      // Create notification content
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${icon}"></i>
        </div>
        <div class="notification-message">${message}</div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Style notification
      Object.assign(notification.style, {
        position: 'fixed',
        bottom: '20px',
        right: '20px',
        zIndex: '9999',
        display: 'flex',
        alignItems: 'center',
        padding: '12px 20px',
        background: backgroundColor,
        color: 'white',
        borderRadius: '8px',
        boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
        maxWidth: '350px',
        transform: 'translateX(400px)',
        transition: 'transform 0.3s ease',
        opacity: 0
      });
      
      // Style icon
      Object.assign(notification.querySelector('.notification-icon').style, {
        marginRight: '12px',
        fontSize: '18px'
      });
      
      // Style message
      Object.assign(notification.querySelector('.notification-message').style, {
        flex: '1',
        fontSize: '14px'
      });
      
      // Style close button
      const closeButton = notification.querySelector('.notification-close');
      Object.assign(closeButton.style, {
        background: 'none',
        border: 'none',
        color: 'white',
        opacity: '0.7',
        cursor: 'pointer',
        fontSize: '14px',
        marginLeft: '12px',
        padding: '0'
      });
      
      // Add close button functionality
      closeButton.addEventListener('click', () => {
        notification.style.transform = 'translateX(400px)';
        notification.style.opacity = '0';
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      });
      
      // Add to document
      document.body.appendChild(notification);
      
      // Show notification with animation
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
        notification.style.opacity = '1';
      }, 10);
      
      // Auto hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.style.transform = 'translateX(400px)';
          notification.style.opacity = '0';
          setTimeout(() => {
            if (document.body.contains(notification)) {
              document.body.removeChild(notification);
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification(error.message || 'An unexpected error occurred', 'error');
    }
    
    // Load saved preferences on startup
    window.addEventListener('load', () => {
      loadSavedPreferences();
    });
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      overflow-x: hidden;
    }
    
    /* App Layout */
    .app-container {
      display: grid;
      grid-template-columns: auto 1fr;
      grid-template-rows: auto 1fr;
      grid-template-areas: 
        "sidebar header"
        "sidebar content";
      height: 100vh;
      width: 100vw;
      overflow: hidden;
    }
    
    /* Modern Sidebar */
    .app-sidebar {
      grid-area: sidebar;
      width: 250px;
      background-color: var(--surface);
      border-right: 1px solid var(--border-color);
      display: flex;
      flex-direction: column;
      transition: var(--transition);
      z-index: 100;
      box-shadow: var(--shadow-sm);
    }
    
    .app-sidebar.collapsed {
      width: 70px;
    }
    
    .sidebar-header {
      padding: 1.5rem;
      display: flex;
      align-items: center;
      border-bottom: 1px solid var(--border-color);
    }
    
    .sidebar-logo {
      font-weight: 700;
      font-size: 1.25rem;
      display: flex;
      align-items: center;
    }
    
    .sidebar-logo-icon {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      margin-right: 12px;
      flex-shrink: 0;
    }
    
    .sidebar-logo-text {
      transition: var(--transition);
      white-space: nowrap;
      overflow: hidden;
    }
    
    .app-sidebar.collapsed .sidebar-logo-text {
      opacity: 0;
      width: 0;
    }
    
    .sidebar-toggle {
      margin-left: auto;
      width: 28px;
      height: 28px;
      border-radius: 6px;
      background: var(--surface-hover);
      border: none;
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .sidebar-toggle:hover {
      background: var(--primary-light);
      color: var(--primary);
    }
    
    .app-sidebar.collapsed .sidebar-toggle i {
      transform: rotate(180deg);
    }
    
    .sidebar-menu {
      list-style: none;
      padding: 1.25rem 0;
      margin: 0;
      flex: 1;
      overflow-y: auto;
    }
    
    .sidebar-menu-item {
      position: relative;
      margin: 0.25rem 0.75rem;
    }
    
    .sidebar-menu-link {
      display: flex;
      align-items: center;
      padding: 0.75rem 1rem;
      color: var(--text-secondary);
      text-decoration: none;
      border-radius: 8px;
      transition: var(--transition);
      overflow: hidden;
      white-space: nowrap;
    }
    
    .sidebar-menu-link:hover {
      color: var(--primary);
      background-color: var(--primary-light);
    }
    
    .sidebar-menu-link.active {
      color: var(--primary);
      background-color: var(--primary-light);
      font-weight: 500;
    }
    
    .sidebar-menu-icon {
      width: 1.25rem;
      text-align: center;
      margin-right: 1rem;
      font-size: 1rem;
      transition: var(--transition);
    }
    
    .sidebar-menu-text {
      transition: var(--transition);
      opacity: 1;
    }
    
    .app-sidebar.collapsed .sidebar-menu-text {
      opacity: 0;
      width: 0;
    }
    
    .app-sidebar.collapsed .sidebar-menu-link {
      padding: 0.75rem;
      justify-content: center;
    }
    
    .app-sidebar.collapsed .sidebar-menu-icon {
      margin-right: 0;
      font-size: 1.25rem;
    }
    
    /* Header */
    .app-header {
      grid-area: header;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1.5rem;
      background-color: var(--surface);
      border-bottom: 1px solid var(--border-color);
      box-shadow: var(--shadow-sm);
      z-index: 99;
    }
    
    .header-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .header-actions {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .header-action-btn {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: var(--surface);
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
      position: relative;
    }
    
    .header-action-btn:hover {
      background: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
      transform: translateY(-2px);
    }
    
    .header-date-range {
      background: var(--surface);
      border: 1px solid var(--border-color);
      padding: 0.5rem 1rem;
      border-radius: 8px;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: var(--text-secondary);
      font-size: 0.875rem;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .header-date-range:hover {
      background: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .header-notification-count {
      position: absolute;
      top: -5px;
      right: -5px;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background: var(--danger);
      color: white;
      font-size: 0.65rem;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    /* Content Area */
    .app-content {
      grid-area: content;
      overflow-y: auto;
      padding: 1.5rem;
      background-color: #f5f7ff;
      position: relative;
    }
    
    /* Dashboard Grid */
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      gap: 1.25rem;
    }
    
    .grid-col-12 { grid-column: span 12; }
    .grid-col-8 { grid-column: span 8; }
    .grid-col-6 { grid-column: span 6; }
    .grid-col-4 { grid-column: span 4; }
    .grid-col-3 { grid-column: span 3; }
    
    @media (max-width: 1199px) {
      .grid-col-4 { grid-column: span 6; }
      .grid-col-3 { grid-column: span 6; }
    }
    
    @media (max-width: 991px) {
      .grid-col-6 { grid-column: span 12; }
    }
    
    @media (max-width: 767px) {
      .grid-col-3, .grid-col-4 { grid-column: span 12; }
    }
    
    /* Card Styles */
    .dashboard-card {
      background: var(--surface);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      height: 100%;
      position: relative;
      overflow: hidden;
    }
    
    .dashboard-card:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-3px);
    }
    
    .card-header {
      padding: 1.25rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-bottom: 1px solid var(--border-color);
    }
    
    .card-title {
      font-size: 1rem;
      font-weight: 600;
      color: var(--text-primary);
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      margin-right: 0.75rem;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      font-size: 1rem;
      color: white;
    }
    
    .card-body {
      padding: 1.25rem;
    }
    
    .card-footer {
      padding: 1rem 1.25rem;
      border-top: 1px solid var(--border-color);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    /* KPI Cards */
    .kpi-card {
      position: relative;
      display: flex;
      flex-direction: column;
      border-radius: var(--border-radius);
      background: var(--surface);
      padding: 1.25rem;
      margin-bottom: 1.25rem;
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      overflow: hidden;
    }
    
    .kpi-card:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-3px);
    }
    
    .kpi-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      height: 4px;
      width: 100%;
      background: linear-gradient(to right, var(--primary), var(--secondary));
      opacity: 0;
      transition: var(--transition);
    }
    
    .kpi-card:hover::before {
      opacity: 1;
    }
    
    .kpi-label {
      color: var(--text-secondary);
      font-weight: 500;
      font-size: 0.875rem;
      margin-bottom: 0.25rem;
    }
    
    .kpi-value {
      color: var(--text-primary);
      font-weight: 700;
      font-size: 1.75rem;
      line-height: 1.2;
      margin-bottom: 0.75rem;
      transition: var(--transition);
    }
    
    .kpi-card:hover .kpi-value {
      color: var(--primary);
    }
    
    .kpi-trend {
      display: flex;
      align-items: center;
      font-size: 0.75rem;
      font-weight: 500;
    }
    
    .kpi-trend-icon {
      margin-right: 0.375rem;
      display: flex;
      align-items: center;
    }
    
    .kpi-trend-up {
      color: var(--success);
    }
    
    .kpi-trend-down {
      color: var(--danger);
    }
    
    .kpi-trend-flat {
      color: var(--text-secondary);
    }
    
    .kpi-chart {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 72px;
      height: 32px;
      opacity: 0.2;
      transition: var(--transition);
    }
    
    .kpi-card:hover .kpi-chart {
      opacity: 0.4;
    }
    
    .kpi-status {
      position: absolute;
      top: 1.25rem;
      right: 1.25rem;
      width: 8px;
      height: 8px;
      border-radius: 50%;
    }
    
    .status-success {
      background-color: var(--success);
    }
    
    .status-warning {
      background-color: var(--warning);
    }
    
    .status-danger {
      background-color: var(--danger);
    }
    
    /* List Items */
    .list-container {
      max-height: 350px;
      overflow-y: auto;
    }
    
    .list-item {
      display: flex;
      align-items: center;
      padding: 0.875rem 1rem;
      border-bottom: 1px solid var(--border-color);
      transition: var(--transition);
      cursor: pointer;
      position: relative;
    }
    
    .list-item:last-child {
      border-bottom: none;
    }
    
    .list-item::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 3px;
      height: 100%;
      background-color: var(--primary);
      opacity: 0;
      transition: var(--transition);
    }
    
    .list-item:hover {
      background-color: var(--surface-hover);
    }
    
    .list-item:hover::after {
      opacity: 1;
    }
    
    .list-item-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--primary-light);
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 1rem;
      flex-shrink: 0;
      font-size: 1rem;
      transition: var(--transition);
    }
    
    .list-item:hover .list-item-icon {
      background: var(--primary);
      color: white;
      transform: scale(1.1);
    }
    
    .list-item-content {
      flex: 1;
      min-width: 0;
    }
    
    .list-item-title {
      font-weight: 500;
      color: var(--text-primary);
      margin: 0;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: var(--transition);
    }
    
    .list-item:hover .list-item-title {
      color: var(--primary);
    }
    
    .list-item-subtitle {
      color: var(--text-secondary);
      font-size: 0.75rem;
      margin-top: 0.25rem;
    }
    
    .list-item-action {
      flex-shrink: 0;
      margin-left: 0.5rem;
      opacity: 0;
      transition: var(--transition);
    }
    
    .list-item:hover .list-item-action {
      opacity: 1;
    }
    
    .list-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 6px;
      font-size: 0.7rem;
      font-weight: 600;
      flex-shrink: 0;
      margin-left: 0.5rem;
    }
    
    .badge-primary {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .badge-success {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .badge-warning {
      background-color: var(--warning-light);
      color: var(--warning);
    }
    
    .badge-danger {
      background-color: var(--danger-light);
      color: var(--danger);
    }
    
    .badge-info {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    /* Chart Container */
    .chart-container {
      height: 300px;
      position: relative;
    }
    
    /* Loading Animation */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      z-index: 9999;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      transition: var(--transition);
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      position: relative;
    }
    
    .loading-spinner::before {
      content: '';
      position: absolute;
      top: -4px;
      left: -4px;
      right: -4px;
      bottom: -4px;
      border: 4px solid transparent;
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .loading-text {
      margin-top: 1rem;
      color: var(--primary);
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    /* Responsive Adjustments */
    @media (max-width: 991px) {
      .app-container {
        grid-template-areas: 
          "header header"
          "sidebar content";
      }
      
      .app-sidebar {
        position: fixed;
        height: 100%;
        transform: translateX(-100%);
      }
      
      .app-sidebar.open {
        transform: translateX(0);
      }
      
      .mobile-menu-btn {
        display: block;
      }
    }
    
    /* Animation Classes */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .animate-fade-in-up {
      animation: fadeInUp 0.6s ease forwards;
      opacity: 0;
    }
    
    .animate-delay-1 { animation-delay: 0.1s; }
    .animate-delay-2 { animation-delay: 0.2s; }
    .animate-delay-3 { animation-delay: 0.3s; }
    .animate-delay-4 { animation-delay: 0.4s; }
    .animate-delay-5 { animation-delay: 0.5s; }
    
    /* Empty State */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 3rem 0;
      text-align: center;
    }
    
    .empty-state-icon {
      font-size: 3rem;
      color: var(--text-secondary);
      opacity: 0.5;
      margin-bottom: 1rem;
    }
    
    .empty-state-text {
      color: var(--text-secondary);
      font-size: 0.875rem;
      max-width: 250px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <!-- Loading Animation -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading dashboard...</div>
  </div>
  
  <div class="app-container">
    <!-- Sidebar -->
    <aside class="app-sidebar" id="sidebar">
      <div class="sidebar-header">
        <div class="sidebar-logo">
          <div class="sidebar-logo-icon">
            <i class="fas fa-chart-pie"></i>
          </div>
          <div class="sidebar-logo-text">TeamLead</div>
        </div>
        <button id="sidebar-toggle" class="sidebar-toggle" aria-label="Toggle Sidebar">
          <i class="fas fa-angle-left"></i>
        </button>
      </div>
      
      <nav class="sidebar-menu">
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link active" data-page="dashboard">
            <span class="sidebar-menu-icon"><i class="fas fa-th-large"></i></span>
            <span class="sidebar-menu-text">Dashboard</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="one-on-ones">
            <span class="sidebar-menu-icon"><i class="fas fa-user-friends"></i></span>
            <span class="sidebar-menu-text">One-on-Ones</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="qa-reviews">
            <span class="sidebar-menu-icon"><i class="fas fa-clipboard-check"></i></span>
            <span class="sidebar-menu-text">QA Reviews</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="metrics">
            <span class="sidebar-menu-icon"><i class="fas fa-chart-line"></i></span>
            <span class="sidebar-menu-text">Metrics</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="action-items">
            <span class="sidebar-menu-icon"><i class="fas fa-tasks"></i></span>
            <span class="sidebar-menu-text">Action Items</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="team">
            <span class="sidebar-menu-icon"><i class="fas fa-users"></i></span>
            <span class="sidebar-menu-text">Team Members</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="settings">
            <span class="sidebar-menu-icon"><i class="fas fa-cog"></i></span>
            <span class="sidebar-menu-text">Settings</span>
          </a>
        </div>
      </nav>
    </aside>
    
    <!-- Header -->
    <header class="app-header">
      <div class="header-title">
        Dashboard Overview
      </div>
      
      <div class="header-actions">
        <div class="header-date-range" id="date-range-selector">
          <i class="far fa-calendar"></i>
          <span id="date-range-text">Last 30 Days</span>
          <i class="fas fa-chevron-down"></i>
        </div>
        
        <button id="refresh-btn" class="header-action-btn" aria-label="Refresh Dashboard">
          <i class="fas fa-sync-alt"></i>
        </button>
        
        <button class="header-action-btn" aria-label="Notifications">
          <i class="fas fa-bell"></i>
          <span class="header-notification-count">3</span>
        </button>
      </div>
    </header>
    
    <!-- Main Content -->
    <main class="app-content">
      <!-- KPI Cards Row -->
      <div class="dashboard-grid mb-4">
        <!-- Team Size KPI -->
        <div class="grid-col-3 animate-fade-in-up animate-delay-1">
          <div class="kpi-card">
            <span class="kpi-status status-success"></span>
            <div class="kpi-label">Team Size</div>
            <div class="kpi-value" id="team-size">--</div>
            <div class="kpi-trend">
              <span class="kpi-trend-icon kpi-trend-up">
                <i class="fas fa-arrow-up"></i>
              </span>
              <span id="team-trend">-- vs. last period</span>
            </div>
            <div class="kpi-chart" id="team-size-chart"></div>
          </div>
        </div>
        
        <!-- Answer Rate KPI -->
        <div class="grid-col-3 animate-fade-in-up animate-delay-2">
          <div class="kpi-card">
            <span class="kpi-status" id="answer-rate-status"></span>
            <div class="kpi-label">Answer Rate</div>
            <div class="kpi-value" id="answer-rate">--%</div>
            <div class="kpi-trend">
              <span class="kpi-trend-icon" id="answer-trend-icon">
                <i class="fas fa-arrow-up"></i>
              </span>
              <span id="answer-rate-trend">-- vs. target</span>
            </div>
            <div class="kpi-chart" id="answer-rate-chart"></div>
          </div>
        </div>
        
        <!-- Talk Time KPI -->
        <div class="grid-col-3 animate-fade-in-up animate-delay-3">
          <div class="kpi-card">
            <span class="kpi-status" id="talk-time-status"></span>
            <div class="kpi-label">Avg Talk Time</div>
            <div class="kpi-value" id="talk-time">-- min</div>
            <div class="kpi-trend">
              <span class="kpi-trend-icon" id="talk-time-trend-icon">
                <i class="fas fa-arrow-up"></i>
              </span>
              <span id="talk-time-trend">-- vs. target</span>
            </div>
            <div class="kpi-chart" id="talk-time-chart"></div>
          </div>
        </div>
        
        <!-- On Queue KPI -->
        <div class="grid-col-3 animate-fade-in-up animate-delay-4">
          <div class="kpi-card">
            <span class="kpi-status" id="on-queue-status"></span>
            <div class="kpi-label">On Queue %</div>
            <div class="kpi-value" id="on-queue">--%</div>
            <div class="kpi-trend">
              <span class="kpi-trend-icon" id="on-queue-trend-icon">
                <i class="fas fa-arrow-up"></i>
              </span>
              <span id="on-queue-trend">-- vs. target</span>
            </div>
            <div class="kpi-chart" id="on-queue-chart"></div>
          </div>
        </div>
      </div>
      
      <!-- Charts Row -->
      <div class="dashboard-grid mb-4">
        <!-- Performance Trends Chart -->
        <div class="grid-col-8 animate-fade-in-up animate-delay-1">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--primary);">
                  <i class="fas fa-chart-line"></i>
                </div>
                Performance Trends
              </h2>
              <div class="btn-group">
                <button class="btn btn-sm btn-outline-secondary active" id="chart-daily" data-period="day">Daily</button>
                <button class="btn btn-sm btn-outline-secondary" id="chart-weekly" data-period="week">Weekly</button>
                <button class="btn btn-sm btn-outline-secondary" id="chart-monthly" data-period="month">Monthly</button>
              </div>
            </div>
            <div class="card-body">
              <div id="performance-chart" class="chart-container"></div>
            </div>
          </div>
        </div>
        
        <!-- Team Status Chart -->
        <div class="grid-col-4 animate-fade-in-up animate-delay-2">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--success);">
                  <i class="fas fa-users"></i>
                </div>
                Team Status
              </h2>
            </div>
            <div class="card-body">
              <div id="team-status-chart" class="chart-container"></div>
              <div class="d-flex justify-content-around mt-3">
                <div class="text-center">
                  <div class="h4 mb-0" id="qa-average">--%</div>
                  <div class="text-muted small">Avg QA Score</div>
                </div>
                <div class="text-center">
                  <div class="h4 mb-0" id="one-on-one-coverage">--%</div>
                  <div class="text-muted small">1:1 Coverage</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Attention Areas Row -->
      <div class="dashboard-grid mb-4">
        <!-- Critical Attention Areas -->
        <div class="grid-col-6 animate-fade-in-up animate-delay-3">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--danger);">
                  <i class="fas fa-exclamation-circle"></i>
                </div>
                Critical Attention Areas
              </h2>
              <span class="badge badge-danger" id="attention-count">--</span>
            </div>
            <div class="card-body p-0">
              <div class="list-container" id="attention-list">
                <!-- Attention items will be loaded here -->
                <div class="empty-state">
                  <div class="empty-state-icon">
                    <i class="fas fa-spinner fa-spin"></i>
                  </div>
                  <div class="empty-state-text">Loading attention areas...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Action Items -->
        <div class="grid-col-6 animate-fade-in-up animate-delay-4">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--warning);">
                  <i class="fas fa-tasks"></i>
                </div>
                Action Items
              </h2>
              <button class="btn btn-sm btn-outline-primary" onclick="navigateTo('action-items')">View All</button>
            </div>
            <div class="card-body p-0">
              <div class="list-container" id="action-items-list">
                <!-- Action items will be loaded here -->
                <div class="empty-state">
                  <div class="empty-state-icon">
                    <i class="fas fa-spinner fa-spin"></i>
                  </div>
                  <div class="empty-state-text">Loading action items...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Recent Activity Row -->
      <div class="dashboard-grid">
        <!-- Today's Schedule -->
        <div class="grid-col-4 animate-fade-in-up animate-delay-1">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--info);">
                  <i class="fas fa-calendar-day"></i>
                </div>
                Today's Schedule
              </h2>
            </div>
            <div class="card-body p-0">
              <div class="list-container" id="schedule-list">
                <!-- Schedule items will be loaded here -->
                <div class="empty-state">
                  <div class="empty-state-icon">
                    <i class="fas fa-spinner fa-spin"></i>
                  </div>
                  <div class="empty-state-text">Loading schedule...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Recent One-on-Ones -->
        <div class="grid-col-4 animate-fade-in-up animate-delay-2">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--primary);">
                  <i class="fas fa-user-friends"></i>
                </div>
                Recent One-on-Ones
              </h2>
              <button class="btn btn-sm btn-outline-primary" onclick="navigateTo('one-on-ones')">View All</button>
            </div>
            <div class="card-body p-0">
              <div class="list-container" id="one-on-ones-list">
                <!-- One-on-ones will be loaded here -->
                <div class="empty-state">
                  <div class="empty-state-icon">
                    <i class="fas fa-spinner fa-spin"></i>
                  </div>
                  <div class="empty-state-text">Loading one-on-ones...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Recent QA Reviews -->
        <div class="grid-col-4 animate-fade-in-up animate-delay-3">
          <div class="dashboard-card">
            <div class="card-header">
              <h2 class="card-title">
                <div class="card-title-icon" style="background-color: var(--success);">
                  <i class="fas fa-clipboard-check"></i>
                </div>
                Recent QA Reviews
              </h2>
              <button class="btn btn-sm btn-outline-primary" onclick="navigateTo('qa-reviews')">View All</button>
            </div>
            <div class="card-body p-0">
              <div class="list-container" id="qa-reviews-list">
                <!-- QA reviews will be loaded here -->
                <div class="empty-state">
                  <div class="empty-state-icon">
                    <i class="fas fa-spinner fa-spin"></i>
                  </div>
                  <div class="empty-state-text">Loading QA reviews...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
  
  <!-- Date Range Modal -->
  <div class="modal fade" id="dateRangeModal" tabindex="-1" aria-labelledby="dateRangeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="dateRangeModalLabel">Select Date Range</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="list-group">
            <button type="button" class="list-group-item list-group-item-action" data-range="7" data-bs-dismiss="modal">
              Last 7 Days
            </button>
            <button type="button" class="list-group-item list-group-item-action" data-range="30" data-bs-dismiss="modal">
              Last 30 Days
            </button>
            <button type="button" class="list-group-item list-group-item-action" data-range="90" data-bs-dismiss="modal">
              Last 90 Days
            </button>
            <button type="button" class="list-group-item list-group-item-action" data-range="custom" data-bs-dismiss="modal">
              Custom Range...
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Custom Range Modal -->
  <div class="modal fade" id="customRangeModal" tabindex="-1" aria-labelledby="customRangeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="customRangeModalLabel">Custom Date Range</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="row g-3">
            <div class="col-6">
              <label for="startDate" class="form-label">Start Date</label>
              <input type="date" class="form-control" id="startDate">
            </div>
            <div class="col-6">
              <label for="endDate" class="form-label">End Date</label>
              <input type="date" class="form-control" id="endDate">
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="applyCustomRange">Apply</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let performanceChart = null;
    let teamStatusChart = null;
    let dashboardData = null;
    let currentDateRange = 30; // Default to 30 Days
    let chartPeriod = 'day';
    let dateRangeModal = null;
    let customRangeModal = null;
    let sidebarCollapsed = false;
    
    // Small charts for KPIs
    let teamSizeSparkline = null;
    let answerRateSparkline = null;
    let talkTimeSparkline = null;
    let onQueueSparkline = null;
    
    // DOM Elements
    const sidebar = document.getElementById('sidebar');
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const refreshBtn = document.getElementById('refresh-btn');
    const dateRangeSelector = document.getElementById('date-range-selector');
    
    // Initialize dashboard when document is loaded
    document.addEventListener('DOMContentLoaded', function() {
      initializeDashboard();
      setupEventListeners();
    });
    
    function initializeDashboard() {
      showLoading();
      
      // Initialize modals
      dateRangeModal = new bootstrap.Modal(document.getElementById('dateRangeModal'));
      customRangeModal = new bootstrap.Modal(document.getElementById('customRangeModal'));
      
      // Set default date for custom range
      const today = new Date();
      document.getElementById('endDate').valueAsDate = today;
      
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(today.getDate() - 30);
      document.getElementById('startDate').valueAsDate = thirtyDaysAgo;
      
      // Load dashboard data
      loadDashboard();
    }
    
    function setupEventListeners() {
      // Sidebar toggle
      sidebarToggle.addEventListener('click', toggleSidebar);
      
      // Refresh button
      refreshBtn.addEventListener('click', refreshDashboard);
      
      // Date range selector
      dateRangeSelector.addEventListener('click', () => dateRangeModal.show());
      
      // Date range selection
      document.querySelectorAll('.list-group-item[data-range]').forEach(item => {
        item.addEventListener('click', handleDateRangeSelection);
      });
      
      // Apply custom range
      document.getElementById('applyCustomRange').addEventListener('click', applyCustomRange);
      
      // Navigation links
      document.querySelectorAll('.sidebar-menu-link').forEach(link => {
        link.addEventListener('click', handleNavigation);
      });
      
      // Chart period buttons
      document.querySelectorAll('[data-period]').forEach(button => {
        button.addEventListener('click', handleChartPeriodChange);
      });
    }
    
    function toggleSidebar() {
      sidebarCollapsed = !sidebarCollapsed;
      sidebar.classList.toggle('collapsed', sidebarCollapsed);
      
      // Save preference
      localStorage.setItem('sidebarCollapsed', sidebarCollapsed);
    }
    
    function loadSavedPreferences() {
      // Load sidebar state
      const savedSidebarState = localStorage.getItem('sidebarCollapsed');
      if (savedSidebarState === 'true') {
        sidebarCollapsed = true;
        sidebar.classList.add('collapsed');
      }
    }
    
    function refreshDashboard() {
      showLoading();
      loadDashboard();
    }
    
    function handleDateRangeSelection(e) {
      const range = e.target.dataset.range;
      
      if (range === 'custom') {
        customRangeModal.show();
        return;
      }
      
      currentDateRange = parseInt(range);
      document.getElementById('date-range-text').textContent = `Last ${currentDateRange} Days`;
      
      // Reload dashboard with new date range
      loadDashboard();
    }
    
    function applyCustomRange() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      
      if (!startDate || !endDate) {
        showNotification('Please select both start and end dates', 'error');
        return;
      }
      
      const start = new Date(startDate);
      const end = new Date(endDate);
      
      if (start > end) {
        showNotification('Start date cannot be after end date', 'error');
        return;
      }
      
      // Format dates for display
      const formattedStart = formatDate(start);
      const formattedEnd = formatDate(end);
      document.getElementById('date-range-text').textContent = `${formattedStart} - ${formattedEnd}`;
      
      // Set custom range and reload
      currentDateRange = 'custom';
      customRangeModal.hide();
      
      // Reload dashboard with custom range
      loadDashboard();
    }
    
    function handleNavigation(e) {
      e.preventDefault();
      const page = e.currentTarget.dataset.page;
      navigateTo(page);
    }
    
    function handleChartPeriodChange(e) {
      const period = e.target.dataset.period;
      chartPeriod = period;
      
      // Update active button
      document.querySelectorAll('[data-period]').forEach(btn => {
        btn.classList.remove('active');
      });
      e.target.classList.add('active');
      
      // Update chart
      updatePerformanceChart(period);
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const overlay = document.getElementById('loading-overlay');
      overlay.style.opacity = '0';
      setTimeout(() => {
        overlay.style.display = 'none';
        overlay.style.opacity = '1';
      }, 300);
    }
    
    function loadDashboard() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleDashboardData)
        .withFailureHandler(handleError)
        .getDashboardData();
    }
    
    function handleDashboardData(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification(result ? result.message : 'Failed to load dashboard data', 'error');
        return;
      }
      
      dashboardData = result.data;
      
      // Update UI components
      updateKPIs();
      updateAttentionAreas();
      updateActionItems();
      updateScheduleList();
      updateOneOnOnesList();
      updateQAReviewsList();
      initializeCharts();
    }
    
    function updateKPIs() {
      const teamInfo = dashboardData.teamInfo || {};
      const metrics = dashboardData.metricsSummary || {};
      const metricsStatus = dashboardData.metricsStatus || {};
      
      // Team Size
      document.getElementById('team-size').textContent = teamInfo.activeMembers || '--';
      
      const totalMembers = teamInfo.totalMembers || 0;
      const activeMembers = teamInfo.activeMembers || 0;
      const teamTrend = totalMembers > 0 ? Math.round((activeMembers / totalMembers) * 100) : 0;
      document.getElementById('team-trend').textContent = `${teamTrend}% active`;
      
      // Answer Rate
      updateKPIStatus('answer-rate', metrics.answerRate, '%', metricsStatus.answerRate);
      
      // Talk Time
      updateKPIStatus('talk-time', metrics.avgTalkTime, ' min', metricsStatus.avgTalkTime);
      
      // On Queue %
      updateKPIStatus('on-queue', metrics.onQueuePercentage, '%', metricsStatus.onQueuePercentage);
      
      // Additional summary metrics
      document.getElementById('qa-average').textContent = 
        (dashboardData.qaSummary ? dashboardData.qaSummary.averageScore + '%' : '--');
        
      document.getElementById('one-on-one-coverage').textContent = 
        (dashboardData.oneOnOneSummary ? dashboardData.oneOnOneSummary.coverage + '%' : '--');
      
      // Initialize mini sparkline charts
      initializeSparklineCharts();
    }
    
    function updateKPIStatus(id, value, unit, status) {
      const element = document.getElementById(id);
      const statusElement = document.getElementById(`${id}-status`);
      const trendIcon = document.getElementById(`${id}-trend-icon`);
      const trendText = document.getElementById(`${id}-trend`);
      
      // Set value
      element.textContent = value !== undefined ? value + unit : '--' + unit;
      
      // Set status and trend
      if (status) {
        if (status.status === 'success') {
          statusElement.className = 'kpi-status status-success';
          trendIcon.className = 'kpi-trend-icon kpi-trend-up';
          trendIcon.innerHTML = '<i class="fas fa-arrow-up"></i>';
          trendText.textContent = 'Meeting Goal';
        } else if (status.status === 'warning') {
          statusElement.className = 'kpi-status status-warning';
          trendIcon.className = 'kpi-trend-icon kpi-trend-down';
          trendIcon.innerHTML = '<i class="fas fa-arrow-down"></i>';
          trendText.textContent = 'Below Goal';
        } else {
          statusElement.className = 'kpi-status status-danger';
          trendIcon.className = 'kpi-trend-icon kpi-trend-down';
          trendIcon.innerHTML = '<i class="fas fa-arrow-down"></i>';
          trendText.textContent = 'Attention Needed';
        }
        
        if (status.target) {
          trendText.textContent = `Target: ${status.target}`;
        }
      }
    }
    
    function initializeSparklineCharts() {
      // Mini sparkline options
      const sparklineOptions = {
        chart: {
          type: 'line',
          height: 30,
          width: 70,
          sparkline: {
            enabled: true
          },
          animations: {
            enabled: true,
            speed: 500
          },
        },
        stroke: {
          curve: 'smooth',
          width: 2
        },
        fill: {
          opacity: 0.3,
          type: 'gradient',
          gradient: {
            shade: 'light',
            type: 'vertical',
            opacityFrom: 0.3,
            opacityTo: 0
          }
        },
        tooltip: {
          enabled: false
        }
      };
      
      // Generate random data for demo purposes
      // In production, this would use real historical data
      const generateData = (count = 10) => {
        return Array.from({ length: count }, () => Math.floor(Math.random() * 50) + 50);
      };
      
      // Team Size Sparkline
      if (teamSizeSparkline) teamSizeSparkline.destroy();
      teamSizeSparkline = new ApexCharts(document.getElementById('team-size-chart'), {
        ...sparklineOptions,
        colors: ['#4361ee'],
        series: [{
          name: 'Team Size',
          data: generateData()
        }]
      });
      teamSizeSparkline.render();
      
      // Answer Rate Sparkline
      const answerRateStatus = dashboardData.metricsStatus?.answerRate?.status || 'success';
      if (answerRateSparkline) answerRateSparkline.destroy();
      answerRateSparkline = new ApexCharts(document.getElementById('answer-rate-chart'), {
        ...sparklineOptions,
        colors: [answerRateStatus === 'success' ? '#4cc9f0' : 
                answerRateStatus === 'warning' ? '#f72585' : '#e5383b'],
        series: [{
          name: 'Answer Rate',
          data: generateData()
        }]
      });
      answerRateSparkline.render();
      
      // Talk Time Sparkline
      const talkTimeStatus = dashboardData.metricsStatus?.avgTalkTime?.status || 'success';
      if (talkTimeSparkline) talkTimeSparkline.destroy();
      talkTimeSparkline = new ApexCharts(document.getElementById('talk-time-chart'), {
        ...sparklineOptions,
        colors: [talkTimeStatus === 'success' ? '#4cc9f0' : 
               talkTimeStatus === 'warning' ? '#f72585' : '#e5383b'],
        series: [{
          name: 'Talk Time',
          data: generateData()
        }]
      });
      talkTimeSparkline.render();
      
      // On Queue Sparkline
      const onQueueStatus = dashboardData.metricsStatus?.onQueuePercentage?.status || 'success';
      if (onQueueSparkline) onQueueSparkline.destroy();
      onQueueSparkline = new ApexCharts(document.getElementById('on-queue-chart'), {
        ...sparklineOptions,
        colors: [onQueueStatus === 'success' ? '#4cc9f0' : 
               onQueueStatus === 'warning' ? '#f72585' : '#e5383b'],
        series: [{
          name: 'On Queue %',
          data: generateData()
        }]
      });
      onQueueSparkline.render();
    }
    
    function updateAttentionAreas() {
      const container = document.getElementById('attention-list');
      const countElement = document.getElementById('attention-count');
      
      const overdueOneOnOnes = dashboardData.overdueOneOnOnes || {};
      const overdueItems = (overdueOneOnOnes.overdue || []).concat(overdueOneOnOnes.needsFirstSession || []);
      
      // Update count
      countElement.textContent = overdueItems.length;
      
      // Clear container
      container.innerHTML = '';
      
      if (overdueItems.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-check-circle"></i>
            </div>
            <div class="empty-state-text">No critical attention areas at this time.</div>
          </div>
        `;
        return;
      }
      
      // Create list items
      overdueItems.forEach(item => {
        const isFirstSession = !item.lastSessionDate;
        const overdueText = isFirstSession ? 'Needs first session' : `${item.daysOverdue} days overdue`;
        
        const listItem = document.createElement('div');
        listItem.className = 'list-item';
        listItem.innerHTML = `
          <div class="list-item-icon">
            <i class="fas fa-user"></i>
          </div>
          <div class="list-item-content">
            <h3 class="list-item-title">${item.teamMemberName || item.teamMemberEmail}</h3>
            <div class="list-item-subtitle">${overdueText}</div>
          </div>
          <span class="list-badge badge-danger">1:1 Overdue</span>
        `;
        
        listItem.addEventListener('click', () => navigateTo('one-on-ones', item.teamMemberEmail));
        container.appendChild(listItem);
      });
    }
    
    function updateActionItems() {
      const container = document.getElementById('action-items-list');
      const items = dashboardData.actionItems || [];
      
      // Clear container
      container.innerHTML = '';
      
      if (items.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-check-circle"></i>
            </div>
            <div class="empty-state-text">No pending action items.</div>
          </div>
        `;
        return;
      }
      
      // Create list items
      items.slice(0, 5).forEach(item => {
        const dueDate = new Date(item.dueDate);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        let badgeClass = 'badge-primary';
        let badgeText = 'Pending';
        
        if (dueDate < today) {
          badgeClass = 'badge-danger';
          badgeText = 'Overdue';
        } else if (dueDate.getTime() === today.getTime()) {
          badgeClass = 'badge-warning';
          badgeText = 'Due Today';
        }
        
        const listItem = document.createElement('div');
        listItem.className = 'list-item';
        listItem.innerHTML = `
          <div class="list-item-icon">
            <i class="fas fa-tasks"></i>
          </div>
          <div class="list-item-content">
            <h3 class="list-item-title">${item.title}</h3>
            <div class="list-item-subtitle">
              ${item.teamMemberName || item.teamMemberEmail} · Due: ${formatDate(dueDate)}
            </div>
          </div>
          <span class="list-badge ${badgeClass}">${badgeText}</span>
        `;
        
        listItem.addEventListener('click', () => navigateTo('action-items', item.id));
        container.appendChild(listItem);
      });
      
      // Add "View More" if needed
      if (items.length > 5) {
        const viewMore = document.createElement('div');
        viewMore.className = 'list-item text-center';
        viewMore.innerHTML = `
          <span class="text-primary">View ${items.length - 5} more action items</span>
        `;
        viewMore.style.cursor = 'pointer';
        viewMore.addEventListener('click', () => navigateTo('action-items'));
        container.appendChild(viewMore);
      }
    }
    
    function updateScheduleList() {
      const container = document.getElementById('schedule-list');
      const events = dashboardData.todayEvents || [];
      
      // Clear container
      container.innerHTML = '';
      
      if (events.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-calendar-day"></i>
            </div>
            <div class="empty-state-text">No events scheduled for today.</div>
          </div>
        `;
        return;
      }
      
      // Create list items
      events.forEach(event => {
        let iconClass = 'fa-calendar-check';
        let badgeClass = 'badge-secondary';
        
        if (event.type === 'one-on-one') {
          iconClass = 'fa-user-friends';
          badgeClass = 'badge-primary';
        } else if (event.type === 'qa-review') {
          iconClass = 'fa-clipboard-check';
          badgeClass = 'badge-success';
        } else if (event.type === 'meeting') {
          iconClass = 'fa-users';
          badgeClass = 'badge-info';
        }
        
        const listItem = document.createElement('div');
        listItem.className = 'list-item';
        listItem.innerHTML = `
          <div class="list-item-icon">
            <i class="fas ${iconClass}"></i>
          </div>
          <div class="list-item-content">
            <h3 class="list-item-title">${event.title}</h3>
            <div class="list-item-subtitle">
              <i class="far fa-clock me-1"></i> ${event.time}
            </div>
          </div>
          <span class="list-badge ${badgeClass}">${event.type.charAt(0).toUpperCase() + event.type.slice(1)}</span>
        `;
        
        container.appendChild(listItem);
      });
    }
    
    function updateOneOnOnesList() {
      const container = document.getElementById('one-on-ones-list');
      const sessions = dashboardData.upcomingOneOnOnes || [];
      
      // Clear container
      container.innerHTML = '';
      
      if (sessions.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-user-friends"></i>
            </div>
            <div class="empty-state-text">No upcoming one-on-ones.</div>
          </div>
        `;
        return;
      }
      
      // Create list items
      sessions.forEach(session => {
        const sessionDate = new Date(session.date);
        
        const listItem = document.createElement('div');
        listItem.className = 'list-item';
        listItem.innerHTML = `
                    <div class="list-item-content">
            <h3 class="list-item-title">${session.teamMemberName || session.teamMemberEmail}</h3>
            <div class="list-item-subtitle">
              <i class="far fa-calendar-alt me-1"></i> ${formatDate(sessionDate)}
            </div>
          </div>
          <span class="list-badge badge-primary">Scheduled</span>
        `;
        
        listItem.addEventListener('click', () => navigateTo('one-on-ones', session.id));
        container.appendChild(listItem);
      });
    }
    
    function updateQAReviewsList() {
      const container = document.getElementById('qa-reviews-list');
      const reviews = dashboardData.recentQAReviews || [];
      
      // Clear container
      container.innerHTML = '';
      
      if (reviews.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-clipboard-check"></i>
            </div>
            <div class="empty-state-text">No recent QA reviews.</div>
          </div>
        `;
        return;
      }
      
      // Create list items
      reviews.forEach(review => {
        const reviewDate = new Date(review.reviewDate);
        
        let badgeClass = 'badge-primary';
        if (review.qualityStatus === 'Excellent') {
          badgeClass = 'badge-success';
        } else if (review.qualityStatus === 'Needs Improvement') {
          badgeClass = 'badge-warning';
        }
        
        const listItem = document.createElement('div');
        listItem.className = 'list-item';
        listItem.innerHTML = `
          <div class="list-item-icon">
            <i class="fas fa-clipboard-check"></i>
          </div>
          <div class="list-item-content">
            <h3 class="list-item-title">${review.teamMemberName || review.teamMemberEmail}</h3>
            <div class="list-item-subtitle">
              <i class="far fa-calendar-alt me-1"></i> ${formatDate(reviewDate)}
              <span class="ms-1">${review.percentageScore || 0}%</span>
            </div>
          </div>
          <span class="list-badge ${badgeClass}">${review.qualityStatus}</span>
        `;
        
        listItem.addEventListener('click', () => navigateTo('qa-reviews', review.id));
        container.appendChild(listItem);
      });
    }
    
    function initializeCharts() {
      initializePerformanceChart();
      initializeTeamStatusChart();
    }
    
    function initializePerformanceChart() {
      const performanceData = preparePerformanceChartData(chartPeriod);
      
      const options = {
        chart: {
          type: 'line',
          height: 300,
          fontFamily: getComputedStyle(document.body).fontFamily,
          toolbar: {
            show: false
          },
          animations: {
            enabled: true,
            easing: 'easeinout',
            speed: 800
          },
          background: 'transparent',
        },
        colors: ['#4361ee', '#4cc9f0', '#f72585'],
        series: performanceData.series,
        dataLabels: {
          enabled: false
        },
        stroke: {
          curve: 'smooth',
          width: 3
        },
        grid: {
          borderColor: 'var(--border-color)',
          row: {
            colors: ['transparent', 'transparent'],
            opacity: 0.5
          },
          xaxis: {
            lines: {
              show: false
            }
          },
          padding: {
            top: 10,
            right: 0,
            bottom: 0,
            left: 10
          }
        },
        markers: {
          size: 4,
          hover: {
            size: 6
          }
        },
        xaxis: {
          categories: performanceData.categories,
          labels: {
            style: {
              colors: 'var(--text-secondary)',
              fontSize: '12px'
            }
          },
          axisTicks: {
            color: 'var(--border-color)'
          },
          axisBorder: {
            show: false
          }
        },
        yaxis: {
          labels: {
            style: {
              colors: 'var(--text-secondary)',
              fontSize: '12px'
            }
          }
        },
        legend: {
          position: 'top',
          horizontalAlign: 'right',
          floating: true,
          offsetY: -25,
          offsetX: -5,
          markers: {
            width: 12,
            height: 12,
            radius: 12
          },
          onItemClick: {
            toggleDataSeries: true
          },
          itemMargin: {
            horizontal: 10
          }
        },
        responsive: [{
          breakpoint: 576,
          options: {
            legend: {
              position: 'bottom',
              horizontalAlign: 'center',
              offsetY: 0
            }
          }
        }],
        tooltip: {
          theme: 'light',
          y: {
            formatter: function(value) {
              return value;
            }
          }
        }
      };
      
      if (performanceChart) {
        performanceChart.destroy();
      }
      
      performanceChart = new ApexCharts(document.getElementById('performance-chart'), options);
      performanceChart.render();
    }
    
    function initializeTeamStatusChart() {
      const options = {
        chart: {
          type: 'donut',
          height: 240,
          fontFamily: getComputedStyle(document.body).fontFamily,
          animations: {
            enabled: true,
            easing: 'easeinout',
            speed: 600,
            animateGradually: {
              enabled: true,
              delay: 150
            },
            dynamicAnimation: {
              enabled: true,
              speed: 350
            }
          }
        },
        colors: ['#4cc9f0', '#4361ee', '#f72585'],
        series: createTeamStatusData(),
        labels: ['On Track', 'Need Attention', 'Overdue'],
        dataLabels: {
          enabled: false
        },
        legend: {
          position: 'bottom',
          markers: {
            width: 12,
            height: 12,
            radius: 12
          },
          itemMargin: {
            horizontal: 15,
            vertical: 5
          },
          formatter: function(seriesName, opts) {
            return seriesName + ': ' + opts.w.globals.series[opts.seriesIndex];
          }
        },
        tooltip: {
          y: {
            formatter: function(val) {
              return val + ' members';
            }
          }
        },
        plotOptions: {
          pie: {
            donut: {
              size: '55%',
              background: 'transparent',
              labels: {
                show: true,
                name: {
                  show: true
                },
                value: {
                  show: true,
                  fontSize: '20px',
                  fontWeight: 700,
                  color: 'var(--text-primary)',
                  formatter: function(val) {
                    return val;
                  }
                },
                total: {
                  show: true,
                  label: 'Total',
                  fontSize: '14px',
                  fontWeight: 700,
                  color: 'var(--text-secondary)',
                  formatter: function(w) {
                    return w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                  }
                }
              }
            }
          }
        }
      };
      
      if (teamStatusChart) {
        teamStatusChart.destroy();
      }
      
      teamStatusChart = new ApexCharts(document.getElementById('team-status-chart'), options);
      teamStatusChart.render();
    }
    
    function preparePerformanceChartData(period) {
      // This would normally use real data from dashboardData
      // For demo purposes we'll generate sample data
      const categories = [];
      const answerRateData = [];
      const onQueueData = [];
      const talkTimeData = [];
      
      // Generate sample data based on period
      const today = new Date();
      const numPoints = period === 'day' ? 14 : period === 'week' ? 8 : 6;
      
      for (let i = 0; i < numPoints; i++) {
        const date = new Date();
        
        if (period === 'day') {
          date.setDate(today.getDate() - (numPoints - i - 1));
          categories.push(formatDate(date, 'short'));
        } else if (period === 'week') {
          date.setDate(today.getDate() - 7 * (numPoints - i - 1));
          categories.push(`Week ${i + 1}`);
        } else {
          date.setMonth(today.getMonth() - (numPoints - i - 1));
          categories.push(formatDate(date, 'month'));
        }
        
        // Generate random data with upward trend
        const baseAnswerRate = 90 + (i * 0.3) + (Math.random() * 5);
        answerRateData.push(parseFloat(baseAnswerRate.toFixed(1)));
        
        const baseOnQueue = 60 + (i * 0.5) + (Math.random() * 8);
        onQueueData.push(parseFloat(baseOnQueue.toFixed(1)));
        
        const baseTalkTime = 15 + (i * 0.1) + (Math.random() * 3);
        talkTimeData.push(parseFloat(baseTalkTime.toFixed(1)));
      }
      
      return {
        categories: categories,
        series: [
          {
            name: 'Answer Rate (%)',
            data: answerRateData
          },
          {
            name: 'On Queue (%)',
            data: onQueueData
          },
          {
            name: 'Avg Talk Time (min)',
            data: talkTimeData
          }
        ]
      };
    }
    
    function createTeamStatusData() {
      const teamInfo = dashboardData.teamInfo || {};
      const overdueOneOnOnes = dashboardData.overdueOneOnOnes || {};
      
      // Calculate team status numbers
      const overdue = (overdueOneOnOnes.overdue?.length || 0) + (overdueOneOnOnes.needsFirstSession?.length || 0);
      const needAttention = overdueOneOnOnes.upcoming?.length || 0;
      const onTrack = (teamInfo.activeMembers || 0) - overdue - needAttention;
      
      return [
        Math.max(0, onTrack), // On Track
        needAttention,        // Need Attention
        overdue               // Overdue
      ];
    }
    
    function updatePerformanceChart(period) {
      const chartData = preparePerformanceChartData(period);
      
      performanceChart.updateOptions({
        xaxis: {
          categories: chartData.categories
        }
      });
      
      performanceChart.updateSeries(chartData.series);
    }
    
    function navigateTo(page, id = null) {
      switch (page) {
        case 'dashboard':
          // Already on dashboard, just refresh
          loadDashboard();
          break;
        case 'one-on-ones':
          google.script.run.showOneOnOnes(id);
          google.script.host.close();
          break;
        case 'qa-reviews':
          google.script.run.showQAReviews(id);
          google.script.host.close();
          break;
        case 'metrics':
          google.script.run.showMetrics();
          google.script.host.close();
          break;
        case 'action-items':
          google.script.run.showActionItems(id);
          google.script.host.close();
          break;
        case 'team':
          google.script.run.showTeamMembers();
          google.script.host.close();
          break;
        case 'settings':
          google.script.run.showSettings();
          google.script.host.close();
          break;
      }
    }
    
    function formatDate(dateStr, format = 'default') {
      if (!dateStr) return '';
      
      const date = new Date(dateStr);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const tomorrow = new Date(today);
      tomorrow.setDate(today.getDate() + 1);
      
      const yesterday = new Date(today);
      yesterday.setDate(today.getDate() - 1);
      
      // Check for today/yesterday/tomorrow
      if (format === 'default') {
        if (date.toDateString() === today.toDateString()) {
          return 'Today';
        } else if (date.toDateString() === yesterday.toDateString()) {
          return 'Yesterday';
        } else if (date.toDateString() === tomorrow.toDateString()) {
          return 'Tomorrow';
        }
      }
      
      // Format based on requested style
      if (format === 'short') {
        return date.toLocaleDateString(undefined, { month: 'short', day: 'numeric' });
      } else if (format === 'month') {
        return date.toLocaleDateString(undefined, { month: 'short' });
      } else if (format === 'time') {
        return date.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' });
      } else {
        // Default format
        return date.toLocaleDateString();
      }
    }
    
    function showNotification(message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = 'notification';
      
      // Set notification style
      let backgroundColor = 'rgba(67, 97, 238, 0.9)'; // Primary/Info color
      let icon = 'info-circle';
      
      if (type === 'success') {
        backgroundColor = 'rgba(76, 201, 240, 0.9)';
        icon = 'check-circle';
      } else if (type === 'error') {
        backgroundColor = 'rgba(229, 56, 59, 0.9)';
        icon = 'exclamation-circle';
      } else if (type === 'warning') {
        backgroundColor = 'rgba(247, 37, 133, 0.9)';
        icon = 'exclamation-triangle';
      }
      
      // Create notification content
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${icon}"></i>
        </div>
        <div class="notification-message">${message}</div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Style notification
      Object.assign(notification.style, {
        position: 'fixed',
        bottom: '20px',
        right: '20px',
        zIndex: '9999',
        display: 'flex',
        alignItems: 'center',
        padding: '12px 20px',
        background: backgroundColor,
        color: 'white',
        borderRadius: '8px',
        boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
        maxWidth: '350px',
        transform: 'translateX(400px)',
        transition: 'transform 0.3s ease',
        opacity: 0
      });
      
      // Style icon
      Object.assign(notification.querySelector('.notification-icon').style, {
        marginRight: '12px',
        fontSize: '18px'
      });
      
      // Style message
      Object.assign(notification.querySelector('.notification-message').style, {
        flex: '1',
        fontSize: '14px'
      });
      
      // Style close button
      const closeButton = notification.querySelector('.notification-close');
      Object.assign(closeButton.style, {
        background: 'none',
        border: 'none',
        color: 'white',
        opacity: '0.7',
        cursor: 'pointer',
        fontSize: '14px',
        marginLeft: '12px',
        padding: '0'
      });
      
      // Add close button functionality
      closeButton.addEventListener('click', () => {
        notification.style.transform = 'translateX(400px)';
        notification.style.opacity = '0';
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      });
      
      // Add to document
      document.body.appendChild(notification);
      
      // Show notification with animation
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
        notification.style.opacity = '1';
      }, 10);
      
      // Auto hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.style.transform = 'translateX(400px)';
          notification.style.opacity = '0';
          setTimeout(() => {
            if (document.body.contains(notification)) {
              document.body.removeChild(notification);
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification(error.message || 'An unexpected error occurred', 'error');
    }
    
    // Load saved preferences on startup
    window.addEventListener('load', () => {
      loadSavedPreferences();
    });
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      overflow-x: hidden;
    }
    
    /* Cutting-edge layout */
    .app-container {
      display: flex;
      height: 100vh;
      max-height: 100vh;
      overflow: hidden;
      position: relative;
    }
    
    /* Modern Sidebar */
    .app-sidebar {
      width: 320px;
      background: var(--surface);
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-direction: column;
      z-index: 10;
      transition: transform 0.3s ease-out;
    }
    
    .sidebar-header {
      padding: 1.25rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      position: sticky;
      top: 0;
      z-index: 10;
    }
    
    .sidebar-header h4 {
      margin: 0;
      font-weight: 600;
      display: flex;
      align-items: center;
    }
    
    .sidebar-header h4 i {
      margin-right: 0.75rem;
      color: var(--primary);
    }
    
    .sidebar-filters {
      padding: 1.25rem;
      border-bottom: 1px solid var(--border-color);
      background: rgba(248, 249, 250, 0.5);
    }
    
    .sidebar-content {
      flex: 1;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: var(--text-secondary) transparent;
    }
    
    .sidebar-content::-webkit-scrollbar {
      width: 5px;
    }
    
    .sidebar-content::-webkit-scrollbar-track {
      background: transparent;
    }
    
    .sidebar-content::-webkit-scrollbar-thumb {
      background-color: var(--text-secondary);
      border-radius: 10px;
    }
    
    /* Sessions List */
    .session-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .session-item {
      padding: 1rem 1.25rem;
      transition: var(--transition);
      cursor: pointer;
      border-left: 3px solid transparent;
      position: relative;
      overflow: hidden;
      display: flex;
      align-items: center;
    }
    
    .session-item::after {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: all 0.5s;
    }
    
    .session-item:hover::after {
      left: 100%;
    }
    
    .session-item:hover {
      background-color: var(--surface-hover);
    }
    
    .session-item.active {
      background-color: rgba(67, 97, 238, 0.05);
      border-left: 3px solid var(--primary);
    }
    
    .session-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--primary);
      color: white;
      font-weight: 600;
      font-size: 1rem;
      margin-right: 1rem;
      flex-shrink: 0;
      transition: var(--transition);
    }
    
    .session-item:hover .session-avatar {
      transform: scale(1.1);
    }
    
    .session-info {
      flex-grow: 1;
      min-width: 0;
    }
    
    .session-title {
      font-weight: 600;
      color: var(--text-primary);
      margin-bottom: 0.25rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: var(--transition);
    }
    
    .session-item:hover .session-title {
      color: var(--primary);
    }
    
    .session-date {
      font-size: 0.85rem;
      color: var(--text-secondary);
      display: flex;
      align-items: center;
    }
    
    .session-status {
      padding: 0.35em 0.65em;
      font-size: 0.75rem;
      font-weight: 500;
      border-radius: 20px;
      margin-left: 0.5rem;
      flex-shrink: 0;
    }
    
    .status-scheduled {
      background: rgba(67, 97, 238, 0.1);
      color: var(--primary);
    }
    
    .status-completed {
      background: rgba(76, 201, 240, 0.1);
      color: var(--success);
    }
    
    .status-cancelled {
      background: rgba(108, 117, 125, 0.1);
      color: var(--text-secondary);
    }
    
    .status-overdue {
      background: rgba(247, 37, 133, 0.1);
      color: var(--warning);
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(247, 37, 133, 0.4);
      }
      
      70% {
        transform: scale(1);
        box-shadow: 0 0 0 10px rgba(247, 37, 133, 0);
      }
      
      100% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(247, 37, 133, 0);
      }
    }
    
    /* Main Content */
    .app-content {
      flex: 1;
      overflow-y: auto;
      padding: 1.5rem;
      position: relative;
      scrollbar-width: thin;
      scrollbar-color: var(--text-secondary) transparent;
    }
    
    .app-content::-webkit-scrollbar {
      width: 5px;
    }
    
    .app-content::-webkit-scrollbar-track {
      background: transparent;
    }
    
    .app-content::-webkit-scrollbar-thumb {
      background-color: var(--text-secondary);
      border-radius: 10px;
    }
    
    /* Content Card with Glass Effect */
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      padding: 1.25rem;
      border-top-left-radius: var(--border-radius) !important;
      border-top-right-radius: var(--border-radius) !important;
      position: relative;
    }
    
    .card-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--success));
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Modern Tabs */
    .nav-tabs {
      border-bottom: none;
      padding: 0 0.5rem;
    }
    
    .nav-tabs .nav-item {
      margin-right: 1rem;
    }
    
    .nav-tabs .nav-link {
      border: none;
      padding: 0.75rem 0.25rem;
      color: var(--text-secondary);
      position: relative;
      transition: var(--transition);
      font-weight: 500;
    }
    
    .nav-tabs .nav-link::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: linear-gradient(to right, var(--primary), var(--success));
      transform: scaleX(0);
      transition: transform 0.3s;
    }
    
    .nav-tabs .nav-link:hover {
      color: var(--primary);
    }
    
    .nav-tabs .nav-link.active {
      color: var(--primary);
      background: transparent;
    }
    
    .nav-tabs .nav-link.active::after {
      transform: scaleX(1);
    }
    
    /* Form Elements */
    .form-section {
      background: rgba(255, 255, 255, 0.5);
      border-radius: var(--border-radius);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      border: 1px solid var(--border-color);
      transition: var(--transition);
    }
    
    .form-section:hover {
      box-shadow: var(--shadow-sm);
      background: rgba(255, 255, 255, 0.8);
    }
    
    .form-section-title {
      color: var(--primary);
      font-weight: 600;
      margin-bottom: 1rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      align-items: center;
    }
    
    .form-section-icon {
      margin-right: 0.75rem;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--primary);
      color: white;
      border-radius: 6px;
    }
    
    .form-control, .form-select {
      border-radius: 8px;
      border: 1px solid var(--border-color);
      padding: 0.6rem 0.75rem;
      transition: var(--transition);
      background-color: rgba(255, 255, 255, 0.9);
    }
    
    .form-control:focus, .form-select:focus {
      box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.15);
      border-color: var(--primary);
    }
    
    /* Checkbox Container with Animation */
    .checkbox-container {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }
    
    .checkbox-item {
      position: relative;
      min-width: 180px;
    }
    
    .custom-checkbox {
      position: absolute;
      opacity: 0;
      cursor: pointer;
      height: 0;
      width: 0;
    }
    
    .checkbox-label {
      display: block;
      position: relative;
      padding: 0.6rem 0.6rem 0.6rem 2.5rem;
      cursor: pointer;
      user-select: none;
      border-radius: 8px;
      background: rgba(248, 249, 250, 0.7);
      transition: var(--transition);
    }
    
    .checkbox-label:hover {
      background: rgba(67, 97, 238, 0.05);
    }
    
    .checkmark {
      position: absolute;
      top: 50%;
      left: 0.8rem;
      transform: translateY(-50%);
      height: 18px;
      width: 18px;
      background-color: white;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      transition: var(--transition);
    }
    
    .custom-checkbox:checked ~ .checkbox-label .checkmark {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .checkmark:after {
      content: "";
      position: absolute;
      display: none;
      left: 6px;
      top: 2px;
      width: 5px;
      height: 10px;
      border: solid white;
      border-width: 0 2px 2px 0;
      transform: rotate(45deg);
    }
    
    .custom-checkbox:checked ~ .checkbox-label .checkmark:after {
      display: block;
    }
    
    /* Action Buttons */
    .btn {
      border-radius: 8px;
      padding: 0.6rem 1.25rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--secondary);
      border-color: var(--secondary);
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background: var(--primary);
      color: white;
      transform: translateY(-2px);
    }
    
    .btn-icon {
      width: 36px;
      height: 36px;
      padding: 0;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      border-radius: 8px;
    }
    
    /* Action Items Tab */
    .action-item {
      display: flex;
      align-items: center;
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
      background: rgba(255, 255, 255, 0.7);
      transition: var(--transition);
    }
    
    .action-item:hover {
      background: rgba(248, 249, 250, 0.9);
    }
    
    .action-item:last-child {
      border-bottom: none;
    }
    
    .action-item-status {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      border: 2px solid var(--border-color);
      margin-right: 1rem;
      position: relative;
      flex-shrink: 0;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .action-item-status.completed {
      background: var(--success);
      border-color: var(--success);
    }
    
    .action-item-status.completed::after {
      content: '';
      position: absolute;
      top: 45%;
      left: 50%;
      width: 5px;
      height: 10px;
      border: solid white;
      border-width: 0 2px 2px 0;
      transform: translate(-50%, -50%) rotate(45deg);
    }
    
    .action-item-status:hover {
      border-color: var(--primary);
    }
    
    .action-item-text {
      flex-grow: 1;
      padding-right: 1rem;
    }
    
    .action-item-text.completed {
      text-decoration: line-through;
      color: var(--text-secondary);
    }
    
    .action-item-due {
      font-size: 0.85rem;
      color: var(--text-secondary);
    }
    
    .action-item-overdue {
      color: var(--danger);
    }
    
    .action-item-buttons {
      flex-shrink: 0;
    }
    
    /* Loading Spinner */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(255, 255, 255, 0.85);
      backdrop-filter: blur(5px);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      transition: all 0.3s ease;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-top-color: var(--primary);
      animation: spinner 0.8s linear infinite;
    }
    
    @keyframes spinner {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Empty States */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 3rem 1rem;
      text-align: center;
    }
    
    .empty-state-icon {
      font-size: 3rem;
      color: rgba(108, 117, 125, 0.3);
      margin-bottom: 1.5rem;
    }
    
    .empty-state-title {
      font-weight: 600;
      margin-bottom: 0.5rem;
      color: var(--text-primary);
    }
    
    .empty-state-message {
      color: var(--text-secondary);
      max-width: 300px;
      margin: 0 auto 1.5rem;
    }
    
    /* Responsive Design */
    @media (max-width: 992px) {
      .app-container {
        flex-direction: column;
        height: auto;
      }
      
      .app-sidebar {
        width: 100%;
        max-height: 300px;
      }
      
      .app-content {
        max-height: none;
        overflow: visible;
      }
    }
    
    @media (max-width: 768px) {
      .checkbox-container {
        flex-direction: column;
      }
      
      .checkbox-item {
        width: 100%;
      }
      
      .card-body {
        padding: 1rem;
      }
      
      .form-section {
        padding: 1rem;
      }
    }
    
    /* Animations */
    @keyframes fadeIn {
      0% { opacity: 0; transform: translateY(10px); }
      100% { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }
    
    @keyframes slideIn {
      0% { opacity: 0; transform: translateX(-10px); }
      100% { opacity: 1; transform: translateX(0); }
    }
    
    .slide-in {
      animation: slideIn 0.5s ease forwards;
    }
    
    /* Staggered Animation */
    .staggered > * {
      opacity: 0;
    }
    
    .staggered > *:nth-child(1) { animation: fadeIn 0.5s ease forwards 0.1s; }
    .staggered > *:nth-child(2) { animation: fadeIn 0.5s ease forwards 0.2s; }
    .staggered > *:nth-child(3) { animation: fadeIn 0.5s ease forwards 0.3s; }
    .staggered > *:nth-child(4) { animation: fadeIn 0.5s ease forwards 0.4s; }
    .staggered > *:nth-child(5) { animation: fadeIn 0.5s ease forwards 0.5s; }
    .staggered > *:nth-child(6) { animation: fadeIn 0.5s ease forwards 0.6s; }
    .staggered > *:nth-child(7) { animation: fadeIn 0.5s ease forwards 0.7s; }
    .staggered > *:nth-child(8) { animation: fadeIn 0.5s ease forwards 0.8s; }
    .staggered > *:nth-child(9) { animation: fadeIn 0.5s ease forwards 0.9s; }
    .staggered > *:nth-child(10) { animation: fadeIn 0.5s ease forwards 1s; }
    
    /* Notification System */
    .notification {
      display: flex;
      align-items: center;
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 16px 20px;
      background: white;
      border-left: 4px solid var(--primary);
      border-radius: 4px;
      box-shadow: var(--shadow-md);
      z-index: 1000;
      transform: translateX(120%);
      transition: transform 0.3s ease;
      max-width: 350px;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      margin-right: 12px;
      font-size: 20px;
      color: var(--primary);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 3px;
    }
    
    .notification-message {
      color: var(--text-secondary);
      font-size: 0.875rem;
    }
    
    .notification-close {
      background: none;
      border: none;
      color: var(--text-secondary);
      margin-left: 10px;
      opacity: 0.5;
      transition: var(--transition);
      cursor: pointer;
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-left-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-left-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    .notification.warning {
      border-left-color: var(--warning);
    }
    
    .notification.warning .notification-icon {
      color: var(--warning);
    }
  </style>
</head>
<body>
  <!-- Loading Animation -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="app-container">
    <!-- Sidebar -->
    <div class="app-sidebar" id="sidebar">
      <div class="sidebar-header">
        <h4><i class="fas fa-comments"></i> One-on-One Sessions</h4>
        <button id="new-session-btn" class="btn btn-primary btn-icon">
          <i class="fas fa-plus"></i>
        </button>
      </div>
      
      <div class="sidebar-filters">
        <div class="row g-3">
          <div class="col-12">
            <select id="filter-team-member" class="form-select">
              <option value="">All Team Members</option>
              <!-- Team members will be populated here -->
            </select>
          </div>
          <div class="col-6">
            <select id="filter-status" class="form-select">
              <option value="">All Statuses</option>
              <option value="scheduled">Scheduled</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>
          <div class="col-6">
            <select id="filter-date-range" class="form-select">
              <option value="30" selected>Last 30 Days</option>
              <option value="60">Last 60 Days</option>
              <option value="90">Last 90 Days</option>
              <option value="all">All Time</option>
              <option value="custom">Custom Range</option>
            </select>
          </div>
          <div id="custom-date-range" class="row g-2" style="display:none;">
            <div class="col-6">
              <input type="text" id="filter-start-date" class="form-control" placeholder="From">
            </div>
            <div class="col-6">
              <input type="text" id="filter-end-date" class="form-control" placeholder="To">
            </div>
          </div>
          <div class="col-12 d-flex justify-content-between">
            <button id="apply-filters-btn" class="btn btn-primary">
              <i class="fas fa-filter me-2"></i> Apply
            </button>
            <button id="reset-filters-btn" class="btn btn-outline-primary">
              Reset
            </button>
          </div>
        </div>
      </div>
      
      <div class="sidebar-content">
        <div id="session-count-container" class="px-3 py-2 text-secondary small"></div>
        <ul class="session-list" id="sessions-container">
          <!-- Sessions will be dynamically loaded here -->
          <li class="session-item text-center">
            <div class="spinner-border spinner-border-sm text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-2">Loading sessions...</span>
          </li>
        </ul>
      </div>
    </div>
    
    <!-- Main Content -->
    <div class="app-content">
      <div class="content-card fade-in">
        <div class="card-header">
          <ul class="nav nav-tabs" id="session-tabs" role="tablist">
            <li class="nav-item" role="presentation">
              <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details-content" type="button" role="tab" aria-controls="details-content" aria-selected="true">
                <i class="fas fa-info-circle me-1"></i> Session Details
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button class="nav-link" id="action-items-tab" data-bs-toggle="tab" data-bs-target="#action-items-content" type="button" role="tab" aria-controls="action-items-content" aria-selected="false">
                <i class="fas fa-tasks me-1"></i> Action Items
              </button>
            </li>
          </ul>
        </div>
        
        <div class="card-body">
          <div class="tab-content" id="session-tab-content">
            <!-- Details Tab -->
            <div class="tab-pane fade show active" id="details-content" role="tabpanel" aria-labelledby="details-tab">
              <form id="session-form">
                <input type="hidden" id="session-id">
                
                <!-- Session Information -->
                <div class="row g-3 mb-4 staggered">
                  <div class="col-md-5">
                    <label for="team-member-email" class="form-label">Team Member</label>
                    <select id="team-member-email" class="form-select" required>
                      <option value="">Select Team Member</option>
                      <!-- Team members will be populated here -->
                    </select>
                  </div>
                  <div class="col-md-4">
                    <label for="session-date" class="form-label">Session Date</label>
                    <input type="text" id="session-date" class="form-control" required placeholder="Select date">
                  </div>
                  <div class="col-md-3">
                    <label for="session-status" class="form-label">Status</label>
                    <select id="session-status" class="form-select" required>
                      <option value="scheduled">Scheduled</option>
                      <option value="completed">Completed</option>
                      <option value="cancelled">Cancelled</option>
                    </select>
                  </div>
                </div>
                
                <!-- Pre-Meeting Preparation -->
                <div class="form-section staggered">
                  <h5 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-clipboard-check"></i></span>
                    Pre-Meeting Preparation
                  </h5>
                  
                  <div class="checkbox-container">
                    <div class="checkbox-item">
                      <input type="checkbox" id="reviewedPreviousMeeting" class="custom-checkbox">
                      <label for="reviewedPreviousMeeting" class="checkbox-label">
                        <span class="checkmark"></span>
                        Reviewed previous meeting notes
                      </label>
                    </div>
                    <div class="checkbox-item">
                      <input type="checkbox" id="reviewedPerformanceMetrics" class="custom-checkbox">
                      <label for="reviewedPerformanceMetrics" class="checkbox-label">
                        <span class="checkmark"></span>
                        Checked performance metrics
                      </label>
                    </div>
                    <div class="checkbox-item">
                      <input type="checkbox" id="gatheredUpdates" class="custom-checkbox">
                      <label for="gatheredUpdates" class="checkbox-label">
                        <span class="checkmark"></span>
                        Gathered team/department updates
                      </label>
                    </div>
                    <div class="checkbox-item">
                      <input type="checkbox" id="preparedDiscussionPoints" class="custom-checkbox">
                      <label for="preparedDiscussionPoints" class="checkbox-label">
                        <span class="checkmark"></span>
                        Prepared discussion points
                      </label>
                    </div>
                  </div>
                  
                  <div class="mt-3">
                    <label for="preparationNotes" class="form-label">Preparation Notes</label>
                    <textarea id="preparationNotes" class="form-control" rows="3" placeholder="Enter any preparation notes here..."></textarea>
                  </div>
                </div>
                
                <!-- Status Sync -->
                <div class="form-section staggered">
                  <h5 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-sync-alt"></i></span>
                    Quick Status Sync
                  </h5>
                  
                  <div class="mb-3">
                    <label for="criticalDiscussionPoints" class="form-label">Critical Discussion Points</label>
                    <textarea id="criticalDiscussionPoints" class="form-control" rows="3" placeholder="What's critical to discuss today?"></textarea>
                  </div>
                  
                  <div class="row g-3">
                    <div class="col-md-6">
                      <label for="workloadStatus" class="form-label">Workload Status</label>
                      <select id="workloadStatus" class="form-select">
                        <option value="">Select Status</option>
                        <option value="Underutilized">Underutilized</option>
                        <option value="Balanced">Balanced</option>
                        <option value="Heavy">Heavy</option>
                        <option value="Overwhelming">Overwhelming</option>
                      </select>
                    </div>
                    <div class="col-md-6">
                      <label for="energyLevel" class="form-label">Energy/Motivation Level</label>
                      <select id="energyLevel" class="form-select">
                        <option value="">Select Level</option>
                        <option value="Low">Low</option>
                        <option value="Moderate">Moderate</option>
                        <option value="High">High</option>
                        <option value="Very High">Very High</option>
                      </select>
                    </div>
                    <div class="col-12">
                      <label for="immediateBlockers" class="form-label">Immediate Blockers</label>
                      <textarea id="immediateBlockers" class="form-control" rows="2" placeholder="Document any immediate obstacles preventing effective work..."></textarea>
                    </div>
                  </div>
                </div>
                
                <!-- Performance Deep Dive -->
                <div class="form-section staggered">
                  <h5 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-chart-line"></i></span>
                    Performance Deep Dive
                  </h5>
                  
                  <div class="mb-3">
                    <label for="quantitativeMetricsReview" class="form-label">Quantitative Metrics Review</label>
                    <textarea id="quantitativeMetricsReview" class="form-control" rows="3" placeholder="Document observations about call handling, complex case management, quality indicators..."></textarea>
                  </div>
                  
                  <div class="mb-3">
                    <label for="qualitativeImpactAssessment" class="form-label">Qualitative Impact Assessment</label>
                    <textarea id="qualitativeImpactAssessment" class="form-control" rows="3" placeholder="Document most meaningful interventions, skill demonstration highlights..."></textarea>
                  </div>
                  
                  <div class="mb-3">
                    <label for="strategicInsightCapture" class="form-label">Strategic Insight Capture</label>
                    <textarea id="strategicInsightCapture" class="form-control" rows="3" placeholder="Document strengths to leverage, skill development pathways..."></textarea>
                  </div>
                </div>
                
                <!-- Strategic Development -->
                <div class="form-section staggered">
                  <h5 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-rocket"></i></span>
                    Strategic Development Planning
                  </h5>
                  
                  <div class="mb-3">
                    <label for="skillMasteryMapping" class="form-label">Skill Mastery Mapping</label>
                    <textarea id="skillMasteryMapping" class="form-control" rows="2" placeholder="Current competency levels, target skill acquisitions..."></textarea>
                  </div>
                  
                  <div class="mb-3">
                    <label for="careerTrajectoryAlignment" class="form-label">Career Trajectory Alignment</label>
                    <textarea id="careerTrajectoryAlignment" class="form-control" rows="2" placeholder="Individual aspirations, organizational needs..."></textarea>
                  </div>
                  
                  <div class="mb-3">
                    <label for="actionDevelopmentTracker" class="form-label">Action Development Tracker</label>
                    <textarea id="actionDevelopmentTracker" class="form-control" rows="2" placeholder="Identify 2-3 specific skill development goals..."></textarea>
                  </div>
                </div>
                
                <!-- Support and Resources -->
                <div class="form-section staggered">
                  <h5 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-hands-helping"></i></span>
                    Support and Resource Optimization
                  </h5>
                  
                  <div class="mb-3">
                    <label for="obstacleIdentification" class="form-label">Obstacle Identification</label>
                    <textarea id="obstacleIdentification" class="form-control" rows="2" placeholder="Document systemic challenges, resource constraints..."></textarea>
                  </div>
                  
                  <div class="mb-3">
                    <label for="leadershipSupportCalibration" class="form-label">Leadership Support Calibration</label>
                    <textarea id="leadershipSupportCalibration" class="form-control" rows="2" placeholder="Document immediate support needs, potential mentorship opportunities..."></textarea>
                  </div>
                </div>
                
                <!-- Commitments and Momentum -->
                <div class="form-section staggered">
                  <h5 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-handshake"></i></span>
                    Commitment and Momentum
                  </h5>
                  
                  <div class="mb-3">
                    <label for="commitmentsSynthesis" class="form-label">Commitments Synthesis</label>
                    <textarea id="commitmentsSynthesis" class="form-control" rows="3" placeholder="Document clearly articulated action items, mutual accountability establishment..."></textarea>
                  </div>
                  
                  <div class="checkbox-container">
                    <div class="checkbox-item">
                      <input type="checkbox" id="confirmedActionItems" class="custom-checkbox">
                      <label for="confirmedActionItems" class="checkbox-label">
                        <span class="checkmark"></span>
                        Confirmed specific action items
                      </label>
                    </div>
                    <div class="checkbox-item">
                      <input type="checkbox" id="establishedOwnership" class="custom-checkbox">
                      <label for="establishedOwnership" class="checkbox-label">
                        <span class="checkmark"></span>
                        Established clear ownership
                      </label>
                    </div>
                    <div class="checkbox-item">
                      <input type="checkbox" id="setPreciseFollowUp" class="custom-checkbox">
                      <label for="setPreciseFollowUp" class="checkbox-label">
                        <span class="checkmark"></span>
                        Set precise follow-up expectations
                      </label>
                    </div>
                  </div>
                </div>
                
                <!-- Action Items List -->
                <div class="form-section staggered">
                  <h5 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-tasks"></i></span>
                    Action Items
                  </h5>
                  
                  <div class="mb-3">
                    <textarea id="actionItemsList" class="form-control" rows="4" placeholder="Enter one action item per line. These will be converted to trackable action items after saving."></textarea>
                  </div>
                </div>
                
                <!-- Next Session and Notes -->
                <div class="form-section staggered">
                  <h5 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-calendar-alt"></i></span>
                    Follow Up
                  </h5>
                  
                  <div class="row">
                    <div class="col-md-6 mb-3">
                      <label for="nextCheckInDate" class="form-label">Next Session Date</label>
                      <input type="text" id="nextCheckInDate" class="form-control" placeholder="Select date">
                    </div>
                  </div>
                  
                  <div class="mb-3">
                    <label for="counselorSupportNeeds" class="form-label">What support did the team member most need?</label>
                    <textarea id="counselorSupportNeeds" class="form-control" rows="2" placeholder="Document insights about team member support needs..."></textarea>
                  </div>
                </div>
                
                <!-- Form Buttons -->
                <div class="d-flex justify-content-between my-4">
                  <div>
                    <button type="button" id="delete-btn" class="btn btn-danger">
                      <i class="fas fa-trash-alt me-2"></i> Delete
                    </button>
                  </div>
                  <div>
                    <button type="button" id="email-btn" class="btn btn-outline-primary me-2">
                      <i class="fas fa-envelope me-2"></i> Send Follow-up
                    </button>
                    <button type="button" id="action-items-btn" class="btn btn-outline-primary me-2">
                      <i class="fas fa-tasks me-2"></i> Create Action Items
                    </button>
                    <button type="submit" class="btn btn-primary">
                      <i class="fas fa-save me-2"></i> Save Session
                    </button>
                  </div>
                </div>
              </form>
            </div>
            
            <!-- Action Items Tab -->
            <div class="tab-pane fade" id="action-items-content" role="tabpanel" aria-labelledby="action-items-tab">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>Action Items</h5>
                <button id="create-new-action-item" class="btn btn-primary">
                  <i class="fas fa-plus me-2"></i> New Action Item
                </button>
              </div>
              
              <div id="action-items-container">
                <!-- Action items will be loaded here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- New Action Item Modal -->
  <div class="modal fade" id="new-action-item-modal" tabindex="-1" aria-labelledby="newActionItemModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="newActionItemModalLabel">New Action Item</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="action-item-form">
            <input type="hidden" id="action-item-id">
            <div class="mb-3">
              <label for="action-item-title" class="form-label">Title</label>
              <input type="text" class="form-control" id="action-item-title" required placeholder="Enter action item title">
            </div>
            <div class="mb-3">
              <label for="action-item-description" class="form-label">Description</label>
              <textarea class="form-control" id="action-item-description" rows="3" placeholder="Enter detailed description"></textarea>
            </div>
            <div class="row g-3 mb-3">
              <div class="col-md-6">
                <label for="action-item-due-date" class="form-label">Due Date</label>
                <input type="text" class="form-control" id="action-item-due-date" placeholder="Select date">
              </div>
              <div class="col-md-6">
                <label for="action-item-priority" class="form-label">Priority</label>
                <select class="form-select" id="action-item-priority">
                  <option value="Low">Low</option>
                  <option value="Medium" selected>Medium</option>
                  <option value="High">High</option>
                </select>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="save-action-item">Save Action Item</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Delete Confirmation Modal -->
  <div class="modal fade" id="delete-confirmation-modal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Delete</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to delete this session? This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirm-delete">Delete</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let allSessions = [];
    let allTeamMembers = [];
    let currentSessionId = null;
    let datePicker = null;
    let nextDatePicker = null;
    let actionItemDueDatePicker = null;
    let customStartDatePicker = null;
    let customEndDatePicker = null;
    let deleteConfirmModal = null;
    let newActionItemModal = null;
    
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize Bootstrap components
      initializeBootstrapComponents();
      
      // Initialize date pickers
      initializeDatePickers();
      
      // Load data
      loadTeamMembers();
      loadSessions();
      
      // Setup event listeners
      setupEventListeners();
    });
    
    function initializeBootstrapComponents() {
      deleteConfirmModal = new bootstrap.Modal(document.getElementById('delete-confirmation-modal'));
      newActionItemModal = new bootstrap.Modal(document.getElementById('new-action-item-modal'));
    }
    
    function initializeDatePickers() {
      // Initialize session date picker
      datePicker = flatpickr("#session-date", {
        dateFormat: "Y-m-d",
        allowInput: true,
        defaultDate: new Date()
      });
      
      // Initialize next session date picker
      nextDatePicker = flatpickr("#nextCheckInDate", {
        dateFormat: "Y-m-d",
        allowInput: true
      });
      
      // Initialize action item due date picker
      actionItemDueDatePicker = flatpickr("#action-item-due-date", {
        dateFormat: "Y-m-d",
        allowInput: true,
        defaultDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // Default: 7 days from now
      });
      
      // Initialize custom date range pickers
      customStartDatePicker = flatpickr("#filter-start-date", {
        dateFormat: "Y-m-d",
        allowInput: true
      });
      
      customEndDatePicker = flatpickr("#filter-end-date", {
        dateFormat: "Y-m-d",
        allowInput: true
      });
    }
    
    function setupEventListeners() {
      // Form submission
      document.getElementById('session-form').addEventListener('submit', function(e) {
        e.preventDefault();
        saveSession();
      });
      
      // Button click handlers
      document.getElementById('new-session-btn').addEventListener('click', newSession);
      document.getElementById('delete-btn').addEventListener('click', function() {
        deleteConfirmModal.show();
      });
      document.getElementById('confirm-delete').addEventListener('click', deleteSession);
      document.getElementById('email-btn').addEventListener('click', sendFollowUpEmail);
      document.getElementById('action-items-btn').addEventListener('click', createActionItems);
      document.getElementById('create-new-action-item').addEventListener('click', showNewActionItemModal);
      document.getElementById('save-action-item').addEventListener('click', saveActionItem);
      
      // Filter controls
      document.getElementById('apply-filters-btn').addEventListener('click', applyFilters);
      document.getElementById('reset-filters-btn').addEventListener('click', resetFilters);
      document.getElementById('filter-date-range').addEventListener('change', toggleCustomDateRange);
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const overlay = document.getElementById('loading-overlay');
      overlay.style.opacity = '0';
      setTimeout(() => {
        overlay.style.display = 'none';
        overlay.style.opacity = '1';
      }, 300);
    }
    
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(populateTeamMembers)
        .withFailureHandler(handleError)
        .getTeamMembers();
    }
    
    function populateTeamMembers(teamMembers) {
      allTeamMembers = teamMembers.filter(member => member.Status === 'Active');
      
      const teamMemberSelect = document.getElementById('team-member-email');
      const filterTeamMemberSelect = document.getElementById('filter-team-member');
      
      // Clear existing options
      teamMemberSelect.innerHTML = '<option value="">Select Team Member</option>';
      filterTeamMemberSelect.innerHTML = '<option value="">All Team Members</option>';
      
      // Add team members to selects
      allTeamMembers.forEach(member => {
        const option1 = document.createElement('option');
        option1.value = member.Email;
        option1.textContent = member.Name || member.Email;
        teamMemberSelect.appendChild(option1);
        
        const option2 = document.createElement('option');
        option2.value = member.Email;
        option2.textContent = member.Name || member.Email;
        filterTeamMemberSelect.appendChild(option2);
      });
    }
    
    function loadSessions() {
      showLoading();
      
      // Get filter values
      const filters = getFilters();
      
      google.script.run
        .withSuccessHandler(displaySessions)
        .withFailureHandler(handleError)
        .getOneOnOneSessions(filters, 100);
    }
    
    function getFilters() {
      const teamMemberEmail = document.getElementById('filter-team-member').value;
      const status = document.getElementById('filter-status').value;
      const dateRange = document.getElementById('filter-date-range').value;
      
      let startDate = null;
      let endDate = null;
      
      if (dateRange === 'custom') {
        startDate = customStartDatePicker.selectedDates.length > 0 ? customStartDatePicker.selectedDates[0] : null;
        endDate = customEndDatePicker.selectedDates.length > 0 ? customEndDatePicker.selectedDates[0] : null;
      } else if (dateRange !== 'all') {
        startDate = new Date();
        startDate.setDate(startDate.getDate() - parseInt(dateRange));
      }
      
      return {
        teamMemberEmail: teamMemberEmail,
        status: status,
        startDate: startDate,
        endDate: endDate
      };
    }
    
    function toggleCustomDateRange() {
      const dateRange = document.getElementById('filter-date-range').value;
      const customDateRange = document.getElementById('custom-date-range');
      
      if (dateRange === 'custom') {
        customDateRange.style.display = 'flex';
      } else {
        customDateRange.style.display = 'none';
      }
    }
    
    function displaySessions(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load sessions', 'error');
        return;
      }
      
      allSessions = result.data || [];
      const container = document.getElementById('sessions-container');
      const sessionCount = document.getElementById('session-count-container');
      
      // Update count
      sessionCount.textContent = `${allSessions.length} session${allSessions.length !== 1 ? 's' : ''}`;
      
      // Clear container
      container.innerHTML = '';
      
      if (allSessions.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-comments"></i>
            </div>
            <h5 class="empty-state-title">No sessions found</h5>
            <p class="empty-state-message">Try adjusting your filters or create a new session.</p>
            <button class="btn btn-primary" onclick="newSession()">
              <i class="fas fa-plus me-2"></i> Create New Session
            </button>
          </div>
        `;
        return;
      }
      
      // Create session list items
      allSessions.forEach((session, index) => {
        const teamMember = allTeamMembers.find(m => m.Email === session.teamMemberEmail) || {};
        const teamMemberName = teamMember.Name || session.teamMemberEmail || 'Unknown';
        const initials = getInitials(teamMemberName);
        
        let statusClass = 'status-scheduled';
        if (session.status === 'completed') {
          statusClass = 'status-completed';
        } else if (session.status === 'cancelled') {
          statusClass = 'status-cancelled';
        }
        
        const sessionDate = new Date(session.date);
        const nextSessionDate = session.nextCheckInDate ? new Date(session.nextCheckInDate) : null;
        
        // Check if session is overdue
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        let overdueLabel = '';
        if (session.status === 'completed' && nextSessionDate && nextSessionDate < today) {
          const diffTime = Math.abs(today - nextSessionDate);
          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); 
          overdueLabel = `<span class="session-status status-overdue">${diffDays}d overdue</span>`;
          statusClass = 'status-overdue';
        }
        
        const listItem = document.createElement('li');
        listItem.className = `session-item slide-in ${session.id === currentSessionId ? 'active' : ''}`;
        listItem.style.animationDelay = `${index * 0.05}s`;
        listItem.dataset.id = session.id;
        listItem.innerHTML = `
          <div class="session-avatar">${initials}</div>
          <div class="session-info">
            <div class="session-title">${teamMemberName}</div>
            <div class="session-date">
              <i class="far fa-calendar-alt me-1"></i>
              ${formatDate(sessionDate)}
            </div>
          </div>
          <span class="session-status ${statusClass}">${session.status}</span>
          ${overdueLabel}
        `;
        
        listItem.addEventListener('click', () => loadSession(session.id));
        container.appendChild(listItem);
      });
    }
    
    function loadSession(sessionId) {
      showLoading();
      currentSessionId = sessionId;
      
      // Update active class in session list
      document.querySelectorAll('.session-item').forEach(item => {
        if (item.dataset.id === sessionId) {
          item.classList.add('active');
        } else {
          item.classList.remove('active');
        }
      });
      
      // Show delete button since we're loading an existing session
      document.getElementById('delete-btn').style.display = 'block';
      
      google.script.run
        .withSuccessHandler(populateSessionForm)
        .withFailureHandler(handleError)
        .getOneOnOneById(sessionId);
    }
    
    function populateSessionForm(sessionData) {
      hideLoading();
      
      if (!sessionData || !sessionData.id) {
        showNotification('Error', 'Failed to load session data', 'error');
        return;
      }
      
      // Populate form fields
      document.getElementById('session-id').value = sessionData.id;
      document.getElementById('team-member-email').value = sessionData.teamMemberEmail || '';
      document.getElementById('session-status').value = sessionData.status || 'scheduled';
      
      // Set dates using flatpickr
      if (sessionData.date) {
        datePicker.setDate(new Date(sessionData.date));
      } else {
        datePicker.setDate(new Date());
      }
      
      if (sessionData.nextCheckInDate) {
        nextDatePicker.setDate(new Date(sessionData.nextCheckInDate));
      } else {
        nextDatePicker.clear();
      }
      
      // Populate checkboxes
      const checkboxFields = [
        'reviewedPreviousMeeting', 'reviewedPerformanceMetrics', 'gatheredUpdates', 'preparedDiscussionPoints',
        'confirmedActionItems', 'establishedOwnership', 'setPreciseFollowUp'
      ];
      
      checkboxFields.forEach(field => {
        const checkbox = document.getElementById(field);
        checkbox.checked = sessionData[field] === true;
      });
      
      // Populate text fields
      const textFields = [
        'preparationNotes', 'criticalDiscussionPoints', 'immediateBlockers', 
        'quantitativeMetricsReview', 'qualitativeImpactAssessment', 'strategicInsightCapture',
        'skillMasteryMapping', 'careerTrajectoryAlignment', 'actionDevelopmentTracker',
        'obstacleIdentification', 'leadershipSupportCalibration', 'commitmentsSynthesis',
        'actionItemsList', 'counselorSupportNeeds'
      ];
      
      textFields.forEach(field => {
        const textField = document.getElementById(field);
        textField.value = sessionData[field] || '';
      });
      
      // Populate select fields
      document.getElementById('workloadStatus').value = sessionData.workloadStatus || '';
      document.getElementById('energyLevel').value = sessionData.energyLevel || '';
      
      // Load related action items
      loadRelatedActionItems(sessionData.id);
      
      // Activate the first tab
      const detailsTab = document.getElementById('details-tab');
      bootstrap.Tab.getOrCreateInstance(detailsTab).show();
    }
    
    function loadRelatedActionItems(sessionId) {
      google.script.run
        .withSuccessHandler(displayRelatedActionItems)
        .withFailureHandler(handleError)
        .getActionItems({ sourceType: 'One-on-One', sourceId: sessionId }, 50);
    }
    
    function displayRelatedActionItems(result) {
      const container = document.getElementById('action-items-container');
      
      if (!result || !result.success) {
        container.innerHTML = `
          <div class="alert alert-danger">
            Failed to load action items: ${result ? result.message : 'Unknown error'}
          </div>
        `;
        return;
      }
      
      const actionItems = result.data || [];
      
      if (actionItems.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="fas fa-tasks"></i>
            </div>
            <h5 class="empty-state-title">No action items yet</h5>
            <p class="empty-state-message">Create action items from the session details or add them manually.</p>
            <button class="btn btn-primary" onclick="createActionItems()">
              <i class="fas fa-plus me-2"></i> Create From Session
            </button>
          </div>
        `;
        return;
      }
      
      let html = `<div class="action-items staggered">`;
      
              actionItems.forEach((item, index) => {
          const dueDate = new Date(item.dueDate);
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          
          let dueDateClass = '';
          let dueDateText = formatDate(dueDate);
          
          if (dueDate < today && item.status !== 'Completed') {
            dueDateClass = 'action-item-overdue';
            const days = Math.floor((today - dueDate) / (24 * 60 * 60 * 1000));
            dueDateText = `Overdue by ${days} day${days !== 1 ? 's' : ''}`;
          } else if (dueDate.getTime() === today.getTime() && item.status !== 'Completed') {
            dueDateClass = 'action-item-overdue';
            dueDateText = 'Due today';
          }
          
          html += `
            <div class="action-item" style="animation-delay: ${index * 0.05}s">
              <div class="action-item-status ${item.status === 'Completed' ? 'completed' : ''}" 
                   onclick="toggleActionItemStatus('${item.id}', ${item.status === 'Completed'})">
              </div>
              <div class="action-item-text ${item.status === 'Completed' ? 'completed' : ''}">
                ${item.title}
                <div class="action-item-due ${dueDateClass}">
                  <i class="far fa-calendar-alt me-1"></i> ${dueDateText}
                </div>
              </div>
              <div class="action-item-buttons">
                ${item.status !== 'Completed' ? 
                  `<button class="btn btn-sm btn-outline-primary me-2" onclick="editActionItem('${item.id}')">
                    <i class="fas fa-edit"></i>
                  </button>` : ''}
                <button class="btn btn-sm btn-outline-danger" onclick="deleteActionItem('${item.id}')">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </div>
          `;
        });
        
        html += '</div>';
        container.innerHTML = html;
      }
    }
    
    function toggleActionItemStatus(id, isCompleted) {
      if (isCompleted) {
        // If already completed, do nothing or implement a reopen feature
        return;
      }
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(() => {
          // Reload action items after completion
          const sessionId = document.getElementById('session-id').value;
          loadRelatedActionItems(sessionId);
          hideLoading();
          showNotification('Success', 'Action item marked as completed', 'success');
        })
        .withFailureHandler(handleError)
        .completeActionItem(id);
    }
    
    function newSession() {
      // Clear form
      document.getElementById('session-form').reset();
      document.getElementById('session-id').value = '';
      
      // Set default date to today
      datePicker.setDate(new Date());
      nextDatePicker.clear();
      
      // Hide delete button
      document.getElementById('delete-btn').style.display = 'none';
      
      // Clear action items
      document.getElementById('action-items-container').innerHTML = `
        <div class="empty-state">
          <div class="empty-state-icon">
            <i class="fas fa-tasks"></i>
          </div>
          <h5 class="empty-state-title">No action items yet</h5>
          <p class="empty-state-message">Save the session first to create action items.</p>
        </div>
      `;
      
      // Remove active class from all session items
      document.querySelectorAll('.session-item').forEach(item => {
        item.classList.remove('active');
      });
      
      currentSessionId = null;
      
      // Show first tab
      const detailsTab = document.getElementById('details-tab');
      bootstrap.Tab.getOrCreateInstance(detailsTab).show();
      
      // Animate the form sections
      animateFormSections();
    }
    
    function animateFormSections() {
      const sections = document.querySelectorAll('.staggered');
      sections.forEach((section, index) => {
        setTimeout(() => {
          section.style.opacity = '1';
        }, index * 100);
      });
    }
    
    function saveSession() {
      showLoading();
      
      // Get form data
      const sessionData = {
        id: document.getElementById('session-id').value,
        teamMemberEmail: document.getElementById('team-member-email').value,
        date: datePicker.selectedDates[0],
        status: document.getElementById('session-status').value,
        nextCheckInDate: nextDatePicker.selectedDates.length > 0 ? nextDatePicker.selectedDates[0] : null
      };
      
      // Get team member name
      const teamMember = allTeamMembers.find(m => m.Email === sessionData.teamMemberEmail);
      if (teamMember && teamMember.Name) {
        sessionData.teamMemberName = teamMember.Name;
      }
      
      // Get checkbox values
      const checkboxFields = [
        'reviewedPreviousMeeting', 'reviewedPerformanceMetrics', 'gatheredUpdates', 'preparedDiscussionPoints',
        'confirmedActionItems', 'establishedOwnership', 'setPreciseFollowUp'
      ];
      
      checkboxFields.forEach(field => {
        sessionData[field] = document.getElementById(field).checked;
      });
      
      // Get text fields
      const textFields = [
        'preparationNotes', 'criticalDiscussionPoints', 'immediateBlockers', 
        'quantitativeMetricsReview', 'qualitativeImpactAssessment', 'strategicInsightCapture',
        'skillMasteryMapping', 'careerTrajectoryAlignment', 'actionDevelopmentTracker',
        'obstacleIdentification', 'leadershipSupportCalibration', 'commitmentsSynthesis',
        'actionItemsList', 'counselorSupportNeeds'
      ];
      
      textFields.forEach(field => {
        sessionData[field] = document.getElementById(field).value;
      });
      
      // Get select fields
      sessionData.workloadStatus = document.getElementById('workloadStatus').value;
      sessionData.energyLevel = document.getElementById('energyLevel').value;
      
      google.script.run
        .withSuccessHandler(handleSaveSuccess)
        .withFailureHandler(handleError)
        .saveOneOnOne(sessionData);
    }
    
    function handleSaveSuccess(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to save session', 'error');
        return;
      }
      
      showNotification('Success', 'Session saved successfully', 'success');
      
      // Update current session ID
      currentSessionId = result.id;
      document.getElementById('session-id').value = result.id;
      
      // Show delete button
      document.getElementById('delete-btn').style.display = 'block';
      
      // Reload sessions
      loadSessions();
    }
    
    function deleteSession() {
      const sessionId = document.getElementById('session-id').value;
      if (!sessionId) {
        showNotification('Error', 'No session selected', 'error');
        deleteConfirmModal.hide();
        return;
      }
      
      showLoading();
      deleteConfirmModal.hide();
      
      google.script.run
        .withSuccessHandler(handleDeleteSuccess)
        .withFailureHandler(handleError)
        .deleteOneOnOne(sessionId);
    }
    
    function handleDeleteSuccess(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to delete session', 'error');
        return;
      }
      
      showNotification('Success', 'Session deleted successfully', 'success');
      
      // Clear form and reset state
      newSession();
      
      // Reload sessions
      loadSessions();
    }
    
    function sendFollowUpEmail() {
      const sessionId = document.getElementById('session-id').value;
      if (!sessionId) {
        showNotification('Error', 'Please save the session first', 'error');
        return;
      }
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleEmailSuccess)
        .withFailureHandler(handleError)
        .sendOneOnOneFollowUpEmail(getFormData());
    }
    
    function handleEmailSuccess(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to send follow-up email', 'error');
        return;
      }
      
      showNotification('Success', 'Follow-up email sent successfully', 'success');
    }
    
    function createActionItems() {
      const sessionId = document.getElementById('session-id').value;
      if (!sessionId) {
        showNotification('Error', 'Please save the session first', 'error');
        return;
      }
      
      const actionItemsList = document.getElementById('actionItemsList').value;
      if (!actionItemsList.trim()) {
        showNotification('Warning', 'No action items found. Please add action items in the Action Items field.', 'warning');
        return;
      }
      
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleCreateActionItemsSuccess)
        .withFailureHandler(handleError)
        .createActionItemsFromOneOnOne(getFormData());
    }
    
    function handleCreateActionItemsSuccess(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to create action items', 'error');
        return;
      }
      
      showNotification('Success', `Created ${result.count} action item${result.count !== 1 ? 's' : ''} successfully`, 'success');
      
      // Load related action items
      loadRelatedActionItems(document.getElementById('session-id').value);
      
      // Switch to action items tab
      const actionItemsTab = document.getElementById('action-items-tab');
      bootstrap.Tab.getOrCreateInstance(actionItemsTab).show();
    }
    
    function showNewActionItemModal() {
      const sessionId = document.getElementById('session-id').value;
      if (!sessionId) {
        showNotification('Error', 'Please save the session first', 'error');
        return;
      }
      
      // Reset form
      document.getElementById('action-item-form').reset();
      document.getElementById('action-item-id').value = '';
      
      // Set default due date (7 days from today)
      actionItemDueDatePicker.setDate(new Date(Date.now() + 7 * 24 * 60 * 60 * 1000));
      
      // Show modal
      newActionItemModal.show();
    }
    
    function editActionItem(id) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(populateActionItemForm)
        .withFailureHandler(handleError)
        .getActionItemById(id);
    }
    
    function populateActionItemForm(actionItem) {
      hideLoading();
      
      if (!actionItem || !actionItem.id) {
        showNotification('Error', 'Failed to load action item data', 'error');
        return;
      }
      
      document.getElementById('action-item-id').value = actionItem.id;
      document.getElementById('action-item-title').value = actionItem.title || '';
      document.getElementById('action-item-description').value = actionItem.description || '';
      document.getElementById('action-item-priority').value = actionItem.priority || 'Medium';
      
      if (actionItem.dueDate) {
        actionItemDueDatePicker.setDate(new Date(actionItem.dueDate));
      } else {
        actionItemDueDatePicker.setDate(new Date(Date.now() + 7 * 24 * 60 * 60 * 1000));
      }
      
      // Show modal
      newActionItemModal.show();
    }
    
    function saveActionItem() {
      const sessionId = document.getElementById('session-id').value;
      const teamMemberEmail = document.getElementById('team-member-email').value;
      const actionItemId = document.getElementById('action-item-id').value;
      const title = document.getElementById('action-item-title').value.trim();
      const description = document.getElementById('action-item-description').value.trim();
      const dueDate = actionItemDueDatePicker.selectedDates[0];
      const priority = document.getElementById('action-item-priority').value;
      
      if (!title) {
        showNotification('Error', 'Title is required', 'error');
        return;
      }
      
      if (!dueDate) {
        showNotification('Error', 'Due date is required', 'error');
        return;
      }
      
      const actionItem = {
        id: actionItemId,
        title: title,
        description: description,
        dueDate: dueDate,
        priority: priority,
        status: 'Not Started',
        teamMemberEmail: teamMemberEmail,
        sourceType: 'One-on-One',
        sourceId: sessionId
      };
      
      showLoading();
      newActionItemModal.hide();
      
      google.script.run
        .withSuccessHandler(handleSaveActionItemSuccess)
        .withFailureHandler(handleError)
        .saveActionItem(actionItem);
    }
    
    function handleSaveActionItemSuccess(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to save action item', 'error');
        return;
      }
      
      showNotification('Success', 'Action item saved successfully', 'success');
      
      // Reload action items
      loadRelatedActionItems(document.getElementById('session-id').value);
    }
    
    function deleteActionItem(id) {
      if (confirm('Are you sure you want to delete this action item?')) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(() => {
            hideLoading();
            showNotification('Success', 'Action item deleted successfully', 'success');
            loadRelatedActionItems(document.getElementById('session-id').value);
          })
          .withFailureHandler(handleError)
          .deleteActionItem(id);
      }
    }
    
    function getFormData() {
      // Get current form values as object
      const formData = {
        id: document.getElementById('session-id').value,
        teamMemberEmail: document.getElementById('team-member-email').value,
        teamMemberName: (() => {
          const teamMember = allTeamMembers.find(m => m.Email === document.getElementById('team-member-email').value);
          return teamMember ? teamMember.Name : '';
        })(),
        date: datePicker.selectedDates[0],
        status: document.getElementById('session-status').value,
        nextCheckInDate: nextDatePicker.selectedDates.length > 0 ? nextDatePicker.selectedDates[0] : null
      };
      
      // Add text fields
      const textFields = [
        'preparationNotes', 'criticalDiscussionPoints', 'immediateBlockers', 
        'quantitativeMetricsReview', 'qualitativeImpactAssessment', 'strategicInsightCapture',
        'skillMasteryMapping', 'careerTrajectoryAlignment', 'actionDevelopmentTracker',
        'obstacleIdentification', 'leadershipSupportCalibration', 'commitmentsSynthesis',
        'actionItemsList', 'counselorSupportNeeds'
      ];
      
      textFields.forEach(field => {
        formData[field] = document.getElementById(field).value;
      });
      
      // Add checkboxes
      const checkboxFields = [
        'reviewedPreviousMeeting', 'reviewedPerformanceMetrics', 'gatheredUpdates', 'preparedDiscussionPoints',
        'confirmedActionItems', 'establishedOwnership', 'setPreciseFollowUp'
      ];
      
      checkboxFields.forEach(field => {
        formData[field] = document.getElementById(field).checked;
      });
      
      // Add select fields
      formData.workloadStatus = document.getElementById('workloadStatus').value;
      formData.energyLevel = document.getElementById('energyLevel').value;
      
      return formData;
    }
    
    function applyFilters() {
      const dateRange = document.getElementById('filter-date-range').value;
      if (dateRange === 'custom') {
        const startDate = customStartDatePicker.selectedDates[0];
        const endDate = customEndDatePicker.selectedDates[0];
        
        if (!startDate || !endDate) {
          showNotification('Error', 'Please select both start and end dates for custom range', 'error');
          return;
        }
        
        if (startDate > endDate) {
          showNotification('Error', 'Start date cannot be after end date', 'error');
          return;
        }
      }
      
      loadSessions();
    }
    
    function resetFilters() {
      document.getElementById('filter-team-member').value = '';
      document.getElementById('filter-status').value = '';
      document.getElementById('filter-date-range').value = '30';
      
      // Hide custom date range
      document.getElementById('custom-date-range').style.display = 'none';
      
      // Clear custom date range pickers
      customStartDatePicker.clear();
      customEndDatePicker.clear();
      
      loadSessions();
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      if (type === 'warning') iconClass = 'exclamation-triangle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', () => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto dismiss after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function getInitials(name) {
      if (!name) return '?';
      return name
        .split(' ')
        .map(n => n[0])
        .join('')
        .substring(0, 2)
        .toUpperCase();
    }
    
    function formatDate(dateStr) {
      if (!dateStr) return '';
      
      const date = new Date(dateStr);
      const now = new Date();
      const yesterday = new Date(now);
      yesterday.setDate(yesterday.getDate() - 1);
      const tomorrow = new Date(now);
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      // Check if date is today, yesterday or tomorrow
      if (date.toDateString() === now.toDateString()) {
        return 'Today';
      } else if (date.toDateString() === yesterday.toDateString()) {
        return 'Yesterday';
      } else if (date.toDateString() === tomorrow.toDateString()) {
        return 'Tomorrow';
      }
      
      // Otherwise format based on how far in the future/past
      const options = { month: 'short', day: 'numeric' };
      
      // Add year if not current year
      if (date.getFullYear() !== now.getFullYear()) {
        options.year = 'numeric';
      }
      
      return date.toLocaleDateString(undefined, options);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
    
    // Initialize on load
    document.addEventListener('DOMContentLoaded', function() {
      // Hide delete button initially
      document.getElementById('delete-btn').style.display = 'none';
    });
  </script>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      overflow-x: hidden;
    }
    
    /* App Layout */
    .app-container {
      display: grid;
      grid-template-rows: auto 1fr;
      grid-template-areas: 
        "header"
        "content";
      height: 100vh;
      width: 100vw;
      overflow: hidden;
    }
    
    /* Header */
    .app-header {
      grid-area: header;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1.5rem;
      background-color: var(--surface);
      border-bottom: 1px solid var(--border-color);
      box-shadow: var(--shadow-sm);
      z-index: 99;
    }
    
    .header-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .header-title-icon {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }
    
    .header-actions {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .header-action-btn {
      height: 38px;
      padding: 0 1rem;
      border-radius: 8px;
      background: var(--surface);
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      cursor: pointer;
      transition: var(--transition);
      font-weight: 500;
    }
    
    .header-action-btn:hover {
      background: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .header-action-btn-primary {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      border: none;
    }
    
    .header-action-btn-primary:hover {
      color: white;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .header-action-btn-danger {
      background-color: var(--danger-light);
      color: var(--danger);
      border-color: var(--danger);
    }
    
    .header-action-btn-danger:hover {
      background-color: var(--danger);
      color: white;
    }
    
    /* Content Area */
    .app-content {
      grid-area: content;
      overflow-y: auto;
      padding: 1.5rem;
      background-color: #f5f7ff;
      position: relative;
    }
    
    /* Session Header */
    .session-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }
    
    .session-meta {
      display: flex;
      flex-direction: column;
    }
    
    .session-title {
      font-size: 1.5rem;
      font-weight: 700;
      margin: 0;
      color: var(--text-primary);
    }
    
    .session-subtitle {
      color: var(--text-secondary);
      margin-top: 0.25rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .session-status {
      display: inline-flex;
      padding: 0.25rem 0.75rem;
      border-radius: 50px;
      font-size: 0.75rem;
      font-weight: 600;
    }
    
    .status-scheduled {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .status-completed {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .status-in-progress {
      background-color: var(--warning-light);
      color: var(--warning);
    }
    
    .status-cancelled {
      background-color: var(--text-secondary);
      color: white;
      opacity: 0.7;
    }
    
    /* Session Content */
    .session-content {
      display: grid;
      grid-template-columns: 3fr 1fr;
      gap: 1.5rem;
    }
    
    /* Session Notes */
    .session-notes {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }
    
    /* Section Card */
    .section-card {
      background: var(--surface);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      overflow: hidden;
    }
    
    .section-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .section-header {
      padding: 1.25rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      align-items: center;
      gap: 0.75rem;
      cursor: pointer;
    }
    
    .section-header-icon {
      width: 32px;
      height: 32px;
      background: var(--primary-light);
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 8px;
      flex-shrink: 0;
    }
    
    .section-title {
      font-size: 1.125rem;
      font-weight: 600;
      color: var(--text-primary);
      margin: 0;
      flex: 1;
    }
    
    .section-toggle {
      color: var(--text-secondary);
      transition: var(--transition);
    }
    
    .section-toggle.collapsed {
      transform: rotate(-90deg);
    }
    
    .section-content {
      padding: 1.25rem;
    }
    
    /* Notes */
    .note-item {
      margin-bottom: 1rem;
    }
    
    .note-item:last-child {
      margin-bottom: 0;
    }
    
    .note-label {
      font-weight: 600;
      margin-bottom: 0.25rem;
      color: var(--text-primary);
    }
    
    .note-value {
      color: var(--text-secondary);
      white-space: pre-wrap;
    }
    
    .note-value.empty {
      color: var(--text-secondary);
      font-style: italic;
      opacity: 0.6;
    }
    
    /* Rating Display */
    .rating-display {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .rating-value {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 36px;
      height: 36px;
      background: var(--primary);
      color: white;
      border-radius: 8px;
      font-weight: 600;
    }
    
    /* Checkbox Display */
    .checkbox-container {
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
      margin-bottom: 1rem;
    }
    
    .checkbox-item {
      display: flex;
      align-items: center;
      padding: 0.5rem 1rem;
      background-color: var(--surface-hover);
      border-radius: 6px;
      font-size: 0.9rem;
    }
    
    .checkbox-item.checked {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .checkbox-icon {
      margin-right: 0.5rem;
    }
    
    /* Action Items */
    .action-item {
      margin-bottom: 1rem;
      padding: 1rem;
      border-radius: 8px;
      background-color: var(--surface-hover);
      border-left: 3px solid var(--primary);
    }
    
    .action-item-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.5rem;
    }
    
    .action-item-title {
      font-weight: 600;
      margin: 0;
      color: var(--text-primary);
    }
    
    .action-item-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .action-item-owner {
      display: flex;
      align-items: center;
      gap: 0.375rem;
    }
    
    /* Sidebar */
    .session-sidebar {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }
    
    .sidebar-card {
      background: var(--surface);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      overflow: hidden;
      transition: var(--transition);
    }
    
    .sidebar-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .sidebar-card-header {
      padding: 1rem;
      background: var(--primary-light);
      font-weight: 600;
      color: var(--primary);
      border-bottom: 1px solid var(--border-color);
    }
    
    .sidebar-card-content {
      padding: 1rem;
    }
    
    .team-member-details {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }
    
    .team-member-avatar {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: linear-gradient(135deg, var(--primary-light), var(--info-light));
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 1rem;
      position: relative;
      color: var(--primary);
      font-weight: 700;
      font-size: 1.5rem;
    }
    
    .team-member-name {
      font-weight: 600;
      margin-bottom: 0.25rem;
      color: var(--text-primary);
    }
    
    .team-member-role {
      color: var(--text-secondary);
      font-size: 0.875rem;
      margin-bottom: 0.5rem;
    }
    
    .team-member-contact {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      margin-top: 0.5rem;
    }
    
    .team-member-contact a {
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 6px;
      background: var(--primary-light);
      color: var(--primary);
      transition: var(--transition);
    }
    
    .team-member-contact a:hover {
      background: var(--primary);
      color: white;
    }
    
    .team-member-info {
      margin-top: 1rem;
      width: 100%;
    }
    
    .info-item {
      display: flex;
      justify-content: space-between;
      padding: 0.5rem 0;
      border-bottom: 1px solid var(--border-color);
      font-size: 0.875rem;
    }
    
    .info-item:last-child {
      border-bottom: none;
    }
    
    .info-label {
      color: var(--text-secondary);
    }
    
    .info-value {
      color: var(--text-primary);
      font-weight: 500;
    }
    
    .session-history {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .history-item {
      display: flex;
      padding: 0.75rem 0;
      border-bottom: 1px solid var(--border-color);
    }
    
    .history-item:last-child {
      border-bottom: none;
    }
    
    .history-date {
      width: 80px;
      color: var(--text-secondary);
      font-size: 0.875rem;
    }
    
    .history-status {
      flex: 1;
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    .button-block {
      display: block;
      width: 100%;
      margin-bottom: 0.5rem;
      padding: 0.5rem;
      text-align: center;
    }
    
    /* Loading Animation */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      z-index: 9999;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      transition: var(--transition);
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      position: relative;
    }
    
    .loading-spinner::before {
      content: '';
      position: absolute;
      top: -4px;
      left: -4px;
      right: -4px;
      bottom: -4px;
      border: 4px solid transparent;
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .loading-text {
      margin-top: 1rem;
      color: var(--primary);
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    /* Animation Classes */
    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }
    
    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }
    
    /* Notification System */
    .notification {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 9999;
      display: flex;
      align-items: center;
      padding: 12px 20px;
      background: rgba(67, 97, 238, 0.95);
      color: white;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      max-width: 350px;
      transform: translateX(400px);
      transition: transform 0.3s ease, opacity 0.3s ease;
      opacity: 0;
    }
    
    .notification-icon {
      margin-right: 12px;
      font-size: 18px;
    }
    
    .notification-message {
      flex: 1;
      font-size: 14px;
    }
    
    .notification-close {
      background: none;
      border: none;
      color: white;
      opacity: 0.7;
      cursor: pointer;
      font-size: 14px;
      margin-left: 12px;
      padding: 0;
      transition: var(--transition);
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    /* Responsive styles */
    @media (max-width: 991px) {
      .session-content {
        grid-template-columns: 1fr;
      }
      
      .session-sidebar {
        order: -1;
      }
      
      .team-member-details {
        display: grid;
        grid-template-columns: auto 1fr;
        grid-template-areas: 
          "avatar name"
          "avatar role"
          "info info"
          "contact contact";
        text-align: left;
        gap: 0.25rem 1rem;
      }
      
      .team-member-avatar {
        grid-area: avatar;
        margin-bottom: 0;
      }
      
      .team-member-name {
        grid-area: name;
        align-self: flex-end;
      }
      
      .team-member-role {
        grid-area: role;
        align-self: flex-start;
        margin-bottom: 0;
      }
      
      .team-member-info {
        grid-area: info;
      }
      
      .team-member-contact {
        grid-area: contact;
        justify-content: flex-start;
      }
    }
    
    @media (max-width: 576px) {
      .session-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }
      
      .header-action-btn span {
        display: none;
      }
      
      .header-action-btn {
        width: 38px;
        padding: 0;
        justify-content: center;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading session details...</div>
  </div>
  
  <div class="app-container">
    <!-- Header -->
    <header class="app-header">
      <div class="header-title">
        <div class="header-title-icon">
          <i class="fas fa-user-friends"></i>
        </div>
        <span>One-on-One Details</span>
      </div>
      
      <div class="header-actions">
        <button id="back-btn" class="header-action-btn">
          <i class="fas fa-arrow-left"></i>
          <span>Back</span>
        </button>
        <button id="print-btn" class="header-action-btn">
          <i class="fas fa-print"></i>
          <span>Print</span>
        </button>
        <button id="edit-btn" class="header-action-btn">
          <i class="fas fa-edit"></i>
          <span>Edit</span>
        </button>
        <button id="delete-btn" class="header-action-btn header-action-btn-danger">
          <i class="fas fa-trash-alt"></i>
          <span>Delete</span>
        </button>
      </div>
    </header>
    
    <!-- Main Content -->
    <main class="app-content" id="session-details-content">
      <!-- Content will be loaded dynamically -->
      <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading session details...</p>
      </div>
    </main>
  </div>

  <!-- Delete Confirmation Modal -->
  <div class="modal fade" id="delete-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Confirm Delete</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to delete this one-on-one session? This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirm-delete-btn">Delete Session</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let currentSession = null;
    let deleteModal = null;
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Get session ID from URL
      const urlParams = new URLSearchParams(window.location.search);
      const sessionId = urlParams.get('id');
      
      if (!sessionId) {
        showNotification('No session ID provided', 'error');
        goBack();
        return;
      }
      
      // Initialize UI
      initializeUI();
      
      // Load session details
      loadSessionDetails(sessionId);
      
      // Setup event listeners
      setupEventListeners();
    });
    
    function initializeUI() {
      // Initialize modals
      deleteModal = new bootstrap.Modal(document.getElementById('delete-modal'));
    }
    
    function setupEventListeners() {
      // Back button
      document.getElementById('back-btn').addEventListener('click', goBack);
      
      // Print button
      document.getElementById('print-btn').addEventListener('click', printSession);
      
      // Edit button
      document.getElementById('edit-btn').addEventListener('click', editSession);
      
      // Delete button
      document.getElementById('delete-btn').addEventListener('click', () => deleteModal.show());
      
      // Confirm delete button
      document.getElementById('confirm-delete-btn').addEventListener('click', deleteSession);
    }
    
    function loadSessionDetails(sessionId) {
      showLoading('Loading session details...');
      
      google.script.run
        .withSuccessHandler(function(session) {
          if (!session) {
            hideLoading();
            showNotification('Session not found', 'error');
            goBack();
            return;
          }
          
          currentSession = session;
          displaySessionDetails(session);
          loadTeamMemberDetails(session.teamMemberEmail);
          loadSessionHistory(session.teamMemberEmail);
          hideLoading();
        })
        .withFailureHandler(function(error) {
          hideLoading();
          showNotification('Failed to load session details: ' + error.message, 'error');
        })
        .getOneOnOneById(sessionId);
    }
    
    function loadTeamMemberDetails(email) {
      google.script.run
        .withSuccessHandler(function(teamMember) {
          if (teamMember) {
            updateTeamMemberCard(teamMember);
          }
        })
        .withFailureHandler(function(error) {
          console.error('Failed to load team member details:', error);
        })
        .getTeamMemberByEmail(email);
    }
    
    function loadSessionHistory(email) {
      google.script.run
        .withSuccessHandler(function(sessions) {
          if (sessions && sessions.length > 0) {
            updateSessionHistory(sessions);
          }
        })
        .withFailureHandler(function(error) {
          console.error('Failed to load session history:', error);
        })
        .getOneOnOnesByTeamMember(email, 5);
    }
    
    function displaySessionDetails(session) {
      const container = document.getElementById('session-details-content');
      
      const sessionDate = new Date(session.date);
      const nextSessionDate = session.nextSessionDate ? new Date(session.nextSessionDate) : null;
      
      let statusClass = 'status-scheduled';
      if (session.status === 'completed') {
        statusClass = 'status-completed';
      } else if (session.status === 'in-progress') {
        statusClass = 'status-in-progress';
      } else if (session.status === 'cancelled') {
        statusClass = 'status-cancelled';
      }
      
      // Create HTML content
      let html = `
        <div class="session-header">
          <div class="session-meta">
            <h1 class="session-title">One-on-One with ${session.teamMemberName || session.teamMemberEmail}</h1>
            <div class="session-subtitle">
              <span><i class="far fa-calendar-alt"></i> ${formatDate(sessionDate)}</span>
              <span class="session-status ${statusClass}">${capitalizeFirstLetter(session.status)}</span>
            </div>
          </div>
        </div>
        
        <div class="session-content">
          <div class="session-notes">
      `;
      
      // Preparation Section
      html += `
        <div class="section-card">
          <div class="section-header" data-bs-toggle="collapse" href="#preparation-content" role="button" aria-expanded="true">
            <div class="section-header-icon">
              <i class="fas fa-clipboard-check"></i>
            </div>
            <h2 class="section-title">Preparation</h2>
            <div class="section-toggle">
              <i class="fas fa-chevron-down"></i>
            </div>
          </div>
          <div id="preparation-content" class="collapse show">
            <div class="section-content">
              <div class="note-item">
                <div class="note-label">Pre-Meeting Checklist</div>
                <div class="checkbox-container">
                  ${getCheckboxHTML('check-previous-notes', 'Reviewed previous notes', session.checkPreviousNotes)}
                  ${getCheckboxHTML('check-goals', 'Reviewed goals progress', session.checkGoals)}
                  ${getCheckboxHTML('check-metrics', 'Reviewed performance metrics', session.checkMetrics)}
                  ${getCheckboxHTML('check-action-items', 'Checked previous action items', session.checkPreviousActionItems)}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Agenda Notes</div>
                <div class="note-value ${!session.agendaNotes ? 'empty' : ''}">
                  ${session.agendaNotes || 'No agenda notes recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Current Projects & Priorities</div>
                <div class="note-value ${!session.currentProjects ? 'empty' : ''}">
                  ${session.currentProjects || 'No current projects recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Recent Achievements</div>
                <div class="note-value ${!session.recentAchievements ? 'empty' : ''}">
                  ${session.recentAchievements || 'No recent achievements recorded'}
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Performance Review Section
      html += `
        <div class="section-card">
          <div class="section-header" data-bs-toggle="collapse" href="#performance-content" role="button" aria-expanded="true">
            <div class="section-header-icon">
              <i class="fas fa-star"></i>
            </div>
            <h2 class="section-title">Performance Review</h2>
            <div class="section-toggle">
              <i class="fas fa-chevron-down"></i>
            </div>
          </div>
          <div id="performance-content" class="collapse show">
            <div class="section-content">
              ${session.qualityRating ? `
              <div class="note-item">
                <div class="note-label">Quality Rating</div>
                <div class="note-value">
                  <div class="rating-display">
                    <div class="rating-value">${session.qualityRating}</div>
                    <span>out of 10</span>
                  </div>
                </div>
              </div>
              ` : ''}
              
              <div class="note-item">
                <div class="note-label">Quality Assessment</div>
                <div class="note-value ${!session.qualityAssessment ? 'empty' : ''}">
                  ${session.qualityAssessment || 'No quality assessment recorded'}
                </div>
              </div>
              
              ${session.productivityRating ? `
              <div class="note-item">
                <div class="note-label">Productivity Rating</div>
                <div class="note-value">
                  <div class="rating-display">
                    <div class="rating-value">${session.productivityRating}</div>
                    <span>out of 10</span>
                  </div>
                </div>
              </div>
              ` : ''}
              
              <div class="note-item">
                <div class="note-label">Productivity Assessment</div>
                <div class="note-value ${!session.productivityAssessment ? 'empty' : ''}">
                  ${session.productivityAssessment || 'No productivity assessment recorded'}
                </div>
              </div>
              
              ${session.workloadStatus ? `
              <div class="note-item">
                <div class="note-label">Current Workload Status</div>
                <div class="note-value">${session.workloadStatus}</div>
              </div>
              ` : ''}
              
              <div class="note-item">
                <div class="note-label">KPI Assessment</div>
                <div class="note-value ${!session.kpiAssessment ? 'empty' : ''}">
                  ${session.kpiAssessment || 'No KPI assessment recorded'}
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Teamwork & Collaboration Section
      html += `
        <div class="section-card">
          <div class="section-header" data-bs-toggle="collapse" href="#teamwork-content" role="button" aria-expanded="true">
            <div class="section-header-icon">
              <i class="fas fa-users"></i>
            </div>
            <h2 class="section-title">Teamwork & Collaboration</h2>
            <div class="section-toggle">
              <i class="fas fa-chevron-down"></i>
            </div>
          </div>
          <div id="teamwork-content" class="collapse show">
            <div class="section-content">
              ${session.teamworkRating ? `
              <div class="note-item">
                <div class="note-label">Teamwork Rating</div>
                <div class="note-value">
                  <div class="rating-display">
                    <div class="rating-value">${session.teamworkRating}</div>
                    <span>out of 10</span>
                  </div>
                </div>
              </div>
              ` : ''}
              
              <div class="note-item">
                <div class="note-label">Teamwork Observations</div>
                <div class="note-value ${!session.teamworkObservations ? 'empty' : ''}">
                  ${session.teamworkObservations || 'No teamwork observations recorded'}
                </div>
              </div>
              
              ${session.communicationRating ? `
              <div class="note-item">
                <div class="note-label">Communication Rating</div>
                <div class="note-value">
                  <div class="rating-display">
                    <div class="rating-value">${session.communicationRating}</div>
                    <span>out of 10</span>
                  </div>
                </div>
              </div>
              ` : ''}
              
              <div class="note-item">
                <div class="note-label">Communication Assessment</div>
                <div class="note-value ${!session.communicationAssessment ? 'empty' : ''}">
                  ${session.communicationAssessment || 'No communication assessment recorded'}
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Challenges & Support Section
      html += `
        <div class="section-card">
          <div class="section-header" data-bs-toggle="collapse" href="#challenges-content" role="button" aria-expanded="true">
            <div class="section-header-icon">
              <i class="fas fa-exclamation-triangle"></i>
            </div>
            <h2 class="section-title">Challenges & Support</h2>
            <div class="section-toggle">
              <i class="fas fa-chevron-down"></i>
            </div>
          </div>
          <div id="challenges-content" class="collapse show">
            <div class="section-content">
              <div class="note-item">
                <div class="note-label">Current Challenges</div>
                <div class="note-value ${!session.currentChallenges ? 'empty' : ''}">
                  ${session.currentChallenges || 'No current challenges recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Proposed Solutions</div>
                <div class="note-value ${!session.proposedSolutions ? 'empty' : ''}">
                  ${session.proposedSolutions || 'No proposed solutions recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Required Support</div>
                <div class="note-value ${!session.supportRequired ? 'empty' : ''}">
                  ${session.supportRequired || 'No support requirements recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Resources Needed</div>
                <div class="note-value ${!session.resourcesNeeded ? 'empty' : ''}">
                  ${session.resourcesNeeded || 'No resource needs recorded'}
                </div>
              </div>
              
              ${session.wellbeingStatus ? `
              <div class="note-item">
                <div class="note-label">Wellbeing Status</div>
                <div class="note-value">${session.wellbeingStatus}</div>
              </div>
              ` : ''}
              
              <div class="note-item">
                <div class="note-label">Wellbeing Notes</div>
                <div class="note-value ${!session.wellbeingNotes ? 'empty' : ''}">
                  ${session.wellbeingNotes || 'No wellbeing notes recorded'}
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Career Development Section
      html += `
        <div class="section-card">
          <div class="section-header" data-bs-toggle="collapse" href="#career-content" role="button" aria-expanded="true">
            <div class="section-header-icon">
              <i class="fas fa-rocket"></i>
            </div>
            <h2 class="section-title">Career Development</h2>
            <div class="section-toggle">
              <i class="fas fa-chevron-down"></i>
            </div>
          </div>
          <div id="career-content" class="collapse show">
            <div class="section-content">
              <div class="note-item">
                <div class="note-label">Progress on Existing Goals</div>
                <div class="note-value ${!session.goalsProgress ? 'empty' : ''}">
                  ${session.goalsProgress || 'No goals progress recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">New Goals</div>
                <div class="note-value ${!session.newGoals ? 'empty' : ''}">
                  ${session.newGoals || 'No new goals recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Current Strengths</div>
                <div class="note-value ${!session.skillsStrengths ? 'empty' : ''}">
                  ${session.skillsStrengths || 'No strengths recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Areas for Development</div>
                <div class="note-value ${!session.skillsDevelopment ? 'empty' : ''}">
                  ${session.skillsDevelopment || 'No development areas recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Learning Opportunities</div>
                <div class="note-value ${!session.learningOpportunities ? 'empty' : ''}">
                  ${session.learningOpportunities || 'No learning opportunities recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Career Aspirations</div>
                <div class="note-value ${!session.careerAspirations ? 'empty' : ''}">
                  ${session.careerAspirations || 'No career aspirations recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Career Development Plan</div>
                <div class="note-value ${!session.careerDevelopmentPlan ? 'empty' : ''}">
                  ${session.careerDevelopmentPlan || 'No career development plan recorded'}
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Action Items Section
      html += `
        <div class="section-card">
          <div class="section-header" data-bs-toggle="collapse" href="#action-items-content" role="button" aria-expanded="true">
            <div class="section-header-icon">
              <i class="fas fa-tasks"></i>
            </div>
            <h2 class="section-title">Action Items</h2>
            <div class="section-toggle">
              <i class="fas fa-chevron-down"></i>
            </div>
          </div>
          <div id="action-items-content" class="collapse show">
            <div class="section-content">
              ${getActionItemsHTML(session.actionItems)}
              
              <div class="note-item">
                <div class="note-label">Additional Notes</div>
                <div class="note-value ${!session.actionItemsNotes ? 'empty' : ''}">
                  ${session.actionItemsNotes || 'No additional notes on action items'}
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Follow-up & Summary Section
      html += `
        <div class="section-card">
          <div class="section-header" data-bs-toggle="collapse" href="#follow-up-content" role="button" aria-expanded="true">
            <div class="section-header-icon">
              <i class="fas fa-calendar-check"></i>
            </div>
            <h2 class="section-title">Follow-up & Summary</h2>
            <div class="section-toggle">
              <i class="fas fa-chevron-down"></i>
            </div>
          </div>
          <div id="follow-up-content" class="collapse show">
            <div class="section-content">
              ${nextSessionDate ? `
              <div class="note-item">
                <div class="note-label">Next Session Date</div>
                <div class="note-value">${formatDate(nextSessionDate)}</div>
              </div>
              ` : ''}
              
              ${session.followUpType ? `
              <div class="note-item">
                <div class="note-label">Follow-up Type</div>
                <div class="note-value">${session.followUpType}</div>
              </div>
              ` : ''}
              
              <div class="note-item">
                <div class="note-label">Follow-up Notes</div>
                <div class="note-value ${!session.followUpNotes ? 'empty' : ''}">
                  ${session.followUpNotes || 'No follow-up notes recorded'}
                </div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Session Summary</div>
                <div class="note-value ${!session.sessionSummary ? 'empty' : ''}">
                  ${session.sessionSummary || 'No session summary recorded'}
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Session Meta Section
      html += `
        <div class="section-card">
          <div class="section-header" data-bs-toggle="collapse" href="#meta-content" role="button">
            <div class="section-header-icon">
              <i class="fas fa-info-circle"></i>
            </div>
            <h2 class="section-title">Session Information</h2>
            <div class="section-toggle collapsed">
              <i class="fas fa-chevron-down"></i>
            </div>
          </div>
          <div id="meta-content" class="collapse">
            <div class="section-content">
              <div class="note-item">
                <div class="note-label">Session ID</div>
                <div class="note-value">${session.id}</div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Created By</div>
                <div class="note-value">${session.createdBy || 'Unknown'}</div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Created Date</div>
                <div class="note-value">${session.createdDate ? formatDate(new Date(session.createdDate)) + ' ' + formatTime(new Date(session.createdDate)) : 'Unknown'}</div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Last Updated By</div>
                <div class="note-value">${session.lastUpdatedBy || 'Unknown'}</div>
              </div>
              
              <div class="note-item">
                <div class="note-label">Last Updated Date</div>
                <div class="note-value">${session.lastUpdatedDate ? formatDate(new Date(session.lastUpdatedDate)) + ' ' + formatTime(new Date(session.lastUpdatedDate)) : 'Unknown'}</div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Close main section and start sidebar
      html += `
          </div>
          <div class="session-sidebar">
            <div class="sidebar-card">
              <div class="sidebar-card-header">
                Team Member
              </div>
              <div class="sidebar-card-content">
                <div class="team-member-details" id="team-member-details">
                  <div class="team-member-avatar">
                    ${getInitials(session.teamMemberName || session.teamMemberEmail)}
                  </div>
                  <div class="team-member-name">${session.teamMemberName || session.teamMemberEmail}</div>
                  <div class="team-member-role">Loading details...</div>
                  
                  <div class="team-member-contact">
                    <a href="mailto:${session.teamMemberEmail}" title="Email">
                      <i class="fas fa-envelope"></i>
                    </a>
                    <a href="#" title="Schedule Meeting" onclick="scheduleFollowUp()">
                      <i class="fas fa-calendar-plus"></i>
                    </a>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="sidebar-card">
              <div class="sidebar-card-header">
                Session History
              </div>
              <div class="sidebar-card-content">
                <ul class="session-history" id="session-history">
                  <li class="text-center">
                    <div class="spinner-border spinner-border-sm" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-2">Loading history...</span>
                  </li>
                </ul>
              </div>
            </div>
            
            <div class="sidebar-card">
              <div class="sidebar-card-header">
                Actions
              </div>
              <div class="sidebar-card-content">
                <button class="btn btn-primary button-block" onclick="scheduleFollowUp()">
                  <i class="fas fa-calendar-plus me-2"></i> Schedule Follow-Up
                </button>
                <button class="btn btn-outline-primary button-block" onclick="createActionItems()">
                  <i class="fas fa-tasks me-2"></i> Create Action Items
                </button>
                <button class="btn btn-outline-primary button-block" onclick="sendEmail()">
                  <i class="fas fa-envelope me-2"></i> Send Follow-Up Email
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Set the HTML to the container
      container.innerHTML = html;
      
      // Add event listeners for section toggles
      document.querySelectorAll('.section-header').forEach(header => {
        header.addEventListener('click', function() {
          const toggle = this.querySelector('.section-toggle');
          toggle.classList.toggle('collapsed');
        });
      });
    }
    
    function updateTeamMemberCard(teamMember) {
      const detailsContainer = document.getElementById('team-member-details');
      if (!detailsContainer) return;
      
      const avatar = detailsContainer.querySelector('.team-member-avatar');
      const name = detailsContainer.querySelector('.team-member-name');
      const role = detailsContainer.querySelector('.team-member-role');
      
      // Update avatar initials
      avatar.textContent = getInitials(teamMember.Name);
      
      // Update name
      name.textContent = teamMember.Name;
      
      // Update role
      role.textContent = teamMember.Role || 'Team Member';
      
      // Add info section if container doesn't have it yet
      if (!detailsContainer.querySelector('.team-member-info')) {
        const infoSection = document.createElement('div');
        infoSection.className = 'team-member-info';
        
        let infoHTML = '';
        
        if (teamMember.Department) {
          infoHTML += `
            <div class="info-item">
              <div class="info-label">Department</div>
              <div class="info-value">${teamMember.Department}</div>
            </div>
          `;
        }
        
        if (teamMember.StartDate) {
          infoHTML += `
            <div class="info-item">
              <div class="info-label">Start Date</div>
              <div class="info-value">${formatDate(new Date(teamMember.StartDate))}</div>
            </div>
          `;
        }
        
        infoHTML += `
          <div class="info-item">
            <div class="info-label">Email</div>
            <div class="info-value">${teamMember.Email}</div>
          </div>
        `;
        
        infoSection.innerHTML = infoHTML;
        detailsContainer.appendChild(infoSection);
      }
    }
    
    function updateSessionHistory(sessions) {
      const historyList = document.getElementById('session-history');
      if (!historyList) return;
      
      // Clear existing content
      historyList.innerHTML = '';
      
      // Sort sessions by date (most recent first)
      const sortedSessions = sessions.sort((a, b) => new Date(b.date) - new Date(a.date));
      
      // Create list items
      sortedSessions.forEach(session => {
        const sessionDate = new Date(session.date);
        
        let statusClass = '';
        if (session.status === 'completed') {
          statusClass = 'text-success';
        } else if (session.status === 'in-progress') {
          statusClass = 'text-warning';
        } else if (session.status === 'cancelled') {
          statusClass = 'text-muted';
        } else {
          statusClass = 'text-primary';
        }
        
        const listItem = document.createElement('li');
        listItem.className = 'history-item';
        listItem.innerHTML = `
          <div class="history-date">${formatDate(sessionDate, 'short')}</div>
          <div class="history-status ${statusClass}">${capitalizeFirstLetter(session.status)}</div>
        `;
        
        // Add click event
        listItem.style.cursor = 'pointer';
        listItem.addEventListener('click', () => {
          window.location.href = `?id=${session.id}`;
        });
        
        historyList.appendChild(listItem);
      });
    }
    
    function getCheckboxHTML(id, label, checked) {
      return `
        <div class="checkbox-item ${checked ? 'checked' : ''}">
          <span class="checkbox-icon">
            <i class="fas ${checked ? 'fa-check-square' : 'fa-square'}"></i>
          </span>
          ${label}
        </div>
      `;
    }
    
    function getActionItemsHTML(actionItems) {
      if (!actionItems || actionItems.length === 0) {
        return `
          <div class="note-item">
            <div class="note-value empty">No action items recorded</div>
          </div>
        `;
      }
      
      let html = '';
      actionItems.forEach((item, index) => {
        const ownerText = item.owner === 'team-member' ? 'Team Member' : 
                          item.owner === 'manager' ? 'Manager' : 'Both';
        
        html += `
          <div class="action-item">
            <div class="action-item-header">
              <h4 class="action-item-title">${item.title}</h4>
            </div>
            <div class="action-item-meta">
              <div class="action-item-owner">
                <i class="fas fa-user"></i> ${ownerText}
              </div>
              ${item.dueDate ? `
                <div class="action-item-due">
                  <i class="fas fa-calendar-day"></i> Due: ${formatDate(new Date(item.dueDate))}
                </div>
              ` : ''}
            </div>
          </div>
        `;
      });
      
      return html;
    }
    
    function formatDate(date, format = 'full') {
      if (!date) return '';
      
      const options = { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric'
      };
      
      if (format === 'short') {
        options.month = 'short';
      }
      
      return date.toLocaleDateString(undefined, options);
    }
    
    function formatTime(date) {
      if (!date) return '';
      
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    function getInitials(name) {
      if (!name) return '?';
      
      return name
        .split(' ')
        .map(n => n.charAt(0))
        .join('')
        .toUpperCase()
        .substring(0, 2);
    }
    
    function capitalizeFirstLetter(string) {
      if (!string) return '';
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    function goBack() {
      google.script.run.showOneOnOneList();
      google.script.host.close();
    }
    
    function editSession() {
      if (!currentSession || !currentSession.id) return;
      
      google.script.run.editOneOnOne(currentSession.id);
      google.script.host.close();
    }
    
    function printSession() {
      if (!currentSession || !currentSession.id) return;
      
      window.print();
    }
    
    function deleteSession() {
      if (!currentSession || !currentSession.id) return;
      
      showLoading('Deleting session...');
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          deleteModal.hide();
          
          if (result && result.success) {
            showNotification('Session deleted successfully', 'success');
            setTimeout(goBack, 1000);
          } else {
            showNotification('Failed to delete session: ' + (result ? result.message : 'Unknown error'), 'error');
          }
        })
        .withFailureHandler(function(error) {
          hideLoading();
          deleteModal.hide();
          showNotification('Error deleting session: ' + error.message, 'error');
        })
        .deleteOneOnOne(currentSession.id);
    }
    
    function scheduleFollowUp() {
      if (!currentSession) return;
      
      google.script.run.scheduleFollowUpSession(currentSession.teamMemberEmail);
      google.script.host.close();
    }
    
    function createActionItems() {
      if (!currentSession) return;
      
      google.script.run.createActionItemsFromOneOnOne(currentSession);
      google.script.host.close();
    }
    
    function sendEmail() {
      if (!currentSession) return;
      
      google.script.run.sendOneOnOneFollowUpEmail(currentSession);
      google.script.host.close();
    }
    
    function showLoading(message = 'Loading...') {
      document.getElementById('loading-overlay').style.display = 'flex';
      document.querySelector('.loading-text').textContent = message;
    }
    
    function hideLoading() {
      const overlay = document.getElementById('loading-overlay');
      overlay.style.opacity = '0';
      setTimeout(() => {
        overlay.style.display = 'none';
        overlay.style.opacity = '1';
      }, 300);
    }
    
    function showNotification(message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = 'notification';
      
      // Set notification style
      let backgroundColor = 'rgba(67, 97, 238, 0.95)'; // Primary/Info color
      let icon = 'info-circle';
      
      if (type === 'success') {
        backgroundColor = 'rgba(76, 201, 240, 0.95)';
        icon = 'check-circle';
      } else if (type === 'error') {
        backgroundColor = 'rgba(229, 56, 59, 0.95)';
        icon = 'exclamation-circle';
      } else if (type === 'warning') {
        backgroundColor = 'rgba(247, 37, 133, 0.95)';
        icon = 'exclamation-triangle';
      }
      
      // Create notification content
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${icon}"></i>
        </div>
        <div class="notification-message">${message}</div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Apply background color
      notification.style.background = backgroundColor;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Show notification with animation
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
        notification.style.opacity = '1';
      }, 10);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', () => {
        notification.style.transform = 'translateX(400px)';
        notification.style.opacity = '0';
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      });
      
      // Auto dismiss after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.style.transform = 'translateX(400px)';
          notification.style.opacity = '0';
          setTimeout(() => {
            if (document.body.contains(notification)) {
              document.body.removeChild(notification);
            }
          }, 300);
        }
      }, 5000);
    }
  </script>
</body>
</html>



<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      overflow-x: hidden;
    }
    
       /* App Layout */
    .app-container {
      display: grid;
      grid-template-columns: auto 1fr;
      grid-template-rows: auto 1fr;
      grid-template-areas: 
        "sidebar header"
        "sidebar content";
      height: 100vh;
      width: 100vw;
      overflow: hidden;
    }
    
    /* Modern Sidebar */
    .app-sidebar {
      grid-area: sidebar;
      width: 250px;
      background-color: var(--surface);
      border-right: 1px solid var(--border-color);
      display: flex;
      flex-direction: column;
      transition: var(--transition);
      z-index: 100;
      box-shadow: var(--shadow-sm);
    }
    
    .app-sidebar.collapsed {
      width: 70px;
    }
    
    .sidebar-header {
      padding: 1.5rem;
      display: flex;
      align-items: center;
      border-bottom: 1px solid var(--border-color);
    }
    
    .sidebar-logo {
      font-weight: 700;
      font-size: 1.25rem;
      display: flex;
      align-items: center;
    }
    
    .sidebar-logo-icon {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      margin-right: 12px;
      flex-shrink: 0;
    }
    
    .sidebar-logo-text {
      transition: var(--transition);
      white-space: nowrap;
      overflow: hidden;
    }
    
    .app-sidebar.collapsed .sidebar-logo-text {
      opacity: 0;
      width: 0;
    }
    
    .sidebar-toggle {
      margin-left: auto;
      width: 28px;
      height: 28px;
      border-radius: 6px;
      background: var(--surface-hover);
      border: none;
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .sidebar-toggle:hover {
      background: var(--primary-light);
      color: var(--primary);
    }
    
    .app-sidebar.collapsed .sidebar-toggle i {
      transform: rotate(180deg);
    }
    
    .sidebar-menu {
      list-style: none;
      padding: 1.25rem 0;
      margin: 0;
      flex: 1;
      overflow-y: auto;
    }
    
    .sidebar-menu-item {
      position: relative;
      margin: 0.25rem 0.75rem;
    }
    
    .sidebar-menu-link {
      display: flex;
      align-items: center;
      padding: 0.75rem 1rem;
      color: var(--text-secondary);
      text-decoration: none;
      border-radius: 8px;
      transition: var(--transition);
      overflow: hidden;
      white-space: nowrap;
    }
    
    .sidebar-menu-link:hover {
      color: var(--primary);
      background-color: var(--primary-light);
    }
    
    .sidebar-menu-link.active {
      color: var(--primary);
      background-color: var(--primary-light);
      font-weight: 500;
    }
    
    .sidebar-menu-icon {
      width: 1.25rem;
      text-align: center;
      margin-right: 1rem;
      font-size: 1rem;
      transition: var(--transition);
    }
    
    .sidebar-menu-text {
      transition: var(--transition);
      opacity: 1;
    }
    
    .app-sidebar.collapsed .sidebar-menu-text {
      opacity: 0;
      width: 0;
    }
    
    .app-sidebar.collapsed .sidebar-menu-link {
      padding: 0.75rem;
      justify-content: center;
    }
    
    .app-sidebar.collapsed .sidebar-menu-icon {
      margin-right: 0;
      font-size: 1.25rem;
    }
    
    /* Header */
    .app-header {
      grid-area: header;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1.5rem;
      background-color: var(--surface);
      border-bottom: 1px solid var(--border-color);
      box-shadow: var(--shadow-sm);
      z-index: 99;
    }
    
    .header-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .header-actions {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .header-action-btn {
      height: 38px;
      padding: 0 1rem;
      border-radius: 8px;
      background: var(--surface);
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      cursor: pointer;
      transition: var(--transition);
      font-weight: 500;
    }
    
    .header-action-btn:hover {
      background: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .header-action-btn-primary {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      border: none;
    }
    
    .header-action-btn-primary:hover {
      color: white;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .header-date-range {
      background: var(--surface);
      border: 1px solid var(--border-color);
      padding: 0.5rem 1rem;
      border-radius: 8px;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: var(--text-secondary);
      font-size: 0.875rem;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .header-date-range:hover {
      background: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
    }
    
    /* Content Area */
    .app-content {
      grid-area: content;
      overflow-y: auto;
      padding: 1.5rem;
      background-color: #f5f7ff;
      position: relative;
    }
    
    /* Dashboard Grid */
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      gap: 1.25rem;
    }
    
    .grid-col-12 { grid-column: span 12; }
    .grid-col-8 { grid-column: span 8; }
    .grid-col-6 { grid-column: span 6; }
    .grid-col-4 { grid-column: span 4; }
    .grid-col-3 { grid-column: span 3; }
    
    @media (max-width: 1199px) {
      .grid-col-4 { grid-column: span 6; }
      .grid-col-3 { grid-column: span 6; }
    }
    
    @media (max-width: 991px) {
      .grid-col-6 { grid-column: span 12; }
    }
    
    @media (max-width: 767px) {
      .grid-col-3, .grid-col-4 { grid-column: span 12; }
      .app-container {
        grid-template-columns: 1fr;
        grid-template-areas: 
          "header"
          "content";
      }
      
      .app-sidebar {
        position: fixed;
        height: 100%;
        transform: translateX(-100%);
      }
      
      .app-sidebar.open {
        transform: translateX(0);
      }
      
      .sidebar-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 98;
        opacity: 0;
        visibility: hidden;
        transition: var(--transition);
      }
      
      .sidebar-backdrop.active {
        opacity: 1;
        visibility: visible;
      }
    }
    
    /* Card Styles */
    .dashboard-card {
      background: var(--surface);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      height: 100%;
      position: relative;
      overflow: hidden;
    }
    
    .dashboard-card:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-3px);
    }
    
    .card-header {
      padding: 1.25rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-bottom: 1px solid var(--border-color);
    }
    
    .card-title {
      font-size: 1rem;
      font-weight: 600;
      color: var(--text-primary);
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      margin-right: 0.75rem;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      font-size: 1rem;
      color: white;
    }
    
    .card-body {
      padding: 1.25rem;
    }
    
    .card-footer {
      padding: 1rem 1.25rem;
      border-top: 1px solid var(--border-color);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    /* KPI Cards */
    .kpi-card {
      position: relative;
      display: flex;
      flex-direction: column;
      border-radius: var(--border-radius);
      background: var(--surface);
      padding: 1.25rem;
      margin-bottom: 1.25rem;
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      overflow: hidden;
    }
    
    .kpi-card:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-3px);
    }
    
    .kpi-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      height: 4px;
      width: 100%;
      background: linear-gradient(to right, var(--primary), var(--secondary));
      opacity: 0;
      transition: var(--transition);
    }
    
    .kpi-card:hover::before {
      opacity: 1;
    }
    
    .kpi-label {
      color: var(--text-secondary);
      font-weight: 500;
      font-size: 0.875rem;
      margin-bottom: 0.25rem;
    }
    
    .kpi-value {
      color: var(--text-primary);
      font-weight: 700;
      font-size: 1.75rem;
      line-height: 1.2;
      margin-bottom: 0.75rem;
      transition: var(--transition);
    }
    
    .kpi-card:hover .kpi-value {
      color: var(--primary);
    }
    
    .kpi-trend {
      display: flex;
      align-items: center;
      font-size: 0.75rem;
      font-weight: 500;
    }
    
    .kpi-trend-icon {
      margin-right: 0.375rem;
      display: flex;
      align-items: center;
    }
    
    .kpi-trend-up {
      color: var(--success);
    }
    
    .kpi-trend-down {
      color: var(--danger);
    }
    
    .kpi-trend-flat {
      color: var(--text-secondary);
    }
    
    /* Chart Container */
    .chart-container {
      height: 300px;
      position: relative;
    }
    
    /* Team Member Cards */
    .team-member-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
      gap: 1.25rem;
    }
    
    .team-member-card {
      background: var(--surface);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      overflow: hidden;
      position: relative;
      cursor: pointer;
    }
    
    .team-member-card:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-3px);
    }
    
    .team-member-header {
      background: linear-gradient(135deg, var(--primary-light), var(--info-light));
      padding: 1.25rem 1.25rem 3.5rem 1.25rem;
      text-align: center;
      position: relative;
    }
    
    .team-member-avatar {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.75rem;
      font-weight: 600;
      margin: 0 auto 0.75rem;
      transition: var(--transition);
    }
    
    .team-member-card:hover .team-member-avatar {
      transform: scale(1.05);
      box-shadow: var(--shadow-md);
    }
    
    .team-member-name {
      font-weight: 600;
      font-size: 1.125rem;
      margin-bottom: 0.25rem;
      color: var(--text-primary);
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .team-member-role {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .team-member-body {
      padding: 1.25rem;
      padding-top: 3rem;
      position: relative;
    }
    
    .team-member-status {
      position: absolute;
      top: -20px;
      left: 50%;
      transform: translateX(-50%);
      background: var(--surface);
      border-radius: 50px;
      padding: 0.5rem 1.25rem;
      font-size: 0.75rem;
      font-weight: 600;
      box-shadow: var(--shadow-sm);
    }
    
    .status-on-track {
      color: var(--success);
      background-color: var(--success-light);
    }
    
    .status-overdue {
      color: var(--danger);
      background-color: var(--danger-light);
    }
    
    .status-attention {
      color: var(--warning);
      background-color: var(--warning-light);
    }
    
    .team-member-stats {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }
    
    .team-stat {
      text-align: center;
    }
    
    .stat-value {
      font-size: 1.125rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .stat-label {
      font-size: 0.75rem;
      color: var(--text-secondary);
    }
    
    .team-member-actions {
      margin-top: 1.25rem;
      display: flex;
      justify-content: center;
      gap: 0.75rem;
    }
    
    .tm-action-btn {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      cursor: pointer;
      transition: var(--transition);
    }
    
    .tm-action-btn:hover {
      background-color: var(--primary);
      color: white;
      border-color: var(--primary);
      transform: translateY(-2px);
    }
    
    /* Session List */
    .session-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .session-item {
      display: grid;
      grid-template-columns: minmax(250px, 1fr) auto auto auto;
      gap: 1rem;
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
      align-items: center;
      transition: var(--transition);
      cursor: pointer;
    }
    
    .session-item:hover {
      background-color: var(--surface-hover);
    }
    
    .session-team-member {
      display: flex;
      align-items: center;
      font-weight: 500;
      gap: 0.75rem;
      min-width: 0;
    }
    
    .session-team-member-avatar {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background-color: var(--primary-light);
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      flex-shrink: 0;
    }
    
    .session-team-member-name {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .session-date, .session-due {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .session-due.overdue {
      color: var(--danger);
      font-weight: 500;
    }
    
    .session-status {
      padding: 0.25rem 0.75rem;
      border-radius: 50px;
      font-size: 0.75rem;
      font-weight: 600;
      text-align: center;
    }
    
    .session-actions {
      display: flex;
      gap: 0.5rem;
      opacity: 0;
      transition: var(--transition);
    }
    
    .session-item:hover .session-actions {
      opacity: 1;
    }
    
    .session-action-btn {
      width: 32px;
      height: 32px;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      cursor: pointer;
      transition: var(--transition);
    }
    
    .session-action-btn:hover {
      background-color: var(--primary);
      color: white;
      border-color: var(--primary);
    }
    
    /* Calendar View */
    .calendar-container {
      background: var(--surface);
      border-radius: var(--border-radius);
      overflow: hidden;
    }
    
    .calendar-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
    }
    
    .calendar-title {
      font-weight: 600;
      font-size: 1.125rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .calendar-navigation {
      display: flex;
      gap: 0.5rem;
    }
    
    .calendar-nav-btn {
      width: 32px;
      height: 32px;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      cursor: pointer;
      transition: var(--transition);
    }
    
    .calendar-nav-btn:hover {
      background-color: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .calendar-grid {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      border-bottom: 1px solid var(--border-color);
    }
    
    .calendar-day-header {
      text-align: center;
      padding: 0.75rem;
      font-weight: 500;
      font-size: 0.825rem;
      color: var(--text-secondary);
      border-right: 1px solid var(--border-color);
    }
    
    .calendar-day-header:last-child {
      border-right: none;
    }
    
    .calendar-days {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      grid-auto-rows: minmax(100px, auto);
    }
    
    .calendar-day {
      padding: 0.5rem;
      border-right: 1px solid var(--border-color);
      border-bottom: 1px solid var(--border-color);
      position: relative;
      min-height: 100px;
    }
    
    .calendar-day:nth-child(7n) {
      border-right: none;
    }
    
    .calendar-day.other-month {
      background-color: var(--surface-hover);
      color: var(--text-secondary);
      opacity: 0.7;
    }
    
    .calendar-day-number {
      position: absolute;
      top: 0.25rem;
      right: 0.5rem;
      font-size: 0.875rem;
      font-weight: 500;
      color: var(--text-secondary);
    }
    
    .calendar-day.today .calendar-day-number {
      width: 24px;
      height: 24px;
      background: var(--primary);
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .calendar-events {
      margin-top: 1.5rem;
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }
    
    .calendar-event {
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.75rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .calendar-event:hover {
      transform: translateY(-1px);
      box-shadow: var(--shadow-sm);
    }
    
    .event-type-oneonone {
      background-color: var(--primary-light);
      color: var(--primary);
      border-left: 2px solid var(--primary);
    }
    
    .event-type-followup {
      background-color: var(--success-light);
      color: var(--success);
      border-left: 2px solid var(--success);
    }
    
    .event-type-review {
      background-color: var(--warning-light);
      color: var(--warning);
      border-left: 2px solid var(--warning);
    }
    
    /* Loading Animation */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      z-index: 9999;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      transition: var(--transition);
    }
    
    .loading-spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      position: relative;
    }
    
    .loading-spinner::before {
      content: '';
      position: absolute;
      top: -4px;
      left: -4px;
      right: -4px;
      bottom: -4px;
      border: 4px solid transparent;
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .loading-text {
      margin-top: 1rem;
      color: var(--primary);
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    /* Animation Classes */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .animate-fade-in-up {
      animation: fadeInUp 0.6s ease forwards;
      opacity: 0;
    }
    
    .animate-delay-1 { animation-delay: 0.1s; }
    .animate-delay-2 { animation-delay: 0.2s; }
    .animate-delay-3 { animation-delay: 0.3s; }
    .animate-delay-4 { animation-delay: 0.4s; }
    .animate-delay-5 { animation-delay: 0.5s; }
    
    /* Notification System */
    .notification {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 9999;
      display: flex;
      align-items: center;
      padding: 12px 20px;
      background: rgba(67, 97, 238, 0.95);
      color: white;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      max-width: 350px;
      transform: translateX(400px);
      transition: transform 0.3s ease, opacity 0.3s ease;
      opacity: 0;
    }
    
    .notification-icon {
      margin-right: 12px;
      font-size: 18px;
    }
    
    .notification-message {
      flex: 1;
      font-size: 14px;
    }
    
    .notification-close {
      background: none;
      border: none;
      color: white;
      opacity: 0.7;
      cursor: pointer;
      font-size: 14px;
      margin-left: 12px;
      padding: 0;
      transition: var(--transition);
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    /* Date Range Modal */
    .modal-content {
      border-radius: var(--border-radius);
      border: none;
    }
    
    .modal-header {
      border-bottom: 1px solid var(--border-color);
      padding: 1rem 1.5rem;
    }
    
    .modal-body {
      padding: 1.5rem;
    }
    
    .modal-footer {
      border-top: 1px solid var(--border-color);
      padding: 1rem 1.5rem;
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading dashboard...</div>
  </div>
  
  <!-- Mobile Sidebar Backdrop -->
  <div class="sidebar-backdrop" id="sidebar-backdrop"></div>
  
  <div class="app-container">
    <!-- Sidebar -->
    <aside class="app-sidebar" id="sidebar">
      <div class="sidebar-header">
        <div class="sidebar-logo">
          <div class="sidebar-logo-icon">
            <i class="fas fa-user-friends"></i>
          </div>
          <div class="sidebar-logo-text">One-on-Ones</div>
        </div>
        <button id="sidebar-toggle" class="sidebar-toggle" aria-label="Toggle Sidebar">
          <i class="fas fa-angle-left"></i>
        </button>
      </div>
      
      <nav class="sidebar-menu">
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link active" data-page="dashboard">
            <span class="sidebar-menu-icon"><i class="fas fa-th-large"></i></span>
            <span class="sidebar-menu-text">Dashboard</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="upcoming">
            <span class="sidebar-menu-icon"><i class="fas fa-calendar-alt"></i></span>
            <span class="sidebar-menu-text">Upcoming Sessions</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="team">
            <span class="sidebar-menu-icon"><i class="fas fa-users"></i></span>
            <span class="sidebar-menu-text">Team Members</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="history">
            <span class="sidebar-menu-icon"><i class="fas fa-history"></i></span>
            <span class="sidebar-menu-text">Session History</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="action-items">
            <span class="sidebar-menu-icon"><i class="fas fa-tasks"></i></span>
            <span class="sidebar-menu-text">Action Items</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="analytics">
            <span class="sidebar-menu-icon"><i class="fas fa-chart-line"></i></span>
            <span class="sidebar-menu-text">Analytics</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="settings">
            <span class="sidebar-menu-icon"><i class="fas fa-cog"></i></span>
            <span class="sidebar-menu-text">Settings</span>
          </a>
        </div>
      </nav>
    </aside>
    
    <!-- Header -->
    <header class="app-header">
      <div class="header-title">
        <span id="page-title">One-on-One Dashboard</span>
      </div>
      
      <div class="header-actions">
        <div id="mobile-sidebar-toggle" class="header-action-btn d-md-none">
          <i class="fas fa-bars"></i>
        </div>
        
        <div class="header-date-range" id="date-range-selector">
          <i class="far fa-calendar"></i>
          <span id="date-range-text">Last 30 Days</span>
          <i class="fas fa-chevron-down"></i>
        </div>
        
        <button id="export-btn" class="header-action-btn">
          <i class="fas fa-file-export"></i>
          <span>Export</span>
        </button>
        
        <button id="new-session-btn" class="header-action-btn header-action-btn-primary">
          <i class="fas fa-plus"></i>
          <span>New Session</span>
        </button>
      </div>
    </header>
    
    <!-- Main Content -->
    <main class="app-content">
      <div id="dashboard-page" class="page-content active">
        <!-- KPI Cards Row -->
        <div class="dashboard-grid mb-4">
          <div class="grid-col-3 animate-fade-in-up animate-delay-1">
            <div class="kpi-card">
              <div class="kpi-label">Total Sessions</div>
              <div class="kpi-value" id="total-sessions">--</div>
              <div class="kpi-trend">
                <span class="kpi-trend-icon kpi-trend-up">
                  <i class="fas fa-arrow-up"></i>
                </span>
                <span id="sessions-trend">-- vs. last period</span>
              </div>
            </div>
          </div>
          
          <div class="grid-col-3 animate-fade-in-up animate-delay-2">
            <div class="kpi-card">
              <div class="kpi-label">Completion Rate</div>
              <div class="kpi-value" id="completion-rate">--%</div>
              <div class="kpi-trend">
                <span class="kpi-trend-icon kpi-trend-up" id="completion-trend-icon">
                  <i class="fas fa-arrow-up"></i>
                </span>
                <span id="completion-trend">-- vs. last period</span>
              </div>
            </div>
          </div>
          
          <div class="grid-col-3 animate-fade-in-up animate-delay-3">
            <div class="kpi-card">
              <div class="kpi-label">Coverage</div>
              <div class="kpi-value" id="coverage-rate">--%</div>
              <div class="kpi-trend">
                <span class="kpi-trend-icon" id="coverage-trend-icon">
                  <i class="fas fa-arrow-up"></i>
                </span>
                <span id="coverage-trend">-- vs. target</span>
              </div>
            </div>
          </div>
          
          <div class="grid-col-3 animate-fade-in-up animate-delay-4">
            <div class="kpi-card">
              <div class="kpi-label">Action Item Completion</div>
              <div class="kpi-value" id="action-completion">--%</div>
              <div class="kpi-trend">
                <span class="kpi-trend-icon" id="action-trend-icon">
                  <i class="fas fa-arrow-up"></i>
                </span>
                <span id="action-trend">-- vs. target</span>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Charts Row -->
        <div class="dashboard-grid mb-4">
          <div class="grid-col-8 animate-fade-in-up animate-delay-1">
            <div class="dashboard-card">
              <div class="card-header">
                <h2 class="card-title">
                  <div class="card-title-icon" style="background-color: var(--primary);">
                    <i class="fas fa-chart-line"></i>
                  </div>
                  One-on-One Trends
                </h2>
                <div class="btn-group">
                  <button class="btn btn-sm btn-outline-secondary active" id="trend-sessions">Sessions</button>
                  <button class="btn btn-sm btn-outline-secondary" id="trend-ratings">Ratings</button>
                  <button class="btn btn-sm btn-outline-secondary" id="trend-actions">Actions</button>
                </div>
              </div>
              <div class="card-body">
                <div id="trends-chart" class="chart-container"></div>
              </div>
            </div>
          </div>
          
          <div class="grid-col-4 animate-fade-in-up animate-delay-2">
            <div class="dashboard-card">
              <div class="card-header">
                <h2 class="card-title">
                  <div class="card-title-icon" style="background-color: var(--warning);">
                    <i class="fas fa-exclamation-circle"></i>
                  </div>
                  Attention Required
                </h2>
                <span class="badge bg-danger" id="attention-count">--</span>
              </div>
              <div class="card-body p-0">
                <ul class="list-group list-group-flush" id="attention-list">
                  <li class="list-group-item text-center py-4">
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-2">Loading data...</span>
                  </li>
                </ul>
              </div>
              <div class="card-footer text-center">
                <a href="#" class="btn btn-sm btn-outline-primary" data-page="upcoming">View All Overdue Sessions</a>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Calendar & Team Row -->
        <div class="dashboard-grid mb-4">
          <div class="grid-col-8 animate-fade-in-up animate-delay-3">
            <div class="dashboard-card">
              <div class="card-header">
                <h2 class="card-title">
                  <div class="card-title-icon" style="background-color: var(--info);">
                    <i class="fas fa-calendar-alt"></i>
                  </div>
                  Upcoming Sessions
                </h2>
                <span id="month-display">Loading...</span>
              </div>
              <div class="card-body p-0">
                <div class="calendar-container">
                  <div class="calendar-header">
                    <div class="calendar-title">
                      <span id="calendar-month-year">March 2025</span>
                    </div>
                    <div class="calendar-navigation">
                      <button id="prev-month" class="calendar-nav-btn">
                        <i class="fas fa-chevron-left"></i>
                      </button>
                      <button id="next-month" class="calendar-nav-btn">
                        <i class="fas fa-chevron-right"></i>
                      </button>
                      <button id="today-btn" class="btn btn-sm btn-outline-primary ms-2">Today</button>
                    </div>
                  </div>
                  <div class="calendar-grid">
                    <div class="calendar-day-header">Sun</div>
                    <div class="calendar-day-header">Mon</div>
                    <div class="calendar-day-header">Tue</div>
                    <div class="calendar-day-header">Wed</div>
                    <div class="calendar-day-header">Thu</div>
                    <div class="calendar-day-header">Fri</div>
                    <div class="calendar-day-header">Sat</div>
                  </div>
                  <div class="calendar-days" id="calendar-days">
                    <!-- Calendar days will be generated here -->
                    <div class="d-flex justify-content-center align-items-center py-5">
                      <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                      </div>
                      <span class="ms-2">Loading calendar...</span>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card-footer text-center">
                <a href="#" class="btn btn-sm btn-primary" onclick="newSession()">Schedule New One-on-One</a>
                <a href="#" class="btn btn-sm btn-outline-primary ms-2" data-page="upcoming">View All Upcoming</a>
              </div>
            </div>
          </div>
          
          <div class="grid-col-4 animate-fade-in-up animate-delay-4">
            <div class="dashboard-card">
              <div class="card-header">
                <h2 class="card-title">
                  <div class="card-title-icon" style="background-color: var(--success);">
                    <i class="fas fa-users"></i>
                  </div>
                  Team Coverage
                </h2>
                <button class="btn btn-sm btn-outline-primary" data-page="team">View All</button>
              </div>
              <div class="card-body">
                <div id="team-coverage-chart" class="chart-container mb-3"></div>
                <div class="team-coverage-list" id="team-coverage-list">
                  <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-2">Loading team data...</span>
                  </div>
                </div>
              </div>
              <div class="card-footer text-center">
                <a href="#" class="btn btn-sm btn-outline-primary" onclick="addTeamMember()">Add Team Member</a>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div id="upcoming-page" class="page-content">
        <!-- Content for upcoming sessions view -->
        <div class="dashboard-card animate-fade-in-up">
          <div class="card-header">
            <h2 class="card-title">
              <div class="card-title-icon" style="background-color: var(--primary);">
                <i class="fas fa-calendar-alt"></i>
              </div>
              Upcoming Sessions
            </h2>
            <div class="d-flex gap-2">
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="show-overdue" checked>
                <label class="form-check-label" for="show-overdue">Show Overdue</label>
              </div>
              <select class="form-select form-select-sm" id="status-filter">
                <option value="all">All Status</option>
                <option value="scheduled">Scheduled</option>
                <option value="in-progress">In Progress</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>
          </div>
          <div class="card-body p-0">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Team Member</th>
                    <th>Date</th>
                    <th>Status</th>
                    <th>Due</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody id="upcoming-sessions-list">
                  <tr>
                    <td colspan="5" class="text-center py-4">
                      <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                      </div>
                      <span class="ms-2">Loading sessions...</span>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
          <div class="card-footer d-flex justify-content-between align-items-center">
            <div id="session-count">--</div>
            <button class="btn btn-primary" onclick="newSession()">
              <i class="fas fa-plus me-1"></i> New Session
            </button>
          </div>
        </div>
      </div>
      
      <div id="team-page" class="page-content">
        <!-- Content for team members view -->
        <div class="dashboard-grid">
          <div class="grid-col-12 mb-4 animate-fade-in-up">
            <div class="dashboard-card">
              <div class="card-header">
                <h2 class="card-title">
                  <div class="card-title-icon" style="background-color: var(--primary);">
                    <i class="fas fa-users"></i>
                  </div>
                  Team Members
                </h2>
                <button class="btn btn-sm btn-primary" onclick="addTeamMember()">
                  <i class="fas fa-user-plus me-1"></i> Add Team Member
                </button>
              </div>
              <div class="card-body">
                <div class="team-member-grid" id="team-members-grid">
                  <!-- Team member cards will be generated here -->
                  <div class="d-flex justify-content-center align-items-center py-5 w-100">
                    <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-2">Loading team members...</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div id="history-page" class="page-content">
        <!-- Content for session history view -->
        <div class="dashboard-card animate-fade-in-up">
          <div class="card-header">
            <h2 class="card-title">
              <div class="card-title-icon" style="background-color: var(--primary);">
                <i class="fas fa-history"></i>
              </div>
              Session History
            </h2>
            <div class="d-flex gap-2">
              <select class="form-select form-select-sm" id="history-team-filter">
                <option value="all">All Team Members</option>
                <!-- Options will be populated dynamically -->
              </select>
              <select class="form-select form-select-sm" id="history-status-filter">
                <option value="all">All Status</option>
                <option value="scheduled">Scheduled</option>
                <option value="in-progress">In Progress</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>
          </div>
          <div class="card-body p-0">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Team Member</th>
                    <th>Date</th>
                    <th>Status</th>
                    <th>Updated</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody id="history-sessions-list">
                  <tr>
                    <td colspan="5" class="text-center py-4">
                      <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                      </div>
                      <span class="ms-2">Loading session history...</span>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
          <div class="card-footer d-flex justify-content-between align-items-center">
            <div id="history-count">--</div>
            <button class="btn btn-primary" onclick="exportSessionHistory()">
              <i class="fas fa-file-export me-1"></i> Export History
            </button>
          </div>
        </div>
      </div>
      
      <div id="action-items-page" class="page-content">
        <!-- Content for action items view -->
        <div class="dashboard-card animate-fade-in-up">
          <div class="card-header">
            <h2 class="card-title">
              <div class="card-title-icon" style="background-color: var(--primary);">
                <i class="fas fa-tasks"></i>
              </div>
              Action Items
            </h2>
            <div class="d-flex gap-2">
              <select class="form-select form-select-sm" id="action-completion-filter">
                <option value="all">All Items</option>
                <option value="open">Open</option>
                <option value="completed">Completed</option>
              </select>
              <select class="form-select form-select-sm" id="action-team-filter">
                <option value="all">All Team Members</option>
                <!-- Options will be populated dynamically -->
              </select>
            </div>
          </div>
          <div class="card-body p-0">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th style="width: 1rem;"></th>
                    <th>Action Item</th>
                    <th>Team Member</th>
                    <th>Due Date</th>
                    <th>Owner</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody id="action-items-list">
                  <tr>
                    <td colspan="6" class="text-center py-4">
                      <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                      </div>
                      <span class="ms-2">Loading action items...</span>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
          <div class="card-footer d-flex justify-content-between align-items-center">
            <div id="action-items-count">--</div>
            <button class="btn btn-primary" onclick="createActionItem()">
              <i class="fas fa-plus me-1"></i> New Action Item
            </button>
          </div>
        </div>
      </div>
      
      <div id="analytics-page" class="page-content">
        <!-- Content for analytics view -->
        <div class="dashboard-grid">
          <div class="grid-col-6 mb-4 animate-fade-in-up animate-delay-1">
            <div class="dashboard-card">
              <div class="card-header">
                <h2 class="card-title">
                  <div class="card-title-icon" style="background-color: var(--primary);">
                    <i class="fas fa-chart-bar"></i>
                  </div>
                  Session Distribution
                </h2>
              </div>
              <div class="card-body">
                <div id="sessions-distribution-chart" class="chart-container"></div>
              </div>
            </div>
          </div>
          
          <div class="grid-col-6 mb-4 animate-fade-in-up animate-delay-2">
            <div class="dashboard-card">
              <div class="card-header">
                <h2 class="card-title">
                  <div class="card-title-icon" style="background-color: var(--info);">
                    <i class="fas fa-chart-pie"></i>
                  </div>
                  Team Coverage
                </h2>
              </div>
              <div class="card-body">
                <div id="team-coverage-chart-full" class="chart-container"></div>
              </div>
            </div>
          </div>
          
          <div class="grid-col-6 mb-4 animate-fade-in-up animate-delay-3">
            <div class="dashboard-card">
              <div class="card-header">
                <h2 class="card-title">
                  <div class="card-title-icon" style="background-color: var(--warning);">
                    <i class="fas fa-star"></i>
                  </div>
                  Performance Ratings
                </h2>
              </div>
              <div class="card-body">
                <div id="performance-ratings-chart" class="chart-container"></div>
              </div>
            </div>
          </div>
          
          <div class="grid-col-6 mb-4 animate-fade-in-up animate-delay-4">
            <div class="dashboard-card">
              <div class="card-header">
                <h2 class="card-title">
                  <div class="card-title-icon" style="background-color: var(--success);">
                    <i class="fas fa-calendar-check"></i>
                  </div>
                  Action Items Completion
                </h2>
              </div>
              <div class="card-body">
                <div id="action-completion-chart" class="chart-container"></div>
              </div>
            </div>
          </div>
          
          <div class="grid-col-12 animate-fade-in-up animate-delay-5">
            <div class="dashboard-card">
              <div class="card-header">
                <h2 class="card-title">
                  <div class="card-title-icon" style="background-color: var(--primary);">
                    <i class="fas fa-file-alt"></i>
                  </div>
                  Session Reports
                </h2>
              </div>
              <div class="card-body">
                <p class="text-center mb-4">Generate custom reports for your one-on-one sessions</p>
                
                <div class="row g-3">
                  <div class="col-md-4">
                    <div class="card">
                      <div class="card-body text-center">
                        <i class="fas fa-user-friends fa-3x text-primary mb-3"></i>
                        <h5>Team Member Report</h5>
                        <p class="small text-muted">Detailed report on sessions and performance for a specific team member</p>
                        <button class="btn btn-sm btn-outline-primary" onclick="generateTeamMemberReport()">Generate</button>
                      </div>
                    </div>
                  </div>
                  
                  <div class="col-md-4">
                    <div class="card">
                      <div class="card-body text-center">
                        <i class="fas fa-tasks fa-3x text-warning mb-3"></i>
                        <h5>Action Items Report</h5>
                        <p class="small text-muted">Summary of all action items, their status and completion rates</p>
                        <button class="btn btn-sm btn-outline-primary" onclick="generateActionItemsReport()">Generate</button>
                      </div>
                    </div>
                  </div>
                  
                  <div class="col-md-4">
                    <div class="card">
                      <div class="card-body text-center">
                        <i class="fas fa-chart-line fa-3x text-success mb-3"></i>
                        <h5>Trends Report</h5>
                        <p class="small text-muted">Analysis of one-on-one trends and metrics over time</p>
                        <button class="btn btn-sm btn-outline-primary" onclick="generateTrendsReport()">Generate</button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div id="settings-page" class="page-content">
        <!-- Content for settings view -->
        <div class="dashboard-card animate-fade-in-up">
          <div class="card-header">
            <h2 class="card-title">
              <div class="card-title-icon" style="background-color: var(--primary);">
                <i class="fas fa-cog"></i>
              </div>
              Settings
            </h2>
          </div>
          <div class="card-body">
            <form id="settings-form">
              <div class="row g-4 mb-4">
                <div class="col-md-6">
                  <h5>General Settings</h5>
                  
                  <div class="mb-3">
                    <label for="session-frequency" class="form-label">Default One-on-One Frequency</label>
                    <select class="form-select" id="session-frequency">
                      <option value="7">Weekly</option>
                      <option value="14">Bi-weekly</option>
                      <option value="30">Monthly</option>
                      <option value="custom">Custom</option>
                    </select>
                  </div>
                  
                  <div class="mb-3">
                    <label for="default-duration" class="form-label">Default Session Duration (minutes)</label>
                    <input type="number" class="form-control" id="default-duration" value="30" min="15" step="15">
                  </div>
                  
                  <div class="mb-3">
                    <label for="reminder-days" class="form-label">Send Reminders (days before)</label>
                    <input type="number" class="form-control" id="reminder-days" value="1" min="0" max="7">
                  </div>
                  
                  <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="auto-schedule" checked>
                    <label class="form-check-label" for="auto-schedule">Auto-schedule follow-up sessions</label>
                  </div>
                </div>
                
                <div class="col-md-6">
                  <h5>Email Notifications</h5>
                  
                  <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="notify-session-created" checked>
                    <label class="form-check-label" for="notify-session-created">New session created</label>
                  </div>
                  
                  <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="notify-session-reminder" checked>
                    <label class="form-check-label" for="notify-session-reminder">Session reminders</label>
                  </div>
                  
                  <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="notify-action-items" checked>
                    <label class="form-check-label" for="notify-action-items">Action items created</label>
                  </div>
                  
                  <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="notify-overdue" checked>
                    <label class="form-check-label" for="notify-overdue">Overdue sessions</label>
                  </div>
                </div>
              </div>
              
              <div class="row g-4">
                <div class="col-md-6">
                  <h5>Default Template Sections</h5>
                  
                  <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="section-preparation" checked>
                    <label class="form-check-label" for="section-preparation">Preparation</label>
                  </div>
                  
                  <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="section-performance" checked>
                    <label class="form-check-label" for="section-performance">Performance Review</label>
                  </div>
                  
                  <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="section-teamwork" checked>
                    <label class="form-check-label" for="section-teamwork">Teamwork & Collaboration</label>
                  </div>
                  
                  <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="section-challenges" checked>
                    <label class="form-check-label" for="section-challenges">Challenges & Support</label>
                  </div>
                  
                  <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="section-career" checked>
                    <label class="form-check-label" for="section-career">Career Development</label>
                  </div>
                  
                  <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="section-action-items" checked>
                    <label class="form-check-label" for="section-action-items">Action Items</label>
                  </div>
                  
                  <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="section-follow-up" checked>
                    <label class="form-check-label" for="section-follow-up">Follow-up</label>
                  </div>
                </div>
                
                <div class="col-md-6">
                  <h5>Display Settings</h5>
                  
                  <div class="mb-3">
                    <label for="theme-mode" class="form-label">Theme</label>
                    <select class="form-select" id="theme-mode">
                      <option value="light">Light</option>
                                            <option value="dark">Dark</option>
                      <option value="system">Use System Setting</option>
                    </select>
                  </div>
                  
                  <div class="mb-3">
                    <label for="dashboard-default" class="form-label">Default Dashboard View</label>
                    <select class="form-select" id="dashboard-default">
                      <option value="overview">Overview</option>
                      <option value="calendar">Calendar</option>
                      <option value="team">Team</option>
                    </select>
                  </div>
                  
                  <div class="mb-3">
                    <label for="date-format" class="form-label">Date Format</label>
                    <select class="form-select" id="date-format">
                      <option value="MM/DD/YYYY">MM/DD/YYYY</option>
                      <option value="DD/MM/YYYY">DD/MM/YYYY</option>
                      <option value="YYYY-MM-DD">YYYY-MM-DD</option>
                    </select>
                  </div>
                  
                  <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="show-avatars" checked>
                    <label class="form-check-label" for="show-avatars">Show team member avatars</label>
                  </div>
                </div>
              </div>
            </form>
          </div>
          <div class="card-footer text-end">
            <button class="btn btn-secondary me-2" onclick="resetSettings()">Reset to Defaults</button>
            <button class="btn btn-primary" onclick="saveSettings()">Save Settings</button>
          </div>
        </div>
      </div>
    </main>
  </div>
  
  <!-- Date Range Modal -->
  <div class="modal fade" id="date-range-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Select Date Range</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="row g-3 mb-3">
            <div class="col-6">
              <button class="btn btn-outline-primary w-100" data-range="7">Last 7 Days</button>
            </div>
            <div class="col-6">
              <button class="btn btn-outline-primary w-100" data-range="30">Last 30 Days</button>
            </div>
            <div class="col-6">
              <button class="btn btn-outline-primary w-100" data-range="90">Last 90 Days</button>
            </div>
            <div class="col-6">
              <button class="btn btn-outline-primary w-100" data-range="365">Last 12 Months</button>
            </div>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Custom Range</label>
            <div class="row g-2">
              <div class="col-6">
                <input type="text" id="start-date" class="form-control" placeholder="Start Date">
              </div>
              <div class="col-6">
                <input type="text" id="end-date" class="form-control" placeholder="End Date">
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="apply-date-range">Apply</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let dashboardData = {
      sessions: [],
      teamMembers: [],
      actionItems: [],
      metrics: {}
    };
    let trendsChart = null;
    let teamCoverageChart = null;
    let teamCoverageFullChart = null;
    let sessionsDistributionChart = null;
    let performanceRatingsChart = null;
    let actionCompletionChart = null;
    let currentPage = 'dashboard';
    let dateRange = {
      start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
      end: new Date()
    };
    let currentCalendarDate = new Date();
    let startDatePicker = null;
    let endDatePicker = null;
    let dateRangeModal = null;
    
    // Initialize when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize UI components
      initializeUI();
      
      // Load data
      loadDashboardData();
      
      // Setup event listeners
      setupEventListeners();
      
      // Show current page
      showPage(currentPage);
    });
    
    function initializeUI() {
      // Initialize date pickers
      startDatePicker = flatpickr('#start-date', {
        dateFormat: 'Y-m-d',
        allowInput: true,
        disableMobile: true,
        onChange: function(selectedDates) {
          if (selectedDates[0]) {
            endDatePicker.set('minDate', selectedDates[0]);
          }
        }
      });
      
      endDatePicker = flatpickr('#end-date', {
        dateFormat: 'Y-m-d',
        allowInput: true,
        disableMobile: true,
        onChange: function(selectedDates) {
          if (selectedDates[0]) {
            startDatePicker.set('maxDate', selectedDates[0]);
          }
        }
      });
      
      // Initialize modals
      dateRangeModal = new bootstrap.Modal(document.getElementById('date-range-modal'));
      
      // Set default date range
      document.getElementById('date-range-text').textContent = 'Last 30 Days';
      startDatePicker.setDate(dateRange.start);
      endDatePicker.setDate(dateRange.end);
    }
    
    function setupEventListeners() {
      // Sidebar menu
      document.querySelectorAll('.sidebar-menu-link').forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const page = this.getAttribute('data-page');
          showPage(page);
        });
      });
      
      // Mobile sidebar toggle
      document.getElementById('mobile-sidebar-toggle').addEventListener('click', toggleMobileSidebar);
      document.getElementById('sidebar-backdrop').addEventListener('click', toggleMobileSidebar);
      
      // Sidebar toggle
      document.getElementById('sidebar-toggle').addEventListener('click', toggleSidebar);
      
      // Date range selector
      document.getElementById('date-range-selector').addEventListener('click', () => dateRangeModal.show());
      
      // Date range options
      document.querySelectorAll('[data-range]').forEach(btn => {
        btn.addEventListener('click', function() {
          const days = parseInt(this.getAttribute('data-range'));
          setDateRange(days);
        });
      });
      
      // Apply date range
      document.getElementById('apply-date-range').addEventListener('click', applyCustomDateRange);
      
      // New session button
      document.getElementById('new-session-btn').addEventListener('click', newSession);
      
      // Export button
      document.getElementById('export-btn').addEventListener('click', exportData);
      
      // Calendar navigation
      document.getElementById('prev-month').addEventListener('click', () => changeCalendarMonth(-1));
      document.getElementById('next-month').addEventListener('click', () => changeCalendarMonth(1));
      document.getElementById('today-btn').addEventListener('click', goToToday);
      
      // Filter event listeners for various pages
      document.getElementById('show-overdue').addEventListener('change', filterUpcomingSessions);
      document.getElementById('status-filter').addEventListener('change', filterUpcomingSessions);
      document.getElementById('history-team-filter').addEventListener('change', filterSessionHistory);
      document.getElementById('history-status-filter').addEventListener('change', filterSessionHistory);
      document.getElementById('action-completion-filter').addEventListener('change', filterActionItems);
      document.getElementById('action-team-filter').addEventListener('change', filterActionItems);
      
      // Trends chart view toggles
      document.getElementById('trend-sessions').addEventListener('click', function() {
        document.querySelectorAll('#trend-sessions, #trend-ratings, #trend-actions').forEach(el => el.classList.remove('active'));
        this.classList.add('active');
        updateTrendsChart('sessions');
      });
      
      document.getElementById('trend-ratings').addEventListener('click', function() {
        document.querySelectorAll('#trend-sessions, #trend-ratings, #trend-actions').forEach(el => el.classList.remove('active'));
        this.classList.add('active');
        updateTrendsChart('ratings');
      });
      
      document.getElementById('trend-actions').addEventListener('click', function() {
        document.querySelectorAll('#trend-sessions, #trend-ratings, #trend-actions').forEach(el => el.classList.remove('active'));
        this.classList.add('active');
        updateTrendsChart('actions');
      });
    }
    
    function showPage(page) {
      // Hide all pages
      document.querySelectorAll('.page-content').forEach(el => {
        el.classList.remove('active');
        el.style.display = 'none';
      });
      
      // Show selected page
      const pageElement = document.getElementById(`${page}-page`);
      if (pageElement) {
        pageElement.style.display = 'block';
        setTimeout(() => pageElement.classList.add('active'), 10);
      }
      
      // Update active menu link
      document.querySelectorAll('.sidebar-menu-link').forEach(link => {
        link.classList.remove('active');
      });
      document.querySelector(`.sidebar-menu-link[data-page="${page}"]`).classList.add('active');
      
      // Update page title
      updatePageTitle(page);
      
      // Close mobile sidebar
      if (window.innerWidth < 768) {
        document.getElementById('sidebar').classList.remove('open');
        document.getElementById('sidebar-backdrop').classList.remove('active');
      }
      
      // Store current page
      currentPage = page;
      
      // Page-specific initialization
      if (page === 'dashboard') {
        initializeCharts();
      } else if (page === 'upcoming') {
        loadUpcomingSessions();
      } else if (page === 'team') {
        loadTeamMembers();
      } else if (page === 'history') {
        loadSessionHistory();
      } else if (page === 'action-items') {
        loadActionItems();
      } else if (page === 'analytics') {
        initializeAnalyticsCharts();
      } else if (page === 'settings') {
        loadSettings();
      }
    }
    
    function updatePageTitle(page) {
      const titleElement = document.getElementById('page-title');
      
      switch (page) {
        case 'dashboard':
          titleElement.textContent = 'One-on-One Dashboard';
          break;
        case 'upcoming':
          titleElement.textContent = 'Upcoming Sessions';
          break;
        case 'team':
          titleElement.textContent = 'Team Members';
          break;
        case 'history':
          titleElement.textContent = 'Session History';
          break;
        case 'action-items':
          titleElement.textContent = 'Action Items';
          break;
        case 'analytics':
          titleElement.textContent = 'Analytics';
          break;
        case 'settings':
          titleElement.textContent = 'Settings';
          break;
        default:
          titleElement.textContent = 'One-on-One Dashboard';
      }
    }
    
    function toggleSidebar() {
      document.getElementById('sidebar').classList.toggle('collapsed');
    }
    
    function toggleMobileSidebar() {
      document.getElementById('sidebar').classList.toggle('open');
      document.getElementById('sidebar-backdrop').classList.toggle('active');
    }
    
    function loadDashboardData() {
      showLoading('Loading dashboard data...');
      
      google.script.run
        .withSuccessHandler(function(data) {
          dashboardData = data || {
            sessions: [],
            teamMembers: [],
            actionItems: [],
            metrics: {}
          };
          
          // Initialize all page components with data
          updateDashboardMetrics();
          initializeCharts();
          renderCalendar();
          updateTeamCoverage();
          updateAttentionList();
          
          // Populate filter dropdowns
          populateTeamMemberDropdowns();
          
          hideLoading();
        })
        .withFailureHandler(function(error) {
          console.error('Error loading dashboard data:', error);
          showNotification('Failed to load dashboard data: ' + error, 'error');
          hideLoading();
        })
        .getDashboardData(formatDateForApi(dateRange.start), formatDateForApi(dateRange.end));
    }
    
    function updateDashboardMetrics() {
      const metrics = dashboardData.metrics || {};
      
      // Update KPI cards
      document.getElementById('total-sessions').textContent = metrics.totalSessions || '0';
      document.getElementById('completion-rate').textContent = (metrics.completionRate || '0') + '%';
      document.getElementById('coverage-rate').textContent = (metrics.coverageRate || '0') + '%';
      document.getElementById('action-completion').textContent = (metrics.actionCompletionRate || '0') + '%';
      
      // Update trends
      document.getElementById('sessions-trend').textContent = (metrics.sessionsTrend > 0 ? '+' : '') + metrics.sessionsTrend + '% vs. last period';
      document.getElementById('completion-trend').textContent = (metrics.completionTrend > 0 ? '+' : '') + metrics.completionTrend + '% vs. last period';
      document.getElementById('coverage-trend').textContent = ((metrics.coverageRate || 0) - 90) + '% vs. target';
      document.getElementById('action-trend').textContent = ((metrics.actionCompletionRate || 0) - 75) + '% vs. target';
      
      // Update trend icons
      updateTrendIcon('completion-trend-icon', metrics.completionTrend);
      updateTrendIcon('coverage-trend-icon', (metrics.coverageRate || 0) - 90);
      updateTrendIcon('action-trend-icon', (metrics.actionCompletionRate || 0) - 75);
    }
    
    function updateTrendIcon(id, value) {
      const element = document.getElementById(id);
      element.className = 'kpi-trend-icon';
      
      if (value > 0) {
        element.classList.add('kpi-trend-up');
        element.innerHTML = '<i class="fas fa-arrow-up"></i>';
      } else if (value < 0) {
        element.classList.add('kpi-trend-down');
        element.innerHTML = '<i class="fas fa-arrow-down"></i>';
      } else {
        element.classList.add('kpi-trend-flat');
        element.innerHTML = '<i class="fas fa-minus"></i>';
      }
    }
    
    function initializeCharts() {
      if (trendsChart) {
        trendsChart.destroy();
      }
      
      if (teamCoverageChart) {
        teamCoverageChart.destroy();
      }
      
      initializeTrendsChart();
      initializeTeamCoverageChart();
    }
    
    function initializeTrendsChart() {
      const options = {
        series: prepareTrendsData('sessions').series,
        chart: {
          height: 300,
          type: 'line',
          toolbar: {
            show: false
          },
          fontFamily: getComputedStyle(document.body).fontFamily,
          zoom: {
            enabled: false
          },
          animations: {
            enabled: true,
            easing: 'easeinout',
            speed: 800
          }
        },
        colors: ['#4361ee', '#4cc9f0', '#f72585'],
        dataLabels: {
          enabled: false
        },
        stroke: {
          curve: 'smooth',
          width: 3
        },
        grid: {
          borderColor: 'var(--border-color)',
          row: {
            colors: ['transparent', 'transparent'],
            opacity: 0.5
          },
          padding: {
            top: 10,
            right: 0,
            bottom: 0,
            left: 10
          }
        },
        markers: {
          size: 4,
          hover: {
            size: 6
          }
        },
        xaxis: {
          categories: prepareTrendsData('sessions').categories,
          labels: {
            style: {
              colors: 'var(--text-secondary)',
              fontSize: '12px'
            }
          },
          axisTicks: {
            color: 'var(--border-color)'
          },
          axisBorder: {
            show: false
          }
        },
        yaxis: {
          labels: {
            style: {
              colors: 'var(--text-secondary)',
              fontSize: '12px'
            }
          }
        },
        legend: {
          position: 'top',
          horizontalAlign: 'right',
          floating: true,
          offsetY: -25,
          offsetX: -5,
          markers: {
            width: 12,
            height: 12,
            radius: 12
          },
          itemMargin: {
            horizontal: 10
          }
        },
        tooltip: {
          theme: 'light',
          y: {
            formatter: function(value) {
              return value;
            }
          }
        }
      };
      
      trendsChart = new ApexCharts(document.getElementById('trends-chart'), options);
      trendsChart.render();
    }
    
    function initializeTeamCoverageChart() {
      const options = {
        series: [60, 30, 10], // Will be updated with real data
        labels: ['On Track', 'Need Attention', 'Overdue'],
        chart: {
          type: 'donut',
          height: 200,
          fontFamily: getComputedStyle(document.body).fontFamily,
        },
        colors: ['#4cc9f0', '#4361ee', '#f72585'],
        legend: {
          position: 'bottom',
          markers: {
            radius: 6
          },
          itemMargin: {
            horizontal: 10
          }
        },
        dataLabels: {
          enabled: true
        },
        plotOptions: {
          pie: {
            donut: {
              size: '60%',
              labels: {
                show: true,
                total: {
                  show: true,
                  showAlways: true,
                  formatter: function(w) {
                    return w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                  },
                  label: 'Total',
                  fontSize: '18px',
                  fontWeight: 600,
                  color: 'var(--text-primary)'
                }
              }
            }
          }
        }
      };
      
      teamCoverageChart = new ApexCharts(document.getElementById('team-coverage-chart'), options);
      teamCoverageChart.render();
      
      // Update with real data after rendering
      updateTeamCoverage();
    }
    
    function initializeAnalyticsCharts() {
      // Initialize analytics charts if not already created
      if (!teamCoverageFullChart) {
        initializeTeamCoverageFullChart();
      }
      
      if (!sessionsDistributionChart) {
        initializeSessionsDistributionChart();
      }
      
      if (!performanceRatingsChart) {
        initializePerformanceRatingsChart();
      }
      
      if (!actionCompletionChart) {
        initializeActionCompletionChart();
      }
    }
    
    function initializeTeamCoverageFullChart() {
      const options = {
        series: [60, 30, 10], // Will be updated with real data
        labels: ['On Track', 'Need Attention', 'Overdue'],
        chart: {
          type: 'donut',
          height: 300,
          fontFamily: getComputedStyle(document.body).fontFamily,
        },
        colors: ['#4cc9f0', '#4361ee', '#f72585'],
        legend: {
          position: 'bottom',
          markers: {
            radius: 6
          },
          itemMargin: {
            horizontal: 10
          }
        },
        dataLabels: {
          enabled: true
        },
        plotOptions: {
          pie: {
            donut: {
              size: '50%',
              labels: {
                show: true,
                total: {
                  show: true,
                  showAlways: true,
                  formatter: function(w) {
                    return w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                  },
                  label: 'Total Team Members',
                  fontSize: '16px',
                  fontWeight: 600,
                  color: 'var(--text-primary)'
                }
              }
            }
          }
        },
        responsive: [{
          breakpoint: 480,
          options: {
            chart: {
              height: 250
            },
            legend: {
              position: 'bottom'
            }
          }
        }]
      };
      
      teamCoverageFullChart = new ApexCharts(document.getElementById('team-coverage-chart-full'), options);
      teamCoverageFullChart.render();
      
      // Update with real data after rendering
      const metrics = dashboardData.metrics || {};
      const onTrack = metrics.teamStatusOnTrack || 0;
      const needAttention = metrics.teamStatusNeedAttention || 0;
      const overdue = metrics.teamStatusOverdue || 0;
      
      teamCoverageFullChart.updateSeries([onTrack, needAttention, overdue]);
    }
    
    function initializeSessionsDistributionChart() {
      const options = {
        series: [{
          name: 'Sessions',
          data: [15, 25, 32, 18, 4]
        }],
        chart: {
          type: 'bar',
          height: 300,
          fontFamily: getComputedStyle(document.body).fontFamily,
          toolbar: {
            show: false
          }
        },
        colors: ['#4361ee'],
        plotOptions: {
          bar: {
            borderRadius: 4,
            horizontal: false,
            columnWidth: '40%',
            endingShape: 'rounded'
          },
        },
        dataLabels: {
          enabled: false
        },
        xaxis: {
          categories: ['Scheduled', 'In Progress', 'Completed', 'Cancelled', 'Overdue'],
          labels: {
            style: {
              colors: 'var(--text-secondary)',
              fontSize: '12px'
            }
          }
        },
        yaxis: {
          title: {
            text: 'Number of Sessions',
            style: {
              color: 'var(--text-secondary)',
              fontSize: '12px',
              fontFamily: getComputedStyle(document.body).fontFamily
            }
          },
          labels: {
            style: {
              colors: 'var(--text-secondary)',
              fontSize: '12px'
            }
          }
        },
        fill: {
          opacity: 1
        },
        tooltip: {
          y: {
            formatter: function (val) {
              return val + " sessions"
            }
          }
        },
        grid: {
          borderColor: 'var(--border-color)',
          padding: {
            top: 10,
            right: 0,
            bottom: 0,
            left: 10
          }
        }
      };
      
      sessionsDistributionChart = new ApexCharts(document.getElementById('sessions-distribution-chart'), options);
      sessionsDistributionChart.render();
      
      // Update with real data
      updateSessionsDistributionChart();
    }
    
    function initializePerformanceRatingsChart() {
      const options = {
        series: [{
          name: 'Quality Rating',
          data: []
        }, {
          name: 'Productivity Rating',
          data: []
        }, {
          name: 'Teamwork Rating',
          data: []
        }, {
          name: 'Communication Rating',
          data: []
        }],
        chart: {
          type: 'radar',
          height: 300,
          fontFamily: getComputedStyle(document.body).fontFamily,
          toolbar: {
            show: false
          }
        },
        colors: ['#4361ee', '#4cc9f0', '#f72585', '#3f37c9'],
        stroke: {
          width: 2
        },
        fill: {
          opacity: 0.1
        },
        markers: {
          size: 3
        },
        xaxis: {
          categories: []
        },
        yaxis: {
          max: 10,
          min: 0
        }
      };
      
      performanceRatingsChart = new ApexCharts(document.getElementById('performance-ratings-chart'), options);
      performanceRatingsChart.render();
      
      // Update with real data
      updatePerformanceRatingsChart();
    }
    
    function initializeActionCompletionChart() {
      const options = {
        series: [{
          name: 'Completed Actions',
          type: 'column',
          data: [23, 11, 22, 27, 13, 22, 37]
        }, {
          name: 'Completion Rate',
          type: 'line',
          data: [65, 72, 78, 85, 80, 70, 88]
        }],
        chart: {
          height: 300,
          type: 'line',
          fontFamily: getComputedStyle(document.body).fontFamily,
          toolbar: {
            show: false
          }
        },
        colors: ['#4cc9f0', '#4361ee'],
        stroke: {
          width: [0, 3]
        },
        dataLabels: {
          enabled: true,
          enabledOnSeries: [1],
          formatter: function(val) {
            return val + '%';
          },
          style: {
            fontSize: '10px',
            fontFamily: getComputedStyle(document.body).fontFamily
          },
          background: {
            enabled: true,
            borderRadius: 2,
            padding: 4
          }
        },
        labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5', 'Week 6', 'Week 7'],
        xaxis: {
          type: 'category',
          labels: {
            style: {
              colors: 'var(--text-secondary)',
              fontSize: '12px'
            }
          }
        },
        yaxis: [
          {
            title: {
              text: 'Action Items',
              style: {
                color: 'var(--text-secondary)',
                fontSize: '12px'
              }
            },
            labels: {
              style: {
                colors: 'var(--text-secondary)',
                fontSize: '12px'
              }
            }
          },
          {
            opposite: true,
            title: {
              text: 'Completion Rate (%)',
              style: {
                color: 'var(--text-secondary)',
                fontSize: '12px'
              }
            },
            labels: {
              style: {
                colors: 'var(--text-secondary)',
                fontSize: '12px'
              }
            },
            min: 0,
            max: 100
          }
        ],
        grid: {
          borderColor: 'var(--border-color)',
          padding: {
            top: 10,
            right: 20,
            bottom: 0,
            left: 10
          }
        }
      };
      
      actionCompletionChart = new ApexCharts(document.getElementById('action-completion-chart'), options);
      actionCompletionChart.render();
      
      // Update with real data
      updateActionCompletionChart();
    }
    
    function updateSessionsDistributionChart() {
      const sessions = dashboardData.sessions || [];
      
      // Count sessions by status
      let scheduled = 0;
      let inProgress = 0;
      let completed = 0;
      let cancelled = 0;
      let overdue = 0;
      
      sessions.forEach(session => {
        if (session.status === 'scheduled') {
          if (isOverdue(session.date)) {
            overdue++;
          } else {
            scheduled++;
          }
        } else if (session.status === 'in-progress') {
          inProgress++;
        } else if (session.status === 'completed') {
          completed++;
        } else if (session.status === 'cancelled') {
          cancelled++;
        }
      });
      
      // Update chart
      sessionsDistributionChart.updateSeries([{
        name: 'Sessions',
        data: [scheduled, inProgress, completed, cancelled, overdue]
      }]);
    }
    
    function updatePerformanceRatingsChart() {
      const sessions = dashboardData.sessions || [];
      const teamMembers = dashboardData.teamMembers || [];
      
      // Only use completed sessions with ratings
      const completedSessions = sessions.filter(s => s.status === 'completed' && (s.qualityRating || s.productivityRating || s.teamworkRating || s.communicationRating));
      
      // Group by team member
      const teamMemberMap = new Map();
      teamMembers.forEach(member => {
        if (member.Status === 'Active') {
          teamMemberMap.set(member.Email, {
            name: member.Name || member.Email,
            quality: [],
            productivity: [],
            teamwork: [],
            communication: []
          });
        }
      });
      
      // Collect ratings
      completedSessions.forEach(session => {
        const email = session.teamMemberEmail;
        if (teamMemberMap.has(email)) {
          const member = teamMemberMap.get(email);
          if (session.qualityRating) member.quality.push(parseInt(session.qualityRating));
          if (session.productivityRating) member.productivity.push(parseInt(session.productivityRating));
          if (session.teamworkRating) member.teamwork.push(parseInt(session.teamworkRating));
          if (session.communicationRating) member.communication.push(parseInt(session.communicationRating));
        }
      });
      
      // Calculate averages
      const categories = [];
      const qualityData = [];
      const productivityData = [];
      const teamworkData = [];
      const communicationData = [];
      
      teamMemberMap.forEach((member, email) => {
        // Only include team members with ratings
        if (member.quality.length > 0 || member.productivity.length > 0 || 
            member.teamwork.length > 0 || member.communication.length > 0) {
          categories.push(member.name);
          
          // Calculate averages or use 0 if no data
          const avgQuality = member.quality.length > 0 ? 
            member.quality.reduce((a, b) => a + b, 0) / member.quality.length : 0;
          qualityData.push(parseFloat(avgQuality.toFixed(1)));
          
          const avgProductivity = member.productivity.length > 0 ? 
            member.productivity.reduce((a, b) => a + b, 0) / member.productivity.length : 0;
          productivityData.push(parseFloat(avgProductivity.toFixed(1)));
          
          const avgTeamwork = member.teamwork.length > 0 ? 
            member.teamwork.reduce((a, b) => a + b, 0) / member.teamwork.length : 0;
          teamworkData.push(parseFloat(avgTeamwork.toFixed(1)));
          
          const avgCommunication = member.communication.length > 0 ? 
            member.communication.reduce((a, b) => a + b, 0) / member.communication.length : 0;
          communicationData.push(parseFloat(avgCommunication.toFixed(1)));
        }
      });
      
      // Update chart
      performanceRatingsChart.updateOptions({
        xaxis: {
          categories: categories
        }
      });
      
      performanceRatingsChart.updateSeries([
        {
          name: 'Quality Rating',
          data: qualityData
        }, 
        {
          name: 'Productivity Rating',
          data: productivityData
        }, 
        {
          name: 'Teamwork Rating',
          data: teamworkData
        }, 
        {
          name: 'Communication Rating',
          data: communicationData
        }
      ]);
    }
    
    function updateActionCompletionChart() {
      const actionItems = dashboardData.actionItems || [];
      
      // Get weeks
      const weeks = getLastNWeeks(7);
      
      // Count completed actions and calculate completion rates per week
      const completedActions = [];
      const completionRates = [];
      
      weeks.forEach(week => {
        const startDate = week.start;
        const endDate = week.end;
        
        let total = 0;
        let completed = 0;
        
        actionItems.forEach(item => {
          const itemDate = new Date(item.createdDate || item.dueDate);
          if (itemDate >= startDate && itemDate <= endDate) {
            total++;
            if (item.completed) {
              completed++;
            }
          }
        });
        
        completedActions.push(completed);
        completionRates.push(total > 0 ? Math.round((completed / total) * 100) : 0);
      });
      
      // Create week labels
      const labels = weeks.map(week => {
        const startMonth = week.start.toLocaleString('default', { month: 'short' });
        const startDay = week.start.getDate();
        const endMonth = week.end.toLocaleString('default', { month: 'short' });
        const endDay = week.end.getDate();
        
        return `${startMonth} ${startDay}-${endMonth} ${endDay}`;
      });
      
      // Update chart
      actionCompletionChart.updateOptions({
        labels: labels
      });
      
      actionCompletionChart.updateSeries([
        {
          name: 'Completed Actions',
          type: 'column',
          data: completedActions
        }, 
        {
          name: 'Completion Rate',
          type: 'line',
          data: completionRates
        }
      ]);
    }
    
    function updateTrendsChart(type = 'sessions') {
      const data = prepareTrendsData(type);
      
      trendsChart.updateOptions({
        xaxis: {
          categories: data.categories
        }
      });
      
      trendsChart.updateSeries(data.series);
    }
    
    function prepareTrendsData(type) {
      const sessions = dashboardData.sessions || [];
      const actionItems = dashboardData.actionItems || [];
      
      // Setup date ranges for chart
      const currentDate = new Date();
      const pastMonths = 5; // Show 6 months including current
      const categories = [];
      
      for (let i = pastMonths; i >= 0; i--) {
        const date = new Date();
        date.setMonth(currentDate.getMonth() - i);
        categories.push(date.toLocaleString('default', { month: 'short' }));
      }
      
      if (type === 'sessions') {
        // Count sessions per month
        const scheduledData = new Array(categories.length).fill(0);
        const completedData = new Array(categories.length).fill(0);
        const cancelledData = new Array(categories.length).fill(0);
        
        sessions.forEach(session => {
          const sessionDate = new Date(session.date);
          const monthIndex = pastMonths - (currentDate.getMonth() - sessionDate.getMonth() + (currentDate.getFullYear() - sessionDate.getFullYear()) * 12);
          
          if (monthIndex >= 0 && monthIndex < categories.length) {
            if (session.status === 'scheduled' || session.status === 'in-progress') {
              scheduledData[monthIndex]++;
            } else if (session.status === 'completed') {
              completedData[monthIndex]++;
            } else if (session.status === 'cancelled') {
              cancelledData[monthIndex]++;
            }
          }
        });
        
        return {
          categories: categories,
          series: [
            {
              name: 'Scheduled',
              data: scheduledData
            },
            {
              name: 'Completed',
              data: completedData
            },
            {
              name: 'Cancelled',
              data: cancelledData
            }
          ]
        };
      } else if (type === 'ratings') {
        // Calculate average ratings per month
        const monthlyRatings = categories.map(() => ({
          quality: [],
          productivity: [],
          teamwork: []
        }));
        
        sessions.forEach(session => {
          if (session.status === 'completed') {
            const sessionDate = new Date(session.date);
            const monthIndex = pastMonths - (currentDate.getMonth() - sessionDate.getMonth() + (currentDate.getFullYear() - sessionDate.getFullYear()) * 12);
            
            if (monthIndex >= 0 && monthIndex < categories.length) {
              if (session.qualityRating) {
                monthlyRatings[monthIndex].quality.push(parseInt(session.qualityRating));
              }
              if (session.productivityRating) {
                monthlyRatings[monthIndex].productivity.push(parseInt(session.productivityRating));
              }
              if (session.teamworkRating) {
                monthlyRatings[monthIndex].teamwork.push(parseInt(session.teamworkRating));
              }
            }
          }
        });
        
        // Calculate averages
        const qualityData = monthlyRatings.map(month => {
          if (month.quality.length > 0) {
            const avg = month.quality.reduce((a, b) => a + b, 0) / month.quality.length;
            return parseFloat(avg.toFixed(1));
          }
          return null;
        });
        
        const productivityData = monthlyRatings.map(month => {
          if (month.productivity.length > 0) {
            const avg = month.productivity.reduce((a, b) => a + b, 0) / month.productivity.length;
            return parseFloat(avg.toFixed(1));
          }
          return null;
        });
        
        const teamworkData = monthlyRatings.map(month => {
          if (month.teamwork.length > 0) {
            const avg = month.teamwork.reduce((a, b) => a + b, 0) / month.teamwork.length;
            return parseFloat(avg.toFixed(1));
          }
          return null;
        });
        
        return {
          categories: categories,
          series: [
            {
              name: 'Quality Rating',
              data: qualityData
            },
            {
              name: 'Productivity Rating',
              data: productivityData
            },
            {
              name: 'Teamwork Rating',
              data: teamworkData
            }
          ]
        };
      } else if (type === 'actions') {
        // Count action items per month
        const createdData = new Array(categories.length).fill(0);
        const completedData = new Array(categories.length).fill(0);
        const pendingData = new Array(categories.length).fill(0);
        
        actionItems.forEach(item => {
          const itemDate = new Date(item.createdDate || item.dueDate);
          const monthIndex = pastMonths - (currentDate.getMonth() - itemDate.getMonth() + (currentDate.getFullYear() - itemDate.getFullYear()) * 12);
          
          if (monthIndex >= 0 && monthIndex < categories.length) {
            createdData[monthIndex]++;
            if (item.completed) {
              completedData[monthIndex]++;
            } else {
              pendingData[monthIndex]++;
            }
          }
        });
        
        return {
          categories: categories,
          series: [
            {
              name: 'Created',
              data: createdData
            },
            {
              name: 'Completed',
              data: completedData
            },
            {
              name: 'Pending',
              data: pendingData
            }
          ]
        };
      }
      
      return {
        categories: categories,
        series: []
      };
    }
    
    function updateTeamCoverage() {
      const metrics = dashboardData.metrics || {};
      const onTrack = metrics.teamStatusOnTrack || 0;
      const needAttention = metrics.teamStatusNeedAttention || 0;
      const overdue = metrics.teamStatusOverdue || 0;
      
      // Update dashboard team coverage chart
      if (teamCoverageChart) {
        teamCoverageChart.updateSeries([onTrack, needAttention, overdue]);
      }
      
      // Update analytics team coverage chart
      if (teamCoverageFullChart) {
        teamCoverageFullChart.updateSeries([onTrack, needAttention, overdue]);
      }
      
      // Update team coverage list
      updateTeamCoverageList();
    }
    
    function updateTeamCoverageList() {
      const container = document.getElementById('team-coverage-list');
      const teamMembers = dashboardData.teamMembers || [];
      const sessions = dashboardData.sessions || [];
      
      if (!container) return;
      
      // Clear container
      container.innerHTML = '';
      
      // Group team members by status
      const teamMemberStatus = new Map();
      
      teamMembers.forEach(member => {
        if (member.Status === 'Active') {
          // Find latest session for this team member
          const memberSessions = sessions.filter(s => s.teamMemberEmail === member.Email);
          const latestSession = memberSessions.sort((a, b) => new Date(b.date) - new Date(a.date))[0];
          
          let status = 'onTrack';
          if (latestSession) {
            const sessionDate = new Date(latestSession.date);
            const today = new Date();
            const diffDays = Math.floor((today - sessionDate) / (1000 * 60 * 60 * 24));
            
            if (diffDays > 30) {
              status = 'overdue';
            } else if (diffDays > 14) {
              status = 'attention';
            }
          } else {
            // No sessions - needs attention
            status = 'attention';
          }
          
          teamMemberStatus.set(member.Email, {
            name: member.Name || member.Email,
            status: status,
            lastSession: latestSession ? new Date(latestSession.date) : null
          });
        }
      });
      
      // Create HTML for the list
      let html = '';
      let count = 0;
      
      // First list overdue
      teamMemberStatus.forEach((data, email) => {
        if (data.status === 'overdue' && count < 3) {
          html += `
            <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-danger-subtle rounded">
              <div class="d-flex align-items-center">
                <div class="me-2 fw-bold">${getInitials(data.name)}</div>
                <div>${data.name}</div>
              </div>
              <span class="badge bg-danger">Overdue</span>
            </div>
          `;
          count++;
        }
      });
      
      // Then list attention needed
      teamMemberStatus.forEach((data, email) => {
        if (data.status === 'attention' && count < 3) {
          html += `
            <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-warning-subtle rounded">
              <div class="d-flex align-items-center">
                <div class="me-2 fw-bold">${getInitials(data.name)}</div>
                <div>${data.name}</div>
              </div>
              <span class="badge bg-warning text-dark">Attention</span>
            </div>
          `;
          count++;
        }
      });
      
      // If there's room, add some on-track team members
      teamMemberStatus.forEach((data, email) => {
        if (data.status === 'onTrack' && count < 3) {
          html += `
            <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-success-subtle rounded">
              <div class="d-flex align-items-center">
                <div class="me-2 fw-bold">${getInitials(data.name)}</div>
                <div>${data.name}</div>
              </div>
              <span class="badge bg-success">On Track</span>
            </div>
          `;
          count++;
        }
      });
      
      container.innerHTML = html;
    }
    
    function updateAttentionList() {
      const container = document.getElementById('attention-list');
      const sessions = dashboardData.sessions || [];
      
      if (!container) return;
      
      // Find overdue sessions
      const today = new Date();
      const overdueSessions = sessions.filter(session => {
        return (session.status === 'scheduled' || session.status === 'in-progress') && 
               new Date(session.date) < today;
      }).sort((a, b) => new Date(a.date) - new Date(b.date));
      
      // Update badge count
      document.getElementById('attention-count').textContent = overdueSessions.length;
      
      // Clear container
      container.innerHTML = '';
      
      if (overdueSessions.length === 0) {
        container.innerHTML = `
          <li class="list-group-item py-3 text-center">
            <i class="fas fa-check-circle text-success mb-2" style="font-size: 24px;"></i>
            <p class="mb-0">No overdue sessions!</p>
          </li>
        `;
        return;
      }
      
      // Display up to 5 items
      const displaySessions = overdueSessions.slice(0, 5);
      
      displaySessions.forEach(session => {
        const sessionDate = new Date(session.date);
        const diffDays = Math.floor((today - sessionDate) / (1000 * 60 * 60 * 24));
        
        const listItem = document.createElement('li');
        listItem.className = 'list-group-item py-3';
        listItem.innerHTML = `
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <div class="fw-medium">${session.teamMemberName || session.teamMemberEmail}</div>
              <div class="small text-secondary">
                <i class="far fa-calendar-alt me-1"></i> ${formatDate(sessionDate)}
              </div>
            </div>
            <span class="badge bg-danger">${diffDays}d overdue</span>
          </div>
        `;
        
        // Add click handler
        listItem.style.cursor = 'pointer';
        listItem.addEventListener('click', () => viewSession(session.id));
        
        container.appendChild(listItem);
      });
      
      // Show "View All" if there are more
      if (overdueSessions.length > 5) {
        const moreItem = document.createElement('li');
        moreItem.className = 'list-group-item text-center py-2';
        moreItem.innerHTML = `
          <a href="#" class="text-primary" data-page="upcoming">View all ${overdueSessions.length} overdue sessions</a>
        `;
        moreItem.querySelector('a').addEventListener('click', (e) => {
          e.preventDefault();
          showPage('upcoming');
        });
        container.appendChild(moreItem);
      }
    }
    
    function renderCalendar() {
      const container = document.getElementById('calendar-days');
      const sessions = dashboardData.sessions || [];
      
      if (!container) return;
      
      // Update month/year display
      document.getElementById('calendar-month-year').textContent = currentCalendarDate.toLocaleString('default', { month: 'long', year: 'numeric' });
      
      // Clear container
      container.innerHTML = '';
      
      // Get calendar days
      const calendarDays = getCalendarDays(currentCalendarDate);
      
      // Create calendar day cells
      calendarDays.forEach(day => {
        const dayCell = document.createElement('div');
        dayCell.className = 'calendar-day';
        
        // Add other month class if not in current month
        if (day.month !== currentCalendarDate.getMonth()) {
          dayCell.classList.add('other-month');
        }
        
        // Add today class if today
        const today = new Date();
        if (day.date.getDate() === today.getDate() && 
            day.date.getMonth() === today.getMonth() && 
            day.date.getFullYear() === today.getFullYear()) {
          dayCell.classList.add('today');
        }
        
        // Add day number
        const dayNumber = document.createElement('div');
        dayNumber.className = 'calendar-day-number';
        dayNumber.textContent = day.date.getDate();
        dayCell.appendChild(dayNumber);
        
        // Add events for this day
        const dayEvents = sessions.filter(session => {
          const sessionDate = new Date(session.date);
          return sessionDate.getDate() === day.date.getDate() && 
                 sessionDate.getMonth() === day.date.getMonth() && 
                 sessionDate.getFullYear() === day.date.getFullYear();
        });
        
        if (dayEvents.length > 0) {
          const eventsContainer = document.createElement('div');
          eventsContainer.className = 'calendar-events';
          
          dayEvents.forEach(event => {
            const eventElement = document.createElement('div');
            eventElement.className = `calendar-event event-type-oneonone`;
            eventElement.textContent = event.teamMemberName || event.teamMemberEmail;
            eventElement.title = `${event.teamMemberName || event.teamMemberEmail} - ${event.status}`;
            eventElement.dataset.id = event.id;
            eventsContainer.appendChild(eventElement);
            
            // Add click handler
            eventElement.addEventListener('click', (e) => {
              e.stopPropagation();
              viewSession(event.id);
            });
          });
          
          dayCell.appendChild(eventsContainer);
        }
        
        // Add click handler to create session on this day
        dayCell.addEventListener('click', () => scheduleSessionOnDate(day.date));
        
        container.appendChild(dayCell);
      });
    }
    
    function getCalendarDays(date) {
      const year = date.getFullYear();
      const month = date.getMonth();
      
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      
      const daysInMonth = lastDay.getDate();
      const startingDayOfWeek = firstDay.getDay(); // 0 = Sunday, 6 = Saturday
      
      const calendarDays = [];
      
      // Add days from previous month to fill first week
      const previousMonth = new Date(year, month, 0);
      const previousMonthDays = previousMonth.getDate();
      
      for (let i = startingDayOfWeek - 1; i >= 0; i--) {
        calendarDays.push({
          date: new Date(year, month - 1, previousMonthDays - i),
          month: month - 1
        });
      }
      
      // Add days of current month
      for (let i = 1; i <= daysInMonth; i++) {
        calendarDays.push({
          date: new Date(year, month, i),
          month: month
        });
      }
      
      // Add days from next month to fill last week
      const totalCellsNeeded = 6 * 7; // 6 weeks, 7 days per week
      const remainingCells = totalCellsNeeded - calendarDays.length;
      
      for (let i = 1; i <= remainingCells; i++) {
        calendarDays.push({
          date: new Date(year, month + 1, i),
          month: month + 1
        });
      }
      
      return calendarDays;
    }
    
    function changeCalendarMonth(delta) {
      currentCalendarDate.setMonth(currentCalendarDate.getMonth() + delta);
      renderCalendar();
    }
    
    function goToToday() {
      currentCalendarDate = new Date();
      renderCalendar();
    }
    
    function loadUpcomingSessions() {
      const container = document.getElementById('upcoming-sessions-list');
      if (!container) return;
      
      // Get all scheduled sessions
      const sessions = dashboardData.sessions || [];
      const upcomingSessions = sessions.filter(s => s.status === 'scheduled' || s.status === 'in-progress');
      
      // Apply filters if needed
      const showOverdue = document.getElementById('show-overdue').checked;
      const statusFilter = document.getElementById('status-filter').value;
      
      let filteredSessions = upcomingSessions;
      
      if (statusFilter !== 'all') {
        filteredSessions = filteredSessions.filter(s => s.status === statusFilter);
      }
      
      if (!showOverdue) {
        filteredSessions = filteredSessions.filter(s => !isOverdue(s.date));
      }
      
      // Sort by date
      filteredSessions.sort((a, b) => new Date(a.date) - new Date(b.date));
      
      // Update container
      container.innerHTML = '';
      document.getElementById('session-count').textContent = `${filteredSessions.length} sessions`;
      
      if (filteredSessions.length === 0) {
        container.innerHTML = `
          <tr>
            <td colspan="5" class="text-center py-4">
              <div class="alert alert-info">
                No upcoming sessions found. Schedule a new one-on-one session to get started.
              </div>
            </td>
          </tr>
        `;
        return;
      }
      
      // Create table rows
      filteredSessions.forEach(session => {
        const sessionDate = new Date(session.date);
        const isSessionOverdue = isOverdue(session.date);
        
        const row = document.createElement('tr');
        
        // Team member cell
        const teamMemberCell = document.createElement('td');
        teamMemberCell.className = 'd-flex align-items-center';
        teamMemberCell.innerHTML = `
          <div class="session-team-member-avatar">${getInitials(session.teamMemberName || session.teamMemberEmail)}</div>
          <div class="ms-2">${session.teamMemberName || session.teamMemberEmail}</div>
        `;
        
        // Date cell
        const dateCell = document.createElement('td');
        dateCell.className = 'session-date';
        dateCell.textContent = formatDate(sessionDate);
        
        // Status cell
        const statusCell = document.createElement('td');
        let statusClass = 'primary';
        if (session.status === 'completed') {
          statusClass = 'success';
        } else if (session.status === 'in-progress') {
          statusClass = 'warning';
        } else if (session.status === 'cancelled') {
          statusClass = 'secondary';
        }
        
        statusCell.innerHTML = `<span class="badge bg-${statusClass}">${capitalizeFirstLetter(session.status)}</span>`;
        
        // Due cell
        const dueCell = document.createElement('td');
        dueCell.className = 'session-due';
        if (isSessionOverdue) {
          dueCell.classList.add('overdue');
          dueCell.textContent = getDueText(sessionDate);
        } else {
          dueCell.textContent = 'Upcoming';
        }
        
        // Actions cell
        const actionsCell = document.createElement('td');
        actionsCell.className = 'text-end';
        actionsCell.innerHTML = `
          <button class="btn btn-sm btn-outline-primary me-1" onclick="viewSession('${session.id}')">
            <i class="fas fa-eye"></i>
          </button>
          <button class="btn btn-sm btn-outline-secondary" onclick="editSession('${session.id}')">
            <i class="fas fa-edit"></i>
          </button>
        `;
        
        row.appendChild(teamMemberCell);
        row.appendChild(dateCell);
        row.appendChild(statusCell);
        row.appendChild(dueCell);
        row.appendChild(actionsCell);
        
        // Add row click handler
        row.style.cursor = 'pointer';
        row.addEventListener('click', (e) => {
          if (!e.target.closest('button')) {
            viewSession(session.id);
          }
        });
        
        container.appendChild(row);
      });
    }
    
    function loadTeamMembers() {
      const container = document.getElementById('team-members-grid');
      if (!container) return;
      
      const teamMembers = dashboardData.teamMembers || [];
      const sessions = dashboardData.sessions || [];
      
      // Clear container
      container.innerHTML = '';
      
      if (teamMembers.length === 0) {
        container.innerHTML = `
          <div class="col-12 text-center py-4">
            <div class="alert alert-info">
              No team members found. Add team members to get started.
            </div>
          </div>
        `;
        return;
      }
      
      // Create team member cards
      teamMembers.filter(member => member.Status === 'Active').forEach(member => {
        // Calculate session stats
        const memberSessions = sessions.filter(s => s.teamMemberEmail === member.Email);
        const completedSessions = memberSessions.filter(s => s.status === 'completed').length;
        const totalSessions = memberSessions.length;
        
        // Determine status
        let status = 'on-track';
        let statusText = 'On Track';
        
        const latestSession = memberSessions.sort((a, b) => new Date(b.date) - new Date(a.date))[0];
        if (latestSession) {
          const sessionDate = new Date(latestSession.date);
          const today = new Date();
          const diffDays = Math.floor((today - sessionDate) / (1000 * 60 * 60 * 24));
          
          if (diffDays > 30) {
            status = 'overdue';
            statusText = 'Overdue';
          } else if (diffDays > 14) {
            status = 'attention';
            statusText = 'Needs Attention';
          }
        } else {
          status = 'attention';
          statusText = 'Needs Attention';
        }
        
        // Create card
        const card = document.createElement('div');
        card.className = 'team-member-card';
        card.innerHTML = `
          <div class="team-member-header">
            <div class="team-member-avatar">${getInitials(member.Name || member.Email)}</div>
            <div class="team-member-name">${member.Name || member.Email}</div>
            <div class="team-member-role">${member.Role || 'Team Member'}</div>
          </div>
          <div class="team-member-body">
            <div class="team-member-status status-${status}">${statusText}</div>
            <div class="team-member-stats mt-3">
              <div class="team-stat">
                <div class="stat-value">${completedSessions}</div>
                <div class="stat-label">Sessions</div>
              </div>
              <div class="team-stat">
                <div class="stat-value">${member.StartDate ? getDaysWithCompany(member.StartDate) : 'N/A'}</div>
                <div class="stat-label">Days with Team</div>
              </div>
            </div>
            <div class="team-member-actions">
              <div class="tm-action-btn" title="Schedule One-on-One" onclick="scheduleWithTeamMember('${member.Email}')">
                <i class="fas fa-calendar-plus"></i>
              </div>
              <div class="tm-action-btn" title="View Sessions" onclick="viewTeamMemberSessions('${member.Email}')">
                <i class="fas fa-history"></i>
              </div>
              <div class="tm-action-btn" title="Edit Team Member" onclick="editTeamMember('${member.Email}')">
                <i class="fas fa-user-edit"></i>
              </div>
            </div>
          </div>
        `;
        
        container.appendChild(card);
      });
    }
    
    function loadSessionHistory() {
      const container = document.getElementById('history-sessions-list');
      if (!container) return;
      
      // Populate team member filter dropdown
      populateHistoryTeamFilter();
      
      // Get all sessions
      const sessions = dashboardData.sessions || [];
      
      // Apply filters
      const teamFilter = document.getElementById('history-team-filter').value;
      const statusFilter = document.getElementById('history-status-filter').value;
      
      let filteredSessions = [...sessions];
      
      if (teamFilter !== 'all') {
        filteredSessions = filteredSessions.filter(s => s.teamMemberEmail === teamFilter);
      }
      
      if (statusFilter !== 'all') {
        filteredSessions = filteredSessions.filter(s => s.status === statusFilter);
      }
      
      // Sort by date (latest first)
      filteredSessions.sort((a, b) => new Date(b.date) - new Date(a.date));
      
      // Update container
      container.innerHTML = '';
      document.getElementById('history-count').textContent = `${filteredSessions.length} sessions`;
      
      if (filteredSessions.length === 0) {
        container.innerHTML = `
          <tr>
                        <td colspan="5" class="text-center py-4">
              <div class="alert alert-info">
                No sessions found matching your filters.
              </div>
            </td>
          </tr>
        `;
        return;
      }
      
      // Create table rows
      filteredSessions.forEach(session => {
        const sessionDate = new Date(session.date);
        const updatedDate = session.lastUpdatedDate ? new Date(session.lastUpdatedDate) : sessionDate;
        
        const row = document.createElement('tr');
        
        // Team member cell
        const teamMemberCell = document.createElement('td');
        teamMemberCell.className = 'd-flex align-items-center';
        teamMemberCell.innerHTML = `
          <div class="session-team-member-avatar">${getInitials(session.teamMemberName || session.teamMemberEmail)}</div>
          <div class="ms-2">${session.teamMemberName || session.teamMemberEmail}</div>
        `;
        
        // Date cell
        const dateCell = document.createElement('td');
        dateCell.className = 'session-date';
        dateCell.textContent = formatDate(sessionDate);
        
        // Status cell
        const statusCell = document.createElement('td');
        let statusClass = 'primary';
        if (session.status === 'completed') {
          statusClass = 'success';
        } else if (session.status === 'in-progress') {
          statusClass = 'warning';
        } else if (session.status === 'cancelled') {
          statusClass = 'secondary';
        }
        
        statusCell.innerHTML = `<span class="badge bg-${statusClass}">${capitalizeFirstLetter(session.status)}</span>`;
        
        // Updated cell
        const updatedCell = document.createElement('td');
        updatedCell.className = 'text-secondary';
        updatedCell.textContent = formatRelativeTime(updatedDate);
        
        // Actions cell
        const actionsCell = document.createElement('td');
        actionsCell.className = 'text-end';
        actionsCell.innerHTML = `
          <button class="btn btn-sm btn-outline-primary me-1" onclick="viewSession('${session.id}')">
            <i class="fas fa-eye"></i>
          </button>
          <button class="btn btn-sm btn-outline-secondary" onclick="editSession('${session.id}')">
            <i class="fas fa-edit"></i>
          </button>
        `;
        
        row.appendChild(teamMemberCell);
        row.appendChild(dateCell);
        row.appendChild(statusCell);
        row.appendChild(updatedCell);
        row.appendChild(actionsCell);
        
        // Add row click handler
        row.style.cursor = 'pointer';
        row.addEventListener('click', (e) => {
          if (!e.target.closest('button')) {
            viewSession(session.id);
          }
        });
        
        container.appendChild(row);
      });
    }
    
    function loadActionItems() {
      const container = document.getElementById('action-items-list');
      if (!container) return;
      
      // Populate team member filter dropdown
      populateActionTeamFilter();
      
      // Get all action items
      const actionItems = dashboardData.actionItems || [];
      
      // Apply filters
      const completionFilter = document.getElementById('action-completion-filter').value;
      const teamFilter = document.getElementById('action-team-filter').value;
      
      let filteredItems = [...actionItems];
      
      if (completionFilter !== 'all') {
        const isCompleted = completionFilter === 'completed';
        filteredItems = filteredItems.filter(item => item.completed === isCompleted);
      }
      
      if (teamFilter !== 'all') {
        filteredItems = filteredItems.filter(item => item.teamMemberEmail === teamFilter);
      }
      
      // Sort by due date (soonest first)
      filteredItems.sort((a, b) => {
        if (!a.dueDate) return 1;
        if (!b.dueDate) return -1;
        return new Date(a.dueDate) - new Date(b.dueDate);
      });
      
      // Update container
      container.innerHTML = '';
      document.getElementById('action-items-count').textContent = `${filteredItems.length} action items`;
      
      if (filteredItems.length === 0) {
        container.innerHTML = `
          <tr>
            <td colspan="6" class="text-center py-4">
              <div class="alert alert-info">
                No action items found matching your filters.
              </div>
            </td>
          </tr>
        `;
        return;
      }
      
      // Create table rows
      filteredItems.forEach(item => {
        const dueDate = item.dueDate ? new Date(item.dueDate) : null;
        const isOverdue = dueDate && dueDate < new Date() && !item.completed;
        
        const row = document.createElement('tr');
        
        // Checkbox cell
        const checkboxCell = document.createElement('td');
        checkboxCell.innerHTML = `
          <div class="form-check">
            <input class="form-check-input" type="checkbox" id="action-${item.id}" ${item.completed ? 'checked' : ''}>
          </div>
        `;
        
        const checkbox = checkboxCell.querySelector('input');
        checkbox.addEventListener('change', () => toggleActionItemCompletion(item.id, checkbox.checked));
        
        // Title cell
        const titleCell = document.createElement('td');
        titleCell.innerHTML = `
          <div class="${item.completed ? 'text-decoration-line-through text-secondary' : ''}">${item.title}</div>
          ${item.sessionId ? `<div class="small text-secondary">From: ${item.sessionTitle || 'One-on-One Session'}</div>` : ''}
        `;
        
        // Team member cell
        const teamMemberCell = document.createElement('td');
        teamMemberCell.innerHTML = `${item.teamMemberName || item.teamMemberEmail}`;
        
        // Due date cell
        const dueDateCell = document.createElement('td');
        if (dueDate) {
          dueDateCell.innerHTML = `
            <div class="${isOverdue ? 'text-danger' : ''}">${formatDate(dueDate)}</div>
            ${isOverdue ? `<div class="small text-danger">${getDueText(dueDate)}</div>` : ''}
          `;
        } else {
          dueDateCell.innerHTML = '<span class="text-secondary">Not set</span>';
        }
        
        // Owner cell
        const ownerCell = document.createElement('td');
        let ownerText = 'Team Member';
        if (item.owner === 'manager') {
          ownerText = 'Manager';
        } else if (item.owner === 'both') {
          ownerText = 'Both';
        }
        ownerCell.textContent = ownerText;
        
        // Actions cell
        const actionsCell = document.createElement('td');
        actionsCell.className = 'text-end';
        actionsCell.innerHTML = `
          <button class="btn btn-sm btn-outline-secondary me-1" onclick="editActionItem('${item.id}')">
            <i class="fas fa-edit"></i>
          </button>
          <button class="btn btn-sm btn-outline-danger" onclick="deleteActionItem('${item.id}')">
            <i class="fas fa-trash"></i>
          </button>
        `;
        
        row.appendChild(checkboxCell);
        row.appendChild(titleCell);
        row.appendChild(teamMemberCell);
        row.appendChild(dueDateCell);
        row.appendChild(ownerCell);
        row.appendChild(actionsCell);
        
        // Add row click handler
        row.addEventListener('click', (e) => {
          if (!e.target.closest('input') && !e.target.closest('button')) {
            editActionItem(item.id);
          }
        });
        
        container.appendChild(row);
      });
    }
    
    function populateTeamMemberDropdowns() {
      const teamMembers = dashboardData.teamMembers || [];
      
      // Filter to active members
      const activeMembers = teamMembers.filter(member => member.Status === 'Active');
      
      // Sort alphabetically by name
      activeMembers.sort((a, b) => {
        const nameA = a.Name || a.Email;
        const nameB = b.Name || b.Email;
        return nameA.localeCompare(nameB);
      });
      
      // Populate history team filter dropdown
      populateHistoryTeamFilter(activeMembers);
      
      // Populate action items team filter dropdown
      populateActionTeamFilter(activeMembers);
    }
    
    function populateHistoryTeamFilter(members = null) {
      const dropdown = document.getElementById('history-team-filter');
      if (!dropdown) return;
      
      // Use provided members or get from dashboardData
      const teamMembers = members || dashboardData.teamMembers || [];
      const activeMembers = members ? teamMembers : teamMembers.filter(member => member.Status === 'Active');
      
      // Keep selected value
      const selectedValue = dropdown.value;
      
      // Clear dropdown keeping first option
      dropdown.innerHTML = '<option value="all">All Team Members</option>';
      
      // Add team members
      activeMembers.forEach(member => {
        const option = document.createElement('option');
        option.value = member.Email;
        option.textContent = member.Name || member.Email;
        dropdown.appendChild(option);
      });
      
      // Restore selected value if it's still valid
      if (selectedValue !== 'all') {
        const stillValid = activeMembers.some(member => member.Email === selectedValue);
        if (stillValid) {
          dropdown.value = selectedValue;
        }
      }
    }
    
    function populateActionTeamFilter(members = null) {
      const dropdown = document.getElementById('action-team-filter');
      if (!dropdown) return;
      
      // Use provided members or get from dashboardData
      const teamMembers = members || dashboardData.teamMembers || [];
      const activeMembers = members ? teamMembers : teamMembers.filter(member => member.Status === 'Active');
      
      // Keep selected value
      const selectedValue = dropdown.value;
      
      // Clear dropdown keeping first option
      dropdown.innerHTML = '<option value="all">All Team Members</option>';
      
      // Add team members
      activeMembers.forEach(member => {
        const option = document.createElement('option');
        option.value = member.Email;
        option.textContent = member.Name || member.Email;
        dropdown.appendChild(option);
      });
      
      // Restore selected value if it's still valid
      if (selectedValue !== 'all') {
        const stillValid = activeMembers.some(member => member.Email === selectedValue);
        if (stillValid) {
          dropdown.value = selectedValue;
        }
      }
    }
    
    function filterUpcomingSessions() {
      loadUpcomingSessions();
    }
    
    function filterSessionHistory() {
      loadSessionHistory();
    }
    
    function filterActionItems() {
      loadActionItems();
    }
    
    function setDateRange(days) {
      const end = new Date();
      const start = new Date();
      start.setDate(start.getDate() - days);
      
      dateRange.start = start;
      dateRange.end = end;
      
      document.getElementById('date-range-text').textContent = `Last ${days} Days`;
      
      // Update date pickers
      startDatePicker.setDate(start);
      endDatePicker.setDate(end);
      
      // Apply date range
      dateRangeModal.hide();
      loadDashboardData();
    }
    
    function applyCustomDateRange() {
      const startDate = startDatePicker.selectedDates[0];
      const endDate = endDatePicker.selectedDates[0];
      
      if (!startDate || !endDate) {
        showNotification('Please select both start and end dates', 'warning');
        return;
      }
      
      dateRange.start = startDate;
      dateRange.end = endDate;
      
      // Format date range text
      const startStr = formatDate(startDate, 'short');
      const endStr = formatDate(endDate, 'short');
      document.getElementById('date-range-text').textContent = `${startStr} - ${endStr}`;
      
      // Apply date range
      dateRangeModal.hide();
      loadDashboardData();
    }
    
    function newSession() {
      google.script.run.showOneOnOneForm();
      google.script.host.close();
    }
    
    function viewSession(id) {
      google.script.run.showOneOnOneDetails(id);
      google.script.host.close();
    }
    
    function editSession(id) {
      google.script.run.editOneOnOne(id);
      google.script.host.close();
    }
    
    function scheduleSessionOnDate(date) {
      google.script.run.scheduleOneOnOneOnDate(formatDateForApi(date));
      google.script.host.close();
    }
    
    function scheduleWithTeamMember(email) {
      google.script.run.scheduleOneOnOneWithTeamMember(email);
      google.script.host.close();
    }
    
    function viewTeamMemberSessions(email) {
      // Set up filters in history page and navigate there
      document.getElementById('history-team-filter').value = email;
      showPage('history');
      loadSessionHistory();
    }
    
    function addTeamMember() {
      google.script.run.showTeamMemberForm();
      google.script.host.close();
    }
    
    function editTeamMember(email) {
      google.script.run.editTeamMember(email);
      google.script.host.close();
    }
    
    function editActionItem(id) {
      google.script.run.editActionItem(id);
      google.script.host.close();
    }
    
    function createActionItem() {
      google.script.run.createActionItem();
      google.script.host.close();
    }
    
    function deleteActionItem(id) {
      if (confirm('Are you sure you want to delete this action item?')) {
        google.script.run
          .withSuccessHandler(function(result) {
            if (result && result.success) {
              showNotification('Action item deleted successfully', 'success');
              loadDashboardData();
            } else {
              showNotification('Failed to delete action item: ' + (result ? result.message : 'Unknown error'), 'error');
            }
          })
          .withFailureHandler(function(error) {
            showNotification('Error deleting action item: ' + error.message, 'error');
          })
          .deleteActionItem(id);
      }
    }
    
    function toggleActionItemCompletion(id, completed) {
      google.script.run
        .withSuccessHandler(function(result) {
          if (result && result.success) {
            showNotification(completed ? 'Action item marked as completed' : 'Action item marked as incomplete', 'success');
            loadDashboardData();
          } else {
            showNotification('Failed to update action item: ' + (result ? result.message : 'Unknown error'), 'error');
            loadDashboardData(); // Reload to reset checkbox state
          }
        })
        .withFailureHandler(function(error) {
          showNotification('Error updating action item: ' + error.message, 'error');
          loadDashboardData(); // Reload to reset checkbox state
        })
        .toggleActionItemCompletion(id, completed);
    }
    
    function exportData() {
      const options = {
        currentPage: currentPage,
        dateRange: {
          start: formatDateForApi(dateRange.start),
          end: formatDateForApi(dateRange.end)
        }
      };
      
      google.script.run.showExportOptions(options);
      google.script.host.close();
    }
    
    function exportSessionHistory() {
      const options = {
        type: 'sessions',
        teamFilter: document.getElementById('history-team-filter').value,
        statusFilter: document.getElementById('history-status-filter').value
      };
      
      google.script.run.showExportOptions(options);
      google.script.host.close();
    }
    
    function generateTeamMemberReport() {
      google.script.run.showTeamMemberReportOptions();
      google.script.host.close();
    }
    
    function generateActionItemsReport() {
      google.script.run.showActionItemsReportOptions();
      google.script.host.close();
    }
    
    function generateTrendsReport() {
      google.script.run.showTrendsReportOptions();
      google.script.host.close();
    }
    
    function loadSettings() {
      // Load settings from user properties or use defaults
      google.script.run
        .withSuccessHandler(function(settings) {
          if (settings) {
            // Populate the form with the settings
            document.getElementById('session-frequency').value = settings.sessionFrequency || '14';
            document.getElementById('default-duration').value = settings.defaultDuration || '30';
            document.getElementById('reminder-days').value = settings.reminderDays || '1';
            document.getElementById('auto-schedule').checked = settings.autoSchedule !== false;
            
            document.getElementById('notify-session-created').checked = settings.notifySessionCreated !== false;
            document.getElementById('notify-session-reminder').checked = settings.notifySessionReminder !== false;
            document.getElementById('notify-action-items').checked = settings.notifyActionItems !== false;
            document.getElementById('notify-overdue').checked = settings.notifyOverdue !== false;
            
            document.getElementById('section-preparation').checked = settings.sectionPreparation !== false;
            document.getElementById('section-performance').checked = settings.sectionPerformance !== false;
            document.getElementById('section-teamwork').checked = settings.sectionTeamwork !== false;
            document.getElementById('section-challenges').checked = settings.sectionChallenges !== false;
            document.getElementById('section-career').checked = settings.sectionCareer !== false;
            document.getElementById('section-action-items').checked = settings.sectionActionItems !== false;
            document.getElementById('section-follow-up').checked = settings.sectionFollowUp !== false;
            
            document.getElementById('theme-mode').value = settings.themeMode || 'light';
            document.getElementById('dashboard-default').value = settings.dashboardDefault || 'overview';
            document.getElementById('date-format').value = settings.dateFormat || 'MM/DD/YYYY';
            document.getElementById('show-avatars').checked = settings.showAvatars !== false;
          }
        })
        .withFailureHandler(function(error) {
          console.error('Error loading settings:', error);
          showNotification('Failed to load settings', 'error');
        })
        .getSettings();
    }
    
    function saveSettings() {
      const settings = {
        sessionFrequency: document.getElementById('session-frequency').value,
        defaultDuration: document.getElementById('default-duration').value,
        reminderDays: document.getElementById('reminder-days').value,
        autoSchedule: document.getElementById('auto-schedule').checked,
        
        notifySessionCreated: document.getElementById('notify-session-created').checked,
        notifySessionReminder: document.getElementById('notify-session-reminder').checked,
        notifyActionItems: document.getElementById('notify-action-items').checked,
        notifyOverdue: document.getElementById('notify-overdue').checked,
        
        sectionPreparation: document.getElementById('section-preparation').checked,
        sectionPerformance: document.getElementById('section-performance').checked,
        sectionTeamwork: document.getElementById('section-teamwork').checked,
        sectionChallenges: document.getElementById('section-challenges').checked,
        sectionCareer: document.getElementById('section-career').checked,
        sectionActionItems: document.getElementById('section-action-items').checked,
        sectionFollowUp: document.getElementById('section-follow-up').checked,
        
        themeMode: document.getElementById('theme-mode').value,
        dashboardDefault: document.getElementById('dashboard-default').value,
        dateFormat: document.getElementById('date-format').value,
        showAvatars: document.getElementById('show-avatars').checked
      };
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (result && result.success) {
            showNotification('Settings saved successfully', 'success');
            
            // Apply theme if changed
            if (settings.themeMode === 'dark') {
              document.body.classList.add('dark-theme');
            } else {
              document.body.classList.remove('dark-theme');
            }
          } else {
            showNotification('Failed to save settings: ' + (result ? result.message : 'Unknown error'), 'error');
          }
        })
        .withFailureHandler(function(error) {
          showNotification('Error saving settings: ' + error.message, 'error');
        })
        .saveSettings(settings);
    }
    
    function resetSettings() {
      if (confirm('Are you sure you want to reset all settings to default values?')) {
        google.script.run
          .withSuccessHandler(function(result) {
            if (result && result.success) {
              showNotification('Settings reset to defaults', 'success');
              loadSettings();
            } else {
              showNotification('Failed to reset settings: ' + (result ? result.message : 'Unknown error'), 'error');
            }
          })
          .withFailureHandler(function(error) {
            showNotification('Error resetting settings: ' + error.message, 'error');
          })
          .resetSettings();
      }
    }
    
    /* ====== Helper Functions ====== */
    
    function getLastNWeeks(n) {
      const weeks = [];
      const today = new Date();
      
      for (let i = 0; i < n; i++) {
        const endOfWeek = new Date(today);
        endOfWeek.setDate(today.getDate() - (i * 7));
        
        const startOfWeek = new Date(endOfWeek);
        startOfWeek.setDate(endOfWeek.getDate() - 6);
        
        weeks.push({
          start: startOfWeek,
          end: endOfWeek
        });
      }
      
      return weeks.reverse();
    }
    
    function getDaysWithCompany(startDate) {
      const start = new Date(startDate);
      const today = new Date();
      const diffTime = Math.abs(today - start);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      return diffDays;
    }
    
    function getDueText(date) {
      const today = new Date();
      const diffTime = Math.abs(today - date);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      return `${diffDays}d overdue`;
    }
    
    function isOverdue(dateStr) {
      const date = new Date(dateStr);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      return date < today;
    }
    
    function getInitials(name) {
      if (!name) return '?';
      
      return name
        .split(' ')
        .map(n => n.charAt(0))
        .join('')
        .toUpperCase()
        .substring(0, 2);
    }
    
    function capitalizeFirstLetter(string) {
      if (!string) return '';
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    function formatDate(date, format = 'medium') {
      if (!date) return '';
      
      const options = { 
        year: 'numeric', 
        month: format === 'short' ? 'short' : 'long', 
        day: 'numeric'
      };
      
      return date.toLocaleDateString(undefined, options);
    }
    
    function formatRelativeTime(date) {
      if (!date) return '';
      
      const now = new Date();
      const diffMs = now - date;
      const diffSecs = Math.floor(diffMs / 1000);
      const diffMins = Math.floor(diffSecs / 60);
      const diffHours = Math.floor(diffMins / 60);
      const diffDays = Math.floor(diffHours / 24);
      
      if (diffSecs < 60) {
        return 'just now';
      } else if (diffMins < 60) {
        return `${diffMins}m ago`;
      } else if (diffHours < 24) {
        return `${diffHours}h ago`;
      } else if (diffDays < 30) {
        return `${diffDays}d ago`;
      } else {
        return formatDate(date, 'short');
      }
    }
    
    function formatDateForApi(date) {
      if (!date) return '';
      
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      
      return `${year}-${month}-${day}`;
    }
    
    function showLoading(message = 'Loading...') {
      document.getElementById('loading-overlay').style.display = 'flex';
      document.querySelector('.loading-text').textContent = message;
    }
    
    function hideLoading() {
      const overlay = document.getElementById('loading-overlay');
      overlay.style.opacity = '0';
      setTimeout(() => {
        overlay.style.display = 'none';
        overlay.style.opacity = '1';
      }, 300);
    }
    
    function showNotification(message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = 'notification';
      
      // Set notification style
      let backgroundColor = 'rgba(67, 97, 238, 0.95)'; // Primary/Info color
      let icon = 'info-circle';
      
      if (type === 'success') {
        backgroundColor = 'rgba(76, 201, 240, 0.95)';
        icon = 'check-circle';
      } else if (type === 'error') {
        backgroundColor = 'rgba(229, 56, 59, 0.95)';
        icon = 'exclamation-circle';
      } else if (type === 'warning') {
        backgroundColor = 'rgba(247, 37, 133, 0.95)';
        icon = 'exclamation-triangle';
      }
      
      // Create notification content
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${icon}"></i>
        </div>
        <div class="notification-message">${message}</div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Apply background color
      notification.style.background = backgroundColor;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Show notification with animation
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
        notification.style.opacity = '1';
      }, 10);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', () => {
        notification.style.transform = 'translateX(400px)';
        notification.style.opacity = '0';
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      });
      
      // Auto dismiss after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.style.transform = 'translateX(400px)';
          notification.style.opacity = '0';
          setTimeout(() => {
            if (document.body.contains(notification)) {
              document.body.removeChild(notification);
            }
          }, 300);
        }
      }, 5000);
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      overflow-x: hidden;
    }
    
    /* Layout */
    .app-container {
      padding: 1.5rem;
      max-width: 1200px;
      margin: 0 auto;
    }
    
    /* Content Cards */
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
      position: relative;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .content-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--success));
      opacity: 0;
      transition: var(--transition);
    }
    
    .content-card:hover::before {
      opacity: 1;
    }
    
    .card-header {
      padding: 1.25rem;
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-title {
      margin: 0;
      font-size: 1.125rem;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 32px;
      height: 32px;
      min-width: 32px;
      border-radius: 8px;
      margin-right: 0.75rem;
      color: #fff;
      background: var(--primary);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Modern Form Elements */
    .form-label {
      font-weight: 500;
      font-size: 0.875rem;
      color: var(--text-primary);
      margin-bottom: 0.5rem;
    }
    
    .form-control, .form-select {
      border-radius: 8px;
      border: 1px solid var(--border-color);
      padding: 0.65rem 1rem;
      font-size: 0.95rem;
      transition: var(--transition);
      background-color: rgba(255, 255, 255, 0.9);
    }
    
    .form-control:focus, .form-select:focus {
      box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.15);
      border-color: var(--primary);
    }
    
    /* Buttons */
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.25rem;
      font-weight: 500;
      transition: var(--transition);
      font-size: 0.95rem;
    }
    
    .btn-icon {
      width: 36px;
      height: 36px;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .btn-primary {
      background: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background: var(--secondary);
      border-color: var(--secondary);
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background: var(--primary);
      color: white;
      transform: translateY(-2px);
    }
    
    /* Loading Animation */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(255, 255, 255, 0.85);
      backdrop-filter: blur(5px);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      transition: all 0.3s ease;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-top-color: var(--primary);
      animation: spinner 0.8s linear infinite;
    }
    
    @keyframes spinner {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Table Styles */
    .modern-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
    }
    
    .modern-table th {
      background: rgba(248, 249, 250, 0.6);
      padding: 1rem;
      font-weight: 600;
      color: var(--text-primary);
      border-bottom: 2px solid var(--border-color);
      text-transform: uppercase;
      font-size: 0.75rem;
      letter-spacing: 0.5px;
    }
    
    .modern-table td {
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
      color: var(--text-primary);
      vertical-align: middle;
    }
    
    .modern-table tr:last-child td {
      border-bottom: none;
    }
    
    .modern-table tbody tr {
      transition: var(--transition);
    }
    
    .modern-table tbody tr:hover {
      background-color: var(--surface-hover);
    }
    
    /* Data Cards */
    .data-card {
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.05);
      margin-bottom: 1.25rem;
      transition: var(--transition);
      position: relative;
      overflow: hidden;
      display: flex;
      flex-direction: column;
      height: 100%;
    }
    
    .data-card:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-3px);
    }
    
    .data-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background: var(--primary);
      opacity: 0;
      transition: var(--transition);
    }
    
    .data-card:hover::before {
      opacity: 1;
    }
    
    .data-card-header {
      padding: 1.25rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .data-card-title {
      margin: 0;
      font-size: 1rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .data-card-body {
      padding: 1.25rem;
      flex: 1;
    }
    
    .data-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .data-list li {
      padding: 0.75rem 0;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
    }
    
    .data-list li:last-child {
      border-bottom: none;
      padding-bottom: 0;
    }
    
    .data-list-label {
      font-weight: 500;
      color: var(--text-secondary);
      font-size: 0.875rem;
    }
    
    .data-list-value {
      font-weight: 500;
      color: var(--text-primary);
    }
    
    /* Labels and Badges */
    .label {
      display: inline-block;
      padding: 0.35rem 0.75rem;
      font-size: 0.75rem;
      font-weight: 600;
      border-radius: 20px;
    }
    
    .label-primary {
      background: var(--primary-light);
      color: var(--primary);
    }
    
    .label-success {
      background: var(--success-light);
      color: var(--success);
    }
    
    .label-warning {
      background: var(--warning-light);
      color: var(--warning);
    }
    
    .label-info {
      background: var(--info-light);
      color: var(--info);
    }
    
    /* Select Styling */
    .select-checkbox-container {
      position: relative;
      margin-bottom: 1rem;
    }
    
    .select-checkbox-dropdown {
      position: absolute;
      top: 100%;
      left: 0;
      width: 100%;
      background: white;
      box-shadow: var(--shadow-md);
      border-radius: 8px;
      z-index: 10;
      max-height: 300px;
      overflow-y: auto;
      display: none;
      margin-top: 0.5rem;
    }
    
    .select-checkbox-dropdown.show {
      display: block;
    }
    
    .select-checkbox-item {
      padding: 0.75rem 1rem;
      cursor: pointer;
      display: flex;
      align-items: center;
      transition: var(--transition);
    }
    
    .select-checkbox-item:hover {
      background-color: var(--surface-hover);
    }
    
    .select-checkbox-item input {
      margin-right: 0.75rem;
    }
    
    .select-display {
      display: flex;
      min-height: 43px;
      align-items: center;
      padding: 0.5rem 1rem;
      background: white;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      cursor: pointer;
      position: relative;
    }
    
    .select-display::after {
      content: '\f0d7';
      font-family: 'Font Awesome 5 Free';
      font-weight: 900;
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      transition: var(--transition);
    }
    
    .select-display.active::after {
      transform: translateY(-50%) rotate(180deg);
    }
    
    .select-pills {
      display: flex;
      flex-wrap: wrap;
      gap: 0.35rem;
      margin: -0.25rem;
    }
    
    .select-pill {
      background: var(--primary-light);
      color: var(--primary);
      padding: 0.25rem 0.5rem;
      font-size: 0.75rem;
      border-radius: 4px;
      display: flex;
      align-items: center;
      cursor: default;
    }
    
    .select-pill-remove {
      margin-left: 0.5rem;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      background: rgba(67, 97, 238, 0.2);
    }
    
    .select-placeholder {
      color: var(--text-secondary);
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .animate-fade-in {
      animation: fadeIn 0.3s ease-out forwards;
    }
    
    /* Notification System */
    .notification {
      display: flex;
      align-items: center;
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 16px 20px;
      background: white;
      border-left: 4px solid var(--primary);
      border-radius: 4px;
      box-shadow: var(--shadow-md);
      z-index: 1000;
      transform: translateX(120%);
      transition: transform 0.3s ease;
      max-width: 350px;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      margin-right: 12px;
      font-size: 20px;
      color: var(--primary);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 3px;
    }
    
    .notification-message {
      color: var(--text-secondary);
      font-size: 0.875rem;
    }
    
    .notification-close {
      background: none;
      border: none;
      color: var(--text-secondary);
      margin-left: 10px;
      opacity: 0.5;
      transition: var(--transition);
      cursor: pointer;
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-left-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-left-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* File Formats Section */
    .format-options {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
    }
    
    .format-option {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 1.5rem;
      background: white;
      border-radius: 10px;
      border: 1px solid var(--border-color);
      cursor: pointer;
      transition: var(--transition);
      position: relative;
    }
    
    .format-option:hover {
      transform: translateY(-3px);
      box-shadow: var(--shadow-sm);
      border-color: var(--primary);
      background: var(--primary-light);
    }
    
    .format-option.selected {
      border-color: var(--primary);
      background: var(--primary-light);
    }
    
    .format-option.selected::after {
      content: '\f00c';
      font-family: 'Font Awesome 5 Free';
      font-weight: 900;
      position: absolute;
      top: 10px;
      right: 10px;
      color: var(--primary);
      background: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.75rem;
    }
    
    .format-icon {
      font-size: 2rem;
      margin-bottom: 0.75rem;
      color: var(--primary);
    }
    
    .format-title {
      font-weight: 600;
      font-size: 0.95rem;
    }
    
    .format-desc {
      font-size: 0.75rem;
      color: var(--text-secondary);
      text-align: center;
      margin-top: 0.5rem;
    }
    
    /* Status Indicators */
    .status-indicator {
      display: inline-block;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      margin-right: 6px;
    }
    
    .status-completed {
      background-color: var(--success);
    }
    
    .status-scheduled {
      background-color: var(--primary);
    }
    
    .status-cancelled {
      background-color: var(--text-secondary);
    }
    
    .date-range-selector {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .date-input-container {
      position: relative;
      flex: 1;
    }
    
    .date-input-container .form-control {
      padding-left: 2.5rem;
    }
    
    .date-input-icon {
      position: absolute;
      left: 1rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-secondary);
      pointer-events: none;
    }
    
    /* Progress Bar */
    .progress-container {
      margin-top: 1.5rem;
    }
    
    .progress {
      height: 0.5rem;
      background-color: var(--border-color);
      border-radius: 1rem;
      overflow: hidden;
      margin-bottom: 0.5rem;
    }
    
    .progress-bar {
      height: 100%;
      background: linear-gradient(to right, var(--primary), var(--info));
      border-radius: 1rem;
      transition: width 0.5s ease;
    }
    
    .progress-text {
      display: flex;
      justify-content: space-between;
      font-size: 0.75rem;
      color: var(--text-secondary);
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .format-options {
        flex-direction: column;
      }
      
      .date-range-selector {
        flex-direction: column;
      }
      
      .date-range-selector .date-input-container {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="app-container">
    <!-- Header Card -->
    <div class="content-card animate-fade-in">
      <div class="card-header">
        <h2 class="card-title">
          <div class="card-title-icon">
            <i class="fas fa-file-export"></i>
          </div>
          Export One-on-One Sessions
        </h2>
      </div>
      <div class="card-body">
        <p class="text-secondary mb-4">
          Export your one-on-one session data for reporting, analysis, or backup purposes.
          Select your preferences below to generate and download your export.
        </p>
        
        <!-- Export Configuration Form -->
        <form id="export-form">
          <!-- Team Member Selection -->
          <div class="mb-4">
            <label class="form-label d-flex justify-content-between">
              <span>Team Member(s)</span>
              <a href="#" class="small text-primary" id="select-all-members">Select All</a>
            </label>
            <div class="select-checkbox-container">
              <div class="select-display" id="team-members-display">
                <div class="select-placeholder">Select team members...</div>
              </div>
              <div class="select-checkbox-dropdown" id="team-members-dropdown">
                <!-- Team members will be populated here -->
                <div class="select-checkbox-item">
                  <div class="spinner-border spinner-border-sm text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                  <span class="ms-2">Loading team members...</span>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Date Range Selection -->
          <div class="mb-4">
            <label class="form-label">Date Range</label>
            <div class="date-range-selector">
              <div class="date-input-container">
                <i class="far fa-calendar date-input-icon"></i>
                <input type="text" class="form-control" id="date-from" placeholder="From date">
              </div>
              <div class="date-input-container">
                <i class="far fa-calendar date-input-icon"></i>
                <input type="text" class="form-control" id="date-to" placeholder="To date">
              </div>
            </div>
          </div>
          
          <!-- Quick Date Range Options -->
          <div class="mb-4">
            <label class="form-label">Quick Range</label>
            <div class="d-flex flex-wrap gap-2">
              <button type="button" class="btn btn-outline-primary btn-sm quick-range" data-days="30">Last 30 Days</button>
              <button type="button" class="btn btn-outline-primary btn-sm quick-range" data-days="90">Last 90 Days</button>
              <button type="button" class="btn btn-outline-primary btn-sm quick-range" data-days="180">Last 6 Months</button>
              <button type="button" class="btn btn-outline-primary btn-sm quick-range" data-days="365">Last Year</button>
              <button type="button" class="btn btn-outline-primary btn-sm quick-range" data-days="0">All Time</button>
            </div>
          </div>
          
          <!-- Status Filter -->
          <div class="mb-4">
            <label class="form-label d-flex justify-content-between">
              <span>Status</span>
              <a href="#" class="small text-primary" id="select-all-statuses">Select All</a>
            </label>
            <div class="select-checkbox-container">
              <div class="select-display" id="status-display">
                <div class="select-placeholder">Select status...</div>
              </div>
              <div class="select-checkbox-dropdown" id="status-dropdown">
                <div class="select-checkbox-item">
                  <input type="checkbox" id="status-scheduled" class="status-checkbox" value="scheduled">
                  <label for="status-scheduled">
                    <span class="status-indicator status-scheduled"></span> Scheduled
                  </label>
                </div>
                <div class="select-checkbox-item">
                  <input type="checkbox" id="status-completed" class="status-checkbox" value="completed">
                  <label for="status-completed">
                    <span class="status-indicator status-completed"></span> Completed
                  </label>
                </div>
                <div class="select-checkbox-item">
                  <input type="checkbox" id="status-cancelled" class="status-checkbox" value="cancelled">
                  <label for="status-cancelled">
                    <span class="status-indicator status-cancelled"></span> Cancelled
                  </label>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Export Format Selection -->
          <div class="mb-4">
            <label class="form-label">Export Format</label>
            <div class="format-options">
              <div class="format-option selected" data-format="xlsx">
                <div class="format-icon">
                  <i class="fas fa-file-excel"></i>
                </div>
                <div class="format-title">Excel (XLSX)</div>
                <div class="format-desc">Compatible with Microsoft Excel and Google Sheets</div>
              </div>
              <div class="format-option" data-format="csv">
                <div class="format-icon">
                  <i class="fas fa-file-csv"></i>
                </div>
                <div class="format-title">CSV</div>
                <div class="format-desc">Compatible with various spreadsheet applications</div>
              </div>
              <div class="format-option" data-format="pdf">
                <div class="format-icon">
                  <i class="fas fa-file-pdf"></i>
                </div>
                <div class="format-title">PDF</div>
                <div class="format-desc">Formatted document for easy viewing and printing</div>
              </div>
            </div>
          </div>
          
          <!-- Include Options -->
          <div class="mb-4">
            <label class="form-label">Include</label>
            <div class="row">
              <div class="col-md-4">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="include-preparation-notes" checked>
                  <label class="form-check-label" for="include-preparation-notes">
                    Preparation Notes
                  </label>
                </div>
              </div>
              <div class="col-md-4">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="include-action-items" checked>
                  <label class="form-check-label" for="include-action-items">
                    Action Items
                  </label>
                </div>
              </div>
              <div class="col-md-4">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="include-performance-data" checked>
                  <label class="form-check-label" for="include-performance-data">
                    Performance Data
                  </label>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Export Actions -->
          <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-outline-primary" id="preview-btn">
              <i class="fas fa-eye me-2"></i> Preview
            </button>
            <button type="submit" class="btn btn-primary" id="export-btn">
              <i class="fas fa-file-export me-2"></i> Export
            </button>
          </div>
        </form>
      </div>
    </div>
    
    <!-- Preview Section - Initially Hidden -->
    <div class="content-card" id="preview-section" style="display: none;">
      <div class="card-header">
        <h2 class="card-title">
          <div class="card-title-icon" style="background-color: var(--success);">
            <i class="fas fa-table"></i>
          </div>
          Data Preview
        </h2>
        <span class="badge bg-secondary" id="preview-count">0 sessions</span>
      </div>
      <div class="card-body p-0">
        <div class="table-responsive">
          <table class="table modern-table mb-0">
            <thead>
              <tr>
                <th>Team Member</th>
                <th>Date</th>
                <th>Status</th>
                <th>Next Session</th>
                <th>Action Items</th>
              </tr>
            </thead>
            <tbody id="preview-table-body">
              <!-- Preview data will be loaded here -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
    
    <!-- Export Progress - Initially Hidden -->
    <div class="content-card" id="export-progress-section" style="display: none;">
      <div class="card-header">
        <h2 class="card-title">
          <div class="card-title-icon" style="background-color: var(--info);">
            <i class="fas fa-sync-alt fa-spin"></i>
          </div>
          Export Progress
        </h2>
      </div>
      <div class="card-body">
        <p class="text-secondary mb-3" id="export-status-message">Preparing export...</p>
        <div class="progress-container">
          <div class="progress">
            <div class="progress-bar" id="export-progress-bar" style="width: 0%"></div>
          </div>
          <div class="progress-text">
            <span id="progress-percentage">0%</span>
            <span id="progress-items">0/0 sessions</span>
          </div>
        </div>
        <div class="d-flex justify-content-center mt-4">
          <button type="button" class="btn btn-outline-danger" id="cancel-export-btn">
            <i class="fas fa-times me-2"></i> Cancel
          </button>
        </div>
      </div>
    </div>
    
    <!-- Export Success - Initially Hidden -->
    <div class="content-card" id="export-success-section" style="display: none;">
      <div class="card-header">
        <h2 class="card-title">
          <div class="card-title-icon" style="background-color: var(--success);">
            <i class="fas fa-check-circle"></i>
          </div>
          Export Complete
        </h2>
      </div>
      <div class="card-body">
        <div class="text-center py-4">
          <div class="display-1 text-success mb-4">
            <i class="fas fa-file-download"></i>
          </div>
          <h3 class="mb-3">Your export is ready!</h3>
          <p class="text-secondary mb-4" id="export-success-message">
            You've successfully exported 0 one-on-one sessions.
          </p>
          <div class="d-flex justify-content-center gap-3">
            <button class="btn btn-primary" id="download-export-btn">
              <i class="fas fa-download me-2"></i> Download
            </button>
            <button class="btn btn-outline-primary" id="new-export-btn">
              <i class="fas fa-plus me-2"></i> New Export
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let allTeamMembers = [];
    let selectedTeamMembers = [];
    let selectedStatuses = [];
    let selectedFormat = 'xlsx';
    let dateFromPicker = null;
    let dateToPicker = null;
    let previewData = null;
    let exportFileUrl = null;
    
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize date pickers
      initializeDatePickers();
      
      // Load team members
      loadTeamMembers();
      
      // Setup event listeners
      setupEventListeners();
    });
    
    function initializeDatePickers() {
      // Initialize from date picker
      dateFromPicker = flatpickr("#date-from", {
        dateFormat: "Y-m-d",
        allowInput: true,
        onClose: function() {
          validateDateRange();
        }
      });
      
      // Initialize to date picker
      dateToPicker = flatpickr("#date-to", {
        dateFormat: "Y-m-d",
        allowInput: true,
        onClose: function() {
          validateDateRange();
        }
      });
    }
    
    function validateDateRange() {
      if (dateFromPicker.selectedDates[0] && dateToPicker.selectedDates[0]) {
        if (dateFromPicker.selectedDates[0] > dateToPicker.selectedDates[0]) {
          showNotification('Error', 'Start date cannot be after end date', 'error');
          dateFromPicker.clear();
          return false;
        }
      }
      return true;
    }
    
    function setupEventListeners() {
      // Form submission
      document.getElementById('export-form').addEventListener('submit', function(e) {
        e.preventDefault();
        startExport();
      });
      
      // Team members dropdown toggle
      document.getElementById('team-members-display').addEventListener('click', function() {
        toggleDropdown('team-members-dropdown', 'team-members-display');
      });
      
      // Status dropdown toggle
      document.getElementById('status-display').addEventListener('click', function() {
        toggleDropdown('status-dropdown', 'status-display');
      });
      
      // Select all team members
      document.getElementById('select-all-members').addEventListener('click', function(e) {
        e.preventDefault();
        selectAllTeamMembers();
      });
      
      // Select all statuses
      document.getElementById('select-all-statuses').addEventListener('click', function(e) {
        e.preventDefault();
        selectAllStatuses();
      });
      
      // Format option selection
      document.querySelectorAll('.format-option').forEach(option => {
        option.addEventListener('click', function() {
          selectFormat(this.getAttribute('data-format'));
        });
      });
      
      // Quick date range buttons
      document.querySelectorAll('.quick-range').forEach(button => {
        button.addEventListener('click', function() {
          setQuickRange(parseInt(this.getAttribute('data-days')));
        });
      });
      
      // Preview button
      document.getElementById('preview-btn').addEventListener('click', previewExport);
      
      // Cancel export button
      document.getElementById('cancel-export-btn').addEventListener('click', cancelExport);
      
      // New export button
      document.getElementById('new-export-btn').addEventListener('click', resetExportForm);
      
      // Download export button
      document.getElementById('download-export-btn').addEventListener('click', downloadExport);
      
      // Status checkboxes
      document.querySelectorAll('.status-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', updateStatusSelection);
      });
      
      // Close dropdowns when clicking outside
      document.addEventListener('click', function(e) {
        if (!e.target.closest('.select-checkbox-container')) {
          document.querySelectorAll('.select-checkbox-dropdown').forEach(dropdown => {
            dropdown.classList.remove('show');
          });
          document.querySelectorAll('.select-display').forEach(display => {
            display.classList.remove('active');
          });
        }
      });
    }
    
    function toggleDropdown(dropdownId, displayId) {
      const dropdown = document.getElementById(dropdownId);
      const display = document.getElementById(displayId);
      
      // Close any other open dropdowns
      document.querySelectorAll('.select-checkbox-dropdown').forEach(d => {
        if (d.id !== dropdownId) d.classList.remove('show');
      });
      document.querySelectorAll('.select-display').forEach(d => {
        if (d.id !== displayId) d.classList.remove('active');
      });
      
      // Toggle this dropdown
      dropdown.classList.toggle('show');
      display.classList.toggle('active');
    }
    
    function loadTeamMembers() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(populateTeamMembers)
        .withFailureHandler(handleError)
        .getTeamMembers();
    }
    
    function populateTeamMembers(teamMembers) {
      hideLoading();
      
      allTeamMembers = teamMembers.filter(member => member.Status === 'Active');
      const dropdownContainer = document.getElementById('team-members-dropdown');
      
      // Clear container
      dropdownContainer.innerHTML = '';
      
      if (allTeamMembers.length === 0) {
        dropdownContainer.innerHTML = `
          <div class="select-checkbox-item">
            <span class="text-muted">No team members found</span>
          </div>
        `;
        return;
      }
      
      // Add team members to dropdown
      allTeamMembers.forEach(member => {
        const item = document.createElement('div');
        item.className = 'select-checkbox-item';
        
        const checkboxId = `team-member-${member.Email.replace(/[@.]/g, '-')}`;
        
        item.innerHTML = `
          <input type="checkbox" id="${checkboxId}" class="team-member-checkbox" value="${member.Email}">
          <label for="${checkboxId}">${member.Name || member.Email}</label>
        `;
        
        dropdownContainer.appendChild(item);
      });
      
      // Add event listeners to checkboxes
      document.querySelectorAll('.team-member-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', updateTeamMemberSelection);
      });
    }
    
    function updateTeamMemberSelection() {
      selectedTeamMembers = Array.from(document.querySelectorAll('.team-member-checkbox:checked')).map(cb => cb.value);
      
      const displayElement = document.getElementById('team-members-display');
      
      if (selectedTeamMembers.length === 0) {
        displayElement.innerHTML = '<div class="select-placeholder">Select team members...</div>';
      } else {
        // Create pills for selected team members
        const pillsContainer = document.createElement('div');
        pillsContainer.className = 'select-pills';
        
        selectedTeamMembers.forEach(email => {
          const member = allTeamMembers.find(m => m.Email === email);
          const pill = document.createElement('div');
          pill.className = 'select-pill';
          pill.innerHTML = `
            ${member ? member.Name || email : email}
            <span class="select-pill-remove" data-email="${email}">×</span>
          `;
          pillsContainer.appendChild(pill);
        });
        
        displayElement.innerHTML = '';
        displayElement.appendChild(pillsContainer);
        
        // Add event listeners to remove buttons
        document.querySelectorAll('.select-pill-remove').forEach(removeBtn => {
          removeBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            const email = this.getAttribute('data-email');
            const checkbox = document.querySelector(`.team-member-checkbox[value="${email}"]`);
            if (checkbox) {
              checkbox.checked = false;
              updateTeamMemberSelection();
            }
          });
        });
      }
    }
    
    function selectAllTeamMembers() {
      const checkboxes = document.querySelectorAll('.team-member-checkbox');
      const allSelected = checkboxes.length === document.querySelectorAll('.team-member-checkbox:checked').length;
      
      checkboxes.forEach(cb => {
        cb.checked = !allSelected;
      });
      
      updateTeamMemberSelection();
    }
    
    function updateStatusSelection() {
      selectedStatuses = Array.from(document.querySelectorAll('.status-checkbox:checked')).map(cb => cb.value);
      
      const displayElement = document.getElementById('status-display');
      
      if (selectedStatuses.length === 0) {
        displayElement.innerHTML = '<div class="select-placeholder">Select status...</div>';
      } else {
        // Create pills for selected statuses
        const pillsContainer = document.createElement('div');
        pillsContainer.className = 'select-pills';
        
        const statusLabels = {
          'scheduled': 'Scheduled',
          'completed': 'Completed',
          'cancelled': 'Cancelled'
        };
        
        const statusClasses = {
          'scheduled': 'status-scheduled',
          'completed': 'status-completed',
          'cancelled': 'status-cancelled'
        };
        
        selectedStatuses.forEach(status => {
          const pill = document.createElement('div');
          pill.className = 'select-pill';
          pill.innerHTML = `
            <span class="status-indicator ${statusClasses[status]}"></span>
            ${statusLabels[status]}
            <span class="select-pill-remove" data-status="${status}">×</span>
          `;
          pillsContainer.appendChild(pill);
        });
        
        displayElement.innerHTML = '';
        displayElement.appendChild(pillsContainer);
        
        // Add event listeners to remove buttons
        document.querySelectorAll('.select-pill-remove').forEach(removeBtn => {
          removeBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            const status = this.getAttribute('data-status');
            const checkbox = document.querySelector(`.status-checkbox[value="${status}"]`);
            if (checkbox) {
              checkbox.checked = false;
              updateStatusSelection();
            }
          });
        });
      }
    }
    
    function selectAllStatuses() {
      const checkboxes = document.querySelectorAll('.status-checkbox');
      const allSelected = checkboxes.length === document.querySelectorAll('.status-checkbox:checked').length;
      
      checkboxes.forEach(cb => {
        cb.checked = !allSelected;
      });
      
      updateStatusSelection();
    }
    
    function selectFormat(format) {
      selectedFormat = format;
      
      document.querySelectorAll('.format-option').forEach(option => {
        option.classList.remove('selected');
      });
      
      document.querySelector(`.format-option[data-format="${format}"]`).classList.add('selected');
    }
    
    function setQuickRange(days) {
      const today = new Date();
      const toDate = new Date(today);
      
      if (days === 0) {
        // All time - clear the dates
        dateFromPicker.clear();
        dateToPicker.setDate(toDate);
      } else {
        const fromDate = new Date(today);
        fromDate.setDate(today.getDate() - days);
        
        dateFromPicker.setDate(fromDate);
        dateToPicker.setDate(toDate);
      }
      
      // Update active state on buttons
      document.querySelectorAll('.quick-range').forEach(btn => {
        btn.classList.remove('active');
      });
      document.querySelector(`.quick-range[data-days="${days}"]`).classList.add('active');
    }
    
    function previewExport() {
      if (!validateExportForm()) return;
      
      showLoading();
      
      const exportConfig = getExportConfig();
      
      google.script.run
        .withSuccessHandler(handlePreviewData)
        .withFailureHandler(handleError)
        .previewOneOnOneExport(exportConfig);
    }
    
    function handlePreviewData(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to preview data', 'error');
        return;
      }
      
      previewData = result.data || [];
      
      // Update preview count
      document.getElementById('preview-count').textContent = `${previewData.length} session${previewData.length !== 1 ? 's' : ''}`;
      
      // Populate preview table
      const tableBody = document.getElementById('preview-table-body');
      tableBody.innerHTML = '';
      
      if (previewData.length === 0) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="5" class="text-center py-4">
              <div class="text-muted">
                <i class="fas fa-search me-2"></i>
                No sessions found matching your criteria
              </div>
            </td>
          </tr>
        `;
      } else {
        previewData.forEach(session => {
          const row = document.createElement('tr');
          
          // Find team member name
          const teamMember = allTeamMembers.find(m => m.Email === session.teamMemberEmail);
          const teamMemberName = teamMember ? teamMember.Name : session.teamMemberEmail;
          
          // Format dates
          const sessionDate = formatDate(session.date);
          const nextSessionDate = session.nextCheckInDate ? formatDate(session.nextCheckInDate) : '-';
          
          // Count action items
          const actionItemsCount = session.actionItems ? session.actionItems.length : 0;
          
          // Status class
          let statusClass = 'badge-primary';
          if (session.status === 'completed') statusClass = 'badge-success';
          if (session.status === 'cancelled') statusClass = 'text-secondary';
          
          row.innerHTML = `
            <td>${teamMemberName}</td>
            <td>${sessionDate}</td>
            <td><span class="label ${statusClass}">${session.status}</span></td>
            <td>${nextSessionDate}</td>
            <td>${actionItemsCount} item${actionItemsCount !== 1 ? 's' : ''}</td>
          `;
          
          tableBody.appendChild(row);
        });
      }
      
      // Show preview section
      document.getElementById('preview-section').style.display = 'block';
      
      // Scroll to preview section
      document.getElementById('preview-section').scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
    
    function startExport() {
      if (!validateExportForm()) return;
      
      if (!previewData || previewData.length === 0) {
        // Run preview first to get data
        previewExport();
        return;
      }
      
      // Hide other sections
      document.getElementById('preview-section').style.display = 'none';
      document.getElementById('export-success-section').style.display = 'none';
      
      // Show progress section
      document.getElementById('export-progress-section').style.display = 'block';
      document.getElementById('export-status-message').textContent = `Preparing ${selectedFormat.toUpperCase()} export...`;
      
      // Reset progress bar
      updateProgress(0, previewData.length);
      
      // Scroll to progress section
      document.getElementById('export-progress-section').scrollIntoView({ behavior: 'smooth', block: 'start' });
      
      // Start export process
      const exportConfig = getExportConfig();
      
      google.script.run
        .withSuccessHandler(handleExportSuccess)
        .withFailureHandler(handleError)
        .exportOneOnOneSessions(exportConfig);
      
      // Simulate progress updates (in a real app, this would be server-driven)
      simulateProgressUpdates();
    }
    
    function simulateProgressUpdates() {
      const totalItems = previewData.length;
      let currentItem = 0;
      const incrementStep = Math.max(1, Math.floor(totalItems / 10)); // Update in approximately 10 steps
      
      const updateInterval = setInterval(() => {
        currentItem += incrementStep;
        
        if (currentItem >= totalItems) {
          clearInterval(updateInterval);
          return;
        }
        
        updateProgress(currentItem, totalItems);
      }, 800);
    }
    
    function updateProgress(current, total) {
      const percentage = Math.min(95, Math.round((current / total) * 100)); // Max 95% until complete
      
      document.getElementById('export-progress-bar').style.width = `${percentage}%`;
      document.getElementById('progress-percentage').textContent = `${percentage}%`;
      document.getElementById('progress-items').textContent = `${current}/${total} sessions`;
    }
    
    function handleExportSuccess(result) {
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Export failed', 'error');
        document.getElementById('export-progress-section').style.display = 'none';
        return;
      }
      
      // Update progress to 100%
      updateProgress(previewData.length, previewData.length);
      document.getElementById('export-progress-bar').style.width = '100%';
      document.getElementById('progress-percentage').textContent = '100%';
      
      // Store file URL for download
      exportFileUrl = result.fileUrl;
      
      // Hide progress section after a short delay
      setTimeout(() => {
        document.getElementById('export-progress-section').style.display = 'none';
        
        // Show success section
        document.getElementById('export-success-section').style.display = 'block';
        document.getElementById('export-success-message').textContent = 
          `You've successfully exported ${previewData.length} one-on-one session${previewData.length !== 1 ? 's' : ''} to ${selectedFormat.toUpperCase()} format.`;
        
        // Scroll to success section
        document.getElementById('export-success-section').scrollIntoView({ behavior: 'smooth', block: 'start' });
      }, 1000);
      
      showNotification('Success', 'Export completed successfully!', 'success');
    }
    
    function cancelExport() {
      // Hide progress section
      document.getElementById('export-progress-section').style.display = 'none';
      
      showNotification('Info', 'Export cancelled', 'info');
    }
    
    function resetExportForm() {
      // Reset form fields
      document.getElementById('export-form').reset();
      
      // Clear team member selection
      selectedTeamMembers = [];
      updateTeamMemberSelection();
      
      // Clear status selection
      selectedStatuses = [];
      updateStatusSelection();
      
      // Reset date pickers
      dateFromPicker.clear();
      dateToPicker.clear();
      
      // Reset format selection
      selectFormat('xlsx');
      
      // Hide result sections
      document.getElementById('preview-section').style.display = 'none';
      document.getElementById('export-progress-section').style.display = 'none';
      document.getElementById('export-success-section').style.display = 'none';
      
      // Scroll to top
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
    
    function downloadExport() {
      if (!exportFileUrl) {
        showNotification('Error', 'Export file not available', 'error');
        return;
      }
      
      // Open file URL in a new tab
      window.open(exportFileUrl, '_blank');
    }
    
    function getExportConfig() {
      return {
        teamMembers: selectedTeamMembers,
        statuses: selectedStatuses,
        fromDate: dateFromPicker.selectedDates[0] || null,
        toDate: dateToPicker.selectedDates[0] || null,
        format: selectedFormat,
        includePreparationNotes: document.getElementById('include-preparation-notes').checked,
        includeActionItems: document.getElementById('include-action-items').checked,
        includePerformanceData: document.getElementById('include-performance-data').checked
      };
    }
    
    function validateExportForm() {
      // Check if at least one team member is selected
      if (selectedTeamMembers.length === 0) {
        showNotification('Error', 'Please select at least one team member', 'error');
        return false;
      }
      
      // Check if at least one status is selected
      if (selectedStatuses.length === 0) {
        showNotification('Error', 'Please select at least one status', 'error');
        return false;
      }
      
      // Validate date range if both dates are provided
      if (!validateDateRange()) {
        return false;
      }
      
      return true;
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      document.getElementById('loading-overlay').style.opacity = '0';
      setTimeout(() => {
        document.getElementById('loading-overlay').style.display = 'none';
        document.getElementById('loading-overlay').style.opacity = '1';
      }, 300);
    }
    
    function formatDate(dateStr) {
      if (!dateStr) return '';
      
      const date = new Date(dateStr);
      return date.toLocaleDateString(undefined, { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      if (type === 'warning') iconClass = 'exclamation-triangle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', () => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto dismiss after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
      padding: 1.5rem;
    }
    
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      padding: 1.25rem;
      position: relative;
    }
    
    .card-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--info));
    }
    
    .card-title {
      margin: 0;
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      background: var(--primary);
      color: white;
      border-radius: 8px;
      margin-right: 0.75rem;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    .form-label {
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: var(--text-primary);
    }
    
    .form-control,
    .form-select {
      border-radius: 8px;
      padding: 0.65rem 1rem;
      border: 1px solid var(--border-color);
      background-color: rgba(255, 255, 255, 0.8);
      transition: var(--transition);
    }
    
    .form-control:focus,
    .form-select:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.25rem var(--primary-light);
    }
    
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.5rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      border-color: var(--secondary);
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      color: white;
      transform: translateY(-2px);
    }
    
    .form-section {
      background: rgba(255, 255, 255, 0.4);
      border-radius: var(--border-radius);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      border: 1px solid var(--border-color);
    }
    
    .form-section-title {
      font-weight: 600;
      margin-bottom: 1rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid var(--border-color);
      color: var(--primary);
      display: flex;
      align-items: center;
    }
    
    .form-section-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 24px;
      height: 24px;
      background: var(--primary);
      color: white;
      border-radius: 6px;
      margin-right: 0.75rem;
      font-size: 0.8rem;
    }
    
    .invalid-feedback {
      font-size: 0.8rem;
      margin-top: 0.25rem;
    }
    
    .spinner-border-sm {
      width: 1rem;
      height: 1rem;
      border-width: 0.15em;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(5px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spinner 1s linear infinite;
    }
    
    @keyframes spinner {
      to {
        transform: rotate(360deg);
      }
    }
    
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      background: white;
      border-left: 4px solid var(--primary);
      border-radius: 4px;
      box-shadow: var(--shadow-md);
      z-index: 9998;
      transform: translateX(120%);
      transition: all 0.3s;
      max-width: 350px;
      display: flex;
      align-items: center;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      font-size: 1.25rem;
      margin-right: 15px;
      color: var(--primary);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin: 0 0 3px;
    }
    
    .notification-message {
      color: var(--text-secondary);
      margin: 0;
      font-size: 0.9rem;
    }
    
    .notification-close {
      background: transparent;
      border: none;
      color: var(--text-secondary);
      font-size: 1.25rem;
      line-height: 1;
      padding: 0;
      margin-left: 15px;
      cursor: pointer;
      opacity: 0.5;
      transition: var(--transition);
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-left-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-left-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }
    
    .form-check-input {
      width: 1.2em;
      height: 1.2em;
      margin-top: 0.15em;
      background-color: #fff;
      border: 1px solid rgba(0, 0, 0, 0.25);
    }
    
    .form-check-input:checked {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    @media (max-width: 768px) {
      body {
        padding: 1rem;
      }
      
      .card-body {
        padding: 1rem;
      }
      
      .form-section {
        padding: 1rem;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay" style="display: none;">
    <div class="spinner"></div>
  </div>
  
  <div class="container">
    <div class="content-card fade-in">
      <div class="card-header">
        <h5 class="card-title">
          <div class="card-title-icon">
            <i class="fas fa-user-plus"></i>
          </div>
          Add Team Member
        </h5>
      </div>
      <div class="card-body">
        <form id="add-team-member-form">
          <!-- Basic Information -->
          <div class="form-section">
            <h6 class="form-section-title">
              <span class="form-section-icon"><i class="fas fa-user"></i></span>
              Basic Information
            </h6>
            
            <div class="row g-3">
              <div class="col-md-6">
                <label for="firstName" class="form-label">First Name*</label>
                <input type="text" class="form-control" id="firstName" name="firstName" required>
                <div class="invalid-feedback">Please enter a first name.</div>
              </div>
              
              <div class="col-md-6">
                <label for="lastName" class="form-label">Last Name*</label>
                <input type="text" class="form-control" id="lastName" name="lastName" required>
                <div class="invalid-feedback">Please enter a last name.</div>
              </div>
              
              <div class="col-md-6">
                <label for="email" class="form-label">Email Address*</label>
                <input type="email" class="form-control" id="email" name="email" required>
                <div class="invalid-feedback">Please enter a valid email address.</div>
              </div>
              
              <div class="col-md-6">
                <label for="position" class="form-label">Position*</label>
                <input type="text" class="form-control" id="position" name="position" required>
                <div class="invalid-feedback">Please enter a position.</div>
              </div>
            </div>
          </div>
          
          <!-- Team Information -->
          <div class="form-section">
            <h6 class="form-section-title">
              <span class="form-section-icon"><i class="fas fa-users"></i></span>
              Team Information
            </h6>
            
            <div class="row g-3">
              <div class="col-md-6">
                <label for="department" class="form-label">Department*</label>
                <select class="form-select" id="department" name="department" required>
                  <option value="" selected disabled>Select Department</option>
                  <!-- Departments will be loaded dynamically -->
                </select>
                <div class="invalid-feedback">Please select a department.</div>
              </div>
              
              <div class="col-md-6">
                <label for="manager" class="form-label">Manager</label>
                <select class="form-select" id="manager" name="manager">
                  <option value="" selected>No Manager / Direct Report</option>
                  <!-- Managers will be loaded dynamically -->
                </select>
              </div>
              
              <div class="col-md-6">
                <label for="startDate" class="form-label">Start Date*</label>
                <input type="date" class="form-control" id="startDate" name="startDate" required>
                <div class="invalid-feedback">Please select a start date.</div>
              </div>
              
              <div class="col-md-6">
                <label for="employmentType" class="form-label">Employment Type*</label>
                <select class="form-select" id="employmentType" name="employmentType" required>
                  <option value="" selected disabled>Select Employment Type</option>
                  <option value="Full-Time">Full-Time</option>
                  <option value="Part-Time">Part-Time</option>
                  <option value="Contract">Contract</option>
                  <option value="Temporary">Temporary</option>
                  <option value="Intern">Intern</option>
                </select>
                <div class="invalid-feedback">Please select an employment type.</div>
              </div>
            </div>
          </div>
          
          <!-- Additional Settings -->
          <div class="form-section">
            <h6 class="form-section-title">
              <span class="form-section-icon"><i class="fas fa-cog"></i></span>
              Additional Settings
            </h6>
            
            <div class="row g-3">
              <div class="col-12">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="sendWelcomeEmail" name="sendWelcomeEmail" checked>
                  <label class="form-check-label" for="sendWelcomeEmail">
                    Send welcome email with system access instructions
                  </label>
                </div>
              </div>
              
              <div class="col-12">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="scheduleOnboarding" name="scheduleOnboarding" checked>
                  <label class="form-check-label" for="scheduleOnboarding">
                    Schedule initial onboarding one-on-one session
                  </label>
                </div>
              </div>
              
              <div class="col-12">
                <label for="notes" class="form-label">Additional Notes</label>
                <textarea class="form-control" id="notes" name="notes" rows="3" placeholder="Enter any additional notes about this team member..."></textarea>
              </div>
            </div>
          </div>
          
          <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-outline-primary" id="cancel-btn">Cancel</button>
            <button type="submit" class="btn btn-primary" id="submit-btn">
              <span id="submit-spinner" class="spinner-border spinner-border-sm me-2" role="status" style="display: none;"></span>
              Add Team Member
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <script>
    // Global variables
    let departments = [];
    let managers = [];
    
    // Initialize form when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      initializeForm();
      setupEventListeners();
    });
    
    function initializeForm() {
      showLoading();
      
      // Load departments
      google.script.run
        .withSuccessHandler(handleDepartmentsLoaded)
        .withFailureHandler(handleError)
        .getDepartments();
        
      // Load managers (active team members)
      google.script.run
        .withSuccessHandler(handleManagersLoaded)
        .withFailureHandler(handleError)
        .getPotentialManagers();
        
      // Set default start date to today
      document.getElementById('startDate').valueAsDate = new Date();
    }
    
    function setupEventListeners() {
      // Form submission
      document.getElementById('add-team-member-form').addEventListener('submit', function(e) {
        e.preventDefault();
        if (validateForm()) {
          submitForm();
        }
      });
      
      // Cancel button
      document.getElementById('cancel-btn').addEventListener('click', function() {
        // Navigate back to team view
        google.script.run.showTeamView();
        google.script.host.close();
      });
    }
    
    function handleDepartmentsLoaded(result) {
      departments = result.data || [];
      
      const departmentSelect = document.getElementById('department');
      departmentSelect.innerHTML = '<option value="" selected disabled>Select Department</option>';
      
      departments.forEach(dept => {
        const option = document.createElement('option');
        option.value = dept.id;
        option.textContent = dept.name;
        departmentSelect.appendChild(option);
      });
      
      checkLoadingComplete();
    }
    
    function handleManagersLoaded(result) {
      managers = result.data || [];
      
      const managerSelect = document.getElementById('manager');
      managerSelect.innerHTML = '<option value="">No Manager / Direct Report</option>';
      
      managers.forEach(manager => {
        const option = document.createElement('option');
        option.value = manager.id;
        option.textContent = manager.name;
        managerSelect.appendChild(option);
      });
      
      checkLoadingComplete();
    }
    
    function checkLoadingComplete() {
      if (departments.length >= 0 && managers.length >= 0) {
        // Both departments and managers have loaded
        hideLoading();
      }
    }
    
    function validateForm() {
      const form = document.getElementById('add-team-member-form');
      
      let isValid = true;
      
      // Check required fields
      const requiredFields = form.querySelectorAll('[required]');
      requiredFields.forEach(field => {
        if (!field.value.trim()) {
          field.classList.add('is-invalid');
          isValid = false;
        } else {
          field.classList.remove('is-invalid');
        }
      });
      
      // Validate email format
      const emailField = document.getElementById('email');
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (emailField.value && !emailRegex.test(emailField.value)) {
        emailField.classList.add('is-invalid');
        isValid = false;
      }
      
      return isValid;
    }
    
    function submitForm() {
      const form = document.getElementById('add-team-member-form');
      const submitBtn = document.getElementById('submit-btn');
      const submitSpinner = document.getElementById('submit-spinner');
      
      // Disable submit button and show spinner
      submitBtn.disabled = true;
      submitSpinner.style.display = 'inline-block';
      
      // Create team member data object
      const teamMemberData = {
        firstName: document.getElementById('firstName').value.trim(),
        lastName: document.getElementById('lastName').value.trim(),
        email: document.getElementById('email').value.trim(),
        position: document.getElementById('position').value.trim(),
        department: document.getElementById('department').value,
        manager: document.getElementById('manager').value || null,
        startDate: document.getElementById('startDate').value,
        employmentType: document.getElementById('employmentType').value,
        sendWelcomeEmail: document.getElementById('sendWelcomeEmail').checked,
        scheduleOnboarding: document.getElementById('scheduleOnboarding').checked,
        notes: document.getElementById('notes').value.trim(),
        status: 'Active' // Default status for new team members
      };
      
      // Submit to Google Apps Script
      google.script.run
        .withSuccessHandler(function(result) {
          submitBtn.disabled = false;
          submitSpinner.style.display = 'none';
          
          if (result.success) {
            showNotification('Success', 'Team member added successfully', 'success');
            
            // Reset form
            form.reset();
            
            // Redirect after a short delay
            setTimeout(function() {
              google.script.run.showTeamView();
              google.script.host.close();
            }, 2000);
          } else {
            showNotification('Error', result.message || 'Failed to add team member', 'error');
          }
        })
        .withFailureHandler(function(error) {
          submitBtn.disabled = false;
          submitSpinner.style.display = 'none';
          showNotification('Error', error.message || 'An error occurred', 'error');
        })
        .addTeamMember(teamMemberData);
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      document.getElementById('loading-overlay').style.opacity = '0';
      setTimeout(() => {
        document.getElementById('loading-overlay').style.display = 'none';
        document.getElementById('loading-overlay').style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button listener
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
      padding: 1.5rem;
    }
    
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      padding: 1.25rem;
      position: relative;
    }
    
    .card-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--info));
    }
    
    .card-title {
      margin: 0;
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      background: var(--primary);
      color: white;
      border-radius: 8px;
      margin-right: 0.75rem;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    .form-label {
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: var(--text-primary);
    }
    
    .form-control,
    .form-select {
      border-radius: 8px;
      padding: 0.65rem 1rem;
      border: 1px solid var(--border-color);
      background-color: rgba(255, 255, 255, 0.8);
      transition: var(--transition);
    }
    
    .form-control:focus,
    .form-select:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.25rem var(--primary-light);
    }
    
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.5rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      border-color: var(--secondary);
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      color: white;
      transform: translateY(-2px);
    }
    
    .btn-warning {
      background-color: var(--warning);
      border-color: var(--warning);
      color: white;
    }
    
    .btn-warning:hover {
      background-color: #d31b6d;
      border-color: #d31b6d;
      color: white;
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .btn-danger {
      background-color: var(--danger);
      border-color: var(--danger);
    }
    
    .btn-danger:hover {
      background-color: #d62b2e;
      border-color: #d62b2e;
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .team-member-info {
      background-color: rgba(248, 249, 250, 0.5);
      border-radius: var(--border-radius);
      padding: 1.25rem;
      margin-bottom: 1.5rem;
    }
    
    .team-member-header {
      display: flex;
      align-items: center;
      margin-bottom: 1rem;
    }
    
    .team-member-avatar {
      width: 64px;
      height: 64px;
      border-radius: 50%;
      background: linear-gradient(to right bottom, var(--primary), var(--info));
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      font-weight: 600;
      margin-right: 1rem;
      flex-shrink: 0;
    }
    
    .team-member-name {
      font-size: 1.25rem;
      font-weight: 600;
      margin: 0 0 0.25rem;
    }
    
    .team-member-position {
      color: var(--text-secondary);
      font-size: 0.9rem;
      margin: 0;
    }
    
    .team-member-details {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1rem;
      margin-top: 1rem;
    }
    
    .detail-item {
      margin-bottom: 0.5rem;
    }
    
    .detail-label {
      font-size: 0.8rem;
      font-weight: 500;
      color: var(--text-secondary);
      margin-bottom: 0.25rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .detail-value {
      font-weight: 500;
    }
    
    .status-badge {
      display: inline-block;
      padding: 0.35rem 0.65rem;
      font-size: 0.75rem;
      font-weight: 600;
      border-radius: 30px;
    }
    
    .status-active {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .status-leave {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .status-inactive {
      background-color: var(--text-secondary);
      color: white;
      opacity: 0.7;
    }
    
    .status-option {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background-color: #fff;
      border-radius: var(--border-radius);
      padding: 1.25rem;
      margin-bottom: 1rem;
      border: 1px solid var(--border-color);
      transition: var(--transition);
      cursor: pointer;
    }
    
    .status-option:hover {
      border-color: var(--primary);
      transform: translateY(-2px);
      box-shadow: var(--shadow-sm);
    }
    
    .status-option.selected {
      border-color: var(--primary);
      background-color: var(--primary-light);
    }
    
    .status-option-icon {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 1rem;
      flex-shrink: 0;
    }
    
    .status-icon-active {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .status-icon-leave {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .status-icon-inactive {
      background-color: rgba(108, 117, 125, 0.1);
      color: var(--text-secondary);
    }
    
    .status-option-content {
      flex-grow: 1;
    }
    
    .status-option-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .status-option-desc {
      font-size: 0.85rem;
      color: var(--text-secondary);
      margin: 0;
    }
    
    .status-option-radio {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      border: 2px solid var(--border-color);
      position: relative;
      flex-shrink: 0;
      transition: var(--transition);
    }
    
    .status-option.selected .status-option-radio {
      border-color: var(--primary);
    }
    
    .status-option.selected .status-option-radio::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background-color: var(--primary);
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(5px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spinner 1s linear infinite;
    }
    
    @keyframes spinner {
      to {
        transform: rotate(360deg);
      }
    }
    
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      background: white;
      border-left: 4px solid var(--primary);
      border-radius: 4px;
      box-shadow: var(--shadow-md);
      z-index: 9998;
      transform: translateX(120%);
      transition: all 0.3s;
      max-width: 350px;
      display: flex;
      align-items: center;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      font-size: 1.25rem;
      margin-right: 15px;
      color: var(--primary);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin: 0 0 3px;
    }
    
    .notification-message {
      color: var(--text-secondary);
      margin: 0;
      font-size: 0.9rem;
    }
    
    .notification-close {
      background: transparent;
      border: none;
      color: var(--text-secondary);
      font-size: 1.25rem;
      line-height: 1;
      padding: 0;
      margin-left: 15px;
      cursor: pointer;
      opacity: 0.5;
      transition: var(--transition);
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-left-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-left-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }
    
    .spinner-border-sm {
      width: 1rem;
      height: 1rem;
      border-width: 0.15em;
    }
    
    @media (max-width: 768px) {
      body {
        padding: 1rem;
      }
      
      .card-body {
        padding: 1rem;
      }
      
      .team-member-details {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="container">
    <div class="content-card fade-in">
      <div class="card-header">
        <h5 class="card-title">
          <div class="card-title-icon">
            <i class="fas fa-user-edit"></i>
          </div>
          Update Team Member Status
        </h5>
      </div>
      <div class="card-body">
        <!-- Team Member Information -->
        <div class="team-member-info">
          <div class="team-member-header">
            <div class="team-member-avatar" id="member-initials">TM</div>
            <div>
              <h3 class="team-member-name" id="member-name">Loading...</h3>
              <p class="team-member-position" id="member-position">Loading...</p>
              <div class="mt-1">
                <span class="status-badge" id="current-status-badge">Loading...</span>
              </div>
            </div>
          </div>
          
          <div class="team-member-details">
            <div class="detail-item">
              <div class="detail-label">Department</div>
              <div class="detail-value" id="member-department">Loading...</div>
            </div>
            
            <div class="detail-item">
              <div class="detail-label">Email</div>
              <div class="detail-value" id="member-email">Loading...</div>
            </div>
            
            <div class="detail-item">
              <div class="detail-label">Start Date</div>
              <div class="detail-value" id="member-start-date">Loading...</div>
            </div>
            
            <div class="detail-item">
              <div class="detail-label">Employment Type</div>
              <div class="detail-value" id="member-employment-type">Loading...</div>
            </div>
          </div>
        </div>
        
        <form id="status-update-form">
          <input type="hidden" id="member-id">
          
          <h6 class="mb-3">Select New Status</h6>
          
          <!-- Status Options -->
          <div class="status-options">
            <div class="status-option" data-status="Active">
              <div class="status-option-icon status-icon-active">
                <i class="fas fa-check"></i>
              </div>
              <div class="status-option-content">
                <div class="status-option-title">Active</div>
                <p class="status-option-desc">Team member is currently working and active in the organization</p>
              </div>
              <div class="status-option-radio"></div>
            </div>
            
            <div class="status-option" data-status="On Leave">
              <div class="status-option-icon status-icon-leave">
                <i class="fas fa-calendar-day"></i>
              </div>
              <div class="status-option-content">
                <div class="status-option-title">On Leave</div>
                <p class="status-option-desc">Team member is temporarily away (vacation, medical, parental, etc.)</p>
              </div>
              <div class="status-option-radio"></div>
            </div>
            
            <div class="status-option" data-status="Inactive">
              <div class="status-option-icon status-icon-inactive">
                <i class="fas fa-user-slash"></i>
              </div>
              <div class="status-option-content">
                <div class="status-option-title">Inactive</div>
                <p class="status-option-desc">Team member is no longer active in the organization</p>
              </div>
              <div class="status-option-radio"></div>
            </div>
          </div>
          
          <!-- Additional Info Sections -->
          <div id="leave-details" class="mb-4" style="display: none;">
            <h6 class="mt-4 mb-3">Leave Details</h6>
            
            <div class="row g-3">
              <div class="col-md-6">
                <label for="leave-type" class="form-label">Leave Type</label>
                <select class="form-select" id="leave-type">
                  <option value="">Select Leave Type</option>
                  <option value="Vacation">Vacation</option>
                  <option value="Sick Leave">Sick Leave</option>
                  <option value="Personal">Personal</option>
                  <option value="Parental">Parental</option>
                  <option value="Medical">Medical</option>
                  <option value="Other">Other</option>
                </select>
              </div>
              
              <div class="col-md-6">
                <label for="expected-return-date" class="form-label">Expected Return Date</label>
                <input type="date" class="form-control" id="expected-return-date">
              </div>
              
              <div class="col-12">
                <label for="leave-notes" class="form-label">Additional Notes</label>
                <textarea class="form-control" id="leave-notes" rows="2" placeholder="Enter any additional notes about this leave..."></textarea>
              </div>
            </div>
          </div>
          
          <div id="inactive-details" class="mb-4" style="display: none;">
            <h6 class="mt-4 mb-3">Inactive Details</h6>
            
            <div class="row g-3">
              <div class="col-md-6">
                <label for="inactive-reason" class="form-label">Reason</label>
                <select class="form-select" id="inactive-reason">
                  <option value="">Select Reason</option>
                  <option value="Resigned">Resigned</option>
                  <option value="Terminated">Terminated</option>
                  <option value="Contract Ended">Contract Ended</option>
                  <option value="Retired">Retired</option>
                  <option value="Other">Other</option>
                </select>
              </div>
              
              <div class="col-md-6">
                <label for="end-date" class="form-label">End Date</label>
                <input type="date" class="form-control" id="end-date">
              </div>
              
              <div class="col-12">
                <label for="inactive-notes" class="form-label">Additional Notes</label>
                <textarea class="form-control" id="inactive-notes" rows="2" placeholder="Enter any additional notes about this status change..."></textarea>
              </div>
            </div>
          </div>
          
          <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-outline-primary" id="cancel-btn">Cancel</button>
            <button type="submit" class="btn btn-primary" id="update-btn">
              <span id="submit-spinner" class="spinner-border spinner-border-sm me-2" role="status" style="display: none;"></span>
              Update Status
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <script>
    // Global variables
    let teamMemberData = null;
    let selectedStatus = '';
    
    document.addEventListener('DOMContentLoaded', function() {
      // Get team member ID from URL parameter
      const urlParams = new URLSearchParams(window.location.search);
      const memberId = urlParams.get('id');
      
      if (!memberId) {
        showNotification('Error', 'Team member ID not provided', 'error');
        
        // Redirect back to team view after a delay
        setTimeout(function() {
          google.script.run.showTeamView();
          google.script.host.close();
        }, 2000);
        
        return;
      }
      
      // Store member ID in hidden field
      document.getElementById('member-id').value = memberId;
      
      // Load team member data
      loadTeamMemberData(memberId);
      
      // Setup event listeners
      setupEventListeners();
    });
    
    function loadTeamMemberData(memberId) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleTeamMemberLoaded)
        .withFailureHandler(handleError)
        .getTeamMemberById(memberId);
    }
    
    function handleTeamMemberLoaded(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load team member data', 'error');
        return;
      }
      
      teamMemberData = result.data;
      
      // Update UI with team member data
      document.getElementById('member-name').textContent = teamMemberData.name || `${teamMemberData.firstName || ''} ${teamMemberData.lastName || ''}`;
      document.getElementById('member-position').textContent = teamMemberData.position || 'No position specified';
      document.getElementById('member-email').textContent = teamMemberData.email || 'No email specified';
      document.getElementById('member-department').textContent = teamMemberData.departmentName || 'No department specified';
      document.getElementById('member-start-date').textContent = formatDate(teamMemberData.startDate) || 'No start date';
      document.getElementById('member-employment-type').textContent = teamMemberData.employmentType || 'Not specified';
      
      // Set initials
      document.getElementById('member-initials').textContent = getInitials(teamMemberData.name || `${teamMemberData.firstName || ''} ${teamMemberData.lastName || ''}`);
      
      // Set current status badge
      const statusBadge = document.getElementById('current-status-badge');
      statusBadge.textContent = teamMemberData.status || 'Unknown';
      
      // Update status badge class
      if (teamMemberData.status === 'Active') {
        statusBadge.className = 'status-badge status-active';
      } else if (teamMemberData.status === 'On Leave') {
        statusBadge.className = 'status-badge status-leave';
      } else if (teamMemberData.status === 'Inactive') {
        statusBadge.className = 'status-badge status-inactive';
      } else {
        statusBadge.className = 'status-badge';
      }
      
      // Pre-select current status
      if (teamMemberData.status) {
        const statusOption = document.querySelector(`.status-option[data-status="${teamMemberData.status}"]`);
        if (statusOption) {
          selectStatusOption(statusOption);
        }
      }
    }
    
    function setupEventListeners() {
      // Status option selection
      document.querySelectorAll('.status-option').forEach(option => {
        option.addEventListener('click', function() {
          selectStatusOption(this);
        });
      });
      
      // Form submission
      document.getElementById('status-update-form').addEventListener('submit', function(e) {
        e.preventDefault();
        updateTeamMemberStatus();
      });
      
      // Cancel button
      document.getElementById('cancel-btn').addEventListener('click', function() {
        // Navigate back to team view
        google.script.run.showTeamView();
        google.script.host.close();
      });
    }
    
    function selectStatusOption(option) {
      // Remove selected class from all options
      document.querySelectorAll('.status-option').forEach(opt => {
        opt.classList.remove('selected');
      });
      
      // Add selected class to clicked option
      option.classList.add('selected');
      
      // Store selected status
      selectedStatus = option.getAttribute('data-status');
      
      // Show/hide additional fields based on status
      toggleAdditionalFields(selectedStatus);
    }
    
    function toggleAdditionalFields(status) {
      const leaveDetails = document.getElementById('leave-details');
      const inactiveDetails = document.getElementById('inactive-details');
      
      // Hide all details sections first
      leaveDetails.style.display = 'none';
      inactiveDetails.style.display = 'none';
      
      // Show relevant section based on status
      if (status === 'On Leave') {
        leaveDetails.style.display = 'block';
      } else if (status === 'Inactive') {
        inactiveDetails.style.display = 'block';
      }
    }
    
    function updateTeamMemberStatus() {
      if (!selectedStatus) {
        showNotification('Error', 'Please select a status', 'error');
        return;
      }
      
      const memberId = document.getElementById('member-id').value;
      if (!memberId) {
        showNotification('Error', 'Team member ID not found', 'error');
        return;
      }
      
      // Disable button and show spinner
      const updateBtn = document.getElementById('update-btn');
      const submitSpinner = document.getElementById('submit-spinner');
      updateBtn.disabled = true;
      submitSpinner.style.display = 'inline-block';
      
      // Prepare update data
      const updateData = {
        id: memberId,
        status: selectedStatus
      };
      
      // Add additional fields based on status
      if (selectedStatus === 'On Leave') {
        updateData.leaveType = document.getElementById('leave-type').value;
        updateData.expectedReturnDate = document.getElementById('expected-return-date').value;
        updateData.statusNotes = document.getElementById('leave-notes').value;
      } else if (selectedStatus === 'Inactive') {
        updateData.inactiveReason = document.getElementById('inactive-reason').value;
        updateData.endDate = document.getElementById('end-date').value;
        updateData.statusNotes = document.getElementById('inactive-notes').value;
      }
      
      // Submit update
      google.script.run
        .withSuccessHandler(function(result) {
          updateBtn.disabled = false;
          submitSpinner.style.display = 'none';
          
          if (result.success) {
            showNotification('Success', `Status updated to ${selectedStatus}`, 'success');
            
            // Redirect after a short delay
            setTimeout(function() {
              google.script.run.showTeamView();
              google.script.host.close();
            }, 2000);
          } else {
            showNotification('Error', result.message || 'Failed to update status', 'error');
          }
        })
        .withFailureHandler(function(error) {
          updateBtn.disabled = false;
          submitSpinner.style.display = 'none';
          showNotification('Error', error.message || 'An error occurred', 'error');
        })
        .updateTeamMemberStatus(updateData);
    }
    
    function getInitials(name) {
      if (!name) return '?';
      
      return name
        .split(' ')
        .map(n => n[0])
        .join('')
        .substring(0, 2)
        .toUpperCase();
    }
    
    function formatDate(dateString) {
      if (!dateString) return '';
      
      try {
        const date = new Date(dateString);
        return date.toLocaleDateString();
      } catch (e) {
        return dateString;
      }
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      document.getElementById('loading-overlay').style.opacity = '0';
      setTimeout(() => {
        document.getElementById('loading-overlay').style.display = 'none';
        document.getElementById('loading-overlay').style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button listener
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
    }

    /* App Layout */
    .app-container {
      display: grid;
      grid-template-columns: auto 1fr;
      grid-template-rows: auto 1fr;
      grid-template-areas: 
        "sidebar header"
        "sidebar content";
      height: 100vh;
      width: 100vw;
      overflow: hidden;
    }
    
    /* Modern Sidebar */
    .app-sidebar {
      grid-area: sidebar;
      width: 250px;
      background-color: var(--surface);
      border-right: 1px solid var(--border-color);
      display: flex;
      flex-direction: column;
      transition: var(--transition);
      z-index: 100;
      box-shadow: var(--shadow-sm);
    }
    
    .app-sidebar.collapsed {
      width: 70px;
    }
    
    .sidebar-header {
      padding: 1.5rem;
      display: flex;
      align-items: center;
      border-bottom: 1px solid var(--border-color);
    }
    
    .sidebar-logo {
      font-weight: 700;
      font-size: 1.25rem;
      display: flex;
      align-items: center;
    }
    
    .sidebar-logo-icon {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      margin-right: 12px;
      flex-shrink: 0;
    }
    
    .sidebar-logo-text {
      transition: var(--transition);
      white-space: nowrap;
      overflow: hidden;
    }
    
    .app-sidebar.collapsed .sidebar-logo-text {
      opacity: 0;
      width: 0;
    }
    
    .sidebar-toggle {
      margin-left: auto;
      width: 28px;
      height: 28px;
      border-radius: 6px;
      background: var(--surface-hover);
      border: none;
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .sidebar-toggle:hover {
      background: var(--primary-light);
      color: var(--primary);
    }
    
    .app-sidebar.collapsed .sidebar-toggle i {
      transform: rotate(180deg);
    }
    
    .sidebar-menu {
      list-style: none;
      padding: 1.25rem 0;
      margin: 0;
      flex: 1;
      overflow-y: auto;
    }
    
    .sidebar-menu-item {
      position: relative;
      margin: 0.25rem 0.75rem;
    }
    
    .sidebar-menu-link {
      display: flex;
      align-items: center;
      padding: 0.75rem 1rem;
      color: var(--text-secondary);
      text-decoration: none;
      border-radius: 8px;
      transition: var(--transition);
      overflow: hidden;
      white-space: nowrap;
    }
    
    .sidebar-menu-link:hover {
      color: var(--primary);
      background-color: var(--primary-light);
    }
    
    .sidebar-menu-link.active {
      color: var(--primary);
      background-color: var(--primary-light);
      font-weight: 500;
    }
    
    .sidebar-menu-icon {
      width: 1.25rem;
      text-align: center;
      margin-right: 1rem;
      font-size: 1rem;
      transition: var(--transition);
    }
    
    .sidebar-menu-text {
      transition: var(--transition);
      opacity: 1;
    }
    
    .app-sidebar.collapsed .sidebar-menu-text {
      opacity: 0;
      width: 0;
    }
    
    .app-sidebar.collapsed .sidebar-menu-link {
      padding: 0.75rem;
      justify-content: center;
    }
    
    .app-sidebar.collapsed .sidebar-menu-icon {
      margin-right: 0;
      font-size: 1.25rem;
    }
    
    /* Header */
    .app-header {
      grid-area: header;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1.5rem;
      background-color: var(--surface);
      border-bottom: 1px solid var(--border-color);
      box-shadow: var(--shadow-sm);
      z-index: 99;
    }
    
    .header-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .header-actions {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .header-action-btn {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: var(--surface);
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .header-action-btn:hover {
      background: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
      transform: translateY(-2px);
      box-shadow: var(--shadow-sm);
    }
    
    .search-container {
      position: relative;
      max-width: 400px;
      width: 100%;
    }
    
    .search-input {
      padding-left: 40px;
      border-radius: 8px;
      border: 1px solid var(--border-color);
      width: 100%;
      height: 36px;
      background: rgba(255, 255, 255, 0.8);
      transition: var(--transition);
    }
    
    .search-input:focus {
      box-shadow: 0 0 0 3px var(--primary-light);
      border-color: var(--primary);
      outline: none;
    }
    
    .search-icon {
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-secondary);
    }
    
    /* Content Area */
    .app-content {
      grid-area: content;
      overflow-y: auto;
      padding: 1.5rem;
      position: relative;
    }
    
    /* Team Member Cards */
    .team-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }
    
    .team-card {
      background-color: var(--surface);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      overflow: hidden;
      position: relative;
      height: 100%;
    }
    
    .team-card:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow-md);
    }
    
    .team-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      opacity: 0;
      background: linear-gradient(to right, var(--primary), var(--info));
      transition: var(--transition);
    }
    
    .team-card:hover::before {
      opacity: 1;
    }
    
    .team-card-header {
      display: flex;
      align-items: center;
      padding: 1.25rem;
      border-bottom: 1px solid var(--border-color);
      position: relative;
    }
    
    .team-member-avatar {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      overflow: hidden;
      margin-right: 1rem;
      background: linear-gradient(to bottom right, var(--primary), var(--info));
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 1.25rem;
      transition: var(--transition);
      flex-shrink: 0;
    }
    
    .team-card:hover .team-member-avatar {
      transform: scale(1.05);
    }
    
    .team-member-info {
      overflow: hidden;
    }
    
    .team-member-name {
      font-weight: 600;
      font-size: 1rem;
      color: var(--text-primary);
      margin: 0 0 0.25rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .team-member-position {
      font-size: 0.85rem;
      color: var(--text-secondary);
      margin: 0 0 0.5rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .status-badge {
      display: inline-block;
      padding: 0.25em 0.75em;
      font-size: 0.75rem;
      font-weight: 600;
      line-height: 1.5;
      border-radius: 30px;
    }
    
    .status-active {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .status-leave {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .status-inactive {
      background-color: rgba(108, 117, 125, 0.1);
      color: var(--text-secondary);
    }
    
    .team-card-body {
      padding: 1rem 1.25rem;
    }
    
    .team-card-item {
      margin-bottom: 0.75rem;
      display: flex;
      align-items: flex-start;
    }
    
    .team-card-item:last-child {
      margin-bottom: 0;
    }
    
    .team-card-icon {
      color: var(--text-secondary);
      font-size: 0.85rem;
      margin-right: 0.75rem;
      margin-top: 0.25rem;
      flex-shrink: 0;
    }
    
    .team-card-label {
      font-size: 0.8rem;
      color: var(--text-secondary);
      flex: 1;
    }
    
    .team-card-value {
      font-size: 0.875rem;
      font-weight: 500;
      color: var(--text-primary);
      margin-left: 0.5rem;
      text-align: right;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .team-card-footer {
      padding: 1rem 1.25rem;
      border-top: 1px solid var(--border-color);
      display: flex;
      justify-content: space-around;
      background-color: rgba(248, 249, 250, 0.5);
    }
    
    .team-card-action {
      text-decoration: none;
      color: var(--text-secondary);
      font-size: 0.875rem;
      display: flex;
      align-items: center;
      transition: var(--transition);
    }
    
    .team-card-action:hover {
      color: var(--primary);
    }
    
    .team-card-action i {
      margin-right: 0.35rem;
    }
    
    /* Filters */
    .filters-container {
      background-color: var(--surface);
      border-radius: var(--border-radius);
      padding: 1rem;
      margin-bottom: 1.5rem;
      box-shadow: var(--shadow-sm);
    }
    
    .filters-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }
    
    .filters-title {
      font-weight: 600;
      margin: 0;
      color: var(--text-primary);
    }
    
    .filters-toggle {
      background: none;
      border: none;
      color: var(--text-secondary);
      font-size: 0.875rem;
      display: flex;
      align-items: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .filters-toggle:hover {
      color: var(--primary);
    }
    
    .filters-toggle i {
      margin-right: 0.35rem;
    }
    
    .filters-body {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease;
    }
    
    .filters-body.show {
      max-height: 500px;
    }
    
    .form-select, .form-control {
      border-radius: 8px;
      border: 1px solid var(--border-color);
      font-size: 0.875rem;
      transition: var(--transition);
    }
    
    .form-select:focus, .form-control:focus {
      box-shadow: 0 0 0 3px var(--primary-light);
      border-color: var(--primary);
    }
    
    /* Empty State */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 4rem 1rem;
      text-align: center;
      background-color: rgba(255, 255, 255, 0.5);
      border-radius: var(--border-radius);
    }
    
    .empty-state-icon {
      font-size: 3rem;
      color: var(--text-secondary);
      opacity: 0.5;
      margin-bottom: 1.5rem;
    }
    
    .empty-state-title {
      font-weight: 600;
      margin-bottom: 0.75rem;
      color: var(--text-primary);
    }
    
    .empty-state-message {
      color: var(--text-secondary);
      max-width: 400px;
      margin: 0 auto 1.5rem;
    }
    
    /* Add Button */
    .add-btn {
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      width: 56px;
      height: 56px;
      border-radius: 28px;
      background-color: var(--primary);
      color: white;
      border: none;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      box-shadow: var(--shadow-md);
      cursor: pointer;
      transition: var(--transition);
      z-index: 99;
    }
    
    .add-btn:hover {
      background-color: var(--secondary);
      transform: translateY(-3px);
      box-shadow: var(--shadow-lg);
    }
    
    /* Team Summary */
    .team-summary {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    
    .summary-card {
      background-color: var(--surface);
      border-radius: var(--border-radius);
      padding: 1rem;
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
    }
    
    .summary-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .summary-card-icon {
      width: 40px;
      height: 40px;
      border-radius: 20px;
      background-color: var(--primary-light);
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 0.75rem;
    }
    
    .summary-icon-active {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .summary-icon-leave {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .summary-icon-inactive {
      background-color: rgba(108, 117, 125, 0.1);
      color: var(--text-secondary);
    }
    
    .summary-card-value {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .summary-card-label {
      font-size: 0.85rem;
      color: var(--text-secondary);
    }
    
    /* Pagination */
    .pagination-container {
      display: flex;
      justify-content: center;
      margin-top: 1rem;
    }
    
    .pagination-btn {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background-color: var(--surface);
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 0.25rem;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .pagination-btn:hover:not(.active) {
      background-color: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .pagination-btn.active {
      background-color: var(--primary);
      color: white;
      border-color: var(--primary);
    }
    
    .pagination-btn.disabled {
      opacity: 0.5;
      cursor: not-allowed;
      pointer-events: none;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(5px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spinner 1s linear infinite;
    }
    
    @keyframes spinner {
      to {
        transform: rotate(360deg);
      }
    }
    
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      background: white;
      border-left: 4px solid var(--primary);
      border-radius: 4px;
      box-shadow: var(--shadow-md);
      z-index: 9998;
      transform: translateX(120%);
      transition: all 0.3s;
      max-width: 350px;
      display: flex;
      align-items: center;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      font-size: 1.25rem;
      margin-right: 15px;
      color: var(--primary);
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin: 0 0 3px;
    }
    
    .notification-message {
      color: var(--text-secondary);
      margin: 0;
      font-size: 0.9rem;
    }
    
    .notification-close {
      background: transparent;
      border: none;
      color: var(--text-secondary);
      font-size: 1.25rem;
      line-height: 1;
      padding: 0;
      margin-left: 15px;
      cursor: pointer;
      opacity: 0.5;
      transition: var(--transition);
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-left-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-left-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Responsive */
    @media (max-width: 991px) {
      .app-container {
        grid-template-areas: 
          "header header"
          "sidebar content";
      }
      
      .app-sidebar {
        width: 70px;
      }
      
      .sidebar-logo-text {
        opacity: 0;
        width: 0;
      }
      
      .sidebar-menu-text {
        opacity: 0;
        width: 0;
      }
      
      .sidebar-menu-link {
        padding: 0.75rem;
        justify-content: center;
      }
      
      .sidebar-menu-icon {
        margin-right: 0;
        font-size: 1.25rem;
      }
      
      .app-header {
        padding: 0.75rem 1rem;
      }
    }
    
    @media (max-width: 768px) {
      .app-container {
        display: flex;
        flex-direction: column;
        height: auto;
        min-height: 100vh;
      }
      
      .app-sidebar {
        display: none;
      }
      
      .app-content {
        overflow-y: visible;
        padding: 1rem;
      }
      
      .team-summary {
        grid-template-columns: 1fr 1fr;
      }
      
      .add-btn {
        bottom: 1rem;
        right: 1rem;
      }
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }
    
    .animate-delay-1 { animation-delay: 0.1s; }
    .animate-delay-2 { animation-delay: 0.2s; }
    .animate-delay-3 { animation-delay: 0.3s; }
    .animate-delay-4 { animation-delay: 0.4s; }
    .animate-delay-5 { animation-delay: 0.5s; }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="app-container">
    <!-- Sidebar -->
    <aside class="app-sidebar" id="sidebar">
      <div class="sidebar-header">
        <div class="sidebar-logo">
          <div class="sidebar-logo-icon">
            <i class="fas fa-chart-pie"></i>
          </div>
          <div class="sidebar-logo-text">TeamLead</div>
        </div>
        <button id="sidebar-toggle" class="sidebar-toggle" aria-label="Toggle Sidebar">
          <i class="fas fa-angle-left"></i>
        </button>
      </div>
      
      <nav class="sidebar-menu">
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="dashboard">
            <span class="sidebar-menu-icon"><i class="fas fa-th-large"></i></span>
            <span class="sidebar-menu-text">Dashboard</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="one-on-ones">
            <span class="sidebar-menu-icon"><i class="fas fa-user-friends"></i></span>
            <span class="sidebar-menu-text">One-on-Ones</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="qa-reviews">
            <span class="sidebar-menu-icon"><i class="fas fa-clipboard-check"></i></span>
            <span class="sidebar-menu-text">QA Reviews</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="metrics">
            <span class="sidebar-menu-icon"><i class="fas fa-chart-line"></i></span>
            <span class="sidebar-menu-text">Metrics</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="action-items">
            <span class="sidebar-menu-icon"><i class="fas fa-tasks"></i></span>
            <span class="sidebar-menu-text">Action Items</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link active" data-page="team">
            <span class="sidebar-menu-icon"><i class="fas fa-users"></i></span>
            <span class="sidebar-menu-text">Team Members</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="settings">
            <span class="sidebar-menu-icon"><i class="fas fa-cog"></i></span>
            <span class="sidebar-menu-text">Settings</span>
          </a>
        </div>
      </nav>
    </aside>
    
    <!-- Header -->
    <header class="app-header">
      <div class="header-title">
        Team Members
      </div>
      
      <div class="header-actions">
        <div class="search-container">
          <input type="text" class="search-input" id="search-input" placeholder="Search team members...">
          <i class="fas fa-search search-icon"></i>
        </div>
        
        <button id="refresh-btn" class="header-action-btn" aria-label="Refresh">
          <i class="fas fa-sync-alt"></i>
        </button>
      </div>
    </header>
    
    <!-- Main Content -->
    <main class="app-content">
      <!-- Team Summary -->
      <div class="team-summary fade-in">
        <div class="summary-card animate-delay-1">
          <div class="summary-card-icon">
            <i class="fas fa-users"></i>
          </div>
          <div class="summary-card-value" id="total-count">0</div>
          <div class="summary-card-label">Total Team Members</div>
        </div>
        
        <div class="summary-card animate-delay-2">
          <div class="summary-card-icon summary-icon-active">
            <i class="fas fa-check"></i>
          </div>
          <div class="summary-card-value" id="active-count">0</div>
          <div class="summary-card-label">Active</div>
        </div>
        
        <div class="summary-card animate-delay-3">
          <div class="summary-card-icon summary-icon-leave">
            <i class="fas fa-calendar-day"></i>
          </div>
          <div class="summary-card-value" id="leave-count">0</div>
          <div class="summary-card-label">On Leave</div>
        </div>
        
        <div class="summary-card animate-delay-4">
          <div class="summary-card-icon summary-icon-inactive">
            <i class="fas fa-user-slash"></i>
          </div>
          <div class="summary-card-value" id="inactive-count">0</div>
          <div class="summary-card-label">Inactive</div>
        </div>
      </div>
      
      <!-- Filters -->
      <div class="filters-container fade-in animate-delay-1">
        <div class="filters-header">
          <h6 class="filters-title">Filters</h6>
          <button class="filters-toggle" id="toggle-filters">
            <i class="fas fa-filter"></i> Show Filters
          </button>
        </div>
        
        <div class="filters-body" id="filters-body">
          <div class="row g-3">
            <div class="col-md-4">
              <label for="filter-status" class="form-label">Status</label>
              <select class="form-select form-select-sm" id="filter-status">
                <option value="">All Statuses</option>
                <option value="Active">Active</option>
                <option value="On Leave">On Leave</option>
                <option value="Inactive">Inactive</option>
              </select>
            </div>
            
            <div class="col-md-4">
              <label for="filter-department" class="form-label">Department</label>
              <select class="form-select form-select-sm" id="filter-department">
                <option value="">All Departments</option>
                <!-- Departments will be loaded dynamically -->
              </select>
            </div>
            
            <div class="col-md-4">
              <label for="filter-employment-type" class="form-label">Employment Type</label>
              <select class="form-select form-select-sm" id="filter-employment-type">
                <option value="">All Types</option>
                <option value="Full-Time">Full-Time</option>
                <option value="Part-Time">Part-Time</option>
                <option value="Contract">Contract</option>
                <option value="Temporary">Temporary</option>
                <option value="Intern">Intern</option>
              </select>
            </div>
            
            <div class="col-12 d-flex justify-content-end">
              <button class="btn btn-outline-secondary btn-sm me-2" id="reset-filters-btn">
                Reset
              </button>
              <button class="btn btn-primary btn-sm" id="apply-filters-btn">
                <i class="fas fa-filter me-1"></i> Apply Filters
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Team Members Grid -->
      <div class="team-grid" id="team-grid">
        <!-- Team member cards will be dynamically loaded here -->
      </div>
      
      <!-- Pagination -->
      <div class="pagination-container" id="pagination-container">
        <!-- Pagination will be added here -->
      </div>
      
      <!-- Empty State -->
      <div class="empty-state" id="empty-state" style="display: none;">
        <div class="empty-state-icon">
          <i class="fas fa-users"></i>
        </div>
        <h5 class="empty-state-title">No Team Members Found</h5>
        <p class="empty-state-message">There are no team members that match your current filters. Try adjusting your filters or add a new team member.</p>
        <button class="btn btn-primary" id="add-team-member-btn-empty">
          <i class="fas fa-user-plus me-2"></i> Add Team Member
        </button>
      </div>
      
      <!-- Add Button -->
      <button class="add-btn" id="add-team-member-btn" aria-label="Add Team Member">
        <i class="fas fa-plus"></i>
      </button>
    </main>
  </div>
  
  <script>
    // Global variables
    let allTeamMembers = [];
    let filteredTeamMembers = [];
    let departments = [];
    let currentPage = 1;
    let itemsPerPage = 12;
    let totalPages = 1;
    
    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      setupEventListeners();
      loadDepartments();
      loadTeamMembers();
    });
    
    function setupEventListeners() {
      // Sidebar toggle
      document.getElementById('sidebar-toggle').addEventListener('click', function() {
        document.getElementById('sidebar').classList.toggle('collapsed');
      });
      
      // Navigation links
      document.querySelectorAll('.sidebar-menu-link').forEach(link => {
        link.addEventListener('click', handleNavigation);
      });
      
      // Filters toggle
      document.getElementById('toggle-filters').addEventListener('click', toggleFilters);
      
      // Search input
      document.getElementById('search-input').addEventListener('input', function() {
        applyFilters();
      });
      
      // Filter buttons
      document.getElementById('reset-filters-btn').addEventListener('click', resetFilters);
      document.getElementById('apply-filters-btn').addEventListener('click', applyFilters);
      
      // Add team member buttons
      document.getElementById('add-team-member-btn').addEventListener('click', showAddTeamMemberForm);
      document.getElementById('add-team-member-btn-empty').addEventListener('click', showAddTeamMemberForm);
      
      // Refresh button
      document.getElementById('refresh-btn').addEventListener('click', refreshTeamMembers);
    }
    
    function handleNavigation(e) {
      e.preventDefault();
      const page = e.currentTarget.getAttribute('data-page');
      
      // Remove active class from all links
      document.querySelectorAll('.sidebar-menu-link').forEach(link => {
        link.classList.remove('active');
      });
      
      // Add active class to clicked link
      e.currentTarget.classList.add('active');
      
      // Navigate to the selected page
      navigateTo(page);
    }
    
    function navigateTo(page) {
      switch(page) {
        case 'dashboard':
          google.script.run.showDashboard();
          break;
        case 'one-on-ones':
          google.script.run.showOneOnOnes();
          break;
        case 'qa-reviews':
          google.script.run.showQAReviews();
          break;
        case 'metrics':
          google.script.run.showMetrics();
          break;
        case 'action-items':
          google.script.run.showActionItems();
          break;
        case 'settings':
          google.script.run.showSettings();
          break;
        default:
          // Already on team view page, do nothing
          break;
      }
      
      google.script.host.close();
    }
    
    function toggleFilters() {
      const filtersBody = document.getElementById('filters-body');
      const toggleButton = document.getElementById('toggle-filters');
      
      filtersBody.classList.toggle('show');
      
      if (filtersBody.classList.contains('show')) {
        toggleButton.innerHTML = '<i class="fas fa-filter"></i> Hide Filters';
      } else {
        toggleButton.innerHTML = '<i class="fas fa-filter"></i> Show Filters';
      }
    }
    
    function loadDepartments() {
      google.script.run
        .withSuccessHandler(handleDepartmentsLoaded)
        .withFailureHandler(handleError)
        .getDepartments();
    }
    
    function handleDepartmentsLoaded(result) {
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load departments', 'error');
        return;
      }
      
      departments = result.data || [];
      
      const departmentSelect = document.getElementById('filter-department');
      departmentSelect.innerHTML = '<option value="">All Departments</option>';
      
      departments.forEach(dept => {
        const option = document.createElement('option');
        option.value = dept.id;
        option.textContent = dept.name;
        departmentSelect.appendChild(option);
      });
    }
    
    function loadTeamMembers() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleTeamMembersLoaded)
        .withFailureHandler(handleError)
        .getAllTeamMembers();
    }
    
    function handleTeamMembersLoaded(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load team members', 'error');
        return;
      }
      
      allTeamMembers = result.data || [];
      
      // Apply initial filters (no filters)
      applyFilters(true);
    }
    
    function applyFilters(skipPageReset) {
      const searchTerm = document.getElementById('search-input').value.trim().toLowerCase();
      const statusFilter = document.getElementById('filter-status').value;
      const departmentFilter = document.getElementById('filter-department').value;
      const employmentTypeFilter = document.getElementById('filter-employment-type').value;
      
      // Filter team members
      filteredTeamMembers = allTeamMembers.filter(member => {
        // Search term filter
        const matchesSearch = !searchTerm || 
          (member.firstName && member.firstName.toLowerCase().includes(searchTerm)) || 
          (member.lastName && member.lastName.toLowerCase().includes(searchTerm)) || 
          (member.email && member.email.toLowerCase().includes(searchTerm)) ||
          (member.position && member.position.toLowerCase().includes(searchTerm));
        
        // Status filter
        const matchesStatus = !statusFilter || member.status === statusFilter;
        
        // Department filter
        const matchesDepartment = !departmentFilter || member.department === departmentFilter;
        
        // Employment type filter
        const matchesEmploymentType = !employmentTypeFilter || member.employmentType === employmentTypeFilter;
        
        return matchesSearch && matchesStatus && matchesDepartment && matchesEmploymentType;
      });
      
      // Reset to first page if not explicitly skipped
      if (!skipPageReset) {
        currentPage = 1;
      }
      
      updateTeamMemberDisplay();
      updateSummaryCounters();
    }
    
    function resetFilters() {
      document.getElementById('search-input').value = '';
      document.getElementById('filter-status').value = '';
      document.getElementById('filter-department').value = '';
      document.getElementById('filter-employment-type').value = '';
      
      applyFilters();
    }
    
    function updateSummaryCounters() {
      const totalCount = allTeamMembers.length;
      const activeCount = allTeamMembers.filter(m => m.status === 'Active').length;
      const leaveCount = allTeamMembers.filter(m => m.status === 'On Leave').length;
      const inactiveCount = allTeamMembers.filter(m => m.status === 'Inactive').length;
      
      document.getElementById('total-count').textContent = totalCount;
      document.getElementById('active-count').textContent = activeCount;
      document.getElementById('leave-count').textContent = leaveCount;
      document.getElementById('inactive-count').textContent = inactiveCount;
    }
    
    function updateTeamMemberDisplay() {
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, filteredTeamMembers.length);
      const currentPageMembers = filteredTeamMembers.slice(startIndex, endIndex);
      
      const teamGrid = document.getElementById('team-grid');
      const emptyState = document.getElementById('empty-state');
      
      // Clear current grid
      teamGrid.innerHTML = '';
      
      if (filteredTeamMembers.length === 0) {
        // Show empty state
        emptyState.style.display = 'flex';
        teamGrid.style.display = 'none';
      } else {
        // Hide empty state and show grid
        emptyState.style.display = 'none';
        teamGrid.style.display = 'grid';
        
        // Create team member cards
        currentPageMembers.forEach((member, index) => {
          const card = createTeamMemberCard(member, index);
          teamGrid.appendChild(card);
        });
      }
      
      // Update pagination
      updatePagination();
    }
    
    function createTeamMemberCard(member, index) {
      const card = document.createElement('div');
      card.className = `team-card fade-in animate-delay-${(index % 5) + 1}`;
      
      const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim() || 'Unknown';
      const initials = getInitials(fullName);
      
      // Get department name
      const department = departments.find(d => d.id === member.department);
      const departmentName = department ? department.name : 'Unknown Department';
      
      // Status badge class
      let statusClass = 'status-active';
      if (member.status === 'On Leave') {
        statusClass = 'status-leave';
      } else if (member.status === 'Inactive') {
        statusClass = 'status-inactive';
      }
      
      card.innerHTML = `
        <div class="team-card-header">
          <div class="team-member-avatar">
            ${initials}
          </div>
          <div class="team-member-info">
            <h3 class="team-member-name">${fullName}</h3>
            <p class="team-member-position">${member.position || 'No position specified'}</p>
            <span class="status-badge ${statusClass}">${member.status || 'Unknown'}</span>
          </div>
        </div>
        <div class="team-card-body">
          <div class="team-card-item">
            <div class="team-card-icon">
              <i class="fas fa-envelope"></i>
            </div>
            <div class="team-card-label">Email</div>
            <div class="team-card-value">${member.email || 'N/A'}</div>
          </div>
          <div class="team-card-item">
            <div class="team-card-icon">
              <i class="fas fa-building"></i>
            </div>
            <div class="team-card-label">Department</div>
            <div class="team-card-value">${departmentName}</div>
          </div>
          <div class="team-card-item">
            <div class="team-card-icon">
              <i class="fas fa-briefcase"></i>
            </div>
            <div class="team-card-label">Employment Type</div>
            <div class="team-card-value">${member.employmentType || 'N/A'}</div>
          </div>
          <div class="team-card-item">
            <div class="team-card-icon">
              <i class="fas fa-calendar-day"></i>
            </div>
            <div class="team-card-label">Start Date</div>
            <div class="team-card-value">${formatDate(member.startDate) || 'N/A'}</div>
          </div>
        </div>
        <div class="team-card-footer">
          <a href="#" class="team-card-action view-action" data-id="${member.id}">
            <i class="fas fa-eye"></i> View
          </a>
          <a href="#" class="team-card-action status-action" data-id="${member.id}">
            <i class="fas fa-exchange-alt"></i> Status
          </a>
          <a href="#" class="team-card-action edit-action" data-id="${member.id}">
            <i class="fas fa-pencil-alt"></i> Edit
          </a>
        </div>
      `;
      
      // Add event listeners to card actions
      card.querySelector('.view-action').addEventListener('click', function(e) {
        e.preventDefault();
        viewTeamMember(this.getAttribute('data-id'));
      });
      
      card.querySelector('.status-action').addEventListener('click', function(e) {
        e.preventDefault();
        updateTeamMemberStatus(this.getAttribute('data-id'));
      });
      
      card.querySelector('.edit-action').addEventListener('click', function(e) {
        e.preventDefault();
        editTeamMember(this.getAttribute('data-id'));
      });
      
      return card;
    }
    
    function updatePagination() {
      const paginationContainer = document.getElementById('pagination-container');
      
      // Calculate total pages
      totalPages = Math.ceil(filteredTeamMembers.length / itemsPerPage);
      
      if (totalPages <= 1) {
        paginationContainer.style.display = 'none';
        return;
      }
      
      paginationContainer.style.display = 'flex';
      paginationContainer.innerHTML = '';
      
      // Previous button
      const prevButton = document.createElement('button');
      prevButton.className = `pagination-btn ${currentPage === 1 ? 'disabled' : ''}`;
      prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
      prevButton.disabled = currentPage === 1;
      prevButton.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          updateTeamMemberDisplay();
        }
      });
      paginationContainer.appendChild(prevButton);
      
      // Page buttons
      const maxVisiblePages = 5;
      let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
      let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
      
      // Adjust if we're showing fewer than maxVisiblePages
      if (endPage - startPage + 1 < maxVisiblePages) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
      }
      
      // First page button (if needed)
      if (startPage > 1) {
        const firstPageButton = document.createElement('button');
        firstPageButton.className = 'pagination-btn';
        firstPageButton.textContent = '1';
        firstPageButton.addEventListener('click', () => {
          currentPage = 1;
          updateTeamMemberDisplay();
        });
        paginationContainer.appendChild(firstPageButton);
        
        if (startPage > 2) {
          const ellipsis = document.createElement('span');
          ellipsis.className = 'pagination-ellipsis';
          ellipsis.textContent = '...';
          ellipsis.style.margin = '0 0.5rem';
          paginationContainer.appendChild(ellipsis);
        }
      }
      
      // Page buttons
      for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.className = `pagination-btn ${i === currentPage ? 'active' : ''}`;
        pageButton.textContent = i;
        pageButton.addEventListener('click', () => {
          currentPage = i;
          updateTeamMemberDisplay();
        });
        paginationContainer.appendChild(pageButton);
      }
      
      // Last page button (if needed)
      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          const ellipsis = document.createElement('span');
          ellipsis.className = 'pagination-ellipsis';
          ellipsis.textContent = '...';
          ellipsis.style.margin = '0 0.5rem';
          paginationContainer.appendChild(ellipsis);
        }
        
        const lastPageButton = document.createElement('button');
        lastPageButton.className = 'pagination-btn';
        lastPageButton.textContent = totalPages;
        lastPageButton.addEventListener('click', () => {
          currentPage = totalPages;
          updateTeamMemberDisplay();
        });
        paginationContainer.appendChild(lastPageButton);
      }
      
      // Next button
      const nextButton = document.createElement('button');
      nextButton.className = `pagination-btn ${currentPage === totalPages ? 'disabled' : ''}`;
      nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
      nextButton.disabled = currentPage === totalPages;
      nextButton.addEventListener('click', () => {
        if (currentPage < totalPages) {
          currentPage++;
          updateTeamMemberDisplay();
        }
      });
      paginationContainer.appendChild(nextButton);
    }
    
    function getInitials(name) {
      if (!name) return '?';
      
      return name
        .split(' ')
        .map(n => n[0])
        .join('')
        .substring(0, 2)
        .toUpperCase();
    }
    
    function formatDate(dateString) {
      if (!dateString) return '';
      
      try {
        const date = new Date(dateString);
        return date.toLocaleDateString();
      } catch (e) {
        return dateString;
      }
    }
    
    function showAddTeamMemberForm() {
      google.script.run.showAddTeamMemberForm();
      google.script.host.close();
    }
    
    function viewTeamMember(id) {
      google.script.run.showTeamMemberView(id);
      google.script.host.close();
    }
    
    function editTeamMember(id) {
      google.script.run.showEditTeamMemberForm(id);
      google.script.host.close();
    }
    
    function updateTeamMemberStatus(id) {
      google.script.run.showUpdateStatusForm(id);
      google.script.host.close();
    }
    
    function refreshTeamMembers() {
      loadTeamMembers();
      showNotification('Success', 'Team members refreshed', 'success');
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      document.getElementById('loading-overlay').style.opacity = '0';
      setTimeout(() => {
        document.getElementById('loading-overlay').style.display = 'none';
        document.getElementById('loading-overlay').style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button listener
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    .team-member-selector {
      position: relative;
    }
    
    .selector-input {
      width: 100%;
      padding: 0.65rem 1rem;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      background-color: var(--surface);
      color: var(--text-primary);
      transition: var(--transition);
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .selector-input:hover {
      border-color: var(--primary);
    }
    
    .selector-input.active {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px var(--primary-light);
    }
    
    .selector-input-text {
      flex-grow: 1;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .selector-input-icon {
      margin-left: 0.5rem;
      transition: var(--transition);
      color: var(--text-secondary);
    }
    
    .selector-input.active .selector-input-icon {
      transform: rotate(180deg);
      color: var(--primary);
    }
    
    .selector-dropdown {
      position: absolute;
      top: calc(100% + 5px);
      left: 0;
      width: 100%;
      max-height: 250px;
      overflow-y: auto;
      background-color: var(--surface);
      border-radius: 8px;
      box-shadow: var(--shadow-md);
      z-index: 100;
      display: none;
      border: 1px solid var(--border-color);
    }
    
    .selector-dropdown.show {
      display: block;
      animation: fadeInDown 0.2s ease;
    }
    
    .selector-search {
      padding: 0.75rem;
      position: sticky;
      top: 0;
      background-color: var(--surface);
      z-index: 1;
      border-bottom: 1px solid var(--border-color);
    }
    
    .selector-search-input {
      width: 100%;
      padding: 0.5rem 0.75rem;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      transition: var(--transition);
    }
    
    .selector-search-input:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 2px var(--primary-light);
      outline: none;
    }
    
    .selector-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .selector-list-item {
      padding: 0.75rem 1rem;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
    }
    
    .selector-list-item:hover {
      background-color: var(--primary-light);
    }
    
    .selector-list-item.selected {
      background-color: var(--primary-light);
      color: var(--primary);
      font-weight: 500;
    }
    
    .selector-list-item-avatar {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      background: linear-gradient(to right bottom, var(--primary), var(--info));
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.8rem;
      font-weight: 600;
      margin-right: 0.75rem;
      flex-shrink: 0;
    }
    
    .selector-list-item-info {
      flex-grow: 1;
      overflow: hidden;
    }
    
    .selector-list-item-name {
      font-size: 0.9rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .selector-list-item-position {
      font-size: 0.75rem;
      color: var(--text-secondary);
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .selector-empty {
      padding: 1.5rem;
      text-align: center;
      color: var(--text-secondary);
    }
    
    .selector-loading {
      padding: 1.5rem;
      text-align: center;
      color: var(--text-secondary);
    }
    
    .selector-placeholder {
      color: var(--text-secondary);
    }
    
    .selector-badge {
      display: inline-flex;
      align-items: center;
      padding: 0.25rem 0.5rem;
      border-radius: 6px;
      background-color: var(--primary-light);
      color: var(--primary);
      font-size: 0.8rem;
      margin: 0 0.25rem 0.25rem 0;
    }
    
    .selector-badge-remove {
      margin-left: 0.35rem;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background-color: rgba(67, 97, 238, 0.15);
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.7rem;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .selector-badge-remove:hover {
      background-color: var(--primary);
      color: white;
    }
    
    .selector-badges-container {
      display: flex;
      flex-wrap: wrap;
      margin: -0.25rem 0;
    }
    
    /* Tooltip */
    .selector-tooltip {
      position: absolute;
      top: calc(100% + 5px);
      left: 50%;
      transform: translateX(-50%);
      background-color: var(--dark);
      color: white;
      padding: 0.5rem 0.75rem;
      border-radius: 4px;
      font-size: 0.75rem;
      white-space: nowrap;
      pointer-events: none;
      opacity: 0;
      transition: var(--transition);
      z-index: 101;
    }
    
    .selector-tooltip::before {
      content: '';
      position: absolute;
      top: -4px;
      left: 50%;
      transform: translateX(-50%) rotate(45deg);
      width: 8px;
      height: 8px;
      background-color: var(--dark);
    }
    
    .selector-list-item:hover .selector-tooltip {
      opacity: 1;
    }
    
    /* Status Indicator */
    .selector-status {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      margin-left: 0.5rem;
      flex-shrink: 0;
    }
    
    .selector-status-active {
      background-color: var(--success);
    }
    
    .selector-status-leave {
      background-color: var(--info);
    }
    
    .selector-status-inactive {
      background-color: var(--text-secondary);
    }
    
    /* Animation */
    @keyframes fadeInDown {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    .selector-spinner {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid rgba(67, 97, 238, 0.2);
      border-top-color: var(--primary);
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
      margin-right: 0.5rem;
    }
    
    /* Multi-select styles */
    .selector-input.multi-select {
      padding: 0.5rem 0.75rem;
      height: auto;
      min-height: 42px;
      flex-wrap: wrap;
    }
    
    .selector-input.multi-select .selector-input-text {
      flex-basis: 100%;
      margin-bottom: 0.25rem;
    }
    
    .selector-input.multi-select .selector-input-icon {
      position: absolute;
      right: 0.75rem;
      top: 0.75rem;
    }
  </style>
</head>
<body>
  <div class="team-member-selector" id="selector-container">
    <div class="selector-input" id="selector-input">
      <div class="selector-input-text" id="selector-text">
        <span class="selector-placeholder">Select Team Member</span>
      </div>
      <div class="selector-input-icon">
        <i class="fas fa-chevron-down"></i>
      </div>
    </div>
    
    <div class="selector-dropdown" id="selector-dropdown">
      <div class="selector-search">
        <input type="text" class="selector-search-input" id="selector-search" placeholder="Search team members...">
      </div>
      
      <div class="selector-loading" id="selector-loading">
        <div class="selector-spinner"></div>
        Loading team members...
      </div>
      
      <ul class="selector-list" id="selector-list" style="display: none;">
        <!-- Team members will be populated here -->
      </ul>
      
      <div class="selector-empty" id="selector-empty" style="display: none;">
        No team members found
      </div>
    </div>
    
    <input type="hidden" id="selected-member-id">
  </div>
  
  <script>
    class TeamMemberSelector {
      constructor(options = {}) {
        // Configuration with defaults
        this.config = {
          containerId: options.containerId || 'selector-container',
          inputId: options.inputId || 'selector-input',
          dropdownId: options.dropdownId || 'selector-dropdown',
          listId: options.listId || 'selector-list',
          textId: options.textId || 'selector-text',
          searchId: options.searchId || 'selector-search',
          loadingId: options.loadingId || 'selector-loading',
          emptyId: options.emptyId || 'selector-empty',
          hiddenInputId: options.hiddenInputId || 'selected-member-id',
          placeholder: options.placeholder || 'Select Team Member',
          statusFilter: options.statusFilter || ['Active', 'On Leave'],
          multiSelect: options.multiSelect || false,
          onChange: options.onChange || function() {}
        };
        
        // Elements
        this.containerEl = document.getElementById(this.config.containerId);
        this.inputEl = document.getElementById(this.config.inputId);
        this.dropdownEl = document.getElementById(this.config.dropdownId);
        this.listEl = document.getElementById(this.config.listId);
        this.textEl = document.getElementById(this.config.textId);
        this.searchEl = document.getElementById(this.config.searchId);
        this.loadingEl = document.getElementById(this.config.loadingId);
        this.emptyEl = document.getElementById(this.config.emptyId);
        this.hiddenInputEl = document.getElementById(this.config.hiddenInputId);
        
        // State
        this.teamMembers = [];
        this.filteredMembers = [];
        this.selectedMembers = options.preselected || [];
        this.isOpen = false;
        
        // Setup
        this.setupEventListeners();
        this.loadTeamMembers();
        
        // Setup multi-select if enabled
        if (this.config.multiSelect) {
          this.inputEl.classList.add('multi-select');
          this.updateSelectionDisplay();
        }
      }
      
      setupEventListeners() {
        // Toggle dropdown on input click
        this.inputEl.addEventListener('click', (e) => {
          e.stopPropagation();
          this.toggleDropdown();
        });
        
        // Search functionality
        this.searchEl.addEventListener('input', () => {
          this.filterMembers(this.searchEl.value);
        });
        
        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
          if (!this.containerEl.contains(e.target)) {
            this.closeDropdown();
          }
        });
        
        // Prevent dropdown close when clicking inside it
        this.dropdownEl.addEventListener('click', (e) => {
          e.stopPropagation();
        });
        
        // Handle keyboard navigation
        this.searchEl.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
            e.preventDefault();
            const focusableItems = Array.from(this.listEl.querySelectorAll('.selector-list-item'));
            if (focusableItems.length === 0) return;
            
            const currentIndex = focusableItems.findIndex(item => item.classList.contains('focused'));
            let nextIndex;
            
            if (e.key === 'ArrowDown') {
              nextIndex = currentIndex < 0 ? 0 : Math.min(currentIndex + 1, focusableItems.length - 1);
            } else {
              nextIndex = currentIndex < 0 ? focusableItems.length - 1 : Math.max(currentIndex - 1, 0);
            }
            
            focusableItems.forEach(item => item.classList.remove('focused'));
            focusableItems[nextIndex].classList.add('focused');
            focusableItems[nextIndex].scrollIntoView({ block: 'nearest', behavior: 'smooth' });
          } else if (e.key === 'Enter') {
            e.preventDefault();
            const focusedItem = this.listEl.querySelector('.selector-list-item.focused');
            if (focusedItem) {
              this.handleItemSelect(focusedItem);
            }
          } else if (e.key === 'Escape') {
            this.closeDropdown();
          }
        });
      }
      
      toggleDropdown() {
        if (this.isOpen) {
          this.closeDropdown();
        } else {
          this.openDropdown();
        }
      }
      
      openDropdown() {
        this.isOpen = true;
        this.inputEl.classList.add('active');
        this.dropdownEl.classList.add('show');
        this.searchEl.focus();
        this.searchEl.value = '';
        this.filterMembers('');
      }
      
      closeDropdown() {
        this.isOpen = false;
        this.inputEl.classList.remove('active');
        this.dropdownEl.classList.remove('show');
        
        // Clear any focused items
        const focusedItem = this.listEl.querySelector('.selector-list-item.focused');
        if (focusedItem) {
          focusedItem.classList.remove('focused');
        }
      }
      
      loadTeamMembers() {
        this.showLoading();
        
        google.script.run
          .withSuccessHandler((result) => this.handleTeamMembersLoaded(result))
          .withFailureHandler((error) => this.handleError(error))
          .getActiveTeamMembers();
      }
      
      handleTeamMembersLoaded(result) {
        this.hideLoading();
        
        if (!result || !result.success) {
          console.error('Failed to load team members:', result ? result.message : 'Unknown error');
          this.showEmpty();
          return;
        }
        
        // Filter by status if needed
        this.teamMembers = result.data || [];
        if (this.config.statusFilter.length > 0) {
          this.teamMembers = this.teamMembers.filter(m => this.config.statusFilter.includes(m.status));
        }
        
        // Initial filtering
        this.filterMembers('');
      }
      
      filterMembers(searchTerm) {
        searchTerm = searchTerm.toLowerCase().trim();
        
        this.filteredMembers = !searchTerm ? this.teamMembers : this.teamMembers.filter(member => {
          const name = `${member.firstName || ''} ${member.lastName || ''}`.toLowerCase();
          const email = (member.email || '').toLowerCase();
          const position = (member.position || '').toLowerCase();
          
          return name.includes(searchTerm) || email.includes(searchTerm) || position.includes(searchTerm);
        });
        
        this.renderList();
      }
      
      renderList() {
        this.listEl.innerHTML = '';
        
        if (this.filteredMembers.length === 0) {
          this.showEmpty();
          return;
        }
        
        this.listEl.style.display = 'block';
        this.emptyEl.style.display = 'none';
        
        this.filteredMembers.forEach(member => {
          const isSelected = this.config.multiSelect
            ? this.selectedMembers.some(m => m.id === member.id)
            : this.selectedMembers[0]?.id === member.id;
            
          const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim() || 'Unknown';
          const initials = this.getInitials(fullName);
          
          // Determine status class
          let statusClass = 'selector-status-active';
          if (member.status === 'On Leave') {
            statusClass = 'selector-status-leave';
          } else if (member.status === 'Inactive') {
            statusClass = 'selector-status-inactive';
          }
          
          const item = document.createElement('li');
          item.className = `selector-list-item ${isSelected ? 'selected' : ''}`;
          item.dataset.id = member.id;
          item.dataset.email = member.email;
          item.dataset.name = fullName;
          item.innerHTML = `
            <div class="selector-list-item-avatar">${initials}</div>
            <div class="selector-list-item-info">
              <div class="selector-list-item-name">${fullName}</div>
              <div class="selector-list-item-position">${member.position || 'No position'}</div>
            </div>
            <div class="selector-status ${statusClass}" title="${member.status}"></div>
          `;
          
          item.addEventListener('click', () => this.handleItemSelect(item));
          this.listEl.appendChild(item);
        });
      }
      
      handleItemSelect(item) {
        const id = item.dataset.id;
        const name = item.dataset.name;
        const email = item.dataset.email;
        
        if (this.config.multiSelect) {
          const existingIndex = this.selectedMembers.findIndex(m => m.id === id);
          
          if (existingIndex >= 0) {
            // Deselect
            this.selectedMembers.splice(existingIndex, 1);
            item.classList.remove('selected');
          } else {
            // Select
            this.selectedMembers.push({ id, name, email });
            item.classList.add('selected');
          }
          
          this.updateSelectionDisplay();
          this.config.onChange(this.selectedMembers);
          
          // Keep dropdown open for multi-select
          this.searchEl.focus();
        } else {
          // Single select
          this.selectedMembers = [{ id, name, email }];
          this.hiddenInputEl.value = id;
          this.textEl.innerHTML = `<span>${name}</span>`;
          this.config.onChange(this.selectedMembers[0]);
          this.closeDropdown();
        }
      }
      
      updateSelectionDisplay() {
        if (!this.config.multiSelect) return;
        
        if (this.selectedMembers.length === 0) {
          this.textEl.innerHTML = `<span class="selector-placeholder">${this.config.placeholder}</span>`;
          this.hiddenInputEl.value = '';
        } else {
          const badgesHtml = this.selectedMembers.map(member => `
            <div class="selector-badge" data-id="${member.id}">
              ${member.name}
              <div class="selector-badge-remove" data-id="${member.id}">×</div>
            </div>
          `).join('');
          
          this.textEl.innerHTML = `<div class="selector-badges-container">${badgesHtml}</div>`;
          this.hiddenInputEl.value = this.selectedMembers.map(m => m.id).join(',');
          
          // Add event listeners to remove buttons
          this.textEl.querySelectorAll('.selector-badge-remove').forEach(btn => {
            btn.addEventListener('click', (e) => {
              e.stopPropagation(); // Prevent opening dropdown
              const id = btn.dataset.id;
              this.removeMember(id);
            });
          });
        }
      }
      
      removeMember(id) {
        const index = this.selectedMembers.findIndex(m => m.id === id);
        if (index >= 0) {
          this.selectedMembers.splice(index, 1);
          this.updateSelectionDisplay();
          
          // Update selection in dropdown if open
          if (this.isOpen) {
            const item = this.listEl.querySelector(`.selector-list-item[data-id="${id}"]`);
            if (item) item.classList.remove('selected');
          }
          
          this.config.onChange(this.selectedMembers);
        }
      }
      
      showLoading() {
        this.loadingEl.style.display = 'block';
        this.listEl.style.display = 'none';
        this.emptyEl.style.display = 'none';
      }
      
      hideLoading() {
        this.loadingEl.style.display = 'none';
        this.listEl.style.display = 'block';
      }
      
      showEmpty() {
        this.listEl.style.display = 'none';
        this.emptyEl.style.display = 'block';
      }
      
      getValue() {
        return this.config.multiSelect ? this.selectedMembers : this.selectedMembers[0];
      }
      
      setValue(value) {
        if (this.config.multiSelect && Array.isArray(value)) {
          this.selectedMembers = value;
        } else if (!this.config.multiSelect && value) {
          this.selectedMembers = [value];
        } else {
          this.selectedMembers = [];
        }
        
        this.updateSelectionDisplay();
        this.config.onChange(this.getValue());
      }
      
      clearSelection() {
        this.selectedMembers = [];
        this.hiddenInputEl.value = '';
        this.textEl.innerHTML = `<span class="selector-placeholder">${this.config.placeholder}</span>`;
        
        // Update list if visible
        if (this.isOpen) {
          this.listEl.querySelectorAll('.selector-list-item.selected').forEach(item => {
            item.classList.remove('selected');
          });
        }
        
        this.config.onChange(this.config.multiSelect ? [] : null);
      }
      
      getInitials(name) {
        if (!name) return '?';
        
        return name
          .split(' ')
          .map(n => n[0])
          .join('')
          .substring(0, 2)
          .toUpperCase();
      }
      
      handleError(error) {
        console.error('Error:', error);
        this.hideLoading();
        this.showEmpty();
      }
    }
    
    // Initialize selector when included in a page
    function initializeTeamMemberSelector(options) {
      return new TeamMemberSelector(options);
    }
    
    // Expose to parent window if in iframe
    if (window.parent && window !== window.parent) {
      window.parent.initializeTeamMemberSelector = initializeTeamMemberSelector;
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
    }
    
    /* Layout */
    .app-container {
      display: flex;
      min-height: 100vh;
      position: relative;
    }
    
    .content-container {
      flex: 1;
      padding: 1.5rem;
      max-width: 1200px;
      margin: 0 auto;
    }
    
    /* Content Cards */
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      padding: 1.25rem;
      position: relative;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--info));
    }
    
    .card-title {
      margin: 0;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      background: var(--primary);
      color: white;
      border-radius: 8px;
      margin-right: 0.75rem;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Tabs */
    .nav-tabs {
      border-bottom: none;
    }
    
    .nav-tabs .nav-item {
      margin-right: 1rem;
    }
    
    .nav-tabs .nav-link {
      border: none;
      padding: 0.75rem 0.5rem;
      color: var(--text-secondary);
      position: relative;
      transition: var(--transition);
      font-weight: 500;
      background-color: transparent;
    }
    
    .nav-tabs .nav-link::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: linear-gradient(to right, var(--primary), var(--info));
      transform: scaleX(0);
      transition: transform 0.3s;
    }
    
    .nav-tabs .nav-link:hover {
      color: var(--primary);
    }
    
    .nav-tabs .nav-link.active {
      color: var(--primary);
      background-color: transparent;
    }
    
    .nav-tabs .nav-link.active::after {
      transform: scaleX(1);
    }
    
    /* Form Controls */
    .form-label {
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: var(--text-primary);
    }
    
    .form-control, .form-select {
      border-radius: 8px;
      padding: 0.65rem 1rem;
      border: 1px solid var(--border-color);
      background-color: rgba(255, 255, 255, 0.8);
      transition: var(--transition);
    }
    
    .form-control:focus, .form-select:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.25rem var(--primary-light);
    }
    
    .form-check-input {
      width: 1.25em;
      height: 1.25em;
      margin-top: 0.1em;
      background-color: white;
      border: 1px solid var(--border-color);
      transition: var(--transition);
    }
    
    .form-check-input:checked {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    /* Form Sections */
    .form-section {
      background: rgba(255, 255, 255, 0.5);
      border-radius: var(--border-radius);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      border: 1px solid var(--border-color);
      transition: var(--transition);
    }
    
    .form-section:hover {
      box-shadow: var(--shadow-sm);
      background: rgba(255, 255, 255, 0.8);
    }
    
    .form-section-title {
      color: var(--primary);
      font-weight: 600;
      margin-bottom: 1.25rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      align-items: center;
      font-size: 1.1rem;
    }
    
    .form-section-icon {
      margin-right: 0.75rem;
      width: 28px;
      height: 28px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--primary);
      color: white;
      border-radius: 6px;
    }
    
    /* Buttons */
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.25rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      border-color: var(--secondary);
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      color: white;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-icon {
      width: 36px;
      height: 36px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0;
      font-size: 1rem;
    }
    
    /* Team Member Selection */
    .team-member-selection {
      margin-bottom: 1.5rem;
    }
    
    .team-member-header {
      display: flex;
      align-items: center;
      margin-bottom: 1rem;
    }
    
    .team-member-avatar {
      width: 64px;
      height: 64px;
      border-radius: 50%;
      background: linear-gradient(to right bottom, var(--primary), var(--info));
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 1.5rem;
      margin-right: 1rem;
      flex-shrink: 0;
    }
    
    .team-member-details {
      flex-grow: 1;
    }
    
    .team-member-name {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .team-member-position {
      color: var(--text-secondary);
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }
    
    .status-badge {
      display: inline-block;
      padding: 0.25em 0.75em;
      font-size: 0.75rem;
      font-weight: 600;
      line-height: 1.5;
      border-radius: 30px;
    }
    
    .status-active {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .status-leave {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .status-inactive {
      background-color: rgba(108, 117, 125, 0.1);
      color: var(--text-secondary);
    }
    
    /* Notes Editor */
    .note-editor {
      border: 1px solid var(--border-color);
      border-radius: 8px;
      overflow: hidden;
      background-color: white;
      transition: var(--transition);
    }
    
    .note-editor:focus-within {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.25rem var(--primary-light);
    }
    
    .note-editor-toolbar {
      padding: 0.5rem;
      border-bottom: 1px solid var(--border-color);
      background-color: rgba(248, 249, 250, 0.6);
      display: flex;
      flex-wrap: wrap;
      gap: 0.25rem;
    }
    
    .note-editor-btn {
      width: 32px;
      height: 32px;
      padding: 0;
      border: none;
      background-color: transparent;
      color: var(--text-secondary);
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: var(--transition);
      cursor: pointer;
    }
    
    .note-editor-btn:hover {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .note-editor-content {
      padding: 0.75rem;
      min-height: 150px;
      outline: none;
    }
    
    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s ease;
    }
    
    .spinner {
      width: 48px;
      height: 48px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      max-width: 350px;
      min-width: 300px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--shadow-md);
      padding: 1rem;
      z-index: 9998;
      transform: translateX(120%);
      transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
      border-left: 4px solid var(--primary);
      display: flex;
      align-items: flex-start;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      margin-right: 0.75rem;
      font-size: 1.25rem;
    }
    
    .notification-content {
      flex-grow: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .notification-message {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .notification-close {
      border: none;
      background: none;
      color: var(--text-secondary);
      opacity: 0.5;
      transition: var(--transition);
      padding: 0;
      margin-left: 0.75rem;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Meeting History */
    .meeting-history {
      margin-top: 1.5rem;
    }
    
    .timeline-container {
      position: relative;
      padding-left: 40px;
    }
    
    .timeline-container::before {
      content: '';
      position: absolute;
      top: 24px;
      left: 19px;
      height: calc(100% - 48px);
      width: 2px;
      background-color: var(--border-color);
    }
    
    .timeline-item {
      position: relative;
      margin-bottom: 1.5rem;
    }
    
    .timeline-item:last-child {
      margin-bottom: 0;
    }
    
    .timeline-icon {
      position: absolute;
      left: -40px;
      top: 0;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--primary-light);
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 2;
    }
    
    .timeline-content {
      background-color: white;
      border-radius: 8px;
      border: 1px solid var(--border-color);
      padding: 1rem;
      transition: var(--transition);
    }
    
    .timeline-content:hover {
      box-shadow: var(--shadow-sm);
    }
    
    .timeline-date {
      font-size: 0.875rem;
      color: var(--text-secondary);
      margin-bottom: 0.5rem;
      display: flex;
      align-items: center;
    }
    
    .timeline-date i {
      margin-right: 0.5rem;
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.3s ease forwards;
    }
    
    .staggered > * {
      opacity: 0;
    }
    
    .staggered > *:nth-child(1) { animation: fadeIn 0.5s ease forwards 0.1s; }
    .staggered > *:nth-child(2) { animation: fadeIn 0.5s ease forwards 0.2s; }
    .staggered > *:nth-child(3) { animation: fadeIn 0.5s ease forwards 0.3s; }
    .staggered > *:nth-child(4) { animation: fadeIn 0.5s ease forwards 0.4s; }
    .staggered > *:nth-child(5) { animation: fadeIn 0.5s ease forwards 0.5s; }
    .staggered > *:nth-child(6) { animation: fadeIn 0.5s ease forwards 0.6s; }
    
    /* Responsive Adjustments */
    @media (max-width: 768px) {
      .card-body, .form-section {
        padding: 1rem;
      }
      
      .team-member-avatar {
        width: 50px;
        height: 50px;
        font-size: 1.25rem;
      }
      
      .team-member-name {
        font-size: 1.1rem;
      }
      
      .card-title-icon {
        width: 28px;
        height: 28px;
        margin-right: 0.5rem;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="app-container">
    <div class="content-container">
      <div class="content-card fade-in">
        <div class="card-header">
          <h5 class="card-title">
            <div class="card-title-icon">
              <i class="fas fa-comments"></i>
            </div>
            <span id="form-title">New Manager One-on-One Session</span>
          </h5>
          
          <div>
            <button type="button" id="back-button" class="btn btn-outline-primary">
              <i class="fas fa-arrow-left me-2"></i> Back to Dashboard
            </button>
          </div>
        </div>
        
        <div class="card-body">
          <form id="manager-one-on-one-form">
            <input type="hidden" id="session-id" value="">
            
            <!-- Team Member Selection -->
            <div class="team-member-selection" id="team-member-selection-container">
              <div class="form-section">
                <h6 class="form-section-title">
                  <span class="form-section-icon"><i class="fas fa-user"></i></span>
                  Select Team Member
                </h6>
                
                <div class="mb-3">
                  <div class="row">
                    <div class="col-md-6">
                      <label for="team-member" class="form-label">Team Member</label>
                      <select class="form-select" id="team-member" required>
                        <option value="">Select Team Member</option>
                        <!-- Team members will be loaded dynamically -->
                      </select>
                    </div>
                    
                    <div class="col-md-6">
                      <label for="session-date" class="form-label">Session Date</label>
                      <input type="text" class="form-control" id="session-date" placeholder="Select date" required>
                    </div>
                  </div>
                </div>
                
                <div id="team-member-details" style="display:none;">
                  <div class="team-member-header">
                    <div class="team-member-avatar" id="member-initials">TM</div>
                    <div class="team-member-details">
                      <h3 class="team-member-name" id="member-name">Team Member Name</h3>
                      <div class="team-member-position" id="member-position">Position</div>
                      <div>
                        <span class="status-badge status-active" id="member-status">Active</span>
                      </div>
                    </div>
                  </div>
                  
                  <div class="row g-3">
                    <div class="col-md-6">
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="is-scheduled" name="is-scheduled" checked>
                        <label class="form-check-label" for="is-scheduled">
                          This is a scheduled session
                        </label>
                      </div>
                    </div>
                    
                    <div class="col-md-6">
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="send-calendar-invite" name="send-calendar-invite">
                        <label class="form-check-label" for="send-calendar-invite">
                          Send calendar invitation
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Session Details Tabs -->
            <ul class="nav nav-tabs mb-3" id="sessionTabs" role="tablist">
              <li class="nav-item" role="presentation">
                <button class="nav-link active" id="preparation-tab" data-bs-toggle="tab" data-bs-target="#preparation" type="button" role="tab" aria-controls="preparation" aria-selected="true">
                  <i class="fas fa-clipboard-list me-2"></i>Preparation
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="agenda-tab" data-bs-toggle="tab" data-bs-target="#agenda" type="button" role="tab" aria-controls="agenda" aria-selected="false">
                  <i class="fas fa-tasks me-2"></i>Agenda
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="notes-tab" data-bs-toggle="tab" data-bs-target="#notes" type="button" role="tab" aria-controls="notes" aria-selected="false">
                  <i class="fas fa-sticky-note me-2"></i>Notes
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="action-items-tab" data-bs-toggle="tab" data-bs-target="#action-items" type="button" role="tab" aria-controls="action-items" aria-selected="false">
                  <i class="fas fa-check-circle me-2"></i>Action Items
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="follow-up-tab" data-bs-toggle="tab" data-bs-target="#follow-up" type="button" role="tab" aria-controls="follow-up" aria-selected="false">
                  <i class="fas fa-calendar-check me-2"></i>Follow-Up
                </button>
              </li>
            </ul>
            
            <!-- Tab Content -->
            <div class="tab-content staggered" id="sessionTabsContent">
              <!-- Preparation Tab -->
              <div class="tab-pane fade show active" id="preparation" role="tabpanel" aria-labelledby="preparation-tab">
                <div class="form-section">
                  <h6 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-clipboard-check"></i></span>
                    Meeting Preparation
                  </h6>
                  
                  <div class="mb-4">
                    <div class="row g-3">
                      <div class="col-md-12">
                        <label for="preparation-notes" class="form-label">Preparation Notes</label>
                        <textarea class="form-control" id="preparation-notes" rows="3" placeholder="Topics to discuss, performance updates, relevant background information..."></textarea>
                      </div>
                    </div>
                  </div>
                  
                  <h6 class="mb-3">Pre-Meeting Checklist</h6>
                  <div class="row g-2 mb-4">
                    <div class="col-md-6">
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="reviewed-previous-notes">
                        <label class="form-check-label" for="reviewed-previous-notes">
                          Reviewed previous one-on-one notes
                        </label>
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="reviewed-performance-data">
                        <label class="form-check-label" for="reviewed-performance-data">
                          Reviewed recent performance data
                        </label>
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="gathered-feedback">
                        <label class="form-check-label" for="gathered-feedback">
                          Gathered peer/stakeholder feedback
                        </label>
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="prepared-questions">
                        <label class="form-check-label" for="prepared-questions">
                          Prepared open-ended questions
                        </label>
                      </div>
                    </div>
                  </div>
                  
                  <h6 class="mb-3">Key Discussion Topics</h6>
                  <div id="topics-container">
                    <div class="topic-item mb-2 row g-2">
                      <div class="col-md-11">
                        <input type="text" class="form-control topic-input" placeholder="Enter a topic to discuss...">
                      </div>
                      <div class="col-md-1 d-flex align-items-center">
                        <button type="button" class="btn btn-outline-danger btn-sm btn-icon remove-topic" style="display: none;">
                          <i class="fas fa-times"></i>
                        </button>
                      </div>
                    </div>
                  </div>
                  
                  <button type="button" class="btn btn-outline-primary btn-sm mt-2" id="add-topic-btn">
                    <i class="fas fa-plus me-1"></i> Add Topic
                  </button>
                </div>
              </div>
              
              <!-- Agenda Tab -->
              <div class="tab-pane fade" id="agenda" role="tabpanel" aria-labelledby="agenda-tab">
                <div class="form-section">
                  <h6 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-tasks"></i></span>
                    Meeting Agenda
                  </h6>
                  
                  <div class="mb-4">
                    <label for="meeting-purpose" class="form-label">Meeting Purpose</label>
                    <select class="form-select" id="meeting-purpose">
                      <option value="">Select Purpose</option>
                      <option value="Regular Check-in">Regular Check-in</option>
                      <option value="Performance Review">Performance Review</option>
                      <option value="Goal Setting">Goal Setting</option>
                      <option value="Career Development">Career Development</option>
                      <option value="Project Discussion">Project Discussion</option>
                      <option value="Problem Solving">Problem Solving</option>
                      <option value="Other">Other</option>
                    </select>
                  </div>
                  
                  <div class="mb-4">
                    <label for="agenda-template" class="form-label">Agenda Template</label>
                    <select class="form-select" id="agenda-template">
                      <option value="">Select Template</option>
                      <option value="standard">Standard Check-in</option>
                      <option value="performance">Performance Discussion</option>
                      <option value="development">Development Discussion</option>
                      <option value="custom">Custom Agenda</option>
                    </select>
                  </div>
                  
                  <div id="agenda-items-container">
                    <!-- Agenda items will be populated here -->
                  </div>
                  
                  <div class="mb-4">
                    <label for="agenda-notes" class="form-label">Agenda Notes</label>
                    <div class="note-editor">
                      <div class="note-editor-toolbar">
                        <button type="button" class="note-editor-btn" data-command="bold" title="Bold">
                          <i class="fas fa-bold"></i>
                        </button>
                        <button type="button" class="note-editor-btn" data-command="italic" title="Italic">
                          <i class="fas fa-italic"></i>
                        </button>
                        <button type="button" class="note-editor-btn" data-command="underline" title="Underline">
                          <i class="fas fa-underline"></i>
                        </button>
                        <button type="button" class="note-editor-btn" data-command="insertUnorderedList" title="Bullet List">
                          <i class="fas fa-list-ul"></i>
                        </button>
                        <button type="button" class="note-editor-btn" data-command="insertOrderedList" title="Numbered List">
                          <i class="fas fa-list-ol"></i>
                        </button>
                      </div>
                      <div class="note-editor-content" id="agenda-notes" contenteditable="true"></div>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Notes Tab -->
              <div class="tab-pane fade" id="notes" role="tabpanel" aria-labelledby="notes-tab">
                <div class="form-section">
                  <h6 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-sticky-note"></i></span>
                    Session Notes
                  </h6>
                  
                  <div class="mb-4">
                    <label for="session-notes" class="form-label">Meeting Notes</label>
                    <div class="note-editor">
                      <div class="note-editor-toolbar">
                        <button type="button" class="note-editor-btn" data-command="bold" title="Bold">
                          <i class="fas fa-bold"></i>
                        </button>
                        <button type="button" class="note-editor-btn" data-command="italic" title="Italic">
                          <i class="fas fa-italic"></i>
                        </button>
                        <button type="button" class="note-editor-btn" data-command="underline" title="Underline">
                          <i class="fas fa-underline"></i>
                        </button>
                        <button type="button" class="note-editor-btn" data-command="insertUnorderedList" title="Bullet List">
                          <i class="fas fa-list-ul"></i>
                        </button>
                        <button type="button" class="note-editor-btn" data-command="insertOrderedList" title="Numbered List">
                          <i class="fas fa-list-ol"></i>
                        </button>
                      </div>
                      <div class="note-editor-content" id="session-notes" contenteditable="true"></div>
                    </div>
                  </div>
                  
                  <div class="row g-3">
                    <div class="col-md-6">
                      <label for="team-member-feedback" class="form-label">Team Member Feedback</label>
                      <textarea class="form-control" id="team-member-feedback" rows="3" placeholder="Feedback provided by the team member..."></textarea>
                    </div>
                    <div class="col-md-6">
                      <label for="manager-feedback" class="form-label">Manager Feedback</label>
                      <textarea class="form-control" id="manager-feedback" rows="3" placeholder="Feedback provided to the team member..."></textarea>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Action Items Tab -->
              <div class="tab-pane fade" id="action-items" role="tabpanel" aria-labelledby="action-items-tab">
                <div class="form-section">
                  <h6 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-check-circle"></i></span>
                    Action Items
                  </h6>
                  
                  <div id="action-items-container" class="mb-4">
                    <div class="action-item mb-3 row g-2">
                      <div class="col-md-8">
                        <input type="text" class="form-control action-item-description" placeholder="Action item description...">
                      </div>
                      <div class="col-md-3">
                        <select class="form-select action-item-owner">
                          <option value="team-member">Team Member</option>
                          <option value="manager">Manager</option>
                          <option value="both">Both</option>
                        </select>
                      </div>
                      <div class="col-md-1 d-flex align-items-center">
                        <button type="button" class="btn btn-outline-danger btn-sm btn-icon remove-action-item" style="display: none;">
                          <i class="fas fa-times"></i>
                        </button>
                      </div>
                    </div>
                  </div>
                  
                  <button type="button" class="btn btn-outline-primary btn-sm" id="add-action-item-btn">
                    <i class="fas fa-plus me-1"></i> Add Action Item
                  </button>
                  
                  <div class="form-check mt-3">
                    <input class="form-check-input" type="checkbox" id="create-follow-up-tasks">
                    <label class="form-check-label" for="create-follow-up-tasks">
                      Create follow-up tasks from action items
                    </label>
                  </div>
                </div>
              </div>
              
              <!-- Follow-Up Tab -->
              <div class="tab-pane fade" id="follow-up" role="tabpanel" aria-labelledby="follow-up-tab">
                <div class="form-section">
                  <h6 class="form-section-title">
                    <span class="form-section-icon"><i class="fas fa-calendar-check"></i></span>
                    Follow-Up Plan
                  </h6>
                  
                  <div class="row g-3">
                    <div class="col-md-6">
                      <label for="next-session-date" class="form-label">Next Session Date</label>
                      <input type="text" class="form-control" id="next-session-date" placeholder="Select date">
                    </div>
                    
                    <div class="col-md-6">
                      <label for="session-frequency" class="form-label">Session Frequency</label>
                      <select class="form-select" id="session-frequency">
                        <option value="weekly">Weekly</option>
                        <option value="biweekly" selected>Bi-weekly</option>
                        <option value="monthly">Monthly</option>
                        <option value="custom">Custom</option>
                      </select>
                    </div>
                    
                    <div class="col-12">
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="schedule-next-session">
                        <label class="form-check-label" for="schedule-next-session">
                          Schedule next session automatically
                        </label>
                      </div>
                    </div>
                  </div>
                  
                  <div class="mt-4">
                    <label for="follow-up-notes" class="form-label">Follow-Up Notes</label>
                    <textarea class="form-control" id="follow-up-notes" rows="3" placeholder="Additional follow-up notes, reminders or context for the next session..."></textarea>
                  </div>
                </div>
                
                <!-- Meeting History -->
                <div class="meeting-history" id="meeting-history">
                  <h6 class="mb-3">Previous Session History</h6>
                  
                  <div class="timeline-container" id="history-timeline">
                    <!-- This will be populated with past meetings -->
                    <div class="empty-state text-center py-3 text-secondary" id="no-history-message">
                      <i class="fas fa-history fs-4 mb-2"></i>
                      <p class="mb-0">No previous sessions found</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Form Actions -->
            <div class="d-flex justify-content-between mt-4">
              <button type="button" class="btn btn-outline-secondary" id="cancel-btn">
                Cancel
              </button>
              
              <div>
                <button type="button" class="btn btn-outline-primary me-2" id="save-draft-btn">
                  <i class="fas fa-save me-2"></i> Save Draft
                </button>
                <button type="submit" class="btn btn-primary" id="save-btn">
                  <i class="fas fa-check me-2"></i> Save Session
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let sessionId = '';
    let teamMembersList = [];
    let sessionData = {};
    let datePicker = null;
    let nextDatePicker = null;
    let isNewSession = true;
    
    // Document ready
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize form
      initializeForm();
      
      // Setup event listeners
      setupEventListeners();
      
      // Initialize date pickers
      initializeDatePickers();
      
      // Setup rich text editor
      setupRichTextEditors();
    });
    
    function initializeForm() {
      showLoading();
      
      // Check if we're editing an existing session or creating a new one
      const urlParams = new URLSearchParams(window.location.search);
      sessionId = urlParams.get('id');
      
      if (sessionId) {
        isNewSession = false;
        document.getElementById('form-title').textContent = 'Edit Manager One-on-One Session';
        loadSessionData(sessionId);
      } else {
        isNewSession = true;
        // Set default date to today
        const today = new Date();
        if (datePicker) {
          datePicker.setDate(today);
        }
        loadTeamMembers();
      }
    }
    
    function setupEventListeners() {
      // Form submission
      document.getElementById('manager-one-on-one-form').addEventListener('submit', function(e) {
        e.preventDefault();
        saveSession();
      });
      
      // Cancel button
      document.getElementById('cancel-btn').addEventListener('click', function() {
        navigateToDashboard();
      });
      
      // Back button
      document.getElementById('back-button').addEventListener('click', function() {
        navigateToDashboard();
      });
      
      // Save draft button
      document.getElementById('save-draft-btn').addEventListener('click', function() {
        saveDraft();
      });
      
      // Team member change
      document.getElementById('team-member').addEventListener('change', function() {
        const selectedMemberId = this.value;
        if (selectedMemberId) {
          displayTeamMemberDetails(selectedMemberId);
        } else {
          hideTeamMemberDetails();
        }
      });
      
      // Add topic button
      document.getElementById('add-topic-btn').addEventListener('click', addNewTopic);
      
      // Add action item button
      document.getElementById('add-action-item-btn').addEventListener('click', addNewActionItem);
      
      // Agenda template change
      document.getElementById('agenda-template').addEventListener('change', loadAgendaTemplate);
    }
    
    function initializeDatePickers() {
      // Initialize session date picker
      datePicker = flatpickr('#session-date', {
        dateFormat: 'Y-m-d',
        allowInput: true
      });
      
      // Initialize next session date picker
      nextDatePicker = flatpickr('#next-session-date', {
        dateFormat: 'Y-m-d',
        allowInput: true,
        minDate: 'today'
      });
    }
    
    function setupRichTextEditors() {
      // Setup editor toolbar buttons
      document.querySelectorAll('.note-editor-btn').forEach(button => {
        button.addEventListener('click', function() {
          const command = this.getAttribute('data-command');
          document.execCommand(command, false, null);
        });
      });
    }
    
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(handleTeamMembersLoaded)
        .withFailureHandler(handleError)
        .getActiveTeamMembers();
    }
    
    function handleTeamMembersLoaded(result) {
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load team members', 'error');
        hideLoading();
        return;
      }
      
      teamMembersList = result.data || [];
      populateTeamMembersDropdown(teamMembersList);
      
      if (!sessionId) {
        hideLoading();
      }
    }
    
    function populateTeamMembersDropdown(teamMembers) {
      const dropdown = document.getElementById('team-member');
      dropdown.innerHTML = '<option value="">Select Team Member</option>';
      
      teamMembers.forEach(member => {
        const option = document.createElement('option');
        option.value = member.id;
        
        // Create display name from first and last name
        const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim();
        option.textContent = fullName || member.email;
        
        dropdown.appendChild(option);
      });
    }
    
    function displayTeamMemberDetails(memberId) {
      const member = teamMembersList.find(m => m.id === memberId);
      if (!member) return;
      
      // Display container
      document.getElementById('team-member-details').style.display = 'block';
      
      // Set member details
      const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim() || 'N/A';
      document.getElementById('member-name').textContent = fullName;
      document.getElementById('member-position').textContent = member.position || 'No position specified';
      
      // Show status badge with appropriate class
      const statusBadge = document.getElementById('member-status');
      statusBadge.textContent = member.status || 'Unknown';
      statusBadge.className = 'status-badge';
      
      if (member.status === 'Active') {
        statusBadge.classList.add('status-active');
      } else if (member.status === 'On Leave') {
        statusBadge.classList.add('status-leave');
      } else if (member.status === 'Inactive') {
        statusBadge.classList.add('status-inactive');
      }
      
      // Set initials
      document.getElementById('member-initials').textContent = getInitials(fullName);
      
      // Load member history
      loadMemberSessionHistory(memberId);
    }
    
    function hideTeamMemberDetails() {
      document.getElementById('team-member-details').style.display = 'none';
    }
    
    function getInitials(name) {
      if (!name || name === 'N/A') return '?';
      return name
        .split(' ')
        .map(n => n[0])
        .join('')
        .toUpperCase()
        .substring(0, 2);
    }
    
    function loadSessionData(id) {
      google.script.run
        .withSuccessHandler(handleSessionLoaded)
        .withFailureHandler(handleError)
        .getManagerOneOnOneSession(id);
    }
    
    function handleSessionLoaded(result) {
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load session', 'error');
        hideLoading();
        return;
      }
      
      sessionData = result.data;
      
      // First load team members, then populate the form
      loadTeamMembers();
      
      // Load session data into form
      populateSessionForm(sessionData);
    }
    
    function populateSessionForm(session) {
      // Set basic info
      document.getElementById('session-id').value = session.id;
      
      if (datePicker && session.date) {
        datePicker.setDate(new Date(session.date));
      }
      
      if (session.teamMemberId) {
        document.getElementById('team-member').value = session.teamMemberId;
        displayTeamMemberDetails(session.teamMemberId);
      }
      
      // Set checkboxes
      document.getElementById('is-scheduled').checked = session.isScheduled !== false;
      document.getElementById('reviewed-previous-notes').checked = session.reviewedPreviousNotes === true;
      document.getElementById('reviewed-performance-data').checked = session.reviewedPerformanceData === true;
      document.getElementById('gathered-feedback').checked = session.gatheredFeedback === true;
      document.getElementById('prepared-questions').checked = session.preparedQuestions === true;
      document.getElementById('send-calendar-invite').checked = session.sendCalendarInvite === true;
      document.getElementById('create-follow-up-tasks').checked = session.createFollowUpTasks === true;
      document.getElementById('schedule-next-session').checked = session.scheduleNextSession === true;
      
      // Set select fields
      if (session.meetingPurpose) {
        document.getElementById('meeting-purpose').value = session.meetingPurpose;
      }
      
      if (session.sessionFrequency) {
        document.getElementById('session-frequency').value = session.sessionFrequency;
      }
      
      // Set text fields
      document.getElementById('preparation-notes').value = session.preparationNotes || '';
      document.getElementById('team-member-feedback').value = session.teamMemberFeedback || '';
      document.getElementById('manager-feedback').value = session.managerFeedback || '';
      document.getElementById('follow-up-notes').value = session.followUpNotes || '';
      
      // Set rich text fields
      document.getElementById('agenda-notes').innerHTML = session.agendaNotes || '';
      document.getElementById('session-notes').innerHTML = session.sessionNotes || '';
      
      // Set next session date
      if (nextDatePicker && session.nextSessionDate) {
        nextDatePicker.setDate(new Date(session.nextSessionDate));
      }
      
      // Populate discussion topics
      if (session.topics && session.topics.length > 0) {
        const topicsContainer = document.getElementById('topics-container');
        topicsContainer.innerHTML = ''; // Clear existing topics
        
        session.topics.forEach(topic => {
          addNewTopic(topic);
        });
      }
      
      // Populate action items
      if (session.actionItems && session.actionItems.length > 0) {
        const actionItemsContainer = document.getElementById('action-items-container');
        actionItemsContainer.innerHTML = ''; // Clear existing items
        
        session.actionItems.forEach(item => {
          addNewActionItem(item);
        });
      }
      
      hideLoading();
    }
    
    function loadMemberSessionHistory(memberId) {
      const historyTimeline = document.getElementById('history-timeline');
      const noHistoryMessage = document.getElementById('no-history-message');
      
      // Clear existing history items
      historyTimeline.innerHTML = '';
      historyTimeline.appendChild(noHistoryMessage);
      
      google.script.run
        .withSuccessHandler(function(result) {
          if (!result || !result.success) {
            return;
          }
          
          const history = result.data || [];
          
          if (history.length > 0) {
            noHistoryMessage.style.display = 'none';
            
            history.forEach((session, index) => {
              const timelineItem = createHistoryItem(session);
              historyTimeline.appendChild(timelineItem);
            });
          } else {
            noHistoryMessage.style.display = 'block';
          }
        })
        .withFailureHandler(function(error) {
          console.error('Failed to load session history:', error);
        })
        .getTeamMemberOneOnOneHistory(memberId);
    }
    
    function createHistoryItem(session) {
      const item = document.createElement('div');
      item.className = 'timeline-item';
      
      const formattedDate = formatDate(session.date);
      
      item.innerHTML = `
        <div class="timeline-icon">
          <i class="fas fa-calendar-check"></i>
        </div>
        <div class="timeline-content">
          <div class="timeline-date">
            <i class="far fa-calendar-alt"></i>
            ${formattedDate}
          </div>
          <div class="timeline-title fw-bold mb-2">${session.meetingPurpose || 'One-on-One Session'}</div>
          <div class="timeline-text text-secondary small">
            ${session.sessionNotes ? truncateHTML(session.sessionNotes, 100) : 'No notes recorded'}
          </div>
          <div class="text-end mt-2">
            <a href="#" class="btn btn-sm btn-link p-0 view-session-link" data-id="${session.id}">
              View Details
            </a>
          </div>
        </div>
      `;
      
      // Add event listener to view session link
      item.querySelector('.view-session-link').addEventListener('click', function(e) {
        e.preventDefault();
        const sessionId = this.getAttribute('data-id');
        navigateToSession(sessionId);
      });
      
      return item;
    }
    
    function navigateToSession(id) {
      google.script.run.showManagerOneOnOneForm(id);
      google.script.host.close();
    }
    
    function loadAgendaTemplate() {
      const templateType = document.getElementById('agenda-template').value;
      if (!templateType) return;
      
      const agendaContainer = document.getElementById('agenda-items-container');
      agendaContainer.innerHTML = '';
      
      let template = '';
      
      switch(templateType) {
        case 'standard':
          template = `
            <div class="mb-3 border-bottom pb-2">
              <div class="fw-bold mb-1">1. Personal Check-in (5 min)</div>
              <div class="text-secondary small">How are you doing? Anything new or exciting happening?</div>
            </div>
            <div class="mb-3 border-bottom pb-2">
              <div class="fw-bold mb-1">2. Current Projects & Updates (15 min)</div>
              <div class="text-secondary small">Status updates on ongoing projects, challenges, and successes</div>
            </div>
            <div class="mb-3 border-bottom pb-2">
              <div class="fw-bold mb-1">3. Feedback & Support (10 min)</div>
              <div class="text-secondary small">Areas where you need support or have questions</div>
            </div>
            <div class="mb-3">
              <div class="fw-bold mb-1">4. Next Steps & Action Items (5 min)</div>
              <div class="text-secondary small">Agree on action items and expectations before next meeting</div>
            </div>
          `;
          break;
          
        case 'performance':
          template = `
            <div class="mb-3 border-bottom pb-2">
              <div class="fw-bold mb-1">1. Performance Metrics Review (10 min)</div>
              <div class="text-secondary small">Review key metrics and progress against goals</div>
            </div>
            <div class="mb-3 border-bottom pb-2">
              <div class="fw-bold mb-1">2. Strengths Discussion (10 min)</div>
              <div class="text-secondary small">Areas where you've excelled and how to leverage those strengths</div>
            </div>
            <div class="mb-3 border-bottom pb-2">
              <div class="fw-bold mb-1">3. Growth Opportunities (10 min)</div>
              <div class="text-secondary small">Areas for improvement and development plans</div>
            </div>
            <div class="mb-3">
              <div class="fw-bold mb-1">4. Performance Goals & Action Plan (10 min)</div>
              <div class="text-secondary small">Set specific performance goals and action steps</div>
            </div>
          `;
          break;
          
        case 'development':
          template = `
            <div class="mb-3 border-bottom pb-2">
              <div class="fw-bold mb-1">1. Career Aspirations (10 min)</div>
              <div class="text-secondary small">Long-term goals and career vision discussion</div>
            </div>
            <div class="mb-3 border-bottom pb-2">
              <div class="fw-bold mb-1">2. Skills Assessment (10 min)</div>
              <div class="text-secondary small">Review current skills and identify skill gaps</div>
            </div>
            <div class="mb-3 border-bottom pb-2">
              <div class="fw-bold mb-1">3. Development Opportunities (10 min)</div>
              <div class="text-secondary small">Training, mentoring, and growth opportunities</div>
            </div>
            <div class="mb-3">
              <div class="fw-bold mb-1">4. Development Action Plan (10 min)</div>
              <div class="text-secondary small">Create specific development goals and timeline</div>
            </div>
          `;
          break;
          
        case 'custom':
          template = `
            <div class="mb-3">
              <label class="form-label">Custom Agenda Items</label>
              <textarea class="form-control" id="custom-agenda-items" rows="6" placeholder="Enter your custom agenda items here..."></textarea>
            </div>
          `;
          break;
      }
      
      agendaContainer.innerHTML = template;
    }
    
    function addNewTopic(existingTopic = null) {
      const topicsContainer = document.getElementById('topics-container');
      const topicItems = topicsContainer.querySelectorAll('.topic-item');
      
      // Show remove buttons for existing topics
      topicItems.forEach(item => {
        item.querySelector('.remove-topic').style.display = 'block';
      });
      
      // Create new topic item
      const topicItem = document.createElement('div');
      topicItem.className = 'topic-item mb-2 row g-2';
      
      topicItem.innerHTML = `
        <div class="col-md-11">
          <input type="text" class="form-control topic-input" placeholder="Enter a topic to discuss..." value="${existingTopic || ''}">
        </div>
        <div class="col-md-1 d-flex align-items-center">
          <button type="button" class="btn btn-outline-danger btn-sm btn-icon remove-topic" ${topicItems.length === 0 ? 'style="display: none;"' : ''}>
            <i class="fas fa-times"></i>
          </button>
        </div>
      `;
      
      topicItem.querySelector('.remove-topic').addEventListener('click', function() {
        topicItem.remove();
        updateTopicRemoveButtons();
      });
      
      topicsContainer.appendChild(topicItem);
    }
    
    function updateTopicRemoveButtons() {
      const topicsContainer = document.getElementById('topics-container');
      const topicItems = topicsContainer.querySelectorAll('.topic-item');
      
      if (topicItems.length === 1) {
        topicItems[0].querySelector('.remove-topic').style.display = 'none';
      } else {
        topicItems.forEach(item => {
          item.querySelector('.remove-topic').style.display = 'block';
        });
      }
    }
    
    function addNewActionItem(existingItem = null) {
      const actionItemsContainer = document.getElementById('action-items-container');
      const actionItems = actionItemsContainer.querySelectorAll('.action-item');
      
      // Show remove buttons for existing items
      actionItems.forEach(item => {
        item.querySelector('.remove-action-item').style.display = 'block';
      });
      
      // Create new action item
      const actionItem = document.createElement('div');
      actionItem.className = 'action-item mb-3 row g-2';
      
      actionItem.innerHTML = `
        <div class="col-md-8">
          <input type="text" class="form-control action-item-description" placeholder="Action item description..." value="${existingItem ? existingItem.description || '' : ''}">
        </div>
        <div class="col-md-3">
          <select class="form-select action-item-owner">
            <option value="team-member" ${existingItem && existingItem.owner === 'team-member' ? 'selected' : ''}>Team Member</option>
            <option value="manager" ${existingItem && existingItem.owner === 'manager' ? 'selected' : ''}>Manager</option>
            <option value="both" ${existingItem && existingItem.owner === 'both' ? 'selected' : ''}>Both</option>
          </select>
        </div>
        <div class="col-md-1 d-flex align-items-center">
          <button type="button" class="btn btn-outline-danger btn-sm btn-icon remove-action-item" ${actionItems.length === 0 ? 'style="display: none;"' : ''}>
            <i class="fas fa-times"></i>
          </button>
        </div>
      `;
      
      actionItem.querySelector('.remove-action-item').addEventListener('click', function() {
        actionItem.remove();
        updateActionItemRemoveButtons();
      });
      
      actionItemsContainer.appendChild(actionItem);
    }
    
    function updateActionItemRemoveButtons() {
      const actionItemsContainer = document.getElementById('action-items-container');
      const actionItems = actionItemsContainer.querySelectorAll('.action-item');
      
      if (actionItems.length === 1) {
        actionItems[0].querySelector('.remove-action-item').style.display = 'none';
      } else {
        actionItems.forEach(item => {
          item.querySelector('.remove-action-item').style.display = 'block';
        });
      }
    }
    
    function collectFormData() {
      const formData = {
        id: document.getElementById('session-id').value || null,
        teamMemberId: document.getElementById('team-member').value,
        date: datePicker ? datePicker.selectedDates[0] : null,
        isScheduled: document.getElementById('is-scheduled').checked,
        sendCalendarInvite: document.getElementById('send-calendar-invite').checked,
        
        // Preparation tab
        preparationNotes: document.getElementById('preparation-notes').value,
        reviewedPreviousNotes: document.getElementById('reviewed-previous-notes').checked,
        reviewedPerformanceData: document.getElementById('reviewed-performance-data').checked,
        gatheredFeedback: document.getElementById('gathered-feedback').checked,
        preparedQuestions: document.getElementById('prepared-questions').checked,
        
                // Topics
        topics: Array.from(document.querySelectorAll('.topic-input')).map(input => input.value).filter(topic => topic.trim() !== ''),
        
        // Agenda tab
        meetingPurpose: document.getElementById('meeting-purpose').value,
        agendaTemplate: document.getElementById('agenda-template').value,
        agendaNotes: document.getElementById('agenda-notes').innerHTML,
        
        // Notes tab
        sessionNotes: document.getElementById('session-notes').innerHTML,
        teamMemberFeedback: document.getElementById('team-member-feedback').value,
        managerFeedback: document.getElementById('manager-feedback').value,
        
        // Action items
        actionItems: Array.from(document.querySelectorAll('.action-item')).map(item => {
          return {
            description: item.querySelector('.action-item-description').value,
            owner: item.querySelector('.action-item-owner').value
          };
        }).filter(item => item.description.trim() !== ''),
        createFollowUpTasks: document.getElementById('create-follow-up-tasks').checked,
        
        // Follow-up tab
        nextSessionDate: nextDatePicker ? nextDatePicker.selectedDates[0] : null,
        sessionFrequency: document.getElementById('session-frequency').value,
        scheduleNextSession: document.getElementById('schedule-next-session').checked,
        followUpNotes: document.getElementById('follow-up-notes').value,
        
        // Status
        status: 'active'
      };
      
      // Get team member name for display/reference
      if (formData.teamMemberId) {
        const selectedMember = teamMembersList.find(m => m.id === formData.teamMemberId);
        if (selectedMember) {
          formData.teamMemberName = `${selectedMember.firstName || ''} ${selectedMember.lastName || ''}`.trim();
          formData.teamMemberEmail = selectedMember.email;
        }
      }
      
      return formData;
    }
    
    function saveSession() {
      // Validate form
      if (!validateForm()) {
        return;
      }
      
      showLoading();
      
      // Collect form data
      const formData = collectFormData();
      
      // Set status to completed (not draft)
      formData.status = 'completed';
      
      google.script.run
        .withSuccessHandler(handleSessionSaved)
        .withFailureHandler(handleError)
        .saveManagerOneOnOneSession(formData);
    }
    
    function saveDraft() {
      // No strict validation for drafts
      const teamMemberId = document.getElementById('team-member').value;
      if (!teamMemberId) {
        showNotification('Error', 'Please select a team member', 'error');
        return;
      }
      
      showLoading();
      
      // Collect form data
      const formData = collectFormData();
      
      // Set status to draft
      formData.status = 'draft';
      
      google.script.run
        .withSuccessHandler(handleDraftSaved)
        .withFailureHandler(handleError)
        .saveManagerOneOnOneSession(formData);
    }
    
    function validateForm() {
      let isValid = true;
      
      // Check required fields
      const teamMemberId = document.getElementById('team-member').value;
      if (!teamMemberId) {
        showNotification('Error', 'Please select a team member', 'error');
        isValid = false;
      }
      
      const sessionDate = datePicker ? datePicker.selectedDates[0] : null;
      if (!sessionDate) {
        showNotification('Error', 'Please select a session date', 'error');
        isValid = false;
      }
      
      return isValid;
    }
    
    function handleSessionSaved(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to save session', 'error');
        return;
      }
      
      showNotification('Success', 'Session saved successfully', 'success');
      
      // Redirect to dashboard after a short delay
      setTimeout(() => {
        navigateToDashboard();
      }, 2000);
    }
    
    function handleDraftSaved(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to save draft', 'error');
        return;
      }
      
      showNotification('Success', 'Draft saved successfully', 'success');
      
      // Update session ID if this was a new session
      if (isNewSession && result.id) {
        sessionId = result.id;
        document.getElementById('session-id').value = sessionId;
        isNewSession = false;
      }
      
      // No redirect for drafts, user continues editing
    }
    
    function navigateToDashboard() {
      google.script.run.showManagerOneOnOneDashboard();
      google.script.host.close();
    }
    
    function truncateHTML(html, maxLength) {
      // Create a temporary div to hold the HTML
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = html;
      let plainText = tempDiv.textContent || tempDiv.innerText || '';
      
      if (plainText.length <= maxLength) {
        return html;
      }
      
      return plainText.substring(0, maxLength) + '...';
    }
    
    function formatDate(dateString) {
      if (!dateString) return 'N/A';
      
      const date = new Date(dateString);
      const now = new Date();
      const yesterday = new Date(now);
      yesterday.setDate(yesterday.getDate() - 1);
      const tomorrow = new Date(now);
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      // Check if date is today, yesterday or tomorrow
      if (date.toDateString() === now.toDateString()) {
        return 'Today';
      } else if (date.toDateString() === yesterday.toDateString()) {
        return 'Yesterday';
      } else if (date.toDateString() === tomorrow.toDateString()) {
        return 'Tomorrow';
      }
      
      // Otherwise format as MMM D, YYYY
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return date.toLocaleDateString(undefined, options);
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const loadingOverlay = document.getElementById('loading-overlay');
      loadingOverlay.style.opacity = '0';
      setTimeout(() => {
        loadingOverlay.style.display = 'none';
        loadingOverlay.style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
    }
    
    /* Layout */
    .app-container {
      display: flex;
      min-height: 100vh;
      position: relative;
    }
    
    .content-container {
      flex: 1;
      padding: 1.5rem;
      max-width: 1200px;
      margin: 0 auto;
    }
    
    /* Content Cards */
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      padding: 1.25rem;
      position: relative;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--info));
    }
    
    .card-title {
      margin: 0;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      background: var(--primary);
      color: white;
      border-radius: 8px;
      margin-right: 0.75rem;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Session Details */
    .session-meta {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      background: var(--light);
      border-radius: var(--border-radius);
      padding: 1rem;
      margin-bottom: 1.5rem;
    }
    
    .session-meta-item {
      display: flex;
      align-items: center;
      padding: 0.5rem 1rem;
    }
    
    .session-meta-icon {
      color: var(--primary);
      margin-right: 0.75rem;
      font-size: 1.1rem;
    }
    
    .session-meta-label {
      font-size: 0.8rem;
      color: var(--text-secondary);
      margin-bottom: 0.125rem;
    }
    
    .session-meta-value {
      font-weight: 600;
      color: var(--text-primary);
    }
    
    /* Team Member Profile */
    .team-member-profile {
      display: flex;
      align-items: center;
      background-color: white;
      padding: 1.25rem;
      margin-bottom: 1.5rem;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: 1px solid var(--border-color);
    }
    
    .team-member-avatar {
      width: 64px;
      height: 64px;
      border-radius: 50%;
      background: linear-gradient(to right bottom, var(--primary), var(--info));
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 1.5rem;
      margin-right: 1.25rem;
    }
    
    .team-member-info {
      flex-grow: 1;
    }
    
    .team-member-name {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .team-member-position {
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
      color: var(--text-secondary);
    }
    
    .team-member-meta {
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem;
      margin-top: 0.5rem;
      font-size: 0.9rem;
    }
    
    .team-member-meta-item {
      display: flex;
      align-items: center;
    }
    
    .team-member-meta-icon {
      color: var(--primary);
      margin-right: 0.5rem;
      font-size: 0.9rem;
    }
    
    .status-badge {
      display: inline-block;
      padding: 0.25em 0.75em;
      font-size: 0.75rem;
      font-weight: 600;
      line-height: 1.5;
      border-radius: 30px;
    }
    
    .status-active {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .status-leave {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .status-inactive {
      background-color: rgba(108, 117, 125, 0.1);
      color: var(--text-secondary);
    }
    
    /* Notes Sections */
    .notes-section {
      margin-bottom: 1.5rem;
      background: white;
      border-radius: var(--border-radius);
      border: 1px solid var(--border-color);
      overflow: hidden;
    }
    
    .notes-header {
      background-color: rgba(248, 249, 250, 0.5);
      padding: 1rem 1.25rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .notes-title {
      margin: 0;
      font-weight: 600;
      display: flex;
      align-items: center;
      font-size: 1rem;
    }
    
    .notes-icon {
      margin-right: 0.75rem;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--primary);
      color: white;
      border-radius: 6px;
      font-size: 0.8rem;
    }
    
    .notes-content {
      padding: 1.25rem;
    }
    
    /* Action Items */
    .action-items {
      margin-bottom: 1.5rem;
    }
    
    .action-item {
      display: flex;
      align-items: flex-start;
      padding: 1rem 0;
      border-bottom: 1px solid var(--border-color);
    }
    
    .action-item:last-child {
      border-bottom: none;
    }
    
    .action-status {
      width: 22px;
      height: 22px;
      border: 2px solid var(--border-color);
      border-radius: 50%;
      margin-right: 1rem;
      position: relative;
      flex-shrink: 0;
      margin-top: 0.25rem;
    }
    
    .action-status.completed {
      background-color: var(--success);
      border-color: var(--success);
    }
    
    .action-status.completed::after {
      content: '';
      position: absolute;
      left: 7px;
      top: 3px;
      width: 6px;
      height: 10px;
      border: solid white;
      border-width: 0 2px 2px 0;
      transform: rotate(45deg);
    }
    
    .action-content {
      flex-grow: 1;
    }
    
    .action-description {
      margin-bottom: 0.35rem;
    }
    
    .action-meta {
      display: flex;
      gap: 1rem;
      font-size: 0.8rem;
      color: var(--text-secondary);
    }
    
    .action-badge {
      padding: 0.25em 0.5em;
      font-size: 0.75rem;
      border-radius: 4px;
      background: var(--primary-light);
      color: var(--primary);
    }
    
    /* Topic Pills */
    .topic-pills {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }
    
    .topic-pill {
      padding: 0.35rem 0.75rem;
      background: var(--primary-light);
      color: var(--primary);
      border-radius: 20px;
      font-size: 0.85rem;
    }
    
    /* Empty States */
    .empty-state {
      padding: 2rem;
      text-align: center;
      color: var(--text-secondary);
    }
    
    .empty-icon {
      font-size: 2rem;
      margin-bottom: 1rem;
      opacity: 0.5;
    }
    
    /* Button Styles */
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.25rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      border-color: var(--secondary);
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      color: white;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-icon {
      width: 36px;
      height: 36px;
      padding: 0;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      font-size: 1rem;
    }
    
    /* Action Bar */
    .action-bar {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(10px);
      box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.05);
      display: flex;
      justify-content: space-between;
      z-index: 100;
    }
    
    .action-bar-content {
      max-width: 1200px;
      width: 100%;
      margin: 0 auto;
      display: flex;
      justify-content: space-between;
    }
    
    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s ease;
    }
    
    .spinner {
      width: 48px;
      height: 48px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      max-width: 350px;
      min-width: 300px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--shadow-md);
      padding: 1rem;
      z-index: 9998;
      transform: translateX(120%);
      transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
      border-left: 4px solid var(--primary);
      display: flex;
      align-items: flex-start;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      margin-right: 0.75rem;
      font-size: 1.25rem;
    }
    
    .notification-content {
      flex-grow: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .notification-message {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .notification-close {
      border: none;
      background: none;
      color: var(--text-secondary);
      opacity: 0.5;
      transition: var(--transition);
      padding: 0;
      margin-left: 0.75rem;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.3s ease forwards;
    }
    
    .staggered > * {
      opacity: 0;
    }
    
    .staggered > *:nth-child(1) { animation: fadeIn 0.5s ease forwards 0.1s; }
    .staggered > *:nth-child(2) { animation: fadeIn 0.5s ease forwards 0.2s; }
    .staggered > *:nth-child(3) { animation: fadeIn 0.5s ease forwards 0.3s; }
    .staggered > *:nth-child(4) { animation: fadeIn 0.5s ease forwards 0.4s; }
    .staggered > *:nth-child(5) { animation: fadeIn 0.5s ease forwards 0.5s; }
    
    /* Responsive Adjustments */
    @media (max-width: 768px) {
      .content-container {
        padding: 1rem;
      }
      
      .card-body, .notes-content {
        padding: 1rem;
      }
      
      .team-member-avatar {
        width: 50px;
        height: 50px;
        font-size: 1.25rem;
      }
      
      .team-member-name {
        font-size: 1.1rem;
      }
      
      .session-meta {
        flex-direction: column;
      }
      
      .session-meta-item {
        padding: 0.5rem 0;
      }
    }
    
    /* Add slight padding to bottom to ensure action bar doesn't obscure content */
    .content-container {
      padding-bottom: 5rem;
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="app-container">
    <div class="content-container">
      <div class="content-card fade-in">
        <div class="card-header">
          <h5 class="card-title">
            <div class="card-title-icon">
              <i class="fas fa-sticky-note"></i>
            </div>
            One-on-One Notes
          </h5>
          
          <div>
            <button type="button" id="back-button" class="btn btn-outline-primary">
              <i class="fas fa-arrow-left me-2"></i> Back to Dashboard
            </button>
          </div>
        </div>
        
        <div class="card-body">
          <!-- Session Meta Information -->
          <div class="session-meta staggered">
            <div class="session-meta-item">
              <div class="session-meta-icon">
                <i class="fas fa-calendar"></i>
              </div>
              <div>
                <div class="session-meta-label">Session Date</div>
                <div class="session-meta-value" id="session-date">Loading...</div>
              </div>
            </div>
            
            <div class="session-meta-item">
              <div class="session-meta-icon">
                <i class="fas fa-tag"></i>
              </div>
              <div>
                <div class="session-meta-label">Purpose</div>
                <div class="session-meta-value" id="session-purpose">Loading...</div>
              </div>
            </div>
            
            <div class="session-meta-item">
              <div class="session-meta-icon">
                <i class="fas fa-calendar-check"></i>
              </div>
              <div>
                <div class="session-meta-label">Next Session</div>
                <div class="session-meta-value" id="next-session">Loading...</div>
              </div>
            </div>
            
            <div class="session-meta-item">
              <div class="session-meta-icon">
                <i class="fas fa-clock"></i>
              </div>
              <div>
                <div class="session-meta-label">Created</div>
                <div class="session-meta-value" id="created-date">Loading...</div>
              </div>
            </div>
          </div>
          
          <!-- Team Member Profile -->
          <div class="team-member-profile fade-in">
            <div class="team-member-avatar" id="team-member-avatar">TM</div>
            <div class="team-member-info">
              <h3 class="team-member-name" id="team-member-name">Loading...</h3>
              <div class="team-member-position" id="team-member-position">Loading...</div>
              <div class="mb-2">
                <span class="status-badge status-active" id="team-member-status">Active</span>
              </div>
              <div class="team-member-meta">
                <div class="team-member-meta-item">
                  <span class="team-member-meta-icon"><i class="fas fa-envelope"></i></span>
                  <span id="team-member-email">loading@example.com</span>
                </div>
                <div class="team-member-meta-item">
                  <span class="team-member-meta-icon"><i class="fas fa-building"></i></span>
                  <span id="team-member-department">Department</span>
                </div>
                <div class="team-member-meta-item">
                  <span class="team-member-meta-icon"><i class="fas fa-calendar-alt"></i></span>
                  <span id="team-member-start-date">Start Date</span>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Discussion Topics -->
          <div class="notes-section staggered">
            <div class="notes-header">
              <h6 class="notes-title">
                <span class="notes-icon"><i class="fas fa-comments"></i></span>
                Discussion Topics
              </h6>
            </div>
            <div class="notes-content">
              <div id="topics-container" class="topic-pills">
                <div class="empty-state" id="no-topics">
                  <div class="empty-icon"><i class="fas fa-comment-slash"></i></div>
                  <p>No discussion topics recorded</p>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Session Notes -->
          <div class="notes-section staggered">
            <div class="notes-header">
              <h6 class="notes-title">
                <span class="notes-icon"><i class="fas fa-sticky-note"></i></span>
                Session Notes
              </h6>
            </div>
            <div class="notes-content" id="session-notes">
              <div class="empty-state">
                <div class="empty-icon"><i class="fas fa-file-alt"></i></div>
                <p>No session notes recorded</p>
              </div>
            </div>
          </div>
          
          <!-- Action Items -->
          <div class="notes-section staggered">
            <div class="notes-header">
              <h6 class="notes-title">
                <span class="notes-icon"><i class="fas fa-tasks"></i></span>
                Action Items
              </h6>
            </div>
            <div class="notes-content">
              <div id="action-items-container" class="action-items">
                <div class="empty-state" id="no-action-items">
                  <div class="empty-icon"><i class="fas fa-clipboard-list"></i></div>
                  <p>No action items recorded</p>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Feedback Sections -->
          <div class="row g-3 staggered">
            <!-- Team Member Feedback -->
            <div class="col-md-6">
              <div class="notes-section h-100">
                <div class="notes-header">
                  <h6 class="notes-title">
                    <span class="notes-icon"><i class="fas fa-comment-dots"></i></span>
                    Team Member Feedback
                  </h6>
                </div>
                <div class="notes-content" id="team-member-feedback">
                  <div class="empty-state">
                    <div class="empty-icon"><i class="fas fa-comment"></i></div>
                    <p>No team member feedback recorded</p>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Manager Feedback -->
            <div class="col-md-6">
              <div class="notes-section h-100">
                <div class="notes-header">
                  <h6 class="notes-title">
                    <span class="notes-icon"><i class="fas fa-comment-alt"></i></span>
                    Manager Feedback
                  </h6>
                </div>
                <div class="notes-content" id="manager-feedback">
                  <div class="empty-state">
                    <div class="empty-icon"><i class="fas fa-comment"></i></div>
                    <p>No manager feedback recorded</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Follow-Up Notes -->
          <div class="notes-section staggered">
            <div class="notes-header">
              <h6 class="notes-title">
                <span class="notes-icon"><i class="fas fa-calendar-check"></i></span>
                Follow-Up Notes
              </h6>
            </div>
            <div class="notes-content" id="follow-up-notes">
              <div class="empty-state">
                <div class="empty-icon"><i class="fas fa-calendar-alt"></i></div>
                <p>No follow-up notes recorded</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Fixed Action Bar -->
  <div class="action-bar fade-in">
    <div class="action-bar-content">
      <div>
        <button type="button" class="btn btn-outline-primary" id="prev-session-btn" style="display:none;">
          <i class="fas fa-chevron-left me-2"></i> Previous Session
        </button>
      </div>
      <div>
        <button type="button" class="btn btn-outline-primary me-2" id="print-btn">
          <i class="fas fa-print me-2"></i> Print Notes
        </button>
        <button type="button" class="btn btn-primary" id="edit-btn">
          <i class="fas fa-edit me-2"></i> Edit Session
        </button>
      </div>
      <div>
        <button type="button" class="btn btn-outline-primary" id="next-session-btn" style="display:none;">
          Next Session <i class="fas fa-chevron-right ms-2"></i>
        </button>
      </div>
    </div>
  </div>
  
  <script>
    // Global variables
    let sessionData = null;
    let sessionId = '';
    let teamMemberData = null;
    let nextSessionId = null;
    let prevSessionId = null;
    
    // Document ready
    document.addEventListener('DOMContentLoaded', function() {
      // Check if we have a session ID
      const urlParams = new URLSearchParams(window.location.search);
      sessionId = urlParams.get('id');
      
      if (!sessionId) {
        showNotification('Error', 'No session specified', 'error');
        setTimeout(() => {
          navigateToDashboard();
        }, 2000);
        return;
      }
      
      // Load session data
      loadSessionData(sessionId);
      
      // Setup event listeners
      setupEventListeners();
    });
    
    function setupEventListeners() {
      // Back button
      document.getElementById('back-button').addEventListener('click', navigateToDashboard);
      
      // Edit button
      document.getElementById('edit-btn').addEventListener('click', function() {
        editSession(sessionId);
      });
      
      // Print button
      document.getElementById('print-btn').addEventListener('click', printNotes);
      
      // Navigation buttons
      document.getElementById('next-session-btn').addEventListener('click', function() {
        if (nextSessionId) {
          loadSessionData(nextSessionId);
        }
      });
      
      document.getElementById('prev-session-btn').addEventListener('click', function() {
        if (prevSessionId) {
          loadSessionData(prevSessionId);
        }
      });
    }
    
    function loadSessionData(id) {
      showLoading();
      
      // Update current session ID
      sessionId = id;
      
      google.script.run
        .withSuccessHandler(handleSessionData)
        .withFailureHandler(handleError)
        .getManagerOneOnOneSessionDetails(id);
    }
    
    function handleSessionData(result) {
      if (!result || !result.success) {
        hideLoading();
        showNotification('Error', result ? result.message : 'Failed to load session details', 'error');
        return;
      }
      
      sessionData = result.data;
      
      // Update UI with session data
      updateSessionUI(sessionData);
      
      // Check for next/previous sessions
      checkForAdjacentSessions(sessionData.teamMemberId);
      
      // Get team member details
      loadTeamMemberDetails(sessionData.teamMemberId);
    }
    
    function loadTeamMemberDetails(teamMemberId) {
      google.script.run
        .withSuccessHandler(handleTeamMemberData)
        .withFailureHandler(handleError)
        .getTeamMemberById(teamMemberId);
    }
    
    function handleTeamMemberData(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load team member details', 'error');
        return;
      }
      
      teamMemberData = result.data;
      
      // Update UI with team member data
      updateTeamMemberUI(teamMemberData);
    }
    
    function updateSessionUI(session) {
      // Update session meta
      document.getElementById('session-date').textContent = formatDate(session.date) || 'Not specified';
      document.getElementById('session-purpose').textContent = session.meetingPurpose || 'Not specified';
      document.getElementById('next-session').textContent = formatDate(session.nextSessionDate) || 'Not scheduled';
      document.getElementById('created-date').textContent = formatDate(session.createdAt) || 'Unknown';
      
      // Update topics
      const topicsContainer = document.getElementById('topics-container');
      const noTopics = document.getElementById('no-topics');
      
      if (session.topics && session.topics.length > 0) {
        topicsContainer.innerHTML = '';
        noTopics.style.display = 'none';
        
        session.topics.forEach(topic => {
          const topicPill = document.createElement('div');
          topicPill.className = 'topic-pill';
          topicPill.textContent = topic;
          topicsContainer.appendChild(topicPill);
        });
      } else {
        noTopics.style.display = 'block';
      }
      
      // Update session notes
      const sessionNotesContainer = document.getElementById('session-notes');
      if (session.sessionNotes && session.sessionNotes.trim() !== '') {
        sessionNotesContainer.innerHTML = session.sessionNotes;
      } else {
        sessionNotesContainer.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon"><i class="fas fa-file-alt"></i></div>
            <p>No session notes recorded</p>
          </div>
        `;
      }
      
      // Update action items
      const actionItemsContainer = document.getElementById('action-items-container');
      const noActionItems = document.getElementById('no-action-items');
      
      if (session.actionItems && session.actionItems.length > 0) {
        actionItemsContainer.innerHTML = '';
        noActionItems.style.display = 'none';
        
        session.actionItems.forEach(item => {
          const actionItem = document.createElement('div');
          actionItem.className = 'action-item';
          
          let ownerText = '';
          if (item.owner === 'team-member') {
            ownerText = 'Team Member';
          } else if (item.owner === 'manager') {
            ownerText = 'Manager';
          } else if (item.owner === 'both') {
            ownerText = 'Both';
          }
          
          actionItem.innerHTML = `
            <div class="action-status ${item.completed ? 'completed' : ''}"></div>
            <div class="action-content">
              <div class="action-description">${item.description}</div>
              <div class="action-meta">
                <span class="action-badge">${ownerText}</span>
                ${item.dueDate ? `<span><i class="far fa-calendar-alt me-1"></i> Due: ${formatDate(item.dueDate)}</span>` : ''}
                ${item.completed ? '<span class="text-success"><i class="fas fa-check-circle me-1"></i> Completed</span>' : ''}
              </div>
            </div>
          `;
          
          actionItemsContainer.appendChild(actionItem);
        });
      } else {
        noActionItems.style.display = 'block';
      }
      
      // Update feedback sections
      const teamMemberFeedback = document.getElementById('team-member-feedback');
      if (session.teamMemberFeedback && session.teamMemberFeedback.trim() !== '') {
        teamMemberFeedback.innerHTML = `<p>${session.teamMemberFeedback}</p>`;
      } else {
        teamMemberFeedback.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon"><i class="fas fa-comment"></i></div>
            <p>No team member feedback recorded</p>
          </div>
        `;
      }
      
      const managerFeedback = document.getElementById('manager-feedback');
      if (session.managerFeedback && session.managerFeedback.trim() !== '') {
        managerFeedback.innerHTML = `<p>${session.managerFeedback}</p>`;
      } else {
        managerFeedback.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon"><i class="fas fa-comment"></i></div>
            <p>No manager feedback recorded</p>
          </div>
        `;
      }
      
      // Update follow-up notes
      const followUpNotes = document.getElementById('follow-up-notes');
      if (session.followUpNotes && session.followUpNotes.trim() !== '') {
        followUpNotes.innerHTML = `<p>${session.followUpNotes}</p>`;
      } else {
        followUpNotes.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon"><i class="fas fa-calendar-alt"></i></div>
            <p>No follow-up notes recorded</p>
          </div>
        `;
      }
    }
    
    function updateTeamMemberUI(member) {
      // Get name or use email as fallback
      const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim() || member.email || 'Unknown';
      
      // Update avatar with initials
      document.getElementById('team-member-avatar').textContent = getInitials(fullName);
      
      // Update name and position
      document.getElementById('team-member-name').textContent = fullName;
      document.getElementById('team-member-position').textContent = member.position || 'No position specified';
      
      // Update contact details
      document.getElementById('team-member-email').textContent = member.email || 'No email specified';
      document.getElementById('team-member-department').textContent = member.departmentName || 'No department';
      document.getElementById('team-member-start-date').textContent = formatDate(member.startDate) || 'Not specified';
      
      // Update status badge
      const statusBadge = document.getElementById('team-member-status');
      statusBadge.textContent = member.status || 'Unknown';
      statusBadge.className = 'status-badge';
      
      if (member.status === 'Active') {
        statusBadge.classList.add('status-active');
      } else if (member.status === 'On Leave') {
        statusBadge.classList.add('status-leave');
      } else if (member.status === 'Inactive') {
        statusBadge.classList.add('status-inactive');
      }
    }
    
    function checkForAdjacentSessions(teamMemberId) {
      google.script.run
        .withSuccessHandler(handleAdjacentSessions)
        .withFailureHandler(error => console.error('Error loading adjacent sessions:', error))
        .getAdjacentOneOnOneSessions(sessionId, teamMemberId);
    }
    
    function handleAdjacentSessions(result) {
      if (!result || !result.success) {
        return;
      }
      
      // Update next and previous session IDs
      nextSessionId = result.data.nextSessionId || null;
      prevSessionId = result.data.prevSessionId || null;
      
      // Update navigation buttons visibility
      document.getElementById('next-session-btn').style.display = nextSessionId ? 'block' : 'none';
      document.getElementById('prev-session-btn').style.display = prevSessionId ? 'block' : 'none';
    }
    
    function getInitials(name) {
      if (!name || name === 'Unknown') return '?';
      
      return name
        .split(' ')
        .map(n => n[0])
        .join('')
        .toUpperCase()
        .substring(0, 2);
    }
    
    function formatDate(dateString) {
      if (!dateString) return null;
      
      const date = new Date(dateString);
      const now = new Date();
      const yesterday = new Date(now);
      yesterday.setDate(yesterday.getDate() - 1);
      const tomorrow = new Date(now);
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      // Check if date is today, yesterday or tomorrow
      if (date.toDateString() === now.toDateString()) {
        return 'Today';
      } else if (date.toDateString() === yesterday.toDateString()) {
        return 'Yesterday';
      } else if (date.toDateString() === tomorrow.toDateString()) {
        return 'Tomorrow';
      }
      
      // Otherwise format as MMM D, YYYY
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return date.toLocaleDateString(undefined, options);
    }
    
    function navigateToDashboard() {
      google.script.run.showManagerOneOnOneDashboard();
      google.script.host.close();
    }
    
    function editSession(id) {
      google.script.run.showManagerOneOnOneForm(id);
      google.script.host.close();
    }
    
    function printNotes() {
      window.print();
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const loadingOverlay = document.getElementById('loading-overlay');
      loadingOverlay.style.opacity = '0';
      setTimeout(() => {
        loadingOverlay.style.display = 'none';
        loadingOverlay.style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
  </script>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
    }
    
    /* App Layout */
    .app-container {
      display: grid;
      grid-template-columns: auto 1fr;
      grid-template-rows: auto 1fr;
      grid-template-areas: 
        "sidebar header"
        "sidebar content";
      height: 100vh;
      width: 100vw;
      overflow: hidden;
    }
    
    /* Modern Sidebar */
    .app-sidebar {
      grid-area: sidebar;
      width: 250px;
      background-color: var(--surface);
      border-right: 1px solid var(--border-color);
      display: flex;
      flex-direction: column;
      transition: var(--transition);
      z-index: 100;
      box-shadow: var(--shadow-sm);
    }
    
    .app-sidebar.collapsed {
      width: 70px;
    }
    
    .sidebar-header {
      padding: 1.5rem;
      display: flex;
      align-items: center;
      border-bottom: 1px solid var(--border-color);
    }
    
    .sidebar-logo {
      font-weight: 700;
      font-size: 1.25rem;
      display: flex;
      align-items: center;
    }
    
    .sidebar-logo-icon {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      margin-right: 12px;
      flex-shrink: 0;
    }
    
    .sidebar-logo-text {
      transition: var(--transition);
      white-space: nowrap;
      overflow: hidden;
    }
    
    .app-sidebar.collapsed .sidebar-logo-text {
      opacity: 0;
      width: 0;
    }
    
    .sidebar-toggle {
      margin-left: auto;
      width: 28px;
      height: 28px;
      border-radius: 6px;
      background: var(--surface-hover);
      border: none;
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .sidebar-toggle:hover {
      background: var(--primary-light);
      color: var(--primary);
    }
    
    .app-sidebar.collapsed .sidebar-toggle i {
      transform: rotate(180deg);
    }
    
    .sidebar-menu {
      list-style: none;
      padding: 1.25rem 0;
      margin: 0;
      flex: 1;
      overflow-y: auto;
    }
    
    .sidebar-menu-item {
      position: relative;
      margin: 0.25rem 0.75rem;
    }
    
    .sidebar-menu-link {
      display: flex;
      align-items: center;
      padding: 0.75rem 1rem;
      color: var(--text-secondary);
      text-decoration: none;
      border-radius: 8px;
      transition: var(--transition);
      overflow: hidden;
      white-space: nowrap;
    }
    
    .sidebar-menu-link:hover {
      color: var(--primary);
      background-color: var(--primary-light);
    }
    
    .sidebar-menu-link.active {
      color: var(--primary);
      background-color: var(--primary-light);
      font-weight: 500;
    }
    
    .sidebar-menu-icon {
      width: 1.25rem;
      text-align: center;
      margin-right: 1rem;
      font-size: 1rem;
      transition: var(--transition);
    }
    
    .sidebar-menu-text {
      transition: var(--transition);
      opacity: 1;
    }
    
    .app-sidebar.collapsed .sidebar-menu-text {
      opacity: 0;
      width: 0;
    }
    
    .app-sidebar.collapsed .sidebar-menu-link {
      padding: 0.75rem;
      justify-content: center;
    }
    
    .app-sidebar.collapsed .sidebar-menu-icon {
      margin-right: 0;
      font-size: 1.25rem;
    }
    
    /* Header */
    .app-header {
      grid-area: header;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1.5rem;
      background-color: var(--surface);
      border-bottom: 1px solid var(--border-color);
      box-shadow: var(--shadow-sm);
      z-index: 99;
    }
    
    .header-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .header-actions {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .header-action-btn {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: var(--surface);
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .header-action-btn:hover {
      background: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
      transform: translateY(-2px);
      box-shadow: var(--shadow-sm);
    }
    
    /* Content Area */
    .app-content {
      grid-area: content;
      overflow-y: auto;
      padding: 1.5rem;
      position: relative;
    }
    
    /* Insight Cards */
    .insight-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    
    .insight-card {
      background-color: var(--surface);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      padding: 1.25rem;
      transition: var(--transition);
      position: relative;
      overflow: hidden;
    }
    
    .insight-card:hover {
      transform: translateY(-3px);
      box-shadow: var(--shadow-md);
    }
    
    .insight-card-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.75rem;
    }
    
    .insight-card-title {
      font-size: 0.875rem;
      color: var(--text-secondary);
      margin: 0;
    }
    
    .insight-card-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1rem;
      flex-shrink: 0;
    }
    
    .insight-card-icon-primary {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .insight-card-icon-success {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .insight-card-icon-info {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .insight-card-icon-warning {
      background-color: var(--warning-light);
      color: var(--warning);
    }
    
    .insight-card-value {
      font-size: 2rem;
      font-weight: 600;
      margin: 0.5rem 0;
      color: var(--text-primary);
    }
    
    .insight-card-subtext {
      font-size: 0.875rem;
           color: var(--text-secondary);
      display: flex;
      align-items: center;
    }
    
    .trend-up {
      color: var(--success);
      margin-right: 0.5rem;
    }
    
    .trend-down {
      color: var(--warning);
      margin-right: 0.5rem;
    }
    
    .insight-card-chart {
      margin-top: 0.75rem;
    }
    
    /* Content Cards */
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      padding: 1.25rem;
      position: relative;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--info));
    }
    
    .card-title {
      margin: 0;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      background: var(--primary);
      color: white;
      border-radius: 8px;
      margin-right: 0.75rem;
    }
    
    .card-body {
      padding: 1.25rem;
    }
    
    /* Sessions List */
    .sessions-list {
      margin: 0;
      padding: 0;
      list-style: none;
    }
    
    .session-item {
      padding: 1.25rem;
      border-bottom: 1px solid var(--border-color);
      transition: var(--transition);
      cursor: pointer;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .session-item:hover {
      background-color: var(--surface-hover);
    }
    
    .session-item:last-child {
      border-bottom: none;
    }
    
    .session-avatar {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      background: linear-gradient(to bottom right, var(--primary), var(--info));
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 1.1rem;
      margin-right: 1rem;
      flex-shrink: 0;
    }
    
    .session-info {
      flex-grow: 1;
      min-width: 0;
    }
    
    .session-title {
      font-weight: 600;
      margin-bottom: 0.35rem;
      display: flex;
      align-items: center;
      color: var(--text-primary);
    }
    
    .session-meta {
      display: flex;
      flex-wrap: wrap;
      column-gap: 1rem;
      row-gap: 0.25rem;
      font-size: 0.85rem;
      color: var(--text-secondary);
    }
    
    .session-meta-item {
      display: flex;
      align-items: center;
    }
    
    .session-meta-icon {
      margin-right: 0.35rem;
    }
    
    .session-actions {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      flex-shrink: 0;
    }
    
    .session-badge {
      padding: 0.25em 0.75em;
      border-radius: 30px;
      font-size: 0.75rem;
      font-weight: 600;
      margin-left: 0.65rem;
    }
    
    .badge-scheduled {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .badge-completed {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .badge-draft {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .badge-overdue {
      background-color: var(--warning-light);
      color: var(--warning);
    }
    
    /* Team Members List */
    .team-members-list {
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
      margin-top: 1rem;
    }
    
    .team-member-item {
      background: var(--surface);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      padding: 1rem;
      display: flex;
      align-items: center;
      min-width: 320px;
      flex: 1;
      transition: var(--transition);
      cursor: pointer;
    }
    
    .team-member-item:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .member-avatar {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      background: linear-gradient(to bottom right, var(--primary), var(--info));
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 1.1rem;
      margin-right: 1rem;
      flex-shrink: 0;
    }
    
    .member-info {
      flex-grow: 1;
      min-width: 0;
    }
    
    .member-name {
      font-weight: 600;
      margin-bottom: 0.2rem;
      color: var(--text-primary);
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .member-position {
      font-size: 0.85rem;
      color: var(--text-secondary);
      margin-bottom: 0.25rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .member-status {
      display: flex;
      align-items: center;
      font-size: 0.8rem;
    }
    
    .status-indicator {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      margin-right: 0.5rem;
    }
    
    .status-active {
      background-color: var(--success);
    }
    
    .status-leave {
      background-color: var(--info);
    }
    
    .status-inactive {
      background-color: var(--text-secondary);
    }
    
    .member-last-session {
      font-size: 0.75rem;
      color: var(--text-secondary);
    }
    
    .member-actions {
      flex-shrink: 0;
      margin-left: 1rem;
    }
    
    /* Chart Containers */
    .chart-container {
      height: 300px;
      margin-top: 1rem;
    }
    
    .chart-legend {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
      margin-top: 1rem;
    }
    
    .legend-item {
      display: flex;
      align-items: center;
      font-size: 0.85rem;
      color: var(--text-secondary);
    }
    
    .legend-color {
      width: 12px;
      height: 12px;
      border-radius: 3px;
      margin-right: 0.5rem;
    }
    
    /* Summary Item */
    .summary-item {
      padding: 1.25rem;
      margin-bottom: 1rem;
      border-radius: var(--border-radius);
      background-color: var(--surface);
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
    }
    
    .summary-item:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .summary-value {
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      color: var(--primary);
    }
    
    .summary-label {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    /* Action Items */
    .action-item {
      display: flex;
      align-items: flex-start;
      padding: 1.25rem;
      border-bottom: 1px solid var(--border-color);
    }
    
    .action-item:last-child {
      border-bottom: none;
    }
    
    .action-status {
      width: 24px;
      height: 24px;
      border: 2px solid var(--border-color);
      border-radius: 50%;
      margin-right: 1rem;
      position: relative;
      flex-shrink: 0;
      margin-top: 0.25rem;
    }
    
    .action-status.completed {
      background-color: var(--success);
      border-color: var(--success);
    }
    
    .action-status.completed::after {
      content: '';
      position: absolute;
      left: 8px;
      top: 4px;
      width: 6px;
      height: 10px;
      border: solid white;
      border-width: 0 2px 2px 0;
      transform: rotate(45deg);
    }
    
    .action-content {
      flex-grow: 1;
      min-width: 0;
    }
    
    .action-title {
      font-weight: 600;
      margin-bottom: 0.35rem;
      color: var(--text-primary);
    }
    
    .action-meta {
      font-size: 0.85rem;
      color: var(--text-secondary);
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      align-items: center;
      margin-bottom: 0.5rem;
    }
    
    .action-description {
      font-size: 0.9rem;
      color: var(--text-primary);
    }
    
    /* Empty States */
    .empty-state {
      padding: 3rem 1rem;
      text-align: center;
      background-color: rgba(255, 255, 255, 0.5);
      border-radius: var(--border-radius);
    }
    
    .empty-icon {
      font-size: 3rem;
      color: var(--text-secondary);
      opacity: 0.5;
      margin-bottom: 1.5rem;
    }
    
    .empty-title {
      font-weight: 600;
      margin-bottom: 0.75rem;
      color: var(--text-primary);
    }
    
    .empty-message {
      color: var(--text-secondary);
      max-width: 400px;
      margin: 0 auto 1.5rem;
    }
    
    /* Buttons */
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.25rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      border-color: var(--secondary);
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      color: white;
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .btn-icon {
      width: 36px;
      height: 36px;
      padding: 0;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      font-size: 1rem;
    }
    
    /* Add Button */
    .add-btn {
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      width: 56px;
      height: 56px;
      border-radius: 28px;
      background-color: var(--primary);
      color: white;
      border: none;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      box-shadow: var(--shadow-md);
      cursor: pointer;
      transition: var(--transition);
      z-index: 99;
    }
    
    .add-btn:hover {
      background-color: var(--secondary);
      transform: translateY(-3px);
      box-shadow: var(--shadow-lg);
    }
    
    /* Filters */
    .filters-container {
      background-color: var(--surface);
      border-radius: var(--border-radius);
      padding: 1.25rem;
      margin-bottom: 1.5rem;
      box-shadow: var(--shadow-sm);
    }
    
    .filters-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }
    
    .filters-title {
      font-weight: 600;
      margin: 0;
      color: var(--text-primary);
    }
    
    .filters-toggle {
      background: none;
      border: none;
      color: var(--text-secondary);
      font-size: 0.875rem;
      display: flex;
      align-items: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .filters-toggle:hover {
      color: var(--primary);
    }
    
    .filters-toggle i {
      margin-right: 0.35rem;
    }
    
    .filters-body {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease;
    }
    
    .filters-body.show {
      max-height: 500px;
    }
    
    .form-select, .form-control {
      border-radius: 8px;
      border: 1px solid var(--border-color);
      font-size: 0.875rem;
      transition: var(--transition);
    }
    
    .form-select:focus, .form-control:focus {
      box-shadow: 0 0 0 3px var(--primary-light);
      border-color: var(--primary);
    }
    
    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s ease;
    }
    
    .spinner {
      width: 48px;
      height: 48px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      max-width: 350px;
      min-width: 300px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--shadow-md);
      padding: 1rem;
      z-index: 9998;
      transform: translateX(120%);
      transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
      border-left: 4px solid var(--primary);
      display: flex;
      align-items: flex-start;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      margin-right: 0.75rem;
      font-size: 1.25rem;
    }
    
    .notification-content {
      flex-grow: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .notification-message {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .notification-close {
      border: none;
      background: none;
      color: var(--text-secondary);
      opacity: 0.5;
      transition: var(--transition);
      padding: 0;
      margin-left: 0.75rem;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.3s ease forwards;
    }
    
    .staggered > * {
      opacity: 0;
    }
    
    .staggered > *:nth-child(1) { animation: fadeIn 0.5s ease forwards 0.1s; }
    .staggered > *:nth-child(2) { animation: fadeIn 0.5s ease forwards 0.2s; }
    .staggered > *:nth-child(3) { animation: fadeIn 0.5s ease forwards 0.3s; }
    .staggered > *:nth-child(4) { animation: fadeIn 0.5s ease forwards 0.4s; }
    .staggered > *:nth-child(5) { animation: fadeIn 0.5s ease forwards 0.5s; }
    .staggered > *:nth-child(6) { animation: fadeIn 0.5s ease forwards 0.6s; }
    
    /* Responsive Adjustments */
    @media (max-width: 991px) {
      .app-container {
        grid-template-areas: 
          "header header"
          "sidebar content";
      }
      
      .app-sidebar {
        width: 70px;
      }
      
      .sidebar-logo-text {
        opacity: 0;
        width: 0;
      }
      
      .sidebar-menu-text {
        opacity: 0;
        width: 0;
      }
      
      .sidebar-menu-link {
        padding: 0.75rem;
        justify-content: center;
      }
      
      .sidebar-menu-icon {
        margin-right: 0;
        font-size: 1.25rem;
      }
      
      .app-header {
        padding: 0.75rem 1rem;
      }
    }
    
    @media (max-width: 768px) {
      .app-container {
        display: flex;
        flex-direction: column;
        height: auto;
        min-height: 100vh;
      }
      
      .app-sidebar {
        display: none;
      }
      
      .app-content {
        overflow-y: visible;
        padding: 1rem;
      }
      
      .insight-cards {
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      }
      
      .add-btn {
        bottom: 1rem;
        right: 1rem;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="app-container">
    <!-- Sidebar -->
    <aside class="app-sidebar" id="sidebar">
      <div class="sidebar-header">
        <div class="sidebar-logo">
          <div class="sidebar-logo-icon">
            <i class="fas fa-chart-pie"></i>
          </div>
          <div class="sidebar-logo-text">TeamLead</div>
        </div>
        <button id="sidebar-toggle" class="sidebar-toggle" aria-label="Toggle Sidebar">
          <i class="fas fa-angle-left"></i>
        </button>
      </div>
      
      <nav class="sidebar-menu">
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="dashboard">
            <span class="sidebar-menu-icon"><i class="fas fa-th-large"></i></span>
            <span class="sidebar-menu-text">Dashboard</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link active" data-page="one-on-ones">
            <span class="sidebar-menu-icon"><i class="fas fa-user-friends"></i></span>
            <span class="sidebar-menu-text">One-on-Ones</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="qa-reviews">
            <span class="sidebar-menu-icon"><i class="fas fa-clipboard-check"></i></span>
            <span class="sidebar-menu-text">QA Reviews</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="metrics">
            <span class="sidebar-menu-icon"><i class="fas fa-chart-line"></i></span>
            <span class="sidebar-menu-text">Metrics</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="action-items">
            <span class="sidebar-menu-icon"><i class="fas fa-tasks"></i></span>
            <span class="sidebar-menu-text">Action Items</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="team">
            <span class="sidebar-menu-icon"><i class="fas fa-users"></i></span>
            <span class="sidebar-menu-text">Team Members</span>
          </a>
        </div>
        
        <div class="sidebar-menu-item">
          <a href="#" class="sidebar-menu-link" data-page="settings">
            <span class="sidebar-menu-icon"><i class="fas fa-cog"></i></span>
            <span class="sidebar-menu-text">Settings</span>
          </a>
        </div>
      </nav>
    </aside>
    
    <!-- Header -->
    <header class="app-header">
      <div class="header-title">
        One-on-One Dashboard
      </div>
      
      <div class="header-actions">
        <button id="refresh-btn" class="header-action-btn" aria-label="Refresh">
          <i class="fas fa-sync-alt"></i>
        </button>
      </div>
    </header>
    
    <!-- Main Content -->
    <main class="app-content">
      <!-- Insights -->
      <div class="insight-cards staggered">
        <div class="insight-card">
          <div class="insight-card-header">
            <h6 class="insight-card-title">TOTAL SESSIONS</h6>
            <div class="insight-card-icon insight-card-icon-primary">
              <i class="fas fa-comments"></i>
            </div>
          </div>
          <div class="insight-card-value" id="total-sessions">0</div>
          <div class="insight-card-subtext">
            <i class="fas fa-arrow-up trend-up"></i>
            <span id="total-sessions-trend">0% from last month</span>
          </div>
          <div class="insight-card-chart">
            <div id="total-sessions-chart"></div>
          </div>
        </div>
        
        <div class="insight-card">
          <div class="insight-card-header">
            <h6 class="insight-card-title">COMPLETION RATE</h6>
            <div class="insight-card-icon insight-card-icon-success">
              <i class="fas fa-check-circle"></i>
            </div>
          </div>
          <div class="insight-card-value" id="completion-rate">0%</div>
          <div class="insight-card-subtext">
            <i class="fas fa-arrow-up trend-up"></i>
            <span id="completion-rate-trend">0% from last month</span>
          </div>
          <div class="insight-card-chart">
            <div id="completion-rate-chart"></div>
          </div>
        </div>
        
        <div class="insight-card">
          <div class="insight-card-header">
            <h6 class="insight-card-title">TEAM COVERAGE</h6>
            <div class="insight-card-icon insight-card-icon-info">
              <i class="fas fa-users"></i>
            </div>
          </div>
          <div class="insight-card-value" id="team-coverage">0%</div>
          <div class="insight-card-subtext">
            <i class="fas fa-arrow-up trend-up"></i>
            <span id="team-coverage-trend">0% from last month</span>
          </div>
          <div class="insight-card-chart">
            <div id="team-coverage-chart"></div>
          </div>
        </div>
        
        <div class="insight-card">
          <div class="insight-card-header">
            <h6 class="insight-card-title">OVERDUE SESSIONS</h6>
            <div class="insight-card-icon insight-card-icon-warning">
              <i class="fas fa-exclamation-triangle"></i>
            </div>
          </div>
          <div class="insight-card-value" id="overdue-sessions">0</div>
          <div class="insight-card-subtext">
            <i class="fas fa-arrow-down trend-down"></i>
            <span id="overdue-sessions-trend">0% from last month</span>
          </div>
          <div class="insight-card-chart">
            <div id="overdue-sessions-chart"></div>
          </div>
        </div>
      </div>
      
      <!-- Filters -->
      <div class="filters-container fade-in">
        <div class="filters-header">
          <h6 class="filters-title">Filters</h6>
          <button class="filters-toggle" id="toggle-filters">
            <i class="fas fa-filter"></i> Show Filters
          </button>
        </div>
        
        <div class="filters-body" id="filters-body">
          <div class="row g-3">
            <div class="col-md-4">
              <label for="filter-status" class="form-label">Status</label>
              <select class="form-select form-select-sm" id="filter-status">
                <option value="">All Statuses</option>
                <option value="completed">Completed</option>
                <option value="scheduled">Scheduled</option>
                <option value="draft">Draft</option>
                <option value="overdue">Overdue</option>
              </select>
            </div>
            
            <div class="col-md-4">
              <label for="filter-date-range" class="form-label">Date Range</label>
              <select class="form-select form-select-sm" id="filter-date-range">
                <option value="30" selected>Last 30 Days</option>
                <option value="60">Last 60 Days</option>
                <option value="90">Last 90 Days</option>
                <option value="all">All Time</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
            
            <div class="col-md-4">
              <label for="filter-team-member" class="form-label">Team Member</label>
              <select class="form-select form-select-sm" id="filter-team-member">
                <option value="">All Team Members</option>
                <!-- Team members will be loaded dynamically -->
              </select>
            </div>
            
            <div class="col-md-8" id="custom-date-range" style="display: none;">
              <div class="row g-2">
                <div class="col-md-6">
                  <input type="text" class="form-control form-control-sm" id="filter-start-date" placeholder="From date">
                </div>
                <div class="col-md-6">
                  <input type="text" class="form-control form-control-sm" id="filter-end-date" placeholder="To date">
                </div>
              </div>
            </div>
            
            <div class="col-12 d-flex justify-content-end">
              <button class="btn btn-outline-secondary btn-sm me-2" id="reset-filters-btn">
                Reset
              </button>
              <button class="btn btn-primary btn-sm" id="apply-filters-btn">
                <i class="fas fa-filter me-1"></i> Apply Filters
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Recent Sessions -->
      <div class="content-card fade-in">
        <div class="card-header">
          <h5 class="card-title">
            <div class="card-title-icon">
              <i class="fas fa-history"></i>
            </div>
            Recent One-on-One Sessions
          </h5>
          
          <button type="button" class="btn btn-primary btn-sm" id="schedule-session-btn">
            <i class="fas fa-plus me-2"></i> Schedule Session
          </button>
        </div>
        
        <div class="card-body p-0">
          <ul class="sessions-list" id="sessions-list">
            <div class="text-center py-4">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <div class="mt-2 text-secondary">Loading sessions...</div>
            </div>
          </ul>
        </div>
      </div>
      
      <!-- Team Coverage -->
      <div class="row fade-in">
        <div class="col-md-8">
          <div class="content-card">
            <div class="card-header">
              <h5 class="card-title">
                <div class="card-title-icon">
                  <i class="fas fa-users"></i>
                </div>
                Team Coverage
              </h5>
              
              <select class="form-select form-select-sm" style="width: auto;" id="chart-time-range">
                <option value="30">Last 30 Days</option>
                <option value="90" selected>Last 90 Days</option>
                <option value="180">Last 6 Months</option>
                <option value="365">Last Year</option>
              </select>
            </div>
            
            <div class="card-body">
              <div id="team-coverage-history-chart" class="chart-container"></div>
              <div class="chart-legend">
                <div class="legend-item">
                  <div class="legend-color" style="background-color: #4361ee;"></div>
                  <div>Sessions Completed</div>
                </div>
                <div class="legend-item">
                  <div class="legend-color" style="background-color: #f72585;"></div>
                  <div>Sessions Missed</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="col-md-4">
          <div class="content-card">
            <div class="card-header">
              <h5 class="card-title">
                <div class="card-title-icon">
                  <i class="fas fa-calendar-check"></i>
                </div>
                Session Summary
              </h5>
            </div>
            
            <div class="card-body pb-0">
              <div class="row">
                <div class="col-6">
                  <div class="summary-item">
                    <div class="summary-value" id="sessions-this-week">0</div>
                    <div class="summary-label">This Week</div>
                  </div>
                </div>
                <div class="col-6">
                  <div class="summary-item">
                    <div class="summary-value" id="sessions-next-week">0</div>
                    <div class="summary-label">Next Week</div>
                  </div>
                </div>
                <div class="col-6">
                  <div class="summary-item">
                    <div class="summary-value" id="sessions-this-month">0</div>
                    <div class="summary-label">This Month</div>
                  </div>
                </div>
                <div class="col-6">
                  <div class="summary-item">
                    <div class="summary-value" id="sessions-overdue">0</div>
                    <div class="summary-label">Overdue</div>
                  </div>
                </div>
              </div>
              
              <div id="sessions-by-status-chart" style="margin-top: 1rem; height: 250px;"></div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Team Members Needing Attention -->
      <div class="content-card fade-in">
        <div class="card-header">
          <h5 class="card-title">
            <div class="card-title-icon">
              <i class="fas fa-exclamation-circle"></i>
            </div>
            Team Members Needing Attention
          </h5>
        </div>
        
        <div class="card-body">
          <div class="team-members-list" id="team-members-list">
            <div class="text-center w-100 py-4">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <div class="mt-2 text-secondary">Loading team members...</div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Open Action Items -->
      <div class="content-card fade-in">
        <div class="card-header">
          <h5 class="card-title">
            <div class="card-title-icon">
              <i class="fas fa-tasks"></i>
            </div>
            Open Action Items
          </h5>
          
          <button type="button" class="btn btn-outline-primary btn-sm" id="view-all-action-items">
            View All
          </button>
        </div>
        
        <div class="card-body p-0">
          <div id="action-items-container">
            <div class="text-center py-4">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <div class="mt-2 text-secondary">Loading action items...</div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
  
  <!-- Add Button -->
  <button class="add-btn" id="new-session-btn" aria-label="New Session">
    <i class="fas fa-plus"></i>
  </button>
  
  <script>
    // Global variables
    let dashboardData = null;
    let teamMembersList = [];
    let recentSessions = [];
    let sessionCharts = {};
    let fromDatePicker = null;
    let toDatePicker = null;
    
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize date pickers
      initializeDatePickers();
      
      // Set up event listeners
      setupEventListeners();
      
      // Load dashboard data
      loadDashboardData();
    });
    
    function initializeDatePickers() {
      // Initialize custom date range pickers for filters
      fromDatePicker = flatpickr('#filter-start-date', {
        dateFormat: 'Y-m-d',
        allowInput: true,
        onClose: function() {
          validateDateRange();
        }
      });
      
      toDatePicker = flatpickr('#filter-end-date', {
        dateFormat: 'Y-m-d',
        allowInput: true,
        onClose: function() {
          validateDateRange();
        }
      });
    }
    
    function setupEventListeners() {
      // Sidebar toggle
      document.getElementById('sidebar-toggle').addEventListener('click', function() {
        document.getElementById('sidebar').classList.toggle('collapsed');
      });
      
      // Navigation links
      document.querySelectorAll('.sidebar-menu-link').forEach(link => {
        link.addEventListener('click', handleNavigation);
      });
      
      // Filters toggle
      document.getElementById('toggle-filters').addEventListener('click', toggleFilters);
      
      // Date range change
      document.getElementById('filter-date-range').addEventListener('change', handleDateRangeChange);
      
      // Filter buttons
      document.getElementById('reset-filters-btn').addEventListener('click', resetFilters);
      document.getElementById('apply-filters-btn').addEventListener('click', applyFilters);
      
      // New session buttons
      document.getElementById('new-session-btn').addEventListener('click', createNewSession);
      document.getElementById('schedule-session-btn').addEventListener('click', createNewSession);
      
      // Chart time range change
      document.getElementById('chart-time-range').addEventListener('change', function() {
        updateCoverageChart(this.value);
      });
      
      // Refresh button
      document.getElementById('refresh-btn').addEventListener('click', refreshDashboard);
      
      // View all action items button
      document.getElementById('view-all-action-items').addEventListener('click', viewAllActionItems);
    }
    
    function handleNavigation(e) {
      e.preventDefault();
      const page = e.currentTarget.getAttribute('data-page');
      
      // Remove active class from all links
      document.querySelectorAll('.sidebar-menu-link').forEach(link => {
        link.classList.remove('active');
      });
      
      // Add active class to clicked link
      e.currentTarget.classList.add('active');
      
      // Navigate to the selected page
      navigateTo(page);
    }
    
    function navigateTo(page) {
      switch(page) {
        case 'dashboard':
          google.script.run.showDashboard();
          break;
        case 'one-on-ones':
          // Already on one-on-ones page
          break;
        case 'qa-reviews':
          google.script.run.showQAReviews();
          break;
        case 'metrics':
          google.script.run.showMetrics();
          break;
        case 'action-items':
          google.script.run.showActionItems();
          break;
        case 'team':
          google.script.run.showTeamView();
          break;
        case 'settings':
          google.script.run.showSettings();
          break;
      }
      
      google.script.host.close();
    }
    
    function toggleFilters() {
      const filtersBody = document.getElementById('filters-body');
      const toggleButton = document.getElementById('toggle-filters');
      
      filtersBody.classList.toggle('show');
      
      if (filtersBody.classList.contains('show')) {
        toggleButton.innerHTML = '<i class="fas fa-filter"></i> Hide Filters';
      } else {
        toggleButton.innerHTML = '<i class="fas fa-filter"></i> Show Filters';
      }
    }
    
    function handleDateRangeChange() {
      const dateRange = document.getElementById('filter-date-range').value;
      const customDateRange = document.getElementById('custom-date-range');
      
      if (dateRange === 'custom') {
        customDateRange.style.display = 'block';
      } else {
        customDateRange.style.display = 'none';
      }
    }
    
    function validateDateRange() {
      if (fromDatePicker.selectedDates[0] && toDatePicker.selectedDates[0]) {
        if (fromDatePicker.selectedDates[0] > toDatePicker.selectedDates[0]) {
          showNotification('Error', 'Start date cannot be after end date', 'error');
          fromDatePicker.clear();
          return false;
        }
      }
      return true;
    }
    
    function resetFilters() {
      document.getElementById('filter-status').value = '';
      document.getElementById('filter-date-range').value = '30';
      document.getElementById('filter-team-member').value = '';
      document.getElementById('custom-date-range').style.display = 'none';
      fromDatePicker.clear();
      toDatePicker.clear();
    }
    
    function applyFilters() {
      const dateRange = document.getElementById('filter-date-range').value;
      if (dateRange === 'custom') {
        if (!validateDateRange()) {
          return;
        }
      }
      
      showLoading();
      
      // Get filter values
      const filters = {
        status: document.getElementById('filter-status').value,
        dateRange: dateRange,
        teamMemberId: document.getElementById('filter-team-member').value,
        startDate: fromDatePicker.selectedDates[0] || null,
        endDate: toDatePicker.selectedDates[0] || null
      };
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (!result || !result.success) {
            showNotification('Error', result ? result.message : 'Failed to filter sessions', 'error');
            return;
          }
          
          // Update recent sessions
          recentSessions = result.data.sessions || [];
          updateSessionsList(recentSessions);
        })
        .withFailureHandler(handleError)
        .filterOneOnOneSessions(filters);
    }
    
    function loadDashboardData() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleDashboardData)
        .withFailureHandler(handleError)
        .getOneOnOneDashboardData();
    }
    
    function handleDashboardData(result) {
      if (!result || !result.success) {
        hideLoading();
        showNotification('Error', result ? result.message : 'Failed to load dashboard data', 'error');
        return;
      }
      
      dashboardData = result.data;
      
      // Load team members for filter dropdown
      loadTeamMembers();
      
      // Update dashboard UI with data
      updateDashboardUI(dashboardData);
      
      // Initialize charts
      initializeCharts(dashboardData);
      
      hideLoading();
    }
    
    function loadTeamMembers() {
      google.script.run
        .withSuccessHandler(handleTeamMembersLoaded)
        .withFailureHandler(error => console.error('Error loading team members:', error))
        .getActiveTeamMembers();
    }
    
    function handleTeamMembersLoaded(result) {
      if (!result || !result.success) {
        return;
      }
      
      teamMembersList = result.data || [];
      
      // Populate team members dropdown
      const teamMemberSelect = document.getElementById('filter-team-member');
      teamMemberSelect.innerHTML = '<option value="">All Team Members</option>';
      
      teamMembersList.forEach(member => {
        const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim() || member.email;
        const option = document.createElement('option');
        option.value = member.id;
        option.textContent = fullName;
        teamMemberSelect.appendChild(option);
      });
    }
    
    function updateDashboardUI(data) {
      // Update insight cards
      document.getElementById('total-sessions').textContent = data.totalSessions || '0';
      document.getElementById('completion-rate').textContent = `${data.completionRate || '0'}%`;
      document.getElementById('team-coverage').textContent = `${data.teamCoverage || '0'}%`;
      document.getElementById('overdue-sessions').textContent = data.overdueSessions || '0';
      
      // Update trends
      document.getElementById('total-sessions-trend').textContent = `${data.totalSessionsTrend || '0'}% from last month`;
      document.getElementById('completion-rate-trend').textContent = `${data.completionRateTrend || '0'}% from last month`;
      document.getElementById('team-coverage-trend').textContent = `${data.teamCoverageTrend || '0'}% from last month`;
      document.getElementById('overdue-sessions-trend').textContent = `${data.overdueSessionsTrend || '0'}% from last month`;
      
      // Update session counts
      document.getElementById('sessions-this-week').textContent = data.sessionsThisWeek || '0';
      document.getElementById('sessions-next-week').textContent = data.sessionsNextWeek || '0';
      document.getElementById('sessions-this-month').textContent = data.sessionsThisMonth || '0';
      document.getElementById('sessions-overdue').textContent = data.sessionsOverdue || '0';
      
      // Update recent sessions
      recentSessions = data.recentSessions || [];
      updateSessionsList(recentSessions);
      
      // Update team members needing attention
      updateTeamMembersNeedingAttention(data.teamMembersNeedingAttention || []);
      
      // Update open action items
      updateActionItems(data.openActionItems || []);
    }
    
    function updateSessionsList(sessions) {
      const sessionsList = document.getElementById('sessions-list');
      
      if (!sessions || sessions.length === 0) {
        sessionsList.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon"><i class="fas fa-calendar-times"></i></div>
            <h5 class="empty-title">No Sessions Found</h5>
            <p class="empty-message">You don't have any one-on-one sessions that match your filters.</p>
            <button class="btn btn-primary" id="empty-schedule-btn">
              <i class="fas fa-plus me-2"></i> Schedule a Session
            </button>
          </div>
        `;
        
        document.getElementById('empty-schedule-btn').addEventListener('click', createNewSession);
        return;
      }
      
      // Clear and populate sessions list
      sessionsList.innerHTML = '';
      
      sessions.forEach(session => {
        const sessionItem = createSessionListItem(session);
        sessionsList.appendChild(sessionItem);
      });
    }
    
    function createSessionListItem(session) {
      // Find team member details
      const teamMember = teamMembersList.find(m => m.id === session.teamMemberId);
      const fullName = teamMember ? 
        `${teamMember.firstName || ''} ${teamMember.lastName || ''}`.trim() : 
        (session.teamMemberName || session.teamMemberEmail || 'Unknown');
        
      const initials = getInitials(fullName);
      
      // Determine status badge class
      let badgeClass = '';
      let statusText = '';
      
      if (session.status === 'completed') {
        badgeClass = 'badge-completed';
        statusText = 'Completed';
      } else if (session.status === 'scheduled') {
        badgeClass = 'badge-scheduled';
        statusText = 'Scheduled';
      } else if (session.status === 'draft') {
        badgeClass = 'badge-draft';
        statusText = 'Draft';
      } else if (session.isOverdue) {
        badgeClass = 'badge-overdue';
        statusText = 'Overdue';
      }
      
      // Create session item
      const item = document.createElement('li');
      item.className = 'session-item';
      
      item.innerHTML = `
        <div class="d-flex align-items-center">
          <div class="session-avatar">${initials}</div>
          <div class="session-info">
            <div class="session-title">
              ${fullName}
              <span class="session-badge ${badgeClass}">${statusText}</span>
            </div>
            <div class="session-meta">
              <div class="session-meta-item">
                <i class="far fa-calendar-alt session-meta-icon"></i>
                ${formatDate(session.date)}
              </div>
              ${session.nextSessionDate ? `
                <div class="session-meta-item">
                  <i class="fas fa-calendar-day session-meta-icon"></i>
                  Next: ${formatDate(session.nextSessionDate)}
                </div>
              ` : ''}
              ${session.meetingPurpose ? `
                <div class="session-meta-item">
                  <i class="fas fa-tag session-meta-icon"></i>
                  ${session.meetingPurpose}
                </div>
              ` : ''}
            </div>
          </div>
        </div>
        
        <div class="session-actions">
          <button class="btn btn-outline-primary btn-sm view-session" data-id="${session.id}">
            View
          </button>
        </div>
      `;
      
      // Add event listener to view button
      item.querySelector('.view-session').addEventListener('click', function(e) {
        e.stopPropagation();
        viewSession(session.id);
      });
      
      // Add click event to entire item
      item.addEventListener('click', function() {
        viewSession(session.id);
      });
      
      return item;
    }
    
    function updateTeamMembersNeedingAttention(members) {
      const teamMembersList = document.getElementById('team-members-list');
      
      if (!members || members.length === 0) {
        teamMembersList.innerHTML = `
          <div class="empty-state w-100">
            <div class="empty-icon"><i class="fas fa-users"></i></div>
            <h5 class="empty-title">No Attention Needed</h5>
            <p class="empty-message">All team members are currently on track with their one-on-ones.</p>
          </div>
        `;
        return;
      }
      
      // Clear and populate team members list
      teamMembersList.innerHTML = '';
      
      members.forEach(member => {
        const memberItem = createTeamMemberListItem(member);
        teamMembersList.appendChild(memberItem);
      });
    }
    
    function createTeamMemberListItem(member) {
      const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim() || member.email || 'Unknown';
      const initials = getInitials(fullName);
      
      // Determine status class
      let statusClass = 'status-active';
      if (member.status === 'On Leave') {
        statusClass = 'status-leave';
      } else if (member.status === 'Inactive') {
        statusClass = 'status-inactive';
      }
      
      // Create reason text
      let reasonText = '';
      if (member.daysSinceLastSession > 30) {
        reasonText = `No session in ${member.daysSinceLastSession} days`;
      } else if (member.missedSessions > 0) {
        reasonText = `${member.missedSessions} missed session${member.missedSessions > 1 ? 's' : ''}`;
      } else if (member.overdueActionItems > 0) {
        reasonText = `${member.overdueActionItems} overdue action item${member.overdueActionItems > 1 ? 's' : ''}`;
      } else {
        reasonText = 'No recent sessions';
      }
      
      const memberItem = document.createElement('div');
      memberItem.className = 'team-member-item';
      
      memberItem.innerHTML = `
        <div class="member-avatar">${initials}</div>
        <div class="member-info">
          <div class="member-name">${fullName}</div>
          <div class="member-position">${member.position || 'No position specified'}</div>
          <div class="member-status">
            <div class="status-indicator ${statusClass}"></div>
            <div class="me-2">${member.status || 'Active'}</div>
            <span class="badge badge-warning">${reasonText}</span>
          </div>
        </div>
        <div class="member-actions">
          <button class="btn btn-primary btn-sm schedule-session" data-id="${member.id}">
            Schedule
          </button>
        </div>
      `;
      
      // Add event listener to schedule button
      memberItem.querySelector('.schedule-session').addEventListener('click', function(e) {
        e.stopPropagation();
        scheduleSessionForMember(member.id);
      });
      
      // Add click event to entire item
      memberItem.addEventListener('click', function() {
        viewTeamMember(member.id);
      });
      
      return memberItem;
    }
    
    function updateActionItems(actionItems) {
      const actionItemsContainer = document.getElementById('action-items-container');
      
      if (!actionItems || actionItems.length === 0) {
        actionItemsContainer.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon"><i class="fas fa-clipboard-check"></i></div>
            <h5 class="empty-title">No Open Action Items</h5>
            <p class="empty-message">All action items from your one-on-one sessions have been completed.</p>
          </div>
        `;
        return;
      }
      
      // Limit to top 5
      const displayItems = actionItems.slice(0, 5);
      
      // Clear and populate action items
      actionItemsContainer.innerHTML = '';
      
      displayItems.forEach(item => {
        const actionItem = document.createElement('div');
        actionItem.className = 'action-item';
        
        let assignedTo = 'Unknown';
        if (item.teamMemberName) {
          assignedTo = item.teamMemberName;
        } else if (item.owner === 'team-member') {
          assignedTo = 'Team Member';
        } else if (item.owner === 'manager') {
          assignedTo = 'You';
        } else if (item.owner === 'both') {
          assignedTo = 'Both';
        }
        
        actionItem.innerHTML = `
          <div class="action-status ${item.completed ? 'completed' : ''}"></div>
          <div class="action-content">
            <div class="action-title">${item.title}</div>
            <div class="action-meta">
              <span><i class="fas fa-user-circle me-1"></i> ${assignedTo}</span>
              ${item.dueDate ? `<span class="${isOverdue(item.dueDate) && !item.completed ? 'text-danger' : ''}">
                <i class="far fa-calendar-alt me-1"></i> Due: ${formatDate(item.dueDate)}
              </span>` : ''}
            </div>
            ${item.description ? `<div class="action-description">${item.description}</div>` : ''}
          </div>
        `;
        
        actionItemsContainer.appendChild(actionItem);
      });
      
      // Add "View more" message if there are more than 5 items
      if (actionItems.length > 5) {
        const viewMore = document.createElement('div');
        viewMore.className = 'text-center py-2';
        viewMore.innerHTML = `
          <button class="btn btn-link" id="view-more-items">
            View ${actionItems.length - 5} more action items
          </button>
        `;
        
        actionItemsContainer.appendChild(viewMore);
        
        document.getElementById('view-more-items').addEventListener('click', viewAllActionItems);
      }
    }
    
    function initializeCharts(data) {
      // Initialize sparkline charts for insight cards
      initializeSparklineCharts(data);
      
      // Initialize team coverage history chart
      initializeTeamCoverageChart(data);
      
      // Initialize sessions by status chart
      initializeSessionsByStatusChart(data);
    }
    
    function initializeSparklineCharts(data) {
      // Total sessions sparkline
      const totalSessionsOptions = {
        chart: {
          type: 'area',
          height: 60,
          sparkline: { enabled: true },
          animations: { enabled: true }
        },
        stroke: { curve: 'smooth', width: 2 },
        fill: {
          opacity: 0.3,
          type: 'gradient',
          gradient: {
            shade: 'light',
            type: 'vertical',
            opacityFrom: 0.5,
            opacityTo: 0
          }
        },
        series: [{
          name: 'Sessions',
          data: data.totalSessionsHistory || [0, 0, 0, 0, 0, 0]
        }],
        colors: ['#4361ee'],
        tooltip: { enabled: false }
      };
      
      // Completion rate sparkline
      const completionRateOptions = {
        chart: {
          type: 'area',
          height: 60,
          sparkline: { enabled: true },
          animations: { enabled: true }
        },
        stroke: { curve: 'smooth', width: 2 },
        fill: {
          opacity: 0.3,
          type: 'gradient',
          gradient: {
            shade: 'light',
            type: 'vertical',
            opacityFrom: 0.5,
            opacityTo: 0
          }
        },
        series: [{
          name: 'Completion Rate',
          data: data.completionRateHistory || [0, 0, 0, 0, 0, 0]
        }],
        colors: ['#4cc9f0'],
        tooltip: { enabled: false }
      };
      
      // Team coverage sparkline
      const teamCoverageOptions = {
        chart: {
          type: 'area',
          height: 60,
          sparkline: { enabled: true },
          animations: { enabled: true }
        },
        stroke: { curve: 'smooth', width: 2 },
        fill: {
          opacity: 0.3,
          type: 'gradient',
          gradient: {
            shade: 'light',
            type: 'vertical',
            opacityFrom: 0.5,
            opacityTo: 0
          }
        },
        series: [{
          name: 'Coverage',
          data: data.teamCoverageHistory || [0, 0, 0, 0, 0, 0]
        }],
        colors: ['#4895ef'],
        tooltip: { enabled: false }
      };
      
      // Overdue sessions sparkline
      const overdueSessionsOptions = {
        chart: {
          type: 'area',
          height: 60,
          sparkline: { enabled: true },
          animations: { enabled: true }
        },
        stroke: { curve: 'smooth', width: 2 },
        fill: {
          opacity: 0.3,
          type: 'gradient',
          gradient: {
            shade: 'light',
            type: 'vertical',
            opacityFrom: 0.5,
            opacityTo: 0
          }
        },
        series: [{
          name: 'Overdue',
          data: data.overdueSessionsHistory || [0, 0, 0, 0, 0, 0]
        }],
        colors: ['#f72585'],
        tooltip: { enabled: false }
      };
      
      // Render charts
      sessionCharts.totalSessions = new ApexCharts(document.getElementById('total-sessions-chart'), totalSessionsOptions);
      sessionCharts.completionRate = new ApexCharts(document.getElementById('completion-rate-chart'), completionRateOptions);
      sessionCharts.teamCoverage = new ApexCharts(document.getElementById('team-coverage-chart'), teamCoverageOptions);
      sessionCharts.overdueSessions = new ApexCharts(document.getElementById('overdue-sessions-chart'), overdueSessionsOptions);
      
            sessionCharts.totalSessions.render();
      sessionCharts.completionRate.render();
      sessionCharts.teamCoverage.render();
      sessionCharts.overdueSessions.render();
    }
    
    function initializeTeamCoverageChart(data) {
      // Default to last 90 days
      const timeRange = 90;
      
      const coverageData = prepareTeamCoverageData(data, timeRange);
      
      const options = {
        chart: {
          type: 'bar',
          height: 300,
          stacked: true,
          toolbar: {
            show: false
          },
          animations: {
            enabled: true,
            dynamicAnimation: {
              speed: 400
            }
          },
          fontFamily: getComputedStyle(document.body).fontFamily
        },
        plotOptions: {
          bar: {
            horizontal: false,
            columnWidth: '55%',
            borderRadius: 4,
            borderRadiusApplication: 'end',
            borderRadiusWhenStacked: 'all'
          },
        },
        colors: ['#4361ee', '#f72585'],
        dataLabels: {
          enabled: false
        },
        stroke: {
          show: true,
          width: 2,
          colors: ['transparent']
        },
        series: [
          {
            name: 'Completed',
            data: coverageData.completed
          },
          {
            name: 'Missed',
            data: coverageData.missed
          }
        ],
        xaxis: {
          categories: coverageData.categories,
          labels: {
            style: {
              colors: 'var(--text-secondary)',
              fontSize: '12px'
            }
          },
          axisBorder: {
            show: false
          }
        },
        yaxis: {
          title: {
            text: 'Sessions',
            style: {
              color: 'var(--text-secondary)',
              fontSize: '12px',
              fontWeight: 500
            }
          },
          labels: {
            style: {
              colors: 'var(--text-secondary)'
            }
          }
        },
        grid: {
          borderColor: 'var(--border-color)',
          padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 10
          }
        },
        tooltip: {
          y: {
            formatter: function(val) {
              return val + " sessions";
            }
          }
        },
        legend: {
          show: false
        },
        responsive: [{
          breakpoint: 768,
          options: {
            chart: {
              height: 240
            }
          }
        }]
      };
      
      // Render chart
      sessionCharts.teamCoverageHistory = new ApexCharts(document.getElementById('team-coverage-history-chart'), options);
      sessionCharts.teamCoverageHistory.render();
    }
    
    function initializeSessionsByStatusChart(data) {
      // Prepare data
      const statuses = ['Scheduled', 'Completed', 'Draft', 'Overdue'];
      const statusCounts = [
        data.sessionsScheduled || 0,
        data.sessionsCompleted || 0,
        data.sessionsDraft || 0,
        data.sessionsOverdue || 0
      ];
      
      const options = {
        chart: {
          type: 'donut',
          height: 240,
          fontFamily: getComputedStyle(document.body).fontFamily
        },
        colors: ['#4361ee', '#4cc9f0', '#4895ef', '#f72585'],
        series: statusCounts,
        labels: statuses,
        legend: {
          position: 'bottom',
          offsetY: 0,
          height: 40,
          fontWeight: 500,
          formatter: function(seriesName, opts) {
            return [seriesName, ' - ', opts.w.globals.series[opts.seriesIndex]].join('')
          }
        },
        dataLabels: {
          enabled: false
        },
        plotOptions: {
          pie: {
            donut: {
              size: '60%',
              labels: {
                show: true,
                name: {
                  show: true,
                  offsetY: -10
                },
                value: {
                  show: true,
                  fontSize: '20px',
                  fontWeight: 600,
                  color: 'var(--text-primary)'
                },
                total: {
                  show: true,
                  label: 'Total',
                  color: 'var(--text-secondary)',
                  fontWeight: 500,
                  formatter: function(w) {
                    return w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                  }
                }
              }
            }
          }
        },
        stroke: {
          width: 2,
          colors: ['var(--surface)']
        },
        tooltip: {
          enabled: true,
          fillSeriesColor: false,
          theme: 'light',
          style: {
            fontSize: '14px'
          },
          y: {
            formatter: function(val) {
              return val + ' sessions';
            }
          }
        },
        states: {
          hover: {
            filter: {
              type: 'none'
            }
          },
          active: {
            filter: {
              type: 'none'
            }
          }
        }
      };
      
      // Render chart
      sessionCharts.sessionsByStatus = new ApexCharts(document.getElementById('sessions-by-status-chart'), options);
      sessionCharts.sessionsByStatus.render();
    }
    
    function prepareTeamCoverageData(data, timeRange) {
      // This would normally use real data from dashboardData
      // For now, we'll generate sample data based on time range
      
      let categories = [];
      let completed = [];
      let missed = [];
      
      // Generate appropriate number of categories and data points based on time range
      let intervalCount;
      let intervalLabel;
      
      if (timeRange <= 30) {
        // Last 30 days - show weekly data (4-5 points)
        intervalCount = 4;
        intervalLabel = 'Week';
      } else if (timeRange <= 90) {
        // Last 90 days - show biweekly data (6-7 points)
        intervalCount = 6;
        intervalLabel = 'Two Weeks';
      } else if (timeRange <= 180) {
        // Last 6 months - show monthly data (6 points)
        intervalCount = 6;
        intervalLabel = 'Month';
      } else {
        // Last year - show bimonthly data (6 points)
        intervalCount = 6;
        intervalLabel = 'Two Months';
      }
      
      // If we have actual data, use it
      if (data.teamCoverageData && data.teamCoverageData[timeRange]) {
        return data.teamCoverageData[timeRange];
      }
      
      // Otherwise generate sample data
      for (let i = 0; i < intervalCount; i++) {
        categories.push(`${intervalLabel} ${i + 1}`);
        
        // Generate trending data - more completions over time, fewer missed
        const completedBase = 10 + (i * 2) + Math.floor(Math.random() * 5);
        const missedBase = Math.max(0, 8 - (i * 1) + Math.floor(Math.random() * 4));
        
        completed.push(completedBase);
        missed.push(missedBase);
      }
      
      return {
        categories,
        completed,
        missed
      };
    }
    
    function updateCoverageChart(timeRange) {
      // Get new data based on time range
      const coverageData = prepareTeamCoverageData(dashboardData, parseInt(timeRange));
      
      // Update the chart
      sessionCharts.teamCoverageHistory.updateOptions({
        xaxis: {
          categories: coverageData.categories
        }
      });
      
      sessionCharts.teamCoverageHistory.updateSeries([
        { name: 'Completed', data: coverageData.completed },
        { name: 'Missed', data: coverageData.missed }
      ]);
    }
    
    function getInitials(name) {
      if (!name || name === 'Unknown') return '?';
      
      return name
        .split(' ')
        .map(n => n[0])
        .join('')
        .toUpperCase()
        .substring(0, 2);
    }
    
    function formatDate(dateString) {
      if (!dateString) return 'N/A';
      
      const date = new Date(dateString);
      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const yesterday = new Date(today);
      yesterday.setDate(yesterday.getDate() - 1);
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      // Check if date is today, yesterday or tomorrow
      if (date.toDateString() === today.toDateString()) {
        return 'Today';
      } else if (date.toDateString() === yesterday.toDateString()) {
        return 'Yesterday';
      } else if (date.toDateString() === tomorrow.toDateString()) {
        return 'Tomorrow';
      }
      
      // If it's within the current week, show day name
      const dayDiff = Math.round((date - today) / (1000 * 60 * 60 * 24));
      if (dayDiff > -7 && dayDiff < 7) {
        return date.toLocaleDateString(undefined, { weekday: 'long' });
      }
      
      // Otherwise format as MMM D, YYYY
      return date.toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric' });
    }
    
    function isOverdue(dateString) {
      if (!dateString) return false;
      
      const dueDate = new Date(dateString);
      const now = new Date();
      now.setHours(0, 0, 0, 0);
      
      return dueDate < now;
    }
    
    function createNewSession() {
      google.script.run.showManagerOneOnOneForm();
      google.script.host.close();
    }
    
    function scheduleSessionForMember(memberId) {
      // Pass the team member ID to the form
      google.script.run.showManagerOneOnOneFormForMember(memberId);
      google.script.host.close();
    }
    
    function viewSession(sessionId) {
      google.script.run.showManagerOneOnOneNotes(sessionId);
      google.script.host.close();
    }
    
    function viewTeamMember(memberId) {
      google.script.run.showTeamMemberView(memberId);
      google.script.host.close();
    }
    
    function viewAllActionItems() {
      google.script.run.showActionItems();
      google.script.host.close();
    }
    
    function refreshDashboard() {
      loadDashboardData();
      showNotification('Success', 'Dashboard refreshed successfully', 'success');
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const loadingOverlay = document.getElementById('loading-overlay');
      loadingOverlay.style.opacity = '0';
      setTimeout(() => {
        loadingOverlay.style.display = 'none';
        loadingOverlay.style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
    
    // Automatically check if there's a user session in progress when the dashboard loads
    function checkForUserSession() {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      // Current date and time
      const currentDate = "2025-03-27"; // Using the provided date
      const currentUser = "amourjanay"; // Using the provided login
      
      // Add logic to check if there's a scheduled session for today
      // This would normally come from the backend
      if (dashboardData && dashboardData.recentSessions) {
        const todaySession = dashboardData.recentSessions.find(session => {
          const sessionDate = new Date(session.date);
          sessionDate.setHours(0, 0, 0, 0);
          return sessionDate.getTime() === today.getTime() && session.status === 'scheduled';
        });
        
        if (todaySession) {
          setTimeout(() => {
            showNotification('Reminder', `You have a one-on-one session scheduled today with ${todaySession.teamMemberName}`, 'info');
          }, 3000);
        }
      }
    }
  </script>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
      padding: 1.5rem;
    }
    
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      padding: 1.25rem;
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--info));
    }
    
    .card-title {
      margin: 0;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      background: var(--primary);
      color: white;
      border-radius: 8px;
      margin-right: 0.75rem;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Form Controls */
    .form-label {
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: var(--text-primary);
    }
    
    .form-control {
      border-radius: 8px;
      padding: 0.65rem 1rem;
      border: 1px solid var(--border-color);
      background-color: rgba(255, 255, 255, 0.8);
      transition: var(--transition);
    }
    
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.25rem var(--primary-light);
    }
    
    .form-select {
      border-radius: 8px;
      padding: 0.65rem 1rem;
      border: 1px solid var(--border-color);
      background-color: rgba(255, 255, 255, 0.8);
      transition: var(--transition);
    }
    
    .form-select:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.25rem var(--primary-light);
    }
    
    /* Rich Text Editor */
    .editor-toolbar {
      background-color: var(--surface);
      border: 1px solid var(--border-color);
      border-bottom: none;
      border-radius: 8px 8px 0 0;
      padding: 0.5rem;
      display: flex;
      flex-wrap: wrap;
      gap: 0.25rem;
    }
    
    .toolbar-btn {
      width: 36px;
      height: 36px;
      border-radius: 6px;
      background: none;
      border: none;
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .toolbar-btn:hover {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .toolbar-btn.active {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .toolbar-separator {
      width: 1px;
      height: 24px;
      background-color: var(--border-color);
      margin: 0 0.25rem;
    }
    
    .editor-content {
      border: 1px solid var(--border-color);
      border-radius: 0 0 8px 8px;
      padding: 1rem;
      min-height: 300px;
      background-color: var(--surface);
      overflow-y: auto;
      transition: var(--transition);
    }
    
    .editor-content:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 0.25rem var(--primary-light);
    }
    
    /* Tags Input */
    .tags-container {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      padding: 0.5rem 0;
    }
    
    .tag {
      background-color: var(--primary-light);
      color: var(--primary);
      border-radius: 4px;
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
      display: flex;
      align-items: center;
    }
    
    .tag-remove {
      margin-left: 0.5rem;
      cursor: pointer;
      font-size: 0.875rem;
      width: 16px;
      height: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      background-color: rgba(67, 97, 238, 0.2);
      transition: var(--transition);
    }
    
    .tag-remove:hover {
      background-color: var(--primary);
      color: white;
    }
    
    .tags-input-container {
      display: flex;
      align-items: center;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 0.25rem 0.5rem;
    }
    
    .tags-input {
      flex: 1;
      border: none;
      outline: none;
      padding: 0.5rem;
      background: transparent;
    }
    
    /* Button Styles */
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.25rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      border-color: var(--secondary);
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      color: white;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-danger {
      background-color: var(--danger);
      border-color: var(--danger);
    }
    
    .btn-danger:hover {
      background-color: #d62b2e;
      border-color: #d62b2e;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    /* Form Section */
    .form-section {
      background: rgba(255, 255, 255, 0.5);
      border-radius: var(--border-radius);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      border: 1px solid var(--border-color);
    }
    
    .form-section-title {
      font-weight: 600;
      margin-bottom: 1.25rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid var(--border-color);
      color: var(--primary);
      display: flex;
      align-items: center;
      font-size: 1.1rem;
    }
    
    .form-section-icon {
      margin-right: 0.75rem;
      width: 28px;
      height: 28px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--primary);
      color: white;
      border-radius: 6px;
    }
    
    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s ease;
    }
    
    .spinner {
      width: 48px;
      height: 48px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      max-width: 350px;
      min-width: 300px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--shadow-md);
      padding: 1rem;
      z-index: 9998;
      transform: translateX(120%);
      transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
      border-left: 4px solid var(--primary);
      display: flex;
      align-items: flex-start;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      margin-right: 0.75rem;
      font-size: 1.25rem;
    }
    
    .notification-content {
      flex-grow: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .notification-message {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .notification-close {
      border: none;
      background: none;
      color: var(--text-secondary);
      opacity: 0.5;
      transition: var(--transition);
      padding: 0;
      margin-left: 0.75rem;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }
    
    /* Responsive Adjustments */
    @media (max-width: 768px) {
      body {
        padding: 1rem;
      }
      
      .card-body, .form-section {
        padding: 1rem;
      }
      
      .editor-toolbar {
        flex-wrap: wrap;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="container">
    <div class="content-card fade-in">
      <div class="card-header">
        <h5 class="card-title">
          <div class="card-title-icon">
            <i class="fas fa-sticky-note"></i>
          </div>
          <span id="form-title">Create New Note</span>
        </h5>
        
        <div>
          <button type="button" id="back-button" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left me-2"></i> Back
          </button>
        </div>
      </div>
      
      <div class="card-body">
        <form id="note-form">
          <input type="hidden" id="note-id" value="">
          
          <!-- Basic Information -->
          <div class="form-section">
            <h6 class="form-section-title">
              <span class="form-section-icon"><i class="fas fa-info-circle"></i></span>
              Basic Information
            </h6>
            
            <div class="mb-3">
              <label for="note-title" class="form-label">Title*</label>
              <input type="text" class="form-control" id="note-title" required>
            </div>
            
            <div class="mb-3">
              <label for="note-category" class="form-label">Category</label>
              <select class="form-select" id="note-category">
                <option value="general">General</option>
                <option value="work">Work</option>
                <option value="ideas">Ideas</option>
                <option value="todo">To-Do</option>
                <option value="personal">Personal</option>
                <option value="reference">Reference</option>
              </select>
            </div>
            
            <div class="mb-3">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" id="pin-note">
                <label class="form-check-label" for="pin-note">
                  Pin this note to top
                </label>
              </div>
            </div>
          </div>
          
          <!-- Note Content -->
          <div class="form-section">
            <h6 class="form-section-title">
              <span class="form-section-icon"><i class="fas fa-file-alt"></i></span>
              Note Content
            </h6>
            
            <div class="mb-3">
              <div class="editor-toolbar">
                <button type="button" class="toolbar-btn" data-command="bold" title="Bold">
                  <i class="fas fa-bold"></i>
                </button>
                <button type="button" class="toolbar-btn" data-command="italic" title="Italic">
                  <i class="fas fa-italic"></i>
                </button>
                <button type="button" class="toolbar-btn" data-command="underline" title="Underline">
                  <i class="fas fa-underline"></i>
                </button>
                <div class="toolbar-separator"></div>
                
                <button type="button" class="toolbar-btn" data-command="justifyLeft" title="Align Left">
                  <i class="fas fa-align-left"></i>
                </button>
                <button type="button" class="toolbar-btn" data-command="justifyCenter" title="Align Center">
                  <i class="fas fa-align-center"></i>
                </button>
                <button type="button" class="toolbar-btn" data-command="justifyRight" title="Align Right">
                  <i class="fas fa-align-right"></i>
                </button>
                <div class="toolbar-separator"></div>
                
                <button type="button" class="toolbar-btn" data-command="insertUnorderedList" title="Bullet List">
                  <i class="fas fa-list-ul"></i>
                </button>
                <button type="button" class="toolbar-btn" data-command="insertOrderedList" title="Numbered List">
                  <i class="fas fa-list-ol"></i>
                </button>
                <div class="toolbar-separator"></div>
                
                <button type="button" class="toolbar-btn" data-command="createLink" title="Insert Link">
                  <i class="fas fa-link"></i>
                </button>
              </div>
              <div class="editor-content" id="note-content" contenteditable="true"></div>
            </div>
          </div>
          
          <!-- Tags -->
          <div class="form-section">
            <h6 class="form-section-title">
              <span class="form-section-icon"><i class="fas fa-tags"></i></span>
              Tags
            </h6>
            
            <div class="mb-3">
              <div class="tags-container" id="tags-container">
                <!-- Tags will be added here dynamically -->
              </div>
              
              <div class="tags-input-container">
                <input type="text" class="tags-input" id="tags-input" placeholder="Add a tag and press Enter...">
              </div>
              <small class="form-text text-muted">Press Enter to add each tag</small>
            </div>
          </div>
          
          <!-- Form Actions -->
          <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-outline-primary" id="cancel-btn">
              Cancel
            </button>
            
            <div>
              <button type="button" class="btn btn-danger me-2" id="delete-btn" style="display: none;">
                Delete
              </button>
              <button type="submit" class="btn btn-primary" id="save-btn">
                <i class="fas fa-save me-2"></i> Save Note
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <script>
    // Global variables
    let noteId = '';
    let noteTags = [];
    let isEditMode = false;
    
    document.addEventListener('DOMContentLoaded', function() {
      // Setup event listeners
      setupEventListeners();
      
      // Check if we are editing an existing note
      const urlParams = new URLSearchParams(window.location.search);
      noteId = urlParams.get('id');
      
      if (noteId) {
        isEditMode = true;
        document.getElementById('form-title').textContent = 'Edit Note';
        document.getElementById('delete-btn').style.display = 'inline-block';
        document.getElementById('note-id').value = noteId;
        
        // Load note data
        loadNoteData(noteId);
      } else {
        // New note
        hideLoading();
      }
    });
    
    function setupEventListeners() {
      // Form submission
      document.getElementById('note-form').addEventListener('submit', function(e) {
        e.preventDefault();
        saveNote();
      });
      
      // Cancel button
      document.getElementById('cancel-btn').addEventListener('click', goBack);
      
      // Back button
      document.getElementById('back-button').addEventListener('click', goBack);
      
      // Delete button
      document.getElementById('delete-btn').addEventListener('click', deleteNote);
      
      // Tags input
      document.getElementById('tags-input').addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          
          const tagValue = this.value.trim();
          if (tagValue) {
            addTag(tagValue);
            this.value = '';
          }
        }
      });
      
      // Editor toolbar buttons
      document.querySelectorAll('.toolbar-btn').forEach(button => {
        button.addEventListener('click', function() {
          const command = this.getAttribute('data-command');
          executeCommand(command);
        });
      });
    }
    
    function loadNoteData(id) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleNoteLoaded)
        .withFailureHandler(handleError)
        .getNoteById(id);
    }
    
    function handleNoteLoaded(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load note', 'error');
        return;
      }
      
      const note = result.data;
      
      // Set form values
      document.getElementById('note-title').value = note.title || '';
      document.getElementById('note-category').value = note.category || 'general';
      document.getElementById('pin-note').checked = note.isPinned || false;
      document.getElementById('note-content').innerHTML = note.content || '';
      
      // Set tags
      noteTags = note.tags || [];
      refreshTagsUI();
    }
    
    function executeCommand(command) {
      if (command === 'createLink') {
        const url = prompt('Enter the URL:');
        if (url) {
          document.execCommand(command, false, url);
        }
      } else {
        document.execCommand(command, false, null);
      }
      
      // Focus back on editor
      document.getElementById('note-content').focus();
    }
    
    function addTag(tagText) {
      // Skip if empty or already exists
      if (!tagText || noteTags.includes(tagText.toLowerCase())) {
        return;
      }
      
      // Add to tags array
      noteTags.push(tagText.toLowerCase());
      
      refreshTagsUI();
    }
    
    function removeTag(tag) {
      noteTags = noteTags.filter(t => t !== tag);
      refreshTagsUI();
    }
    
    function refreshTagsUI() {
      const tagsContainer = document.getElementById('tags-container');
      tagsContainer.innerHTML = '';
      
      noteTags.forEach(tag => {
        const tagElement = document.createElement('div');
        tagElement.className = 'tag';
        tagElement.innerHTML = `
          ${tag}
          <span class="tag-remove">&times;</span>
        `;
        
        tagElement.querySelector('.tag-remove').addEventListener('click', () => removeTag(tag));
        
        tagsContainer.appendChild(tagElement);
      });
    }
    
    function saveNote() {
      // Validate form
      const title = document.getElementById('note-title').value.trim();
      if (!title) {
        showNotification('Error', 'Please enter a title for your note', 'error');
        document.getElementById('note-title').focus();
        return;
      }
      
      showLoading();
      
      // Get form data
      const noteData = {
        id: document.getElementById('note-id').value,
        title: title,
        content: document.getElementById('note-content').innerHTML,
        category: document.getElementById('note-category').value,
        isPinned: document.getElementById('pin-note').checked,
        tags: noteTags
      };
      
      google.script.run
        .withSuccessHandler(handleNoteSaved)
        .withFailureHandler(handleError)
        .saveGeneralNote(noteData);
    }
    
    function handleNoteSaved(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to save note', 'error');
        return;
      }
      
      showNotification('Success', 'Note saved successfully', 'success');
      
      // Wait a moment to show success message before redirecting
      setTimeout(() => {
        goBack();
      }, 1500);
    }
    
    function deleteNote() {
      if (!noteId) {
        return;
      }
      
      if (confirm('Are you sure you want to delete this note? This action cannot be undone.')) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(function(result) {
            hideLoading();
            
            if (result && result.success) {
              showNotification('Success', 'Note deleted successfully', 'success');
              
              // Wait a moment to show success message before redirecting
              setTimeout(() => {
                goBack();
              }, 1500);
            } else {
              showNotification('Error', result ? result.message : 'Failed to delete note', 'error');
            }
          })
          .withFailureHandler(handleError)
          .deleteGeneralNote(noteId);
      }
    }
    
    function goBack() {
      google.script.run.showGeneralNotesDashboard();
      google.script.host.close();
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const loadingOverlay = document.getElementById('loading-overlay');
      loadingOverlay.style.opacity = '0';
      setTimeout(() => {
        loadingOverlay.style.display = 'none';
        loadingOverlay.style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
          // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
    
    // Store creation metadata
    function storeNoteMetadata(note) {
      if (!note.createdAt) {
        // Use current timestamp for new notes
        note.createdAt = new Date().toISOString();
      }
      
      // Always update the lastModified timestamp
      note.lastModified = new Date().toISOString();
      
      return note;
    }
  </script>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
    }
    
    /* Layout */
    .app-container {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      max-width: 1200px;
      margin: 0 auto;
      padding: 1.5rem;
    }
    
    /* Content Cards */
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      padding: 1.25rem;
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--info));
    }
    
    .card-title {
      margin: 0;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      background: var(--primary);
      color: white;
      border-radius: 8px;
      margin-right: 0.75rem;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Note Display */
    .note-meta {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      margin-bottom: 1.5rem;
      color: var(--text-secondary);
      font-size: 0.9rem;
    }
    
    .note-meta-item {
      display: flex;
      align-items: center;
    }
    
    .note-meta-icon {
      margin-right: 0.5rem;
    }
    
    .note-category {
      background-color: var(--primary-light);
      color: var(--primary);
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 500;
    }
    
    .note-category.work {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .note-category.ideas {
      background-color: var(--warning-light);
      color: var(--warning);
    }
    
    .note-category.todo {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .note-content {
      background-color: var(--surface);
      border-radius: var(--border-radius);
      padding: 1.5rem;
      box-shadow: var(--shadow-sm);
      margin-bottom: 1.5rem;
      line-height: 1.6;
      overflow-wrap: break-word;
    }
    
    .note-content img {
      max-width: 100%;
      height: auto;
      border-radius: 4px;
    }
    
    .note-content a {
      color: var(--primary);
      text-decoration: none;
    }
    
    .note-content a:hover {
      text-decoration: underline;
    }
    
    .note-content h1, .note-content h2, .note-content h3,
    .note-content h4, .note-content h5, .note-content h6 {
      margin-top: 1.5em;
      margin-bottom: 0.75em;
      font-weight: 600;
      line-height: 1.3;
      color: var(--text-primary);
    }
    
    .note-content h1 { font-size: 1.75rem; }
    .note-content h2 { font-size: 1.5rem; }
    .note-content h3 { font-size: 1.25rem; }
    .note-content h4 { font-size: 1.1rem; }
    .note-content h5, .note-content h6 { font-size: 1rem; }
    
    .note-content p {
      margin-bottom: 1em;
    }
    
    .note-content ul, .note-content ol {
      margin-bottom: 1em;
      padding-left: 2em;
    }
    
    .note-content blockquote {
      border-left: 4px solid var(--primary-light);
      padding-left: 1rem;
      margin-left: 0;
      color: var(--text-secondary);
      font-style: italic;
    }
    
    .tags-container {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
    }
    
    .tag {
      background-color: var(--primary-light);
      color: var(--primary);
      border-radius: 4px;
      padding: 0.25rem 0.5rem;
      font-size: 0.8rem;
      transition: var(--transition);
    }
    
    .tag:hover {
      background-color: var(--primary);
      color: white;
      transform: translateY(-2px);
    }
    
    /* Button Styles */
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.25rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      border-color: var(--secondary);
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      color: white;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-danger {
      background-color: var(--danger);
      border-color: var(--danger);
    }
    
    .btn-danger:hover {
      background-color: #d62b2e;
      border-color: #d62b2e;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-icon {
      width: 36px;
      height: 36px;
      padding: 0;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      font-size: 1rem;
    }
    
    /* Related Notes */
    .related-notes-section {
      margin-top: 2rem;
    }
    
    .related-note {
      padding: 1rem;
      border-radius: var(--border-radius);
      background-color: var(--surface);
      margin-bottom: 1rem;
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      display: flex;
      align-items: center;
      cursor: pointer;
    }
    
    .related-note:hover {
      transform: translateY(-3px);
      box-shadow: var(--shadow-md);
    }
    
    .related-note-icon {
      width: 40px;
      height: 40px;
      border-radius: 10px;
      background-color: var(--primary-light);
      color: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 1rem;
      flex-shrink: 0;
    }
    
    .related-note-icon.work {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .related-note-icon.ideas {
      background-color: var(--warning-light);
      color: var(--warning);
    }
    
    .related-note-icon.todo {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .related-note-content {
      flex-grow: 1;
      overflow: hidden;
    }
    
    .related-note-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .related-note-date {
      font-size: 0.8rem;
      color: var(--text-secondary);
    }
    
    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s ease;
    }
    
    .spinner {
      width: 48px;
      height: 48px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      max-width: 350px;
      min-width: 300px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--shadow-md);
      padding: 1rem;
      z-index: 9998;
      transform: translateX(120%);
      transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
      border-left: 4px solid var(--primary);
      display: flex;
      align-items: flex-start;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      margin-right: 0.75rem;
      font-size: 1.25rem;
    }
    
    .notification-content {
      flex-grow: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .notification-message {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .notification-close {
      border: none;
      background: none;
      color: var(--text-secondary);
      opacity: 0.5;
      transition: var(--transition);
      padding: 0;
      margin-left: 0.75rem;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }
    
    /* Responsive Adjustments */
    @media (max-width: 768px) {
      .app-container {
        padding: 1rem;
      }
      
      .card-body {
        padding: 1rem;
      }
      
      .note-content {
        padding: 1rem;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="app-container">
    <div class="content-card fade-in">
      <div class="card-header">
        <h5 class="card-title">
          <div class="card-title-icon">
            <i class="fas fa-sticky-note"></i>
          </div>
          <span id="note-title">Note Title</span>
        </h5>
        
        <div>
          <button type="button" id="back-button" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left me-2"></i> Back
          </button>
        </div>
      </div>
      
      <div class="card-body">
        <!-- Note Information -->
        <div class="note-meta">
          <div class="note-meta-item">
            <i class="fas fa-calendar-alt note-meta-icon"></i>
            <span id="note-created">March 28, 2025</span>
          </div>
          
          <div class="note-meta-item">
            <i class="fas fa-history note-meta-icon"></i>
            <span id="note-updated">Last updated: March 28, 2025</span>
          </div>
          
          <div class="note-meta-item">
            <span class="note-category" id="note-category">General</span>
          </div>
        </div>
        
        <!-- Tags -->
        <div class="tags-container" id="tags-container">
          <!-- Tags will be populated here -->
        </div>
        
        <!-- Note Content -->
        <div class="note-content" id="note-content">
          <!-- Note content will be populated here -->
        </div>
        
        <!-- Action Buttons -->
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <button type="button" class="btn btn-outline-primary me-2" id="print-button">
              <i class="fas fa-print me-2"></i> Print
            </button>
            <button type="button" class="btn btn-outline-primary" id="share-button">
              <i class="fas fa-share-alt me-2"></i> Share
            </button>
          </div>
          
          <div>
            <button type="button" class="btn btn-danger me-2" id="delete-button">
              <i class="fas fa-trash-alt me-2"></i> Delete
            </button>
            <button type="button" class="btn btn-primary" id="edit-button">
              <i class="fas fa-edit me-2"></i> Edit
            </button>
          </div>
        </div>
        
        <!-- Related Notes -->
        <div class="related-notes-section">
          <h5 class="mb-3">Related Notes</h5>
          <div id="related-notes-container">
            <!-- Related notes will be populated here -->
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    // Global variables
    let noteId = '';
    let noteData = null;
    
    document.addEventListener('DOMContentLoaded', function() {
      // Setup event listeners
      setupEventListeners();
      
      // Get note ID from URL
      const urlParams = new URLSearchParams(window.location.search);
      noteId = urlParams.get('id');
      
      if (!noteId) {
        showNotification('Error', 'No note specified', 'error');
        setTimeout(() => {
          goBack();
        }, 1500);
        return;
      }
      
      // Load note data
      loadNoteData(noteId);
    });
    
    function setupEventListeners() {
      // Back button
      document.getElementById('back-button').addEventListener('click', goBack);
      
      // Edit button
      document.getElementById('edit-button').addEventListener('click', editNote);
      
      // Delete button
      document.getElementById('delete-button').addEventListener('click', deleteNote);
      
      // Print button
      document.getElementById('print-button').addEventListener('click', printNote);
      
      // Share button
      document.getElementById('share-button').addEventListener('click', shareNote);
    }
    
    function loadNoteData(id) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleNoteLoaded)
        .withFailureHandler(handleError)
        .getGeneralNoteById(id);
    }
    
    function handleNoteLoaded(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load note', 'error');
        return;
      }
      
      noteData = result.data;
      
      // Update the UI with note data
      updateNoteUI(noteData);
      
      // Load related notes
      loadRelatedNotes(noteData.category, noteData.tags, noteId);
    }
    
    function updateNoteUI(note) {
      // Set note title
      document.getElementById('note-title').textContent = note.title || 'Untitled Note';
      
      // Set note metadata
      document.getElementById('note-created').textContent = formatDate(note.createdAt);
      document.getElementById('note-updated').textContent = 'Last updated: ' + formatDate(note.updatedAt || note.createdAt);
      
      // Set category
      const categoryElement = document.getElementById('note-category');
      categoryElement.textContent = capitalizeFirstLetter(note.category || 'general');
      categoryElement.className = `note-category ${note.category || 'general'}`;
      
      // Set tags
      const tagsContainer = document.getElementById('tags-container');
      tagsContainer.innerHTML = '';
      
      if (note.tags && note.tags.length > 0) {
        note.tags.forEach(tag => {
          const tagElement = document.createElement('div');
          tagElement.className = 'tag';
          tagElement.textContent = tag;
          tagsContainer.appendChild(tagElement);
        });
      } else {
        tagsContainer.style.display = 'none';
      }
      
      // Set note content
      document.getElementById('note-content').innerHTML = note.content || '<p><em>No content</em></p>';
    }
    
    function loadRelatedNotes(category, tags, currentNoteId) {
      google.script.run
        .withSuccessHandler(handleRelatedNotesLoaded)
        .withFailureHandler(error => console.error('Failed to load related notes:', error))
        .getRelatedNotes({ category, tags, currentNoteId });
    }
    
    function handleRelatedNotesLoaded(result) {
      if (!result || !result.success) {
        return;
      }
      
      const relatedNotes = result.data || [];
      const relatedNotesContainer = document.getElementById('related-notes-container');
      
      if (relatedNotes.length === 0) {
        relatedNotesContainer.innerHTML = '<p class="text-secondary">No related notes found</p>';
        return;
      }
      
      relatedNotesContainer.innerHTML = '';
      
      relatedNotes.slice(0, 5).forEach(note => {
        const relatedNote = document.createElement('div');
        relatedNote.className = 'related-note';
        
        relatedNote.innerHTML = `
          <div class="related-note-icon ${note.category || 'general'}">
            <i class="fas fa-sticky-note"></i>
          </div>
          <div class="related-note-content">
            <div class="related-note-title">${note.title}</div>
            <div class="related-note-date">${formatDate(note.updatedAt || note.createdAt)}</div>
          </div>
        `;
        
        relatedNote.addEventListener('click', () => {
          viewNote(note.id);
        });
        
        relatedNotesContainer.appendChild(relatedNote);
      });
    }
    
    function editNote() {
      if (!noteId) return;
      
      google.script.run.showGeneralNoteForm(noteId);
      google.script.host.close();
    }
    
    function deleteNote() {
      if (!noteId) return;
      
      if (confirm('Are you sure you want to delete this note? This action cannot be undone.')) {
        showLoading();
        
        google.script.run
          .withSuccessHandler(function(result) {
            hideLoading();
            
            if (result && result.success) {
              showNotification('Success', 'Note deleted successfully', 'success');
              
              // Wait a moment to show success message before redirecting
              setTimeout(() => {
                goBack();
              }, 1500);
            } else {
              showNotification('Error', result ? result.message : 'Failed to delete note', 'error');
            }
          })
          .withFailureHandler(handleError)
          .deleteGeneralNote(noteId);
      }
    }
    
    function printNote() {
      window.print();
    }
    
    function shareNote() {
      // This could open a modal with sharing options
      // For now, we'll just show a notification
      showNotification('Info', 'Sharing functionality will be available soon', 'info');
    }
    
    function viewNote(id) {
      google.script.run.showGeneralNote(id);
      google.script.host.close();
    }
    
    function goBack() {
      google.script.run.showGeneralNotesDashboard();
      google.script.host.close();
    }
    
    function formatDate(dateString) {
      if (!dateString) {
        return 'Unknown date';
      }
      
      try {
        const date = new Date(dateString);
        
        return date.toLocaleDateString(undefined, {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
      } catch (e) {
        return dateString;
      }
    }
    
    function capitalizeFirstLetter(string) {
      if (!string) return '';
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const loadingOverlay = document.getElementById('loading-overlay');
      loadingOverlay.style.opacity = '0';
      setTimeout(() => {
        loadingOverlay.style.display = 'none';
        loadingOverlay.style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
    
    // Log view for analytics
    function logNoteView() {
      const currentDate = new Date("2025-03-28 05:50:21").toISOString();
      
      if (noteId) {
        google.script.run
          .withFailureHandler(error => console.error('Failed to log view:', error))
          .logNoteView({
            noteId: noteId,
            viewedAt: currentDate
          });
      }
    }
    
    // Call log function when page loads
    window.addEventListener('load', logNoteView);
  </script>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
    }
    
    /* Layout */
    .app-container {
      display: grid;
      grid-template-columns: auto 1fr;
      grid-template-rows: auto 1fr;
      grid-template-areas: 
        "sidebar header"
        "sidebar content";
      height: 100vh;
      width: 100vw;
      overflow: hidden;
    }
    
    /* Sidebar */
    .app-sidebar {
      grid-area: sidebar;
      width: 280px;
      background-color: var(--surface);
      border-right: 1px solid var(--border-color);
      display: flex;
      flex-direction: column;
      transition: var(--transition);
      z-index: 100;
      box-shadow: var(--shadow-sm);
    }
    
    .sidebar-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      align-items: center;
    }
    
    .sidebar-logo {
      font-weight: 700;
      font-size: 1.25rem;
      display: flex;
      align-items: center;
    }
    
    .sidebar-logo-icon {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      margin-right: 12px;
      flex-shrink: 0;
    }
    
    .sidebar-content {
      flex: 1;
      overflow-y: auto;
      padding: 1rem 0;
    }
    
    .sidebar-section {
      margin-bottom: 1.5rem;
    }
    
    .sidebar-section-header {
      padding: 0 1.5rem 0.5rem;
      font-size: 0.75rem;
      text-transform: uppercase;
      letter-spacing: 0.05rem;
      color: var(--text-secondary);
      font-weight: 600;
    }
    
    .sidebar-menu {
      list-style: none;
      margin: 0;
      padding: 0;
    }
    
    .sidebar-menu-item {
      margin: 0.25rem 0;
    }
    
    .sidebar-menu-link {
      display: flex;
      align-items: center;
      padding: 0.85rem 1.5rem;
      color: var(--text-primary);
      text-decoration: none;
      transition: var(--transition);
    }
    
    .sidebar-menu-link:hover {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .sidebar-menu-link.active {
      background-color: var(--primary-light);
      color: var(--primary);
      font-weight: 500;
    }
    
    .sidebar-menu-icon {
      width: 24px;
      text-align: center;
      margin-right: 12px;
      font-size: 1rem;
    }
    
    .sidebar-menu-badge {
      margin-left: auto;
      background-color: var(--primary-light);
      color: var(--primary);
      padding: 0.2rem 0.5rem;
      border-radius: 4px;
      font-size: 0.75rem;
      font-weight: 600;
    }
    
    /* Header */
    .app-header {
      grid-area: header;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1.5rem;
      background-color: var(--surface);
      border-bottom: 1px solid var(--border-color);
      z-index: 99;
    }
    
    .header-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .header-actions {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .header-action-btn {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      background: var(--surface);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .header-action-btn:hover {
      border-color: var(--primary);
      color: var(--primary);
      background-color: var(--primary-light);
      transform: translateY(-2px);
      box-shadow: var(--shadow-sm);
    }
    
    .search-container {
      position: relative;
      width: 100%;
      max-width: 400px;
    }
    
    .search-input {
      width: 100%;
      padding: 0.5rem 0.5rem 0.5rem 2.5rem;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      transition: var(--transition);
    }
    
    .search-input:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px var(--primary-light);
      outline: none;
    }
    
    .search-icon {
      position: absolute;
      left: 0.75rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-secondary);
    }
    
    /* Content Area */
    .app-content {
      grid-area: content;
      overflow-y: auto;
      padding: 1.5rem;
    }
    
    /* Dashboard Stats */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    
    .stat-card {
      background-color: var(--surface);
      border-radius: var(--border-radius);
      padding: 1.25rem;
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      position: relative;
      overflow: hidden;
    }
    
    .stat-card:hover {
      transform: translateY(-3px);
      box-shadow: var(--shadow-md);
    }
    
    .stat-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--secondary));
      opacity: 0;
      transition: var(--transition);
    }
    
    .stat-card:hover::before {
      opacity: 1;
    }
    
    .stat-card-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 0.75rem;
    }
    
    .stat-card-title {
      font-size: 0.875rem;
      color: var(--text-secondary);
      text-transform: uppercase;
      letter-spacing: 0.03rem;
      font-weight: 500;
    }
    
    .stat-card-icon {
      width: 40px;
      height: 40px;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.25rem;
    }
    
    .icon-primary {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .icon-success {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .icon-info {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .icon-warning {
      background-color: var(--warning-light);
      color: var(--warning);
    }
    
    .stat-card-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: 0.25rem;
    }
    
    .stat-card-change {
      font-size: 0.875rem;
      display: flex;
      align-items: center;
    }
    
    .change-up {
      color: var(--success);
    }
    
    .change-down {
      color: var(--warning);
    }
    
    .change-icon {
      margin-right: 0.35rem;
    }
    
    /* Content Cards */
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      padding: 1.25rem;
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-title {
      margin: 0;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      background: var(--primary);
      color: white;
      border-radius: 8px;
      margin-right: 0.75rem;
      flex-shrink: 0;
    }
    
    .card-body {
      padding: 1.25rem;
    }
    
    /* Note Cards */
    .notes-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.25rem;
    }
    
    .note-card {
      background: var(--surface);
      border-radius: var(--border-radius);
      border: 1px solid var(--border-color);
      overflow: hidden;
      transition: var(--transition);
      height: 220px;
      display: flex;
      flex-direction: column;
      cursor: pointer;
      position: relative;
    }
    
    .note-card:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow-md);
      border-color: var(--primary);
    }
    
    .note-card-header {
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
    }
    
    .note-card-title {
      font-weight: 600;
      font-size: 1rem;
      margin: 0;
      color: var(--text-primary);
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;  
      overflow: hidden;
      line-height: 1.3;
    }
    
    .note-card-date {
      color: var(--text-secondary);
      font-size: 0.75rem;
      white-space: nowrap;
      margin-left: 0.5rem;
    }
    
    .note-card-content {
      padding: 1rem;
      flex-grow: 1;
      overflow: hidden;
      position: relative;
    }
    
    .note-card-text {
      color: var(--text-secondary);
      font-size: 0.875rem;
      margin: 0;
      display: -webkit-box;
      -webkit-line-clamp: 4;
      -webkit-box-orient: vertical;  
      overflow: hidden;
      line-height: 1.5;
    }
    
    .note-card-footer {
      padding: 0.75rem 1rem;
      border-top: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: var(--surface-hover);
    }
    
    .note-card-category {
      display: inline-flex;
      align-items: center;
      font-size: 0.75rem;
      font-weight: 500;
      color: var(--primary);
    }
    
    .note-card-category-icon {
      margin-right: 0.35rem;
    }
    
    .note-card-category.work {
      color: var(--info);
    }
    
    .note-card-category.ideas {
      color: var(--warning);
    }
    
    .note-card-category.todo {
      color: var(--success);
    }
    
    .note-card-tags {
      display: flex;
      gap: 0.35rem;
    }
    
    .note-card-tag {
      font-size: 0.7rem;
      padding: 0.15rem 0.35rem;
      border-radius: 3px;
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .note-card-pin {
      position: absolute;
      top: 0;
      right: 0;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--warning);
      background-color: var(--warning-light);
      font-size: 0.8rem;
      border-radius: 0 var(--border-radius) 0 var(--border-radius);
    }
    
    /* Button Styles */
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.25rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      border-color: var(--secondary);
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      color: white;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    /* Empty State */
    .empty-state {
      padding: 3rem 1rem;
      text-align: center;
      background-color: var(--surface);
      border-radius: var(--border-radius);
      margin-top: 1rem;
    }
    
    .empty-state-icon {
      font-size: 3.5rem;
      color: var(--text-secondary);
      opacity: 0.3;
      margin-bottom: 1.5rem;
    }
    
    .empty-state-title {
      font-weight: 600;
      margin-bottom: 0.75rem;
      color: var(--text-primary);
    }
    
    .empty-state-message {
      color: var(--text-secondary);
      max-width: 400px;
      margin: 0 auto 1.5rem;
    }
    
    /* Charts */
    .chart-container {
      height: 300px;
    }
    
    /* Tag Cloud */
    .tag-cloud {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      padding: 1rem 0;
    }
    
    .tag-cloud-item {
      padding: 0.4rem 0.8rem;
      border-radius: 20px;
      background-color: var(--primary-light);
      color: var(--primary);
      font-size: 0.85rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .tag-cloud-item:hover {
      background-color: var(--primary);
      color: white;
      transform: translateY(-2px);
      box-shadow: var(--shadow-sm);
    }
    
    .tag-cloud-item-count {
      display: inline-block;
      padding: 0.15rem 0.4rem;
      border-radius: 10px;
      background-color: rgba(255, 255, 255, 0.2);
      font-size: 0.75rem;
      margin-left: 0.35rem;
    }
    
    /* Add Button */
    .add-btn {
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      width: 56px;
      height: 56px;
      border-radius: 28px;
      background-color: var(--primary);
      color: white;
      border: none;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      box-shadow: var(--shadow-md);
      cursor: pointer;
      transition: var(--transition);
      z-index: 99;
    }
    
    .add-btn:hover {
      background-color: var(--secondary);
      transform: translateY(-5px) rotate(90deg);
      box-shadow: var(--shadow-lg);
    }
    
    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s ease;
    }
    
    .spinner {
      width: 48px;
      height: 48px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      max-width: 350px;
      min-width: 300px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--shadow-md);
      padding: 1rem;
      z-index: 9998;
      transform: translateX(120%);
      transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
      border-left: 4px solid var(--primary);
      display: flex;
      align-items: flex-start;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      margin-right: 0.75rem;
      font-size: 1.25rem;
    }
    
    .notification-content {
      flex-grow: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .notification-message {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .notification-close {
      border: none;
      background: none;
      color: var(--text-secondary);
      opacity: 0.5;
      transition: var(--transition);
      padding: 0;
      margin-left: 0.75rem;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }
    
    .staggered > * {
      opacity: 0;
    }
    
    .staggered > *:nth-child(1) { animation: fadeIn 0.5s ease forwards 0.1s; }
    .staggered > *:nth-child(2) { animation: fadeIn 0.5s ease forwards 0.2s; }
    .staggered > *:nth-child(3) { animation: fadeIn 0.5s ease forwards 0.3s; }
    .staggered > *:nth-child(4) { animation: fadeIn 0.5s ease forwards 0.4s; }
    
    /* Responsive Adjustments */
    @media (max-width: 991px) {
      .app-container {
        grid-template-areas:
          "header header"
          "sidebar content";
        grid-template-rows: auto 1fr;
      }
    }
    
    @media (max-width: 768px) {
      .app-container {
        display: block;
      }
      
      .app-sidebar {
        display: none;
      }
      
      .app-header {
        position: sticky;
        top: 0;
        z-index: 100;
      }
      
      .app-content {
        padding: 1rem;
      }
      
      .stats-grid {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .stat-card-value {
        font-size: 1.5rem;
      }
      
      .notes-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="app-container">
    <!-- Sidebar -->
    <aside class="app-sidebar">
      <div class="sidebar-header">
        <div class="sidebar-logo">
          <div class="sidebar-logo-icon">
            <i class="fas fa-sticky-note"></i>
          </div>
          <span>Notes Dashboard</span>
        </div>
      </div>
      
      <div class="sidebar-content">
        <div class="sidebar-section">
          <div class="sidebar-section-header">Notes</div>
          <ul class="sidebar-menu">
            <li class="sidebar-menu-item">
              <a href="#" class="sidebar-menu-link active" data-section="all">
                <span class="sidebar-menu-icon"><i class="fas fa-sticky-note"></i></span>
                <span>All Notes</span>
                <span class="sidebar-menu-badge" id="all-notes-count">0</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a href="#" class="sidebar-menu-link" data-section="pinned">
                <span class="sidebar-menu-icon"><i class="fas fa-thumbtack"></i></span>
                <span>Pinned</span>
                <span class="sidebar-menu-badge" id="pinned-notes-count">0</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a href="#" class="sidebar-menu-link" data-section="recent">
                <span class="sidebar-menu-icon"><i class="fas fa-clock"></i></span>
                <span>Recent</span>
              </a>
            </li>
          </ul>
        </div>
        
        <div class="sidebar-section">
          <div class="sidebar-section-header">Categories</div>
          <ul class="sidebar-menu">
            <li class="sidebar-menu-item">
              <a href="#" class="sidebar-menu-link" data-section="general">
                <span class="sidebar-menu-icon"><i class="fas fa-file-alt"></i></span>
                <span>General</span>
                <span class="sidebar-menu-badge" id="general-notes-count">0</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a href="#" class="sidebar-menu-link" data-section="work">
                <span class="sidebar-menu-icon"><i class="fas fa-briefcase"></i></span>
                <span>Work</span>
                <span class="sidebar-menu-badge" id="work-notes-count">0</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a href="#" class="sidebar-menu-link" data-section="ideas">
                <span class="sidebar-menu-icon"><i class="fas fa-lightbulb"></i></span>
                <span>Ideas</span>
                <span class="sidebar-menu-badge" id="ideas-notes-count">0</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a href="#" class="sidebar-menu-link" data-section="todo">
                <span class="sidebar-menu-icon"><i class="fas fa-tasks"></i></span>
                <span>To-Do</span>
                <span class="sidebar-menu-badge" id="todo-notes-count">0</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a href="#" class="sidebar-menu-link" data-section="personal">
                <span class="sidebar-menu-icon"><i class="fas fa-user"></i></span>
                <span>Personal</span>
                <span class="sidebar-menu-badge" id="personal-notes-count">0</span>
              </a>
            </li>
          </ul>
        </div>
        
        <div class="sidebar-section">
          <div class="sidebar-section-header">Tags</div>
          <div class="px-3" id="sidebar-tags-container">
            <!-- Tags will be populated here -->
          </div>
        </div>
      </div>
    </aside>
    
    <!-- Header -->
    <header class="app-header">
      <div class="header-title" id="current-section">All Notes</div>
      
      <div class="header-actions">
        <div class="search-container">
          <input type="text" class="search-input" id="search-input" placeholder="Search notes...">
          <i class="fas fa-search search-icon"></i>
        </div>
        
        <button type="button" id="sort-btn" class="header-action-btn" title="Sort">
          <i class="fas fa-sort-amount-down"></i>
        </button>
        
        <button type="button" id="refresh-btn" class="header-action-btn" title="Refresh">
          <i class="fas fa-sync-alt"></i>
        </button>
      </div>
    </header>
    
    <!-- Main Content -->
    <main class="app-content">
      <!-- Stats -->
      <div class="stats-grid staggered">
        <div class="stat-card">
          <div class="stat-card-header">
            <div class="stat-card-title">Total Notes</div>
            <div class="stat-card-icon icon-primary">
              <i class="fas fa-sticky-note"></i>
            </div>
          </div>
          <div class="stat-card-value" id="total-notes">0</div>
          <div class="stat-card-change">
            <i class="fas fa-arrow-up change-icon change-up"></i>
            <span id="total-notes-change">0% from last month</span>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-card-header">
            <div class="stat-card-title">Notes This Month</div>
            <div class="stat-card-icon icon-success">
              <i class="fas fa-calendar-alt"></i>
            </div>
          </div>
          <div class="stat-card-value" id="month-notes">0</div>
          <div class="stat-card-change">
            <i class="fas fa-arrow-up change-icon change-up"></i>
            <span id="month-notes-change">0% from last month</span>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-card-header">
            <div class="stat-card-title">Most Used Category</div>
            <div class="stat-card-icon icon-info">
              <i class="fas fa-folder"></i>
            </div>
                   </div>
          <div class="stat-card-value" id="top-category">-</div>
          <div class="stat-card-change">
            <span id="top-category-count">0 notes</span>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-card-header">
            <div class="stat-card-title">Most Used Tag</div>
            <div class="stat-card-icon icon-warning">
              <i class="fas fa-tag"></i>
            </div>
          </div>
          <div class="stat-card-value" id="top-tag">-</div>
          <div class="stat-card-change">
            <span id="top-tag-count">0 notes</span>
          </div>
        </div>
      </div>
      
      <!-- Charts & Analytics -->
      <div class="content-card fade-in">
        <div class="card-header">
          <h5 class="card-title">
            <div class="card-title-icon">
              <i class="fas fa-chart-line"></i>
            </div>
            Notes Analytics
          </h5>
          
          <div>
            <select class="form-select form-select-sm" id="chart-time-range">
              <option value="30">Last 30 Days</option>
              <option value="90" selected>Last 90 Days</option>
              <option value="180">Last 6 Months</option>
              <option value="365">Last Year</option>
            </select>
          </div>
        </div>
        
        <div class="card-body">
          <div class="row">
            <div class="col-lg-8">
              <div class="chart-container" id="notes-trend-chart"></div>
            </div>
            <div class="col-lg-4">
              <div class="chart-container" id="categories-chart"></div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Tag Cloud -->
      <div class="content-card fade-in">
        <div class="card-header">
          <h5 class="card-title">
            <div class="card-title-icon">
              <i class="fas fa-tags"></i>
            </div>
            Popular Tags
          </h5>
        </div>
        
        <div class="card-body">
          <div class="tag-cloud" id="tag-cloud">
            <!-- Tags will be populated here dynamically -->
          </div>
        </div>
      </div>
      
      <!-- Notes List -->
      <div class="content-card fade-in">
        <div class="card-header">
          <h5 class="card-title">
            <div class="card-title-icon">
              <i class="fas fa-sticky-note"></i>
            </div>
            <span id="notes-section-title">All Notes</span>
          </h5>
          
          <div>
            <button class="btn btn-primary" id="new-note-btn">
              <i class="fas fa-plus me-2"></i> New Note
            </button>
          </div>
        </div>
        
        <div class="card-body">
          <div class="notes-grid" id="notes-grid">
            <!-- Notes will be populated here dynamically -->
          </div>
          
          <!-- Empty state (initially hidden) -->
          <div class="empty-state" id="empty-state" style="display: none;">
            <div class="empty-state-icon">
              <i class="fas fa-sticky-note"></i>
            </div>
            <h3 class="empty-state-title">No Notes Found</h3>
            <p class="empty-state-message">You don't have any notes yet. Create your first note to get started!</p>
            <button class="btn btn-primary" id="empty-new-note-btn">
              <i class="fas fa-plus me-2"></i> Create First Note
            </button>
          </div>
        </div>
      </div>
    </main>
  </div>
  
  <!-- Add Button -->
  <button class="add-btn" id="floating-new-note-btn" aria-label="New Note">
    <i class="fas fa-plus"></i>
  </button>
  
  <script>
    // Global variables
    let allNotes = [];
    let filteredNotes = [];
    let currentSection = 'all';
    let searchQuery = '';
    let sortBy = 'updated-desc'; // default sort by last updated, newest first
    let charts = {};
    let dashboardData = {};
    
    // Current date and user info
    const currentDate = new Date("2025-03-28 06:00:18");
    const currentUser = "amourjanay";
    
    document.addEventListener('DOMContentLoaded', function() {
      // Setup event listeners
      setupEventListeners();
      
      // Load dashboard data
      loadDashboardData();
    });
    
    function setupEventListeners() {
      // Sidebar navigation
      document.querySelectorAll('.sidebar-menu-link').forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          
          // Update active link
          document.querySelectorAll('.sidebar-menu-link').forEach(l => {
            l.classList.remove('active');
          });
          this.classList.add('active');
          
          // Update current section
          currentSection = this.getAttribute('data-section');
          document.getElementById('current-section').textContent = this.querySelector('span:nth-child(2)').textContent;
          document.getElementById('notes-section-title').textContent = this.querySelector('span:nth-child(2)').textContent;
          
          // Filter notes based on section
          filterNotes();
        });
      });
      
      // Search input
      document.getElementById('search-input').addEventListener('input', function() {
        searchQuery = this.value.trim().toLowerCase();
        filterNotes();
      });
      
      // Sort button
      document.getElementById('sort-btn').addEventListener('click', toggleSortMenu);
      
      // New note buttons
      document.getElementById('new-note-btn').addEventListener('click', createNewNote);
      document.getElementById('empty-new-note-btn').addEventListener('click', createNewNote);
      document.getElementById('floating-new-note-btn').addEventListener('click', createNewNote);
      
      // Refresh button
      document.getElementById('refresh-btn').addEventListener('click', refreshData);
      
      // Chart time range
      document.getElementById('chart-time-range').addEventListener('change', function() {
        updateCharts(this.value);
      });
    }
    
    function loadDashboardData() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleDashboardData)
        .withFailureHandler(handleError)
        .getGeneralNotesDashboardData();
    }
    
    function handleDashboardData(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load dashboard data', 'error');
        return;
      }
      
      // Store dashboard data
      dashboardData = result.data || {};
      
      // Store all notes
      allNotes = dashboardData.notes || [];
      
      // Update stats
      updateStats(dashboardData);
      
      // Initialize charts
      initCharts(dashboardData);
      
      // Populate tag cloud
      populateTagCloud(dashboardData.tags || []);
      
      // Populate sidebar tags
      populateSidebarTags(dashboardData.tags || []);
      
      // Filter and display notes
      filterNotes();
    }
    
    function updateStats(data) {
      // Update stats cards
      document.getElementById('total-notes').textContent = data.totalNotes || 0;
      document.getElementById('month-notes').textContent = data.notesThisMonth || 0;
      document.getElementById('top-category').textContent = data.topCategory?.name || 'None';
      document.getElementById('top-tag').textContent = data.topTag?.name || 'None';
      
      // Update change indicators
      document.getElementById('total-notes-change').textContent = `${data.totalNotesChange || 0}% from last month`;
      document.getElementById('month-notes-change').textContent = `${data.monthNotesChange || 0}% from last month`;
      document.getElementById('top-category-count').textContent = `${data.topCategory?.count || 0} notes`;
      document.getElementById('top-tag-count').textContent = `${data.topTag?.count || 0} notes`;
      
      // Update sidebar counts
      document.getElementById('all-notes-count').textContent = data.totalNotes || 0;
      document.getElementById('pinned-notes-count').textContent = data.pinnedNotesCount || 0;
      document.getElementById('general-notes-count').textContent = data.categoryBreakdown?.general || 0;
      document.getElementById('work-notes-count').textContent = data.categoryBreakdown?.work || 0;
      document.getElementById('ideas-notes-count').textContent = data.categoryBreakdown?.ideas || 0;
      document.getElementById('todo-notes-count').textContent = data.categoryBreakdown?.todo || 0;
      document.getElementById('personal-notes-count').textContent = data.categoryBreakdown?.personal || 0;
    }
    
    function initCharts(data) {
      // Notes trend chart
      const trendOptions = {
        chart: {
          type: 'area',
          height: 350,
          fontFamily: getComputedStyle(document.body).fontFamily,
          toolbar: {
            show: false
          }
        },
        series: [{
          name: 'Notes Created',
          data: data.notesCreatedTrend || [0, 0, 0, 0, 0, 0, 0]
        }],
        colors: [getComputedStyle(document.documentElement).getPropertyValue('--primary').trim()],
        fill: {
          type: 'gradient',
          gradient: {
            shadeIntensity: 1,
            opacityFrom: 0.7,
            opacityTo: 0.2,
            stops: [0, 90, 100]
          }
        },
        dataLabels: {
          enabled: false
        },
        stroke: {
          curve: 'smooth',
          width: 2
        },
        xaxis: {
          categories: data.trendLabels || ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5', 'Week 6', 'Week 7'],
          labels: {
            style: {
              colors: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary').trim()
            }
          }
        },
        yaxis: {
          labels: {
            style: {
              colors: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary').trim()
            }
          }
        },
        grid: {
          borderColor: getComputedStyle(document.documentElement).getPropertyValue('--border-color').trim(),
        },
        tooltip: {
          x: {
            format: 'dd MMM yyyy'
          }
        }
      };
      
      // Categories chart
      const categoriesOptions = {
        chart: {
          type: 'donut',
          height: 350,
          fontFamily: getComputedStyle(document.body).fontFamily
        },
        series: data.categoryValues || [0, 0, 0, 0, 0],
        labels: data.categoryLabels || ['General', 'Work', 'Ideas', 'To-Do', 'Personal'],
        colors: [
          getComputedStyle(document.documentElement).getPropertyValue('--primary').trim(),
          getComputedStyle(document.documentElement).getPropertyValue('--info').trim(),
          getComputedStyle(document.documentElement).getPropertyValue('--warning').trim(),
          getComputedStyle(document.documentElement).getPropertyValue('--success').trim(),
          getComputedStyle(document.documentElement).getPropertyValue('--secondary').trim()
        ],
        legend: {
          position: 'bottom',
          fontWeight: 500,
          labels: {
            colors: getComputedStyle(document.documentElement).getPropertyValue('--text-primary').trim()
          }
        },
        plotOptions: {
          pie: {
            donut: {
              size: '65%',
              labels: {
                show: true,
                total: {
                  show: true,
                  showAlways: true,
                  label: 'Total',
                  fontSize: '14px',
                  fontWeight: 600,
                  color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary').trim(),
                  formatter: function(w) {
                    return w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                  }
                }
              }
            }
          }
        },
        responsive: [{
          breakpoint: 480,
          options: {
            chart: {
              height: 300
            },
            legend: {
              position: 'bottom'
            }
          }
        }]
      };
      
      // Initialize charts
      charts.trendChart = new ApexCharts(document.getElementById('notes-trend-chart'), trendOptions);
      charts.categoriesChart = new ApexCharts(document.getElementById('categories-chart'), categoriesOptions);
      
      charts.trendChart.render();
      charts.categoriesChart.render();
    }
    
    function updateCharts(timeRange) {
      // Get data for selected time range
      showLoading();
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (!result || !result.success) {
            showNotification('Error', result ? result.message : 'Failed to update charts', 'error');
            return;
          }
          
          const data = result.data || {};
          
          // Update trend chart
          if (charts.trendChart) {
            charts.trendChart.updateOptions({
              xaxis: {
                categories: data.trendLabels || []
              }
            });
            
            charts.trendChart.updateSeries([{
              name: 'Notes Created',
              data: data.notesCreatedTrend || []
            }]);
          }
          
          // Update categories chart
          if (charts.categoriesChart) {
            charts.categoriesChart.updateSeries(data.categoryValues || []);
          }
        })
        .withFailureHandler(handleError)
        .getNotesAnalyticsData(timeRange);
    }
    
    function populateTagCloud(tags) {
      const tagCloud = document.getElementById('tag-cloud');
      tagCloud.innerHTML = '';
      
      if (!tags || tags.length === 0) {
        tagCloud.innerHTML = '<p class="text-secondary">No tags found</p>';
        return;
      }
      
      // Sort tags by count (descending)
      tags.sort((a, b) => b.count - a.count);
      
      // Take top 20 tags
      const topTags = tags.slice(0, 20);
      
      // Calculate min and max counts for size scaling
      const minCount = Math.min(...topTags.map(t => t.count));
      const maxCount = Math.max(...topTags.map(t => t.count));
      
      topTags.forEach(tag => {
        // Scale font size between 0.8 and 1.5rem based on tag count
        const fontSize = maxCount === minCount ? 1 : 
          0.8 + ((tag.count - minCount) / (maxCount - minCount)) * 0.7;
        
        const tagItem = document.createElement('div');
        tagItem.className = 'tag-cloud-item';
        tagItem.style.fontSize = `${fontSize}rem`;
        tagItem.innerHTML = `
          ${tag.name}
          <span class="tag-cloud-item-count">${tag.count}</span>
        `;
        
        // Add click event to filter by tag
        tagItem.addEventListener('click', function() {
          filterNotesByTag(tag.name);
        });
        
        tagCloud.appendChild(tagItem);
      });
    }
    
    function populateSidebarTags(tags) {
      const tagsContainer = document.getElementById('sidebar-tags-container');
      tagsContainer.innerHTML = '';
      
      if (!tags || tags.length === 0) {
        tagsContainer.innerHTML = '<p class="text-secondary small">No tags found</p>';
        return;
      }
      
      // Sort tags by count (descending)
      tags.sort((a, b) => b.count - a.count);
      
      // Take top 10 tags for sidebar
      const topTags = tags.slice(0, 10);
      
      const tagsList = document.createElement('ul');
      tagsList.className = 'sidebar-menu';
      
      topTags.forEach(tag => {
        const tagItem = document.createElement('li');
        tagItem.className = 'sidebar-menu-item';
        tagItem.innerHTML = `
          <a href="#" class="sidebar-menu-link">
            <span class="sidebar-menu-icon"><i class="fas fa-tag"></i></span>
            <span>${tag.name}</span>
            <span class="sidebar-menu-badge">${tag.count}</span>
          </a>
        `;
        
        // Add click event to filter by tag
        tagItem.querySelector('.sidebar-menu-link').addEventListener('click', function(e) {
          e.preventDefault();
          
          // Update active link
          document.querySelectorAll('.sidebar-menu-link').forEach(l => {
            l.classList.remove('active');
          });
          this.classList.add('active');
          
          // Update section title
          document.getElementById('current-section').textContent = `Tag: ${tag.name}`;
          document.getElementById('notes-section-title').textContent = `Tag: ${tag.name}`;
          
          filterNotesByTag(tag.name);
        });
        
        tagsList.appendChild(tagItem);
      });
      
      tagsContainer.appendChild(tagsList);
    }
    
    function filterNotes() {
      filteredNotes = [...allNotes];
      
      // Filter by section
      switch(currentSection) {
        case 'pinned':
          filteredNotes = filteredNotes.filter(note => note.isPinned);
          break;
        case 'recent':
          filteredNotes.sort((a, b) => new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt));
          filteredNotes = filteredNotes.slice(0, 20); // Only show most recent 20 notes
          break;
        case 'general':
        case 'work':
        case 'ideas':
        case 'todo':
        case 'personal':
          filteredNotes = filteredNotes.filter(note => note.category === currentSection);
          break;
      }
      
      // Filter by search query
      if (searchQuery) {
        filteredNotes = filteredNotes.filter(note => 
          note.title.toLowerCase().includes(searchQuery) || 
          note.content.toLowerCase().includes(searchQuery) ||
          (note.tags && note.tags.some(tag => tag.toLowerCase().includes(searchQuery)))
        );
      }
      
      // Sort notes
      sortNotes();
      
      // Display filtered notes
      displayNotes();
    }
    
    function filterNotesByTag(tagName) {
      // First reset to all notes
      filteredNotes = [...allNotes];
      
      // Then filter by tag
      filteredNotes = filteredNotes.filter(note => 
        note.tags && note.tags.includes(tagName)
      );
      
      // Sort and display
      sortNotes();
      displayNotes();
    }
    
    function sortNotes() {
      switch(sortBy) {
        case 'updated-desc': // Newest first (by update date)
          filteredNotes.sort((a, b) => 
            new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt)
          );
          break;
        case 'updated-asc': // Oldest first (by update date)
          filteredNotes.sort((a, b) => 
            new Date(a.updatedAt || a.createdAt) - new Date(b.updatedAt || b.createdAt)
          );
          break;
        case 'created-desc': // Newest first (by creation date)
          filteredNotes.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
          break;
        case 'created-asc': // Oldest first (by creation date)
          filteredNotes.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
          break;
        case 'alpha-asc': // A-Z
          filteredNotes.sort((a, b) => a.title.localeCompare(b.title));
          break;
        case 'alpha-desc': // Z-A
          filteredNotes.sort((a, b) => b.title.localeCompare(a.title));
          break;
      }
      
      // Always prioritize pinned notes
      filteredNotes.sort((a, b) => {
        if (a.isPinned && !b.isPinned) return -1;
        if (!a.isPinned && b.isPinned) return 1;
        return 0;
      });
    }
    
    function displayNotes() {
      const notesGrid = document.getElementById('notes-grid');
      const emptyState = document.getElementById('empty-state');
      
      // Clear existing notes
      notesGrid.innerHTML = '';
      
      if (filteredNotes.length === 0) {
        notesGrid.style.display = 'none';
        emptyState.style.display = 'block';
      } else {
        notesGrid.style.display = 'grid';
        emptyState.style.display = 'none';
        
        // Create note cards
        filteredNotes.forEach(note => {
          const noteCard = createNoteCard(note);
          notesGrid.appendChild(noteCard);
        });
      }
    }
    
    function createNoteCard(note) {
      const card = document.createElement('div');
      card.className = 'note-card';
      card.dataset.id = note.id;
      
      // Get display info
      const updatedDate = formatDate(note.updatedAt || note.createdAt);
      const categoryClass = note.category || 'general';
      const categoryIcon = getCategoryIcon(note.category);
      const categoryName = getCategoryName(note.category);
      
      // Create HTML structure
      card.innerHTML = `
        <div class="note-card-header">
          <h3 class="note-card-title">${escapeHtml(note.title)}</h3>
          <div class="note-card-date">${updatedDate}</div>
          ${note.isPinned ? '<div class="note-card-pin"><i class="fas fa-thumbtack"></i></div>' : ''}
        </div>
        <div class="note-card-content">
          <p class="note-card-text">${stripHtmlAndTruncate(note.content, 150)}</p>
        </div>
        <div class="note-card-footer">
          <div class="note-card-category ${categoryClass}">
            <i class="${categoryIcon} note-card-category-icon"></i>
            ${categoryName}
          </div>
          <div class="note-card-tags">
            ${createTagsHtml(note.tags)}
          </div>
        </div>
      `;
      
      // Add click event to view note
      card.addEventListener('click', function() {
        viewNote(note.id);
      });
      
      return card;
    }
    
    function createTagsHtml(tags) {
      if (!tags || tags.length === 0) return '';
      
      // Limit to first 2 tags
      const displayTags = tags.slice(0, 2);
      
      return displayTags.map(tag => 
        `<span class="note-card-tag">${escapeHtml(tag)}</span>`
      ).join('');
    }
    
    function toggleSortMenu() {
      // Create a dropdown for sorting options
      let sortDropdown = document.getElementById('sort-dropdown');
      
      if (sortDropdown) {
        sortDropdown.remove();
        return;
      }
      
      const sortBtn = document.getElementById('sort-btn');
      const btnRect = sortBtn.getBoundingClientRect();
      
      sortDropdown = document.createElement('div');
      sortDropdown.id = 'sort-dropdown';
      sortDropdown.style.position = 'absolute';
      sortDropdown.style.top = (btnRect.bottom + 5) + 'px';
      sortDropdown.style.right = (window.innerWidth - btnRect.right) + 'px';
      sortDropdown.style.backgroundColor = 'white';
      sortDropdown.style.borderRadius = '8px';
      sortDropdown.style.boxShadow = 'var(--shadow-md)';
      sortDropdown.style.zIndex = '100';
      sortDropdown.style.minWidth = '200px';
      sortDropdown.style.border = '1px solid var(--border-color)';
      
      sortDropdown.innerHTML = `
        <div style="padding: 0.75rem 1rem; border-bottom: 1px solid var(--border-color); font-weight: 600;">Sort Notes By</div>
        <div style="padding: 0.5rem 0;">
          <div class="sort-option ${sortBy === 'updated-desc' ? 'active' : ''}" data-sort="updated-desc">
            <i class="fas fa-clock me-2"></i> Last Updated (Newest First)
          </div>
          <div class="sort-option ${sortBy === 'updated-asc' ? 'active' : ''}" data-sort="updated-asc">
            <i class="fas fa-clock me-2"></i> Last Updated (Oldest First)
          </div>
          <div class="sort-option ${sortBy === 'created-desc' ? 'active' : ''}" data-sort="created-desc">
            <i class="fas fa-calendar-plus me-2"></i> Date Created (Newest First)
          </div>
          <div class="sort-option ${sortBy === 'created-asc' ? 'active' : ''}" data-sort="created-asc">
            <i class="fas fa-calendar-plus me-2"></i> Date Created (Oldest First)
          </div>
          <div class="sort-option ${sortBy === 'alpha-asc' ? 'active' : ''}" data-sort="alpha-asc">
            <i class="fas fa-sort-alpha-down me-2"></i> Title (A-Z)
          </div>
          <div class="sort-option ${sortBy === 'alpha-desc' ? 'active' : ''}" data-sort="alpha-desc">
            <i class="fas fa-sort-alpha-down-alt me-2"></i> Title (Z-A)
          </div>
        </div>
      `;
      
      // Style the sort options
      const style = document.createElement('style');
      style.textContent = `
        .sort-option {
          padding: 0.65rem 1rem;
          cursor: pointer;
          transition: var(--transition);
        }
        
        .sort-option:hover {
          background-color: var(--primary-light);
          color: var(--primary);
        }
        
        .sort-option.active {
          background-color: var(--primary-light);
          color: var(--primary);
          font-weight: 500;
        }
      `;
      
      document.head.appendChild(style);
      document.body.appendChild(sortDropdown);
      
      // Add click events to sort options
      document.querySelectorAll('.sort-option').forEach(option => {
        option.addEventListener('click', function() {
          sortBy = this.getAttribute('data-sort');
          sortNotes();
          displayNotes();
          sortDropdown.remove();
        });
      });
      
      // Close dropdown when clicking elsewhere
      document.addEventListener('click', function closeDropdown(e) {
        if (!sortBtn.contains(e.target) && !sortDropdown.contains(e.target)) {
          sortDropdown.remove();
          document.removeEventListener('click', closeDropdown);
        }
      });
    }
    
    function createNewNote() {
      google.script.run.showGeneralNoteForm();
      google.script.host.close();
    }
    
    function viewNote(id) {
      google.script.run.showGeneralNote(id);
      google.script.host.close();
    }
    
    function refreshData() {
      loadDashboardData();
      showNotification('Success', 'Dashboard refreshed successfully', 'success');
    }
    
    function getCategoryIcon(category) {
      switch(category) {
        case 'work': return 'fas fa-briefcase';
        case 'ideas': return 'fas fa-lightbulb';
        case 'todo': return 'fas fa-tasks';
        case 'personal': return 'fas fa-user';
        default: return 'fas fa-sticky-note';
      }
    }
    
    function getCategoryName(category) {
      if (!category) return 'General';
      return category.charAt(0).toUpperCase() + category.slice(1);
    }
    
    function formatDate(dateString) {
      if (!dateString) return '';
      
      const date = new Date(dateString);
      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const yesterday = new Date(today);
      yesterday.setDate(yesterday.getDate() - 1);
      
      // Check if date is today or yesterday
      if (date.toDateString() === today.toDateString()) {
        return 'Today';
      } else if (date.toDateString() === yesterday.toDateString()) {
        return 'Yesterday';
      }
      
      // Format as MMM DD (e.g., Mar 28)
      const options = { month: 'short', day: 'numeric' };
      
      // If it's from a different year, include the year
      if (date.getFullYear() !== now.getFullYear()) {
        options.year = 'numeric';
      }
      
      return date.toLocaleDateString(undefined, options);
    }
    
    function stripHtmlAndTruncate(html, maxLength) {
      if (!html) return '';
      
      // Create a temporary element to strip HTML tags
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = html;
      const text = tempDiv.textContent || tempDiv.innerText || '';
      
      // Truncate and add ellipsis if necessary
      if (text.length > maxLength) {
        return text.substring(0, maxLength) + '...';
      }
      
      return text;
    }
    
    function escapeHtml(text) {
      if (!text) return '';
      
      return text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const loadingOverlay = document.getElementById('loading-overlay');
      loadingOverlay.style.opacity = '0';
      setTimeout(() => {
        loadingOverlay.style.display = 'none';
        loadingOverlay.style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
    
    // Log dashboard view for analytics
    function logDashboardView() {
      google.script.run
        .withFailureHandler(error => console.error('Failed to log view:', error))
        .logDashboardView({
          viewedAt: currentDate.toISOString(),
          username: currentUser
        });
    }
    
    // Call log function when page loads
    window.addEventListener('load', logDashboardView);
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
      --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
    }
    
    /* App Layout */
    .app-container {
      display: grid;
      grid-template-columns: auto 1fr;
      grid-template-rows: auto 1fr;
      grid-template-areas: 
        "sidebar header"
        "sidebar content";
      height: 100vh;
      width: 100vw;
      overflow: hidden;
    }
    
    /* Modern Sidebar */
    .app-sidebar {
      grid-area: sidebar;
      width: 280px;
      background-color: var(--surface);
      border-right: 1px solid var(--border-color);
      display: flex;
      flex-direction: column;
      transition: var(--transition);
      z-index: 100;
      box-shadow: var(--shadow-sm);
    }
    
    .app-sidebar.collapsed {
      width: 70px;
    }
    
    .sidebar-header {
      padding: 1.5rem;
      display: flex;
      align-items: center;
      border-bottom: 1px solid var(--border-color);
    }
    
    .sidebar-logo {
      font-weight: 700;
      font-size: 1.25rem;
      display: flex;
      align-items: center;
    }
    
    .sidebar-logo-icon {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      margin-right: 12px;
      flex-shrink: 0;
    }
    
    .sidebar-logo-text {
      transition: var(--transition);
      white-space: nowrap;
      overflow: hidden;
    }
    
    .app-sidebar.collapsed .sidebar-logo-text {
      opacity: 0;
      width: 0;
    }
    
    .sidebar-toggle {
      margin-left: auto;
      width: 28px;
      height: 28px;
      border-radius: 6px;
      background: var(--surface-hover);
      border: none;
      color: var(--text-secondary);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .sidebar-toggle:hover {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .app-sidebar.collapsed .sidebar-toggle i {
      transform: rotate(180deg);
    }
    
    .sidebar-content {
      flex: 1;
      overflow-y: auto;
      padding: 1.25rem 0;
    }
    
    .sidebar-section {
      margin-bottom: 1.5rem;
    }
    
    .sidebar-section-header {
      padding: 0 1.5rem;
      margin-bottom: 0.5rem;
      font-size: 0.75rem;
      text-transform: uppercase;
      letter-spacing: 0.05rem;
      color: var(--text-secondary);
      font-weight: 600;
      white-space: nowrap;
      overflow: hidden;
      transition: var(--transition);
    }
    
    .app-sidebar.collapsed .sidebar-section-header {
      opacity: 0;
      height: 0;
      margin: 0;
      padding: 0;
    }
    
    .sidebar-menu {
      list-style: none;
      margin: 0;
      padding: 0;
    }
    
    .sidebar-menu-item {
      margin: 0.25rem 0;
    }
    
    .sidebar-menu-link {
      display: flex;
      align-items: center;
      padding: 0.85rem 1.5rem;
      color: var(--text-primary);
      text-decoration: none;
      transition: var(--transition);
      cursor: pointer;
    }
    
    .app-sidebar.collapsed .sidebar-menu-link {
      padding: 0.85rem 0;
      justify-content: center;
    }
    
    .sidebar-menu-link:hover {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .sidebar-menu-link.active {
      background-color: var(--primary-light);
      color: var(--primary);
      font-weight: 500;
    }
    
    .sidebar-menu-icon {
      width: 24px;
      text-align: center;
      margin-right: 12px;
      font-size: 1rem;
      transition: var(--transition);
    }
    
    .app-sidebar.collapsed .sidebar-menu-icon {
      margin-right: 0;
      font-size: 1.25rem;
    }
    
    .sidebar-menu-text {
      transition: var(--transition);
      white-space: nowrap;
    }
    
    .app-sidebar.collapsed .sidebar-menu-text {
      opacity: 0;
      width: 0;
    }
    
    /* Header */
    .app-header {
      grid-area: header;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1.5rem;
      background-color: var(--surface);
      border-bottom: 1px solid var(--border-color);
      z-index: 99;
    }
    
    .header-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .header-actions {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .header-action-btn {
      width: 36px;
      height: 36px;
      border-radius: 8px;
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      background: var(--surface);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .header-action-btn:hover {
      border-color: var(--primary);
      color: var(--primary);
      background-color: var(--primary-light);
      transform: translateY(-2px);
      box-shadow: var(--shadow-sm);
    }
    
    /* Content Area */
    .app-content {
      grid-area: content;
      overflow-y: auto;
      padding: 1.5rem;
      position: relative;
    }
    
    /* Dashboard Cards */
    .metrics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.25rem;
      margin-bottom: 1.5rem;
    }
    
    .metric-card {
      position: relative;
      background: var(--surface);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      padding: 1.25rem;
      border: 1px solid var(--border-color);
      transition: var(--transition);
    }
    
    .metric-card:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow-md);
    }
    
    .metric-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 1rem;
    }
    
    .metric-title {
      font-weight: 600;
      font-size: 0.875rem;
      color: var(--text-secondary);
      text-transform: uppercase;
      letter-spacing: 0.03rem;
      margin: 0;
    }
    
    .metric-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--text-primary);
      margin: 0.5rem 0;
    }
    
    .metric-trend {
      display: flex;
      align-items: center;
      font-size: 0.875rem;
    }
    
    .trend-up {
      color: var(--success);
      margin-right: 0.5rem;
    }
    
    .trend-down {
      color: var(--warning);
      margin-right: 0.5rem;
    }
    
    .metric-icon {
      width: 40px;
      height: 40px;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .primary-icon {
      background-color: var(--primary-light);
      color: var(--primary);
    }
    
    .success-icon {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    .info-icon {
      background-color: var(--info-light);
      color: var(--info);
    }
    
    .warning-icon {
      background-color: var(--warning-light);
      color: var(--warning);
    }
    
    /* Goal Indicator */
    .goal-indicator {
      position: absolute;
      top: 0;
      right: 0;
      width: 0;
      height: 0;
      border-style: solid;
      border-width: 0 24px 24px 0;
      border-radius: 0 12px 0 0;
      overflow: hidden;
    }
    
    .above-goal {
      border-color: transparent var(--success) transparent transparent;
    }
    
    .below-goal {
      border-color: transparent var(--warning) transparent transparent;
    }
    
    /* Content Cards */
    .content-card {
      background: var(--surface);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: 1px solid var(--border-color);
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      padding: 1.25rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-title {
      margin: 0;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      width: 28px;
      height: 28px;
      border-radius: 6px;
      background-color: var(--primary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 0.75rem;
    }
    
    .card-body {
      padding: 1.25rem;
    }
    
    /* Charts */
    .chart-container {
      height: 360px;
      margin-bottom: 1rem;
    }
    
    /* Table Styles */
    .metrics-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
    }
    
    .metrics-table th {
      background-color: var(--light);
      color: var(--text-primary);
      font-weight: 600;
      text-align: left;
      padding: 0.75rem 1rem;
      border-bottom: 1px solid var(--border-color);
      white-space: nowrap;
    }
    
    .metrics-table td {
      padding: 0.75rem 1rem;
      border-bottom: 1px solid var(--border-color);
      vertical-align: middle;
    }
    
    .metrics-table tr:last-child td {
      border-bottom: none;
    }
    
    .metrics-table tr:hover {
      background-color: var(--primary-light);
    }
    
    .table-container {
      overflow-x: auto;
      border-radius: var(--border-radius);
      border: 1px solid var(--border-color);
      box-shadow: var(--shadow-sm);
      margin-bottom: 1.5rem;
      background-color: var(--surface);
    }
    
    .status-indicator {
      display: inline-block;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      margin-right: 0.5rem;
    }
    
    .status-below {
      background-color: var(--warning);
    }
    
    .status-above {
      background-color: var(--success);
    }
    
    .status-neutral {
      background-color: var(--info);
    }
    
    /* Team Member */
    .team-member {
      display: flex;
      align-items: center;
    }
    
    .team-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background: linear-gradient(to bottom right, var(--primary), var(--info));
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 0.8rem;
      margin-right: 0.75rem;
    }
    
    .team-name {
      font-weight: 500;
    }
    
    /* Performance Flag */
    .performance-flag {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.75rem;
      font-weight: 600;
    }
    
    .flag-danger {
      background-color: var(--danger-light);
      color: var(--danger);
    }
    
    .flag-warning {
      background-color: var(--warning-light);
      color: var(--warning);
    }
    
    .flag-success {
      background-color: var(--success-light);
      color: var(--success);
    }
    
    /* Button Styles */
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.25rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      border-color: var(--secondary);
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      color: white;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-icon {
      padding: 0.5rem;
      width: 38px;
      height: 38px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }
    
    /* Tabs */
    .nav-tabs-alt {
      border-bottom: none;
      margin-bottom: 1.25rem;
    }
    
    .nav-tabs-alt .nav-link {
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 0.65rem 1.25rem;
      margin-right: 0.5rem;
      color: var(--text-secondary);
      background-color: var(--surface);
      transition: var(--transition);
    }
    
    .nav-tabs-alt .nav-link:hover {
      color: var(--primary);
      border-color: var(--primary);
      box-shadow: var(--shadow-sm);
    }
    
    .nav-tabs-alt .nav-link.active {
      color: var(--primary);
      border-color: var(--primary);
      background-color: var(--primary-light);
      font-weight: 500;
    }
    
    /* Time Period Selector */
    .time-selector {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
    }
    
    .time-btn {
      padding: 0.5rem 1rem;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      background-color: var(--surface);
      color: var(--text-secondary);
      cursor: pointer;
      transition: var(--transition);
    }
    
    .time-btn:hover {
      background-color: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .time-btn.active {
      background-color: var(--primary-light);
      color: var(--primary);
      border-color: var(--primary);
      font-weight: 500;
    }
    
    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s ease;
    }
    
    .spinner {
      width: 48px;
      height: 48px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      max-width: 350px;
      min-width: 300px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--shadow-md);
      padding: 1rem;
      z-index: 9998;
      transform: translateX(120%);
      transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
      border-left: 4px solid var(--primary);
      display: flex;
      align-items: flex-start;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      margin-right: 0.75rem;
      font-size: 1.25rem;
    }
    
    .notification-content {
      flex-grow: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .notification-message {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .notification-close {
      border: none;
      background: none;
      color: var(--text-secondary);
      opacity: 0.5;
      transition: var(--transition);
      padding: 0;
      margin-left: 0.75rem;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.3s ease forwards;
    }
    
    /* Responsive Adjustments */
    @media (max-width: 991px) {
      .app-container {
        grid-template-columns: 70px 1fr;
      }
      
      .app-sidebar {
        width: 70px;
      }
      
      .sidebar-logo-text {
        opacity: 0;
        width: 0;
      }
      
      .sidebar-section-header {
        opacity: 0;
        height: 0;
        margin: 0;
        padding: 0;
      }
      
      .sidebar-menu-icon {
        margin-right: 0;
        font-size: 1.25rem;
      }
      
      .sidebar-menu-link {
        justify-content: center;
        padding: 0.85rem 0;
      }
      
      .sidebar-menu-text {
        opacity: 0;
        width: 0;
      }
    }
    
    @media (max-width: 768px) {
      .app-container {
        display: block;
        height: auto;
      }
      
      .app-header {
        position: sticky;
        top: 0;
        z-index: 1000;
      }
      
      .app-sidebar {
        display: none;
      }
      
      .app-content {
        padding: 1rem;
      }
      
      .metrics-grid {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      }
      
      .chart-container {
        height: 300px;
      }
      
      .nav-tabs-alt .nav-link {
        padding: 0.5rem 0.75rem;
        font-size: 0.9rem;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="app-container">
    <!-- Sidebar -->
    <aside class="app-sidebar" id="sidebar">
      <div class="sidebar-header">
        <div class="sidebar-logo">
          <div class="sidebar-logo-icon">
            <i class="fas fa-chart-line"></i>
          </div>
          <div class="sidebar-logo-text">Metrics</div>
        </div>
        <button id="sidebar-toggle" class="sidebar-toggle" aria-label="Toggle sidebar">
          <i class="fas fa-angle-left"></i>
        </button>
      </div>
      
      <div class="sidebar-content">
        <div class="sidebar-section">
          <div class="sidebar-section-header">Overview</div>
          <ul class="sidebar-menu">
            <li class="sidebar-menu-item">
              <a class="sidebar-menu-link active" data-view="dashboard">
                <i class="fas fa-th-large sidebar-menu-icon"></i>
                <span class="sidebar-menu-text">Dashboard</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a class="sidebar-menu-link" data-view="team">
                <i class="fas fa-users sidebar-menu-icon"></i>
                <span class="sidebar-menu-text">Team Overview</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a class="sidebar-menu-link" data-view="individual">
                <i class="fas fa-user sidebar-menu-icon"></i>
                <span class="sidebar-menu-text">Individual View</span>
              </a>
            </li>
          </ul>
        </div>
        
        <div class="sidebar-section">
          <div class="sidebar-section-header">Management</div>
          <ul class="sidebar-menu">
            <li class="sidebar-menu-item">
              <a class="sidebar-menu-link" id="enter-metrics-link">
                <i class="fas fa-plus-circle sidebar-menu-icon"></i>
                <span class="sidebar-menu-text">Enter Metrics</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a class="sidebar-menu-link" id="reports-link">
                <i class="fas fa-file-alt sidebar-menu-icon"></i>
                <span class="sidebar-menu-text">Reports</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a class="sidebar-menu-link" id="export-link">
                <i class="fas fa-file-export sidebar-menu-icon"></i>
                <span class="sidebar-menu-text">Export Data</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a class="sidebar-menu-link" id="email-config-link">
                <i class="fas fa-envelope sidebar-menu-icon"></i>
                <span class="sidebar-menu-text">Email Settings</span>
              </a>
            </li>
          </ul>
        </div>
        
        <div class="sidebar-section">
          <div class="sidebar-section-header">Time Period</div>
          <ul class="sidebar-menu">
            <li class="sidebar-menu-item">
              <a class="sidebar-menu-link time-period-link active" data-period="daily">
                <i class="fas fa-calendar-day sidebar-menu-icon"></i>
                <span class="sidebar-menu-text">Daily</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a class="sidebar-menu-link time-period-link" data-period="weekly">
                <i class="fas fa-calendar-week sidebar-menu-icon"></i>
                <span class="sidebar-menu-text">Weekly</span>
              </a>
            </li>
            <li class="sidebar-menu-item">
              <a class="sidebar-menu-link time-period-link" data-period="monthly">
                <i class="fas fa-calendar-alt sidebar-menu-icon"></i>
                <span class="sidebar-menu-text">Monthly</span>
              </a>
            </li>
          </ul>
        </div>
      </div>
    </aside>
    
    <!-- Header -->
    <header class="app-header">
      <div class="header-title" id="view-title">Metrics Dashboard</div>
      
      <div class="header-actions">
        <div class="header-date">
          <span id="current-date">Mar 28, 2025</span>
        </div>
        <button type="button" class="header-action-btn" id="refresh-btn" aria-label="Refresh">
          <i class="fas fa-sync-alt"></i>
        </button>
      </div>
    </header>
    
    <!-- Content Area -->
    <main class="app-content">
      <!-- Dashboard View -->
      <div id="dashboard-view" class="view-content">
        <!-- Time Period Selector -->
        <div class="time-selector mb-4">
          <button class="time-btn active" data-period="daily">Daily</button>
          <button class="time-btn" data-period="weekly">Weekly</button>
          <button class="time-btn" data-period="monthly">Monthly</button>
          <button class="time-btn" data-period="quarterly">Quarterly</button>
          <span class="ms-auto"></span>
          <button class="btn btn-primary" id="dashboard-enter-metrics">
            <i class="fas fa-plus me-2"></i> Enter Today's Metrics
          </button>
        </div>
        
        <!-- Key Metrics Cards -->
        <div class="metrics-grid">
          <!-- Answer Rate Card -->
          <div class="metric-card">
            <div class="metric-header">
              <h6 class="metric-title">Answer Rate</h6>
              <div class="metric-icon primary-icon">
                <i class="fas fa-phone-alt"></i>
              </div>
            </div>
            <div class="metric-value" id="answer-rate">0%</div>
            <div class="metric-trend">
              <i class="fas fa-arrow-up trend-up" id="answer-rate-trend-icon"></i>
              <span id="answer-rate-trend">0% vs last period</span>
            </div>
            <div class="goal-indicator above-goal" id="answer-rate-goal"></div>
          </div>
          
          <!-- Average Talk Time Card -->
          <div class="metric-card">
            <div class="metric-header">
              <h6 class="metric-title">Avg Talk Time</h6>
              <div class="metric-icon success-icon">
                <i class="fas fa-clock"></i>
              </div>
            </div>
            <div class="metric-value" id="avg-talk-time">0 min</div>
            <div class="metric-trend">
              <i class="fas fa-arrow-up trend-up" id="talk-time-trend-icon"></i>
              <span id="talk-time-trend">0% vs last period</span>
            </div>
            <div class="goal-indicator above-goal" id="talk-time-goal"></div>
          </div>
          
          <!-- On Queue Percentage Card -->
          <div class="metric-card">
            <div class="metric-header">
              <h6 class="metric-title">On Queue %</h6>
              <div class="metric-icon info-icon">
                <i class="fas fa-headset"></i>
              </div>
            </div>
            <div class="metric-value" id="on-queue">0%</div>
            <div class="metric-trend">
              <i class="fas fa-arrow-up trend-up" id="on-queue-trend-icon"></i>
              <span id="on-queue-trend">0% vs last period</span>
            </div>
            <div class="goal-indicator above-goal" id="on-queue-goal"></div>
          </div>
          
          <!-- Interacting Time Card -->
          <div class="metric-card">
            <div class="metric-header">
              <h6 class="metric-title">Interacting Time</h6>
              <div class="metric-icon warning-icon">
                <i class="fas fa-user-clock"></i>
              </div>
            </div>
            <div class="metric-value" id="interacting-time">0 hrs</div>
            <div class="metric-trend">
              <i class="fas fa-arrow-up trend-up" id="interacting-time-trend-icon"></i>
              <span id="interacting-time-trend">0% vs last period</span>
            </div>
            <div class="goal-indicator above-goal" id="interacting-time-goal"></div>
          </div>
        </div>
        
        <!-- Performance Trends Chart -->
        <div class="content-card mb-4">
          <div class="card-header">
            <h5 class="card-title">
              <div class="card-title-icon">
                <i class="fas fa-chart-line"></i>
              </div>
              Performance Trends
            </h5>
            
            <div>
              <select class="form-select form-select-sm" id="trend-chart-metric">
                <option value="answer-rate">Answer Rate</option>
                <option value="talk-time">Average Talk Time</option>
                <option value="on-queue">On Queue %</option>
                <option value="interacting-time">Interacting Time</option>
              </select>
            </div>
          </div>
          
          <div class="card-body">
            <div class="chart-container" id="trend-chart"></div>
          </div>
        </div>
        
        <!-- Metrics Breakdown -->
        <div class="row">
          <div class="col-lg-6">
            <!-- Team Performance -->
            <div class="content-card mb-4">
              <div class="card-header">
                <h5 class="card-title">
                  <div class="card-title-icon">
                    <i class="fas fa-users"></i>
                  </div>
                  Team Performance
                </h5>
                
                <a class="btn btn-outline-primary btn-sm" id="view-team-details">
                  <i class="fas fa-eye me-1"></i> View Details
                </a>
              </div>
              
              <div class="card-body p-0">
                <div class="table-container">
                  <table class="metrics-table">
                    <thead>
                      <tr>
                        <th>Metric</th>
                        <th>Value</th>
                        <th>Goal</th>
                        <th>Status</th>
                      </tr>
                    </thead>
                    <tbody id="team-metrics-table">
                      <tr>
                        <td>Answer Rate</td>
                        <td id="team-table-answer-rate">0%</td>
                        <td>≥ 95%</td>
                        <td id="team-table-answer-rate-status"></td>
                      </tr>
                      <tr>
                        <td>Average Talk Time</td>
                        <td id="team-table-talk-time">0 min</td>
                        <td>15-20 min</td>
                        <td id="team-table-talk-time-status"></td>
                      </tr>
                      <tr>
                        <td>ACW %</td>
                        <td id="team-table-acw">0%</td>
                        <td>≤ 5%</td>
                        <td id="team-table-acw-status"></td>
                      </tr>
                      <tr>
                        <td>On Queue %</td>
                        <td id="team-table-on-queue">0%</td>
                        <td>≥ 65%</td>
                        <td id="team-table-on-queue-status"></td>
                      </tr>
                      <tr>
                        <td>Interacting Time</td>
                        <td id="team-table-interacting">0 hrs</td>
                        <td>4-6 hrs</td>
                        <td id="team-table-interacting-status"></td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
          
          <div class="col-lg-6">
            <!-- Members Needing Attention -->
            <div class="content-card mb-4">
              <div class="card-header">
                <h5 class="card-title">
                  <div class="card-title-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                  </div>
                  Members Needing Attention
                </h5>
              </div>
              
              <div class="card-body p-0" id="attention-members-container">
                <div class="table-container">
                  <table class="metrics-table">
                    <thead>
                      <tr>
                        <th>Team Member</th>
                        <th>Flag</th>
                        <th>Issue</th>
                        <th>Action</th>
                      </tr>
                    </thead>
                    <tbody id="attention-members">
                      <!-- Will be populated with members needing attention -->
                    </tbody>
                  </table>
                </div>
                
                <div id="no-attention-needed" class="text-center py-4" style="display: none;">
                  <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
                  <p class="mb-0">No team members need attention right now.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Team Overview View -->
      <div id="team-view" class="view-content" style="display: none;">
        <!-- Team Performance Charts -->
        <div class="content-card mb-4">
          <div class="card-header">
            <h5 class="card-title">
              <div class="card-title-icon">
                <i class="fas fa-users"></i>
              </div>
              Team Metrics Overview
            </h5>
            
            <div class="btn-group">
              <button class="btn btn-outline-primary btn-sm active" id="team-chart-toggle-line">Line</button>
              <button class="btn btn-outline-primary btn-sm" id="team-chart-toggle-bar">Bar</button>
              <button class="btn btn-outline-primary btn-sm" id="team-chart-toggle-radar">Radar</button>
            </div>
          </div>
          
          <div class="card-body">
            <ul class="nav nav-tabs-alt" id="team-metric-tabs" role="tablist">
              <li class="nav-item" role="presentation">
                <button class="nav-link active" id="answer-rate-tab" data-bs-toggle="tab" data-bs-target="#answer-rate-pane" type="button" role="tab">
                  Answer Rate
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="talk-time-tab" data-bs-toggle="tab" data-bs-target="#talk-time-pane" type="button" role="tab">
                  Talk Time
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="acw-tab" data-bs-toggle="tab" data-bs-target="#acw-pane" type="button" role="tab">
                  ACW %
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="queue-tab" data-bs-toggle="tab" data-bs-target="#queue-pane" type="button" role="tab">
                  Queue %
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="interacting-tab" data-bs-toggle="tab" data-bs-target="#interacting-pane" type="button" role="tab">
                  Interacting Time
                </button>
              </li>
            </ul>
            
            <div class="tab-content">
              <div class="tab-pane fade show active" id="answer-rate-pane" role="tabpanel">
                <div class="chart-container" id="team-answer-rate-chart"></div>
              </div>
              <div class="tab-pane fade" id="talk-time-pane" role="tabpanel">
                <div class="chart-container" id="team-talk-time-chart"></div>
              </div>
              <div class="tab-pane fade" id="acw-pane" role="tabpanel">
                <div class="chart-container" id="team-acw-chart"></div>
              </div>
              <div class="tab-pane fade" id="queue-pane" role="tabpanel">
                <div class="chart-container" id="team-queue-chart"></div>
              </div>
              <div class="tab-pane fade" id="interacting-pane" role="tabpanel">
                <div class="chart-container" id="team-interacting-chart"></div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Team Member Performance Table -->
        <div class="content-card">
          <div class="card-header">
            <h5 class="card-title">
              <div class="card-title-icon">
                <i class="fas fa-user-check"></i>
              </div>
              Team Member Performance
            </h5>
            
            <div>
              <select class="form-select form-select-sm" id="team-table-metric">
                <option value="all">All Metrics</option>
                <option value="answer-rate">Answer Rate</option>
                <option value="talk-time">Average Talk Time</option>
                <option value="acw">ACW %</option>
                <option value="queue">Queue %</option>
                <option value="interacting">Interacting Time</option>
              </select>
            </div>
          </div>
          
          <div class="card-body p-0">
            <div class="table-container">
              <table class="metrics-table">
                <thead>
                  <tr>
                    <th>Team Member</th>
                    <th>Answer Rate</th>
                    <th>Avg Talk Time</th>
                    <th>ACW %</th>
                    <th>On Queue %</th>
                    <th>Interacting Time</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody id="team-members-table">
                  <!-- Will be populated with team member data -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Individual View -->
      <div id="individual-view" class="view-content" style="display: none;">
        <!-- Team Member Selector -->
        <div class="mb-4">
          <label for="team-member-select" class="form-label">Select Team Member</label>
          <select class="form-select" id="team-member-select">
            <option value="">Select a team member</option>
            <!-- Will be populated with team members -->
          </select>
        </div>
        
        <div id="individual-metrics-container" style="display: none;">
          <!-- Individual Metrics Header -->
          <div class="d-flex align-items-center mb-4">
            <div class="team-avatar me-3" id="member-avatar">TM</div>
            <div>
              <h4 id="member-name" class="mb-1">Team Member</h4>
              <div id="member-position" class="text-secondary">Position</div>
            </div>
          </div>
          
          <!-- Individual Metrics Cards -->
          <div class="metrics-grid">
            <!-- Individual Answer Rate Card -->
            <div class="metric-card">
              <div class="metric-header">
                <h6 class="metric-title">Answer Rate</h6>
                <div class="metric-icon primary-icon">
                  <i class="fas fa-phone-alt"></i>
                </div>
              </div>
              <div class="metric-value" id="individual-answer-rate">0%</div>
              <div class="metric-trend">
                <span id="individual-answer-rate-vs-team">0% vs team avg</span>
              </div>
              <div class="goal-indicator above-goal" id="individual-answer-rate-goal"></div>
            </div>
            
            <!-- Individual Talk Time Card -->
            <div class="metric-card">
              <div class="metric-header">
                <h6 class="metric-title">Avg Talk Time</h6>
                <div class="metric-icon success-icon">
                  <i class="fas fa-clock"></i>
                </div>
              </div>
              <div class="metric-value" id="individual-talk-time">0 min</div>
              <div class="metric-trend">
                <span id="individual-talk-time-vs-team">0% vs team avg</span>
              </div>
              <div class="goal-indicator above-goal" id="individual-talk-time-goal"></div>
            </div>
            
            <!-- Individual ACW Card -->
            <div class="metric-card">
              <div class="metric-header">
                <h6 class="metric-title">ACW %</h6>
                <div class="metric-icon info-icon">
                  <i class="fas fa-stopwatch"></i>
                </div>
              </div>
              <div class="metric-value" id="individual-acw">0%</div>
              <div class="metric-trend">
                <span id="individual-acw-vs-team">0% vs team avg</span>
              </div>
              <div class="goal-indicator above-goal" id="individual-acw-goal"></div>
            </div>
            
            <!-- Individual On Queue Card -->
            <div class="metric-card">
              <div class="metric-header">
                <h6 class="metric-title">On Queue %</h6>
                <div class="metric-icon warning-icon">
                  <i class="fas fa-headset"></i>
                </div>
              </div>
              <div class="metric-value" id="individual-on-queue">0%</div>
              <div class="metric-trend">
                <span id="individual-on-queue-vs-team">0% vs team avg</span>
              </div>
              <div class="goal-indicator above-goal" id="individual-on-queue-goal"></div>
            </div>
          </div>
          
          <!-- Individual Performance Trends -->
          <div class="content-card mb-4">
            <div class="card-header">
              <h5 class="card-title">
                <div class="card-title-icon">
                  <i class="fas fa-chart-line"></i>
                </div>
                Performance Trends
              </h5>
              
              <div>
                <select class="form-select form-select-sm" id="individual-trend-metric">
                  <option value="answer-rate">Answer Rate</option>
                  <option value="talk-time">Average Talk Time</option>
                  <option value="acw">ACW %</option>
                  <option value="on-queue">On Queue %</option>
                  <option value="interacting-time">Interacting Time</option>
                </select>
              </div>
            </div>
            
            <div class="card-body">
              <div class="chart-container" id="individual-trend-chart"></div>
            </div>
          </div>
          
          <!-- Performance History -->
          <div class="content-card">
            <div class="card-header">
              <h5 class="card-title">
                <div class="card-title-icon">
                  <i class="fas fa-history"></i>
                </div>
                Performance History
              </h5>
            </div>
            
            <div class="card-body p-0">
              <div class="table-container">
                <table class="metrics-table">
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>Answer Rate</th>
                      <th>Avg Talk Time</th>
                      <th>ACW %</th>
                      <th>On Queue %</th>
                      <th>Interacting Time</th>
                    </tr>
                  </thead>
                  <tbody id="individual-history-table">
                    <!-- Will be populated with historical data -->
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Empty State for Individual View -->
        <div id="individual-empty-state" class="text-center py-5">
          <i class="fas fa-user-circle fa-4x mb-3 text-secondary opacity-50"></i>
          <h4 class="mb-2">Select a Team Member</h4>
          <p class="text-secondary">Choose a team member from the dropdown above to view their metrics.</p>
        </div>
      </div>
    </main>
   </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let dashboardData = {};
    let teamData = [];
    let activeCharts = {};
    let currentView = 'dashboard';
    let currentPeriod = 'daily';
    let selectedTeamMemberId = '';
    let chartType = 'line';
    
    // Current date and user info
    const currentDate = new Date("2025-03-28 06:54:45");
    const currentUser = "amourjanay";
    
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize UI
      initializeUI();
      
      // Setup event listeners
      setupEventListeners();
      
      // Format and display current date
      document.getElementById('current-date').textContent = formatDateHeader(currentDate);
      
      // Load dashboard data
      loadDashboardData();
    });
    
    function initializeUI() {
      // Initialize tabs
      document.querySelectorAll('[data-bs-toggle="tab"]').forEach(tab => {
        tab.addEventListener('show.bs.tab', function(event) {
          const target = event.target.getAttribute('data-bs-target');
          updateTeamCharts(target);
        });
      });
    }
    
    function setupEventListeners() {
      // Toggle sidebar
      document.getElementById('sidebar-toggle').addEventListener('click', function() {
        document.getElementById('sidebar').classList.toggle('collapsed');
      });
      
      // View navigation
      document.querySelectorAll('[data-view]').forEach(link => {
        link.addEventListener('click', function() {
          const viewName = this.getAttribute('data-view');
          changeView(viewName);
          
          // Update active states
          document.querySelectorAll('[data-view]').forEach(l => l.classList.remove('active'));
          this.classList.add('active');
        });
      });
      
      // Time period links in sidebar
      document.querySelectorAll('.time-period-link').forEach(link => {
        link.addEventListener('click', function() {
          const period = this.getAttribute('data-period');
          changeTimePeriod(period);
          
          // Update active states
          document.querySelectorAll('.time-period-link').forEach(l => l.classList.remove('active'));
          this.classList.add('active');
        });
      });
      
      // Time period buttons
      document.querySelectorAll('.time-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const period = this.getAttribute('data-period');
          changeTimePeriod(period);
          
          // Update active states
          document.querySelectorAll('.time-btn').forEach(b => b.classList.remove('active'));
          this.classList.add('active');
        });
      });
      
      // Dashboard links
      document.getElementById('enter-metrics-link').addEventListener('click', navigateToMetricsForm);
      document.getElementById('dashboard-enter-metrics').addEventListener('click', navigateToMetricsForm);
      document.getElementById('reports-link').addEventListener('click', navigateToReports);
      document.getElementById('export-link').addEventListener('click', navigateToExport);
      document.getElementById('email-config-link').addEventListener('click', navigateToEmailConfig);
      
      // Dashboard buttons
      document.getElementById('view-team-details').addEventListener('click', function() {
        changeView('team');
        
        // Update active states
        document.querySelectorAll('[data-view]').forEach(l => l.classList.remove('active'));
        document.querySelector('[data-view="team"]').classList.add('active');
      });
      
      // Refresh button
      document.getElementById('refresh-btn').addEventListener('click', refreshData);
      
      // Team chart type toggle
      document.getElementById('team-chart-toggle-line').addEventListener('click', function() {
        setChartType('line');
        updateActiveChartToggle(this);
      });
      
      document.getElementById('team-chart-toggle-bar').addEventListener('click', function() {
        setChartType('bar');
        updateActiveChartToggle(this);
      });
      
      document.getElementById('team-chart-toggle-radar').addEventListener('click', function() {
        setChartType('radar');
        updateActiveChartToggle(this);
      });
      
      // Dashboard chart metric dropdown
      document.getElementById('trend-chart-metric').addEventListener('change', function() {
        updateDashboardTrendChart(this.value);
      });
      
      // Team table metric filter
      document.getElementById('team-table-metric').addEventListener('change', function() {
        filterTeamMemberTable(this.value);
      });
      
      // Individual team member select
      document.getElementById('team-member-select').addEventListener('change', function() {
        selectedTeamMemberId = this.value;
        
        if (selectedTeamMemberId) {
          loadIndividualMetrics(selectedTeamMemberId);
        } else {
          document.getElementById('individual-metrics-container').style.display = 'none';
          document.getElementById('individual-empty-state').style.display = 'block';
        }
      });
      
      // Individual trend chart metric dropdown
      document.getElementById('individual-trend-metric').addEventListener('change', function() {
        updateIndividualTrendChart(this.value);
      });
    }
    
    function changeView(viewName) {
      // Hide all views
      document.querySelectorAll('.view-content').forEach(view => {
        view.style.display = 'none';
      });
      
      // Show requested view
      document.getElementById(`${viewName}-view`).style.display = 'block';
      
      // Update header title
      const titles = {
        'dashboard': 'Metrics Dashboard',
        'team': 'Team Metrics Overview',
        'individual': 'Individual Metrics'
      };
      
      document.getElementById('view-title').textContent = titles[viewName] || 'Metrics Dashboard';
      
      // Store current view
      currentView = viewName;
      
      // Handle special view requirements
      if (viewName === 'team' && !activeCharts.teamAnswerRate) {
        loadTeamData();
      } else if (viewName === 'individual' && teamData.length === 0) {
        loadTeamMembersList();
      }
    }
    
    function changeTimePeriod(period) {
      currentPeriod = period;
      
      // Update UI to show the selected period is active
      document.querySelectorAll('.time-period-link').forEach(link => {
        if (link.getAttribute('data-period') === period) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
      
      document.querySelectorAll('.time-btn').forEach(btn => {
        if (btn.getAttribute('data-period') === period) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
      
      // Reload data for the new time period
      if (currentView === 'dashboard') {
        loadDashboardData();
      } else if (currentView === 'team') {
        loadTeamData();
      } else if (currentView === 'individual' && selectedTeamMemberId) {
        loadIndividualMetrics(selectedTeamMemberId);
      }
    }
    
    function updateActiveChartToggle(element) {
      document.querySelectorAll('#team-chart-toggle-line, #team-chart-toggle-bar, #team-chart-toggle-radar').forEach(btn => {
        btn.classList.remove('active');
      });
      
      element.classList.add('active');
    }
    
    function loadDashboardData() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleDashboardData)
        .withFailureHandler(handleError)
        .getMetricsDashboardData(currentPeriod);
    }
    
    function handleDashboardData(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load dashboard data', 'error');
        return;
      }
      
      dashboardData = result.data || {};
      
      // Update dashboard UI with data
      updateDashboardUI();
    }
    
    function updateDashboardUI() {
      // Update metrics cards
      updateMetricsCards();
      
      // Update team performance table
      updateTeamPerformanceTable();
      
      // Update attention needed members
      updateAttentionMembers();
      
      // Update trend chart
      const selectedMetric = document.getElementById('trend-chart-metric').value;
      updateDashboardTrendChart(selectedMetric);
    }
    
    function updateMetricsCards() {
      // Answer Rate
      const answerRate = dashboardData.answerRate || 0;
      const answerRateGoal = 95;
      document.getElementById('answer-rate').textContent = `${answerRate.toFixed(1)}%`;
      updateTrendIndicator('answer-rate', dashboardData.answerRateTrend || 0);
      updateGoalIndicator('answer-rate-goal', answerRate, answerRateGoal, true);
      
      // Average Talk Time
      const talkTime = dashboardData.averageTalkTime || 0;
      document.getElementById('avg-talk-time').textContent = `${talkTime.toFixed(1)} min`;
      updateTrendIndicator('talk-time', dashboardData.talkTimeTrend || 0);
      updateRangeGoalIndicator('talk-time-goal', talkTime, 15, 20);
      
      // On Queue Percentage
      const onQueue = dashboardData.onQueuePercentage || 0;
      const onQueueGoal = 65;
      document.getElementById('on-queue').textContent = `${onQueue.toFixed(1)}%`;
      updateTrendIndicator('on-queue', dashboardData.onQueueTrend || 0);
      updateGoalIndicator('on-queue-goal', onQueue, onQueueGoal, true);
      
      // Interacting Time
      const interactingTime = dashboardData.interactingTime || 0;
      document.getElementById('interacting-time').textContent = `${interactingTime.toFixed(1)} hrs`;
      updateTrendIndicator('interacting-time', dashboardData.interactingTimeTrend || 0);
      updateRangeGoalIndicator('interacting-time-goal', interactingTime, 4, 6);
    }
    
    function updateTrendIndicator(elementPrefix, trendValue) {
      const trendIcon = document.getElementById(`${elementPrefix}-trend-icon`);
      const trendText = document.getElementById(`${elementPrefix}-trend`);
      
      // Remove existing classes
      trendIcon.classList.remove('trend-up', 'trend-down');
      
      if (trendValue > 0) {
        trendIcon.classList.add('trend-up');
        trendIcon.classList.replace('fa-arrow-down', 'fa-arrow-up');
        trendText.textContent = `+${trendValue.toFixed(1)}% vs last period`;
      } else if (trendValue < 0) {
        trendIcon.classList.add('trend-down');
        trendIcon.classList.replace('fa-arrow-up', 'fa-arrow-down');
        trendText.textContent = `${trendValue.toFixed(1)}% vs last period`;
      } else {
        trendIcon.classList.add('trend-neutral');
        trendIcon.className = 'fas fa-minus trend-neutral';
        trendText.textContent = `${trendValue.toFixed(1)}% vs last period`;
      }
    }
    
    function updateGoalIndicator(elementId, value, goalValue, higherIsBetter = true) {
      const indicator = document.getElementById(elementId);
      
      // Clear existing classes
      indicator.classList.remove('above-goal', 'below-goal');
      
      // Check if value meets goal
      if (higherIsBetter) {
        if (value >= goalValue) {
          indicator.classList.add('above-goal');
        } else {
          indicator.classList.add('below-goal');
        }
      } else {
        if (value <= goalValue) {
          indicator.classList.add('above-goal');
        } else {
          indicator.classList.add('below-goal');
        }
      }
    }
    
    function updateRangeGoalIndicator(elementId, value, minGoal, maxGoal) {
      const indicator = document.getElementById(elementId);
      
      // Clear existing classes
      indicator.classList.remove('above-goal', 'below-goal');
      
      // Check if value is within goal range
      if (value >= minGoal && value <= maxGoal) {
        indicator.classList.add('above-goal');
      } else {
        indicator.classList.add('below-goal');
      }
    }
    
    function updateTeamPerformanceTable() {
      // Answer Rate
      document.getElementById('team-table-answer-rate').textContent = `${dashboardData.answerRate?.toFixed(1) || 0}%`;
      updateStatusCell('team-table-answer-rate-status', dashboardData.answerRate || 0, 95, true);
      
      // Average Talk Time
      document.getElementById('team-table-talk-time').textContent = `${dashboardData.averageTalkTime?.toFixed(1) || 0} min`;
      updateRangeStatusCell('team-table-talk-time-status', dashboardData.averageTalkTime || 0, 15, 20);
      
      // ACW
      document.getElementById('team-table-acw').textContent = `${dashboardData.acwPercentage?.toFixed(1) || 0}%`;
      updateStatusCell('team-table-acw-status', dashboardData.acwPercentage || 0, 5, false);
      
      // On Queue
      document.getElementById('team-table-on-queue').textContent = `${dashboardData.onQueuePercentage?.toFixed(1) || 0}%`;
      updateStatusCell('team-table-on-queue-status', dashboardData.onQueuePercentage || 0, 65, true);
      
      // Interacting Time
      document.getElementById('team-table-interacting').textContent = `${dashboardData.interactingTime?.toFixed(1) || 0} hrs`;
      updateRangeStatusCell('team-table-interacting-status', dashboardData.interactingTime || 0, 4, 6);
    }
    
    function updateStatusCell(elementId, value, goalValue, higherIsBetter = true) {
      const cell = document.getElementById(elementId);
      
      let statusClass = '';
      let statusIcon = '';
      
      // Determine status based on goal comparison
      if (higherIsBetter) {
        if (value >= goalValue) {
          statusClass = 'status-above';
          statusIcon = 'fa-check';
        } else {
          statusClass = 'status-below';
          statusIcon = 'fa-exclamation';
        }
      } else {
        if (value <= goalValue) {
          statusClass = 'status-above';
          statusIcon = 'fa-check';
        } else {
          statusClass = 'status-below';
          statusIcon = 'fa-exclamation';
        }
      }
      
      // Update cell content
      cell.innerHTML = `<span class="status-indicator ${statusClass}"></span><i class="fas ${statusIcon}"></i> ${higherIsBetter ? (value >= goalValue ? 'Met' : 'Not Met') : (value <= goalValue ? 'Met' : 'Not Met')}`;
    }
    
    function updateRangeStatusCell(elementId, value, minGoal, maxGoal) {
      const cell = document.getElementById(elementId);
      
      let statusClass = '';
      let statusIcon = '';
      let statusText = '';
      
      // Determine status based on goal range comparison
      if (value >= minGoal && value <= maxGoal) {
        statusClass = 'status-above';
        statusIcon = 'fa-check';
        statusText = 'Within Range';
      } else if (value < minGoal) {
        statusClass = 'status-below';
        statusIcon = 'fa-exclamation';
        statusText = 'Below Range';
      } else {
        statusClass = 'status-below';
        statusIcon = 'fa-exclamation';
        statusText = 'Above Range';
      }
      
      // Update cell content
      cell.innerHTML = `<span class="status-indicator ${statusClass}"></span><i class="fas ${statusIcon}"></i> ${statusText}`;
    }
    
    function updateAttentionMembers() {
      const membersContainer = document.getElementById('attention-members-container');
      const noAttentionMessage = document.getElementById('no-attention-needed');
      const membersTable = document.getElementById('attention-members');
      
      // Clear existing content
      membersTable.innerHTML = '';
      
      const attentionMembers = dashboardData.membersNeedingAttention || [];
      
      if (attentionMembers.length === 0) {
        // Show empty message
        membersTable.innerHTML = '';
        noAttentionMessage.style.display = 'block';
        return;
      }
      
      // Hide empty message if there are members
      noAttentionMessage.style.display = 'none';
      
      // Add members to table
      attentionMembers.forEach(member => {
        const row = document.createElement('tr');
        
        // Get member initials for avatar
        const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim() || member.email || 'Team Member';
        const initials = getInitials(fullName);
        
        // Determine flag class based on severity
        let flagClass = '';
        switch (member.severity) {
          case 'high':
            flagClass = 'flag-danger';
            break;
          case 'medium':
            flagClass = 'flag-warning';
            break;
          default:
            flagClass = 'flag-warning';
        }
        
        row.innerHTML = `
          <td>
            <div class="team-member">
              <div class="team-avatar">${initials}</div>
              <div class="team-name">${fullName}</div>
            </div>
          </td>
          <td>
            <span class="performance-flag ${flagClass}">
              <i class="fas fa-exclamation-triangle me-1"></i> ${member.severity === 'high' ? 'Critical' : 'Warning'}
            </span>
          </td>
          <td>${member.issue}</td>
          <td>
            <button class="btn btn-outline-primary btn-sm view-member" data-id="${member.id}">
              View Details
            </button>
          </td>
        `;
        
        // Add click event to view details button
        row.querySelector('.view-member').addEventListener('click', function() {
          viewTeamMemberDetails(member.id);
        });
        
        membersTable.appendChild(row);
      });
    }
    
    function updateDashboardTrendChart(metricType) {
      if (!dashboardData.trends) return;
      
      // Clear existing chart
      if (activeCharts.dashboardTrend) {
        activeCharts.dashboardTrend.dispose();
      }
      
      let chartData;
      let chartTitle;
      let yAxisLabel;
      let goalLine = [];
      let goalLine2 = null;
      
      // Set chart properties based on metric type
      switch(metricType) {
        case 'answer-rate':
          chartData = dashboardData.trends.answerRate || [];
          chartTitle = 'Answer Rate Trend';
          yAxisLabel = 'Answer Rate (%)';
          goalLine = Array(chartData.length).fill(95);
          break;
        case 'talk-time':
          chartData = dashboardData.trends.talkTime || [];
          chartTitle = 'Average Talk Time Trend';
          yAxisLabel = 'Minutes';
          goalLine = Array(chartData.length).fill(15);
          goalLine2 = Array(chartData.length).fill(20);
          break;
        case 'on-queue':
          chartData = dashboardData.trends.onQueue || [];
          chartTitle = 'On Queue Percentage Trend';
          yAxisLabel = 'Percentage (%)';
          goalLine = Array(chartData.length).fill(65);
          break;
        case 'interacting-time':
          chartData = dashboardData.trends.interactingTime || [];
          chartTitle = 'Interacting Time Trend';
          yAxisLabel = 'Hours';
          goalLine = Array(chartData.length).fill(4);
          goalLine2 = Array(chartData.length).fill(6);
          break;
        default:
          chartData = dashboardData.trends.answerRate || [];
          chartTitle = 'Answer Rate Trend';
          yAxisLabel = 'Answer Rate (%)';
          goalLine = Array(chartData.length).fill(95);
      }
      
      // Create chart options
      const options = {
        series: [{
          name: metricType === 'talk-time' ? 'Talk Time' : 
                metricType === 'on-queue' ? 'On Queue %' : 
                metricType === 'interacting-time' ? 'Interacting Time' : 'Answer Rate',
          data: chartData
        }, {
          name: 'Goal',
          data: goalLine,
          type: 'line',
          dashArray: 5,
          color: '#f72585'
        }],
        chart: {
          type: 'line',
          height: 360,
          toolbar: {
            show: true,
            tools: {
              download: true,
              selection: true,
              zoom: true,
              zoomin: true,
              zoomout: true,
              pan: true,
              reset: true
            }
          },
          fontFamily: getComputedStyle(document.body).fontFamily
        },
        colors: ['#4361ee', '#f72585'],
        dataLabels: {
          enabled: false
        },
        stroke: {
          curve: 'smooth',
          width: [3, 2],
          dashArray: [0, 5]
        },
        xaxis: {
          categories: dashboardData.trends.dates || [],
          labels: {
            style: {
              colors: '#6c757d'
            }
          }
        },
        yaxis: {
          title: {
            text: yAxisLabel
          },
          labels: {
            style: {
              colors: '#6c757d'
            }
          }
        },
        grid: {
          borderColor: 'rgba(0, 0, 0, 0.05)'
        },
        tooltip: {
          y: {
            formatter: function(val) {
              return metricType === 'talk-time' ? `${val} min` : 
                    metricType === 'interacting-time' ? `${val} hrs` : 
                    `${val}%`;
            }
          }
        },
        legend: {
          position: 'top'
        }
      };
      
      // Add second goal line if applicable
      if (goalLine2) {
        options.series.push({
          name: 'Upper Goal',
          data: goalLine2,
          type: 'line',
          dashArray: 5,
          color: '#f72585'
        });
      }
      
      // Create chart
      activeCharts.dashboardTrend = new ApexCharts(document.getElementById('trend-chart'), options);
      activeCharts.dashboardTrend.render();
    }
    
    function loadTeamData() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleTeamData)
        .withFailureHandler(handleError)
        .getTeamMetricsData(currentPeriod);
    }
    
    function handleTeamData(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load team data', 'error');
        return;
      }
      
      teamData = result.data.members || [];
      
      // Update team members table
      updateTeamMembersTable(teamData);
      
      // Initialize team charts
      initializeTeamCharts(result.data);
    }
    
    function updateTeamMembersTable(members) {
      const tableBody = document.getElementById('team-members-table');
      tableBody.innerHTML = '';
      
      if (members.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `
          <td colspan="7" class="text-center py-4">No team member data available</td>
        `;
        tableBody.appendChild(emptyRow);
        return;
      }
      
      members.forEach(member => {
        const row = document.createElement('tr');
        
        // Get member initials for avatar
        const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim() || member.email || 'Team Member';
        const initials = getInitials(fullName);
        
        // Calculate status based on metrics
        const status = calculateMemberStatus(member);
        
        row.innerHTML = `
          <td>
            <div class="team-member">
              <div class="team-avatar">${initials}</div>
              <div class="team-name">${fullName}</div>
            </div>
          </td>
          <td>
            ${member.answerRate?.toFixed(1) || 0}%
            <span class="status-indicator ${member.answerRate >= 95 ? 'status-above' : 'status-below'}"></span>
          </td>
          <td>
            ${member.averageTalkTime?.toFixed(1) || 0} min
            <span class="status-indicator ${member.averageTalkTime >= 15 && member.averageTalkTime <= 20 ? 'status-above' : 'status-below'}"></span>
          </td>
          <td>
            ${member.acwPercentage?.toFixed(1) || 0}%
            <span class="status-indicator ${member.acwPercentage <= 5 ? 'status-above' : 'status-below'}"></span>
          </td>
          <td>
            ${member.onQueuePercentage?.toFixed(1) || 0}%
            <span class="status-indicator ${member.onQueuePercentage >= 65 ? 'status-above' : 'status-below'}"></span>
          </td>
          <td>
            ${member.interactingTime?.toFixed(1) || 0} hrs
            <span class="status-indicator ${member.interactingTime >= 4 && member.interactingTime <= 6 ? 'status-above' : 'status-below'}"></span>
          </td>
          <td>
            <span class="performance-flag ${status.flagClass}">
              <i class="fas ${status.icon} me-1"></i>
              ${status.text}
            </span>
          </td>
        `;
        
        // Add click event to view member details
        row.addEventListener('click', function() {
          viewTeamMemberDetails(member.id);
        });
        
        tableBody.appendChild(row);
      });
    }
    
    function calculateMemberStatus(member) {
      // Count how many metrics are below goal
      let issueCount = 0;
      
      if (member.answerRate < 95) issueCount++;
      if (member.averageTalkTime < 15 || member.averageTalkTime > 20) issueCount++;
      if (member.acwPercentage > 5) issueCount++;
      if (member.onQueuePercentage < 65) issueCount++;
      if (member.interactingTime < 4 || member.interactingTime > 6) issueCount++;
      
      // Determine status based on issue count
      if (issueCount === 0) {
        return { flagClass: 'flag-success', icon: 'fa-check', text: 'On Target' };
      } else if (issueCount <= 2) {
        return { flagClass: 'flag-warning', icon: 'fa-exclamation', text: 'Needs Attention' };
      } else {
        return { flagClass: 'flag-danger', icon: 'fa-exclamation-triangle', text: 'Critical' };
      }
    }
    
    function initializeTeamCharts(data) {
      // Prepare data for charts
      const answerRateData = prepareMemberComparisonData(teamData, 'answerRate');
      const talkTimeData = prepareMemberComparisonData(teamData, 'averageTalkTime');
      const acwData = prepareMemberComparisonData(teamData, 'acwPercentage');
      const queueData = prepareMemberComparisonData(teamData, 'onQueuePercentage');
      const interactingData = prepareMemberComparisonData(teamData, 'interactingTime');
      
      // Create charts
      createTeamChart('team-answer-rate-chart', answerRateData, 'Answer Rate (%)', 95, null, 'Answer Rate Comparison');
      createTeamChart('team-talk-time-chart', talkTimeData, 'Talk Time (min)', 15, 20, 'Talk Time Comparison');
      createTeamChart('team-acw-chart', acwData, 'ACW (%)', 5, null, 'ACW Percentage Comparison', false);
      createTeamChart('team-queue-chart', queueData, 'On Queue (%)', 65, null, 'Queue Percentage Comparison');
      createTeamChart('team-interacting-chart', interactingData, 'Hours', 4, 6, 'Interacting Time Comparison');
    }
    
    function prepareMemberComparisonData(members, metricField) {
      // Get member names
      const names = members.map(member => {
        return `${member.firstName || ''} ${member.lastName || ''}`.trim() || member.email || 'Team Member';
      });
      
      // Get metric values
      const values = members.map(member => member[metricField] || 0);
      
      return { names, values };
    }
    
    function createTeamChart(containerId, data, yAxisLabel, goalValue, goalValue2, title, higherIsBetter = true) {
      // Destroy existing chart if any
      if (activeCharts[containerId]) {
        activeCharts[containerId].dispose();
      }
      
      // Determine goal line color based on whether higher is better
      const goalColor = '#f72585';
      
      // Create chart options based on chart type
      let options;
      
      if (chartType === 'radar') {
        options = {
          series: [{
            name: title,
            data: data.values
          }],
          chart: {
            type: 'radar',
            height: 350,
            toolbar: {
              show: false
            }
          },
          xaxis: {
            categories: data.names
          },
          yaxis: {
            show: false
          },
          markers: {
            size: 5
          },
          plotOptions: {
            radar: {
              polygons: {
                strokeColors: 'rgba(0, 0, 0, 0.05)',
                fill: {
                  colors: ['rgba(255, 255, 255, 0.2)', 'rgba(250, 250, 250, 0.2)']
                }
              }
            }
          }
        };
      } else {
        options = {
          series: [{
            name: title,
            data: data.values
          }],
          chart: {
            type: chartType,
            height: 350,
            toolbar: {
              show: false
            },
            fontFamily: getComputedStyle(document.body).fontFamily
          },
          colors: ['#4361ee'],
          dataLabels: {
            enabled: false
          },
          plotOptions: {
            bar: {
              borderRadius: 4,
              columnWidth: '60%'
            }
          },
          xaxis: {
            categories: data.names,
            labels: {
              style: {
                colors: '#6c757d'
              }
            }
          },
          yaxis: {
            title: {
              text: yAxisLabel
            },
            labels: {
              style: {
                colors: '#6c757d'
              }
            }
          },
          grid: {
            borderColor: 'rgba(0, 0, 0, 0.05)'
          },
          annotations: {
            yaxis: []
          }
        };
        
        // Add goal line(s)
        if (goalValue !== null) {
          options.annotations.yaxis.push({
            y: goalValue,
            borderColor: goalColor,
            label: {
              borderColor: goalColor,
              style: {
                color: '#fff',
                background: goalColor
              },
              text: 'Goal'
            }
          });
        }
        
        if (goalValue2 !== null) {
          options.annotations.yaxis.push({
            y: goalValue2,
            borderColor: goalColor,
            label: {
              borderColor: goalColor,
              style: {
                color: '#fff',
                background: goalColor
              },
              text: 'Upper Goal'
            }
          });
        }
      }
      
      // Create chart
      activeCharts[containerId] = new ApexCharts(document.getElementById(containerId), options);
      activeCharts[containerId].render();
    }
    
    function updateTeamCharts(targetId) {
      // Map target ID to chart ID and data
      const chartMappings = {
        '#answer-rate-pane': {
          chartId: 'team-answer-rate-chart',
          metricField: 'answerRate',
          yAxisLabel: 'Answer Rate (%)',
          goalValue: 95,
          goalValue2: null,
          title: 'Answer Rate Comparison'
        },
        '#talk-time-pane': {
          chartId: 'team-talk-time-chart',
          metricField: 'averageTalkTime',
          yAxisLabel: 'Talk Time (min)',
          goalValue: 15,
          goalValue2: 20,
          title: 'Talk Time Comparison'
        },
        '#acw-pane': {
          chartId: 'team-acw-chart',
          metricField: 'acwPercentage',
          yAxisLabel: 'ACW (%)',
          goalValue: 5,
          goalValue2: null,
          title: 'ACW Percentage Comparison',
          higherIsBetter: false
        },
        '#queue-pane': {
          chartId: 'team-queue-chart',
          metricField: 'onQueuePercentage',
          yAxisLabel: 'On Queue (%)',
          goalValue: 65,
          goalValue2: null,
          title: 'Queue Percentage Comparison'
        },
        '#interacting-pane': {
          chartId: 'team-interacting-chart',
          metricField: 'interactingTime',
          yAxisLabel: 'Hours',
          goalValue: 4,
          goalValue2: 6,
          title: 'Interacting Time Comparison'
        }
      };
      
      const mapping = chartMappings[targetId];
      
      if (mapping && teamData.length > 0) {
        const data = prepareMemberComparisonData(teamData, mapping.metricField);
        createTeamChart(
          mapping.chartId,
          data,
          mapping.yAxisLabel,
          mapping.goalValue,
          mapping.goalValue2,
          mapping.title,
          mapping.higherIsBetter !== false
        );
      }
    }
    
    function setChartType(type) {
      chartType = type;
      
      // Update all team charts
      if (teamData.length > 0) {
        const activeTab = document.querySelector('#team-metric-tabs .nav-link.active');
        if (activeTab) {
          const targetId = activeTab.getAttribute('data-bs-target');
          updateTeamCharts(targetId);
        }
      }
    }
    
    function filterTeamMemberTable(metricFilter) {
      // TODO: Implement filtering of team members table by metric
      console.log("Filtering by:", metricFilter);
    }
    
    function loadTeamMembersList() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleTeamMembersLoaded)
        .withFailureHandler(handleError)
        .getActiveTeamMembers();
    }
    
    function handleTeamMembersLoaded(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load team members', 'error');
        return;
      }
      
      const members = result.data || [];
      
      // Populate team member dropdown
      const select = document.getElementById('team-member-select');
      
      // Clear existing options (except the first one)
      while (select.options.length > 1) {
        select.remove(1);
      }
      
      members.forEach(member => {
        const option = document.createElement('option');
        const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim() || member.email;
        option.value = member.id;
        option.textContent = fullName;
        select.appendChild(option);
      });
    }
    
    function loadIndividualMetrics(memberId) {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleIndividualMetrics)
        .withFailureHandler(handleError)
        .getIndividualMetricsData(memberId, currentPeriod);
    }
    
    function handleIndividualMetrics(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load individual metrics', 'error');
        return;
      }
      
      const data = result.data || {};
      
      // Show individual metrics container
      document.getElementById('individual-metrics-container').style.display = 'block';
      document.getElementById('individual-empty-state').style.display = 'none';
      
      // Update individual metrics UI
      updateIndividualUI(data);
    }
    
    function updateIndividualUI(data) {
      // Update member details
      const memberName = `${data.firstName || ''} ${data.lastName || ''}`.trim() || data.email || 'Team Member';
      const initials = getInitials(memberName);
      
      document.getElementById('member-avatar').textContent = initials;
      document.getElementById('member-name').textContent = memberName;
      document.getElementById('member-position').textContent = data.position || 'Team Member';
      
      // Update metrics cards
      updateIndividualMetricsCards(data);
      
      // Update trend chart
      const selectedMetric = document.getElementById('individual-trend-metric').value;
      updateIndividualTrendChart(selectedMetric, data);
      
      // Update history table
      updateIndividualHistoryTable(data.history || []);
    }
    
    function updateIndividualMetricsCards(data) {
      // Answer Rate
      const answerRate = data.currentMetrics?.answerRate || 0;
      document.getElementById('individual-answer-rate').textContent = `${answerRate.toFixed(1)}%`;
      document.getElementById('individual-answer-rate-vs-team').textContent = `${data.comparisonToTeam?.answerRate || 0}% vs team avg`;
      updateGoalIndicator('individual-answer-rate-goal', answerRate, 95, true);
      
      // Talk Time
      const talkTime = data.currentMetrics?.averageTalkTime || 0;
      document.getElementById('individual-talk-time').textContent = `${talkTime.toFixed(1)} min`;
      document.getElementById('individual-talk-time-vs-team').textContent = `${data.comparisonToTeam?.talkTime || 0}% vs team avg`;
      updateRangeGoalIndicator('individual-talk-time-goal', talkTime, 15, 20);
      
      // ACW
      const acw = data.currentMetrics?.acwPercentage || 0;
      document.getElementById('individual-acw').textContent = `${acw.toFixed(1)}%`;
      document.getElementById('individual-acw-vs-team').textContent = `${data.comparisonToTeam?.acw || 0}% vs team avg`;
      updateGoalIndicator('individual-acw-goal', acw, 5, false);
      
      // On Queue
      const onQueue = data.currentMetrics?.onQueuePercentage || 0;
      document.getElementById('individual-on-queue').textContent = `${onQueue.toFixed(1)}%`;
      document.getElementById('individual-on-queue-vs-team').textContent = `${data.comparisonToTeam?.onQueue || 0}% vs team avg`;
      updateGoalIndicator('individual-on-queue-goal', onQueue, 65, true);
    }
    
    function updateIndividualTrendChart(metricType, data) {
      if (!data.trends) return;
      
      // Clear existing chart
      if (activeCharts.individualTrend) {
        activeCharts.individualTrend.dispose();
      }
      
      let chartData;
      let chartTitle;
      let yAxisLabel;
      let goalLine = [];
      let goalLine2 = null;
      
      // Set chart properties based on metric type
      switch(metricType) {
        case 'answer-rate':
          chartData = data.trends.answerRate || [];
          chartTitle = 'Answer Rate Trend';
          yAxisLabel = 'Answer Rate (%)';
          goalLine = Array(chartData.length).fill(95);
          break;
        case 'talk-time':
          chartData = data.trends.talkTime || [];
          chartTitle = 'Average Talk Time Trend';
          yAxisLabel = 'Minutes';
          goalLine = Array(chartData.length).fill(15);
          goalLine2 = Array(chartData.length).fill(20);
          break;
        case 'acw':
          chartData = data.trends.acw || [];
          chartTitle = 'ACW Percentage Trend';
          yAxisLabel = 'Percentage (%)';
          goalLine = Array(chartData.length).fill(5);
          break;
        case 'on-queue':
          chartData = data.trends.onQueue || [];
          chartTitle = 'On Queue Percentage Trend';
          yAxisLabel = 'Percentage (%)';
          goalLine = Array(chartData.length).fill(65);
          break;
        case 'interacting-time':
          chartData = data.trends.interactingTime || [];
          chartTitle = 'Interacting Time Trend';
          yAxisLabel = 'Hours';
          goalLine = Array(chartData.length).fill(4);
          goalLine2 = Array(chartData.length).fill(6);
          break;
      }
      
      // Create chart options
      const options = {
        series: [{
          name: metricType === 'talk-time' ? 'Talk Time' : 
                metricType === 'acw' ? 'ACW %' : 
                metricType === 'on-queue' ? 'On Queue %' : 
                metricType === 'interacting-time' ? 'Interacting Time' : 'Answer Rate',
          data: chartData
        }, {
          name: 'Goal',
          data: goalLine,
          type: 'line',
          dashArray: 5,
          color: '#f72585'
        }],
        chart: {
          type: 'line',
          height: 360,
          toolbar: {
            show: true
          },
          fontFamily: getComputedStyle(document.body).fontFamily
        },
        colors: ['#4361ee', '#f72585'],
        dataLabels: {
          enabled: false
        },
        stroke: {
          curve: 'smooth',
          width: [3, 2],
          dashArray: [0, 5]
        },
        xaxis: {
          categories: data.trends.dates || [],
          labels: {
            style: {
              colors: '#6c757d'
            }
          }
        },
        yaxis: {
          title: {
            text: yAxisLabel
          },
          labels: {
            style: {
              colors: '#6c757d'
            }
          }
        },
        grid: {
          borderColor: 'rgba(0, 0, 0, 0.05)'
        },
        tooltip: {
          y: {
            formatter: function(val) {
              return metricType === 'talk-time' ? `${val} min` : 
                    metricType === 'interacting-time' ? `${val} hrs` : 
                    `${val}%`;
            }
          }
        },
        legend: {
          position: 'top'
        }
      };
      
      // Add second goal line if applicable
      if (goalLine2) {
        options.series.push({
          name: 'Upper Goal',
          data: goalLine2,
          type: 'line',
          dashArray: 5,
          color: '#f72585'
        });
      }
      
      // Create chart
      activeCharts.individualTrend = new ApexCharts(document.getElementById('individual-trend-chart'), options);
      activeCharts.individualTrend.render();
    }
    
    function updateIndividualHistoryTable(history) {
      const tableBody = document.getElementById('individual-history-table');
      tableBody.innerHTML = '';
      
      if (history.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `
          <td colspan="6" class="text-center py-4">No historical data available</td>
        `;
        tableBody.appendChild(emptyRow);
        return;
      }
      
      history.forEach(record => {
        const row = document.createElement('tr');
        
        row.innerHTML = `
          <td>${formatDate(record.date)}</td>
          <td>
            ${record.answerRate?.toFixed(1) || 0}%
            <span class="status-indicator ${record.answerRate >= 95 ? 'status-above' : 'status-below'}"></span>
          </td>
          <td>
            ${record.averageTalkTime?.toFixed(1) || 0} min
            <span class="status-indicator ${record.averageTalkTime >= 15 && record.averageTalkTime <= 20 ? 'status-above' : 'status-below'}"></span>
          </td>
          <td>
            ${record.acwPercentage?.toFixed(1) || 0}%
            <span class="status-indicator ${record.acwPercentage <= 5 ? 'status-above' : 'status-below'}"></span>
          </td>
          <td>
            ${record.onQueuePercentage?.toFixed(1) || 0}%
            <span class="status-indicator ${record.onQueuePercentage >= 65 ? 'status-above' : 'status-below'}"></span>
          </td>
          <td>
            ${record.interactingTime?.toFixed(1) || 0} hrs
            <span class="status-indicator ${record.interactingTime >= 4 && record.interactingTime <= 6 ? 'status-above' : 'status-below'}"></span>
          </td>
        `;
        
        tableBody.appendChild(row);
      });
    }
    
    function viewTeamMemberDetails(memberId) {
      // Switch to individual view
      changeView('individual');
      
      // Update active sidebar link
      document.querySelectorAll('[data-view]').forEach(link => {
        if (link.getAttribute('data-view') === 'individual') {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
      
      // Select the team member in the dropdown
      const select = document.getElementById('team-member-select');
      select.value = memberId;
      
      // Trigger change event to load data
      const event = new Event('change');
      select.dispatchEvent(event);
    }
    
    function navigateToMetricsForm() {
      google.script.run.showMetricsForm();
      google.script.host.close();
    }
    
    function navigateToReports() {
      google.script.run.showMetricsReports();
      google.script.host.close();
    }
    
    function navigateToExport() {
      google.script.run.showMetricsExport();
      google.script.host.close();
    }
    
    function navigateToEmailConfig() {
      google.script.run.showMetricsEmailConfig();
      google.script.host.close();
    }
    
    function refreshData() {
      if (currentView === 'dashboard') {
        loadDashboardData();
      } else if (currentView === 'team') {
        loadTeamData();
      } else if (currentView === 'individual' && selectedTeamMemberId) {
        loadIndividualMetrics(selectedTeamMemberId);
      }
      
      showNotification('Success', 'Data refreshed successfully', 'success');
    }
    
    function getInitials(name) {
      if (!name) return '?';
      
      return name
        .split(' ')
        .map(n => n[0])
        .join('')
        .toUpperCase()
        .substring(0, 2);
    }
    
    function formatDate(dateString) {
      if (!dateString) return '';
      
      const date = new Date(dateString);
      return date.toLocaleDateString(undefined, { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric'
      });
    }
    
    function formatDateHeader(date) {
      return date.toLocaleDateString(undefined, { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric'
      });
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const loadingOverlay = document.getElementById('loading-overlay');
      loadingOverlay.style.opacity = '0';
      setTimeout(() => {
        loadingOverlay.style.display = 'none';
        loadingOverlay.style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
    
    // Log dashboard view for analytics
    function logDashboardView() {
      google.script.run
        .withFailureHandler(error => console.error('Failed to log view:', error))
        .logMetricsDashboardView({
          viewedAt: currentDate.toISOString(),
          username: currentUser
        });
    }
    
    // Call log function when page loads
    window.addEventListener('load', logDashboardView);
  </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: rgba(67, 97, 238, 0.1);
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-light: rgba(76, 201, 240, 0.1);
      --info: #4895ef;
      --info-light: rgba(72, 149, 239, 0.1);
      --warning: #f72585;
      --warning-light: rgba(247, 37, 133, 0.1);
      --danger: #e5383b;
      --danger-light: rgba(229, 56, 59, 0.1);
      --light: #f8f9fa;
      --dark: #212529;
      --surface: #ffffff;
            --surface-hover: #f8f9fa;
      --text-primary: #212529;
      --text-secondary: #6c757d;
      --border-color: rgba(0, 0, 0, 0.05);
      --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.08);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --border-radius: 12px;
    }
    
    body {
      background-color: #f5f7ff;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      line-height: 1.5;
    }
    
    /* Layout */
    .app-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 1.5rem;
    }
    
    /* Content Cards */
    .content-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      border: none;
      transition: var(--transition);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }
    
    .content-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .card-header {
      background: transparent;
      border-bottom: 1px solid var(--border-color);
      padding: 1.25rem;
      position: relative;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(to right, var(--primary), var(--info));
    }
    
    .card-title {
      margin: 0;
      font-weight: 600;
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .card-title-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      background: var(--primary);
      color: white;
      border-radius: 8px;
      margin-right: 0.75rem;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Filter Controls */
    .filters-section {
      background: var(--surface);
      border-radius: var(--border-radius);
      padding: 1.25rem;
      margin-bottom: 1.5rem;
      border: 1px solid var(--border-color);
      transition: var(--transition);
    }
    
    .filters-section:hover {
      box-shadow: var(--shadow-sm);
    }
    
    .filters-title {
      font-weight: 600;
      margin-bottom: 1.25rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid var(--border-color);
      color: var(--text-primary);
      display: flex;
      align-items: center;
    }
    
    .filters-icon {
      width: 28px;
      height: 28px;
      border-radius: 6px;
      background-color: var(--primary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 0.75rem;
    }
    
    .form-label {
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: var(--text-primary);
    }
    
    .form-control, .form-select {
      border-radius: 8px;
      padding: 0.65rem 1rem;
      border: 1px solid var(--border-color);
      background-color: var(--surface);
      transition: var(--transition);
    }
    
    .form-control:focus, .form-select:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.25rem var(--primary-light);
    }
    
    /* Tabs */
    .nav-tabs {
      border-bottom: 1px solid var(--border-color);
      margin-bottom: 1.5rem;
    }
    
    .nav-tabs .nav-link {
      border: none;
      color: var(--text-secondary);
      padding: 1rem 1.5rem;
      font-weight: 500;
      position: relative;
      transition: var(--transition);
    }
    
    .nav-tabs .nav-link:hover {
      color: var(--primary);
      background-color: var(--primary-light);
      border-color: transparent;
    }
    
    .nav-tabs .nav-link.active {
      color: var(--primary);
      background-color: transparent;
      border-color: transparent;
    }
    
    .nav-tabs .nav-link.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      right: 0;
      height: 2px;
      background-color: var(--primary);
    }
    
    /* Charts */
    .chart-container {
      position: relative;
      height: 300px;
      width: 100%;
      margin-bottom: 1.5rem;
    }
    
    /* Table Styles */
    .metrics-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      background-color: var(--surface);
      border-radius: var(--border-radius);
      overflow: hidden;
      box-shadow: var(--shadow-sm);
    }
    
    .metrics-table th {
      background-color: var(--light);
      color: var(--text-primary);
      font-weight: 600;
      text-align: left;
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
    }
    
    .metrics-table td {
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
      vertical-align: middle;
    }
    
    .metrics-table tr:last-child td {
      border-bottom: none;
    }
    
    .metrics-table tr:hover {
      background-color: var(--primary-light);
    }
    
    .metrics-table-container {
      overflow-x: auto;
      margin-bottom: 1.5rem;
    }
    
    /* Goal Indicators */
    .goal-indicator {
      display: inline-flex;
      align-items: center;
      margin-left: 0.5rem;
    }
    
    .goal-indicator i {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 0.7rem;
    }
    
    .goal-success i {
      background-color: var(--success);
    }
    
    .goal-warning i {
      background-color: var(--warning);
    }
    
    /* Team Member */
    .team-member {
      display: flex;
      align-items: center;
    }
    
    .team-member-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background: linear-gradient(to bottom right, var(--primary), var(--info));
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 0.8rem;
      margin-right: 0.75rem;
    }
    
    /* Export Buttons */
    .export-controls {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
    }
    
    /* Button Styles */
    .btn {
      border-radius: 8px;
      padding: 0.65rem 1.25rem;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-primary:hover {
      background-color: var(--secondary);
      border-color: var(--secondary);
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-outline-primary {
      color: var(--primary);
      border-color: var(--primary);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary);
      color: white;
      box-shadow: var(--shadow-md);
      transform: translateY(-2px);
    }
    
    .btn-icon {
      padding: 0.5rem;
      width: 42px;
      height: 42px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      font-size: 1.1rem;
    }
    
    /* Pagination */
    .pagination-controls {
      display: flex;
      justify-content: center;
      gap: 0.5rem;
    }
    
    .pagination-btn {
      width: 36px;
      height: 36px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      background-color: var(--surface);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      color: var(--text-primary);
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .pagination-btn:hover {
      background-color: var(--primary-light);
      color: var(--primary);
      transform: translateY(-2px);
      box-shadow: var(--shadow-sm);
    }
    
    .pagination-btn.active {
      background-color: var(--primary);
      color: white;
      border-color: var(--primary);
    }
    
    .pagination-btn.disabled {
      opacity: 0.5;
      pointer-events: none;
    }
    
    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(4px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: all 0.3s ease;
    }
    
    .spinner {
      width: 48px;
      height: 48px;
      border: 3px solid rgba(67, 97, 238, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    /* Empty State */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 3rem;
      text-align: center;
      background-color: var(--surface);
      border-radius: var(--border-radius);
    }
    
    .empty-state-icon {
      font-size: 3.5rem;
      color: var(--text-secondary);
      opacity: 0.3;
      margin-bottom: 1.5rem;
    }
    
    .empty-state-title {
      font-weight: 600;
      margin-bottom: 0.75rem;
      color: var(--text-primary);
    }
    
    .empty-state-message {
      color: var(--text-secondary);
      max-width: 400px;
      margin: 0 auto 1.5rem;
    }
    
    /* Notification */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      max-width: 350px;
      min-width: 300px;
      background-color: white;
      border-radius: 8px;
      box-shadow: var(--shadow-md);
      padding: 1rem;
      z-index: 9998;
      transform: translateX(120%);
      transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
      border-left: 4px solid var(--primary);
      display: flex;
      align-items: flex-start;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification-icon {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      margin-right: 0.75rem;
      font-size: 1.25rem;
    }
    
    .notification-content {
      flex-grow: 1;
    }
    
    .notification-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .notification-message {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }
    
    .notification-close {
      border: none;
      background: none;
      color: var(--text-secondary);
      opacity: 0.5;
      transition: var(--transition);
      padding: 0;
      margin-left: 0.75rem;
      font-size: 1.25rem;
      line-height: 1;
      cursor: pointer;
    }
    
    .notification-close:hover {
      opacity: 1;
    }
    
    .notification.success {
      border-color: var(--success);
    }
    
    .notification.success .notification-icon {
      color: var(--success);
    }
    
    .notification.error {
      border-color: var(--danger);
    }
    
    .notification.error .notification-icon {
      color: var(--danger);
    }
    
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .fade-in {
      animation: fadeIn 0.3s ease forwards;
    }
    
    /* Responsive Adjustments */
    @media (max-width: 768px) {
      .app-container {
        padding: 1rem;
      }
      
      .card-header, .card-body, .filters-section {
        padding: 1rem;
      }
      
      .nav-tabs .nav-link {
        padding: 0.75rem;
        font-size: 0.85rem;
      }
      
      .chart-container {
        height: 250px;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner"></div>
  </div>
  
  <div class="app-container">
    <div class="content-card fade-in">
      <div class="card-header">
        <h5 class="card-title">
          <div class="card-title-icon">
            <i class="fas fa-file-alt"></i>
          </div>
          Metrics Reports
        </h5>
        
        <div>
          <button type="button" id="back-button" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left me-2"></i> Back
          </button>
        </div>
      </div>
      
      <div class="card-body">
        <!-- Filters Section -->
        <div class="filters-section">
          <h6 class="filters-title">
            <span class="filters-icon"><i class="fas fa-filter"></i></span>
            Report Filters
          </h6>
          
          <div class="row g-3">
            <div class="col-md-4">
              <label for="report-type" class="form-label">Report Type</label>
              <select class="form-select" id="report-type">
                <option value="team">Team Metrics</option>
                <option value="individual">Individual Metrics</option>
                <option value="comparison">Team vs Goal Comparison</option>
              </select>
            </div>
            
            <div class="col-md-4">
              <label for="time-period" class="form-label">Time Period</label>
              <select class="form-select" id="time-period">
                <option value="daily">Daily</option>
                <option value="weekly" selected>Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="quarterly">Quarterly</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
            
            <div class="col-md-4">
              <label for="metric-type" class="form-label">Metric Type</label>
              <select class="form-select" id="metric-type">
                <option value="all" selected>All Metrics</option>
                <option value="calls">Call Metrics</option>
                <option value="time">Time Metrics</option>
                <option value="performance">Performance Metrics</option>
              </select>
            </div>
            
            <div class="col-md-4" id="team-member-filter" style="display: none;">
              <label for="team-member" class="form-label">Team Member</label>
              <select class="form-select" id="team-member">
                <option value="">All Team Members</option>
                <!-- Team members will be populated here -->
              </select>
            </div>
            
            <div class="col-md-8" id="date-range" style="display: none;">
              <div class="row g-2">
                <div class="col-6">
                  <label for="start-date" class="form-label">Start Date</label>
                  <input type="text" class="form-control" id="start-date" placeholder="Select start date">
                </div>
                <div class="col-6">
                  <label for="end-date" class="form-label">End Date</label>
                  <input type="text" class="form-control" id="end-date" placeholder="Select end date">
                </div>
              </div>
            </div>
            
            <div class="col-12 text-end">
              <button type="button" class="btn btn-outline-primary me-2" id="reset-filters">Reset</button>
              <button type="button" class="btn btn-primary" id="apply-filters">
                <i class="fas fa-search me-2"></i> Generate Report
              </button>
            </div>
          </div>
        </div>
        
        <!-- Export Controls -->
        <div class="export-controls">
          <button class="btn btn-outline-primary" id="export-csv">
            <i class="fas fa-file-csv me-2"></i> Export CSV
          </button>
          <button class="btn btn-outline-primary" id="export-excel">
            <i class="fas fa-file-excel me-2"></i> Export Excel
          </button>
          <button class="btn btn-outline-primary" id="export-pdf">
            <i class="fas fa-file-pdf me-2"></i> Export PDF
          </button>
          <button class="btn btn-outline-primary ms-auto" id="print-report">
            <i class="fas fa-print me-2"></i> Print
          </button>
        </div>
        
        <!-- Report Content -->
        <div id="report-content">
          <!-- Tabs for different views -->
          <ul class="nav nav-tabs" id="report-tabs" role="tablist">
            <li class="nav-item" role="presentation">
              <button class="nav-link active" id="chart-tab" data-bs-toggle="tab" data-bs-target="#chart-view" type="button" role="tab">
                <i class="fas fa-chart-line me-2"></i> Charts
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button class="nav-link" id="table-tab" data-bs-toggle="tab" data-bs-target="#table-view" type="button" role="tab">
                <i class="fas fa-table me-2"></i> Table
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button class="nav-link" id="summary-tab" data-bs-toggle="tab" data-bs-target="#summary-view" type="button" role="tab">
                <i class="fas fa-clipboard-list me-2"></i> Summary
              </button>
            </li>
          </ul>
          
          <div class="tab-content">
            <!-- Charts View -->
            <div class="tab-pane fade show active" id="chart-view" role="tabpanel">
              <div class="chart-type-selector mb-3">
                <div class="btn-group">
                  <button class="btn btn-outline-primary active" data-chart-type="line">Line</button>
                  <button class="btn btn-outline-primary" data-chart-type="bar">Bar</button>
                  <button class="btn btn-outline-primary" data-chart-type="radar">Radar</button>
                </div>
              </div>
              
              <!-- Charts will be dynamically inserted here -->
              <div class="chart-container" id="answer-rate-chart-container">
                <canvas id="answer-rate-chart"></canvas>
              </div>
              
              <div class="chart-container" id="talk-time-chart-container">
                <canvas id="talk-time-chart"></canvas>
              </div>
              
              <div class="chart-container" id="queue-chart-container">
                <canvas id="queue-chart"></canvas>
              </div>
              
              <div class="chart-container" id="interacting-time-chart-container">
                <canvas id="interacting-time-chart"></canvas>
              </div>
            </div>
            
            <!-- Table View -->
            <div class="tab-pane fade" id="table-view" role="tabpanel">
              <div class="metrics-table-container">
                <table class="metrics-table">
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>Calls Offered</th>
                      <th>Calls Accepted</th>
                      <th>Answer Rate</th>
                      <th>Avg. Talk Time</th>
                      <th>ACW %</th>
                      <th>On Queue %</th>
                      <th>Off Queue %</th>
                      <th>Interacting Time</th>
                    </tr>
                  </thead>
                  <tbody id="metrics-table-body">
                    <!-- Table data will be populated here -->
                  </tbody>
                </table>
              </div>
              
              <!-- Pagination -->
              <div class="pagination-controls mt-3" id="pagination-controls">
                <!-- Pagination will be populated here -->
              </div>
            </div>
            
            <!-- Summary View -->
            <div class="tab-pane fade" id="summary-view" role="tabpanel">
              <div class="row g-3">
                <div class="col-md-6">
                  <div class="card">
                    <div class="card-body">
                      <h6 class="card-title">Performance Summary</h6>
                      <table class="table table-sm">
                        <tbody id="summary-stats">
                          <!-- Summary stats will be populated here -->
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
                
                <div class="col-md-6">
                  <div class="card">
                    <div class="card-body">
                      <h6 class="card-title">Goal Achievement</h6>
                      <div id="goal-achievement-chart-container" style="height: 200px;">
                        <canvas id="goal-achievement-chart"></canvas>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div class="col-12">
                  <div class="card">
                    <div class="card-body">
                      <h6 class="card-title">Trends & Observations</h6>
                      <div id="trends-observations">
                        <!-- Trends and observations will be populated here -->
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Empty State (initially hidden) -->
          <div class="empty-state" id="empty-state" style="display: none;">
            <div class="empty-state-icon">
              <i class="fas fa-chart-line"></i>
            </div>
            <h3 class="empty-state-title">No Metrics Data Found</h3>
            <p class="empty-state-message">There's no metrics data available for the selected filters. Try changing your filter criteria or creating new metrics entries.</p>
            <button class="btn btn-primary" id="empty-create-btn">
              <i class="fas fa-plus me-2"></i> Enter New Metrics
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let reportData = [];
    let currentPage = 1;
    let itemsPerPage = 10;
    let totalPages = 1;
    let startDatePicker = null;
    let endDatePicker = null;
    let chartInstances = {};
    let teamMembers = [];
    let currentReportType = 'team';
    let currentTimePeriod = 'weekly';
    let currentMetricType = 'all';
    
    // Current date and user info for logging
    const currentDate = new Date("2025-03-28 06:34:31");
    const currentUser = "amourjanay";
    
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize date pickers
      initializeDatePickers();
      
      // Setup event listeners
      setupEventListeners();
      
      // Load team members for filter
      loadTeamMembers();
      
      // Generate default report
      generateReport();
    });
    
    function initializeDatePickers() {
      // Calculate default date range (last 7 days)
      const endDate = new Date();
      const startDate = new Date();
      startDate.setDate(endDate.getDate() - 7);
      
      // Initialize flatpickr for date range
      startDatePicker = flatpickr("#start-date", {
        dateFormat: "Y-m-d",
        defaultDate: startDate,
        maxDate: endDate,
        onChange: function(selectedDates, dateStr) {
          endDatePicker.config.minDate = dateStr;
        }
      });
      
      endDatePicker = flatpickr("#end-date", {
        dateFormat: "Y-m-d",
        defaultDate: endDate,
        maxDate: "today",
        minDate: startDate
      });
    }
    
    function setupEventListeners() {
      // Back button
      document.getElementById('back-button').addEventListener('click', navigateBack);
      
      // Report type change
      document.getElementById('report-type').addEventListener('change', function() {
        const reportType = this.value;
        const teamMemberFilter = document.getElementById('team-member-filter');
        
        // Show/hide team member filter based on report type
        if (reportType === 'individual') {
          teamMemberFilter.style.display = 'block';
        } else {
          teamMemberFilter.style.display = 'none';
        }
        
        currentReportType = reportType;
      });
      
      // Time period change
      document.getElementById('time-period').addEventListener('change', function() {
        const timePeriod = this.value;
        const dateRange = document.getElementById('date-range');
        
        // Show/hide date range based on time period
        if (timePeriod === 'custom') {
          dateRange.style.display = 'block';
        } else {
          dateRange.style.display = 'none';
        }
        
        currentTimePeriod = timePeriod;
      });
      
      // Metric type change
      document.getElementById('metric-type').addEventListener('change', function() {
        currentMetricType = this.value;
      });
      
      // Filter buttons
      document.getElementById('apply-filters').addEventListener('click', generateReport);
      document.getElementById('reset-filters').addEventListener('click', resetFilters);
      
      // Export buttons
      document.getElementById('export-csv').addEventListener('click', exportCsv);
      document.getElementById('export-excel').addEventListener('click', exportExcel);
      document.getElementById('export-pdf').addEventListener('click', exportPdf);
      document.getElementById('print-report').addEventListener('click', printReport);
      
      // Empty state button
      document.getElementById('empty-create-btn').addEventListener('click', createNewMetrics);
      
      // Chart type selector
      document.querySelectorAll('.chart-type-selector .btn').forEach(btn => {
        btn.addEventListener('click', function() {
          // Update active state
          document.querySelectorAll('.chart-type-selector .btn').forEach(b => {
            b.classList.remove('active');
          });
          this.classList.add('active');
          
          // Change chart type
          const chartType = this.getAttribute('data-chart-type');
          updateChartType(chartType);
        });
      });
    }
    
    function loadTeamMembers() {
      showLoading();
      
      google.script.run
        .withSuccessHandler(handleTeamMembersLoaded)
        .withFailureHandler(handleError)
        .getActiveTeamMembers();
    }
    
    function handleTeamMembersLoaded(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to load team members', 'error');
        return;
      }
      
      teamMembers = result.data || [];
      populateTeamMemberDropdown(teamMembers);
    }
    
    function populateTeamMemberDropdown(members) {
      const select = document.getElementById('team-member');
      
      // Clear existing options (except the first one)
      while (select.options.length > 1) {
        select.remove(1);
      }
      
      // Add team members to dropdown
      members.forEach(member => {
        const option = document.createElement('option');
        const fullName = `${member.firstName || ''} ${member.lastName || ''}`.trim() || member.email;
        option.value = member.id;
        option.textContent = fullName;
        select.appendChild(option);
      });
    }
    
    function resetFilters() {
      // Reset filters to default values
      document.getElementById('report-type').value = 'team';
      document.getElementById('time-period').value = 'weekly';
      document.getElementById('metric-type').value = 'all';
      document.getElementById('team-member').value = '';
      
      // Reset current values
      currentReportType = 'team';
      currentTimePeriod = 'weekly';
      currentMetricType = 'all';
      
      // Hide conditional filters
      document.getElementById('team-member-filter').style.display = 'none';
      document.getElementById('date-range').style.display = 'none';
      
      // Reset date pickers
      const endDate = new Date();
      const startDate = new Date();
      startDate.setDate(endDate.getDate() - 7);
      
      startDatePicker.setDate(startDate);
      endDatePicker.setDate(endDate);
    }
    
    function generateReport() {
      showLoading();
      
      // Get filter values
      const reportType = document.getElementById('report-type').value;
      const timePeriod = document.getElementById('time-period').value;
      const metricType = document.getElementById('metric-type').value;
      const teamMemberId = document.getElementById('team-member').value;
      
      // Get date range for custom time period
      let startDate = null;
      let endDate = null;
      
      if (timePeriod === 'custom') {
        startDate = formatDateForApi(startDatePicker.selectedDates[0]);
        endDate = formatDateForApi(endDatePicker.selectedDates[0]);
        
        if (!startDate || !endDate) {
          hideLoading();
          showNotification('Error', 'Please select both start and end dates', 'error');
          return;
        }
      }
      
      // Prepare request data
      const requestData = {
        reportType: reportType,
        timePeriod: timePeriod,
        metricType: metricType,
        teamMemberId: teamMemberId || null,
        startDate: startDate,
        endDate: endDate,
        requestedBy: currentUser
      };
      
      google.script.run
        .withSuccessHandler(handleReportData)
        .withFailureHandler(handleError)
        .generateMetricsReport(requestData);
    }
    
    function handleReportData(result) {
      hideLoading();
      
      if (!result || !result.success) {
        showNotification('Error', result ? result.message : 'Failed to generate report', 'error');
        return;
      }
      
      reportData = result.data || [];
      
      if (reportData.length === 0) {
        showEmptyState();
        return;
      }
      
      hideEmptyState();
      
      // Update view based on data
      updateTableView(reportData);
      updateChartView(reportData);
      updateSummaryView(reportData);
    }
    
    function updateTableView(data) {
      // Calculate pagination
      totalPages = Math.ceil(data.length / itemsPerPage);
      
      // Reset to first page when new data is loaded
      currentPage = 1;
      
      // Update table with first page of data
      renderTablePage(currentPage);
      
      // Update pagination controls
      renderPagination();
    }
    
    function renderTablePage(page) {
      const tableBody = document.getElementById('metrics-table-body');
      tableBody.innerHTML = '';
      
      // Calculate start and end indices
      const startIndex = (page - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, reportData.length);
      
      // Get current page data
      const pageData = reportData.slice(startIndex, endIndex);
      
      // Render table rows
      pageData.forEach(record => {
        const row = document.createElement('tr');
        
        // Format date
        const date = formatDate(record.date);
        
        // Create cells
        row.innerHTML = `
          <td>${date}</td>
          <td>${record.callsOffered}</td>
          <td>${record.callsAccepted}</td>
          <td>
            ${record.answerRate.toFixed(2)}%
            <span class="goal-indicator ${record.answerRate >= 95 ? 'goal-success' : 'goal-warning'}">
              <i class="fas ${record.answerRate >= 95 ? 'fa-check' : 'fa-exclamation'}"></i>
            </span>
          </td>
          <td>
            ${record.averageTalkTime.toFixed(2)} min
            <span class="goal-indicator ${record.averageTalkTime >= 15 && record.averageTalkTime <= 20 ? 'goal-success' : 'goal-warning'}">
              <i class="fas ${record.averageTalkTime >= 15 && record.averageTalkTime <= 20 ? 'fa-check' : 'fa-exclamation'}"></i>
            </span>
          </td>
          <td>
            ${record.acwPercentage.toFixed(2)}%
            <span class="goal-indicator ${record.acwPercentage <= 5 ? 'goal-success' : 'goal-warning'}">
              <i class="fas ${record.acwPercentage <= 5 ? 'fa-check' : 'fa-exclamation'}"></i>
            </span>
          </td>
          <td>
            ${record.onQueuePercentage.toFixed(2)}%
            <span class="goal-indicator ${record.onQueuePercentage >= 65 ? 'goal-success' : 'goal-warning'}">
              <i class="fas ${record.onQueuePercentage >= 65 ? 'fa-check' : 'fa-exclamation'}"></i>
            </span>
          </td>
          <td>${record.offQueuePercentage.toFixed(2)}%</td>
          <td>
            ${record.interactingTime.toFixed(2)} hrs
            <span class="goal-indicator ${record.interactingTime >= 4 && record.interactingTime <= 6 ? 'goal-success' : 'goal-warning'}">
              <i class="fas ${record.interactingTime >= 4 && record.interactingTime <= 6 ? 'fa-check' : 'fa-exclamation'}"></i>
            </span>
          </td>
        `;
        
        tableBody.appendChild(row);
      });
    }
    
    function renderPagination() {
      const paginationControls = document.getElementById('pagination-controls');
      paginationControls.innerHTML = '';
      
      if (totalPages <= 1) {
        return;
      }
      
      // Previous button
      const prevButton = createPaginationButton('<i class="fas fa-chevron-left"></i>', currentPage > 1);
      prevButton.addEventListener('click', () => goToPage(currentPage - 1));
      paginationControls.appendChild(prevButton);
      
      // Page buttons
      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(totalPages, startPage + 4);
      
      if (endPage - startPage < 4) {
        startPage = Math.max(1, endPage - 4);
      }
      
      for (let i = startPage; i <= endPage; i++) {
        const pageButton = createPaginationButton(i, true, i === currentPage);
        pageButton.addEventListener('click', () => goToPage(i));
        paginationControls.appendChild(pageButton);
      }
      
      // Next button
      const nextButton = createPaginationButton('<i class="fas fa-chevron-right"></i>', currentPage < totalPages);
      nextButton.addEventListener('click', () => goToPage(currentPage + 1));
      paginationControls.appendChild(nextButton);
    }
    
    function createPaginationButton(content, enabled, isActive = false) {
      const button = document.createElement('button');
      button.className = 'pagination-btn';
      button.innerHTML = content;
      
      if (!enabled) {
        button.classList.add('disabled');
      }
      
      if (isActive) {
        button.classList.add('active');
      }
      
      return button;
    }
    
    function goToPage(page) {
      if (page < 1 || page > totalPages || page === currentPage) {
        return;
      }
      
      currentPage = page;
      renderTablePage(currentPage);
      renderPagination();
    }
    
    function updateChartView(data) {
      // Prepare data for charts
      const dates = data.map(record => formatDate(record.date));
      const answerRates = data.map(record => record.answerRate);
      const talkTimes = data.map(record => record.averageTalkTime);
      const onQueuePercentages = data.map(record => record.onQueuePercentage);
      const offQueuePercentages = data.map(record => record.offQueuePercentage);
      const interactingTimes = data.map(record => record.interactingTime);
      
      // Clear existing charts
      destroyCharts();
      
      // Get chart type from active button
      const chartTypeBtn = document.querySelector('.chart-type-selector .btn.active');
      const chartType = chartTypeBtn ? chartTypeBtn.getAttribute('data-chart-type') : 'line';
      
      // Create charts
      createAnswerRateChart(dates, answerRates, chartType);
      createTalkTimeChart(dates, talkTimes, chartType);
      createQueueChart(dates, onQueuePercentages, offQueuePercentages, chartType);
      createInteractingTimeChart(dates, interactingTimes, chartType);
    }
    
    function createAnswerRateChart(labels, data, type) {
      const ctx = document.getElementById('answer-rate-chart').getContext('2d');
      
      chartInstances.answerRate = new Chart(ctx, {
        type: type,
        data: {
          labels: labels,
          datasets: [{
            label: 'Answer Rate (%)',
            data: data,
            backgroundColor: 'rgba(67, 97, 238, 0.2)',
            borderColor: 'rgba(67, 97, 238, 1)',
            borderWidth: 2,
            pointBackgroundColor: 'rgba(67, 97, 238, 1)',
            pointBorderColor: '#fff',
            pointRadius: 4,
            tension: 0.3
          }, {
            label: 'Goal (95%)',
            data: Array(labels.length).fill(95),
            backgroundColor: 'rgba(0, 0, 0, 0)',
            borderColor: 'rgba(247, 37, 133, 0.7)',
            borderWidth: 2,
            borderDash: [5, 5],
            pointRadius: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'Answer Rate vs. Goal (95%)',
              font: {
                size: 16,
                weight: 'bold'
              }
            },
            legend: {
              position: 'bottom'
            },
            tooltip: {
              mode: 'index',
              intersect: false
            }
          },
          scales: {
            y: {
              beginAtZero: false,
              min: Math.max(0, Math.min(...data) - 10),
              max: Math.max(100, Math.max(...data) + 5),
              title: {
                display: true,
                text: 'Percentage (%)'
              }
            }
          }
        }
      });
    }
    
    function createTalkTimeChart(labels, data, type) {
      const ctx = document.getElementById('talk-time-chart').getContext('2d');
      
      chartInstances.talkTime = new Chart(ctx, {
        type: type,
        data: {
          labels: labels,
          datasets: [{
            label: 'Average Talk Time (min)',
            data: data,
            backgroundColor: 'rgba(76, 201, 240, 0.2)',
            borderColor: 'rgba(76, 201, 240, 1)',
            borderWidth: 2,
            pointBackgroundColor: 'rgba(76, 201, 240, 1)',
            pointBorderColor: '#fff',
            pointRadius: 4,
            tension: 0.3
          }, {
            label: 'Min Goal (15 min)',
            data: Array(labels.length).fill(15),
            backgroundColor: 'rgba(0, 0, 0, 0)',
            borderColor: 'rgba(247, 37, 133, 0.7)',
            borderWidth: 2,
            borderDash: [5, 5],
            pointRadius: 0
          }, {
            label: 'Max Goal (20 min)',
            data: Array(labels.length).fill(20),
            backgroundColor: 'rgba(0, 0, 0, 0)',
            borderColor: 'rgba(247, 37, 133, 0.7)',
            borderWidth: 2,
            borderDash: [5, 5],
            pointRadius: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'Average Talk Time vs. Goal (15-20 min)',
              font: {
                size: 16,
                weight: 'bold'
              }
            },
            legend: {
              position: 'bottom'
            },
            tooltip: {
              mode: 'index',
              intersect: false
            }
          },
          scales: {
            y: {
              beginAtZero: false,
              min: Math.max(0, Math.min(...data) - 5),
              max: Math.max(25, Math.max(...data) + 5),
              title: {
                display: true,
                text: 'Minutes'
              }
            }
          }
        }
      });
    }
    
    function createQueueChart(labels, onQueueData, offQueueData, type) {
      const ctx = document.getElementById('queue-chart').getContext('2d');
      
      chartInstances.queue = new Chart(ctx, {
        type: type,
        data: {
          labels: labels,
          datasets: [{
            label: 'On Queue (%)',
            data: onQueueData,
            backgroundColor: 'rgba(76, 201, 240, 0.2)',
            borderColor: 'rgba(76, 201, 240, 1)',
            borderWidth: 2,
            pointBackgroundColor: 'rgba(76, 201, 240, 1)',
            pointBorderColor: '#fff',
            pointRadius: 4,
            tension: 0.3
          }, {
            label: 'Off Queue (%)',
            data: offQueueData,
            backgroundColor: 'rgba(247, 37, 133, 0.2)',
            borderColor: 'rgba(247, 37, 133, 1)',
            borderWidth: 2,
            pointBackgroundColor: 'rgba(247, 37, 133, 1)',
            pointBorderColor: '#fff',
            pointRadius: 4,
            tension: 0.3
          }, {
            label: 'Goal (65%)',
            data: Array(labels.length).fill(65),
            backgroundColor: 'rgba(0, 0, 0, 0)',
            borderColor: 'rgba(63, 55, 201, 0.7)',
            borderWidth: 2,
            borderDash: [5, 5],
            pointRadius: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'Queue Metrics vs. Goal (On Queue ≥ 65%)',
              font: {
                size: 16,
                weight: 'bold'
              }
            },
            legend: {
              position: 'bottom'
            },
            tooltip: {
              mode: 'index',
              intersect: false
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              max: 100,
              title: {
                display: true,
                text: 'Percentage (%)'
              }
            }
          }
        }
      });
    }
    
    function createInteractingTimeChart(labels, data, type) {
      const ctx = document.getElementById('interacting-time-chart').getContext('2d');
      
      chartInstances.interactingTime = new Chart(ctx, {
        type: type,
        data: {
          labels: labels,
          datasets: [{
            label: 'Interacting Time (hrs)',
            data: data,
            backgroundColor: 'rgba(63, 55, 201, 0.2)',
            borderColor: 'rgba(63, 55, 201, 1)',
            borderWidth: 2,
            pointBackgroundColor: 'rgba(63, 55, 201, 1)',
            pointBorderColor: '#fff',
            pointRadius: 4,
            tension: 0.3
          }, {
            label: 'Min Goal (4 hrs)',
            data: Array(labels.length).fill(4),
            backgroundColor: 'rgba(0, 0, 0, 0)',
            borderColor: 'rgba(247, 37, 133, 0.7)',
            borderWidth: 2,
            borderDash: [5, 5],
            pointRadius: 0
          }, {
            label: 'Max Goal (6 hrs)',
            data: Array(labels.length).fill(6),
            backgroundColor: 'rgba(0, 0, 0, 0)',
            borderColor: 'rgba(247, 37, 133, 0.7)',
            borderWidth: 2,
            borderDash: [5, 5],
            pointRadius: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'Interacting Time vs. Goal (4-6 hrs)',
              font: {
                size: 16,
                weight: 'bold'
              }
            },
            legend: {
              position: 'bottom'
            },
            tooltip: {
              mode: 'index',
              intersect: false
            }
          },
          scales: {
            y: {
              beginAtZero: false,
              min: Math.max(0, Math.min(...data) - 1),
              max: Math.max(8, Math.max(...data) + 1),
              title: {
                display: true,
                text: 'Hours'
              }
            }
          }
        }
      });
    }
    
    function updateSummaryView(data) {
      // Calculate summary statistics
      const summaryStats = calculateSummaryStats(data);
      
      // Update summary stats table
      const summaryTable = document.getElementById('summary-stats');
      summaryTable.innerHTML = `
        <tr>
          <th>Average Answer Rate:</th>
          <td>${summaryStats.avgAnswerRate.toFixed(2)}%</td>
          <td>
            <span class="goal-indicator ${summaryStats.avgAnswerRate >= 95 ? 'goal-success' : 'goal-warning'}">
              <i class="fas ${summaryStats.avgAnswerRate >= 95 ? 'fa-check' : 'fa-exclamation'}"></i>
            </span>
            Goal: 95%+
          </td>
        </tr>
        <tr>
          <th>Average Talk Time:</th>
          <td>${summaryStats.avgTalkTime.toFixed(2)} min</td>
          <td>
            <span class="goal-indicator ${summaryStats.avgTalkTime >= 15 && summaryStats.avgTalkTime <= 20 ? 'goal-success' : 'goal-warning'}">
              <i class="fas ${summaryStats.avgTalkTime >= 15 && summaryStats.avgTalkTime <= 20 ? 'fa-check' : 'fa-exclamation'}"></i>
            </span>
            Goal: 15-20 min
          </td>
        </tr>
        <tr>
          <th>Average ACW:</th>
          <td>${summaryStats.avgAcw.toFixed(2)}%</td>
          <td>
            <span class="goal-indicator ${summaryStats.avgAcw <= 5 ? 'goal-success' : 'goal-warning'}">
              <i class="fas ${summaryStats.avgAcw <= 5 ? 'fa-check' : 'fa-exclamation'}"></i>
            </span>
            Goal: ≤ 5%
          </td>
        </tr>
        <tr>
          <th>Average On Queue:</th>
          <td>${summaryStats.avgOnQueue.toFixed(2)}%</td>
          <td>
            <span class="goal-indicator ${summaryStats.avgOnQueue >= 65 ? 'goal-success' : 'goal-warning'}">
              <i class="fas ${summaryStats.avgOnQueue >= 65 ? 'fa-check' : 'fa-exclamation'}"></i>
            </span>
            Goal: 65%+
          </td>
        </tr>
        <tr>
          <th>Average Interacting Time:</th>
          <td>${summaryStats.avgInteractingTime.toFixed(2)} hrs</td>
          <td>
            <span class="goal-indicator ${summaryStats.avgInteractingTime >= 4 && summaryStats.avgInteractingTime <= 6 ? 'goal-success' : 'goal-warning'}">
              <i class="fas ${summaryStats.avgInteractingTime >= 4 && summaryStats.avgInteractingTime <= 6 ? 'fa-check' : 'fa-exclamation'}"></i>
            </span>
            Goal: 4-6 hrs
          </td>
        </tr>
        <tr>
          <th>Total Calls Offered:</th>
          <td>${summaryStats.totalCallsOffered}</td>
          <td></td>
        </tr>
        <tr>
          <th>Total Calls Accepted:</th>
          <td>${summaryStats.totalCallsAccepted}</td>
          <td></td>
        </tr>
      `;
      
      // Create goal achievement chart
      createGoalAchievementChart(summaryStats);
      
      // Update trends and observations
      updateTrendsObservations(data, summaryStats);
    }
    
    function calculateSummaryStats(data) {
      // Initialize summary stats
      const stats = {
        totalCallsOffered: 0,
        totalCallsAccepted: 0,
        avgAnswerRate: 0,
        avgTalkTime: 0,
        avgAcw: 0,
        avgOnQueue: 0,
        avgOffQueue: 0,
        avgInteractingTime: 0
      };
      
      if (data.length === 0) return stats;
      
      // Calculate totals
      data.forEach(record => {
        stats.totalCallsOffered += record.callsOffered;
        stats.totalCallsAccepted += record.callsAccepted;
        stats.avgAnswerRate += record.answerRate;
        stats.avgTalkTime += record.averageTalkTime;
        stats.avgAcw += record.acwPercentage;
        stats.avgOnQueue += record.onQueuePercentage;
        stats.avgOffQueue += record.offQueuePercentage;
        stats.avgInteractingTime += record.interactingTime;
      });
      
      // Calculate averages
      const count = data.length;
      stats.avgAnswerRate /= count;
      stats.avgTalkTime /= count;
      stats.avgAcw /= count;
      stats.avgOnQueue /= count;
      stats.avgOffQueue /= count;
      stats.avgInteractingTime /= count;
      
      return stats;
    }
    
    function createGoalAchievementChart(stats) {
      // Calculate goal achievements (as percentage)
      const answerRateAchievement = Math.min(stats.avgAnswerRate / 95 * 100, 100);
      
      // Talk time is special - it's good if it's between 15-20
      let talkTimeAchievement = 100;
      if (stats.avgTalkTime < 15) {
        talkTimeAchievement = stats.avgTalkTime / 15 * 100;
      } else if (stats.avgTalkTime > 20) {
        talkTimeAchievement = 100 - ((stats.avgTalkTime - 20) / 5 * 100);
      }
      talkTimeAchievement = Math.max(0, Math.min(talkTimeAchievement, 100));
      
      // ACW - lower is better, goal is 5% or less
      const acwAchievement = stats.avgAcw <= 5 ? 100 : Math.max(0, 100 - ((stats.avgAcw - 5) / 5 * 100));
      
      // On Queue - higher is better, goal is 65% or more
      const onQueueAchievement = stats.avgOnQueue >= 65 ? 100 : Math.max(0, stats.avgOnQueue / 65 * 100);
      
      // Interacting time - goal is 4-6 hours
      let interactingTimeAchievement = 100;
      if (stats.avgInteractingTime < 4) {
        interactingTimeAchievement = stats.avgInteractingTime / 4 * 100;
      } else if (stats.avgInteractingTime > 6) {
        interactingTimeAchievement = 100 - ((stats.avgInteractingTime - 6) / 2 * 100);
      }
      interactingTimeAchievement = Math.max(0, Math.min(interactingTimeAchievement, 100));
      
      // Create chart
      const ctx = document.getElementById('goal-achievement-chart').getContext('2d');
      
      if (chartInstances.goalAchievement) {
        chartInstances.goalAchievement.destroy();
      }
      
      chartInstances.goalAchievement = new Chart(ctx, {
        type: 'radar',
        data: {
          labels: ['Answer Rate', 'Talk Time', 'ACW', 'On Queue', 'Interacting Time'],
          datasets: [{
            label: 'Goal Achievement (%)',
            data: [
              answerRateAchievement,
              talkTimeAchievement,
              acwAchievement,
              onQueueAchievement,
              interactingTimeAchievement
            ],
            backgroundColor: 'rgba(67, 97, 238, 0.2)',
            borderColor: 'rgba(67, 97, 238, 1)',
            borderWidth: 2,
            pointBackgroundColor: 'rgba(67, 97, 238, 1)',
            pointBorderColor: '#fff',
            pointRadius: 4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          elements: {
            line: {
              tension: 0.3
            }
          },
          scales: {
            r: {
              angleLines: {
                display: true
              },
              suggestedMin: 0,
              suggestedMax: 100
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  return `Achievement: ${context.raw.toFixed(1)}%`;
                }
              }
            }
          }
        }
      });
    }
    
    function updateTrendsObservations(data, stats) {
      const trendsElement = document.getElementById('trends-observations');
      
      // Need at least 2 data points to analyze trends
      if (data.length < 2) {
        trendsElement.innerHTML = '<p>Not enough data to analyze trends. Please select a larger date range.</p>';
        return;
      }
      
      // Sort data by date
      const sortedData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date));
      
      // Calculate trends (simple linear trend)
      const answerRateTrend = calculateTrend(sortedData.map(r => r.answerRate));
      const talkTimeTrend = calculateTrend(sortedData.map(r => r.averageTalkTime));
      const acwTrend = calculateTrend(sortedData.map(r => r.acwPercentage));
      const onQueueTrend = calculateTrend(sortedData.map(r => r.onQueuePercentage));
      const interactingTimeTrend = calculateTrend(sortedData.map(r => r.interactingTime));
      
      // Generate observations
      let observations = '<h5 class="mb-3">Key Observations</h5><ul>';
      
      // Answer Rate
      if (stats.avgAnswerRate < 95) {
        observations += `<li>Answer Rate (${stats.avgAnswerRate.toFixed(1)}%) is below target (95%)</li>`;
      } else {
        observations += `<li>Answer Rate (${stats.avgAnswerRate.toFixed(1)}%) meets or exceeds target (95%)</li>`;
      }
      
      // Answer Rate Trend
      if (answerRateTrend > 0.5) {
        observations += `<li>Answer Rate is showing a positive trend (+${answerRateTrend.toFixed(1)}% per period)</li>`;
      } else if (answerRateTrend < -0.5) {
        observations += `<li>Answer Rate is showing a negative trend (${answerRateTrend.toFixed(1)}% per period)</li>`;
      }
      
      // Talk Time
      if (stats.avgTalkTime < 15) {
        observations += `<li>Average Talk Time (${stats.avgTalkTime.toFixed(1)} min) is below target range (15-20 min)</li>`;
      } else if (stats.avgTalkTime > 20) {
        observations += `<li>Average Talk Time (${stats.avgTalkTime.toFixed(1)} min) is above target range (15-20 min)</li>`;
      } else {
        observations += `<li>Average Talk Time (${stats.avgTalkTime.toFixed(1)} min) is within target range (15-20 min)</li>`;
      }
      
            // On Queue
      if (stats.avgOnQueue < 65) {
        observations += `<li>On Queue Percentage (${stats.avgOnQueue.toFixed(1)}%) is below target (65%)</li>`;
      } else {
        observations += `<li>On Queue Percentage (${stats.avgOnQueue.toFixed(1)}%) meets or exceeds target (65%)</li>`;
      }
      
      // On Queue Trend
      if (onQueueTrend > 0.5) {
        observations += `<li>On Queue Percentage is showing a positive trend (+${onQueueTrend.toFixed(1)}% per period)</li>`;
      } else if (onQueueTrend < -0.5) {
        observations += `<li>On Queue Percentage is showing a negative trend (${onQueueTrend.toFixed(1)}% per period)</li>`;
      }
      
      // Interacting Time
      if (stats.avgInteractingTime < 4) {
        observations += `<li>Interacting Time (${stats.avgInteractingTime.toFixed(1)} hrs) is below target range (4-6 hrs)</li>`;
      } else if (stats.avgInteractingTime > 6) {
        observations += `<li>Interacting Time (${stats.avgInteractingTime.toFixed(1)} hrs) is above target range (4-6 hrs)</li>`;
      } else {
        observations += `<li>Interacting Time (${stats.avgInteractingTime.toFixed(1)} hrs) is within target range (4-6 hrs)</li>`;
      }
      
      observations += '</ul>';
      
      // Add recommendations section
      observations += '<h5 class="mt-4 mb-3">Recommendations</h5><ul>';
      
      // Generate recommendations based on findings
      if (stats.avgAnswerRate < 95) {
        observations += '<li>Consider investigating factors affecting call acceptance rates</li>';
      }
      
      if (stats.avgTalkTime < 15) {
        observations += '<li>Review call handling procedures to ensure adequate customer service time</li>';
      } else if (stats.avgTalkTime > 20) {
        observations += '<li>Evaluate call efficiency and consider additional training for handling complex issues</li>';
      }
      
      if (stats.avgAcw > 5) {
        observations += '<li>Review after-call work processes to identify efficiency opportunities</li>';
      }
      
      if (stats.avgOnQueue < 65) {
        observations += '<li>Analyze off-queue activities to identify opportunities to increase queue availability</li>';
      }
      
      if (stats.avgInteractingTime < 4) {
        observations += '<li>Review scheduling and availability to increase customer interaction time</li>';
      }
      
      observations += '</ul>';
      
      trendsElement.innerHTML = observations;
    }
    
    function calculateTrend(values) {
      if (values.length < 2) return 0;
      
      // Simple linear regression for trend
      // Calculate the average change between consecutive points
      let totalChange = 0;
      
      for (let i = 1; i < values.length; i++) {
        totalChange += values[i] - values[i-1];
      }
      
      return totalChange / (values.length - 1);
    }
    
    function updateChartType(chartType) {
      if (reportData.length === 0) return;
      
      // Update chart types
      Object.values(chartInstances).forEach(chart => {
        if (!chart) return;
        
        // Save the data and options
        const data = chart.data;
        const options = chart.options;
        
        // Update chart type
        chart.config.type = chartType;
        chart.update();
      });
    }
    
    function destroyCharts() {
      // Destroy all chart instances
      Object.values(chartInstances).forEach(chart => {
        if (chart) chart.destroy();
      });
      
      // Reset chart instances
      chartInstances = {};
    }
    
    function showEmptyState() {
      document.getElementById('report-content').style.display = 'none';
      document.getElementById('empty-state').style.display = 'block';
    }
    
    function hideEmptyState() {
      document.getElementById('report-content').style.display = 'block';
      document.getElementById('empty-state').style.display = 'none';
    }
    
    function exportCsv() {
      if (reportData.length === 0) {
        showNotification('Error', 'No data to export', 'error');
        return;
      }
      
      showLoading();
      
      const exportData = {
        data: reportData,
        reportType: document.getElementById('report-type').value,
        timePeriod: document.getElementById('time-period').value,
        metricType: document.getElementById('metric-type').value,
        teamMemberId: document.getElementById('team-member').value,
        exportedBy: currentUser,
        exportedAt: new Date("2025-03-28 06:40:10").toISOString()
      };
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result && result.success) {
            showNotification('Success', 'CSV exported successfully. Check your Google Drive.', 'success');
          } else {
            showNotification('Error', result ? result.message : 'Failed to export CSV', 'error');
          }
        })
        .withFailureHandler(handleError)
        .exportMetricsToCSV(exportData);
    }
    
    function exportExcel() {
      if (reportData.length === 0) {
        showNotification('Error', 'No data to export', 'error');
        return;
      }
      
      showLoading();
      
      const exportData = {
        data: reportData,
        reportType: document.getElementById('report-type').value,
        timePeriod: document.getElementById('time-period').value,
        metricType: document.getElementById('metric-type').value,
        teamMemberId: document.getElementById('team-member').value,
        exportedBy: currentUser,
        exportedAt: new Date("2025-03-28 06:40:10").toISOString()
      };
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result && result.success) {
            showNotification('Success', 'Excel file exported successfully. Check your Google Drive.', 'success');
          } else {
            showNotification('Error', result ? result.message : 'Failed to export Excel file', 'error');
          }
        })
        .withFailureHandler(handleError)
        .exportMetricsToExcel(exportData);
    }
    
    function exportPdf() {
      if (reportData.length === 0) {
        showNotification('Error', 'No data to export', 'error');
        return;
      }
      
      showLoading();
      
      const exportData = {
        data: reportData,
        reportType: document.getElementById('report-type').value,
        timePeriod: document.getElementById('time-period').value,
        metricType: document.getElementById('metric-type').value,
        teamMemberId: document.getElementById('team-member').value,
        exportedBy: currentUser,
        exportedAt: new Date("2025-03-28 06:40:10").toISOString()
      };
      
      google.script.run
        .withSuccessHandler(function(result) {
          hideLoading();
          
          if (result && result.success) {
            showNotification('Success', 'PDF exported successfully. Check your Google Drive.', 'success');
          } else {
            showNotification('Error', result ? result.message : 'Failed to export PDF', 'error');
          }
        })
        .withFailureHandler(handleError)
        .exportMetricsToPDF(exportData);
    }
    
    function printReport() {
      window.print();
    }
    
    function createNewMetrics() {
      google.script.run.showMetricsForm();
      google.script.host.close();
    }
    
    function formatDateForApi(date) {
      if (!date) return '';
      
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      
      return `${year}-${month}-${day}`;
    }
    
    function formatDate(dateString) {
      if (!dateString) return '';
      
      const date = new Date(dateString);
      return date.toLocaleDateString(undefined, { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric'
      });
    }
    
    function navigateBack() {
      google.script.run.showMetricsDashboard();
      google.script.host.close();
    }
    
    function showLoading() {
      document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
      const loadingOverlay = document.getElementById('loading-overlay');
      loadingOverlay.style.opacity = '0';
      setTimeout(() => {
        loadingOverlay.style.display = 'none';
        loadingOverlay.style.opacity = '1';
      }, 300);
    }
    
    function showNotification(title, message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      // Set icon based on type
      let iconClass = 'info-circle';
      if (type === 'success') iconClass = 'check-circle';
      if (type === 'error') iconClass = 'exclamation-circle';
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${iconClass}"></i>
        </div>
        <div class="notification-content">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add to document
      document.body.appendChild(notification);
      
      // Add close button functionality
      notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      });
      
      // Show notification with animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Auto-hide after delay
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.remove('show');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, 5000);
    }
    
    function handleError(error) {
      hideLoading();
      console.error('Error:', error);
      showNotification('Error', error.message || 'An unexpected error occurred', 'error');
    }
    
    // Log report generation for analytics
    function logReportGeneration() {
      google.script.run
        .withFailureHandler(error => console.error('Failed to log report generation:', error))
        .logMetricsReportGeneration({
          reportType: document.getElementById('report-type').value,
          timePeriod: document.getElementById('time-period').value,
          metricType: document.getElementById('metric-type').value,
          teamMemberId: document.getElementById('team-member').value,
          generatedBy: currentUser,
          generatedAt: new Date("2025-03-28 06:40:10").toISOString()
        });
    }
  </script>
</body>
</html>







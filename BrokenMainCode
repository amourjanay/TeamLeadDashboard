/**
 * Team Lead Dashboard
 * 
 * Main code file containing initialization functions, menu creation,
 * and show functions for all dashboard components.
 */

// Constants for sheet names
const SHEET_NAMES = {
  TEAM_MEMBERS: 'Team Members',
  ONE_ON_ONES: 'One-on-One Sessions',
  MANAGER_ONE_ON_ONES: 'Manager One-on-One Sessions',
  QA_REVIEWS: 'QA Reviews',
  METRICS: 'Metrics',
  ACTION_ITEMS: 'Action Items',
  TASKS: 'Tasks',
  ASANA_TASKS: 'Asana Tasks',
  TIME_TRACKING: 'Time Tracking',
  SCHEDULE: 'Schedule',
  GENERAL_NOTES: 'General Notes',
  CONFIG: 'Config'
};

/**
 * Runs when the spreadsheet is opened
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  
  // Add a custom menu
  ui.createMenu('📊 Dashboard')
    .addItem('🏠 View Dashboard', 'showDashboard')
    .addSeparator()
    .addSubMenu(ui.createMenu('👥 Team Management')
      .addItem('👤 View Team Members', 'showTeamView')
      .addItem('➕ Add Team Member', 'showAddTeamMemberForm')
      .addItem('🔄 Update Status', 'showUpdateStatusForm'))
    .addSeparator()
    .addSubMenu(ui.createMenu('📋 One-on-One Notes')
      .addItem('📝 New Session', 'showOneOnOneForm')
      .addItem('📊 View Sessions', 'showOneOnOneNotes')
      .addItem('📈 Dashboard', 'showOneOnOneDashboard')
      .addItem('📤 Export Options', 'showOneOnOneExport'))
    .addSeparator()
    .addSubMenu(ui.createMenu('🤝 Manager One-on-One')
      .addItem('📝 New Session', 'showManagerOneOnOneForm')
      .addItem('📊 View Sessions', 'showManagerOneOnOneNotes')
      .addItem('📈 Dashboard', 'showManagerOneOnOneDashboard'))
    .addSeparator()
    .addSubMenu(ui.createMenu('📊 Metrics')
      .addItem('📊 Daily Metrics', 'showMetricsForm')
      .addItem('📈 Reports', 'showMetricsReports')
      .addItem('📉 Dashboard', 'showMetricsDashboard')
      .addItem('📧 Email Config', 'showMetricsEmailConfig')
      .addItem('📤 Export', 'showMetricsExport'))
    .addSeparator()
    .addSubMenu(ui.createMenu('🧪 QA Reviews')
      .addItem('📝 New Review', 'showQAReviewForm')
      .addItem('📊 View Reviews', 'showQAReports')
      .addItem('📈 Dashboard', 'showQADashboard')
      .addItem('📤 Export', 'showQAExport'))
    .addSeparator()
    .addSubMenu(ui.createMenu('📝 General Notes')
      .addItem('📝 New Note', 'showGeneralNoteForm')
      .addItem('📊 View Notes', 'showGeneralNotes')
      .addItem('📈 Dashboard', 'showGeneralNotesDashboard'))
    .addSeparator()
    .addSubMenu(ui.createMenu('⏱️ Time & Schedule')
      .addItem('⏱️ Time Tracker', 'showTeamLeadTimeTracker')
      .addItem('📊 Time Reports', 'showTimeReports')
      .addItem('📅 Manage Schedule', 'showScheduleManager')
      .addItem('🔄 Initialize Week', 'showInitializeWeekForm')
      .addItem('📈 Schedule Reports', 'showScheduleReports'))
    .addSeparator()
    .addSubMenu(ui.createMenu('✅ Tasks')
      .addItem('✅ Add Task', 'showTaskForm')
      .addItem('🌐 Add Asana Task', 'showAsanaTaskForm')
      .addItem('📋 View Tasks', 'showTasksList'))
    .addSeparator()
    .addSubMenu(ui.createMenu('📌 Action Items')
      .addItem('📌 Add Action Item', 'showActionItemsForm')
      .addItem('📊 View Action Items', 'showActionItemsView')
      .addItem('🔔 Reminders', 'showActionItemsReminders'))
    .addSeparator()
    .addSubMenu(ui.createMenu('⚙️ Settings & Support')
      .addItem('⚙️ System Settings', 'showSettings')
      .addItem('👤 User Preferences', 'showUserPreferences')
      .addItem('❓ Help & Support', 'showHelp'))
    .addToUi();
  
  // Check if the system is initialized
  if (!isSystemInitialized()) {
    initializeSpreadsheet();
  }
}

/**
 * Check if system is initialized
 */
function isSystemInitialized() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // Check for required sheets
    for (const key in SHEET_NAMES) {
      if (!ss.getSheetByName(SHEET_NAMES[key])) {
        return false;
      }
    }
    
    return true;
  } catch (error) {
    console.error(`Error checking if system is initialized: ${error}`);
    return false;
  }
}

/**
 * Initialize the spreadsheet structure with all required sheets
 */
function initializeSpreadsheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const ui = SpreadsheetApp.getUi();
    
    // Show initialization progress
    ui.alert('🚀 Dashboard Initialization', 
             'Setting up your Team Lead Dashboard. This will create all necessary sheets and configurations.', 
             ui.ButtonSet.OK);
    
    // Initialize each sheet with default headers
    initializeTeamMembersSheet(ss);
    initializeOneOnOnesSheet(ss);
    initializeManagerOneOnOnesSheet(ss);
    initializeQAReviewsSheet(ss);
    initializeMetricsSheet(ss);
    initializeActionItemsSheet(ss);
    initializeTasksSheet(ss);
    initializeAsanaTasksSheet(ss);
    initializeTimeTrackingSheet(ss);
    initializeScheduleSheet(ss);
    initializeGeneralNotesSheet(ss);
    initializeConfigSheet(ss);
    
    // Set the current user as default team lead
    const currentUser = getCurrentUserEmail();
    const userName = getCurrentUserName();
    
    // Update configuration settings
    updateConfigValue('TeamLeadEmail', currentUser);
    updateConfigValue('TeamLeadName', userName);
    updateConfigValue('LastInitialized', new Date().toISOString());
    
    ui.alert('✅ Setup Complete', 
             'Your Team Lead Dashboard has been successfully set up! You can now start using it to manage your team.', 
             ui.ButtonSet.OK);
    
    return true;
  } catch (error) {
    console.error('Error initializing spreadsheet: ' + error);
    SpreadsheetApp.getUi().alert('❌ Setup Error', 
                                'There was an error setting up the dashboard: ' + error, 
                                SpreadsheetApp.getUi().ButtonSet.OK);
    return false;
  }
}

// Show functions for all dashboard pages

/**
 * Show the main dashboard
 */
function showDashboard() {
  const html = HtmlService.createTemplateFromFile('dashboard')
    .evaluate()
    .setTitle('Team Lead Dashboard')
    .setWidth(1200)
    .setHeight(900);
  
  SpreadsheetApp.getUi().showModalDialog(html, '📊 Team Lead Dashboard');
}

/**
 * Show one-on-one form
 */
function showOneOnOneForm() {
  const html = HtmlService.createTemplateFromFile('one-on-one-form')
    .evaluate()
    .setTitle('One-on-One Session')
    .setWidth(900)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, '📝 One-on-One Session');
}

/**
 * Show one-on-one notes
 */
function showOneOnOneNotes() {
  const html = HtmlService.createTemplateFromFile('one-on-one-notes')
    .evaluate()
    .setTitle('One-on-One Notes')
    .setWidth(1000)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, '📊 One-on-One Notes');
}

/**
 * Show one-on-one details
 */
function showOneOnOneDetails() {
  const html = HtmlService.createTemplateFromFile('one-on-one-details')
    .evaluate()
    .setTitle('One-on-One Details')
    .setWidth(900)
    .setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, '📋 One-on-One Details');
}

/**
 * Show one-on-one dashboard
 */
function showOneOnOneDashboard() {
  const html = HtmlService.createTemplateFromFile('one-on-one-dashboard')
    .evaluate()
    .setTitle('One-on-One Dashboard')
    .setWidth(1000)
    .setHeight(800);
  
  SpreadsheetApp.getUi().showModalDialog(html, '📈 One-on-One Dashboard');
}

/**
 * Show one-on-one export options
 */
function showOneOnOneExport() {
  const html = HtmlService.createTemplateFromFile('one-on-one-export')
    .evaluate()
    .setTitle('Export One-on-One Notes')
    .setWidth(600)
    .setHeight(500);
  
  SpreadsheetApp.getUi().showModalDialog(html, '📤 Export One-on-One Notes');
}

// Other show functions follow the same pattern...

/**
 * Include an HTML file in another HTML file
 */
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}
/**
 * Show the team member view page
 */
function showTeamView() {
  try {
    // Create enhanced HTML with modern animations and visual effects
    const template = HtmlService.createTemplateFromFile('team-view');
    
    // Add dynamic user data - never hardcode
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName(),
      accessLevel: getUserAccessLevel()
    };
    
    const html = template.evaluate()
      .setTitle('👥 Team Management')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .setWidth(1200)
      .setHeight(800);
    
    // Use modal display for better UX
    SpreadsheetApp.getUi().showSidebar(html);
    
    // Log usage for analytics
    logFeatureUsage('showTeamView');
  } catch (error) {
    console.error(`Error showing team view: ${error.message}`);
    showErrorToast('Something went wrong showing the team view');
  }
}

/**
 * Show the add team member form
 */
function showAddTeamMemberForm() {
  try {
    // Create enhanced HTML template with animations and interactive elements
    const template = HtmlService.createTemplateFromFile('add-team-member-form');
    
    // Add dynamic user data - never hardcode
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName(),
      timestamp: new Date().toISOString()
    };
    
    // Set template properties for adding a new member
    template.isEditing = false;
    template.isNew = true;
    
    const html = template.evaluate()
      .setWidth(800)
      .setHeight(600)
      .setTitle('👤 Add Team Member');
    
    // Enhanced modal with smooth animations and modern styling
    const enhancedHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body, html {
              height: 100%;
              margin: 0;
              padding: 0;
              overflow: hidden;
              font-family: 'Inter', sans-serif;
            }
            
            .loading-screen {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: linear-gradient(135deg, #f8fafc, #e2e8f0);
              display: flex;
              justify-content: center;
              align-items: center;
              flex-direction: column;
              animation: fadeOut 0.4s ease-out 0.6s forwards;
            }
            
            @keyframes fadeOut {
              to { opacity: 0; visibility: hidden; }
            }
            
            .reveal {
              width: 100%;
              height: 100%;
              position: relative;
              animation: fadeIn 0.4s ease-out 0.8s forwards;
              opacity: 0;
            }
            
            @keyframes fadeIn {
              to { opacity: 1; }
            }
            
            iframe {
              width: 100%;
              height: 100%;
              border: none;
            }
            
            .icon-container {
              position: relative;
              margin-bottom: 20px;
            }
            
            .person-circle {
              width: 64px;
              height: 64px;
              border-radius: 50%;
              background: linear-gradient(135deg, #5540af, #38bdf8);
              display: flex;
              justify-content: center;
              align-items: center;
              color: white;
              font-size: 30px;
              position: relative;
              z-index: 2;
              box-shadow: 0 8px 16px rgba(85, 64, 175, 0.3);
            }
            
            .ripple {
              position: absolute;
              top: 0;
              left: 0;
              right: 0;
              bottom: 0;
              border-radius: 50%;
              border: 2px solid #5540af;
              animation: ripple 1.5s ease-out infinite;
            }
            
            @keyframes ripple {
              0% { transform: scale(1); opacity: 1; }
              100% { transform: scale(1.5); opacity: 0; }
            }
            
            .loading-text {
              color: #5540af;
              font-size: 15px;
              font-weight: 600;
              margin-top: 16px;
            }
          </style>
        </head>
        <body>
          <div class="loading-screen">
            <div class="icon-container">
              <div class="person-circle">👤</div>
              <div class="ripple"></div>
            </div>
            <div class="loading-text">Preparing team member form...</div>
          </div>
          
          <div class="reveal">
            <iframe src="${html.getUrl()}" frameborder="0"></iframe>
          </div>
        </body>
      </html>
    `)
    .setWidth(800)
    .setHeight(600)
    .setTitle('👤 Add Team Member');
    
    SpreadsheetApp.getUi().showModalDialog(enhancedHtml, '👤 Add Team Member');
    
    // Log usage for analytics
    logFeatureUsage('showAddTeamMemberForm');
  } catch (error) {
    console.error(`Error showing add team member form: ${error.message}`);
    showErrorToast('Something went wrong showing the team member form');
  }
}

/**
 * Show the team member form for editing an existing team member
 * @param {string} id - ID of the team member to edit
 */
function showTeamMemberForm(id) {
  try {
    // Create enhanced HTML template with animations and interactive elements
    const template = HtmlService.createTemplateFromFile('add-team-member-form');
    
    // Add dynamic user data - never hardcode
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName(),
      timestamp: new Date().toISOString()
    };
    
    // Set template properties for editing or creating
    if (id) {
      template.isEditing = true;
      template.memberId = id;
    } else {
      // Redirect to add form if no ID
      return showAddTeamMemberForm();
    }
    
    const html = template.evaluate()
      .setWidth(800)
      .setHeight(600)
      .setTitle(id ? '✏️ Edit Team Member' : '👤 Add Team Member');
    
    // Enhanced modal with URL parameters and loading animation
    const finalUrl = html.getUrl() + '?id=' + id;
    const enhancedHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body, html {
              height: 100%;
              margin: 0;
              padding: 0;
              overflow: hidden;
              font-family: 'Inter', sans-serif;
            }
            
            .loading-screen {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: linear-gradient(135deg, #f8fafc, #e2e8f0);
              display: flex;
              justify-content: center;
              align-items: center;
              flex-direction: column;
              animation: fadeOut 0.5s ease-out 0.7s forwards;
            }
            
            @keyframes fadeOut {
              to { opacity: 0; visibility: hidden; }
            }
            
            .reveal {
              width: 100%;
              height: 100%;
              position: relative;
              animation: fadeIn 0.4s ease-out 1s forwards;
              opacity: 0;
            }
            
            @keyframes fadeIn {
              to { opacity: 1; }
            }
            
            iframe {
              width: 100%;
              height: 100%;
              border: none;
            }
            
            .icon-container {
              display: flex;
              align-items: center;
              gap: 10px;
              margin-bottom: 20px;
              position: relative;
            }
            
            .avatar-wrapper {
              width: 56px;
              height: 56px;
              border-radius: 12px;
              background: linear-gradient(135deg, #5540af, #38bdf8);
              display: flex;
              justify-content: center;
              align-items: center;
              box-shadow: 0 8px 16px rgba(85, 64, 175, 0.3);
              position: relative;
              overflow: hidden;
              z-index: 2;
            }
            
            .avatar-icon {
              font-size: 24px;
              color: white;
              position: relative;
              z-index: 1;
            }
            
            .avatar-highlight {
              position: absolute;
              width: 100%;
              height: 15px;
              background: rgba(255, 255, 255, 0.3);
              top: 0;
              left: 0;
              transform: rotate(-45deg) translate(-25px, 5px);
              animation: shimmer 2s infinite;
            }
            
            @keyframes shimmer {
              0%, 100% { transform: rotate(-45deg) translate(-30px, 5px); }
              50% { transform: rotate(-45deg) translate(50px, 5px); }
            }
            
            .edit-icon {
              width: 28px;
              height: 28px;
              background: #fff;
              border-radius: 50%;
              display: flex;
              justify-content: center;
              align-items: center;
              box-shadow: 0 4px 8px rgba(0,0,0,0.1);
              position: absolute;
              right: -8px;
              bottom: -5px;
              z-index: 3;
              font-size: 14px;
              color: #5540af;
              transform: scale(0.8);
              animation: popIn 0.5s forwards 0.3s;
              opacity: 0;
            }
            
            @keyframes popIn {
              from { transform: scale(0.8); opacity: 0; }
              to { transform: scale(1); opacity: 1; }
            }
            
            .loading-text {
              color: #1e293b;
              font-weight: 600;
              font-size: 16px;
            }
            
            .loading-text span {
              display: inline-block;
              overflow: hidden;
              animation: reveal 1s forwards;
              opacity: 0;
            }
            
            @keyframes reveal {
              0% { opacity: 0; transform: translateY(10px); }
              100% { opacity: 1; transform: translateY(0); }
            }
            
            .loading-text span:nth-child(1) { animation-delay: 0.1s; }
            .loading-text span:nth-child(2) { animation-delay: 0.2s; }
            .loading-text span:nth-child(3) { animation-delay: 0.3s; }
            .loading-text span:nth-child(4) { animation-delay: 0.4s; }
            
            .spinner {
              width: 100%;
              text-align: center;
              margin-top: 12px;
            }
            
            .spinner .dot {
              display: inline-block;
              width: 8px;
              height: 8px;
              border-radius: 50%;
              margin: 0 3px;
              background-color: #5540af;
              animation: blink 1.4s infinite both;
            }
            
            .spinner .dot:nth-child(2) { animation-delay: 0.2s; }
            .spinner .dot:nth-child(3) { animation-delay: 0.4s; }
            
            @keyframes blink {
              0%, 80%, 100% { transform: scale(0); opacity: 0.5; }
              40% { transform: scale(1); opacity: 1; }
            }
          </style>
        </head>
        <body>
          <div class="loading-screen">
            <div class="icon-container">
              <div class="avatar-wrapper">
                <div class="avatar-icon">👤</div>
                <div class="avatar-highlight"></div>
                <div class="edit-icon">✏️</div>
              </div>
            </div>
            <div class="loading-text">
              <span>Loading</span>
              <span>team</span>
              <span>member</span>
              <span>data</span>
            </div>
            <div class="spinner">
              <div class="dot"></div>
              <div class="dot"></div>
              <div class="dot"></div>
            </div>
          </div>
          
          <div class="reveal">
            <iframe src="${finalUrl}" frameborder="0"></iframe>
          </div>
          
          <script>
            // Force redirect after animations
            setTimeout(() => {
              document.querySelector('iframe').src = "${finalUrl}";
            }, 1000);
          </script>
        </body>
      </html>
    `)
    .setWidth(800)
    .setHeight(600)
    .setTitle('✏️ Edit Team Member');
    
    SpreadsheetApp.getUi().showModalDialog(enhancedHtml, '✏️ Edit Team Member');
    
    // Log usage for analytics
    logFeatureUsage('showTeamMemberForm');
  } catch (error) {
    console.error(`Error showing team member form: ${error.message}`);
    showErrorToast('Something went wrong showing the team member form');
  }
}

/**
 * Show the update status form for team members
 * @param {string} id - ID of the team member to update status
 */
function showUpdateStatusForm(id) {
  try {
    // Validate the team member ID
    if (!id) {
      showErrorToast('Team member ID is required to update status');
      return;
    }
    
    // Create template with enhanced visuals and interactive elements
    const template = HtmlService.createTemplateFromFile('update-status-form');
    
    // Use dynamic user information - never hardcode
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName(),
      timestamp: new Date().toISOString()
    };
    
    // Set template properties for this specific team member
    template.memberId = id;
    
    const html = template.evaluate()
      .setWidth(600)
      .setHeight(520)
      .setTitle('🔄 Update Status');
    
    // Create stunning animated loading screen with modern UI elements
    const finalUrl = html.getUrl() + '?id=' + id;
    const enhancedHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body, html {
              height: 100%;
              margin: 0;
              padding: 0;
              overflow: hidden;
              font-family: 'Inter', sans-serif;
            }
            
            .container {
              position: relative;
              width: 100%;
              height: 100%;
            }
            
            .loading-overlay {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: linear-gradient(135deg, #f8fafc, #e2e8f0);
              display: flex;
              justify-content: center;
              align-items: center;
              z-index: 10;
              animation: fadeOut 0.5s ease-out 1s forwards;
            }
            
            @keyframes fadeOut {
              to { opacity: 0; visibility: hidden; }
            }
            
            .loading-content {
              text-align: center;
            }
            
            .status-icon {
              position: relative;
              width: 80px;
              height: 80px;
              margin: 0 auto 24px;
            }
            
            .status-circle {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              border-radius: 50%;
              background: linear-gradient(135deg, #5540af, #38bdf8);
              display: flex;
              justify-content: center;
              align-items: center;
              box-shadow: 0 8px 20px rgba(85, 64, 175, 0.3);
            }
            
            .status-emoji {
              font-size: 32px;
            }
            
            .status-ring {
              position: absolute;
              top: -5px;
              left: -5px;
              width: calc(100% + 10px);
              height: calc(100% + 10px);
              border-radius: 50%;
              border: 2px solid transparent;
              border-color: #5540af transparent #5540af transparent;
              animation: spinner 1.5s linear infinite;
            }
            
            @keyframes spinner {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
            }
            
            .status-ring:nth-child(2) {
              top: -12px;
              left: -12px;
              width: calc(100% + 24px);
              height: calc(100% + 24px);
              animation-direction: reverse;
              animation-duration: 2s;
            }
            
            .loading-text {
              font-size: 16px;
              font-weight: 600;
              color: #5540af;
              animation: pulse 1.5s infinite;
              margin-bottom: 8px;
            }
            
            .loading-subtext {
              font-size: 14px;
              color: #64748b;
            }
            
            .loading-dots {
              display: inline-block;
              position: relative;
              width: 20px;
              text-align: left;
            }
            
            .loading-dots:after {
              content: "...";
              position: absolute;
              animation: dots 1.5s steps(4, end) infinite;
              width: 0;
              overflow: hidden;
            }
            
            @keyframes dots {
              0%, 20% { width: 0; }
              40% { width: 4px; }
              60% { width: 8px; }
              80%, 100% { width: 12px; }
            }
            
            @keyframes pulse {
              0%, 100% { opacity: 1; }
              50% { opacity: 0.7; }
            }
            
            iframe {
              width: 100%;
              height: 100%;
              border: none;
              position: relative;
              z-index: 5;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="loading-overlay">
              <div class="loading-content">
                <div class="status-icon">
                  <div class="status-circle">
                    <span class="status-emoji">🔄</span>
                  </div>
                  <div class="status-ring"></div>
                  <div class="status-ring"></div>
                </div>
                <div class="loading-text">Preparing Status Update Form<span class="loading-dots"></span></div>
                <div class="loading-subtext">Loading team member information</div>
              </div>
            </div>
            
            <iframe src="${finalUrl}" frameborder="0"></iframe>
          </div>
        </body>
      </html>
    `)
    .setWidth(600)
    .setHeight(520)
    .setTitle('🔄 Update Team Member Status');
    
    SpreadsheetApp.getUi().showModalDialog(enhancedHtml, '🔄 Update Team Member Status');
    
    // Log usage for analytics
    logFeatureUsage('showUpdateStatusForm');
  } catch (error) {
    console.error(`Error showing status update form: ${error.message}`);
    showErrorToast('Something went wrong showing the status update form');
  }
}

/**
 * Show the team analytics dashboard
 */
function showTeamAnalytics() {
  try {
    // Create template with enhanced visualizations
    const template = HtmlService.createTemplateFromFile('team-analytics');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    // Preload some data for faster rendering
    try {
      const metrics = TeamService.getTeamMetrics();
      if (metrics.success) {
        template.preloadedMetrics = JSON.stringify(metrics.data);
      }
    } catch (e) {
      console.log('Error preloading metrics: ' + e.message);
    }
    
    const html = template.evaluate()
      .setTitle('📊 Team Analytics')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .setWidth(1200)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showSidebar(html);
    
    // Log usage for analytics
    logFeatureUsage('showTeamAnalytics');
  } catch (error) {
    console.error(`Error showing team analytics: ${error.message}`);
    showErrorToast('Something went wrong showing team analytics');
  }
}

/**
 * Show the team member skills matrix
 */
function showTeamSkillsMatrix() {
  try {
    const template = HtmlService.createTemplateFromFile('team-skills-matrix');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    // Pre-load some data for speed
    try {
      const categories = TeamService.getSkillCategories();
      if (categories.success) {
        template.preloadedCategories = JSON.stringify(categories.data);
      }
    } catch (e) {
      console.log('Error preloading skill categories: ' + e.message);
    }
    
    const html = template.evaluate()
      .setTitle('🧩 Team Skills Matrix')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .setWidth(1200)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showSidebar(html);
    
    // Log usage for analytics
    logFeatureUsage('showTeamSkillsMatrix');
  } catch (error) {
    console.error(`Error showing skills matrix: ${error.message}`);
    showErrorToast('Something went wrong showing the skills matrix');
  }
}

/**
 * Show team organizational chart
 */
function showTeamOrgChart() {
  try {
    const template = HtmlService.createTemplateFromFile('team-org-chart');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setTitle('👥 Team Organization Chart')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .setWidth(1200)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showSidebar(html);
    
    // Log usage for analytics
    logFeatureUsage('showTeamOrgChart');
  } catch (error) {
    console.error(`Error showing team org chart: ${error.message}`);
    showErrorToast('Something went wrong showing the organization chart');
  }
}

/**
 * Show the team member selector component
 * Used as a helper by other forms
 */
function getTeamMemberSelectorHtml() {
  // The team-member-selector.html is a reusable component for selecting team members
  return HtmlService.createHtmlOutputFromFile('team-member-selector').getContent();
}

/**
 * Show team member search dialog
 */
function showTeamMemberSearch() {
  try {
    const template = HtmlService.createTemplateFromFile('team-member-search');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(700)
      .setHeight(600)
      .setTitle('🔍 Find Team Member');
    
    // Create enhanced search UI
    const enhancedHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body, html {
              height: 100%;
              margin: 0;
              padding: 0;
              overflow: hidden;
              font-family: 'Inter', sans-serif;
            }
            
            .search-container {
              position: relative;
              width: 100%;
              height: 100%;
              background-color: #f8fafc;
            }
            
            .search-header {
              position: absolute;
              top: 0;
              left: 0;
              right: 0;
              height: 80px;
              display: flex;
              flex-direction: column;
              justify-content: center;
              padding: 0 20px;
              background: linear-gradient(135deg, #5540af, #38bdf8);
              color: white;
              box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
              z-index: 5;
              animation: slideDown 0.5s ease-out forwards;
              transform: translateY(-100%);
            }
            
            @keyframes slideDown {
              to { transform: translateY(0); }
            }
            
            .search-icon {
              position: absolute;
              top: 50%;
              left: 30px;
              transform: translateY(-50%);
              font-size: 22px;
              color: white;
              filter: drop-shadow(0 2px 3px rgba(0, 0, 0, 0.2));
            }
            
            .search-title {
              font-size: 18px;
              font-weight: 600;
              margin: 0 0 4px 36px;
            }
            
            .search-subtitle {
              font-size: 13px;
              opacity: 0.9;
              margin: 0 0 0 36px;
            }
            
            .search-content {
              position: absolute;
              top: 80px;
              left: 0;
              right: 0;
              bottom: 0;
              overflow: hidden;
            }
            
            iframe {
              width: 100%;
              height: 100%;
              border: none;
            }
            
            .loader {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 5px;
              background: linear-gradient(90deg, 
                rgba(56, 189, 248, 0) 0%, 
                rgba(56, 189, 248, 1) 50%, 
                rgba(56, 189, 248, 0) 100%);
              background-size: 200% 100%;
              animation: shimmer 1.5s infinite;
            }
            
            @keyframes shimmer {
              0% { background-position: 100% 0; }
              100% { background-position: -100% 0; }
            }
          </style>
        </head>
        <body>
          <div class="search-container">
            <div class="search-header">
              <div class="search-icon">🔍</div>
              <div class="search-title">Team Member Search</div>
              <div class="search-subtitle">Find and manage your team members</div>
              <div class="loader"></div>
            </div>
            <div class="search-content">
              <iframe src="${html.getUrl()}" frameborder="0"></iframe>
            </div>
          </div>
        </body>
      </html>
    `)
    .setWidth(700)
    .setHeight(600)
    .setTitle('🔍 Find Team Member');
    
    SpreadsheetApp.getUi().showModalDialog(enhancedHtml, '🔍 Find Team Member');
    
    // Log usage for analytics
    logFeatureUsage('showTeamMemberSearch');
  } catch (error) {
    console.error(`Error showing team member search: ${error.message}`);
    showErrorToast('Something went wrong showing the team search');
  }
}

/**
 * Show the team import/export dialog
 */
function showTeamImportExport() {
  try {
    const template = HtmlService.createTemplateFromFile('team-import-export');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(700)
      .setHeight(500)
      .setTitle('🔄 Import/Export Team');
    
    // Create enhanced import/export UI
    const enhancedHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body, html {
              height: 100%;
              margin: 0;
              padding: 0;
              overflow: hidden;
              font-family: 'Inter', sans-serif;
            }
            
            .container {
              position: relative;
              width: 100%;
              height: 100%;
              background-color: #f8fafc;
            }
            
            .tabs {
              position: absolute;
              top: 0;
              left: 0;
              right: 0;
              height: 60px;
              display: flex;
              background-color: white;
              box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
              z-index: 5;
            }
            
            .tab {
              flex: 1;
              display: flex;
              align-items: center;
              justify-content: center;
              font-weight: 600;
              color: #64748b;
              font-size: 15px;
              position: relative;
              overflow: hidden;
              cursor: pointer;
              transition: all 0.3s;
            }
            
            .tab:hover {
              color: #334155;
              background-color: rgba(85, 64, 175, 0.03);
            }
            
            .tab.active {
              color: #5540af;
            }
            
            .tab.active::after {
              content: '';
              position: absolute;
              bottom: 0;
              left: 25%;
              width: 50%;
              height: 3px;
              background: linear-gradient(90deg, #5540af, #38bdf8);
              border-radius: 3px 3px 0 0;
              animation: slideIn 0.3s forwards;
              transform: translateX(-100%);
            }
            
            @keyframes slideIn {
              to { transform: translateX(0); }
            }
            
            .tab-icon {
              margin-right: 8px;
              font-size: 20px;
            }
            
            .content {
              position: absolute;
              top: 60px;
              left: 0;
              right: 0;
              bottom: 0;
              overflow: hidden;
            }
            
            iframe {
              width: 100%;
              height: 100%;
              border: none;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="tabs">
              <div class="tab active" id="import-tab">
                <span class="tab-icon">📥</span>
                <span>Import</span>
              </div>
              <div class="tab" id="export-tab">
                <span class="tab-icon">📤</span>
                <span>Export</span>
              </div>
            </div>
            <div class="content">
              <iframe src="${html.getUrl()}" frameborder="0" id="content-frame"></iframe>
            </div>
          </div>
          
          <script>
            document.getElementById('import-tab').addEventListener('click', function() {
              setActiveTab('import');
              document.getElementById('content-frame').contentWindow.postMessage('switchToImport', '*');
            });
            
            document.getElementById('export-tab').addEventListener('click', function() {
              setActiveTab('export');
              document.getElementById('content-frame').contentWindow.postMessage('switchToExport', '*');
            });
            
            function setActiveTab(tab) {
              document.querySelectorAll('.tab').forEach(el => el.classList.remove('active'));
              document.getElementById(tab + '-tab').classList.add('active');
            }
          </script>
        </body>
      </html>
    `)
    .setWidth(700)
    .setHeight(500)
    .setTitle('🔄 Import/Export Team');
    
    SpreadsheetApp.getUi().showModalDialog(enhancedHtml, '🔄 Import/Export Team');
    
    // Log usage for analytics
    logFeatureUsage('showTeamImportExport');
  } catch (error) {
    console.error(`Error showing team import/export: ${error.message}`);
    showErrorToast('Something went wrong showing the import/export dialog');
  }
}

/**
 * Show team member profile view
 * @param {string} id - ID of the team member to view
 */
function showTeamMemberProfile(id) {
  try {
    if (!id) {
      showErrorToast('Team member ID is required to view profile');
      return;
    }
    
    const template = HtmlService.createTemplateFromFile('team-member-profile');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    // Set member ID for the template
    template.memberId = id;
    
    const html = template.evaluate()
      .setWidth(800)
      .setHeight(700)
      .setTitle('👤 Team Member Profile');
    
    // Create enhanced profile UI with modern animations
    const finalUrl = html.getUrl() + '?id=' + id;
    const enhancedHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body, html {
              height: 100%;
              margin: 0;
              padding: 0;
              overflow: hidden;
              font-family: 'Inter', sans-serif;
            }
            
            .profile-container {
              position: relative;
              width: 100%;
              height: 100%;
              background: linear-gradient(to bottom right, #f8fafc, #f1f5f9);
            }
            
            .profile-loader {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              background-color: #f8fafc;
              z-index: 10;
              animation: fadeOut 0.5s ease-out 1.8s forwards;
            }
            
            @keyframes fadeOut {
              to {
                opacity: 0;
                visibility: hidden;
              }
            }
            
            .profile-card {
              width: 240px;
              height: 300px;
              border-radius: 16px;
              background: white;
              box-shadow: 0 20px 30px -10px rgba(30, 41, 59, 0.2);
              display: flex;
              flex-direction: column;
              align-items: center;
              padding: 30px 20px;
              position: relative;
              overflow: hidden;
            }
            
            .card-banner {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 80px;
              background: linear-gradient(135deg, #5540af, #38bdf8);
            }
            
            .profile-avatar {
              width: 100px;
              height: 100px;
              border-radius: 50%;
              background: linear-gradient(135deg, #5540af, #38bdf8);
              display: flex;
              justify-content: center;
              align-items: center;
              color: white;
              font-size: 36px;
              font-weight: 600;
              border: 5px solid white;
              box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
              margin-top: 30px;
              position: relative;
              z-index: 2;
            }
            
            .profile-data {
              margin-top: 20px;
              text-align: center;
            }
            
            .profile-name {
              font-size: 18px;
              font-weight: 600;
              color: #1e293b;
              margin-bottom: 4px;
              animation: slideUp 0.5s ease-out 0.2s forwards;
              opacity: 0;
              transform: translateY(10px);
            }
            
            .profile-role {
              font-size: 14px;
              color: #64748b;
              margin-bottom: 16px;
              animation: slideUp 0.5s ease-out 0.4s forwards;
              opacity: 0;
              transform: translateY(10px);
            }
            
            @keyframes slideUp {
              to {
                opacity: 1;
                transform: translateY(0);
              }
            }
            
            .shimmer {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: linear-gradient(
                90deg,
                rgba(255, 255, 255, 0) 0%,
                rgba(255, 255, 255, 0.2) 50%,
                rgba(255, 255, 255, 0) 100%
              );
              animation: loading 1.5s infinite;
            }
            
            @keyframes loading {
              from {
                transform: translateX(-100%);
              }
              to {
                transform: translateX(100%);
              }
            }
            
            .loading-text {
              position: absolute;
              bottom: 30px;
              left: 0;
              width: 100%;
              text-align: center;
              font-size: 14px;
              color: #64748b;
              font-weight: 500;
            }
            
            .dots {
              display: inline-flex;
            }
            
            .dot {
              width: 8px;
              height: 8px;
              background-color: #5540af;
              border-radius: 50%;
              margin: 0 2px;
              animation: bounce 1.5s infinite;
            }
            
            .dot:nth-child(2) {
              animation-delay: 0.2s;
            }
            
            .dot:nth-child(3) {
              animation-delay: 0.4s;
            }
            
            @keyframes bounce {
              0%, 80%, 100% {
                transform: translateY(0);
              }
              40% {
                transform: translateY(-8px);
              }
            }
            
            .profile-content {
              width: 100%;
              height: 100%;
            }
            
            iframe {
              width: 100%;
              height: 100%;
              border: none;
            }
          </style>
        </head>
        <body>
          <div class="profile-container">
            <div class="profile-loader">
              <div class="profile-card">
                <div class="card-banner">
                  <div class="shimmer"></div>
                </div>
                <div class="profile-avatar">👤</div>
                <div class="profile-data">
                  <div class="profile-name">Loading Profile</div>
                  <div class="profile-role">Team Member</div>
                </div>
              </div>
              <div class="loading-text">
                Loading profile data
                <div class="dots">
                  <div class="dot"></div>
                  <div class="dot"></div>
                  <div class="dot"></div>
                </div>
              </div>
            </div>
            
            <div class="profile-content">
              <iframe src="${finalUrl}" frameborder="0"></iframe>
            </div>
          </div>
        </body>
      </html>
    `)
    .setWidth(800)
    .setHeight(700)
    .setTitle('👤 Team Member Profile');
    
    SpreadsheetApp.getUi().showModalDialog(enhancedHtml, '👤 Team Member Profile');
    
    // Log usage for analytics
    logFeatureUsage('showTeamMemberProfile');
  } catch (error) {
    console.error(`Error showing team member profile: ${error.message}`);
    showErrorToast('Something went wrong showing the team member profile');
  }
}

/**
 * Show team calendar management dialog
 */
function showTeamCalendar() {
  try {
    const template = HtmlService.createTemplateFromFile('team-calendar');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(900)
      .setHeight(700)
      .setTitle('📅 Team Calendar');
    
    SpreadsheetApp.getUi().showModalDialog(html, '📅 Team Calendar');
    
    // Log usage for analytics
    logFeatureUsage('showTeamCalendar');
  } catch (error) {
    console.error(`Error showing team calendar: ${error.message}`);
    showErrorToast('Something went wrong showing the team calendar');
  }
}

/**
 * Show department management dialog
 */
function showDepartmentManagement() {
  try {
    const template = HtmlService.createTemplateFromFile('department-management');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(800)
      .setHeight(600)
      .setTitle('🏢 Department Management');
    
    SpreadsheetApp.getUi().showModalDialog(html, '🏢 Department Management');
    
    // Log usage for analytics
    logFeatureUsage('showDepartmentManagement');
  } catch (error) {
    console.error(`Error showing department management: ${error.message}`);
    showErrorToast('Something went wrong showing department management');
  }
}

/**
 * Show team onboarding process
 */
function showTeamOnboarding() {
  try {
    const template = HtmlService.createTemplateFromFile('team-onboarding');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(800)
      .setHeight(600)
      .setTitle('🚀 Team Onboarding');
    
    SpreadsheetApp.getUi().showModalDialog(html, '🚀 Team Onboarding');
    
    // Log usage for analytics
    logFeatureUsage('showTeamOnboarding');
  } catch (error) {
    console.error(`Error showing team onboarding: ${error.message}`);
    showErrorToast('Something went wrong showing team onboarding');
  }
}

/**
 * Show toast message with animation
 * @param {string} message - Message to display
 * @param {string} type - Type of toast (success, error, warning, info)
 */
function showToast(message, type = 'info') {
  // Create a temporary sidebar with a toast notification
  try {
    const toastHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
          <style>
            body {
              font-family: 'Inter', sans-serif;
              margin: 0;
              padding: 16px;
              overflow: hidden;
            }
            .toast {
              position: fixed;
              top: 24px;
              right: 24px;
              max-width: 350px;
              background-color: white;
              border-radius: 12px;
              box-shadow: 0 10px 30px rgba(30, 41, 59, 0.15);
              padding: 16px 24px;
              display: flex;
              align-items: center;
              transform: translateX(120%);
              transition: transform 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
              animation: slideIn 0.4s forwards, slideOut 0.4s 4s forwards;
              z-index: 1000;
            }
            
            @keyframes slideIn {
              to { transform: translateX(0); }
            }
            
            @keyframes slideOut {
              to { transform: translateX(120%); }
            }
            
            .toast-icon {
              margin-right: 16px;
              font-size: 24px;
              color: var(--color);
            }
            
            .toast-success { --color: #10b981; }
            .toast-error { --color: #ef4444; }
            .toast-warning { --color: #f59e0b; }
            .toast-info { --color: #5540af; }
            
            .toast-message {
              font-weight: 500;
            }
          </style>
        </head>
        <body>
          <div class="toast toast-${type}">
            <div class="toast-icon">
              ${getIconForType(type)}
            </div>
            <div class="toast-message">${message}</div>
          </div>
          <script>
            setTimeout(() => window.top.close(), 4500);
          </script>
        </body>
      </html>
    `)
    .setWidth(400)
    .setHeight(100);
    
    SpreadsheetApp.getUi().showModelessDialog(toastHtml, ' ');
  } catch (error) {
    // Fallback to simple alert if toast fails
    console.error(`Error showing toast: ${error.message}`);
    SpreadsheetApp.getActive().toast(message);
  }
  
  // Helper function to get icon based on toast type
  function getIconForType(type) {
    switch(type) {
      case 'success': return '✅';
      case 'error': return '❌';
      case 'warning': return '⚠️';
      default: return 'ℹ️';
    }
  }
}

/**
 * Show an error toast
 * @param {string} message - Error message
 */
function showErrorToast(message) {
  showToast(message, 'error');
}

/**
 * Get current user's email
 */
function getCurrentUserEmail() {
  return Session.getActiveUser().getEmail();
}

/**
 * Get current user's name
 */
function getCurrentUserName() {
  const email = getCurrentUserEmail();
  // Try to get name from email (before the @ symbol)
  const namePart = email.split('@')[0];
  if (!namePart) return 'Team Lead';
  
  // Convert from formats like john.doe or john_doe to John Doe
  return namePart
    .replace(/[._]/g, ' ')
    .replace(/\w\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());
}

/**
 * Get access level for current user
 */
function getUserAccessLevel() {
  try {
    // Check if user is owner/editor
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const protection = ss.getProtections(SpreadsheetApp.ProtectionType.SHEET)[0];
    
    if (!protection) {
      return 'admin';
    }
    
    const email = getCurrentUserEmail();
    if (protection.canEdit()) {
      return 'editor';
    } else {
      return 'viewer';
    }
  } catch (e) {
    return 'viewer';
  }
}

/**
 * Log feature usage
 */
function logFeatureUsage(featureName) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let usageSheet = ss.getSheetByName('Usage_Log');
    
    if (!usageSheet) {
      usageSheet = ss.insertSheet('Usage_Log');
      usageSheet.getRange('A1:D1').setValues([['Timestamp', 'User', 'Feature', 'Session ID']]);
      usageSheet.hideSheet();
    }
    
    // Generate a persistent session ID for this user's session
    const sessionId = PropertiesService.getUserProperties().getProperty('sessionId');
    if (!sessionId) {
      const newSessionId = Utilities.getUuid();
      PropertiesService.getUserProperties().setProperty('sessionId', newSessionId);
    }
    
    usageSheet.appendRow([
      new Date(),
      getCurrentUserEmail(),
      featureName,
      PropertiesService.getUserProperties().getProperty('sessionId') || 'unknown'
    ]);
  } catch (e) {
    console.log('Error logging feature usage: ' + e.message);
  }
}

/**
 * Initialize the spreadsheet with all required sheets
 */
function initializeSpreadsheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // Initialize Config sheet
    let configSheet = ss.getSheetByName(SHEET_NAMES.CONFIG);
    if (!configSheet) {
      configSheet = ss.insertSheet(SHEET_NAMES.CONFIG);
      configSheet.getRange('A1:B1').setValues([['Key', 'Value']]);
      configSheet.getRange('A1:B1').setFontWeight('bold').setBackground('#e2e8f0');
      configSheet.setFrozenRows(1);
      
      // Add default configs
      const configs = [
        ['TeamLeadName', getCurrentUserName()],
        ['TeamLeadEmail', getCurrentUserEmail()],
        ['OneOnOneFrequency', '14'],
        ['ReminderDays', '3'],
        ['LastInitialized', new Date().toISOString()],
        ['DashboardTheme', 'default'],
        ['DefaultWorkingHours', '09:00-17:00'],
        ['TimeZone', Session.getScriptTimeZone()]
      ];
      
      configSheet.getRange(2, 1, configs.length, 2).setValues(configs);
      configSheet.setColumnWidth(1, 200);
      configSheet.setColumnWidth(2, 300);
    }
    
    // Initialize Team Members sheet
    TeamService.initializeTeamMembersSheet();
    
    // Initialize One-on-Ones sheet
    OneOnOneService.initializeOneOnOneSheets();
    
    // Initialize Action Items sheet
    let actionItemsSheet = ss.getSheetByName(SHEET_NAMES.ACTION_ITEMS);
    if (!actionItemsSheet) {
      actionItemsSheet = ss.insertSheet(SHEET_NAMES.ACTION_ITEMS);
      
      const actionItemHeaders = [
        'ID', 'Counselor ID', 'Counselor Name', 'Description',
        'Due Date', 'Status', 'Priority', 'Source', 'Source ID',
        'Completion Date', 'Notes', 'Created By', 'Created At', 
        'Updated By', 'Updated At'
      ];
      
      actionItemsSheet.getRange(1, 1, 1, actionItemHeaders.length).setValues([actionItemHeaders]);
      actionItemsSheet.getRange(1, 1, 1, actionItemHeaders.length).setFontWeight('bold').setBackground('#e2e8f0');
      actionItemsSheet.setFrozenRows(1);
      actionItemsSheet.setFrozenColumns(3);
      
      // Set column widths
      actionItemsSheet.setColumnWidth(1, 120); // ID
      actionItemsSheet.setColumnWidth(2, 120); // Counselor ID
      actionItemsSheet.setColumnWidth(3, 150); // Counselor Name
      actionItemsSheet.setColumnWidth(4, 300); // Description
    }
    
    // Initialize General Notes sheet
    let notesSheet = ss.getSheetByName(SHEET_NAMES.NOTES);
    if (!notesSheet) {
      notesSheet = ss.insertSheet(SHEET_NAMES.NOTES);
      
      const notesHeaders = [
        'ID', 'Title', 'Category', 'Content', 'Tags',
        'Created By', 'Created At', 'Updated By', 'Updated At'
      ];
      
      notesSheet.getRange(1, 1, 1, notesHeaders.length).setValues([notesHeaders]);
      notesSheet.getRange(1, 1, 1, notesHeaders.length).setFontWeight('bold').setBackground('#e2e8f0');
      notesSheet.setFrozenRows(1);
      notesSheet.setFrozenColumns(2);
      
      // Set column widths
      notesSheet.setColumnWidth(1, 120); // ID
      notesSheet.setColumnWidth(2, 200); // Title
      notesSheet.setColumnWidth(3, 150); // Category
      notesSheet.setColumnWidth(4, 400); // Content
    }
    
    // Create a welcome message document
    createWelcomeMessage(getCurrentUserName());
    
    // Show success message
    const ui = SpreadsheetApp.getUi();
    ui.alert('✅ Success!', 'The Team Lead Dashboard has been initialized successfully. You can now start using all features.', ui.ButtonSet.OK);
    
    // Refresh the page to show the updated menus
    showDashboard();
    
    return true;
  } catch (error) {
    console.error('Error initializing spreadsheet: ' + error.message);
    
    // Show error message
    const ui = SpreadsheetApp.getUi();
    ui.alert('❌ Error', 'There was a problem initializing the dashboard: ' + error.message, ui.ButtonSet.OK);
    
    return false;
  }
}

/**
 * Check if system is initialized
 */
function isSystemInitialized() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // Check if required sheets exist
    const requiredSheets = [
      SHEET_NAMES.CONFIG, 
      SHEET_NAMES.TEAM_MEMBERS, 
      SHEET_NAMES.ONE_ON_ONES
    ];
    
    for (const sheetName of requiredSheets) {
      const sheet = ss.getSheetByName(sheetName);
      if (!sheet) {
        return false;
      }
    }
    
    return true;
  } catch (error) {
    console.error(`Error checking initialization: ${error.message}`);
    return false;
  }
}

/**
 * Show initialization prompt
 */
function showInitializationPrompt() {
  try {
    const ui = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body {
              font-family: 'Inter', sans-serif;
              margin: 0;
              padding: 24px;
              background: linear-gradient(135deg, #f8fafc, #f1f5f9);
              height: 100vh;
              box-sizing: border-box;
              color: #334155;
              display: flex;
              flex-direction: column;
              justify-content: center;
              align-items: center;
            }
            
            .container {
              max-width: 500px;
              background: white;
              border-radius: 24px;
              padding: 32px;
              box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
              text-align: center;
            }
            
            .logo {
              font-size: 48px;
              margin-bottom: 24px;
            }
            
            h1 {
              font-size: 24px;
              font-weight: 700;
              color: #1e293b;
              margin-bottom: 16px;
              background: linear-gradient(135deg, #5540af, #38bdf8);
              -webkit-background-clip: text;
              -webkit-text-fill-color: transparent;
            }
            
                        p {
              margin-bottom: 24px;
              line-height: 1.6;
            }
            
            .features {
              text-align: left;
              margin: 24px 0;
              padding: 16px;
              background-color: #f8fafc;
              border-radius: 16px;
              border: 1px solid #e2e8f0;
            }
            
            .feature {
              margin-bottom: 12px;
              display: flex;
              align-items: flex-start;
              gap: 12px;
            }
            
            .feature-icon {
              flex-shrink: 0;
              font-size: 20px;
            }
            
            .feature-text {
              margin: 0;
              font-size: 14px;
            }
            
            .btn {
              display: inline-flex;
              align-items: center;
              justify-content: center;
              padding: 12px 24px;
              font-weight: 600;
              font-size: 15px;
              border-radius: 12px;
              cursor: pointer;
              transition: all 0.2s cubic-bezier(0.16, 1, 0.3, 1);
              margin: 8px;
              gap: 8px;
            }
            
            .btn-primary {
              background: linear-gradient(135deg, #5540af, #38bdf8);
              color: white;
              border: none;
              box-shadow: 0 4px 12px rgba(85, 64, 175, 0.25);
            }
            
            .btn-primary:hover {
              transform: translateY(-4px);
              box-shadow: 0 8px 20px rgba(85, 64, 175, 0.4);
            }
            
            .btn-secondary {
              background: white;
              color: #5540af;
              border: 1px solid #e2e8f0;
            }
            
            .btn-secondary:hover {
              background: #f8fafc;
              border-color: #cbd5e1;
            }
            
            .btn-icon {
              font-size: 18px;
            }
            
            .loading {
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: rgba(255, 255, 255, 0.9);
              backdrop-filter: blur(5px);
              display: flex;
              flex-direction: column;
              justify-content: center;
              align-items: center;
              z-index: 1000;
              display: none;
            }
            
            .loader {
              width: 64px;
              height: 64px;
              border-radius: 50%;
              position: relative;
              margin-bottom: 24px;
            }
            
            .loader:before, .loader:after {
              content: "";
              position: absolute;
              border-radius: 50%;
              animation: pulse 2s linear infinite;
            }
            
            .loader:before {
              width: 100%;
              height: 100%;
              background: linear-gradient(135deg, #5540af, #38bdf8);
              animation: pulse 2s linear infinite;
            }
            
            .loader:after {
              width: 75%;
              height: 75%;
              background: white;
              top: 12.5%;
              left: 12.5%;
              animation: pulse 2s linear infinite 1s;
            }
            
            @keyframes pulse {
              0% {
                transform: scale(0.8);
                opacity: 0.8;
              }
              50% {
                transform: scale(1.1);
                opacity: 0.6;
              }
              100% {
                transform: scale(0.8);
                opacity: 0.8;
              }
            }
            
            .loading-text {
              font-weight: 600;
              color: #1e293b;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="logo">🚀</div>
            <h1>Welcome to Team Lead Dashboard!</h1>
            <p>This dashboard needs to be initialized before you can use all its features. The initialization will create the necessary sheets and configure your dashboard.</p>
            
            <div class="features">
              <div class="feature">
                <span class="feature-icon">👥</span>
                <p class="feature-text"><strong>Team Management:</strong> Track team members, skills, and departments</p>
              </div>
              <div class="feature">
                <span class="feature-icon">🤝</span>
                <p class="feature-text"><strong>One-on-Ones:</strong> Schedule and document regular check-ins</p>
              </div>
              <div class="feature">
                <span class="feature-icon">✅</span>
                <p class="feature-text"><strong>Action Items:</strong> Track follow-ups and commitments</p>
              </div>
              <div class="feature">
                <span class="feature-icon">📊</span>
                <p class="feature-text"><strong>Analytics:</strong> Visualize team metrics and insights</p>
              </div>
            </div>
            
            <button class="btn btn-primary" onclick="initialize()">
              <span class="btn-icon">⚙️</span>
              <span>Initialize Dashboard</span>
            </button>
            <button class="btn btn-secondary" onclick="learnMore()">
              <span class="btn-icon">❓</span>
              <span>Learn More</span>
            </button>
          </div>
          
          <div class="loading" id="loadingOverlay">
            <div class="loader"></div>
            <div class="loading-text">Initializing your dashboard...</div>
          </div>
          
          <script>
            function initialize() {
              document.getElementById('loadingOverlay').style.display = 'flex';
              google.script.run
                .withSuccessHandler(function(result) {
                  document.getElementById('loadingOverlay').style.display = 'none';
                  if (result) {
                    // Success
                    google.script.run.showDashboard();
                  }
                })
                .withFailureHandler(function(error) {
                  document.getElementById('loadingOverlay').style.display = 'none';
                  alert('Error: ' + error);
                })
                .initializeSpreadsheet();
            }
            
            function learnMore() {
              google.script.run.showHelp();
            }
          </script>
        </body>
      </html>
    `)
    .setWidth(600)
    .setHeight(540)
    .setTitle('🚀 Welcome to Team Lead Dashboard');
    
    SpreadsheetApp.getUi().showModalDialog(ui, '🚀 Welcome to Team Lead Dashboard');
  } catch (error) {
    console.error(`Error showing initialization prompt: ${error.message}`);
    
    // Use a simple prompt as fallback
    const ui = SpreadsheetApp.getUi();
    const result = ui.alert('Initialize Dashboard', 
      'Welcome to Team Lead Dashboard! This sheet needs to be initialized before use. Would you like to initialize now?',
      ui.ButtonSet.YES_NO);
    
    if (result === ui.Button.YES) {
      initializeSpreadsheet();
    }
  }
}

/**
 * Show the main dashboard
 */
function showDashboard() {
  try {
    // Create a template with enhanced visuals
    const template = HtmlService.createTemplateFromFile('dashboard');
    
    // Inject dynamic user data - never hardcode
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName(),
      lastLogin: PropertiesService.getUserProperties().getProperty('lastOpened') || new Date().toISOString()
    };
    
    // Preload some metrics for faster rendering
    try {
      const teamMetrics = TeamService.getTeamMetrics();
      if (teamMetrics.success) {
        template.preloadedTeamMetrics = JSON.stringify(teamMetrics.data);
      }
    } catch (e) {
      console.log('Error preloading team metrics: ' + e.message);
    }
    
    const html = template.evaluate()
      .setTitle('🚀 Team Lead Dashboard')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .setWidth(1200)
      .setHeight(900);
    
    SpreadsheetApp.getUi().showSidebar(html);
    
    // Log dashboard view
    logFeatureUsage('showDashboard');
  } catch (error) {
    console.error(`Error showing dashboard: ${error.message}`);
    showErrorToast('Something went wrong showing the dashboard');
  }
}

/**
 * Show the one-on-one form for scheduling sessions
 * @param {string} id - Optional team member ID to pre-select
 */
function showOneOnOneForm(id) {
  try {
    // Create enhanced template
    const template = HtmlService.createTemplateFromFile('one-on-one-form');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName(),
      timestamp: new Date().toISOString()
    };
    
    // Pass team member ID if provided
    if (id) {
      template.selectedMemberId = id;
    }
    
    const html = template.evaluate()
      .setWidth(800)
      .setHeight(700)
      .setTitle('🤝 Schedule One-on-One');
    
    // Create enhanced UI with loading animation
    const enhancedHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body, html {
              height: 100%;
              margin: 0;
              padding: 0;
              overflow: hidden;
              font-family: 'Inter', sans-serif;
              background: linear-gradient(135deg, #f8fafc, #f1f5f9);
            }
            
            .container {
              position: relative;
              width: 100%;
              height: 100%;
            }
            
            .loading-overlay {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              animation: fadeOut 0.5s ease-out 0.8s forwards;
              z-index: 10;
            }
            
            @keyframes fadeOut {
              to { opacity: 0; visibility: hidden; }
            }
            
            .loading-card {
              width: 300px;
              background: white;
              border-radius: 16px;
              padding: 24px;
              box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -5px rgba(0, 0, 0, 0.04);
              display: flex;
              flex-direction: column;
              align-items: center;
            }
            
            .calendar-icon {
              width: 80px;
              height: 80px;
              margin-bottom: 16px;
              position: relative;
            }
            
            .calendar-base {
              position: absolute;
              width: 100%;
              height: 100%;
              border-radius: 8px;
              background: linear-gradient(135deg, #5540af, #38bdf8);
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              color: white;
              box-shadow: 0 8px 16px rgba(85, 64, 175, 0.25);
            }
            
            .calendar-month {
              font-size: 12px;
              font-weight: 600;
              text-transform: uppercase;
              letter-spacing: 0.05em;
              margin-bottom: 2px;
            }
            
            .calendar-day {
              font-size: 28px;
              font-weight: 700;
              line-height: 1;
            }
            
            .blob {
              position: absolute;
              background: rgba(85, 64, 175, 0.15);
              border-radius: 50%;
              filter: blur(10px);
              z-index: -1;
              animation: pulse 3s ease-in-out infinite alternate;
            }
            
            .blob-1 {
              top: -30px;
              left: -30px;
              width: 100px;
              height: 100px;
              animation-delay: 0s;
            }
            
            .blob-2 {
              bottom: -20px;
              right: -40px;
              width: 120px;
              height: 120px;
              animation-delay: 0.5s;
            }
            
            @keyframes pulse {
              0% { transform: scale(1); opacity: 0.5; }
              100% { transform: scale(1.2); opacity: 0.8; }
            }
            
            .loading-title {
              font-size: 18px;
              font-weight: 600;
              color: #1e293b;
              margin-bottom: 8px;
            }
            
            .loading-text {
              font-size: 14px;
              color: #64748b;
              text-align: center;
            }
            
            .progress {
              width: 100%;
              height: 4px;
              background-color: #e2e8f0;
              border-radius: 2px;
              margin-top: 20px;
              overflow: hidden;
              position: relative;
            }
            
            .progress-bar {
              height: 100%;
              width: 30%;
              background: linear-gradient(90deg, #5540af, #38bdf8);
              border-radius: 2px;
              position: absolute;
              animation: progress 1.2s ease-in-out infinite;
            }
            
            @keyframes progress {
              0% { left: -30%; width: 30%; }
              100% { left: 100%; width: 30%; }
            }
            
            iframe {
              width: 100%;
              height: 100%;
              border: none;
              position: relative;
              opacity: 0;
              animation: fadeIn 0.4s ease-out 1s forwards;
            }
            
            @keyframes fadeIn {
              to { opacity: 1; }
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="loading-overlay">
              <div class="loading-card">
                <div class="calendar-icon">
                  <div class="blob blob-1"></div>
                  <div class="blob blob-2"></div>
                  <div class="calendar-base">
                    <div class="calendar-month">${getCurrentMonth()}</div>
                    <div class="calendar-day">${getCurrentDay()}</div>
                  </div>
                </div>
                <div class="loading-title">Preparing Form</div>
                <div class="loading-text">Loading one-on-one session template and team data...</div>
                <div class="progress">
                  <div class="progress-bar"></div>
                </div>
              </div>
            </div>
            
            <iframe src="${html.getUrl()}" frameborder="0"></iframe>
          </div>
          
          <script>
            function getCurrentMonth() {
              return new Date().toLocaleString('default', { month: 'short' });
            }
            
            function getCurrentDay() {
              return new Date().getDate();
            }
          </script>
        </body>
      </html>
    `)
    .setWidth(800)
    .setHeight(700)
    .setTitle('🤝 Schedule One-on-One');
    
    SpreadsheetApp.getUi().showModalDialog(enhancedHtml, '🤝 Schedule One-on-One');
    
    // Log usage for analytics
    logFeatureUsage('showOneOnOneForm');
  } catch (error) {
    console.error(`Error showing one-on-one form: ${error.message}`);
    showErrorToast('Something went wrong showing the one-on-one form');
  }
}

/**
 * Show the one-on-one notes view
 */
function showOneOnOneNotes() {
  try {
    const template = HtmlService.createTemplateFromFile('one-on-one-notes');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setTitle('📝 One-on-One Notes')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .setWidth(1200)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showSidebar(html);
    
    // Log usage for analytics
    logFeatureUsage('showOneOnOneNotes');
  } catch (error) {
    console.error(`Error showing one-on-one notes: ${error.message}`);
    showErrorToast('Something went wrong showing one-on-one notes');
  }
}

/**
 * Show one-on-one dashboard
 */
function showOneOnOneDashboard() {
  try {
    const template = HtmlService.createTemplateFromFile('one-on-one-dashboard');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setTitle('📊 One-on-One Analytics')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .setWidth(1200)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showSidebar(html);
    
    // Log usage for analytics
    logFeatureUsage('showOneOnOneDashboard');
  } catch (error) {
    console.error(`Error showing one-on-one dashboard: ${error.message}`);
    showErrorToast('Something went wrong showing one-on-one analytics');
  }
}

/**
 * Show one-on-one session view
 * @param {string} id - Session ID to view
 */
function showOneOnOneSession(id) {
  try {
    if (!id) {
      showErrorToast('Session ID is required to view a one-on-one session');
      return;
    }
    
    const template = HtmlService.createTemplateFromFile('one-on-one-session');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    // Set session ID for the template
    template.sessionId = id;
    
    const html = template.evaluate()
      .setWidth(800)
      .setHeight(700)
      .setTitle('📝 One-on-One Session');
    
    // Create enhanced session view
    const finalUrl = html.getUrl() + '?id=' + id;
    const enhancedHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body, html {
              height: 100%;
              margin: 0;
              padding: 0;
              overflow: hidden;
              font-family: 'Inter', sans-serif;
            }
            
            .container {
              position: relative;
              width: 100%;
              height: 100%;
              background-color: #f8fafc;
            }
            
            .loading-overlay {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              display: flex;
              justify-content: center;
              align-items: center;
              z-index: 10;
              animation: fadeOut 0.5s ease-out 0.8s forwards;
            }
            
            @keyframes fadeOut {
              to { opacity: 0; visibility: hidden; }
            }
            
            .session-card {
              position: relative;
              width: 400px;
              background: white;
              border-radius: 16px;
              box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
              overflow: hidden;
              padding-bottom: 24px;
            }
            
            .session-header {
              background: linear-gradient(135deg, #5540af, #38bdf8);
              color: white;
              padding: 24px;
              position: relative;
              overflow: hidden;
            }
            
            .session-title {
              font-size: 22px;
              font-weight: 700;
              margin-bottom: 8px;
              position: relative;
              z-index: 2;
            }
            
            .session-subtitle {
              font-size: 14px;
              opacity: 0.9;
              position: relative;
              z-index: 2;
            }
            
            .session-shape {
              position: absolute;
              bottom: -30px;
              right: -30px;
              width: 180px;
              height: 180px;
              border-radius: 50%;
              background: rgba(255, 255, 255, 0.1);
              z-index: 1;
            }
            
            .session-shape-2 {
              position: absolute;
              top: -40px;
              left: -40px;
              width: 120px;
              height: 120px;
              border-radius: 50%;
              background: rgba(255, 255, 255, 0.1);
              z-index: 1;
            }
            
            .session-icon {
              position: absolute;
              bottom: 20px;
              right: 20px;
              font-size: 36px;
              opacity: 0.8;
              z-index: 2;
            }
            
            .session-content {
              padding: 24px;
              position: relative;
            }
            
            .session-loading {
              display: flex;
              align-items: center;
              margin-bottom: 16px;
            }
            
            .session-loading-icon {
              width: 40px;
              height: 40px;
              border-radius: 50%;
              background: #e2e8f0;
              margin-right: 16px;
              position: relative;
              overflow: hidden;
            }
            
            .session-loading-icon:after {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: linear-gradient(90deg, 
                transparent 0%, 
                rgba(255, 255, 255, 0.6) 50%, 
                transparent 100%);
              animation: shimmer 1.5s infinite;
            }
            
            @keyframes shimmer {
              0% { transform: translateX(-100%); }
              100% { transform: translateX(100%); }
            }
            
            .session-loading-text {
              flex: 1;
            }
            
            .session-loading-title {
              height: 12px;
              width: 60%;
              background: #e2e8f0;
              border-radius: 6px;
              margin-bottom: 8px;
              position: relative;
              overflow: hidden;
            }
            
            .session-loading-title:after {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: linear-gradient(90deg, 
                transparent 0%, 
                rgba(255, 255, 255, 0.6) 50%, 
                transparent 100%);
              animation: shimmer 1.5s infinite 0.2s;
            }
            
            .session-loading-subtitle {
              height: 8px;
              width: 80%;
              background: #e2e8f0;
              border-radius: 4px;
              position: relative;
              overflow: hidden;
            }
            
            .session-loading-subtitle:after {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: linear-gradient(90deg, 
                transparent 0%, 
                rgba(255, 255, 255, 0.6) 50%, 
                transparent 100%);
              animation: shimmer 1.5s infinite 0.4s;
            }
            
            .loading-spinner {
              margin: 8px auto 16px;
              width: 24px;
              height: 24px;
              border-radius: 50%;
              border: 3px solid #e2e8f0;
              border-top-color: #38bdf8;
              animation: spinner 1s linear infinite;
            }
            
            @keyframes spinner {
              to { transform: rotate(360deg); }
            }
            
            .loading-message {
              color: #64748b;
              font-size: 14px;
              text-align: center;
              margin-bottom: 0;
            }
            
            iframe {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              border: none;
              opacity: 0;
              animation: fadeIn 0.5s ease-out 1s forwards;
            }
            
            @keyframes fadeIn {
              to { opacity: 1; }
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="loading-overlay">
              <div class="session-card">
                <div class="session-header">
                  <div class="session-title">One-on-One Session</div>
                  <div class="session-subtitle">Loading session details...</div>
                  <div class="session-shape"></div>
                  <div class="session-shape-2"></div>
                  <div class="session-icon">📝</div>
                </div>
                <div class="session-content">
                  <div class="session-loading">
                    <div class="session-loading-icon"></div>
                    <div class="session-loading-text">
                      <div class="session-loading-title"></div>
                      <div class="session-loading-subtitle"></div>
                    </div>
                  </div>
                  <div class="session-loading">
                    <div class="session-loading-icon"></div>
                    <div class="session-loading-text">
                      <div class="session-loading-title"></div>
                      <div class="session-loading-subtitle"></div>
                    </div>
                  </div>
                  <div class="session-loading">
                    <div class="session-loading-icon"></div>
                    <div class="session-loading-text">
                      <div class="session-loading-title"></div>
                      <div class="session-loading-subtitle"></div>
                    </div>
                  </div>
                  <div class="loading-spinner"></div>
                  <p class="loading-message">Retrieving session data...</p>
                </div>
              </div>
            </div>
            
            <iframe src="${finalUrl}" frameborder="0"></iframe>
          </div>
        </body>
      </html>
    `)
    .setWidth(800)
    .setHeight(700)
    .setTitle('📝 One-on-One Session');
    
    SpreadsheetApp.getUi().showModalDialog(enhancedHtml, '📝 One-on-One Session');
    
    // Log usage for analytics
    logFeatureUsage('showOneOnOneSession');
  } catch (error) {
    console.error(`Error showing one-on-one session: ${error.message}`);
    showErrorToast('Something went wrong showing the one-on-one session');
  }
}

/**
 * Show one-on-one feedback forms
 */
function showOneOnOneFeedbackForms() {
  try {
    const template = HtmlService.createTemplateFromFile('one-on-one-feedback');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(800)
      .setHeight(600)
      .setTitle('💯 One-on-One Feedback');
    
    SpreadsheetApp.getUi().showModalDialog(html, '💯 One-on-One Feedback');
    
    // Log usage for analytics
    logFeatureUsage('showOneOnOneFeedbackForms');
  } catch (error) {
    console.error(`Error showing one-on-one feedback forms: ${error.message}`);
    showErrorToast('Something went wrong showing feedback forms');
  }
}

/**
 * Show one-on-one export dialog
 */
function showOneOnOneExport() {
  try {
    const template = HtmlService.createTemplateFromFile('one-on-one-export');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(600)
      .setHeight(400)
      .setTitle('📤 Export One-on-Ones');
    
    SpreadsheetApp.getUi().showModalDialog(html, '📤 Export One-on-Ones');
    
    // Log usage for analytics
    logFeatureUsage('showOneOnOneExport');
  } catch (error) {
    console.error(`Error showing one-on-one export: ${error.message}`);
    showErrorToast('Something went wrong showing one-on-one export');
  }
}

/**
 * Show action items form
 * @param {string} counselorId - Optional team member ID to pre-select
 */
function showActionItemsForm(counselorId) {
  try {
    const template = HtmlService.createTemplateFromFile('action-items-form');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    // Pass counselor ID if provided
    if (counselorId) {
      template.counselorId = counselorId;
    }
    
    const html = template.evaluate()
      .setWidth(700)
      .setHeight(600)
      .setTitle('✅ Action Items');
    
    SpreadsheetApp.getUi().showModalDialog(html, '✅ Action Items');
    
    // Log usage for analytics
    logFeatureUsage('showActionItemsForm');
  } catch (error) {
    console.error(`Error showing action items form: ${error.message}`);
    showErrorToast('Something went wrong showing action items form');
  }
}

/**
 * Show action items view
 */
function showActionItemsView() {
  try {
    const template = HtmlService.createTemplateFromFile('action-items-view');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setTitle('✅ Action Items')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .setWidth(1200)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showSidebar(html);
    
    // Log usage for analytics
    logFeatureUsage('showActionItemsView');
  } catch (error) {
    console.error(`Error showing action items view: ${error.message}`);
    showErrorToast('Something went wrong showing action items');
  }
}

/**
 * Show action items progress tracking
 */
function showActionItemsProgress() {
  try {
    const template = HtmlService.createTemplateFromFile('action-items-progress');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setTitle('🏆 Action Items Progress')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .setWidth(1200)
      .setHeight(800);
    
    SpreadsheetApp.getUi().showSidebar(html);
    
    // Log usage for analytics
    logFeatureUsage('showActionItemsProgress');
  } catch (error) {
    console.error(`Error showing action items progress: ${error.message}`);
    showErrorToast('Something went wrong showing action items progress');
  }
}

/**
 * Show settings dialog
 */
function showSettings() {
  try {
    const template = HtmlService.createTemplateFromFile('settings');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(700)
      .setHeight(600)
      .setTitle('⚙️ Settings');
    
    SpreadsheetApp.getUi().showModalDialog(html, '⚙️ Settings');
    
    // Log usage for analytics
    logFeatureUsage('showSettings');
  } catch (error) {
    console.error(`Error showing settings: ${error.message}`);
    showErrorToast('Something went wrong showing settings');
  }
}

/**
 * Show templates management
 */
function showTemplates() {
  try {
    const template = HtmlService.createTemplateFromFile('templates');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(800)
      .setHeight(600)
      .setTitle('🧩 Templates');
    
    SpreadsheetApp.getUi().showModalDialog(html, '🧩 Templates');
    
    // Log usage for analytics
    logFeatureUsage('showTemplates');
  } catch (error) {
    console.error(`Error showing templates: ${error.message}`);
    showErrorToast('Something went wrong showing templates');
  }
}

/**
 * Show calendar sync dialog
 */
function showCalendarSync() {
  try {
    const template = HtmlService.createTemplateFromFile('calendar-sync');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(700)
      .setHeight(500)
      .setTitle('🔄 Calendar Sync');
    
    SpreadsheetApp.getUi().showModalDialog(html, '🔄 Calendar Sync');
    
    // Log usage for analytics
    logFeatureUsage('showCalendarSync');
  } catch (error) {
    console.error(`Error showing calendar sync: ${error.message}`);
    showErrorToast('Something went wrong showing calendar sync');
  }
}

/**
 * Show theme settings dialog
 */
function showThemeSettings() {
  try {
    const template = HtmlService.createTemplateFromFile('theme-settings');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(700)
      .setHeight(600)
      .setTitle('🎨 Theme Settings');
    
    SpreadsheetApp.getUi().showModalDialog(html, '🎨 Theme Settings');
    
    // Log usage for analytics
    logFeatureUsage('showThemeSettings');
  } catch (error) {
    console.error(`Error showing theme settings: ${error.message}`);
    showErrorToast('Something went wrong showing theme settings');
  }
}

/**
 * Show help resources
 */
function showHelp() {
  try {
    const template = HtmlService.createTemplateFromFile('help');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setWidth(800)
      .setHeight(600)
      .setTitle('❓ Help & Resources');
    
    SpreadsheetApp.getUi().showModalDialog(html, '❓ Help & Resources');
    
    // Log usage for analytics
    logFeatureUsage('showHelp');
  } catch (error) {
    console.error(`Error showing help: ${error.message}`);
    showErrorToast('Something went wrong showing help resources');
  }
}

/**
 * Create a welcome message document when initializing the dashboard
 */
function createWelcomeMessage(userName) {
  try {
    // Create the welcome message in Notes sheet
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let notesSheet = ss.getSheetByName(SHEET_NAMES.NOTES);
    
    if (!notesSheet) return;
    
    const noteId = 'note_' + generateUniqueId();
    const now = new Date();
    
    const welcomeNote = [
      noteId,
      '🚀 Welcome to Team Lead Dashboard',
      'Introduction',
      `Welcome, ${userName}! This dashboard helps you manage your team, track one-on-one meetings, and follow up on action items. To get started, you can add team members, schedule one-on-ones, or explore the dashboard features. If you need help, click on the "Help & Resources" option in the menu.`,
      'welcome,introduction,getting-started',
      getCurrentUserEmail(),
      now,
      getCurrentUserEmail(),
      now
    ];
    
    notesSheet.appendRow(welcomeNote);
    
    return true;
  } catch (e) {
    console.error(`Error creating welcome message: ${e.message}`);
    return false;
  }
}

/**
 * Get configuration value from Config sheet
 */
function getConfigValue(key) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName(SHEET_NAMES.CONFIG);
    
    if (!configSheet) return null;
    
    const data = configSheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === key) {
        return data[i][1];
      }
    }
    
    return null;
  } catch (error) {
    console.error(`Error getting config value: ${error.message}`);
    return null;
  }
}

/**
 * Generate a unique ID for database entries
 */
function generateUniqueId() {
  return Utilities.getUuid().substring(0, 8);
}

/**
 * Get today's date formatted as YYYY-MM-DD
 */
function getTodayFormatted() {
  const today = new Date();
  return Utilities.formatDate(today, Session.getScriptTimeZone(), 'yyyy-MM-dd');
}

/**
 * Get current month name (for display purposes)
 */
function getCurrentMonth() {
  return new Date().toLocaleString('default', { month: 'short' });
}

/**
 * Get current day of month
 */
function getCurrentDay() {
  return new Date().getDate();
}
/**
 * Show manager one-on-one form for creating or editing sessions
 * @param {string} id - Optional session ID to edit
 */
function showManagerOneOnOneForm(id) {
  try {
    // Create enhanced template with cutting-edge visuals
    const template = HtmlService.createTemplateFromFile('manager-one-on-one-form');
    
    // Inject dynamic user data - never hardcode
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName(),
      timestamp: new Date().toISOString()
    };
    
    // Pass session ID if provided
    if (id) {
      template.sessionId = id;
    }
    
    const html = template.evaluate()
      .setWidth(800)
      .setHeight(700)
      .setTitle('🔄 Manager One-on-One');
    
    // Create enhanced UI with loading animation and visual effects
    const enhancedHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body, html {
              height: 100%;
              margin: 0;
              padding: 0;
              overflow: hidden;
              font-family: 'Inter', sans-serif;
              background: linear-gradient(135deg, #f8fafc, #f1f5f9);
            }
            
            .container {
              position: relative;
              width: 100%;
              height: 100%;
            }
            
            .loading-overlay {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              animation: fadeOut 0.5s ease-out 0.8s forwards;
              z-index: 10;
            }
            
            @keyframes fadeOut {
              to { opacity: 0; visibility: hidden; }
            }
            
            .loading-card {
              width: 300px;
              background: white;
              border-radius: 16px;
              padding: 24px;
              box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -5px rgba(0, 0, 0, 0.04);
              display: flex;
              flex-direction: column;
              align-items: center;
              position: relative;
              overflow: hidden;
            }
            
            .loading-card::after {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 4px;
              background: linear-gradient(90deg, #5540af, #38bdf8);
              animation: loadingBar 2s infinite linear;
              background-size: 200% 100%;
            }
            
            @keyframes loadingBar {
              0% { background-position: 100% 0; }
              100% { background-position: -100% 0; }
            }
            
            .loading-icon {
              display: flex;
              align-items: center;
              justify-content: center;
              width: 80px;
              height: 80px;
              margin-bottom: 24px;
              position: relative;
            }
            
            .loading-icon-bg {
              width: 100%;
              height: 100%;
              border-radius: 50%;
              background: linear-gradient(135deg, #5540af, #38bdf8);
              box-shadow: 0 12px 24px -8px rgba(85, 64, 175, 0.5);
              display: flex;
              align-items: center;
              justify-content: center;
            }
            
            .loading-emoji {
              font-size: 32px;
              position: relative;
              animation: pulse 1.5s infinite alternate;
            }
            
            @keyframes pulse {
              from { transform: scale(0.9); }
              to { transform: scale(1.1); }
            }
            
            .loading-ring {
              position: absolute;
              top: -8px;
              left: -8px;
              width: calc(100% + 16px);
              height: calc(100% + 16px);
              border-radius: 50%;
              border: 2px solid transparent;
              border-top-color: rgba(85, 64, 175, 0.6);
              border-right-color: rgba(85, 64, 175, 0.3);
              border-bottom-color: rgba(56, 189, 248, 0.6);
              border-left-color: rgba(56, 189, 248, 0.3);
              animation: spin 3s infinite linear;
            }
            
            .loading-ring:nth-child(2) {
              top: -16px;
              left: -16px;
              width: calc(100% + 32px);
              height: calc(100% + 32px);
              animation-direction: reverse;
              animation-duration: 4s;
            }
            
            @keyframes spin {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
            }
            
            .loading-title {
              font-size: 18px;
              font-weight: 600;
              color: #1e293b;
              margin-bottom: 8px;
              background: linear-gradient(90deg, #5540af, #38bdf8);
              -webkit-background-clip: text;
              -webkit-text-fill-color: transparent;
            }
            
            .loading-text {
              font-size: 14px;
              color: #64748b;
              text-align: center;
              margin-bottom: 16px;
            }
            
            .loading-dots {
              display: flex;
              gap: 6px;
              margin-top: 8px;
            }
            
            .loading-dot {
              width: 8px;
              height: 8px;
              border-radius: 50%;
              background: linear-gradient(135deg, #5540af, #38bdf8);
              animation: dotPulse 1.5s infinite;
              transform: scale(0);
            }
            
            .loading-dot:nth-child(2) { animation-delay: 0.2s; }
            .loading-dot:nth-child(3) { animation-delay: 0.4s; }
            
            @keyframes dotPulse {
              0%, 100% { transform: scale(0); }
              50% { transform: scale(1); }
            }
            
            iframe {
              width: 100%;
              height: 100%;
              border: none;
              position: relative;
              opacity: 0;
              animation: fadeIn 0.4s ease-out 1s forwards;
            }
            
            @keyframes fadeIn {
              to { opacity: 1; }
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="loading-overlay">
              <div class="loading-card">
                <div class="loading-icon">
                  <div class="loading-ring"></div>
                  <div class="loading-ring"></div>
                  <div class="loading-icon-bg">
                    <span class="loading-emoji">🔄</span>
                  </div>
                </div>
                <div class="loading-title">${id ? 'Editing' : 'Creating'} One-on-One</div>
                <div class="loading-text">Loading manager one-on-one form and preparing your data...</div>
                <div class="loading-dots">
                  <div class="loading-dot"></div>
                  <div class="loading-dot"></div>
                  <div class="loading-dot"></div>
                </div>
              </div>
            </div>
            
            <iframe src="${html.getUrl()}" frameborder="0"></iframe>
          </div>
        </body>
      </html>
    `)
    .setWidth(800)
    .setHeight(700)
    .setTitle('🔄 Manager One-on-One');
    
    // Show the dialog
    SpreadsheetApp.getUi().showModalDialog(enhancedHtml, '🔄 Manager One-on-One');
    
    // Log usage for analytics
    logFeatureUsage('showManagerOneOnOneForm');
  } catch (error) {
    console.error(`Error showing manager one-on-one form: ${error.message}`);
    showErrorToast('Something went wrong showing the manager one-on-one form');
  }
}

/**
 * Show manager one-on-one notes view
 */
function showManagerOneOnOneNotes() {
  try {
    // Create enhanced template
    const template = HtmlService.createTemplateFromFile('manager-one-on-one-notes');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setTitle('📝 Manager One-on-One Notes')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .setWidth(1200)
      .setHeight(800);
    
    // Create enhanced sidebar with animated elements
    const enhancedHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body, html {
              height: 100%;
              margin: 0;
              padding: 0;
              overflow: hidden;
              font-family: 'Inter', sans-serif;
            }
            
            .sidebar-container {
              position: relative;
              width: 100%;
              height: 100%;
              overflow: hidden;
            }
            
            .sidebar-header {
              position: absolute;
              top: 0;
              left: 0;
              right: 0;
              height: 4px;
              background: linear-gradient(90deg, #5540af, #38bdf8);
              z-index: 10;
              animation: shimmer 2s infinite linear;
              background-size: 200% 100%;
            }
            
            @keyframes shimmer {
              0% { background-position: 100% 0; }
              100% { background-position: -100% 0; }
            }
            
            iframe {
              width: 100%;
              height: 100%;
              border: none;
            }
          </style>
        </head>
        <body>
          <div class="sidebar-container">
            <div class="sidebar-header"></div>
            <iframe src="${html.getUrl()}" frameborder="0"></iframe>
          </div>
        </body>
      </html>
    `)
    .setTitle('📝 Manager One-on-One Notes')
    .setSandboxMode(HtmlService.SandboxMode.IFRAME)
    .setWidth(1200)
    .setHeight(800);
    
    SpreadsheetApp.getUi().showSidebar(enhancedHtml);
    
    // Log usage for analytics
    logFeatureUsage('showManagerOneOnOneNotes');
  } catch (error) {
    console.error(`Error showing manager one-on-one notes: ${error.message}`);
    showErrorToast('Something went wrong showing the manager one-on-one notes');
  }
}

/**
 * Show manager one-on-one dashboard
 */
function showManagerOneOnOneDashboard() {
  try {
    // Create enhanced template
    const template = HtmlService.createTemplateFromFile('manager-one-on-one-dashboard');
    
    // Add dynamic user data
    template.currentUser = {
      email: getCurrentUserEmail(),
      name: getCurrentUserName()
    };
    
    const html = template.evaluate()
      .setTitle('📊 Manager One-on-One Analytics')
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .setWidth(1200)
      .setHeight(900);
    
    // Create enhanced sidebar with animated elements
    const enhancedHtml = HtmlService.createHtmlOutput(`
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            body, html {
              height: 100%;
              margin: 0;
              padding: 0;
              overflow: hidden;
              font-family: 'Inter', sans-serif;
            }
            
            .dashboard-container {
              position: relative;
              width: 100%;
              height: 100%;
              overflow: hidden;
            }
            
            .dashboard-loader {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: #f8fafc;
              z-index: 10;
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              animation: fadeOut 0.5s ease-out 2.5s forwards;
            }
            
            @keyframes fadeOut {
              to { opacity: 0; visibility: hidden; }
            }
            
            .charts-loader {
              position: relative;
              width: 100px;
              height: 100px;
              margin-bottom: 24px;
            }
            
            .chart-item {
              position: absolute;
              background: linear-gradient(135deg, #5540af, #38bdf8);
              border-radius: 8px;
              opacity: 0;
            }
            
            .chart-bar-1 {
              width: 16px;
              height: 60px;
              bottom: 0;
              left: 0;
              animation: chartBar 2s infinite;
            }
            
            .chart-bar-2 {
              width: 16px;
              height: 80px;
              bottom: 0;
              left: 28px;
              animation: chartBar 2s infinite 0.2s;
            }
            
            .chart-bar-3 {
              width: 16px;
              height: 40px;
              bottom: 0;
              left: 56px;
              animation: chartBar 2s infinite 0.4s;
            }
            
            .chart-bar-4 {
              width: 16px;
              height: 70px;
              bottom: 0;
              left: 84px;
              animation: chartBar 2s infinite 0.6s;
            }
            
            .chart-pie {
              width: 40px;
              height: 40px;
              border-radius: 50%;
              top: 0;
              right: 0;
              animation: chartPie 2s infinite 0.3s;
            }
            
            @keyframes chartBar {
              0%, 100% { 
                opacity: 0.3;
                transform: scaleY(0.8);
              }
              50% { 
                opacity: 1;
                transform: scaleY(1);
              }
            }
            
            @keyframes chartPie {
              0%, 100% { 
                opacity: 0.3;
                transform: scale(0.8);
              }
              50% { 
                opacity: 1;
                transform: scale(1);
              }
            }
            
            .dashboard-title {
              font-size: 18px;
              font-weight: 600;
              color: #1e293b;
              margin-bottom: 8px;
            }
            
            .dashboard-subtitle {
              font-size: 14px;
              color: #64748b;
              text-align: center;
            }
            
            iframe {
              width: 100%;
              height: 100%;
              border: none;
              position: relative;
              z-index: 5;
            }
          </style>
        </head>
        <body>
          <div class="dashboard-container">
            <div class="dashboard-loader">
              <div class="charts-loader">
                <div class="chart-item chart-bar-1"></div>
                <div class="chart-item chart-bar-2"></div>
                <div class="chart-item chart-bar-3"></div>
                <div class="chart-item chart-bar-4"></div>
                <div class="chart-item chart-pie"></div>
              </div>
              <div class="dashboard-title">Preparing Analytics</div>
              <div class="dashboard-subtitle">Loading your one-on-one data and generating insights...</div>
            </div>
            <iframe src="${html.getUrl()}" frameborder="0"></iframe>
          </div>
        </body>
      </html>
    `)
    .setTitle('📊 Manager One-on-One Analytics')
    .setSandboxMode(HtmlService.SandboxMode.IFRAME)
    .setWidth(1200)
    .setHeight(900);
    
    SpreadsheetApp.getUi().showSidebar(enhancedHtml);
    
    // Log usage for analytics
    logFeatureUsage('showManagerOneOnOneDashboard');
  } catch (error) {
    console.error(`Error showing manager one-on-one dashboard: ${error.message}`);
    showErrorToast('Something went wrong showing the manager one-on-one dashboard');
  }
}            
            
